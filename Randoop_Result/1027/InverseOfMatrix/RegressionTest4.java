package InverseOfMatrix;

import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class RegressionTest4 {

    public static boolean debug = false;

    @Test
    public void test2001() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2001");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray30 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray31 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray32 = new double[][] {};
        double[][] doubleArray33 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray32);
        int[] intArray34 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray33, intArray34);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray31, intArray34);
        double[][] doubleArray37 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray31);
        double[][] doubleArray38 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray37);
        double[][] doubleArray39 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray38);
        double[][] doubleArray40 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray39);
        java.lang.Class<?> wildcardClass41 = doubleArray39.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertNotNull(wildcardClass41);
    }

    @Test
    public void test2002() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2002");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[] doubleArray9 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray16 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray23 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray30 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray31 = new double[][] { doubleArray9, doubleArray16, doubleArray23, doubleArray30 };
        double[][] doubleArray32 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray31);
        double[] doubleArray34 = new double[] { 1 };
        double[] doubleArray36 = new double[] { 1 };
        double[] doubleArray38 = new double[] { 1 };
        double[] doubleArray40 = new double[] { 1 };
        double[] doubleArray42 = new double[] { 1 };
        double[][] doubleArray43 = new double[][] { doubleArray34, doubleArray36, doubleArray38, doubleArray40, doubleArray42 };
        int[] intArray44 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray43, intArray44);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray32, intArray44);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray1, intArray44);
        double[][] doubleArray48 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray49 = new double[][] {};
        double[][] doubleArray50 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray49);
        double[][] doubleArray51 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray49);
        double[][] doubleArray52 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray49);
        double[][] doubleArray53 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray49);
        double[][] doubleArray54 = new double[][] {};
        double[][] doubleArray55 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray54);
        double[][] doubleArray56 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray55);
        double[] doubleArray60 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray64 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray68 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray72 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray73 = new double[][] { doubleArray60, doubleArray64, doubleArray68, doubleArray72 };
        double[] doubleArray75 = new double[] { 1 };
        double[] doubleArray77 = new double[] { 1 };
        double[] doubleArray79 = new double[] { 1 };
        double[] doubleArray81 = new double[] { 1 };
        double[] doubleArray83 = new double[] { 1 };
        double[][] doubleArray84 = new double[][] { doubleArray75, doubleArray77, doubleArray79, doubleArray81, doubleArray83 };
        int[] intArray85 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray84, intArray85);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray73, intArray85);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray56, intArray85);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray49, intArray85);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray48, intArray85);
        double[][] doubleArray91 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray48);
        double[][] doubleArray92 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray91);
        java.lang.Class<?> wildcardClass93 = doubleArray91.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray75), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray77), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray79), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray81), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray83), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray84);
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray85), "[]");
        org.junit.Assert.assertNotNull(doubleArray91);
        org.junit.Assert.assertNotNull(doubleArray92);
        org.junit.Assert.assertNotNull(wildcardClass93);
    }

    @Test
    public void test2003() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2003");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[][] doubleArray5 = new double[][] {};
        double[][] doubleArray6 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray5);
        double[][] doubleArray7 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray6);
        double[][] doubleArray8 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray6);
        double[][] doubleArray9 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray6);
        double[][] doubleArray10 = new double[][] {};
        double[][] doubleArray11 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray10);
        double[][] doubleArray12 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray11);
        double[][] doubleArray13 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray12);
        double[][] doubleArray14 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray13);
        double[][] doubleArray15 = new double[][] {};
        double[][] doubleArray16 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray15);
        double[] doubleArray23 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray30 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray37 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray44 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray45 = new double[][] { doubleArray23, doubleArray30, doubleArray37, doubleArray44 };
        double[][] doubleArray46 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray45);
        double[][] doubleArray47 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray45);
        double[][] doubleArray48 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray45);
        double[][] doubleArray49 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray48);
        double[] doubleArray56 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray63 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray70 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray77 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray78 = new double[][] { doubleArray56, doubleArray63, doubleArray70, doubleArray77 };
        double[][] doubleArray79 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray78);
        double[] doubleArray81 = new double[] { 1 };
        double[] doubleArray83 = new double[] { 1 };
        double[] doubleArray85 = new double[] { 1 };
        double[] doubleArray87 = new double[] { 1 };
        double[] doubleArray89 = new double[] { 1 };
        double[][] doubleArray90 = new double[][] { doubleArray81, doubleArray83, doubleArray85, doubleArray87, doubleArray89 };
        int[] intArray91 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray90, intArray91);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray79, intArray91);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray49, intArray91);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray16, intArray91);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray14, intArray91);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray9, intArray91);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray4, intArray91);
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray70), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray77), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertNotNull(doubleArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray81), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray83), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray85), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray87), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray89), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray90);
        org.junit.Assert.assertNotNull(intArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray91), "[]");
    }

    @Test
    public void test2004() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2004");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        int[] intArray2 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray1, intArray2);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray5 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray6 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray5);
        double[][] doubleArray7 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray5);
        double[][] doubleArray8 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray5);
        double[][] doubleArray9 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray8);
        double[][] doubleArray10 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray9);
        double[][] doubleArray11 = null;
        double[][] doubleArray12 = new double[][] {};
        double[][] doubleArray13 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray12);
        double[][] doubleArray14 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray12);
        double[][] doubleArray15 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray14);
        double[][] doubleArray16 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray15);
        double[][] doubleArray17 = new double[][] {};
        double[][] doubleArray18 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray17);
        double[][] doubleArray19 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray18);
        double[] doubleArray23 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray27 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray31 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray35 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray36 = new double[][] { doubleArray23, doubleArray27, doubleArray31, doubleArray35 };
        double[] doubleArray38 = new double[] { 1 };
        double[] doubleArray40 = new double[] { 1 };
        double[] doubleArray42 = new double[] { 1 };
        double[] doubleArray44 = new double[] { 1 };
        double[] doubleArray46 = new double[] { 1 };
        double[][] doubleArray47 = new double[][] { doubleArray38, doubleArray40, doubleArray42, doubleArray44, doubleArray46 };
        int[] intArray48 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray47, intArray48);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray36, intArray48);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray19, intArray48);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray15, intArray48);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray11, intArray48);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray10, intArray48);
        java.lang.Class<?> wildcardClass55 = doubleArray10.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[]");
        org.junit.Assert.assertNotNull(wildcardClass55);
    }

    @Test
    public void test2005() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2005");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray30 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray29);
        double[][] doubleArray31 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        double[][] doubleArray32 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray31);
        double[][] doubleArray33 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray31);
        double[][] doubleArray34 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray33);
        double[][] doubleArray35 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray33);
        double[][] doubleArray36 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray33);
        double[][] doubleArray37 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray33);
        double[][] doubleArray38 = new double[][] {};
        double[][] doubleArray39 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray38);
        double[][] doubleArray40 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray39);
        double[][] doubleArray41 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray39);
        double[][] doubleArray42 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray39);
        double[][] doubleArray43 = new double[][] {};
        double[][] doubleArray44 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray43);
        double[][] doubleArray45 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray43);
        double[][] doubleArray46 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray43);
        double[][] doubleArray47 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray43);
        double[][] doubleArray48 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray47);
        double[][] doubleArray49 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray47);
        double[][] doubleArray50 = new double[][] {};
        double[][] doubleArray51 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray50);
        int[] intArray52 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray51, intArray52);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray49, intArray52);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray39, intArray52);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray37, intArray52);
        double[][] doubleArray57 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray37);
        double[][] doubleArray58 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray57);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[]");
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertNotNull(doubleArray58);
    }

    @Test
    public void test2006() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2006");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[] doubleArray6 = new double[] { 1 };
        double[] doubleArray8 = new double[] { 1 };
        double[] doubleArray10 = new double[] { 1 };
        double[] doubleArray12 = new double[] { 1 };
        double[] doubleArray14 = new double[] { 1 };
        double[][] doubleArray15 = new double[][] { doubleArray6, doubleArray8, doubleArray10, doubleArray12, doubleArray14 };
        int[] intArray16 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray15, intArray16);
        double[][] doubleArray18 = new double[][] {};
        double[][] doubleArray19 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray18);
        int[] intArray20 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray19, intArray20);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray15, intArray20);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray3, intArray20);
        double[][] doubleArray24 = new double[][] {};
        double[][] doubleArray25 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray24);
        double[] doubleArray27 = new double[] { 1 };
        double[] doubleArray29 = new double[] { 1 };
        double[] doubleArray31 = new double[] { 1 };
        double[] doubleArray33 = new double[] { 1 };
        double[] doubleArray35 = new double[] { 1 };
        double[][] doubleArray36 = new double[][] { doubleArray27, doubleArray29, doubleArray31, doubleArray33, doubleArray35 };
        int[] intArray37 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray36, intArray37);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray24, intArray37);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray3, intArray37);
        double[][] doubleArray41 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        java.lang.Class<?> wildcardClass42 = doubleArray3.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[]");
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertNotNull(wildcardClass42);
    }

    @Test
    public void test2007() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2007");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[] doubleArray31 = new double[] { 1 };
        double[] doubleArray33 = new double[] { 1 };
        double[] doubleArray35 = new double[] { 1 };
        double[] doubleArray37 = new double[] { 1 };
        double[] doubleArray39 = new double[] { 1 };
        double[][] doubleArray40 = new double[][] { doubleArray31, doubleArray33, doubleArray35, doubleArray37, doubleArray39 };
        int[] intArray41 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray40, intArray41);
        double[][] doubleArray43 = new double[][] {};
        double[][] doubleArray44 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray43);
        int[] intArray45 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray44, intArray45);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray40, intArray45);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray28, intArray45);
        double[][] doubleArray49 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray50 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray51 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[] doubleArray58 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray65 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray72 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray79 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray80 = new double[][] { doubleArray58, doubleArray65, doubleArray72, doubleArray79 };
        double[][] doubleArray81 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray80);
        double[][] doubleArray82 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray80);
        double[][] doubleArray83 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray80);
        double[][] doubleArray84 = new double[][] {};
        double[][] doubleArray85 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray84);
        int[] intArray86 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray85, intArray86);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray83, intArray86);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray51, intArray86);
        double[][] doubleArray90 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray51);
        java.lang.Class<?> wildcardClass91 = doubleArray90.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray79), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertNotNull(doubleArray81);
        org.junit.Assert.assertNotNull(doubleArray82);
        org.junit.Assert.assertNotNull(doubleArray83);
        org.junit.Assert.assertNotNull(doubleArray84);
        org.junit.Assert.assertNotNull(doubleArray85);
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray86), "[]");
        org.junit.Assert.assertNotNull(doubleArray90);
        org.junit.Assert.assertNotNull(wildcardClass91);
    }

    @Test
    public void test2008() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2008");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray5 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray6 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray7 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray6);
        double[][] doubleArray8 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray7);
        double[][] doubleArray9 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray8);
        java.lang.Class<?> wildcardClass10 = doubleArray9.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertNotNull(wildcardClass10);
    }

    @Test
    public void test2009() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2009");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray30 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray31 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray32 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray33 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray32);
        double[][] doubleArray34 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray32);
        double[][] doubleArray35 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray34);
        java.lang.Class<?> wildcardClass36 = doubleArray34.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertNotNull(wildcardClass36);
    }

    @Test
    public void test2010() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2010");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray30 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray29);
        double[][] doubleArray31 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        double[][] doubleArray32 = new double[][] {};
        double[][] doubleArray33 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray32);
        double[][] doubleArray34 = new double[][] {};
        double[][] doubleArray35 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray34);
        double[] doubleArray37 = new double[] { 1 };
        double[] doubleArray39 = new double[] { 1 };
        double[] doubleArray41 = new double[] { 1 };
        double[] doubleArray43 = new double[] { 1 };
        double[] doubleArray45 = new double[] { 1 };
        double[][] doubleArray46 = new double[][] { doubleArray37, doubleArray39, doubleArray41, doubleArray43, doubleArray45 };
        int[] intArray47 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray46, intArray47);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray34, intArray47);
        double[] doubleArray53 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray57 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray61 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray65 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray66 = new double[][] { doubleArray53, doubleArray57, doubleArray61, doubleArray65 };
        double[] doubleArray68 = new double[] { 1 };
        double[] doubleArray70 = new double[] { 1 };
        double[] doubleArray72 = new double[] { 1 };
        double[] doubleArray74 = new double[] { 1 };
        double[] doubleArray76 = new double[] { 1 };
        double[][] doubleArray77 = new double[][] { doubleArray68, doubleArray70, doubleArray72, doubleArray74, doubleArray76 };
        int[] intArray78 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray77, intArray78);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray66, intArray78);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray34, intArray78);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray33, intArray78);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray30, intArray78);
        double[][] doubleArray84 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        double[][] doubleArray85 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray84);
        java.lang.Class<?> wildcardClass86 = doubleArray85.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[]");
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray70), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray74), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[]");
        org.junit.Assert.assertNotNull(doubleArray84);
        org.junit.Assert.assertNotNull(doubleArray85);
        org.junit.Assert.assertNotNull(wildcardClass86);
    }

    @Test
    public void test2011() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2011");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[][] doubleArray5 = null;
        double[][] doubleArray6 = new double[][] {};
        double[][] doubleArray7 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray6);
        double[][] doubleArray8 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray7);
        double[] doubleArray12 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray16 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray20 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray24 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray25 = new double[][] { doubleArray12, doubleArray16, doubleArray20, doubleArray24 };
        double[] doubleArray27 = new double[] { 1 };
        double[] doubleArray29 = new double[] { 1 };
        double[] doubleArray31 = new double[] { 1 };
        double[] doubleArray33 = new double[] { 1 };
        double[] doubleArray35 = new double[] { 1 };
        double[][] doubleArray36 = new double[][] { doubleArray27, doubleArray29, doubleArray31, doubleArray33, doubleArray35 };
        int[] intArray37 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray36, intArray37);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray25, intArray37);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray8, intArray37);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray5, intArray37);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray3, intArray37);
        double[][] doubleArray43 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[][] doubleArray44 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray43);
        double[][] doubleArray45 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray43);
        double[][] doubleArray46 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray43);
        java.lang.Class<?> wildcardClass47 = doubleArray43.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertNotNull(wildcardClass47);
    }

    @Test
    public void test2012() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2012");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[] doubleArray31 = new double[] { 1 };
        double[] doubleArray33 = new double[] { 1 };
        double[] doubleArray35 = new double[] { 1 };
        double[] doubleArray37 = new double[] { 1 };
        double[] doubleArray39 = new double[] { 1 };
        double[][] doubleArray40 = new double[][] { doubleArray31, doubleArray33, doubleArray35, doubleArray37, doubleArray39 };
        int[] intArray41 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray40, intArray41);
        double[][] doubleArray43 = new double[][] {};
        double[][] doubleArray44 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray43);
        int[] intArray45 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray44, intArray45);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray40, intArray45);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray28, intArray45);
        double[][] doubleArray49 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray50 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray49);
        double[][] doubleArray51 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray50);
        double[][] doubleArray52 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray51);
        double[][] doubleArray53 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray52);
        double[][] doubleArray54 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray52);
        double[][] doubleArray55 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray54);
        double[][] doubleArray56 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray54);
        double[][] doubleArray57 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray54);
        double[][] doubleArray58 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray57);
        java.lang.Class<?> wildcardClass59 = doubleArray57.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertNotNull(wildcardClass59);
    }

    @Test
    public void test2013() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2013");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray30 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray31 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray32 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray33 = new double[][] {};
        double[][] doubleArray34 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray33);
        double[][] doubleArray35 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray34);
        double[] doubleArray39 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray43 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray47 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray51 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray52 = new double[][] { doubleArray39, doubleArray43, doubleArray47, doubleArray51 };
        double[] doubleArray54 = new double[] { 1 };
        double[] doubleArray56 = new double[] { 1 };
        double[] doubleArray58 = new double[] { 1 };
        double[] doubleArray60 = new double[] { 1 };
        double[] doubleArray62 = new double[] { 1 };
        double[][] doubleArray63 = new double[][] { doubleArray54, doubleArray56, doubleArray58, doubleArray60, doubleArray62 };
        int[] intArray64 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray63, intArray64);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray52, intArray64);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray35, intArray64);
        double[][] doubleArray68 = null;
        double[] doubleArray70 = new double[] { 1 };
        double[] doubleArray72 = new double[] { 1 };
        double[] doubleArray74 = new double[] { 1 };
        double[] doubleArray76 = new double[] { 1 };
        double[] doubleArray78 = new double[] { 1 };
        double[][] doubleArray79 = new double[][] { doubleArray70, doubleArray72, doubleArray74, doubleArray76, doubleArray78 };
        int[] intArray80 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray79, intArray80);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray68, intArray80);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray35, intArray80);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray28, intArray80);
        double[][] doubleArray85 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        java.lang.Class<?> wildcardClass86 = doubleArray85.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[]");
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray70), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray74), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray78), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[]");
        org.junit.Assert.assertNotNull(doubleArray85);
        org.junit.Assert.assertNotNull(wildcardClass86);
    }

    @Test
    public void test2014() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2014");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        int[] intArray2 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray1, intArray2);
        double[] doubleArray5 = new double[] { 1 };
        double[] doubleArray7 = new double[] { 1 };
        double[] doubleArray9 = new double[] { 1 };
        double[] doubleArray11 = new double[] { 1 };
        double[] doubleArray13 = new double[] { 1 };
        double[][] doubleArray14 = new double[][] { doubleArray5, doubleArray7, doubleArray9, doubleArray11, doubleArray13 };
        int[] intArray15 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray14, intArray15);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray1, intArray15);
        double[][] doubleArray18 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray19 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray18);
        java.lang.Class<?> wildcardClass20 = doubleArray19.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertNotNull(wildcardClass20);
    }

    @Test
    public void test2015() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2015");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray30 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray31 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        double[][] doubleArray32 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        double[][] doubleArray33 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray32);
        double[][] doubleArray34 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray33);
        double[][] doubleArray35 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray34);
        double[][] doubleArray36 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray35);
        double[][] doubleArray37 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray35);
        double[][] doubleArray38 = new double[][] {};
        double[][] doubleArray39 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray38);
        double[][] doubleArray40 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray38);
        double[][] doubleArray41 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray40);
        double[][] doubleArray42 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray40);
        double[][] doubleArray43 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray40);
        double[][] doubleArray44 = new double[][] {};
        double[][] doubleArray45 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray44);
        double[][] doubleArray46 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray44);
        double[][] doubleArray47 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray44);
        double[][] doubleArray48 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray44);
        double[][] doubleArray49 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray48);
        double[][] doubleArray50 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray49);
        double[][] doubleArray51 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray49);
        double[][] doubleArray52 = new double[][] {};
        double[][] doubleArray53 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray52);
        double[][] doubleArray54 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray52);
        double[][] doubleArray55 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray52);
        double[][] doubleArray56 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray52);
        double[][] doubleArray57 = new double[][] {};
        double[][] doubleArray58 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray57);
        double[][] doubleArray59 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray58);
        double[] doubleArray63 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray67 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray71 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray75 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray76 = new double[][] { doubleArray63, doubleArray67, doubleArray71, doubleArray75 };
        double[] doubleArray78 = new double[] { 1 };
        double[] doubleArray80 = new double[] { 1 };
        double[] doubleArray82 = new double[] { 1 };
        double[] doubleArray84 = new double[] { 1 };
        double[] doubleArray86 = new double[] { 1 };
        double[][] doubleArray87 = new double[][] { doubleArray78, doubleArray80, doubleArray82, doubleArray84, doubleArray86 };
        int[] intArray88 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray87, intArray88);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray76, intArray88);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray59, intArray88);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray52, intArray88);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray51, intArray88);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray43, intArray88);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray37, intArray88);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray71), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray75), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray78), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray80), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray82), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray84), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray86), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray87);
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray88), "[]");
    }

    @Test
    public void test2016() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2016");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = new double[][] {};
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[] doubleArray5 = new double[] { 1 };
        double[] doubleArray7 = new double[] { 1 };
        double[] doubleArray9 = new double[] { 1 };
        double[] doubleArray11 = new double[] { 1 };
        double[] doubleArray13 = new double[] { 1 };
        double[][] doubleArray14 = new double[][] { doubleArray5, doubleArray7, doubleArray9, doubleArray11, doubleArray13 };
        int[] intArray15 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray14, intArray15);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray2, intArray15);
        double[] doubleArray21 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray25 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray29 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray33 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray34 = new double[][] { doubleArray21, doubleArray25, doubleArray29, doubleArray33 };
        double[] doubleArray36 = new double[] { 1 };
        double[] doubleArray38 = new double[] { 1 };
        double[] doubleArray40 = new double[] { 1 };
        double[] doubleArray42 = new double[] { 1 };
        double[] doubleArray44 = new double[] { 1 };
        double[][] doubleArray45 = new double[][] { doubleArray36, doubleArray38, doubleArray40, doubleArray42, doubleArray44 };
        int[] intArray46 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray45, intArray46);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray34, intArray46);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray2, intArray46);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray1, intArray46);
        double[] doubleArray52 = new double[] { 1 };
        double[] doubleArray54 = new double[] { 1 };
        double[] doubleArray56 = new double[] { 1 };
        double[] doubleArray58 = new double[] { 1 };
        double[] doubleArray60 = new double[] { 1 };
        double[][] doubleArray61 = new double[][] { doubleArray52, doubleArray54, doubleArray56, doubleArray58, doubleArray60 };
        int[] intArray62 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray61, intArray62);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray1, intArray62);
        double[][] doubleArray65 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray66 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray67 = new double[][] {};
        double[][] doubleArray68 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray67);
        double[][] doubleArray69 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray67);
        double[][] doubleArray70 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray67);
        double[][] doubleArray71 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray70);
        double[] doubleArray73 = new double[] { 1 };
        double[] doubleArray75 = new double[] { 1 };
        double[] doubleArray77 = new double[] { 1 };
        double[] doubleArray79 = new double[] { 1 };
        double[] doubleArray81 = new double[] { 1 };
        double[][] doubleArray82 = new double[][] { doubleArray73, doubleArray75, doubleArray77, doubleArray79, doubleArray81 };
        int[] intArray83 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray82, intArray83);
        double[][] doubleArray85 = new double[][] {};
        double[][] doubleArray86 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray85);
        int[] intArray87 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray86, intArray87);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray82, intArray87);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray70, intArray87);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray1, intArray87);
        java.lang.Class<?> wildcardClass92 = doubleArray1.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[]");
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[]");
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray73), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray75), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray77), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray79), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray81), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray82);
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray83), "[]");
        org.junit.Assert.assertNotNull(doubleArray85);
        org.junit.Assert.assertNotNull(doubleArray86);
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray87), "[]");
        org.junit.Assert.assertNotNull(wildcardClass92);
    }

    @Test
    public void test2017() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2017");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray30 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray31 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        double[][] doubleArray32 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        double[][] doubleArray33 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray32);
        double[][] doubleArray34 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray33);
        double[][] doubleArray35 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray34);
        double[][] doubleArray36 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray35);
        double[][] doubleArray37 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray35);
        double[][] doubleArray38 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray37);
        double[][] doubleArray39 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray38);
        java.lang.Class<?> wildcardClass40 = doubleArray39.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertNotNull(wildcardClass40);
    }

    @Test
    public void test2018() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2018");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[][] doubleArray5 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray4);
        double[][] doubleArray6 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray5);
        double[][] doubleArray7 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray5);
        java.lang.Class<?> wildcardClass8 = doubleArray7.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertNotNull(wildcardClass8);
    }

    @Test
    public void test2019() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2019");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        int[] intArray2 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray1, intArray2);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray5 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray4);
        double[][] doubleArray6 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray5);
        double[][] doubleArray7 = new double[][] {};
        double[][] doubleArray8 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray7);
        double[] doubleArray10 = new double[] { 1 };
        double[] doubleArray12 = new double[] { 1 };
        double[] doubleArray14 = new double[] { 1 };
        double[] doubleArray16 = new double[] { 1 };
        double[] doubleArray18 = new double[] { 1 };
        double[][] doubleArray19 = new double[][] { doubleArray10, doubleArray12, doubleArray14, doubleArray16, doubleArray18 };
        int[] intArray20 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray19, intArray20);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray7, intArray20);
        double[][] doubleArray23 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray7);
        double[][] doubleArray24 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray23);
        double[][] doubleArray25 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray24);
        double[][] doubleArray26 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray25);
        double[][] doubleArray27 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray25);
        double[][] doubleArray28 = new double[][] {};
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray30 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray29);
        double[][] doubleArray31 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        double[][] doubleArray32 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        double[][] doubleArray33 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray32);
        double[][] doubleArray34 = new double[][] {};
        double[][] doubleArray35 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray34);
        double[][] doubleArray36 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray35);
        double[] doubleArray40 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray44 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray48 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray52 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray53 = new double[][] { doubleArray40, doubleArray44, doubleArray48, doubleArray52 };
        double[] doubleArray55 = new double[] { 1 };
        double[] doubleArray57 = new double[] { 1 };
        double[] doubleArray59 = new double[] { 1 };
        double[] doubleArray61 = new double[] { 1 };
        double[] doubleArray63 = new double[] { 1 };
        double[][] doubleArray64 = new double[][] { doubleArray55, doubleArray57, doubleArray59, doubleArray61, doubleArray63 };
        int[] intArray65 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray64, intArray65);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray53, intArray65);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray36, intArray65);
        double[][] doubleArray69 = null;
        double[] doubleArray71 = new double[] { 1 };
        double[] doubleArray73 = new double[] { 1 };
        double[] doubleArray75 = new double[] { 1 };
        double[] doubleArray77 = new double[] { 1 };
        double[] doubleArray79 = new double[] { 1 };
        double[][] doubleArray80 = new double[][] { doubleArray71, doubleArray73, doubleArray75, doubleArray77, doubleArray79 };
        int[] intArray81 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray80, intArray81);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray69, intArray81);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray36, intArray81);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray32, intArray81);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray27, intArray81);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray6, intArray81);
        java.lang.Class<?> wildcardClass88 = intArray81.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[]");
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray71), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray73), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray75), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray77), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray79), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray81), "[]");
        org.junit.Assert.assertNotNull(wildcardClass88);
    }

    @Test
    public void test2020() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2020");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[] doubleArray3 = new double[] { 1 };
        double[] doubleArray5 = new double[] { 1 };
        double[] doubleArray7 = new double[] { 1 };
        double[] doubleArray9 = new double[] { 1 };
        double[] doubleArray11 = new double[] { 1 };
        double[][] doubleArray12 = new double[][] { doubleArray3, doubleArray5, doubleArray7, doubleArray9, doubleArray11 };
        int[] intArray13 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray12, intArray13);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray0, intArray13);
        double[] doubleArray19 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray23 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray27 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray31 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray32 = new double[][] { doubleArray19, doubleArray23, doubleArray27, doubleArray31 };
        double[] doubleArray34 = new double[] { 1 };
        double[] doubleArray36 = new double[] { 1 };
        double[] doubleArray38 = new double[] { 1 };
        double[] doubleArray40 = new double[] { 1 };
        double[] doubleArray42 = new double[] { 1 };
        double[][] doubleArray43 = new double[][] { doubleArray34, doubleArray36, doubleArray38, doubleArray40, doubleArray42 };
        int[] intArray44 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray43, intArray44);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray32, intArray44);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray0, intArray44);
        double[][] doubleArray48 = new double[][] {};
        double[][] doubleArray49 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray48);
        double[] doubleArray51 = new double[] { 1 };
        double[] doubleArray53 = new double[] { 1 };
        double[] doubleArray55 = new double[] { 1 };
        double[] doubleArray57 = new double[] { 1 };
        double[] doubleArray59 = new double[] { 1 };
        double[][] doubleArray60 = new double[][] { doubleArray51, doubleArray53, doubleArray55, doubleArray57, doubleArray59 };
        int[] intArray61 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray60, intArray61);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray48, intArray61);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray0, intArray61);
        double[][] doubleArray65 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray66 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray67 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray68 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray69 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray70 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[]");
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertNotNull(doubleArray70);
    }

    @Test
    public void test2021() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2021");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray30 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray31 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray32 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray33 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray32);
        double[][] doubleArray34 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray32);
        double[][] doubleArray35 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray34);
        double[][] doubleArray36 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray35);
        double[][] doubleArray37 = new double[][] {};
        double[][] doubleArray38 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray37);
        double[][] doubleArray39 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray37);
        double[][] doubleArray40 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray37);
        double[][] doubleArray41 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray37);
        double[][] doubleArray42 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray41);
        double[][] doubleArray43 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray41);
        double[][] doubleArray44 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray43);
        double[] doubleArray51 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray58 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray65 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray72 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray73 = new double[][] { doubleArray51, doubleArray58, doubleArray65, doubleArray72 };
        double[][] doubleArray74 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray73);
        double[][] doubleArray75 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray74);
        double[][] doubleArray76 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray74);
        double[][] doubleArray77 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray74);
        double[][] doubleArray78 = new double[][] {};
        double[][] doubleArray79 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray78);
        double[][] doubleArray80 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray78);
        double[][] doubleArray81 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray80);
        double[][] doubleArray82 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray80);
        double[][] doubleArray83 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray82);
        double[][] doubleArray84 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray83);
        double[][] doubleArray85 = new double[][] {};
        double[][] doubleArray86 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray85);
        int[] intArray87 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray86, intArray87);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray84, intArray87);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray74, intArray87);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray43, intArray87);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray36, intArray87);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertNotNull(doubleArray81);
        org.junit.Assert.assertNotNull(doubleArray82);
        org.junit.Assert.assertNotNull(doubleArray83);
        org.junit.Assert.assertNotNull(doubleArray84);
        org.junit.Assert.assertNotNull(doubleArray85);
        org.junit.Assert.assertNotNull(doubleArray86);
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray87), "[]");
    }

    @Test
    public void test2022() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2022");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        java.lang.Class<?> wildcardClass5 = doubleArray4.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(wildcardClass5);
    }

    @Test
    public void test2023() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2023");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray4 = new double[][] {};
        double[][] doubleArray5 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray4);
        double[] doubleArray7 = new double[] { 1 };
        double[] doubleArray9 = new double[] { 1 };
        double[] doubleArray11 = new double[] { 1 };
        double[] doubleArray13 = new double[] { 1 };
        double[] doubleArray15 = new double[] { 1 };
        double[][] doubleArray16 = new double[][] { doubleArray7, doubleArray9, doubleArray11, doubleArray13, doubleArray15 };
        int[] intArray17 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray16, intArray17);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray4, intArray17);
        double[] doubleArray23 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray27 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray31 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray35 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray36 = new double[][] { doubleArray23, doubleArray27, doubleArray31, doubleArray35 };
        double[] doubleArray38 = new double[] { 1 };
        double[] doubleArray40 = new double[] { 1 };
        double[] doubleArray42 = new double[] { 1 };
        double[] doubleArray44 = new double[] { 1 };
        double[] doubleArray46 = new double[] { 1 };
        double[][] doubleArray47 = new double[][] { doubleArray38, doubleArray40, doubleArray42, doubleArray44, doubleArray46 };
        int[] intArray48 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray47, intArray48);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray36, intArray48);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray4, intArray48);
        double[] doubleArray53 = new double[] { 1 };
        double[] doubleArray55 = new double[] { 1 };
        double[] doubleArray57 = new double[] { 1 };
        double[] doubleArray59 = new double[] { 1 };
        double[] doubleArray61 = new double[] { 1 };
        double[][] doubleArray62 = new double[][] { doubleArray53, doubleArray55, doubleArray57, doubleArray59, doubleArray61 };
        int[] intArray63 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray62, intArray63);
        double[][] doubleArray65 = new double[][] {};
        double[][] doubleArray66 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray65);
        int[] intArray67 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray66, intArray67);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray62, intArray67);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray4, intArray67);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray3, intArray67);
        double[][] doubleArray72 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[][] doubleArray73 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray72);
        double[][] doubleArray74 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray73);
        java.lang.Class<?> wildcardClass75 = doubleArray73.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[]");
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[]");
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[]");
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertNotNull(wildcardClass75);
    }

    @Test
    public void test2024() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2024");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray30 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray29);
        double[][] doubleArray31 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray29);
        double[][] doubleArray32 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray31);
        double[][] doubleArray33 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray31);
        double[][] doubleArray34 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray31);
        double[][] doubleArray35 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray31);
        double[][] doubleArray36 = new double[][] {};
        double[][] doubleArray37 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray36);
        double[][] doubleArray38 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray37);
        double[][] doubleArray39 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray38);
        double[][] doubleArray40 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray38);
        double[][] doubleArray41 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray40);
        double[][] doubleArray42 = new double[][] {};
        double[][] doubleArray43 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray42);
        double[][] doubleArray44 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray43);
        double[] doubleArray48 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray52 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray56 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray60 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray61 = new double[][] { doubleArray48, doubleArray52, doubleArray56, doubleArray60 };
        double[] doubleArray63 = new double[] { 1 };
        double[] doubleArray65 = new double[] { 1 };
        double[] doubleArray67 = new double[] { 1 };
        double[] doubleArray69 = new double[] { 1 };
        double[] doubleArray71 = new double[] { 1 };
        double[][] doubleArray72 = new double[][] { doubleArray63, doubleArray65, doubleArray67, doubleArray69, doubleArray71 };
        int[] intArray73 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray72, intArray73);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray61, intArray73);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray44, intArray73);
        double[][] doubleArray77 = null;
        double[] doubleArray79 = new double[] { 1 };
        double[] doubleArray81 = new double[] { 1 };
        double[] doubleArray83 = new double[] { 1 };
        double[] doubleArray85 = new double[] { 1 };
        double[] doubleArray87 = new double[] { 1 };
        double[][] doubleArray88 = new double[][] { doubleArray79, doubleArray81, doubleArray83, doubleArray85, doubleArray87 };
        int[] intArray89 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray88, intArray89);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray77, intArray89);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray44, intArray89);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray40, intArray89);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray31, intArray89);
        double[][] doubleArray95 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray31);
        double[][] doubleArray96 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray95);
        java.lang.Class<?> wildcardClass97 = doubleArray96.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray71), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[]");
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray79), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray81), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray83), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray85), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray87), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray88);
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray89), "[]");
        org.junit.Assert.assertNotNull(doubleArray95);
        org.junit.Assert.assertNotNull(doubleArray96);
        org.junit.Assert.assertNotNull(wildcardClass97);
    }

    @Test
    public void test2025() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2025");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray5 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray4);
        double[][] doubleArray6 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray4);
        double[][] doubleArray7 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray6);
        double[][] doubleArray8 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray6);
        double[][] doubleArray9 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray6);
        double[][] doubleArray10 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray6);
        double[][] doubleArray11 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray6);
        java.lang.Class<?> wildcardClass12 = doubleArray11.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertNotNull(wildcardClass12);
    }

    @Test
    public void test2026() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2026");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[][] doubleArray5 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[] doubleArray7 = new double[] { 1 };
        double[] doubleArray9 = new double[] { 1 };
        double[] doubleArray11 = new double[] { 1 };
        double[] doubleArray13 = new double[] { 1 };
        double[] doubleArray15 = new double[] { 1 };
        double[][] doubleArray16 = new double[][] { doubleArray7, doubleArray9, doubleArray11, doubleArray13, doubleArray15 };
        int[] intArray17 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray16, intArray17);
        double[] doubleArray25 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray32 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray39 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray46 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray47 = new double[][] { doubleArray25, doubleArray32, doubleArray39, doubleArray46 };
        double[][] doubleArray48 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray47);
        double[] doubleArray50 = new double[] { 1 };
        double[] doubleArray52 = new double[] { 1 };
        double[] doubleArray54 = new double[] { 1 };
        double[] doubleArray56 = new double[] { 1 };
        double[] doubleArray58 = new double[] { 1 };
        double[][] doubleArray59 = new double[][] { doubleArray50, doubleArray52, doubleArray54, doubleArray56, doubleArray58 };
        int[] intArray60 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray59, intArray60);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray48, intArray60);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray16, intArray60);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray3, intArray60);
        java.lang.Class<?> wildcardClass65 = intArray60.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[]");
        org.junit.Assert.assertNotNull(wildcardClass65);
    }

    @Test
    public void test2027() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2027");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray4 = new double[][] {};
        double[][] doubleArray5 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray4);
        double[][] doubleArray6 = new double[][] {};
        double[][] doubleArray7 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray6);
        double[] doubleArray9 = new double[] { 1 };
        double[] doubleArray11 = new double[] { 1 };
        double[] doubleArray13 = new double[] { 1 };
        double[] doubleArray15 = new double[] { 1 };
        double[] doubleArray17 = new double[] { 1 };
        double[][] doubleArray18 = new double[][] { doubleArray9, doubleArray11, doubleArray13, doubleArray15, doubleArray17 };
        int[] intArray19 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray18, intArray19);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray6, intArray19);
        double[] doubleArray25 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray29 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray33 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray37 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray38 = new double[][] { doubleArray25, doubleArray29, doubleArray33, doubleArray37 };
        double[] doubleArray40 = new double[] { 1 };
        double[] doubleArray42 = new double[] { 1 };
        double[] doubleArray44 = new double[] { 1 };
        double[] doubleArray46 = new double[] { 1 };
        double[] doubleArray48 = new double[] { 1 };
        double[][] doubleArray49 = new double[][] { doubleArray40, doubleArray42, doubleArray44, doubleArray46, doubleArray48 };
        int[] intArray50 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray49, intArray50);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray38, intArray50);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray6, intArray50);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray4, intArray50);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray1, intArray50);
        double[][] doubleArray56 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray57 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray58 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray57);
        double[][] doubleArray59 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray57);
        double[][] doubleArray60 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray59);
        double[][] doubleArray61 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray60);
        double[][] doubleArray62 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray60);
        double[][] doubleArray63 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray62);
        double[][] doubleArray64 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray62);
        java.lang.Class<?> wildcardClass65 = doubleArray64.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[]");
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertNotNull(wildcardClass65);
    }

    @Test
    public void test2028() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2028");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[] doubleArray31 = new double[] { 1 };
        double[] doubleArray33 = new double[] { 1 };
        double[] doubleArray35 = new double[] { 1 };
        double[] doubleArray37 = new double[] { 1 };
        double[] doubleArray39 = new double[] { 1 };
        double[][] doubleArray40 = new double[][] { doubleArray31, doubleArray33, doubleArray35, doubleArray37, doubleArray39 };
        int[] intArray41 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray40, intArray41);
        double[][] doubleArray43 = new double[][] {};
        double[][] doubleArray44 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray43);
        int[] intArray45 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray44, intArray45);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray40, intArray45);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray28, intArray45);
        double[][] doubleArray49 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray50 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray49);
        double[][] doubleArray51 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray50);
        double[][] doubleArray52 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray50);
        double[][] doubleArray53 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray50);
        double[][] doubleArray54 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray50);
        double[][] doubleArray55 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray50);
        double[][] doubleArray56 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray50);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertNotNull(doubleArray56);
    }

    @Test
    public void test2029() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2029");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray30 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray29);
        double[][] doubleArray31 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        double[][] doubleArray32 = new double[][] {};
        double[][] doubleArray33 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray32);
        double[][] doubleArray34 = new double[][] {};
        double[][] doubleArray35 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray34);
        double[] doubleArray37 = new double[] { 1 };
        double[] doubleArray39 = new double[] { 1 };
        double[] doubleArray41 = new double[] { 1 };
        double[] doubleArray43 = new double[] { 1 };
        double[] doubleArray45 = new double[] { 1 };
        double[][] doubleArray46 = new double[][] { doubleArray37, doubleArray39, doubleArray41, doubleArray43, doubleArray45 };
        int[] intArray47 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray46, intArray47);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray34, intArray47);
        double[] doubleArray53 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray57 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray61 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray65 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray66 = new double[][] { doubleArray53, doubleArray57, doubleArray61, doubleArray65 };
        double[] doubleArray68 = new double[] { 1 };
        double[] doubleArray70 = new double[] { 1 };
        double[] doubleArray72 = new double[] { 1 };
        double[] doubleArray74 = new double[] { 1 };
        double[] doubleArray76 = new double[] { 1 };
        double[][] doubleArray77 = new double[][] { doubleArray68, doubleArray70, doubleArray72, doubleArray74, doubleArray76 };
        int[] intArray78 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray77, intArray78);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray66, intArray78);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray34, intArray78);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray33, intArray78);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray30, intArray78);
        double[][] doubleArray84 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        int[] intArray85 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray84, intArray85);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[]");
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray70), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray74), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[]");
        org.junit.Assert.assertNotNull(doubleArray84);
    }

    @Test
    public void test2030() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2030");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[] doubleArray3 = new double[] { 1 };
        double[] doubleArray5 = new double[] { 1 };
        double[] doubleArray7 = new double[] { 1 };
        double[] doubleArray9 = new double[] { 1 };
        double[] doubleArray11 = new double[] { 1 };
        double[][] doubleArray12 = new double[][] { doubleArray3, doubleArray5, doubleArray7, doubleArray9, doubleArray11 };
        int[] intArray13 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray12, intArray13);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray0, intArray13);
        double[][] doubleArray16 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray17 = new double[][] {};
        double[][] doubleArray18 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray17);
        double[][] doubleArray19 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray17);
        double[][] doubleArray20 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray17);
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray34 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray41 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray48 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray49 = new double[][] { doubleArray27, doubleArray34, doubleArray41, doubleArray48 };
        double[][] doubleArray50 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray49);
        double[][] doubleArray51 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray50);
        double[][] doubleArray52 = new double[][] {};
        double[][] doubleArray53 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray52);
        double[] doubleArray55 = new double[] { 1 };
        double[] doubleArray57 = new double[] { 1 };
        double[] doubleArray59 = new double[] { 1 };
        double[] doubleArray61 = new double[] { 1 };
        double[] doubleArray63 = new double[] { 1 };
        double[][] doubleArray64 = new double[][] { doubleArray55, doubleArray57, doubleArray59, doubleArray61, doubleArray63 };
        int[] intArray65 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray64, intArray65);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray52, intArray65);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray51, intArray65);
        double[][] doubleArray69 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray51);
        double[] doubleArray71 = new double[] { 1 };
        double[] doubleArray73 = new double[] { 1 };
        double[] doubleArray75 = new double[] { 1 };
        double[] doubleArray77 = new double[] { 1 };
        double[] doubleArray79 = new double[] { 1 };
        double[][] doubleArray80 = new double[][] { doubleArray71, doubleArray73, doubleArray75, doubleArray77, doubleArray79 };
        int[] intArray81 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray80, intArray81);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray69, intArray81);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray17, intArray81);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray16, intArray81);
        double[][] doubleArray86 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray16);
        double[][] doubleArray87 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray86);
        double[][] doubleArray88 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray87);
        double[][] doubleArray89 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray88);
        double[][] doubleArray90 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray89);
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[]");
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray71), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray73), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray75), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray77), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray79), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray81), "[]");
        org.junit.Assert.assertNotNull(doubleArray86);
        org.junit.Assert.assertNotNull(doubleArray87);
        org.junit.Assert.assertNotNull(doubleArray88);
        org.junit.Assert.assertNotNull(doubleArray89);
        org.junit.Assert.assertNotNull(doubleArray90);
    }

    @Test
    public void test2031() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2031");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray5 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray6 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray7 = new double[][] {};
        double[][] doubleArray8 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray7);
        double[][] doubleArray9 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray7);
        double[][] doubleArray10 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray9);
        double[][] doubleArray11 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray10);
        double[][] doubleArray12 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray11);
        double[][] doubleArray13 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray11);
        double[][] doubleArray14 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray11);
        double[][] doubleArray15 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray14);
        double[][] doubleArray16 = new double[][] {};
        double[][] doubleArray17 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray16);
        double[][] doubleArray18 = new double[][] {};
        double[][] doubleArray19 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray18);
        double[] doubleArray21 = new double[] { 1 };
        double[] doubleArray23 = new double[] { 1 };
        double[] doubleArray25 = new double[] { 1 };
        double[] doubleArray27 = new double[] { 1 };
        double[] doubleArray29 = new double[] { 1 };
        double[][] doubleArray30 = new double[][] { doubleArray21, doubleArray23, doubleArray25, doubleArray27, doubleArray29 };
        int[] intArray31 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray30, intArray31);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray18, intArray31);
        double[] doubleArray37 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray41 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray45 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray49 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray50 = new double[][] { doubleArray37, doubleArray41, doubleArray45, doubleArray49 };
        double[] doubleArray52 = new double[] { 1 };
        double[] doubleArray54 = new double[] { 1 };
        double[] doubleArray56 = new double[] { 1 };
        double[] doubleArray58 = new double[] { 1 };
        double[] doubleArray60 = new double[] { 1 };
        double[][] doubleArray61 = new double[][] { doubleArray52, doubleArray54, doubleArray56, doubleArray58, doubleArray60 };
        int[] intArray62 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray61, intArray62);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray50, intArray62);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray18, intArray62);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray16, intArray62);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray14, intArray62);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray6, intArray62);
        double[][] doubleArray69 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray6);
        java.lang.Class<?> wildcardClass70 = doubleArray69.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[]");
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertNotNull(wildcardClass70);
    }

    @Test
    public void test2032() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2032");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray30 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray29);
        double[][] doubleArray31 = new double[][] {};
        double[][] doubleArray32 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray31);
        double[] doubleArray34 = new double[] { 1 };
        double[] doubleArray36 = new double[] { 1 };
        double[] doubleArray38 = new double[] { 1 };
        double[] doubleArray40 = new double[] { 1 };
        double[] doubleArray42 = new double[] { 1 };
        double[][] doubleArray43 = new double[][] { doubleArray34, doubleArray36, doubleArray38, doubleArray40, doubleArray42 };
        int[] intArray44 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray43, intArray44);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray31, intArray44);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray30, intArray44);
        double[][] doubleArray48 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        double[][] doubleArray49 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        double[][] doubleArray50 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        double[][] doubleArray51 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray50);
        double[] doubleArray58 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray65 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray72 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray79 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray80 = new double[][] { doubleArray58, doubleArray65, doubleArray72, doubleArray79 };
        double[][] doubleArray81 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray80);
        double[][] doubleArray82 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray81);
        double[][] doubleArray83 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray81);
        double[][] doubleArray84 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray81);
        double[][] doubleArray85 = new double[][] {};
        double[][] doubleArray86 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray85);
        double[][] doubleArray87 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray85);
        double[][] doubleArray88 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray87);
        double[][] doubleArray89 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray87);
        double[][] doubleArray90 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray89);
        double[][] doubleArray91 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray90);
        double[][] doubleArray92 = new double[][] {};
        double[][] doubleArray93 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray92);
        int[] intArray94 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray93, intArray94);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray91, intArray94);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray81, intArray94);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray50, intArray94);
        double[][] doubleArray99 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray50);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray79), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertNotNull(doubleArray81);
        org.junit.Assert.assertNotNull(doubleArray82);
        org.junit.Assert.assertNotNull(doubleArray83);
        org.junit.Assert.assertNotNull(doubleArray84);
        org.junit.Assert.assertNotNull(doubleArray85);
        org.junit.Assert.assertNotNull(doubleArray86);
        org.junit.Assert.assertNotNull(doubleArray87);
        org.junit.Assert.assertNotNull(doubleArray88);
        org.junit.Assert.assertNotNull(doubleArray89);
        org.junit.Assert.assertNotNull(doubleArray90);
        org.junit.Assert.assertNotNull(doubleArray91);
        org.junit.Assert.assertNotNull(doubleArray92);
        org.junit.Assert.assertNotNull(doubleArray93);
        org.junit.Assert.assertNotNull(intArray94);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray94), "[]");
        org.junit.Assert.assertNotNull(doubleArray99);
    }

    @Test
    public void test2033() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2033");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[][] doubleArray5 = new double[][] {};
        double[][] doubleArray6 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray5);
        double[][] doubleArray7 = new double[][] {};
        double[][] doubleArray8 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray7);
        double[][] doubleArray9 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray8);
        double[] doubleArray16 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray23 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray30 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray37 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray38 = new double[][] { doubleArray16, doubleArray23, doubleArray30, doubleArray37 };
        double[][] doubleArray39 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray38);
        double[] doubleArray41 = new double[] { 1 };
        double[] doubleArray43 = new double[] { 1 };
        double[] doubleArray45 = new double[] { 1 };
        double[] doubleArray47 = new double[] { 1 };
        double[] doubleArray49 = new double[] { 1 };
        double[][] doubleArray50 = new double[][] { doubleArray41, doubleArray43, doubleArray45, doubleArray47, doubleArray49 };
        int[] intArray51 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray50, intArray51);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray39, intArray51);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray8, intArray51);
        double[] doubleArray58 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray62 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray66 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray70 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray71 = new double[][] { doubleArray58, doubleArray62, doubleArray66, doubleArray70 };
        double[] doubleArray73 = new double[] { 1 };
        double[] doubleArray75 = new double[] { 1 };
        double[] doubleArray77 = new double[] { 1 };
        double[] doubleArray79 = new double[] { 1 };
        double[] doubleArray81 = new double[] { 1 };
        double[][] doubleArray82 = new double[][] { doubleArray73, doubleArray75, doubleArray77, doubleArray79, doubleArray81 };
        int[] intArray83 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray82, intArray83);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray71, intArray83);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray8, intArray83);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray5, intArray83);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray4, intArray83);
        double[][] doubleArray89 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray4);
        java.lang.Class<?> wildcardClass90 = doubleArray89.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[]");
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray66), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray70), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray73), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray75), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray77), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray79), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray81), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray82);
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray83), "[]");
        org.junit.Assert.assertNotNull(doubleArray89);
        org.junit.Assert.assertNotNull(wildcardClass90);
    }

    @Test
    public void test2034() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2034");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[][] doubleArray5 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray4);
        double[][] doubleArray6 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray5);
        double[][] doubleArray7 = new double[][] {};
        double[][] doubleArray8 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray7);
        int[] intArray9 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray8, intArray9);
        double[][] doubleArray11 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray8);
        double[][] doubleArray12 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray11);
        double[][] doubleArray13 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray11);
        double[][] doubleArray14 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray11);
        double[] doubleArray21 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray28 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray35 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray42 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray43 = new double[][] { doubleArray21, doubleArray28, doubleArray35, doubleArray42 };
        double[][] doubleArray44 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray43);
        double[][] doubleArray45 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray43);
        double[][] doubleArray46 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray43);
        double[][] doubleArray47 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray46);
        double[][] doubleArray48 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray47);
        double[] doubleArray55 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray62 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray69 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray76 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray77 = new double[][] { doubleArray55, doubleArray62, doubleArray69, doubleArray76 };
        double[][] doubleArray78 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray77);
        double[][] doubleArray79 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray77);
        double[][] doubleArray80 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray77);
        double[][] doubleArray81 = new double[][] {};
        double[][] doubleArray82 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray81);
        int[] intArray83 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray82, intArray83);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray80, intArray83);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray48, intArray83);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray14, intArray83);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray6, intArray83);
        java.lang.Class<?> wildcardClass89 = intArray83.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertNotNull(doubleArray81);
        org.junit.Assert.assertNotNull(doubleArray82);
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray83), "[]");
        org.junit.Assert.assertNotNull(wildcardClass89);
    }

    @Test
    public void test2035() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2035");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[] doubleArray6 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray10 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray14 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray18 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray19 = new double[][] { doubleArray6, doubleArray10, doubleArray14, doubleArray18 };
        double[] doubleArray21 = new double[] { 1 };
        double[] doubleArray23 = new double[] { 1 };
        double[] doubleArray25 = new double[] { 1 };
        double[] doubleArray27 = new double[] { 1 };
        double[] doubleArray29 = new double[] { 1 };
        double[][] doubleArray30 = new double[][] { doubleArray21, doubleArray23, doubleArray25, doubleArray27, doubleArray29 };
        int[] intArray31 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray30, intArray31);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray19, intArray31);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray2, intArray31);
        double[][] doubleArray35 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray36 = new double[][] {};
        double[][] doubleArray37 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray36);
        double[][] doubleArray38 = new double[][] {};
        double[][] doubleArray39 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray38);
        double[] doubleArray41 = new double[] { 1 };
        double[] doubleArray43 = new double[] { 1 };
        double[] doubleArray45 = new double[] { 1 };
        double[] doubleArray47 = new double[] { 1 };
        double[] doubleArray49 = new double[] { 1 };
        double[][] doubleArray50 = new double[][] { doubleArray41, doubleArray43, doubleArray45, doubleArray47, doubleArray49 };
        int[] intArray51 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray50, intArray51);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray38, intArray51);
        double[] doubleArray57 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray61 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray65 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray69 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray70 = new double[][] { doubleArray57, doubleArray61, doubleArray65, doubleArray69 };
        double[] doubleArray72 = new double[] { 1 };
        double[] doubleArray74 = new double[] { 1 };
        double[] doubleArray76 = new double[] { 1 };
        double[] doubleArray78 = new double[] { 1 };
        double[] doubleArray80 = new double[] { 1 };
        double[][] doubleArray81 = new double[][] { doubleArray72, doubleArray74, doubleArray76, doubleArray78, doubleArray80 };
        int[] intArray82 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray81, intArray82);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray70, intArray82);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray38, intArray82);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray37, intArray82);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray35, intArray82);
        double[][] doubleArray88 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray35);
        double[][] doubleArray89 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray88);
        double[][] doubleArray90 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray89);
        double[][] doubleArray91 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray89);
        double[][] doubleArray92 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray89);
        java.lang.Class<?> wildcardClass93 = doubleArray89.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[]");
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray74), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray78), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray80), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray81);
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[]");
        org.junit.Assert.assertNotNull(doubleArray88);
        org.junit.Assert.assertNotNull(doubleArray89);
        org.junit.Assert.assertNotNull(doubleArray90);
        org.junit.Assert.assertNotNull(doubleArray91);
        org.junit.Assert.assertNotNull(doubleArray92);
        org.junit.Assert.assertNotNull(wildcardClass93);
    }

    @Test
    public void test2036() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2036");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray4 = new double[][] {};
        double[][] doubleArray5 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray4);
        double[][] doubleArray6 = new double[][] {};
        double[][] doubleArray7 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray6);
        double[] doubleArray9 = new double[] { 1 };
        double[] doubleArray11 = new double[] { 1 };
        double[] doubleArray13 = new double[] { 1 };
        double[] doubleArray15 = new double[] { 1 };
        double[] doubleArray17 = new double[] { 1 };
        double[][] doubleArray18 = new double[][] { doubleArray9, doubleArray11, doubleArray13, doubleArray15, doubleArray17 };
        int[] intArray19 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray18, intArray19);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray6, intArray19);
        double[] doubleArray25 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray29 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray33 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray37 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray38 = new double[][] { doubleArray25, doubleArray29, doubleArray33, doubleArray37 };
        double[] doubleArray40 = new double[] { 1 };
        double[] doubleArray42 = new double[] { 1 };
        double[] doubleArray44 = new double[] { 1 };
        double[] doubleArray46 = new double[] { 1 };
        double[] doubleArray48 = new double[] { 1 };
        double[][] doubleArray49 = new double[][] { doubleArray40, doubleArray42, doubleArray44, doubleArray46, doubleArray48 };
        int[] intArray50 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray49, intArray50);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray38, intArray50);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray6, intArray50);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray4, intArray50);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray1, intArray50);
        double[][] doubleArray56 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray57 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray58 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray57);
        double[][] doubleArray59 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray57);
        double[][] doubleArray60 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray57);
        double[][] doubleArray61 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray60);
        java.lang.Class<?> wildcardClass62 = doubleArray60.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[]");
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertNotNull(wildcardClass62);
    }

    @Test
    public void test2037() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2037");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[][] doubleArray5 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray4);
        double[] doubleArray12 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray19 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray26 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray33 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray34 = new double[][] { doubleArray12, doubleArray19, doubleArray26, doubleArray33 };
        double[][] doubleArray35 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray34);
        double[][] doubleArray36 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray34);
        double[][] doubleArray37 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray34);
        double[][] doubleArray38 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray37);
        double[] doubleArray45 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray52 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray59 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray66 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray67 = new double[][] { doubleArray45, doubleArray52, doubleArray59, doubleArray66 };
        double[][] doubleArray68 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray67);
        double[] doubleArray70 = new double[] { 1 };
        double[] doubleArray72 = new double[] { 1 };
        double[] doubleArray74 = new double[] { 1 };
        double[] doubleArray76 = new double[] { 1 };
        double[] doubleArray78 = new double[] { 1 };
        double[][] doubleArray79 = new double[][] { doubleArray70, doubleArray72, doubleArray74, doubleArray76, doubleArray78 };
        int[] intArray80 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray79, intArray80);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray68, intArray80);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray38, intArray80);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray4, intArray80);
        double[][] doubleArray85 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray4);
        java.lang.Class<?> wildcardClass86 = doubleArray85.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray66), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray70), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray74), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray78), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[]");
        org.junit.Assert.assertNotNull(doubleArray85);
        org.junit.Assert.assertNotNull(wildcardClass86);
    }

    @Test
    public void test2038() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2038");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[][] doubleArray5 = null;
        double[][] doubleArray6 = new double[][] {};
        double[][] doubleArray7 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray6);
        double[][] doubleArray8 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray7);
        double[] doubleArray12 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray16 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray20 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray24 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray25 = new double[][] { doubleArray12, doubleArray16, doubleArray20, doubleArray24 };
        double[] doubleArray27 = new double[] { 1 };
        double[] doubleArray29 = new double[] { 1 };
        double[] doubleArray31 = new double[] { 1 };
        double[] doubleArray33 = new double[] { 1 };
        double[] doubleArray35 = new double[] { 1 };
        double[][] doubleArray36 = new double[][] { doubleArray27, doubleArray29, doubleArray31, doubleArray33, doubleArray35 };
        int[] intArray37 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray36, intArray37);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray25, intArray37);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray8, intArray37);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray5, intArray37);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray3, intArray37);
        double[][] doubleArray43 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[][] doubleArray44 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray43);
        double[][] doubleArray45 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray44);
        double[][] doubleArray46 = new double[][] {};
        double[][] doubleArray47 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray46);
        int[] intArray48 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray47, intArray48);
        double[][] doubleArray50 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray47);
        double[][] doubleArray51 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray50);
        double[][] doubleArray52 = new double[][] {};
        double[][] doubleArray53 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray52);
        int[] intArray54 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray53, intArray54);
        double[] doubleArray57 = new double[] { 1 };
        double[] doubleArray59 = new double[] { 1 };
        double[] doubleArray61 = new double[] { 1 };
        double[] doubleArray63 = new double[] { 1 };
        double[] doubleArray65 = new double[] { 1 };
        double[][] doubleArray66 = new double[][] { doubleArray57, doubleArray59, doubleArray61, doubleArray63, doubleArray65 };
        int[] intArray67 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray66, intArray67);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray53, intArray67);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray50, intArray67);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray45, intArray67);
        java.lang.Class<?> wildcardClass72 = intArray67.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[]");
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[]");
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[]");
        org.junit.Assert.assertNotNull(wildcardClass72);
    }

    @Test
    public void test2039() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2039");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray30 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray29);
        double[][] doubleArray31 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        double[][] doubleArray32 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        double[][] doubleArray33 = new double[][] {};
        double[][] doubleArray34 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray33);
        double[][] doubleArray35 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray33);
        double[][] doubleArray36 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray33);
        double[][] doubleArray37 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray36);
        double[] doubleArray39 = new double[] { 1 };
        double[] doubleArray41 = new double[] { 1 };
        double[] doubleArray43 = new double[] { 1 };
        double[] doubleArray45 = new double[] { 1 };
        double[] doubleArray47 = new double[] { 1 };
        double[][] doubleArray48 = new double[][] { doubleArray39, doubleArray41, doubleArray43, doubleArray45, doubleArray47 };
        int[] intArray49 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray48, intArray49);
        double[][] doubleArray51 = new double[][] {};
        double[][] doubleArray52 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray51);
        int[] intArray53 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray52, intArray53);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray48, intArray53);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray36, intArray53);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray32, intArray53);
        double[][] doubleArray58 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray32);
        double[][] doubleArray59 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray32);
        double[][] doubleArray60 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray59);
        java.lang.Class<?> wildcardClass61 = doubleArray60.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[]");
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertNotNull(wildcardClass61);
    }

    @Test
    public void test2040() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2040");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = new double[][] {};
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[] doubleArray8 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray12 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray16 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray20 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray21 = new double[][] { doubleArray8, doubleArray12, doubleArray16, doubleArray20 };
        double[] doubleArray23 = new double[] { 1 };
        double[] doubleArray25 = new double[] { 1 };
        double[] doubleArray27 = new double[] { 1 };
        double[] doubleArray29 = new double[] { 1 };
        double[] doubleArray31 = new double[] { 1 };
        double[][] doubleArray32 = new double[][] { doubleArray23, doubleArray25, doubleArray27, doubleArray29, doubleArray31 };
        int[] intArray33 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray32, intArray33);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray21, intArray33);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray3, intArray33);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray1, intArray33);
        double[][] doubleArray38 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray39 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray38);
        double[][] doubleArray40 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray39);
        double[][] doubleArray41 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray39);
        double[][] doubleArray42 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray41);
        double[][] doubleArray43 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray42);
        double[][] doubleArray44 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray42);
        java.lang.Class<?> wildcardClass45 = doubleArray42.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertNotNull(wildcardClass45);
    }

    @Test
    public void test2041() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2041");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray30 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray29);
        double[][] doubleArray31 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        double[][] doubleArray32 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        double[][] doubleArray33 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        double[][] doubleArray34 = new double[][] {};
        double[][] doubleArray35 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray34);
        double[][] doubleArray36 = new double[][] {};
        double[][] doubleArray37 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray36);
        double[][] doubleArray38 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray37);
        double[] doubleArray42 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray46 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray50 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray54 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray55 = new double[][] { doubleArray42, doubleArray46, doubleArray50, doubleArray54 };
        double[] doubleArray57 = new double[] { 1 };
        double[] doubleArray59 = new double[] { 1 };
        double[] doubleArray61 = new double[] { 1 };
        double[] doubleArray63 = new double[] { 1 };
        double[] doubleArray65 = new double[] { 1 };
        double[][] doubleArray66 = new double[][] { doubleArray57, doubleArray59, doubleArray61, doubleArray63, doubleArray65 };
        int[] intArray67 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray66, intArray67);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray55, intArray67);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray37, intArray67);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray35, intArray67);
        double[][] doubleArray72 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray35);
        double[][] doubleArray73 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray72);
        double[] doubleArray75 = new double[] { 1 };
        double[] doubleArray77 = new double[] { 1 };
        double[] doubleArray79 = new double[] { 1 };
        double[] doubleArray81 = new double[] { 1 };
        double[] doubleArray83 = new double[] { 1 };
        double[][] doubleArray84 = new double[][] { doubleArray75, doubleArray77, doubleArray79, doubleArray81, doubleArray83 };
        int[] intArray85 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray84, intArray85);
        double[][] doubleArray87 = new double[][] {};
        double[][] doubleArray88 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray87);
        int[] intArray89 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray88, intArray89);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray84, intArray89);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray72, intArray89);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray33, intArray89);
        java.lang.Class<?> wildcardClass94 = intArray89.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[]");
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray75), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray77), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray79), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray81), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray83), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray84);
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray85), "[]");
        org.junit.Assert.assertNotNull(doubleArray87);
        org.junit.Assert.assertNotNull(doubleArray88);
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray89), "[]");
        org.junit.Assert.assertNotNull(wildcardClass94);
    }

    @Test
    public void test2042() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2042");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray5 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray4);
        double[][] doubleArray6 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray4);
        double[][] doubleArray7 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray6);
        double[][] doubleArray8 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray6);
        double[][] doubleArray9 = null;
        double[][] doubleArray10 = null;
        double[][] doubleArray11 = new double[][] {};
        double[][] doubleArray12 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray11);
        double[][] doubleArray13 = new double[][] {};
        double[][] doubleArray14 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray13);
        double[][] doubleArray15 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray14);
        double[] doubleArray19 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray23 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray27 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray31 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray32 = new double[][] { doubleArray19, doubleArray23, doubleArray27, doubleArray31 };
        double[] doubleArray34 = new double[] { 1 };
        double[] doubleArray36 = new double[] { 1 };
        double[] doubleArray38 = new double[] { 1 };
        double[] doubleArray40 = new double[] { 1 };
        double[] doubleArray42 = new double[] { 1 };
        double[][] doubleArray43 = new double[][] { doubleArray34, doubleArray36, doubleArray38, doubleArray40, doubleArray42 };
        int[] intArray44 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray43, intArray44);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray32, intArray44);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray14, intArray44);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray12, intArray44);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray10, intArray44);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray9, intArray44);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray8, intArray44);
        double[][] doubleArray52 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray8);
        double[][] doubleArray53 = null;
        double[][] doubleArray54 = null;
        double[] doubleArray56 = new double[] { 1 };
        double[] doubleArray58 = new double[] { 1 };
        double[] doubleArray60 = new double[] { 1 };
        double[] doubleArray62 = new double[] { 1 };
        double[] doubleArray64 = new double[] { 1 };
        double[][] doubleArray65 = new double[][] { doubleArray56, doubleArray58, doubleArray60, doubleArray62, doubleArray64 };
        int[] intArray66 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray65, intArray66);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray54, intArray66);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray53, intArray66);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray52, intArray66);
        java.lang.Class<?> wildcardClass71 = intArray66.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[]");
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[]");
        org.junit.Assert.assertNotNull(wildcardClass71);
    }

    @Test
    public void test2043() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2043");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[] doubleArray8 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray12 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray16 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray20 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray21 = new double[][] { doubleArray8, doubleArray12, doubleArray16, doubleArray20 };
        double[] doubleArray23 = new double[] { 1 };
        double[] doubleArray25 = new double[] { 1 };
        double[] doubleArray27 = new double[] { 1 };
        double[] doubleArray29 = new double[] { 1 };
        double[] doubleArray31 = new double[] { 1 };
        double[][] doubleArray32 = new double[][] { doubleArray23, doubleArray25, doubleArray27, doubleArray29, doubleArray31 };
        int[] intArray33 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray32, intArray33);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray21, intArray33);
        double[][] doubleArray36 = new double[][] {};
        double[][] doubleArray37 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray36);
        double[][] doubleArray38 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray37);
        double[][] doubleArray39 = new double[][] {};
        double[][] doubleArray40 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray39);
        double[][] doubleArray41 = new double[][] {};
        double[][] doubleArray42 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray41);
        double[] doubleArray44 = new double[] { 1 };
        double[] doubleArray46 = new double[] { 1 };
        double[] doubleArray48 = new double[] { 1 };
        double[] doubleArray50 = new double[] { 1 };
        double[] doubleArray52 = new double[] { 1 };
        double[][] doubleArray53 = new double[][] { doubleArray44, doubleArray46, doubleArray48, doubleArray50, doubleArray52 };
        int[] intArray54 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray53, intArray54);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray41, intArray54);
        double[] doubleArray60 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray64 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray68 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray72 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray73 = new double[][] { doubleArray60, doubleArray64, doubleArray68, doubleArray72 };
        double[] doubleArray75 = new double[] { 1 };
        double[] doubleArray77 = new double[] { 1 };
        double[] doubleArray79 = new double[] { 1 };
        double[] doubleArray81 = new double[] { 1 };
        double[] doubleArray83 = new double[] { 1 };
        double[][] doubleArray84 = new double[][] { doubleArray75, doubleArray77, doubleArray79, doubleArray81, doubleArray83 };
        int[] intArray85 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray84, intArray85);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray73, intArray85);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray41, intArray85);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray40, intArray85);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray38, intArray85);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray21, intArray85);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray3, intArray85);
        double[][] doubleArray93 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[][] doubleArray94 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[][] doubleArray95 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray94);
        double[][] doubleArray96 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray95);
        double[][] doubleArray97 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray96);
        double[][] doubleArray98 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray97);
        java.lang.Class<?> wildcardClass99 = doubleArray97.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[]");
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray75), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray77), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray79), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray81), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray83), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray84);
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray85), "[]");
        org.junit.Assert.assertNotNull(doubleArray93);
        org.junit.Assert.assertNotNull(doubleArray94);
        org.junit.Assert.assertNotNull(doubleArray95);
        org.junit.Assert.assertNotNull(doubleArray96);
        org.junit.Assert.assertNotNull(doubleArray97);
        org.junit.Assert.assertNotNull(doubleArray98);
        org.junit.Assert.assertNotNull(wildcardClass99);
    }

    @Test
    public void test2044() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2044");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray5 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray6 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray34 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray35 = new double[][] { doubleArray13, doubleArray20, doubleArray27, doubleArray34 };
        double[][] doubleArray36 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray35);
        double[][] doubleArray37 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray36);
        double[][] doubleArray38 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray37);
        double[][] doubleArray39 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray37);
        double[][] doubleArray40 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray37);
        double[][] doubleArray41 = new double[][] {};
        double[][] doubleArray42 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray41);
        double[][] doubleArray43 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray42);
        double[] doubleArray50 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray57 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray64 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray71 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray72 = new double[][] { doubleArray50, doubleArray57, doubleArray64, doubleArray71 };
        double[][] doubleArray73 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray72);
        double[] doubleArray75 = new double[] { 1 };
        double[] doubleArray77 = new double[] { 1 };
        double[] doubleArray79 = new double[] { 1 };
        double[] doubleArray81 = new double[] { 1 };
        double[] doubleArray83 = new double[] { 1 };
        double[][] doubleArray84 = new double[][] { doubleArray75, doubleArray77, doubleArray79, doubleArray81, doubleArray83 };
        int[] intArray85 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray84, intArray85);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray73, intArray85);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray42, intArray85);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray40, intArray85);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray6, intArray85);
        java.lang.Class<?> wildcardClass91 = intArray85.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray71), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray75), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray77), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray79), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray81), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray83), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray84);
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray85), "[]");
        org.junit.Assert.assertNotNull(wildcardClass91);
    }

    @Test
    public void test2045() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2045");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[][] doubleArray5 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray4);
        java.lang.Class<?> wildcardClass6 = doubleArray5.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(wildcardClass6);
    }

    @Test
    public void test2046() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2046");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[][] doubleArray5 = null;
        double[][] doubleArray6 = new double[][] {};
        double[][] doubleArray7 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray6);
        double[][] doubleArray8 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray7);
        double[] doubleArray12 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray16 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray20 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray24 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray25 = new double[][] { doubleArray12, doubleArray16, doubleArray20, doubleArray24 };
        double[] doubleArray27 = new double[] { 1 };
        double[] doubleArray29 = new double[] { 1 };
        double[] doubleArray31 = new double[] { 1 };
        double[] doubleArray33 = new double[] { 1 };
        double[] doubleArray35 = new double[] { 1 };
        double[][] doubleArray36 = new double[][] { doubleArray27, doubleArray29, doubleArray31, doubleArray33, doubleArray35 };
        int[] intArray37 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray36, intArray37);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray25, intArray37);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray8, intArray37);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray5, intArray37);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray3, intArray37);
        double[][] doubleArray43 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[][] doubleArray44 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray43);
        double[][] doubleArray45 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray44);
        double[][] doubleArray46 = new double[][] {};
        double[][] doubleArray47 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray46);
        double[][] doubleArray48 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray46);
        double[][] doubleArray49 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray46);
        double[][] doubleArray50 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray46);
        double[][] doubleArray51 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray50);
        double[][] doubleArray52 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray50);
        double[][] doubleArray53 = new double[][] {};
        double[][] doubleArray54 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray53);
        int[] intArray55 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray54, intArray55);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray52, intArray55);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray45, intArray55);
        double[][] doubleArray59 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray45);
        double[][] doubleArray60 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray45);
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[]");
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertNotNull(doubleArray60);
    }

    @Test
    public void test2047() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2047");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        int[] intArray2 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray1, intArray2);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray5 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray6 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray5);
        double[][] doubleArray7 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray5);
        double[][] doubleArray8 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray5);
        double[][] doubleArray9 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray8);
        double[][] doubleArray10 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray9);
        double[][] doubleArray11 = new double[][] {};
        double[][] doubleArray12 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray11);
        double[] doubleArray14 = new double[] { 1 };
        double[] doubleArray16 = new double[] { 1 };
        double[] doubleArray18 = new double[] { 1 };
        double[] doubleArray20 = new double[] { 1 };
        double[] doubleArray22 = new double[] { 1 };
        double[][] doubleArray23 = new double[][] { doubleArray14, doubleArray16, doubleArray18, doubleArray20, doubleArray22 };
        int[] intArray24 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray23, intArray24);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray11, intArray24);
        double[][] doubleArray27 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray11);
        double[][] doubleArray28 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray27);
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray30 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray29);
        double[] doubleArray37 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray44 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray51 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray58 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray59 = new double[][] { doubleArray37, doubleArray44, doubleArray51, doubleArray58 };
        double[][] doubleArray60 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray59);
        double[][] doubleArray61 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray60);
        double[][] doubleArray62 = new double[][] {};
        double[][] doubleArray63 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray62);
        double[] doubleArray65 = new double[] { 1 };
        double[] doubleArray67 = new double[] { 1 };
        double[] doubleArray69 = new double[] { 1 };
        double[] doubleArray71 = new double[] { 1 };
        double[] doubleArray73 = new double[] { 1 };
        double[][] doubleArray74 = new double[][] { doubleArray65, doubleArray67, doubleArray69, doubleArray71, doubleArray73 };
        int[] intArray75 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray74, intArray75);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray62, intArray75);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray61, intArray75);
        double[][] doubleArray79 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray61);
        double[] doubleArray81 = new double[] { 1 };
        double[] doubleArray83 = new double[] { 1 };
        double[] doubleArray85 = new double[] { 1 };
        double[] doubleArray87 = new double[] { 1 };
        double[] doubleArray89 = new double[] { 1 };
        double[][] doubleArray90 = new double[][] { doubleArray81, doubleArray83, doubleArray85, doubleArray87, doubleArray89 };
        int[] intArray91 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray90, intArray91);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray79, intArray91);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray29, intArray91);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray9, intArray91);
        java.lang.Class<?> wildcardClass96 = intArray91.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray71), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray73), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[]");
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertNotNull(doubleArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray81), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray83), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray85), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray87), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray89), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray90);
        org.junit.Assert.assertNotNull(intArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray91), "[]");
        org.junit.Assert.assertNotNull(wildcardClass96);
    }

    @Test
    public void test2048() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2048");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray30 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray31 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray32 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray31);
        double[][] doubleArray33 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray32);
        double[][] doubleArray34 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray33);
        double[][] doubleArray35 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray33);
        double[][] doubleArray36 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray35);
        double[][] doubleArray37 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray35);
        double[][] doubleArray38 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray35);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertNotNull(doubleArray38);
    }

    @Test
    public void test2049() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2049");
        double[][] doubleArray0 = null;
        double[][] doubleArray1 = new double[][] {};
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray3 = new double[][] {};
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[][] doubleArray5 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[][] doubleArray6 = new double[][] {};
        double[][] doubleArray7 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray6);
        double[][] doubleArray8 = new double[][] {};
        double[][] doubleArray9 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray8);
        double[] doubleArray11 = new double[] { 1 };
        double[] doubleArray13 = new double[] { 1 };
        double[] doubleArray15 = new double[] { 1 };
        double[] doubleArray17 = new double[] { 1 };
        double[] doubleArray19 = new double[] { 1 };
        double[][] doubleArray20 = new double[][] { doubleArray11, doubleArray13, doubleArray15, doubleArray17, doubleArray19 };
        int[] intArray21 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray20, intArray21);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray8, intArray21);
        double[] doubleArray27 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray31 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray35 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray39 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray40 = new double[][] { doubleArray27, doubleArray31, doubleArray35, doubleArray39 };
        double[] doubleArray42 = new double[] { 1 };
        double[] doubleArray44 = new double[] { 1 };
        double[] doubleArray46 = new double[] { 1 };
        double[] doubleArray48 = new double[] { 1 };
        double[] doubleArray50 = new double[] { 1 };
        double[][] doubleArray51 = new double[][] { doubleArray42, doubleArray44, doubleArray46, doubleArray48, doubleArray50 };
        int[] intArray52 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray51, intArray52);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray40, intArray52);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray8, intArray52);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray6, intArray52);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray3, intArray52);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray1, intArray52);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray0, intArray52);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[]");
    }

    @Test
    public void test2050() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2050");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray4 = new double[][] {};
        double[][] doubleArray5 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray4);
        double[][] doubleArray6 = new double[][] {};
        double[][] doubleArray7 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray6);
        double[] doubleArray9 = new double[] { 1 };
        double[] doubleArray11 = new double[] { 1 };
        double[] doubleArray13 = new double[] { 1 };
        double[] doubleArray15 = new double[] { 1 };
        double[] doubleArray17 = new double[] { 1 };
        double[][] doubleArray18 = new double[][] { doubleArray9, doubleArray11, doubleArray13, doubleArray15, doubleArray17 };
        int[] intArray19 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray18, intArray19);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray6, intArray19);
        double[] doubleArray25 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray29 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray33 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray37 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray38 = new double[][] { doubleArray25, doubleArray29, doubleArray33, doubleArray37 };
        double[] doubleArray40 = new double[] { 1 };
        double[] doubleArray42 = new double[] { 1 };
        double[] doubleArray44 = new double[] { 1 };
        double[] doubleArray46 = new double[] { 1 };
        double[] doubleArray48 = new double[] { 1 };
        double[][] doubleArray49 = new double[][] { doubleArray40, doubleArray42, doubleArray44, doubleArray46, doubleArray48 };
        int[] intArray50 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray49, intArray50);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray38, intArray50);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray6, intArray50);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray4, intArray50);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray1, intArray50);
        double[][] doubleArray56 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray57 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray58 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray57);
        double[][] doubleArray59 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray57);
        java.lang.Class<?> wildcardClass60 = doubleArray59.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[]");
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertNotNull(wildcardClass60);
    }

    @Test
    public void test2051() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2051");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray30 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray31 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray32 = new double[][] {};
        double[][] doubleArray33 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray32);
        double[][] doubleArray34 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray33);
        double[][] doubleArray35 = new double[][] {};
        double[][] doubleArray36 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray35);
        double[][] doubleArray37 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray35);
        double[][] doubleArray38 = new double[][] {};
        double[][] doubleArray39 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray38);
        double[][] doubleArray40 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray39);
        double[][] doubleArray41 = new double[][] {};
        double[][] doubleArray42 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray41);
        double[][] doubleArray43 = new double[][] {};
        double[][] doubleArray44 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray43);
        double[] doubleArray46 = new double[] { 1 };
        double[] doubleArray48 = new double[] { 1 };
        double[] doubleArray50 = new double[] { 1 };
        double[] doubleArray52 = new double[] { 1 };
        double[] doubleArray54 = new double[] { 1 };
        double[][] doubleArray55 = new double[][] { doubleArray46, doubleArray48, doubleArray50, doubleArray52, doubleArray54 };
        int[] intArray56 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray55, intArray56);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray43, intArray56);
        double[] doubleArray62 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray66 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray70 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray74 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray75 = new double[][] { doubleArray62, doubleArray66, doubleArray70, doubleArray74 };
        double[] doubleArray77 = new double[] { 1 };
        double[] doubleArray79 = new double[] { 1 };
        double[] doubleArray81 = new double[] { 1 };
        double[] doubleArray83 = new double[] { 1 };
        double[] doubleArray85 = new double[] { 1 };
        double[][] doubleArray86 = new double[][] { doubleArray77, doubleArray79, doubleArray81, doubleArray83, doubleArray85 };
        int[] intArray87 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray86, intArray87);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray75, intArray87);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray43, intArray87);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray42, intArray87);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray40, intArray87);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray35, intArray87);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray34, intArray87);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray31, intArray87);
        double[][] doubleArray96 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray31);
        double[][] doubleArray97 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray96);
        double[][] doubleArray98 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray96);
        double[][] doubleArray99 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray98);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[]");
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray66), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray70), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray74), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray77), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray79), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray81), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray83), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray85), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray86);
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray87), "[]");
        org.junit.Assert.assertNotNull(doubleArray96);
        org.junit.Assert.assertNotNull(doubleArray97);
        org.junit.Assert.assertNotNull(doubleArray98);
        org.junit.Assert.assertNotNull(doubleArray99);
    }

    @Test
    public void test2052() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2052");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray30 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray31 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray32 = new double[][] {};
        double[][] doubleArray33 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray32);
        double[][] doubleArray34 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray32);
        double[][] doubleArray35 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray34);
        double[][] doubleArray36 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray35);
        double[][] doubleArray37 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray35);
        double[][] doubleArray38 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray37);
        double[][] doubleArray39 = new double[][] {};
        double[][] doubleArray40 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray39);
        double[][] doubleArray41 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray40);
        double[][] doubleArray42 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray41);
        double[][] doubleArray43 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray41);
        double[][] doubleArray44 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray41);
        double[][] doubleArray45 = new double[][] {};
        double[][] doubleArray46 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray45);
        double[][] doubleArray47 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray45);
        double[] doubleArray54 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray61 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray68 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray75 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray76 = new double[][] { doubleArray54, doubleArray61, doubleArray68, doubleArray75 };
        double[][] doubleArray77 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray76);
        double[][] doubleArray78 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray76);
        double[][] doubleArray79 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray76);
        double[][] doubleArray80 = new double[][] {};
        double[][] doubleArray81 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray80);
        int[] intArray82 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray81, intArray82);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray79, intArray82);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray47, intArray82);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray41, intArray82);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray38, intArray82);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray28, intArray82);
        double[][] doubleArray89 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray90 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray89);
        double[][] doubleArray91 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray90);
        java.lang.Class<?> wildcardClass92 = doubleArray91.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray75), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertNotNull(doubleArray81);
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[]");
        org.junit.Assert.assertNotNull(doubleArray89);
        org.junit.Assert.assertNotNull(doubleArray90);
        org.junit.Assert.assertNotNull(doubleArray91);
        org.junit.Assert.assertNotNull(wildcardClass92);
    }

    @Test
    public void test2053() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2053");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray3 = new double[][] {};
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[][] doubleArray5 = new double[][] {};
        double[][] doubleArray6 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray5);
        double[] doubleArray8 = new double[] { 1 };
        double[] doubleArray10 = new double[] { 1 };
        double[] doubleArray12 = new double[] { 1 };
        double[] doubleArray14 = new double[] { 1 };
        double[] doubleArray16 = new double[] { 1 };
        double[][] doubleArray17 = new double[][] { doubleArray8, doubleArray10, doubleArray12, doubleArray14, doubleArray16 };
        int[] intArray18 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray17, intArray18);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray5, intArray18);
        double[] doubleArray24 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray28 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray32 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray36 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray37 = new double[][] { doubleArray24, doubleArray28, doubleArray32, doubleArray36 };
        double[] doubleArray39 = new double[] { 1 };
        double[] doubleArray41 = new double[] { 1 };
        double[] doubleArray43 = new double[] { 1 };
        double[] doubleArray45 = new double[] { 1 };
        double[] doubleArray47 = new double[] { 1 };
        double[][] doubleArray48 = new double[][] { doubleArray39, doubleArray41, doubleArray43, doubleArray45, doubleArray47 };
        int[] intArray49 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray48, intArray49);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray37, intArray49);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray5, intArray49);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray4, intArray49);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray2, intArray49);
        double[][] doubleArray55 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray56 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray57 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray58 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray59 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray58);
        double[][] doubleArray60 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray59);
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[]");
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[]");
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertNotNull(doubleArray60);
    }

    @Test
    public void test2054() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2054");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        int[] intArray2 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray1, intArray2);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray5 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray4);
        double[][] doubleArray6 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray4);
        double[][] doubleArray7 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray4);
        double[][] doubleArray8 = null;
        double[][] doubleArray9 = new double[][] {};
        double[][] doubleArray10 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray9);
        double[][] doubleArray11 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray10);
        double[] doubleArray15 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray19 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray23 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray27 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray28 = new double[][] { doubleArray15, doubleArray19, doubleArray23, doubleArray27 };
        double[] doubleArray30 = new double[] { 1 };
        double[] doubleArray32 = new double[] { 1 };
        double[] doubleArray34 = new double[] { 1 };
        double[] doubleArray36 = new double[] { 1 };
        double[] doubleArray38 = new double[] { 1 };
        double[][] doubleArray39 = new double[][] { doubleArray30, doubleArray32, doubleArray34, doubleArray36, doubleArray38 };
        int[] intArray40 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray39, intArray40);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray28, intArray40);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray11, intArray40);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray8, intArray40);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray4, intArray40);
        java.lang.Class<?> wildcardClass46 = doubleArray4.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[]");
        org.junit.Assert.assertNotNull(wildcardClass46);
    }

    @Test
    public void test2055() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2055");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray30 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray29);
        double[][] doubleArray31 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        double[][] doubleArray32 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray31);
        double[] doubleArray36 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray40 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray44 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray48 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray49 = new double[][] { doubleArray36, doubleArray40, doubleArray44, doubleArray48 };
        double[] doubleArray51 = new double[] { 1 };
        double[] doubleArray53 = new double[] { 1 };
        double[] doubleArray55 = new double[] { 1 };
        double[] doubleArray57 = new double[] { 1 };
        double[] doubleArray59 = new double[] { 1 };
        double[][] doubleArray60 = new double[][] { doubleArray51, doubleArray53, doubleArray55, doubleArray57, doubleArray59 };
        int[] intArray61 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray60, intArray61);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray49, intArray61);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray32, intArray61);
        java.lang.Class<?> wildcardClass65 = doubleArray32.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[]");
        org.junit.Assert.assertNotNull(wildcardClass65);
    }

    @Test
    public void test2056() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2056");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray5 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray6 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray7 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray6);
        double[][] doubleArray8 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray7);
        double[][] doubleArray9 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray8);
        double[][] doubleArray10 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray8);
        java.lang.Class<?> wildcardClass11 = doubleArray10.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertNotNull(wildcardClass11);
    }

    @Test
    public void test2057() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2057");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[] doubleArray31 = new double[] { 1 };
        double[] doubleArray33 = new double[] { 1 };
        double[] doubleArray35 = new double[] { 1 };
        double[] doubleArray37 = new double[] { 1 };
        double[] doubleArray39 = new double[] { 1 };
        double[][] doubleArray40 = new double[][] { doubleArray31, doubleArray33, doubleArray35, doubleArray37, doubleArray39 };
        int[] intArray41 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray40, intArray41);
        double[][] doubleArray43 = new double[][] {};
        double[][] doubleArray44 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray43);
        int[] intArray45 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray44, intArray45);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray40, intArray45);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray28, intArray45);
        double[][] doubleArray49 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray50 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray51 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray50);
        double[][] doubleArray52 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray50);
        double[][] doubleArray53 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray52);
        double[][] doubleArray54 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray52);
        java.lang.Class<?> wildcardClass55 = doubleArray54.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertNotNull(wildcardClass55);
    }

    @Test
    public void test2058() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2058");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray3 = new double[][] {};
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[][] doubleArray5 = new double[][] {};
        double[][] doubleArray6 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray5);
        double[] doubleArray8 = new double[] { 1 };
        double[] doubleArray10 = new double[] { 1 };
        double[] doubleArray12 = new double[] { 1 };
        double[] doubleArray14 = new double[] { 1 };
        double[] doubleArray16 = new double[] { 1 };
        double[][] doubleArray17 = new double[][] { doubleArray8, doubleArray10, doubleArray12, doubleArray14, doubleArray16 };
        int[] intArray18 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray17, intArray18);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray5, intArray18);
        double[] doubleArray24 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray28 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray32 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray36 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray37 = new double[][] { doubleArray24, doubleArray28, doubleArray32, doubleArray36 };
        double[] doubleArray39 = new double[] { 1 };
        double[] doubleArray41 = new double[] { 1 };
        double[] doubleArray43 = new double[] { 1 };
        double[] doubleArray45 = new double[] { 1 };
        double[] doubleArray47 = new double[] { 1 };
        double[][] doubleArray48 = new double[][] { doubleArray39, doubleArray41, doubleArray43, doubleArray45, doubleArray47 };
        int[] intArray49 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray48, intArray49);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray37, intArray49);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray5, intArray49);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray4, intArray49);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray2, intArray49);
        double[][] doubleArray55 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray56 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray55);
        double[][] doubleArray57 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray55);
        double[][] doubleArray58 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray57);
        double[][] doubleArray59 = new double[][] {};
        double[][] doubleArray60 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray59);
        double[][] doubleArray61 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray60);
        double[] doubleArray65 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray69 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray73 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray77 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray78 = new double[][] { doubleArray65, doubleArray69, doubleArray73, doubleArray77 };
        double[] doubleArray80 = new double[] { 1 };
        double[] doubleArray82 = new double[] { 1 };
        double[] doubleArray84 = new double[] { 1 };
        double[] doubleArray86 = new double[] { 1 };
        double[] doubleArray88 = new double[] { 1 };
        double[][] doubleArray89 = new double[][] { doubleArray80, doubleArray82, doubleArray84, doubleArray86, doubleArray88 };
        int[] intArray90 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray89, intArray90);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray78, intArray90);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray61, intArray90);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray57, intArray90);
        double[][] doubleArray95 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray57);
        double[][] doubleArray96 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray57);
        double[][] doubleArray97 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray96);
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[]");
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[]");
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray73), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray77), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray80), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray82), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray84), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray86), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray88), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray89);
        org.junit.Assert.assertNotNull(intArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray90), "[]");
        org.junit.Assert.assertNotNull(doubleArray95);
        org.junit.Assert.assertNotNull(doubleArray96);
        org.junit.Assert.assertNotNull(doubleArray97);
    }

    @Test
    public void test2059() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2059");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[] doubleArray9 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray16 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray23 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray30 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray31 = new double[][] { doubleArray9, doubleArray16, doubleArray23, doubleArray30 };
        double[][] doubleArray32 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray31);
        double[] doubleArray34 = new double[] { 1 };
        double[] doubleArray36 = new double[] { 1 };
        double[] doubleArray38 = new double[] { 1 };
        double[] doubleArray40 = new double[] { 1 };
        double[] doubleArray42 = new double[] { 1 };
        double[][] doubleArray43 = new double[][] { doubleArray34, doubleArray36, doubleArray38, doubleArray40, doubleArray42 };
        int[] intArray44 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray43, intArray44);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray32, intArray44);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray1, intArray44);
        double[][] doubleArray48 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray49 = new double[][] {};
        double[][] doubleArray50 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray49);
        double[][] doubleArray51 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray49);
        double[][] doubleArray52 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray49);
        double[][] doubleArray53 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray49);
        double[][] doubleArray54 = new double[][] {};
        double[][] doubleArray55 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray54);
        double[][] doubleArray56 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray55);
        double[] doubleArray60 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray64 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray68 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray72 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray73 = new double[][] { doubleArray60, doubleArray64, doubleArray68, doubleArray72 };
        double[] doubleArray75 = new double[] { 1 };
        double[] doubleArray77 = new double[] { 1 };
        double[] doubleArray79 = new double[] { 1 };
        double[] doubleArray81 = new double[] { 1 };
        double[] doubleArray83 = new double[] { 1 };
        double[][] doubleArray84 = new double[][] { doubleArray75, doubleArray77, doubleArray79, doubleArray81, doubleArray83 };
        int[] intArray85 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray84, intArray85);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray73, intArray85);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray56, intArray85);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray49, intArray85);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray48, intArray85);
        double[][] doubleArray91 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray48);
        double[][] doubleArray92 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray91);
        double[][] doubleArray93 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray92);
        double[][] doubleArray94 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray93);
        java.lang.Class<?> wildcardClass95 = doubleArray93.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray75), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray77), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray79), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray81), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray83), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray84);
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray85), "[]");
        org.junit.Assert.assertNotNull(doubleArray91);
        org.junit.Assert.assertNotNull(doubleArray92);
        org.junit.Assert.assertNotNull(doubleArray93);
        org.junit.Assert.assertNotNull(doubleArray94);
        org.junit.Assert.assertNotNull(wildcardClass95);
    }

    @Test
    public void test2060() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2060");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[] doubleArray3 = new double[] { 1 };
        double[] doubleArray5 = new double[] { 1 };
        double[] doubleArray7 = new double[] { 1 };
        double[] doubleArray9 = new double[] { 1 };
        double[] doubleArray11 = new double[] { 1 };
        double[][] doubleArray12 = new double[][] { doubleArray3, doubleArray5, doubleArray7, doubleArray9, doubleArray11 };
        int[] intArray13 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray12, intArray13);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray0, intArray13);
        double[] doubleArray19 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray23 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray27 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray31 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray32 = new double[][] { doubleArray19, doubleArray23, doubleArray27, doubleArray31 };
        double[] doubleArray34 = new double[] { 1 };
        double[] doubleArray36 = new double[] { 1 };
        double[] doubleArray38 = new double[] { 1 };
        double[] doubleArray40 = new double[] { 1 };
        double[] doubleArray42 = new double[] { 1 };
        double[][] doubleArray43 = new double[][] { doubleArray34, doubleArray36, doubleArray38, doubleArray40, doubleArray42 };
        int[] intArray44 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray43, intArray44);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray32, intArray44);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray0, intArray44);
        double[] doubleArray49 = new double[] { 1 };
        double[] doubleArray51 = new double[] { 1 };
        double[] doubleArray53 = new double[] { 1 };
        double[] doubleArray55 = new double[] { 1 };
        double[] doubleArray57 = new double[] { 1 };
        double[][] doubleArray58 = new double[][] { doubleArray49, doubleArray51, doubleArray53, doubleArray55, doubleArray57 };
        int[] intArray59 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray58, intArray59);
        double[][] doubleArray61 = new double[][] {};
        double[][] doubleArray62 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray61);
        int[] intArray63 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray62, intArray63);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray58, intArray63);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray0, intArray63);
        double[][] doubleArray67 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray68 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray67);
        double[][] doubleArray69 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray68);
        double[][] doubleArray70 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray68);
        double[][] doubleArray71 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray70);
        double[][] doubleArray72 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray70);
        double[][] doubleArray73 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray72);
        java.lang.Class<?> wildcardClass74 = doubleArray72.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[]");
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertNotNull(wildcardClass74);
    }

    @Test
    public void test2061() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2061");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[] doubleArray6 = new double[] { 1 };
        double[] doubleArray8 = new double[] { 1 };
        double[] doubleArray10 = new double[] { 1 };
        double[] doubleArray12 = new double[] { 1 };
        double[] doubleArray14 = new double[] { 1 };
        double[][] doubleArray15 = new double[][] { doubleArray6, doubleArray8, doubleArray10, doubleArray12, doubleArray14 };
        int[] intArray16 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray15, intArray16);
        double[][] doubleArray18 = new double[][] {};
        double[][] doubleArray19 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray18);
        int[] intArray20 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray19, intArray20);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray15, intArray20);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray3, intArray20);
        double[][] doubleArray24 = new double[][] {};
        double[][] doubleArray25 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray24);
        double[][] doubleArray26 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray25);
        double[] doubleArray30 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray34 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray38 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray42 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray43 = new double[][] { doubleArray30, doubleArray34, doubleArray38, doubleArray42 };
        double[] doubleArray45 = new double[] { 1 };
        double[] doubleArray47 = new double[] { 1 };
        double[] doubleArray49 = new double[] { 1 };
        double[] doubleArray51 = new double[] { 1 };
        double[] doubleArray53 = new double[] { 1 };
        double[][] doubleArray54 = new double[][] { doubleArray45, doubleArray47, doubleArray49, doubleArray51, doubleArray53 };
        int[] intArray55 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray54, intArray55);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray43, intArray55);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray25, intArray55);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray3, intArray55);
        double[][] doubleArray60 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[][] doubleArray61 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray60);
        java.lang.Class<?> wildcardClass62 = doubleArray60.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[]");
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[]");
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertNotNull(wildcardClass62);
    }

    @Test
    public void test2062() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2062");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        int[] intArray2 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray1, intArray2);
        double[] doubleArray5 = new double[] { 1 };
        double[] doubleArray7 = new double[] { 1 };
        double[] doubleArray9 = new double[] { 1 };
        double[] doubleArray11 = new double[] { 1 };
        double[] doubleArray13 = new double[] { 1 };
        double[][] doubleArray14 = new double[][] { doubleArray5, doubleArray7, doubleArray9, doubleArray11, doubleArray13 };
        int[] intArray15 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray14, intArray15);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray1, intArray15);
        double[][] doubleArray18 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray19 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray18);
        double[][] doubleArray20 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray18);
        double[][] doubleArray21 = new double[][] {};
        double[][] doubleArray22 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray21);
        double[][] doubleArray23 = new double[][] {};
        double[][] doubleArray24 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray23);
        double[] doubleArray26 = new double[] { 1 };
        double[] doubleArray28 = new double[] { 1 };
        double[] doubleArray30 = new double[] { 1 };
        double[] doubleArray32 = new double[] { 1 };
        double[] doubleArray34 = new double[] { 1 };
        double[][] doubleArray35 = new double[][] { doubleArray26, doubleArray28, doubleArray30, doubleArray32, doubleArray34 };
        int[] intArray36 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray35, intArray36);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray23, intArray36);
        double[] doubleArray42 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray46 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray50 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray54 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray55 = new double[][] { doubleArray42, doubleArray46, doubleArray50, doubleArray54 };
        double[] doubleArray57 = new double[] { 1 };
        double[] doubleArray59 = new double[] { 1 };
        double[] doubleArray61 = new double[] { 1 };
        double[] doubleArray63 = new double[] { 1 };
        double[] doubleArray65 = new double[] { 1 };
        double[][] doubleArray66 = new double[][] { doubleArray57, doubleArray59, doubleArray61, doubleArray63, doubleArray65 };
        int[] intArray67 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray66, intArray67);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray55, intArray67);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray23, intArray67);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray22, intArray67);
        double[][] doubleArray72 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray22);
        double[][] doubleArray73 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray72);
        double[][] doubleArray74 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray72);
        double[][] doubleArray75 = new double[][] {};
        double[][] doubleArray76 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray75);
        double[] doubleArray78 = new double[] { 1 };
        double[] doubleArray80 = new double[] { 1 };
        double[] doubleArray82 = new double[] { 1 };
        double[] doubleArray84 = new double[] { 1 };
        double[] doubleArray86 = new double[] { 1 };
        double[][] doubleArray87 = new double[][] { doubleArray78, doubleArray80, doubleArray82, doubleArray84, doubleArray86 };
        int[] intArray88 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray87, intArray88);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray75, intArray88);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray72, intArray88);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray18, intArray88);
        double[][] doubleArray93 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray18);
        double[][] doubleArray94 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray93);
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[]");
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray78), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray80), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray82), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray84), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray86), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray87);
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray88), "[]");
        org.junit.Assert.assertNotNull(doubleArray93);
        org.junit.Assert.assertNotNull(doubleArray94);
    }

    @Test
    public void test2063() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2063");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[] doubleArray9 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray16 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray23 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray30 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray31 = new double[][] { doubleArray9, doubleArray16, doubleArray23, doubleArray30 };
        double[][] doubleArray32 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray31);
        double[] doubleArray34 = new double[] { 1 };
        double[] doubleArray36 = new double[] { 1 };
        double[] doubleArray38 = new double[] { 1 };
        double[] doubleArray40 = new double[] { 1 };
        double[] doubleArray42 = new double[] { 1 };
        double[][] doubleArray43 = new double[][] { doubleArray34, doubleArray36, doubleArray38, doubleArray40, doubleArray42 };
        int[] intArray44 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray43, intArray44);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray32, intArray44);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray1, intArray44);
        double[][] doubleArray48 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray49 = new double[][] {};
        double[][] doubleArray50 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray49);
        double[][] doubleArray51 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray49);
        double[][] doubleArray52 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray49);
        double[][] doubleArray53 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray49);
        double[][] doubleArray54 = new double[][] {};
        double[][] doubleArray55 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray54);
        double[][] doubleArray56 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray55);
        double[] doubleArray60 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray64 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray68 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray72 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray73 = new double[][] { doubleArray60, doubleArray64, doubleArray68, doubleArray72 };
        double[] doubleArray75 = new double[] { 1 };
        double[] doubleArray77 = new double[] { 1 };
        double[] doubleArray79 = new double[] { 1 };
        double[] doubleArray81 = new double[] { 1 };
        double[] doubleArray83 = new double[] { 1 };
        double[][] doubleArray84 = new double[][] { doubleArray75, doubleArray77, doubleArray79, doubleArray81, doubleArray83 };
        int[] intArray85 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray84, intArray85);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray73, intArray85);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray56, intArray85);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray49, intArray85);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray48, intArray85);
        double[][] doubleArray91 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray48);
        double[][] doubleArray92 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray48);
        java.lang.Class<?> wildcardClass93 = doubleArray92.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray75), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray77), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray79), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray81), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray83), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray84);
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray85), "[]");
        org.junit.Assert.assertNotNull(doubleArray91);
        org.junit.Assert.assertNotNull(doubleArray92);
        org.junit.Assert.assertNotNull(wildcardClass93);
    }

    @Test
    public void test2064() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2064");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[][] doubleArray5 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[][] doubleArray6 = new double[][] {};
        double[][] doubleArray7 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray6);
        double[][] doubleArray8 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray7);
        double[] doubleArray15 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray22 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray29 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray36 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray37 = new double[][] { doubleArray15, doubleArray22, doubleArray29, doubleArray36 };
        double[][] doubleArray38 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray37);
        double[] doubleArray40 = new double[] { 1 };
        double[] doubleArray42 = new double[] { 1 };
        double[] doubleArray44 = new double[] { 1 };
        double[] doubleArray46 = new double[] { 1 };
        double[] doubleArray48 = new double[] { 1 };
        double[][] doubleArray49 = new double[][] { doubleArray40, doubleArray42, doubleArray44, doubleArray46, doubleArray48 };
        int[] intArray50 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray49, intArray50);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray38, intArray50);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray7, intArray50);
        double[] doubleArray57 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray61 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray65 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray69 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray70 = new double[][] { doubleArray57, doubleArray61, doubleArray65, doubleArray69 };
        double[] doubleArray72 = new double[] { 1 };
        double[] doubleArray74 = new double[] { 1 };
        double[] doubleArray76 = new double[] { 1 };
        double[] doubleArray78 = new double[] { 1 };
        double[] doubleArray80 = new double[] { 1 };
        double[][] doubleArray81 = new double[][] { doubleArray72, doubleArray74, doubleArray76, doubleArray78, doubleArray80 };
        int[] intArray82 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray81, intArray82);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray70, intArray82);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray7, intArray82);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray3, intArray82);
        double[][] doubleArray87 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[][] doubleArray88 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray87);
        double[][] doubleArray89 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray88);
        double[][] doubleArray90 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray89);
        double[][] doubleArray91 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray90);
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[]");
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray74), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray78), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray80), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray81);
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[]");
        org.junit.Assert.assertNotNull(doubleArray87);
        org.junit.Assert.assertNotNull(doubleArray88);
        org.junit.Assert.assertNotNull(doubleArray89);
        org.junit.Assert.assertNotNull(doubleArray90);
        org.junit.Assert.assertNotNull(doubleArray91);
    }

    @Test
    public void test2065() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2065");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[] doubleArray10 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray17 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray24 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray31 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray32 = new double[][] { doubleArray10, doubleArray17, doubleArray24, doubleArray31 };
        double[][] doubleArray33 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray32);
        double[][] doubleArray34 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray32);
        double[][] doubleArray35 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray32);
        double[][] doubleArray36 = new double[][] {};
        double[][] doubleArray37 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray36);
        int[] intArray38 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray37, intArray38);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray35, intArray38);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray3, intArray38);
        double[][] doubleArray42 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[][] doubleArray43 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray42);
        java.lang.Class<?> wildcardClass44 = doubleArray43.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(wildcardClass44);
    }

    @Test
    public void test2066() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2066");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[][] doubleArray5 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[][] doubleArray6 = new double[][] {};
        double[][] doubleArray7 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray6);
        double[][] doubleArray8 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray7);
        double[][] doubleArray9 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray8);
        double[][] doubleArray10 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray9);
        double[][] doubleArray11 = null;
        double[][] doubleArray12 = new double[][] {};
        double[][] doubleArray13 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray12);
        double[][] doubleArray14 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray13);
        double[] doubleArray18 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray22 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray26 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray30 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray31 = new double[][] { doubleArray18, doubleArray22, doubleArray26, doubleArray30 };
        double[] doubleArray33 = new double[] { 1 };
        double[] doubleArray35 = new double[] { 1 };
        double[] doubleArray37 = new double[] { 1 };
        double[] doubleArray39 = new double[] { 1 };
        double[] doubleArray41 = new double[] { 1 };
        double[][] doubleArray42 = new double[][] { doubleArray33, doubleArray35, doubleArray37, doubleArray39, doubleArray41 };
        int[] intArray43 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray42, intArray43);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray31, intArray43);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray14, intArray43);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray11, intArray43);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray9, intArray43);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray5, intArray43);
        java.lang.Class<?> wildcardClass50 = doubleArray5.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[]");
        org.junit.Assert.assertNotNull(wildcardClass50);
    }

    @Test
    public void test2067() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2067");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = new double[][] {};
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[] doubleArray5 = new double[] { 1 };
        double[] doubleArray7 = new double[] { 1 };
        double[] doubleArray9 = new double[] { 1 };
        double[] doubleArray11 = new double[] { 1 };
        double[] doubleArray13 = new double[] { 1 };
        double[][] doubleArray14 = new double[][] { doubleArray5, doubleArray7, doubleArray9, doubleArray11, doubleArray13 };
        int[] intArray15 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray14, intArray15);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray2, intArray15);
        double[] doubleArray21 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray25 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray29 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray33 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray34 = new double[][] { doubleArray21, doubleArray25, doubleArray29, doubleArray33 };
        double[] doubleArray36 = new double[] { 1 };
        double[] doubleArray38 = new double[] { 1 };
        double[] doubleArray40 = new double[] { 1 };
        double[] doubleArray42 = new double[] { 1 };
        double[] doubleArray44 = new double[] { 1 };
        double[][] doubleArray45 = new double[][] { doubleArray36, doubleArray38, doubleArray40, doubleArray42, doubleArray44 };
        int[] intArray46 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray45, intArray46);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray34, intArray46);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray2, intArray46);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray1, intArray46);
        double[][] doubleArray51 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray52 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray51);
        double[][] doubleArray53 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray52);
        double[][] doubleArray54 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray53);
        double[][] doubleArray55 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray54);
        double[][] doubleArray56 = new double[][] {};
        double[][] doubleArray57 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray56);
        double[][] doubleArray58 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray56);
        double[][] doubleArray59 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray58);
        double[][] doubleArray60 = null;
        double[][] doubleArray61 = new double[][] {};
        double[][] doubleArray62 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray61);
        double[][] doubleArray63 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray62);
        double[] doubleArray67 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray71 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray75 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray79 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray80 = new double[][] { doubleArray67, doubleArray71, doubleArray75, doubleArray79 };
        double[] doubleArray82 = new double[] { 1 };
        double[] doubleArray84 = new double[] { 1 };
        double[] doubleArray86 = new double[] { 1 };
        double[] doubleArray88 = new double[] { 1 };
        double[] doubleArray90 = new double[] { 1 };
        double[][] doubleArray91 = new double[][] { doubleArray82, doubleArray84, doubleArray86, doubleArray88, doubleArray90 };
        int[] intArray92 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray91, intArray92);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray80, intArray92);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray63, intArray92);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray60, intArray92);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray59, intArray92);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray54, intArray92);
        java.lang.Class<?> wildcardClass99 = doubleArray54.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray71), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray75), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray79), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertNotNull(doubleArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray82), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray84), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray86), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray88), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray90), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray91);
        org.junit.Assert.assertNotNull(intArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray92), "[]");
        org.junit.Assert.assertNotNull(wildcardClass99);
    }

    @Test
    public void test2068() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2068");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = new double[][] {};
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[] doubleArray8 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray12 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray16 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray20 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray21 = new double[][] { doubleArray8, doubleArray12, doubleArray16, doubleArray20 };
        double[] doubleArray23 = new double[] { 1 };
        double[] doubleArray25 = new double[] { 1 };
        double[] doubleArray27 = new double[] { 1 };
        double[] doubleArray29 = new double[] { 1 };
        double[] doubleArray31 = new double[] { 1 };
        double[][] doubleArray32 = new double[][] { doubleArray23, doubleArray25, doubleArray27, doubleArray29, doubleArray31 };
        int[] intArray33 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray32, intArray33);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray21, intArray33);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray3, intArray33);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray1, intArray33);
        double[][] doubleArray38 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray39 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray38);
        double[][] doubleArray40 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray39);
        double[][] doubleArray41 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray39);
        double[][] doubleArray42 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray41);
        double[][] doubleArray43 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray42);
        double[][] doubleArray44 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray42);
        double[][] doubleArray45 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray44);
        double[][] doubleArray46 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray45);
        double[][] doubleArray47 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray46);
        java.lang.Class<?> wildcardClass48 = doubleArray47.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertNotNull(wildcardClass48);
    }

    @Test
    public void test2069() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2069");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[] doubleArray3 = new double[] { 1 };
        double[] doubleArray5 = new double[] { 1 };
        double[] doubleArray7 = new double[] { 1 };
        double[] doubleArray9 = new double[] { 1 };
        double[] doubleArray11 = new double[] { 1 };
        double[][] doubleArray12 = new double[][] { doubleArray3, doubleArray5, doubleArray7, doubleArray9, doubleArray11 };
        int[] intArray13 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray12, intArray13);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray0, intArray13);
        double[][] doubleArray16 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[] doubleArray23 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray30 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray37 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray44 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray45 = new double[][] { doubleArray23, doubleArray30, doubleArray37, doubleArray44 };
        double[][] doubleArray46 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray45);
        double[] doubleArray48 = new double[] { 1 };
        double[] doubleArray50 = new double[] { 1 };
        double[] doubleArray52 = new double[] { 1 };
        double[] doubleArray54 = new double[] { 1 };
        double[] doubleArray56 = new double[] { 1 };
        double[][] doubleArray57 = new double[][] { doubleArray48, doubleArray50, doubleArray52, doubleArray54, doubleArray56 };
        int[] intArray58 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray57, intArray58);
        double[][] doubleArray60 = new double[][] {};
        double[][] doubleArray61 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray60);
        int[] intArray62 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray61, intArray62);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray57, intArray62);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray45, intArray62);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray16, intArray62);
        double[][] doubleArray67 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray16);
        double[][] doubleArray68 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray16);
        java.lang.Class<?> wildcardClass69 = doubleArray68.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[]");
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[]");
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertNotNull(wildcardClass69);
    }

    @Test
    public void test2070() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2070");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray30 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray29);
        double[][] doubleArray31 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        double[][] doubleArray32 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        double[][] doubleArray33 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        double[][] doubleArray34 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        double[][] doubleArray35 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray34);
        double[][] doubleArray36 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray35);
        double[][] doubleArray37 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray35);
        double[][] doubleArray38 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray35);
        double[][] doubleArray39 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray35);
        java.lang.Class<?> wildcardClass40 = doubleArray35.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertNotNull(wildcardClass40);
    }

    @Test
    public void test2071() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2071");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray5 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray4);
        double[][] doubleArray6 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray5);
        java.lang.Class<?> wildcardClass7 = doubleArray5.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(wildcardClass7);
    }

    @Test
    public void test2072() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2072");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[][] doubleArray5 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[][] doubleArray6 = new double[][] {};
        double[][] doubleArray7 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray6);
        int[] intArray8 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray7, intArray8);
        double[] doubleArray11 = new double[] { 1 };
        double[] doubleArray13 = new double[] { 1 };
        double[] doubleArray15 = new double[] { 1 };
        double[] doubleArray17 = new double[] { 1 };
        double[] doubleArray19 = new double[] { 1 };
        double[][] doubleArray20 = new double[][] { doubleArray11, doubleArray13, doubleArray15, doubleArray17, doubleArray19 };
        int[] intArray21 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray20, intArray21);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray7, intArray21);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray5, intArray21);
        java.lang.Class<?> wildcardClass25 = doubleArray5.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[]");
        org.junit.Assert.assertNotNull(wildcardClass25);
    }

    @Test
    public void test2073() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2073");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray30 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray31 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[] doubleArray33 = new double[] { 1 };
        double[] doubleArray35 = new double[] { 1 };
        double[] doubleArray37 = new double[] { 1 };
        double[] doubleArray39 = new double[] { 1 };
        double[] doubleArray41 = new double[] { 1 };
        double[][] doubleArray42 = new double[][] { doubleArray33, doubleArray35, doubleArray37, doubleArray39, doubleArray41 };
        int[] intArray43 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray42, intArray43);
        double[] doubleArray51 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray58 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray65 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray72 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray73 = new double[][] { doubleArray51, doubleArray58, doubleArray65, doubleArray72 };
        double[][] doubleArray74 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray73);
        double[] doubleArray76 = new double[] { 1 };
        double[] doubleArray78 = new double[] { 1 };
        double[] doubleArray80 = new double[] { 1 };
        double[] doubleArray82 = new double[] { 1 };
        double[] doubleArray84 = new double[] { 1 };
        double[][] doubleArray85 = new double[][] { doubleArray76, doubleArray78, doubleArray80, doubleArray82, doubleArray84 };
        int[] intArray86 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray85, intArray86);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray74, intArray86);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray42, intArray86);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray31, intArray86);
        double[][] doubleArray91 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray31);
        double[][] doubleArray92 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray31);
        double[][] doubleArray93 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray31);
        double[][] doubleArray94 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray93);
        double[][] doubleArray95 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray93);
        java.lang.Class<?> wildcardClass96 = doubleArray95.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray78), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray80), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray82), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray84), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray85);
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray86), "[]");
        org.junit.Assert.assertNotNull(doubleArray91);
        org.junit.Assert.assertNotNull(doubleArray92);
        org.junit.Assert.assertNotNull(doubleArray93);
        org.junit.Assert.assertNotNull(doubleArray94);
        org.junit.Assert.assertNotNull(doubleArray95);
        org.junit.Assert.assertNotNull(wildcardClass96);
    }

    @Test
    public void test2074() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2074");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray4 = new double[][] {};
        double[][] doubleArray5 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray4);
        double[][] doubleArray6 = new double[][] {};
        double[][] doubleArray7 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray6);
        double[] doubleArray9 = new double[] { 1 };
        double[] doubleArray11 = new double[] { 1 };
        double[] doubleArray13 = new double[] { 1 };
        double[] doubleArray15 = new double[] { 1 };
        double[] doubleArray17 = new double[] { 1 };
        double[][] doubleArray18 = new double[][] { doubleArray9, doubleArray11, doubleArray13, doubleArray15, doubleArray17 };
        int[] intArray19 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray18, intArray19);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray6, intArray19);
        double[] doubleArray25 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray29 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray33 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray37 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray38 = new double[][] { doubleArray25, doubleArray29, doubleArray33, doubleArray37 };
        double[] doubleArray40 = new double[] { 1 };
        double[] doubleArray42 = new double[] { 1 };
        double[] doubleArray44 = new double[] { 1 };
        double[] doubleArray46 = new double[] { 1 };
        double[] doubleArray48 = new double[] { 1 };
        double[][] doubleArray49 = new double[][] { doubleArray40, doubleArray42, doubleArray44, doubleArray46, doubleArray48 };
        int[] intArray50 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray49, intArray50);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray38, intArray50);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray6, intArray50);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray4, intArray50);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray1, intArray50);
        double[][] doubleArray56 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray57 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray58 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        java.lang.Class<?> wildcardClass59 = doubleArray1.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[]");
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertNotNull(wildcardClass59);
    }

    @Test
    public void test2075() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2075");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray30 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray29);
        double[][] doubleArray31 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        double[][] doubleArray32 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray31);
        double[][] doubleArray33 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray31);
        double[][] doubleArray34 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray33);
        double[][] doubleArray35 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray33);
        double[][] doubleArray36 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray33);
        double[][] doubleArray37 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray33);
        double[][] doubleArray38 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray33);
        java.lang.Class<?> wildcardClass39 = doubleArray38.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertNotNull(wildcardClass39);
    }

    @Test
    public void test2076() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2076");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[][] doubleArray5 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray4);
        double[][] doubleArray6 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray5);
        double[][] doubleArray7 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray5);
        double[] doubleArray14 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray21 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray28 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray35 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray36 = new double[][] { doubleArray14, doubleArray21, doubleArray28, doubleArray35 };
        double[][] doubleArray37 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray36);
        double[][] doubleArray38 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray37);
        double[][] doubleArray39 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray37);
        double[] doubleArray46 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray53 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray60 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray67 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray68 = new double[][] { doubleArray46, doubleArray53, doubleArray60, doubleArray67 };
        double[][] doubleArray69 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray68);
        double[][] doubleArray70 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray69);
        double[][] doubleArray71 = new double[][] {};
        double[][] doubleArray72 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray71);
        double[] doubleArray74 = new double[] { 1 };
        double[] doubleArray76 = new double[] { 1 };
        double[] doubleArray78 = new double[] { 1 };
        double[] doubleArray80 = new double[] { 1 };
        double[] doubleArray82 = new double[] { 1 };
        double[][] doubleArray83 = new double[][] { doubleArray74, doubleArray76, doubleArray78, doubleArray80, doubleArray82 };
        int[] intArray84 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray83, intArray84);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray71, intArray84);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray70, intArray84);
        double[][] doubleArray88 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray70);
        double[][] doubleArray89 = new double[][] {};
        double[][] doubleArray90 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray89);
        int[] intArray91 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray90, intArray91);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray88, intArray91);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray39, intArray91);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray7, intArray91);
        java.lang.Class<?> wildcardClass96 = intArray91.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray74), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray78), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray80), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray82), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray83);
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray84), "[]");
        org.junit.Assert.assertNotNull(doubleArray88);
        org.junit.Assert.assertNotNull(doubleArray89);
        org.junit.Assert.assertNotNull(doubleArray90);
        org.junit.Assert.assertNotNull(intArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray91), "[]");
        org.junit.Assert.assertNotNull(wildcardClass96);
    }

    @Test
    public void test2077() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2077");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[] doubleArray3 = new double[] { 1 };
        double[] doubleArray5 = new double[] { 1 };
        double[] doubleArray7 = new double[] { 1 };
        double[] doubleArray9 = new double[] { 1 };
        double[] doubleArray11 = new double[] { 1 };
        double[][] doubleArray12 = new double[][] { doubleArray3, doubleArray5, doubleArray7, doubleArray9, doubleArray11 };
        int[] intArray13 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray12, intArray13);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray0, intArray13);
        double[] doubleArray19 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray23 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray27 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray31 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray32 = new double[][] { doubleArray19, doubleArray23, doubleArray27, doubleArray31 };
        double[] doubleArray34 = new double[] { 1 };
        double[] doubleArray36 = new double[] { 1 };
        double[] doubleArray38 = new double[] { 1 };
        double[] doubleArray40 = new double[] { 1 };
        double[] doubleArray42 = new double[] { 1 };
        double[][] doubleArray43 = new double[][] { doubleArray34, doubleArray36, doubleArray38, doubleArray40, doubleArray42 };
        int[] intArray44 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray43, intArray44);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray32, intArray44);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray0, intArray44);
        double[] doubleArray49 = new double[] { 1 };
        double[] doubleArray51 = new double[] { 1 };
        double[] doubleArray53 = new double[] { 1 };
        double[] doubleArray55 = new double[] { 1 };
        double[] doubleArray57 = new double[] { 1 };
        double[][] doubleArray58 = new double[][] { doubleArray49, doubleArray51, doubleArray53, doubleArray55, doubleArray57 };
        int[] intArray59 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray58, intArray59);
        double[][] doubleArray61 = new double[][] {};
        double[][] doubleArray62 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray61);
        int[] intArray63 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray62, intArray63);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray58, intArray63);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray0, intArray63);
        double[][] doubleArray67 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray68 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray67);
        double[][] doubleArray69 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray67);
        double[][] doubleArray70 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray67);
        double[][] doubleArray71 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray67);
        double[][] doubleArray72 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray67);
        double[][] doubleArray73 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray67);
        double[][] doubleArray74 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray73);
        double[][] doubleArray75 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray73);
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[]");
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertNotNull(doubleArray75);
    }

    @Test
    public void test2078() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2078");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[] doubleArray8 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray15 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray22 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray29 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray30 = new double[][] { doubleArray8, doubleArray15, doubleArray22, doubleArray29 };
        double[][] doubleArray31 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        double[][] doubleArray32 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        double[][] doubleArray33 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        double[][] doubleArray34 = new double[][] {};
        double[][] doubleArray35 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray34);
        int[] intArray36 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray35, intArray36);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray33, intArray36);
        double[][] doubleArray39 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray33);
        double[][] doubleArray40 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray39);
        double[][] doubleArray41 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray40);
        double[][] doubleArray42 = new double[][] {};
        double[][] doubleArray43 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray42);
        double[][] doubleArray44 = new double[][] {};
        double[][] doubleArray45 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray44);
        double[][] doubleArray46 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray45);
        double[] doubleArray50 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray54 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray58 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray62 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray63 = new double[][] { doubleArray50, doubleArray54, doubleArray58, doubleArray62 };
        double[] doubleArray65 = new double[] { 1 };
        double[] doubleArray67 = new double[] { 1 };
        double[] doubleArray69 = new double[] { 1 };
        double[] doubleArray71 = new double[] { 1 };
        double[] doubleArray73 = new double[] { 1 };
        double[][] doubleArray74 = new double[][] { doubleArray65, doubleArray67, doubleArray69, doubleArray71, doubleArray73 };
        int[] intArray75 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray74, intArray75);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray63, intArray75);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray45, intArray75);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray43, intArray75);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray41, intArray75);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray0, intArray75);
        double[][] doubleArray82 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        java.lang.Class<?> wildcardClass83 = doubleArray0.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray71), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray73), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[]");
        org.junit.Assert.assertNotNull(doubleArray82);
        org.junit.Assert.assertNotNull(wildcardClass83);
    }

    @Test
    public void test2079() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2079");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray30 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray31 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[] doubleArray33 = new double[] { 1 };
        double[] doubleArray35 = new double[] { 1 };
        double[] doubleArray37 = new double[] { 1 };
        double[] doubleArray39 = new double[] { 1 };
        double[] doubleArray41 = new double[] { 1 };
        double[][] doubleArray42 = new double[][] { doubleArray33, doubleArray35, doubleArray37, doubleArray39, doubleArray41 };
        int[] intArray43 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray42, intArray43);
        double[] doubleArray51 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray58 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray65 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray72 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray73 = new double[][] { doubleArray51, doubleArray58, doubleArray65, doubleArray72 };
        double[][] doubleArray74 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray73);
        double[] doubleArray76 = new double[] { 1 };
        double[] doubleArray78 = new double[] { 1 };
        double[] doubleArray80 = new double[] { 1 };
        double[] doubleArray82 = new double[] { 1 };
        double[] doubleArray84 = new double[] { 1 };
        double[][] doubleArray85 = new double[][] { doubleArray76, doubleArray78, doubleArray80, doubleArray82, doubleArray84 };
        int[] intArray86 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray85, intArray86);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray74, intArray86);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray42, intArray86);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray31, intArray86);
        double[][] doubleArray91 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray31);
        double[][] doubleArray92 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray31);
        double[][] doubleArray93 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray31);
        double[][] doubleArray94 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray93);
        java.lang.Class<?> wildcardClass95 = doubleArray94.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray78), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray80), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray82), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray84), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray85);
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray86), "[]");
        org.junit.Assert.assertNotNull(doubleArray91);
        org.junit.Assert.assertNotNull(doubleArray92);
        org.junit.Assert.assertNotNull(doubleArray93);
        org.junit.Assert.assertNotNull(doubleArray94);
        org.junit.Assert.assertNotNull(wildcardClass95);
    }

    @Test
    public void test2080() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2080");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[] doubleArray6 = new double[] { 1 };
        double[] doubleArray8 = new double[] { 1 };
        double[] doubleArray10 = new double[] { 1 };
        double[] doubleArray12 = new double[] { 1 };
        double[] doubleArray14 = new double[] { 1 };
        double[][] doubleArray15 = new double[][] { doubleArray6, doubleArray8, doubleArray10, doubleArray12, doubleArray14 };
        int[] intArray16 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray15, intArray16);
        double[][] doubleArray18 = new double[][] {};
        double[][] doubleArray19 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray18);
        int[] intArray20 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray19, intArray20);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray15, intArray20);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray3, intArray20);
        double[][] doubleArray24 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[][] doubleArray25 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray24);
        java.lang.Class<?> wildcardClass26 = doubleArray25.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[]");
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertNotNull(wildcardClass26);
    }

    @Test
    public void test2081() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2081");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray30 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray29);
        double[][] doubleArray31 = new double[][] {};
        double[][] doubleArray32 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray31);
        double[] doubleArray34 = new double[] { 1 };
        double[] doubleArray36 = new double[] { 1 };
        double[] doubleArray38 = new double[] { 1 };
        double[] doubleArray40 = new double[] { 1 };
        double[] doubleArray42 = new double[] { 1 };
        double[][] doubleArray43 = new double[][] { doubleArray34, doubleArray36, doubleArray38, doubleArray40, doubleArray42 };
        int[] intArray44 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray43, intArray44);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray31, intArray44);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray30, intArray44);
        double[][] doubleArray48 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        double[][] doubleArray49 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        double[][] doubleArray50 = null;
        double[][] doubleArray51 = new double[][] {};
        double[][] doubleArray52 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray51);
        int[] intArray53 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray52, intArray53);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray50, intArray53);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray49, intArray53);
        double[][] doubleArray57 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray49);
        double[][] doubleArray58 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray57);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[]");
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertNotNull(doubleArray58);
    }

    @Test
    public void test2082() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2082");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray30 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray29);
        double[][] doubleArray31 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        double[][] doubleArray32 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray31);
        double[][] doubleArray33 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray32);
        double[][] doubleArray34 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray32);
        java.lang.Class<?> wildcardClass35 = doubleArray34.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertNotNull(wildcardClass35);
    }

    @Test
    public void test2083() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2083");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray5 = new double[][] {};
        double[][] doubleArray6 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray5);
        double[][] doubleArray7 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray6);
        double[][] doubleArray8 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray7);
        double[][] doubleArray9 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray8);
        double[][] doubleArray10 = new double[][] {};
        double[][] doubleArray11 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray10);
        double[] doubleArray18 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray25 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray32 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray39 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray40 = new double[][] { doubleArray18, doubleArray25, doubleArray32, doubleArray39 };
        double[][] doubleArray41 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray40);
        double[][] doubleArray42 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray40);
        double[][] doubleArray43 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray40);
        double[][] doubleArray44 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray43);
        double[] doubleArray51 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray58 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray65 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray72 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray73 = new double[][] { doubleArray51, doubleArray58, doubleArray65, doubleArray72 };
        double[][] doubleArray74 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray73);
        double[] doubleArray76 = new double[] { 1 };
        double[] doubleArray78 = new double[] { 1 };
        double[] doubleArray80 = new double[] { 1 };
        double[] doubleArray82 = new double[] { 1 };
        double[] doubleArray84 = new double[] { 1 };
        double[][] doubleArray85 = new double[][] { doubleArray76, doubleArray78, doubleArray80, doubleArray82, doubleArray84 };
        int[] intArray86 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray85, intArray86);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray74, intArray86);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray44, intArray86);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray11, intArray86);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray9, intArray86);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray4, intArray86);
        double[][] doubleArray93 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray4);
        java.lang.Class<?> wildcardClass94 = doubleArray4.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray78), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray80), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray82), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray84), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray85);
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray86), "[]");
        org.junit.Assert.assertNotNull(doubleArray93);
        org.junit.Assert.assertNotNull(wildcardClass94);
    }

    @Test
    public void test2084() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2084");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        int[] intArray2 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray1, intArray2);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray5 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray6 = new double[][] {};
        double[][] doubleArray7 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray6);
        double[][] doubleArray8 = new double[][] {};
        double[][] doubleArray9 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray8);
        double[] doubleArray11 = new double[] { 1 };
        double[] doubleArray13 = new double[] { 1 };
        double[] doubleArray15 = new double[] { 1 };
        double[] doubleArray17 = new double[] { 1 };
        double[] doubleArray19 = new double[] { 1 };
        double[][] doubleArray20 = new double[][] { doubleArray11, doubleArray13, doubleArray15, doubleArray17, doubleArray19 };
        int[] intArray21 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray20, intArray21);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray8, intArray21);
        double[] doubleArray27 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray31 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray35 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray39 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray40 = new double[][] { doubleArray27, doubleArray31, doubleArray35, doubleArray39 };
        double[] doubleArray42 = new double[] { 1 };
        double[] doubleArray44 = new double[] { 1 };
        double[] doubleArray46 = new double[] { 1 };
        double[] doubleArray48 = new double[] { 1 };
        double[] doubleArray50 = new double[] { 1 };
        double[][] doubleArray51 = new double[][] { doubleArray42, doubleArray44, doubleArray46, doubleArray48, doubleArray50 };
        int[] intArray52 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray51, intArray52);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray40, intArray52);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray8, intArray52);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray7, intArray52);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray1, intArray52);
        int[] intArray58 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray1, intArray58);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[]");
    }

    @Test
    public void test2085() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2085");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[] doubleArray8 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray12 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray16 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray20 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray21 = new double[][] { doubleArray8, doubleArray12, doubleArray16, doubleArray20 };
        double[] doubleArray23 = new double[] { 1 };
        double[] doubleArray25 = new double[] { 1 };
        double[] doubleArray27 = new double[] { 1 };
        double[] doubleArray29 = new double[] { 1 };
        double[] doubleArray31 = new double[] { 1 };
        double[][] doubleArray32 = new double[][] { doubleArray23, doubleArray25, doubleArray27, doubleArray29, doubleArray31 };
        int[] intArray33 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray32, intArray33);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray21, intArray33);
        double[][] doubleArray36 = new double[][] {};
        double[][] doubleArray37 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray36);
        double[][] doubleArray38 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray37);
        double[][] doubleArray39 = new double[][] {};
        double[][] doubleArray40 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray39);
        double[][] doubleArray41 = new double[][] {};
        double[][] doubleArray42 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray41);
        double[] doubleArray44 = new double[] { 1 };
        double[] doubleArray46 = new double[] { 1 };
        double[] doubleArray48 = new double[] { 1 };
        double[] doubleArray50 = new double[] { 1 };
        double[] doubleArray52 = new double[] { 1 };
        double[][] doubleArray53 = new double[][] { doubleArray44, doubleArray46, doubleArray48, doubleArray50, doubleArray52 };
        int[] intArray54 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray53, intArray54);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray41, intArray54);
        double[] doubleArray60 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray64 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray68 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray72 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray73 = new double[][] { doubleArray60, doubleArray64, doubleArray68, doubleArray72 };
        double[] doubleArray75 = new double[] { 1 };
        double[] doubleArray77 = new double[] { 1 };
        double[] doubleArray79 = new double[] { 1 };
        double[] doubleArray81 = new double[] { 1 };
        double[] doubleArray83 = new double[] { 1 };
        double[][] doubleArray84 = new double[][] { doubleArray75, doubleArray77, doubleArray79, doubleArray81, doubleArray83 };
        int[] intArray85 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray84, intArray85);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray73, intArray85);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray41, intArray85);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray40, intArray85);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray38, intArray85);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray21, intArray85);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray3, intArray85);
        double[][] doubleArray93 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[][] doubleArray94 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[][] doubleArray95 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray94);
        java.lang.Class<?> wildcardClass96 = doubleArray94.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[]");
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray75), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray77), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray79), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray81), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray83), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray84);
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray85), "[]");
        org.junit.Assert.assertNotNull(doubleArray93);
        org.junit.Assert.assertNotNull(doubleArray94);
        org.junit.Assert.assertNotNull(doubleArray95);
        org.junit.Assert.assertNotNull(wildcardClass96);
    }

    @Test
    public void test2086() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2086");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray30 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray29);
        double[][] doubleArray31 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        double[][] doubleArray32 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        double[][] doubleArray33 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        double[][] doubleArray34 = new double[][] {};
        double[][] doubleArray35 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray34);
        double[][] doubleArray36 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray35);
        double[] doubleArray43 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray50 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray57 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray64 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray65 = new double[][] { doubleArray43, doubleArray50, doubleArray57, doubleArray64 };
        double[][] doubleArray66 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray65);
        double[] doubleArray68 = new double[] { 1 };
        double[] doubleArray70 = new double[] { 1 };
        double[] doubleArray72 = new double[] { 1 };
        double[] doubleArray74 = new double[] { 1 };
        double[] doubleArray76 = new double[] { 1 };
        double[][] doubleArray77 = new double[][] { doubleArray68, doubleArray70, doubleArray72, doubleArray74, doubleArray76 };
        int[] intArray78 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray77, intArray78);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray66, intArray78);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray35, intArray78);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray33, intArray78);
        double[][] doubleArray83 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray33);
        double[][] doubleArray84 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray33);
        int[] intArray85 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray33, intArray85);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray70), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray74), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[]");
        org.junit.Assert.assertNotNull(doubleArray83);
        org.junit.Assert.assertNotNull(doubleArray84);
    }

    @Test
    public void test2087() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2087");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray30 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray29);
        double[][] doubleArray31 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray29);
        double[][] doubleArray32 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray31);
        double[][] doubleArray33 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray32);
        double[][] doubleArray34 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray33);
        double[][] doubleArray35 = new double[][] {};
        double[][] doubleArray36 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray35);
        double[][] doubleArray37 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray35);
        double[][] doubleArray38 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray35);
        double[][] doubleArray39 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray35);
        double[][] doubleArray40 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray39);
        double[][] doubleArray41 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray39);
        double[][] doubleArray42 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray41);
        double[] doubleArray49 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray56 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray63 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray70 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray71 = new double[][] { doubleArray49, doubleArray56, doubleArray63, doubleArray70 };
        double[][] doubleArray72 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray71);
        double[][] doubleArray73 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray72);
        double[][] doubleArray74 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray72);
        double[][] doubleArray75 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray72);
        double[][] doubleArray76 = new double[][] {};
        double[][] doubleArray77 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray76);
        double[][] doubleArray78 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray76);
        double[][] doubleArray79 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray78);
        double[][] doubleArray80 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray78);
        double[][] doubleArray81 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray80);
        double[][] doubleArray82 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray81);
        double[][] doubleArray83 = new double[][] {};
        double[][] doubleArray84 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray83);
        int[] intArray85 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray84, intArray85);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray82, intArray85);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray72, intArray85);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray41, intArray85);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray34, intArray85);
        java.lang.Class<?> wildcardClass91 = doubleArray34.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray70), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertNotNull(doubleArray81);
        org.junit.Assert.assertNotNull(doubleArray82);
        org.junit.Assert.assertNotNull(doubleArray83);
        org.junit.Assert.assertNotNull(doubleArray84);
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray85), "[]");
        org.junit.Assert.assertNotNull(wildcardClass91);
    }

    @Test
    public void test2088() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2088");
        double[][] doubleArray0 = null;
        double[] doubleArray7 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray14 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray21 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray28 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray29 = new double[][] { doubleArray7, doubleArray14, doubleArray21, doubleArray28 };
        double[][] doubleArray30 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray29);
        double[] doubleArray32 = new double[] { 1 };
        double[] doubleArray34 = new double[] { 1 };
        double[] doubleArray36 = new double[] { 1 };
        double[] doubleArray38 = new double[] { 1 };
        double[] doubleArray40 = new double[] { 1 };
        double[][] doubleArray41 = new double[][] { doubleArray32, doubleArray34, doubleArray36, doubleArray38, doubleArray40 };
        int[] intArray42 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray41, intArray42);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray30, intArray42);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray0, intArray42);
        java.lang.Class<?> wildcardClass46 = intArray42.getClass();
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[]");
        org.junit.Assert.assertNotNull(wildcardClass46);
    }

    @Test
    public void test2089() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2089");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray30 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray29);
        double[][] doubleArray31 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        double[][] doubleArray32 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        double[][] doubleArray33 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        double[][] doubleArray34 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        double[][] doubleArray35 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray34);
        double[][] doubleArray36 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray35);
        double[][] doubleArray37 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray35);
        double[][] doubleArray38 = new double[][] {};
        double[][] doubleArray39 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray38);
        double[][] doubleArray40 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray39);
        double[] doubleArray44 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray48 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray52 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray56 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray57 = new double[][] { doubleArray44, doubleArray48, doubleArray52, doubleArray56 };
        double[] doubleArray59 = new double[] { 1 };
        double[] doubleArray61 = new double[] { 1 };
        double[] doubleArray63 = new double[] { 1 };
        double[] doubleArray65 = new double[] { 1 };
        double[] doubleArray67 = new double[] { 1 };
        double[][] doubleArray68 = new double[][] { doubleArray59, doubleArray61, doubleArray63, doubleArray65, doubleArray67 };
        int[] intArray69 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray68, intArray69);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray57, intArray69);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray39, intArray69);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray37, intArray69);
        double[][] doubleArray74 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray37);
        java.lang.Class<?> wildcardClass75 = doubleArray37.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[]");
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertNotNull(wildcardClass75);
    }

    @Test
    public void test2090() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2090");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray30 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray29);
        double[][] doubleArray31 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        double[][] doubleArray32 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray31);
        double[][] doubleArray33 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray31);
        double[] doubleArray35 = new double[] { 1 };
        double[] doubleArray37 = new double[] { 1 };
        double[] doubleArray39 = new double[] { 1 };
        double[] doubleArray41 = new double[] { 1 };
        double[] doubleArray43 = new double[] { 1 };
        double[][] doubleArray44 = new double[][] { doubleArray35, doubleArray37, doubleArray39, doubleArray41, doubleArray43 };
        int[] intArray45 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray44, intArray45);
        double[][] doubleArray47 = new double[][] {};
        double[][] doubleArray48 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray47);
        int[] intArray49 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray48, intArray49);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray44, intArray49);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray33, intArray49);
        double[][] doubleArray53 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray33);
        double[] doubleArray60 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray67 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray74 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray81 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray82 = new double[][] { doubleArray60, doubleArray67, doubleArray74, doubleArray81 };
        double[][] doubleArray83 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray82);
        double[][] doubleArray84 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray82);
        double[][] doubleArray85 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray82);
        double[][] doubleArray86 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray85);
        double[][] doubleArray87 = new double[][] {};
        double[][] doubleArray88 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray87);
        int[] intArray89 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray88, intArray89);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray86, intArray89);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray33, intArray89);
        double[][] doubleArray93 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray33);
        java.lang.Class<?> wildcardClass94 = doubleArray33.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[]");
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[]");
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray74), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray81), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray82);
        org.junit.Assert.assertNotNull(doubleArray83);
        org.junit.Assert.assertNotNull(doubleArray84);
        org.junit.Assert.assertNotNull(doubleArray85);
        org.junit.Assert.assertNotNull(doubleArray86);
        org.junit.Assert.assertNotNull(doubleArray87);
        org.junit.Assert.assertNotNull(doubleArray88);
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray89), "[]");
        org.junit.Assert.assertNotNull(doubleArray93);
        org.junit.Assert.assertNotNull(wildcardClass94);
    }

    @Test
    public void test2091() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2091");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[][] doubleArray5 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray4);
        double[][] doubleArray6 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray5);
        double[][] doubleArray7 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray6);
        double[][] doubleArray8 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray6);
        double[][] doubleArray9 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray6);
        java.lang.Class<?> wildcardClass10 = doubleArray6.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertNotNull(wildcardClass10);
    }

    @Test
    public void test2092() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2092");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = new double[][] {};
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[] doubleArray8 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray12 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray16 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray20 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray21 = new double[][] { doubleArray8, doubleArray12, doubleArray16, doubleArray20 };
        double[] doubleArray23 = new double[] { 1 };
        double[] doubleArray25 = new double[] { 1 };
        double[] doubleArray27 = new double[] { 1 };
        double[] doubleArray29 = new double[] { 1 };
        double[] doubleArray31 = new double[] { 1 };
        double[][] doubleArray32 = new double[][] { doubleArray23, doubleArray25, doubleArray27, doubleArray29, doubleArray31 };
        int[] intArray33 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray32, intArray33);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray21, intArray33);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray3, intArray33);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray1, intArray33);
        double[][] doubleArray38 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray39 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray38);
        double[] doubleArray41 = new double[] { 1 };
        double[] doubleArray43 = new double[] { 1 };
        double[] doubleArray45 = new double[] { 1 };
        double[] doubleArray47 = new double[] { 1 };
        double[] doubleArray49 = new double[] { 1 };
        double[][] doubleArray50 = new double[][] { doubleArray41, doubleArray43, doubleArray45, doubleArray47, doubleArray49 };
        int[] intArray51 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray50, intArray51);
        double[][] doubleArray53 = new double[][] {};
        double[][] doubleArray54 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray53);
        int[] intArray55 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray54, intArray55);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray50, intArray55);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray38, intArray55);
        double[][] doubleArray59 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray38);
        double[][] doubleArray60 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray38);
        double[][] doubleArray61 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray60);
        double[][] doubleArray62 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray61);
        java.lang.Class<?> wildcardClass63 = doubleArray62.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[]");
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[]");
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertNotNull(wildcardClass63);
    }

    @Test
    public void test2093() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2093");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray4 = new double[][] {};
        double[][] doubleArray5 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray4);
        double[][] doubleArray6 = new double[][] {};
        double[][] doubleArray7 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray6);
        double[] doubleArray9 = new double[] { 1 };
        double[] doubleArray11 = new double[] { 1 };
        double[] doubleArray13 = new double[] { 1 };
        double[] doubleArray15 = new double[] { 1 };
        double[] doubleArray17 = new double[] { 1 };
        double[][] doubleArray18 = new double[][] { doubleArray9, doubleArray11, doubleArray13, doubleArray15, doubleArray17 };
        int[] intArray19 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray18, intArray19);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray6, intArray19);
        double[] doubleArray25 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray29 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray33 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray37 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray38 = new double[][] { doubleArray25, doubleArray29, doubleArray33, doubleArray37 };
        double[] doubleArray40 = new double[] { 1 };
        double[] doubleArray42 = new double[] { 1 };
        double[] doubleArray44 = new double[] { 1 };
        double[] doubleArray46 = new double[] { 1 };
        double[] doubleArray48 = new double[] { 1 };
        double[][] doubleArray49 = new double[][] { doubleArray40, doubleArray42, doubleArray44, doubleArray46, doubleArray48 };
        int[] intArray50 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray49, intArray50);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray38, intArray50);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray6, intArray50);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray4, intArray50);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray1, intArray50);
        double[][] doubleArray56 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray57 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray58 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray57);
        double[][] doubleArray59 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray57);
        double[][] doubleArray60 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray59);
        double[][] doubleArray61 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray60);
        double[][] doubleArray62 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray60);
        java.lang.Class<?> wildcardClass63 = doubleArray60.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[]");
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertNotNull(wildcardClass63);
    }

    @Test
    public void test2094() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2094");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = new double[][] {};
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[] doubleArray5 = new double[] { 1 };
        double[] doubleArray7 = new double[] { 1 };
        double[] doubleArray9 = new double[] { 1 };
        double[] doubleArray11 = new double[] { 1 };
        double[] doubleArray13 = new double[] { 1 };
        double[][] doubleArray14 = new double[][] { doubleArray5, doubleArray7, doubleArray9, doubleArray11, doubleArray13 };
        int[] intArray15 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray14, intArray15);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray2, intArray15);
        double[] doubleArray21 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray25 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray29 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray33 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray34 = new double[][] { doubleArray21, doubleArray25, doubleArray29, doubleArray33 };
        double[] doubleArray36 = new double[] { 1 };
        double[] doubleArray38 = new double[] { 1 };
        double[] doubleArray40 = new double[] { 1 };
        double[] doubleArray42 = new double[] { 1 };
        double[] doubleArray44 = new double[] { 1 };
        double[][] doubleArray45 = new double[][] { doubleArray36, doubleArray38, doubleArray40, doubleArray42, doubleArray44 };
        int[] intArray46 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray45, intArray46);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray34, intArray46);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray2, intArray46);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray1, intArray46);
        double[] doubleArray52 = new double[] { 1 };
        double[] doubleArray54 = new double[] { 1 };
        double[] doubleArray56 = new double[] { 1 };
        double[] doubleArray58 = new double[] { 1 };
        double[] doubleArray60 = new double[] { 1 };
        double[][] doubleArray61 = new double[][] { doubleArray52, doubleArray54, doubleArray56, doubleArray58, doubleArray60 };
        int[] intArray62 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray61, intArray62);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray1, intArray62);
        double[][] doubleArray65 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray66 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray67 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray66);
        double[][] doubleArray68 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray66);
        java.lang.Class<?> wildcardClass69 = doubleArray68.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[]");
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[]");
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertNotNull(wildcardClass69);
    }

    @Test
    public void test2095() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2095");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[] doubleArray3 = new double[] { 1 };
        double[] doubleArray5 = new double[] { 1 };
        double[] doubleArray7 = new double[] { 1 };
        double[] doubleArray9 = new double[] { 1 };
        double[] doubleArray11 = new double[] { 1 };
        double[][] doubleArray12 = new double[][] { doubleArray3, doubleArray5, doubleArray7, doubleArray9, doubleArray11 };
        int[] intArray13 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray12, intArray13);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray0, intArray13);
        double[][] doubleArray16 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray17 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray16);
        double[][] doubleArray18 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray17);
        double[][] doubleArray19 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray17);
        double[][] doubleArray20 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray19);
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray34 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray41 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray48 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray49 = new double[][] { doubleArray27, doubleArray34, doubleArray41, doubleArray48 };
        double[][] doubleArray50 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray49);
        double[][] doubleArray51 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray50);
        double[][] doubleArray52 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray51);
        double[][] doubleArray53 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray52);
        double[] doubleArray57 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray61 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray65 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray69 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray70 = new double[][] { doubleArray57, doubleArray61, doubleArray65, doubleArray69 };
        double[] doubleArray72 = new double[] { 1 };
        double[] doubleArray74 = new double[] { 1 };
        double[] doubleArray76 = new double[] { 1 };
        double[] doubleArray78 = new double[] { 1 };
        double[] doubleArray80 = new double[] { 1 };
        double[][] doubleArray81 = new double[][] { doubleArray72, doubleArray74, doubleArray76, doubleArray78, doubleArray80 };
        int[] intArray82 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray81, intArray82);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray70, intArray82);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray53, intArray82);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray20, intArray82);
        java.lang.Class<?> wildcardClass87 = doubleArray20.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray74), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray78), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray80), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray81);
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[]");
        org.junit.Assert.assertNotNull(wildcardClass87);
    }

    @Test
    public void test2096() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2096");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray30 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray31 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray32 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray31);
        double[] doubleArray39 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray46 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray53 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray60 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray61 = new double[][] { doubleArray39, doubleArray46, doubleArray53, doubleArray60 };
        double[][] doubleArray62 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray61);
        double[] doubleArray64 = new double[] { 1 };
        double[] doubleArray66 = new double[] { 1 };
        double[] doubleArray68 = new double[] { 1 };
        double[] doubleArray70 = new double[] { 1 };
        double[] doubleArray72 = new double[] { 1 };
        double[][] doubleArray73 = new double[][] { doubleArray64, doubleArray66, doubleArray68, doubleArray70, doubleArray72 };
        int[] intArray74 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray73, intArray74);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray62, intArray74);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray32, intArray74);
        double[][] doubleArray78 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray32);
        double[][] doubleArray79 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray78);
        double[][] doubleArray80 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray78);
        java.lang.Class<?> wildcardClass81 = doubleArray80.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray66), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray70), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[]");
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertNotNull(wildcardClass81);
    }

    @Test
    public void test2097() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2097");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray30 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray31 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[] doubleArray33 = new double[] { 1 };
        double[] doubleArray35 = new double[] { 1 };
        double[] doubleArray37 = new double[] { 1 };
        double[] doubleArray39 = new double[] { 1 };
        double[] doubleArray41 = new double[] { 1 };
        double[][] doubleArray42 = new double[][] { doubleArray33, doubleArray35, doubleArray37, doubleArray39, doubleArray41 };
        int[] intArray43 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray42, intArray43);
        double[] doubleArray51 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray58 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray65 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray72 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray73 = new double[][] { doubleArray51, doubleArray58, doubleArray65, doubleArray72 };
        double[][] doubleArray74 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray73);
        double[] doubleArray76 = new double[] { 1 };
        double[] doubleArray78 = new double[] { 1 };
        double[] doubleArray80 = new double[] { 1 };
        double[] doubleArray82 = new double[] { 1 };
        double[] doubleArray84 = new double[] { 1 };
        double[][] doubleArray85 = new double[][] { doubleArray76, doubleArray78, doubleArray80, doubleArray82, doubleArray84 };
        int[] intArray86 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray85, intArray86);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray74, intArray86);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray42, intArray86);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray31, intArray86);
        double[][] doubleArray91 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray31);
        double[][] doubleArray92 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray31);
        double[][] doubleArray93 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray92);
        double[][] doubleArray94 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray93);
        java.lang.Class<?> wildcardClass95 = doubleArray94.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray78), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray80), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray82), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray84), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray85);
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray86), "[]");
        org.junit.Assert.assertNotNull(doubleArray91);
        org.junit.Assert.assertNotNull(doubleArray92);
        org.junit.Assert.assertNotNull(doubleArray93);
        org.junit.Assert.assertNotNull(doubleArray94);
        org.junit.Assert.assertNotNull(wildcardClass95);
    }

    @Test
    public void test2098() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2098");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[][] doubleArray5 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[] doubleArray7 = new double[] { 1 };
        double[] doubleArray9 = new double[] { 1 };
        double[] doubleArray11 = new double[] { 1 };
        double[] doubleArray13 = new double[] { 1 };
        double[] doubleArray15 = new double[] { 1 };
        double[][] doubleArray16 = new double[][] { doubleArray7, doubleArray9, doubleArray11, doubleArray13, doubleArray15 };
        int[] intArray17 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray16, intArray17);
        double[] doubleArray25 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray32 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray39 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray46 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray47 = new double[][] { doubleArray25, doubleArray32, doubleArray39, doubleArray46 };
        double[][] doubleArray48 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray47);
        double[] doubleArray50 = new double[] { 1 };
        double[] doubleArray52 = new double[] { 1 };
        double[] doubleArray54 = new double[] { 1 };
        double[] doubleArray56 = new double[] { 1 };
        double[] doubleArray58 = new double[] { 1 };
        double[][] doubleArray59 = new double[][] { doubleArray50, doubleArray52, doubleArray54, doubleArray56, doubleArray58 };
        int[] intArray60 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray59, intArray60);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray48, intArray60);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray16, intArray60);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray3, intArray60);
        double[][] doubleArray65 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[][] doubleArray66 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray65);
        double[][] doubleArray67 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray65);
        double[][] doubleArray68 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray65);
        java.lang.Class<?> wildcardClass69 = doubleArray65.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[]");
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertNotNull(wildcardClass69);
    }

    @Test
    public void test2099() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2099");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[] doubleArray31 = new double[] { 1 };
        double[] doubleArray33 = new double[] { 1 };
        double[] doubleArray35 = new double[] { 1 };
        double[] doubleArray37 = new double[] { 1 };
        double[] doubleArray39 = new double[] { 1 };
        double[][] doubleArray40 = new double[][] { doubleArray31, doubleArray33, doubleArray35, doubleArray37, doubleArray39 };
        int[] intArray41 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray40, intArray41);
        double[][] doubleArray43 = new double[][] {};
        double[][] doubleArray44 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray43);
        int[] intArray45 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray44, intArray45);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray40, intArray45);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray28, intArray45);
        double[][] doubleArray49 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray50 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray51 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray50);
        double[][] doubleArray52 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray51);
        double[][] doubleArray53 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray51);
        double[][] doubleArray54 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray51);
        java.lang.Class<?> wildcardClass55 = doubleArray54.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertNotNull(wildcardClass55);
    }

    @Test
    public void test2100() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2100");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[] doubleArray3 = new double[] { 1 };
        double[] doubleArray5 = new double[] { 1 };
        double[] doubleArray7 = new double[] { 1 };
        double[] doubleArray9 = new double[] { 1 };
        double[] doubleArray11 = new double[] { 1 };
        double[][] doubleArray12 = new double[][] { doubleArray3, doubleArray5, doubleArray7, doubleArray9, doubleArray11 };
        int[] intArray13 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray12, intArray13);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray0, intArray13);
        double[] doubleArray19 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray23 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray27 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray31 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray32 = new double[][] { doubleArray19, doubleArray23, doubleArray27, doubleArray31 };
        double[] doubleArray34 = new double[] { 1 };
        double[] doubleArray36 = new double[] { 1 };
        double[] doubleArray38 = new double[] { 1 };
        double[] doubleArray40 = new double[] { 1 };
        double[] doubleArray42 = new double[] { 1 };
        double[][] doubleArray43 = new double[][] { doubleArray34, doubleArray36, doubleArray38, doubleArray40, doubleArray42 };
        int[] intArray44 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray43, intArray44);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray32, intArray44);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray0, intArray44);
        double[] doubleArray49 = new double[] { 1 };
        double[] doubleArray51 = new double[] { 1 };
        double[] doubleArray53 = new double[] { 1 };
        double[] doubleArray55 = new double[] { 1 };
        double[] doubleArray57 = new double[] { 1 };
        double[][] doubleArray58 = new double[][] { doubleArray49, doubleArray51, doubleArray53, doubleArray55, doubleArray57 };
        int[] intArray59 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray58, intArray59);
        double[][] doubleArray61 = new double[][] {};
        double[][] doubleArray62 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray61);
        int[] intArray63 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray62, intArray63);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray58, intArray63);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray0, intArray63);
        double[][] doubleArray67 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray68 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray67);
        double[][] doubleArray69 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray67);
        double[][] doubleArray70 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray67);
        double[][] doubleArray71 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray70);
        double[][] doubleArray72 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray71);
        double[][] doubleArray73 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray72);
        double[][] doubleArray74 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray73);
        java.lang.Class<?> wildcardClass75 = doubleArray73.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[]");
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertNotNull(wildcardClass75);
    }

    @Test
    public void test2101() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2101");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray30 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray31 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray32 = new double[][] {};
        double[][] doubleArray33 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray32);
        double[][] doubleArray34 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray33);
        double[][] doubleArray35 = new double[][] {};
        double[][] doubleArray36 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray35);
        double[][] doubleArray37 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray35);
        double[][] doubleArray38 = new double[][] {};
        double[][] doubleArray39 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray38);
        double[][] doubleArray40 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray39);
        double[][] doubleArray41 = new double[][] {};
        double[][] doubleArray42 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray41);
        double[][] doubleArray43 = new double[][] {};
        double[][] doubleArray44 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray43);
        double[] doubleArray46 = new double[] { 1 };
        double[] doubleArray48 = new double[] { 1 };
        double[] doubleArray50 = new double[] { 1 };
        double[] doubleArray52 = new double[] { 1 };
        double[] doubleArray54 = new double[] { 1 };
        double[][] doubleArray55 = new double[][] { doubleArray46, doubleArray48, doubleArray50, doubleArray52, doubleArray54 };
        int[] intArray56 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray55, intArray56);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray43, intArray56);
        double[] doubleArray62 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray66 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray70 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray74 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray75 = new double[][] { doubleArray62, doubleArray66, doubleArray70, doubleArray74 };
        double[] doubleArray77 = new double[] { 1 };
        double[] doubleArray79 = new double[] { 1 };
        double[] doubleArray81 = new double[] { 1 };
        double[] doubleArray83 = new double[] { 1 };
        double[] doubleArray85 = new double[] { 1 };
        double[][] doubleArray86 = new double[][] { doubleArray77, doubleArray79, doubleArray81, doubleArray83, doubleArray85 };
        int[] intArray87 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray86, intArray87);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray75, intArray87);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray43, intArray87);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray42, intArray87);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray40, intArray87);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray35, intArray87);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray34, intArray87);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray31, intArray87);
        double[][] doubleArray96 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray31);
        double[][] doubleArray97 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray96);
        double[][] doubleArray98 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray96);
        double[][] doubleArray99 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray96);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[]");
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray66), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray70), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray74), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray77), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray79), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray81), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray83), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray85), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray86);
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray87), "[]");
        org.junit.Assert.assertNotNull(doubleArray96);
        org.junit.Assert.assertNotNull(doubleArray97);
        org.junit.Assert.assertNotNull(doubleArray98);
        org.junit.Assert.assertNotNull(doubleArray99);
    }

    @Test
    public void test2102() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2102");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[] doubleArray31 = new double[] { 1 };
        double[] doubleArray33 = new double[] { 1 };
        double[] doubleArray35 = new double[] { 1 };
        double[] doubleArray37 = new double[] { 1 };
        double[] doubleArray39 = new double[] { 1 };
        double[][] doubleArray40 = new double[][] { doubleArray31, doubleArray33, doubleArray35, doubleArray37, doubleArray39 };
        int[] intArray41 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray40, intArray41);
        double[][] doubleArray43 = new double[][] {};
        double[][] doubleArray44 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray43);
        int[] intArray45 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray44, intArray45);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray40, intArray45);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray28, intArray45);
        double[][] doubleArray49 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray50 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray49);
        double[][] doubleArray51 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray50);
        double[][] doubleArray52 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray50);
        double[][] doubleArray53 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray50);
        double[][] doubleArray54 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray53);
        double[][] doubleArray55 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray54);
        double[][] doubleArray56 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray55);
        double[][] doubleArray57 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray56);
        double[][] doubleArray58 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray56);
        java.lang.Class<?> wildcardClass59 = doubleArray56.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertNotNull(wildcardClass59);
    }

    @Test
    public void test2103() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2103");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[][] doubleArray5 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray4);
        double[][] doubleArray6 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray5);
        double[][] doubleArray7 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray6);
        double[][] doubleArray8 = new double[][] {};
        double[][] doubleArray9 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray8);
        double[][] doubleArray10 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray8);
        double[][] doubleArray11 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray10);
        double[][] doubleArray12 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray11);
        double[][] doubleArray13 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray11);
        double[][] doubleArray14 = new double[][] {};
        double[][] doubleArray15 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray14);
        double[][] doubleArray16 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray15);
        double[] doubleArray23 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray30 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray37 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray44 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray45 = new double[][] { doubleArray23, doubleArray30, doubleArray37, doubleArray44 };
        double[][] doubleArray46 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray45);
        double[] doubleArray48 = new double[] { 1 };
        double[] doubleArray50 = new double[] { 1 };
        double[] doubleArray52 = new double[] { 1 };
        double[] doubleArray54 = new double[] { 1 };
        double[] doubleArray56 = new double[] { 1 };
        double[][] doubleArray57 = new double[][] { doubleArray48, doubleArray50, doubleArray52, doubleArray54, doubleArray56 };
        int[] intArray58 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray57, intArray58);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray46, intArray58);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray15, intArray58);
        double[] doubleArray65 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray69 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray73 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray77 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray78 = new double[][] { doubleArray65, doubleArray69, doubleArray73, doubleArray77 };
        double[] doubleArray80 = new double[] { 1 };
        double[] doubleArray82 = new double[] { 1 };
        double[] doubleArray84 = new double[] { 1 };
        double[] doubleArray86 = new double[] { 1 };
        double[] doubleArray88 = new double[] { 1 };
        double[][] doubleArray89 = new double[][] { doubleArray80, doubleArray82, doubleArray84, doubleArray86, doubleArray88 };
        int[] intArray90 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray89, intArray90);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray78, intArray90);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray15, intArray90);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray11, intArray90);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray7, intArray90);
        double[][] doubleArray96 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray7);
        java.lang.Class<?> wildcardClass97 = doubleArray96.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[]");
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray73), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray77), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray80), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray82), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray84), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray86), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray88), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray89);
        org.junit.Assert.assertNotNull(intArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray90), "[]");
        org.junit.Assert.assertNotNull(doubleArray96);
        org.junit.Assert.assertNotNull(wildcardClass97);
    }

    @Test
    public void test2104() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2104");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[][] doubleArray5 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[][] doubleArray6 = new double[][] {};
        double[][] doubleArray7 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray6);
        double[][] doubleArray8 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray7);
        double[] doubleArray15 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray22 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray29 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray36 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray37 = new double[][] { doubleArray15, doubleArray22, doubleArray29, doubleArray36 };
        double[][] doubleArray38 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray37);
        double[] doubleArray40 = new double[] { 1 };
        double[] doubleArray42 = new double[] { 1 };
        double[] doubleArray44 = new double[] { 1 };
        double[] doubleArray46 = new double[] { 1 };
        double[] doubleArray48 = new double[] { 1 };
        double[][] doubleArray49 = new double[][] { doubleArray40, doubleArray42, doubleArray44, doubleArray46, doubleArray48 };
        int[] intArray50 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray49, intArray50);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray38, intArray50);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray7, intArray50);
        double[] doubleArray57 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray61 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray65 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray69 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray70 = new double[][] { doubleArray57, doubleArray61, doubleArray65, doubleArray69 };
        double[] doubleArray72 = new double[] { 1 };
        double[] doubleArray74 = new double[] { 1 };
        double[] doubleArray76 = new double[] { 1 };
        double[] doubleArray78 = new double[] { 1 };
        double[] doubleArray80 = new double[] { 1 };
        double[][] doubleArray81 = new double[][] { doubleArray72, doubleArray74, doubleArray76, doubleArray78, doubleArray80 };
        int[] intArray82 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray81, intArray82);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray70, intArray82);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray7, intArray82);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray3, intArray82);
        double[][] doubleArray87 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[][] doubleArray88 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray87);
        java.lang.Class<?> wildcardClass89 = doubleArray87.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[]");
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray74), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray78), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray80), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray81);
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[]");
        org.junit.Assert.assertNotNull(doubleArray87);
        org.junit.Assert.assertNotNull(doubleArray88);
        org.junit.Assert.assertNotNull(wildcardClass89);
    }

    @Test
    public void test2105() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2105");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[] doubleArray31 = new double[] { 1 };
        double[] doubleArray33 = new double[] { 1 };
        double[] doubleArray35 = new double[] { 1 };
        double[] doubleArray37 = new double[] { 1 };
        double[] doubleArray39 = new double[] { 1 };
        double[][] doubleArray40 = new double[][] { doubleArray31, doubleArray33, doubleArray35, doubleArray37, doubleArray39 };
        int[] intArray41 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray40, intArray41);
        double[][] doubleArray43 = new double[][] {};
        double[][] doubleArray44 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray43);
        int[] intArray45 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray44, intArray45);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray40, intArray45);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray28, intArray45);
        double[][] doubleArray49 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray50 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray51 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray52 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray51);
        double[][] doubleArray53 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray51);
        double[][] doubleArray54 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray51);
        double[][] doubleArray55 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray54);
        double[][] doubleArray56 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray54);
        java.lang.Class<?> wildcardClass57 = doubleArray54.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertNotNull(wildcardClass57);
    }

    @Test
    public void test2106() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2106");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        int[] intArray2 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray1, intArray2);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray5 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray6 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray5);
        double[][] doubleArray7 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray5);
        double[][] doubleArray8 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray5);
        double[][] doubleArray9 = new double[][] {};
        double[][] doubleArray10 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray9);
        double[][] doubleArray11 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray10);
        double[][] doubleArray12 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray11);
        double[][] doubleArray13 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray11);
        double[][] doubleArray14 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray11);
        double[][] doubleArray15 = new double[][] {};
        double[][] doubleArray16 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray15);
        double[][] doubleArray17 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray15);
        double[] doubleArray24 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray31 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray38 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray45 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray46 = new double[][] { doubleArray24, doubleArray31, doubleArray38, doubleArray45 };
        double[][] doubleArray47 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray46);
        double[][] doubleArray48 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray46);
        double[][] doubleArray49 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray46);
        double[][] doubleArray50 = new double[][] {};
        double[][] doubleArray51 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray50);
        int[] intArray52 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray51, intArray52);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray49, intArray52);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray17, intArray52);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray11, intArray52);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray8, intArray52);
        double[][] doubleArray58 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray8);
        double[][] doubleArray59 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray58);
        double[][] doubleArray60 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray58);
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[]");
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertNotNull(doubleArray60);
    }

    @Test
    public void test2107() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2107");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[] doubleArray31 = new double[] { 1 };
        double[] doubleArray33 = new double[] { 1 };
        double[] doubleArray35 = new double[] { 1 };
        double[] doubleArray37 = new double[] { 1 };
        double[] doubleArray39 = new double[] { 1 };
        double[][] doubleArray40 = new double[][] { doubleArray31, doubleArray33, doubleArray35, doubleArray37, doubleArray39 };
        int[] intArray41 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray40, intArray41);
        double[][] doubleArray43 = new double[][] {};
        double[][] doubleArray44 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray43);
        int[] intArray45 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray44, intArray45);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray40, intArray45);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray28, intArray45);
        double[][] doubleArray49 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray50 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray49);
        double[][] doubleArray51 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray50);
        double[][] doubleArray52 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray50);
        double[][] doubleArray53 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray50);
        double[][] doubleArray54 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray53);
        double[][] doubleArray55 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray53);
        double[][] doubleArray56 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray53);
        double[][] doubleArray57 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray56);
        double[][] doubleArray58 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray56);
        double[][] doubleArray59 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray58);
        double[][] doubleArray60 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray59);
        java.lang.Class<?> wildcardClass61 = doubleArray59.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertNotNull(wildcardClass61);
    }

    @Test
    public void test2108() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2108");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray30 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray29);
        double[][] doubleArray31 = new double[][] {};
        double[][] doubleArray32 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray31);
        double[] doubleArray34 = new double[] { 1 };
        double[] doubleArray36 = new double[] { 1 };
        double[] doubleArray38 = new double[] { 1 };
        double[] doubleArray40 = new double[] { 1 };
        double[] doubleArray42 = new double[] { 1 };
        double[][] doubleArray43 = new double[][] { doubleArray34, doubleArray36, doubleArray38, doubleArray40, doubleArray42 };
        int[] intArray44 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray43, intArray44);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray31, intArray44);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray30, intArray44);
        double[][] doubleArray48 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        double[][] doubleArray49 = new double[][] {};
        double[][] doubleArray50 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray49);
        int[] intArray51 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray50, intArray51);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray48, intArray51);
        double[][] doubleArray54 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray48);
        double[][] doubleArray55 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray54);
        double[][] doubleArray56 = new double[][] {};
        double[][] doubleArray57 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray56);
        double[][] doubleArray58 = new double[][] {};
        double[][] doubleArray59 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray58);
        double[][] doubleArray60 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray59);
        double[] doubleArray64 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray68 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray72 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray76 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray77 = new double[][] { doubleArray64, doubleArray68, doubleArray72, doubleArray76 };
        double[] doubleArray79 = new double[] { 1 };
        double[] doubleArray81 = new double[] { 1 };
        double[] doubleArray83 = new double[] { 1 };
        double[] doubleArray85 = new double[] { 1 };
        double[] doubleArray87 = new double[] { 1 };
        double[][] doubleArray88 = new double[][] { doubleArray79, doubleArray81, doubleArray83, doubleArray85, doubleArray87 };
        int[] intArray89 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray88, intArray89);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray77, intArray89);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray59, intArray89);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray57, intArray89);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray54, intArray89);
        double[][] doubleArray95 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray54);
        java.lang.Class<?> wildcardClass96 = doubleArray95.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[]");
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray79), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray81), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray83), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray85), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray87), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray88);
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray89), "[]");
        org.junit.Assert.assertNotNull(doubleArray95);
        org.junit.Assert.assertNotNull(wildcardClass96);
    }

    @Test
    public void test2109() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2109");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[] doubleArray3 = new double[] { 1 };
        double[] doubleArray5 = new double[] { 1 };
        double[] doubleArray7 = new double[] { 1 };
        double[] doubleArray9 = new double[] { 1 };
        double[] doubleArray11 = new double[] { 1 };
        double[][] doubleArray12 = new double[][] { doubleArray3, doubleArray5, doubleArray7, doubleArray9, doubleArray11 };
        int[] intArray13 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray12, intArray13);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray0, intArray13);
        double[][] doubleArray16 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray17 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray16);
        double[][] doubleArray18 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray17);
        double[][] doubleArray19 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray18);
        double[][] doubleArray20 = new double[][] {};
        double[][] doubleArray21 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray20);
        double[][] doubleArray22 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray20);
        double[][] doubleArray23 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray20);
        double[][] doubleArray24 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray20);
        double[][] doubleArray25 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray24);
        double[][] doubleArray26 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray24);
        double[][] doubleArray27 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray26);
        double[][] doubleArray28 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray26);
        double[][] doubleArray29 = null;
        double[][] doubleArray30 = null;
        double[][] doubleArray31 = new double[][] {};
        double[][] doubleArray32 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray31);
        double[][] doubleArray33 = new double[][] {};
        double[][] doubleArray34 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray33);
        double[][] doubleArray35 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray34);
        double[] doubleArray39 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray43 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray47 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray51 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray52 = new double[][] { doubleArray39, doubleArray43, doubleArray47, doubleArray51 };
        double[] doubleArray54 = new double[] { 1 };
        double[] doubleArray56 = new double[] { 1 };
        double[] doubleArray58 = new double[] { 1 };
        double[] doubleArray60 = new double[] { 1 };
        double[] doubleArray62 = new double[] { 1 };
        double[][] doubleArray63 = new double[][] { doubleArray54, doubleArray56, doubleArray58, doubleArray60, doubleArray62 };
        int[] intArray64 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray63, intArray64);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray52, intArray64);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray34, intArray64);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray32, intArray64);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray30, intArray64);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray29, intArray64);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray28, intArray64);
        double[][] doubleArray72 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray73 = null;
        double[][] doubleArray74 = null;
        double[] doubleArray76 = new double[] { 1 };
        double[] doubleArray78 = new double[] { 1 };
        double[] doubleArray80 = new double[] { 1 };
        double[] doubleArray82 = new double[] { 1 };
        double[] doubleArray84 = new double[] { 1 };
        double[][] doubleArray85 = new double[][] { doubleArray76, doubleArray78, doubleArray80, doubleArray82, doubleArray84 };
        int[] intArray86 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray85, intArray86);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray74, intArray86);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray73, intArray86);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray72, intArray86);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray18, intArray86);
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[]");
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray78), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray80), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray82), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray84), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray85);
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray86), "[]");
    }

    @Test
    public void test2110() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2110");
        double[][] doubleArray0 = null;
        double[] doubleArray7 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray14 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray21 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray28 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray29 = new double[][] { doubleArray7, doubleArray14, doubleArray21, doubleArray28 };
        double[][] doubleArray30 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray29);
        double[][] doubleArray31 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        double[][] doubleArray32 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray31);
        double[][] doubleArray33 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray32);
        double[][] doubleArray34 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray32);
        double[][] doubleArray35 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray34);
        double[][] doubleArray36 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray35);
        double[][] doubleArray37 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray35);
        double[][] doubleArray38 = new double[][] {};
        double[][] doubleArray39 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray38);
        double[][] doubleArray40 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray39);
        double[][] doubleArray41 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray40);
        double[][] doubleArray42 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray40);
        double[][] doubleArray43 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray42);
        double[][] doubleArray44 = new double[][] {};
        double[][] doubleArray45 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray44);
        double[][] doubleArray46 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray45);
        double[] doubleArray50 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray54 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray58 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray62 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray63 = new double[][] { doubleArray50, doubleArray54, doubleArray58, doubleArray62 };
        double[] doubleArray65 = new double[] { 1 };
        double[] doubleArray67 = new double[] { 1 };
        double[] doubleArray69 = new double[] { 1 };
        double[] doubleArray71 = new double[] { 1 };
        double[] doubleArray73 = new double[] { 1 };
        double[][] doubleArray74 = new double[][] { doubleArray65, doubleArray67, doubleArray69, doubleArray71, doubleArray73 };
        int[] intArray75 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray74, intArray75);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray63, intArray75);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray46, intArray75);
        double[][] doubleArray79 = null;
        double[] doubleArray81 = new double[] { 1 };
        double[] doubleArray83 = new double[] { 1 };
        double[] doubleArray85 = new double[] { 1 };
        double[] doubleArray87 = new double[] { 1 };
        double[] doubleArray89 = new double[] { 1 };
        double[][] doubleArray90 = new double[][] { doubleArray81, doubleArray83, doubleArray85, doubleArray87, doubleArray89 };
        int[] intArray91 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray90, intArray91);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray79, intArray91);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray46, intArray91);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray42, intArray91);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray35, intArray91);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray0, intArray91);
        java.lang.Class<?> wildcardClass98 = intArray91.getClass();
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray71), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray73), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[]");
        org.junit.Assert.assertNotNull(doubleArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray81), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray83), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray85), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray87), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray89), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray90);
        org.junit.Assert.assertNotNull(intArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray91), "[]");
        org.junit.Assert.assertNotNull(wildcardClass98);
    }

    @Test
    public void test2111() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2111");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[][] doubleArray5 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[][] doubleArray6 = new double[][] {};
        double[][] doubleArray7 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray6);
        double[][] doubleArray8 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray7);
        double[] doubleArray15 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray22 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray29 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray36 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray37 = new double[][] { doubleArray15, doubleArray22, doubleArray29, doubleArray36 };
        double[][] doubleArray38 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray37);
        double[] doubleArray40 = new double[] { 1 };
        double[] doubleArray42 = new double[] { 1 };
        double[] doubleArray44 = new double[] { 1 };
        double[] doubleArray46 = new double[] { 1 };
        double[] doubleArray48 = new double[] { 1 };
        double[][] doubleArray49 = new double[][] { doubleArray40, doubleArray42, doubleArray44, doubleArray46, doubleArray48 };
        int[] intArray50 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray49, intArray50);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray38, intArray50);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray7, intArray50);
        double[] doubleArray57 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray61 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray65 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray69 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray70 = new double[][] { doubleArray57, doubleArray61, doubleArray65, doubleArray69 };
        double[] doubleArray72 = new double[] { 1 };
        double[] doubleArray74 = new double[] { 1 };
        double[] doubleArray76 = new double[] { 1 };
        double[] doubleArray78 = new double[] { 1 };
        double[] doubleArray80 = new double[] { 1 };
        double[][] doubleArray81 = new double[][] { doubleArray72, doubleArray74, doubleArray76, doubleArray78, doubleArray80 };
        int[] intArray82 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray81, intArray82);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray70, intArray82);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray7, intArray82);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray3, intArray82);
        double[][] doubleArray87 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[][] doubleArray88 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[][] doubleArray89 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray88);
        double[][] doubleArray90 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray88);
        double[][] doubleArray91 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray90);
        double[][] doubleArray92 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray91);
        double[][] doubleArray93 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray92);
        java.lang.Class<?> wildcardClass94 = doubleArray92.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[]");
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray74), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray78), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray80), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray81);
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[]");
        org.junit.Assert.assertNotNull(doubleArray87);
        org.junit.Assert.assertNotNull(doubleArray88);
        org.junit.Assert.assertNotNull(doubleArray89);
        org.junit.Assert.assertNotNull(doubleArray90);
        org.junit.Assert.assertNotNull(doubleArray91);
        org.junit.Assert.assertNotNull(doubleArray92);
        org.junit.Assert.assertNotNull(doubleArray93);
        org.junit.Assert.assertNotNull(wildcardClass94);
    }

    @Test
    public void test2112() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2112");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[] doubleArray10 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray17 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray24 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray31 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray32 = new double[][] { doubleArray10, doubleArray17, doubleArray24, doubleArray31 };
        double[][] doubleArray33 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray32);
        double[][] doubleArray34 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray32);
        double[][] doubleArray35 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray32);
        double[][] doubleArray36 = new double[][] {};
        double[][] doubleArray37 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray36);
        int[] intArray38 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray37, intArray38);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray35, intArray38);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray3, intArray38);
        double[][] doubleArray42 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[][] doubleArray43 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray42);
        double[][] doubleArray44 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray42);
        double[][] doubleArray45 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray42);
        double[][] doubleArray46 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray42);
        java.lang.Class<?> wildcardClass47 = doubleArray46.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertNotNull(wildcardClass47);
    }

    @Test
    public void test2113() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2113");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = new double[][] {};
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[] doubleArray8 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray12 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray16 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray20 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray21 = new double[][] { doubleArray8, doubleArray12, doubleArray16, doubleArray20 };
        double[] doubleArray23 = new double[] { 1 };
        double[] doubleArray25 = new double[] { 1 };
        double[] doubleArray27 = new double[] { 1 };
        double[] doubleArray29 = new double[] { 1 };
        double[] doubleArray31 = new double[] { 1 };
        double[][] doubleArray32 = new double[][] { doubleArray23, doubleArray25, doubleArray27, doubleArray29, doubleArray31 };
        int[] intArray33 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray32, intArray33);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray21, intArray33);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray3, intArray33);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray1, intArray33);
        double[][] doubleArray38 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray39 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray38);
        double[][] doubleArray40 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray38);
        double[][] doubleArray41 = new double[][] {};
        double[][] doubleArray42 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray41);
        double[][] doubleArray43 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray41);
        double[][] doubleArray44 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray41);
        double[] doubleArray51 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray58 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray65 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray72 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray73 = new double[][] { doubleArray51, doubleArray58, doubleArray65, doubleArray72 };
        double[][] doubleArray74 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray73);
        double[][] doubleArray75 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray73);
        double[][] doubleArray76 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray73);
        double[][] doubleArray77 = new double[][] {};
        double[][] doubleArray78 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray77);
        int[] intArray79 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray78, intArray79);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray76, intArray79);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray44, intArray79);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray38, intArray79);
        double[][] doubleArray84 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray38);
        double[][] doubleArray85 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray38);
        double[][] doubleArray86 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray38);
        java.lang.Class<?> wildcardClass87 = doubleArray86.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray79), "[]");
        org.junit.Assert.assertNotNull(doubleArray84);
        org.junit.Assert.assertNotNull(doubleArray85);
        org.junit.Assert.assertNotNull(doubleArray86);
        org.junit.Assert.assertNotNull(wildcardClass87);
    }

    @Test
    public void test2114() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2114");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray3 = new double[][] {};
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[][] doubleArray5 = new double[][] {};
        double[][] doubleArray6 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray5);
        double[] doubleArray8 = new double[] { 1 };
        double[] doubleArray10 = new double[] { 1 };
        double[] doubleArray12 = new double[] { 1 };
        double[] doubleArray14 = new double[] { 1 };
        double[] doubleArray16 = new double[] { 1 };
        double[][] doubleArray17 = new double[][] { doubleArray8, doubleArray10, doubleArray12, doubleArray14, doubleArray16 };
        int[] intArray18 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray17, intArray18);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray5, intArray18);
        double[] doubleArray24 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray28 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray32 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray36 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray37 = new double[][] { doubleArray24, doubleArray28, doubleArray32, doubleArray36 };
        double[] doubleArray39 = new double[] { 1 };
        double[] doubleArray41 = new double[] { 1 };
        double[] doubleArray43 = new double[] { 1 };
        double[] doubleArray45 = new double[] { 1 };
        double[] doubleArray47 = new double[] { 1 };
        double[][] doubleArray48 = new double[][] { doubleArray39, doubleArray41, doubleArray43, doubleArray45, doubleArray47 };
        int[] intArray49 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray48, intArray49);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray37, intArray49);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray5, intArray49);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray4, intArray49);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray2, intArray49);
        double[][] doubleArray55 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray56 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray55);
        double[][] doubleArray57 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray56);
        double[][] doubleArray58 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray57);
        double[][] doubleArray59 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray58);
        double[][] doubleArray60 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray58);
        double[][] doubleArray61 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray60);
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[]");
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[]");
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertNotNull(doubleArray61);
    }

    @Test
    public void test2115() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2115");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray5 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray6 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray7 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray6);
        double[][] doubleArray8 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray7);
        java.lang.Class<?> wildcardClass9 = doubleArray8.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void test2116() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2116");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray5 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray4);
        double[][] doubleArray6 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray5);
        double[][] doubleArray7 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray5);
        double[] doubleArray14 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray21 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray28 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray35 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray36 = new double[][] { doubleArray14, doubleArray21, doubleArray28, doubleArray35 };
        double[][] doubleArray37 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray36);
        double[][] doubleArray38 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray37);
        double[][] doubleArray39 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray38);
        double[][] doubleArray40 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray39);
        double[][] doubleArray41 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray39);
        double[][] doubleArray42 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray41);
        double[][] doubleArray43 = null;
        double[][] doubleArray44 = new double[][] {};
        double[][] doubleArray45 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray44);
        double[][] doubleArray46 = new double[][] {};
        double[][] doubleArray47 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray46);
        double[][] doubleArray48 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray47);
        double[] doubleArray52 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray56 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray60 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray64 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray65 = new double[][] { doubleArray52, doubleArray56, doubleArray60, doubleArray64 };
        double[] doubleArray67 = new double[] { 1 };
        double[] doubleArray69 = new double[] { 1 };
        double[] doubleArray71 = new double[] { 1 };
        double[] doubleArray73 = new double[] { 1 };
        double[] doubleArray75 = new double[] { 1 };
        double[][] doubleArray76 = new double[][] { doubleArray67, doubleArray69, doubleArray71, doubleArray73, doubleArray75 };
        int[] intArray77 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray76, intArray77);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray65, intArray77);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray47, intArray77);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray45, intArray77);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray43, intArray77);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray42, intArray77);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray5, intArray77);
        java.lang.Class<?> wildcardClass85 = intArray77.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray71), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray73), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray75), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray77), "[]");
        org.junit.Assert.assertNotNull(wildcardClass85);
    }

    @Test
    public void test2117() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2117");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[] doubleArray8 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray12 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray16 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray20 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray21 = new double[][] { doubleArray8, doubleArray12, doubleArray16, doubleArray20 };
        double[] doubleArray23 = new double[] { 1 };
        double[] doubleArray25 = new double[] { 1 };
        double[] doubleArray27 = new double[] { 1 };
        double[] doubleArray29 = new double[] { 1 };
        double[] doubleArray31 = new double[] { 1 };
        double[][] doubleArray32 = new double[][] { doubleArray23, doubleArray25, doubleArray27, doubleArray29, doubleArray31 };
        int[] intArray33 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray32, intArray33);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray21, intArray33);
        double[][] doubleArray36 = new double[][] {};
        double[][] doubleArray37 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray36);
        double[][] doubleArray38 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray37);
        double[][] doubleArray39 = new double[][] {};
        double[][] doubleArray40 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray39);
        double[][] doubleArray41 = new double[][] {};
        double[][] doubleArray42 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray41);
        double[] doubleArray44 = new double[] { 1 };
        double[] doubleArray46 = new double[] { 1 };
        double[] doubleArray48 = new double[] { 1 };
        double[] doubleArray50 = new double[] { 1 };
        double[] doubleArray52 = new double[] { 1 };
        double[][] doubleArray53 = new double[][] { doubleArray44, doubleArray46, doubleArray48, doubleArray50, doubleArray52 };
        int[] intArray54 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray53, intArray54);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray41, intArray54);
        double[] doubleArray60 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray64 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray68 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray72 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray73 = new double[][] { doubleArray60, doubleArray64, doubleArray68, doubleArray72 };
        double[] doubleArray75 = new double[] { 1 };
        double[] doubleArray77 = new double[] { 1 };
        double[] doubleArray79 = new double[] { 1 };
        double[] doubleArray81 = new double[] { 1 };
        double[] doubleArray83 = new double[] { 1 };
        double[][] doubleArray84 = new double[][] { doubleArray75, doubleArray77, doubleArray79, doubleArray81, doubleArray83 };
        int[] intArray85 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray84, intArray85);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray73, intArray85);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray41, intArray85);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray40, intArray85);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray38, intArray85);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray21, intArray85);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray3, intArray85);
        double[][] doubleArray93 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[][] doubleArray94 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray93);
        double[][] doubleArray95 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray94);
        java.lang.Class<?> wildcardClass96 = doubleArray95.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[]");
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray75), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray77), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray79), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray81), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray83), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray84);
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray85), "[]");
        org.junit.Assert.assertNotNull(doubleArray93);
        org.junit.Assert.assertNotNull(doubleArray94);
        org.junit.Assert.assertNotNull(doubleArray95);
        org.junit.Assert.assertNotNull(wildcardClass96);
    }

    @Test
    public void test2118() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2118");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        int[] intArray2 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray1, intArray2);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray5 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray4);
        double[][] doubleArray6 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray4);
        double[][] doubleArray7 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray4);
        double[][] doubleArray8 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray7);
        double[][] doubleArray9 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray7);
        double[][] doubleArray10 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray9);
        double[][] doubleArray11 = new double[][] {};
        double[][] doubleArray12 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray11);
        double[][] doubleArray13 = new double[][] {};
        double[][] doubleArray14 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray13);
        double[] doubleArray16 = new double[] { 1 };
        double[] doubleArray18 = new double[] { 1 };
        double[] doubleArray20 = new double[] { 1 };
        double[] doubleArray22 = new double[] { 1 };
        double[] doubleArray24 = new double[] { 1 };
        double[][] doubleArray25 = new double[][] { doubleArray16, doubleArray18, doubleArray20, doubleArray22, doubleArray24 };
        int[] intArray26 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray25, intArray26);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray13, intArray26);
        double[] doubleArray32 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray36 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray40 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray44 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray45 = new double[][] { doubleArray32, doubleArray36, doubleArray40, doubleArray44 };
        double[] doubleArray47 = new double[] { 1 };
        double[] doubleArray49 = new double[] { 1 };
        double[] doubleArray51 = new double[] { 1 };
        double[] doubleArray53 = new double[] { 1 };
        double[] doubleArray55 = new double[] { 1 };
        double[][] doubleArray56 = new double[][] { doubleArray47, doubleArray49, doubleArray51, doubleArray53, doubleArray55 };
        int[] intArray57 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray56, intArray57);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray45, intArray57);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray13, intArray57);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray11, intArray57);
        double[][] doubleArray62 = new double[][] {};
        double[][] doubleArray63 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray62);
        int[] intArray64 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray63, intArray64);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray11, intArray64);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray10, intArray64);
        java.lang.Class<?> wildcardClass68 = doubleArray10.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[]");
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[]");
        org.junit.Assert.assertNotNull(wildcardClass68);
    }

    @Test
    public void test2119() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2119");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[][] doubleArray5 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[][] doubleArray6 = new double[][] {};
        double[][] doubleArray7 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray6);
        double[][] doubleArray8 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray7);
        double[] doubleArray15 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray22 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray29 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray36 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray37 = new double[][] { doubleArray15, doubleArray22, doubleArray29, doubleArray36 };
        double[][] doubleArray38 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray37);
        double[] doubleArray40 = new double[] { 1 };
        double[] doubleArray42 = new double[] { 1 };
        double[] doubleArray44 = new double[] { 1 };
        double[] doubleArray46 = new double[] { 1 };
        double[] doubleArray48 = new double[] { 1 };
        double[][] doubleArray49 = new double[][] { doubleArray40, doubleArray42, doubleArray44, doubleArray46, doubleArray48 };
        int[] intArray50 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray49, intArray50);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray38, intArray50);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray7, intArray50);
        double[] doubleArray57 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray61 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray65 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray69 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray70 = new double[][] { doubleArray57, doubleArray61, doubleArray65, doubleArray69 };
        double[] doubleArray72 = new double[] { 1 };
        double[] doubleArray74 = new double[] { 1 };
        double[] doubleArray76 = new double[] { 1 };
        double[] doubleArray78 = new double[] { 1 };
        double[] doubleArray80 = new double[] { 1 };
        double[][] doubleArray81 = new double[][] { doubleArray72, doubleArray74, doubleArray76, doubleArray78, doubleArray80 };
        int[] intArray82 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray81, intArray82);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray70, intArray82);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray7, intArray82);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray3, intArray82);
        double[][] doubleArray87 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[][] doubleArray88 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[][] doubleArray89 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray88);
        double[][] doubleArray90 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray88);
        double[][] doubleArray91 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray90);
        double[][] doubleArray92 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray91);
        double[][] doubleArray93 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray92);
        double[][] doubleArray94 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray92);
        java.lang.Class<?> wildcardClass95 = doubleArray92.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[]");
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray74), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray78), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray80), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray81);
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[]");
        org.junit.Assert.assertNotNull(doubleArray87);
        org.junit.Assert.assertNotNull(doubleArray88);
        org.junit.Assert.assertNotNull(doubleArray89);
        org.junit.Assert.assertNotNull(doubleArray90);
        org.junit.Assert.assertNotNull(doubleArray91);
        org.junit.Assert.assertNotNull(doubleArray92);
        org.junit.Assert.assertNotNull(doubleArray93);
        org.junit.Assert.assertNotNull(doubleArray94);
        org.junit.Assert.assertNotNull(wildcardClass95);
    }

    @Test
    public void test2120() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2120");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray5 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray4);
        double[][] doubleArray6 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray5);
        double[][] doubleArray7 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray5);
        double[][] doubleArray8 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray7);
        java.lang.Class<?> wildcardClass9 = doubleArray8.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void test2121() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2121");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray4 = new double[][] {};
        double[][] doubleArray5 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray4);
        double[][] doubleArray6 = new double[][] {};
        double[][] doubleArray7 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray6);
        double[] doubleArray9 = new double[] { 1 };
        double[] doubleArray11 = new double[] { 1 };
        double[] doubleArray13 = new double[] { 1 };
        double[] doubleArray15 = new double[] { 1 };
        double[] doubleArray17 = new double[] { 1 };
        double[][] doubleArray18 = new double[][] { doubleArray9, doubleArray11, doubleArray13, doubleArray15, doubleArray17 };
        int[] intArray19 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray18, intArray19);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray6, intArray19);
        double[] doubleArray25 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray29 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray33 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray37 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray38 = new double[][] { doubleArray25, doubleArray29, doubleArray33, doubleArray37 };
        double[] doubleArray40 = new double[] { 1 };
        double[] doubleArray42 = new double[] { 1 };
        double[] doubleArray44 = new double[] { 1 };
        double[] doubleArray46 = new double[] { 1 };
        double[] doubleArray48 = new double[] { 1 };
        double[][] doubleArray49 = new double[][] { doubleArray40, doubleArray42, doubleArray44, doubleArray46, doubleArray48 };
        int[] intArray50 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray49, intArray50);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray38, intArray50);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray6, intArray50);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray4, intArray50);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray1, intArray50);
        double[][] doubleArray56 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray57 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray58 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray57);
        double[][] doubleArray59 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray57);
        double[][] doubleArray60 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray59);
        double[][] doubleArray61 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray60);
        double[][] doubleArray62 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray60);
        double[][] doubleArray63 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray60);
        java.lang.Class<?> wildcardClass64 = doubleArray63.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[]");
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertNotNull(wildcardClass64);
    }

    @Test
    public void test2122() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2122");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = new double[][] {};
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[] doubleArray5 = new double[] { 1 };
        double[] doubleArray7 = new double[] { 1 };
        double[] doubleArray9 = new double[] { 1 };
        double[] doubleArray11 = new double[] { 1 };
        double[] doubleArray13 = new double[] { 1 };
        double[][] doubleArray14 = new double[][] { doubleArray5, doubleArray7, doubleArray9, doubleArray11, doubleArray13 };
        int[] intArray15 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray14, intArray15);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray2, intArray15);
        double[] doubleArray21 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray25 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray29 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray33 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray34 = new double[][] { doubleArray21, doubleArray25, doubleArray29, doubleArray33 };
        double[] doubleArray36 = new double[] { 1 };
        double[] doubleArray38 = new double[] { 1 };
        double[] doubleArray40 = new double[] { 1 };
        double[] doubleArray42 = new double[] { 1 };
        double[] doubleArray44 = new double[] { 1 };
        double[][] doubleArray45 = new double[][] { doubleArray36, doubleArray38, doubleArray40, doubleArray42, doubleArray44 };
        int[] intArray46 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray45, intArray46);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray34, intArray46);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray2, intArray46);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray1, intArray46);
        double[] doubleArray52 = new double[] { 1 };
        double[] doubleArray54 = new double[] { 1 };
        double[] doubleArray56 = new double[] { 1 };
        double[] doubleArray58 = new double[] { 1 };
        double[] doubleArray60 = new double[] { 1 };
        double[][] doubleArray61 = new double[][] { doubleArray52, doubleArray54, doubleArray56, doubleArray58, doubleArray60 };
        int[] intArray62 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray61, intArray62);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray1, intArray62);
        double[][] doubleArray65 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray66 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray67 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray66);
        double[][] doubleArray68 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray66);
        double[][] doubleArray69 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray68);
        double[][] doubleArray70 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray69);
        double[][] doubleArray71 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray70);
        java.lang.Class<?> wildcardClass72 = doubleArray71.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[]");
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[]");
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertNotNull(wildcardClass72);
    }

    @Test
    public void test2123() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2123");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        int[] intArray2 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray1, intArray2);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray5 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray4);
        double[][] doubleArray6 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray4);
        double[][] doubleArray7 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray4);
        double[][] doubleArray8 = new double[][] {};
        double[][] doubleArray9 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray8);
        double[][] doubleArray10 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray9);
        double[][] doubleArray11 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray10);
        double[][] doubleArray12 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray11);
        double[][] doubleArray13 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray11);
        double[][] doubleArray14 = new double[][] {};
        double[][] doubleArray15 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray14);
        double[][] doubleArray16 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray14);
        double[] doubleArray23 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray30 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray37 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray44 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray45 = new double[][] { doubleArray23, doubleArray30, doubleArray37, doubleArray44 };
        double[][] doubleArray46 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray45);
        double[][] doubleArray47 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray45);
        double[][] doubleArray48 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray45);
        double[][] doubleArray49 = new double[][] {};
        double[][] doubleArray50 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray49);
        int[] intArray51 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray50, intArray51);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray48, intArray51);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray16, intArray51);
        double[][] doubleArray55 = null;
        double[][] doubleArray56 = new double[][] {};
        double[][] doubleArray57 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray56);
        double[][] doubleArray58 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray57);
        double[] doubleArray62 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray66 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray70 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray74 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray75 = new double[][] { doubleArray62, doubleArray66, doubleArray70, doubleArray74 };
        double[] doubleArray77 = new double[] { 1 };
        double[] doubleArray79 = new double[] { 1 };
        double[] doubleArray81 = new double[] { 1 };
        double[] doubleArray83 = new double[] { 1 };
        double[] doubleArray85 = new double[] { 1 };
        double[][] doubleArray86 = new double[][] { doubleArray77, doubleArray79, doubleArray81, doubleArray83, doubleArray85 };
        int[] intArray87 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray86, intArray87);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray75, intArray87);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray58, intArray87);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray55, intArray87);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray16, intArray87);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray13, intArray87);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray7, intArray87);
        java.lang.Class<?> wildcardClass95 = intArray87.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[]");
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray66), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray70), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray74), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray77), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray79), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray81), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray83), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray85), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray86);
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray87), "[]");
        org.junit.Assert.assertNotNull(wildcardClass95);
    }

    @Test
    public void test2124() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2124");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray30 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray29);
        double[][] doubleArray31 = new double[][] {};
        double[][] doubleArray32 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray31);
        double[] doubleArray34 = new double[] { 1 };
        double[] doubleArray36 = new double[] { 1 };
        double[] doubleArray38 = new double[] { 1 };
        double[] doubleArray40 = new double[] { 1 };
        double[] doubleArray42 = new double[] { 1 };
        double[][] doubleArray43 = new double[][] { doubleArray34, doubleArray36, doubleArray38, doubleArray40, doubleArray42 };
        int[] intArray44 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray43, intArray44);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray31, intArray44);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray30, intArray44);
        double[][] doubleArray48 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        double[][] doubleArray49 = new double[][] {};
        double[][] doubleArray50 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray49);
        int[] intArray51 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray50, intArray51);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray48, intArray51);
        double[][] doubleArray54 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray48);
        double[][] doubleArray55 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray54);
        double[][] doubleArray56 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray55);
        double[][] doubleArray57 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray56);
        java.lang.Class<?> wildcardClass58 = doubleArray57.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[]");
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertNotNull(wildcardClass58);
    }

    @Test
    public void test2125() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2125");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[][] doubleArray5 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[][] doubleArray6 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray5);
        double[][] doubleArray7 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray5);
        double[][] doubleArray8 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray5);
        java.lang.Class<?> wildcardClass9 = doubleArray5.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void test2126() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2126");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray3 = new double[][] {};
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[][] doubleArray5 = new double[][] {};
        double[][] doubleArray6 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray5);
        double[] doubleArray8 = new double[] { 1 };
        double[] doubleArray10 = new double[] { 1 };
        double[] doubleArray12 = new double[] { 1 };
        double[] doubleArray14 = new double[] { 1 };
        double[] doubleArray16 = new double[] { 1 };
        double[][] doubleArray17 = new double[][] { doubleArray8, doubleArray10, doubleArray12, doubleArray14, doubleArray16 };
        int[] intArray18 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray17, intArray18);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray5, intArray18);
        double[] doubleArray24 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray28 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray32 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray36 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray37 = new double[][] { doubleArray24, doubleArray28, doubleArray32, doubleArray36 };
        double[] doubleArray39 = new double[] { 1 };
        double[] doubleArray41 = new double[] { 1 };
        double[] doubleArray43 = new double[] { 1 };
        double[] doubleArray45 = new double[] { 1 };
        double[] doubleArray47 = new double[] { 1 };
        double[][] doubleArray48 = new double[][] { doubleArray39, doubleArray41, doubleArray43, doubleArray45, doubleArray47 };
        int[] intArray49 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray48, intArray49);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray37, intArray49);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray5, intArray49);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray4, intArray49);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray2, intArray49);
        double[][] doubleArray55 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray56 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray55);
        double[][] doubleArray57 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray56);
        double[][] doubleArray58 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray57);
        double[][] doubleArray59 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray58);
        java.lang.Class<?> wildcardClass60 = doubleArray58.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[]");
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[]");
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertNotNull(wildcardClass60);
    }

    @Test
    public void test2127() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2127");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[][] doubleArray5 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[][] doubleArray6 = new double[][] {};
        double[][] doubleArray7 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray6);
        double[][] doubleArray8 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray7);
        double[] doubleArray15 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray22 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray29 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray36 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray37 = new double[][] { doubleArray15, doubleArray22, doubleArray29, doubleArray36 };
        double[][] doubleArray38 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray37);
        double[] doubleArray40 = new double[] { 1 };
        double[] doubleArray42 = new double[] { 1 };
        double[] doubleArray44 = new double[] { 1 };
        double[] doubleArray46 = new double[] { 1 };
        double[] doubleArray48 = new double[] { 1 };
        double[][] doubleArray49 = new double[][] { doubleArray40, doubleArray42, doubleArray44, doubleArray46, doubleArray48 };
        int[] intArray50 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray49, intArray50);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray38, intArray50);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray7, intArray50);
        double[] doubleArray57 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray61 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray65 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray69 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray70 = new double[][] { doubleArray57, doubleArray61, doubleArray65, doubleArray69 };
        double[] doubleArray72 = new double[] { 1 };
        double[] doubleArray74 = new double[] { 1 };
        double[] doubleArray76 = new double[] { 1 };
        double[] doubleArray78 = new double[] { 1 };
        double[] doubleArray80 = new double[] { 1 };
        double[][] doubleArray81 = new double[][] { doubleArray72, doubleArray74, doubleArray76, doubleArray78, doubleArray80 };
        int[] intArray82 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray81, intArray82);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray70, intArray82);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray7, intArray82);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray3, intArray82);
        double[][] doubleArray87 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[][] doubleArray88 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[][] doubleArray89 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray88);
        double[][] doubleArray90 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray89);
        double[][] doubleArray91 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray90);
        java.lang.Class<?> wildcardClass92 = doubleArray91.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[]");
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray74), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray78), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray80), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray81);
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[]");
        org.junit.Assert.assertNotNull(doubleArray87);
        org.junit.Assert.assertNotNull(doubleArray88);
        org.junit.Assert.assertNotNull(doubleArray89);
        org.junit.Assert.assertNotNull(doubleArray90);
        org.junit.Assert.assertNotNull(doubleArray91);
        org.junit.Assert.assertNotNull(wildcardClass92);
    }

    @Test
    public void test2128() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2128");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray30 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray31 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        double[][] doubleArray32 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray31);
        double[][] doubleArray33 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray32);
        double[][] doubleArray34 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray33);
        java.lang.Class<?> wildcardClass35 = doubleArray33.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertNotNull(wildcardClass35);
    }

    @Test
    public void test2129() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2129");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[] doubleArray31 = new double[] { 1 };
        double[] doubleArray33 = new double[] { 1 };
        double[] doubleArray35 = new double[] { 1 };
        double[] doubleArray37 = new double[] { 1 };
        double[] doubleArray39 = new double[] { 1 };
        double[][] doubleArray40 = new double[][] { doubleArray31, doubleArray33, doubleArray35, doubleArray37, doubleArray39 };
        int[] intArray41 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray40, intArray41);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray29, intArray41);
        double[] doubleArray50 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray57 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray64 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray71 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray72 = new double[][] { doubleArray50, doubleArray57, doubleArray64, doubleArray71 };
        double[][] doubleArray73 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray72);
        double[] doubleArray75 = new double[] { 1 };
        double[] doubleArray77 = new double[] { 1 };
        double[] doubleArray79 = new double[] { 1 };
        double[] doubleArray81 = new double[] { 1 };
        double[] doubleArray83 = new double[] { 1 };
        double[][] doubleArray84 = new double[][] { doubleArray75, doubleArray77, doubleArray79, doubleArray81, doubleArray83 };
        int[] intArray85 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray84, intArray85);
        double[][] doubleArray87 = new double[][] {};
        double[][] doubleArray88 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray87);
        int[] intArray89 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray88, intArray89);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray84, intArray89);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray72, intArray89);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray29, intArray89);
        double[][] doubleArray94 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray29);
        double[][] doubleArray95 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray29);
        double[][] doubleArray96 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray95);
        double[][] doubleArray97 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray96);
        double[][] doubleArray98 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray96);
        java.lang.Class<?> wildcardClass99 = doubleArray98.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[]");
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray71), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray75), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray77), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray79), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray81), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray83), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray84);
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray85), "[]");
        org.junit.Assert.assertNotNull(doubleArray87);
        org.junit.Assert.assertNotNull(doubleArray88);
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray89), "[]");
        org.junit.Assert.assertNotNull(doubleArray94);
        org.junit.Assert.assertNotNull(doubleArray95);
        org.junit.Assert.assertNotNull(doubleArray96);
        org.junit.Assert.assertNotNull(doubleArray97);
        org.junit.Assert.assertNotNull(doubleArray98);
        org.junit.Assert.assertNotNull(wildcardClass99);
    }

    @Test
    public void test2130() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2130");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[] doubleArray3 = new double[] { 1 };
        double[] doubleArray5 = new double[] { 1 };
        double[] doubleArray7 = new double[] { 1 };
        double[] doubleArray9 = new double[] { 1 };
        double[] doubleArray11 = new double[] { 1 };
        double[][] doubleArray12 = new double[][] { doubleArray3, doubleArray5, doubleArray7, doubleArray9, doubleArray11 };
        int[] intArray13 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray12, intArray13);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray0, intArray13);
        double[] doubleArray19 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray23 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray27 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray31 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray32 = new double[][] { doubleArray19, doubleArray23, doubleArray27, doubleArray31 };
        double[] doubleArray34 = new double[] { 1 };
        double[] doubleArray36 = new double[] { 1 };
        double[] doubleArray38 = new double[] { 1 };
        double[] doubleArray40 = new double[] { 1 };
        double[] doubleArray42 = new double[] { 1 };
        double[][] doubleArray43 = new double[][] { doubleArray34, doubleArray36, doubleArray38, doubleArray40, doubleArray42 };
        int[] intArray44 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray43, intArray44);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray32, intArray44);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray0, intArray44);
        double[] doubleArray49 = new double[] { 1 };
        double[] doubleArray51 = new double[] { 1 };
        double[] doubleArray53 = new double[] { 1 };
        double[] doubleArray55 = new double[] { 1 };
        double[] doubleArray57 = new double[] { 1 };
        double[][] doubleArray58 = new double[][] { doubleArray49, doubleArray51, doubleArray53, doubleArray55, doubleArray57 };
        int[] intArray59 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray58, intArray59);
        double[][] doubleArray61 = new double[][] {};
        double[][] doubleArray62 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray61);
        int[] intArray63 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray62, intArray63);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray58, intArray63);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray0, intArray63);
        double[][] doubleArray67 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray68 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray67);
        double[][] doubleArray69 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray67);
        double[][] doubleArray70 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray67);
        double[][] doubleArray71 = new double[][] {};
        double[][] doubleArray72 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray71);
        double[][] doubleArray73 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray71);
        double[][] doubleArray74 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray71);
        double[][] doubleArray75 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray71);
        double[][] doubleArray76 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray75);
        double[][] doubleArray77 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray75);
        double[][] doubleArray78 = new double[][] {};
        double[][] doubleArray79 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray78);
        int[] intArray80 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray79, intArray80);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray77, intArray80);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray70, intArray80);
        java.lang.Class<?> wildcardClass84 = intArray80.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[]");
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[]");
        org.junit.Assert.assertNotNull(wildcardClass84);
    }

    @Test
    public void test2131() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2131");
        double[][] doubleArray0 = null;
        double[][] doubleArray1 = new double[][] {};
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        int[] intArray3 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray2, intArray3);
        double[][] doubleArray5 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray6 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray5);
        double[][] doubleArray7 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray6);
        double[][] doubleArray8 = new double[][] {};
        double[][] doubleArray9 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray8);
        double[] doubleArray11 = new double[] { 1 };
        double[] doubleArray13 = new double[] { 1 };
        double[] doubleArray15 = new double[] { 1 };
        double[] doubleArray17 = new double[] { 1 };
        double[] doubleArray19 = new double[] { 1 };
        double[][] doubleArray20 = new double[][] { doubleArray11, doubleArray13, doubleArray15, doubleArray17, doubleArray19 };
        int[] intArray21 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray20, intArray21);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray8, intArray21);
        double[][] doubleArray24 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray8);
        double[][] doubleArray25 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray24);
        double[][] doubleArray26 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray25);
        double[][] doubleArray27 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray26);
        double[][] doubleArray28 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray26);
        double[][] doubleArray29 = new double[][] {};
        double[][] doubleArray30 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray29);
        double[][] doubleArray31 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        double[][] doubleArray32 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray31);
        double[][] doubleArray33 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray31);
        double[][] doubleArray34 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray33);
        double[][] doubleArray35 = new double[][] {};
        double[][] doubleArray36 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray35);
        double[][] doubleArray37 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray36);
        double[] doubleArray41 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray45 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray49 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray53 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray54 = new double[][] { doubleArray41, doubleArray45, doubleArray49, doubleArray53 };
        double[] doubleArray56 = new double[] { 1 };
        double[] doubleArray58 = new double[] { 1 };
        double[] doubleArray60 = new double[] { 1 };
        double[] doubleArray62 = new double[] { 1 };
        double[] doubleArray64 = new double[] { 1 };
        double[][] doubleArray65 = new double[][] { doubleArray56, doubleArray58, doubleArray60, doubleArray62, doubleArray64 };
        int[] intArray66 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray65, intArray66);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray54, intArray66);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray37, intArray66);
        double[][] doubleArray70 = null;
        double[] doubleArray72 = new double[] { 1 };
        double[] doubleArray74 = new double[] { 1 };
        double[] doubleArray76 = new double[] { 1 };
        double[] doubleArray78 = new double[] { 1 };
        double[] doubleArray80 = new double[] { 1 };
        double[][] doubleArray81 = new double[][] { doubleArray72, doubleArray74, doubleArray76, doubleArray78, doubleArray80 };
        int[] intArray82 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray81, intArray82);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray70, intArray82);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray37, intArray82);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray33, intArray82);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray28, intArray82);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray7, intArray82);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray0, intArray82);
        java.lang.Class<?> wildcardClass90 = intArray82.getClass();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[]");
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[]");
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray74), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray78), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray80), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray81);
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[]");
        org.junit.Assert.assertNotNull(wildcardClass90);
    }

    @Test
    public void test2132() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2132");
        double[][] doubleArray0 = null;
        double[][] doubleArray1 = null;
        double[][] doubleArray2 = new double[][] {};
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[][] doubleArray5 = new double[][] {};
        double[][] doubleArray6 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray5);
        double[][] doubleArray7 = new double[][] {};
        double[][] doubleArray8 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray7);
        double[] doubleArray10 = new double[] { 1 };
        double[] doubleArray12 = new double[] { 1 };
        double[] doubleArray14 = new double[] { 1 };
        double[] doubleArray16 = new double[] { 1 };
        double[] doubleArray18 = new double[] { 1 };
        double[][] doubleArray19 = new double[][] { doubleArray10, doubleArray12, doubleArray14, doubleArray16, doubleArray18 };
        int[] intArray20 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray19, intArray20);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray7, intArray20);
        double[] doubleArray26 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray30 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray34 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray38 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray39 = new double[][] { doubleArray26, doubleArray30, doubleArray34, doubleArray38 };
        double[] doubleArray41 = new double[] { 1 };
        double[] doubleArray43 = new double[] { 1 };
        double[] doubleArray45 = new double[] { 1 };
        double[] doubleArray47 = new double[] { 1 };
        double[] doubleArray49 = new double[] { 1 };
        double[][] doubleArray50 = new double[][] { doubleArray41, doubleArray43, doubleArray45, doubleArray47, doubleArray49 };
        int[] intArray51 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray50, intArray51);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray39, intArray51);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray7, intArray51);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray6, intArray51);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray4, intArray51);
        double[][] doubleArray57 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray4);
        double[][] doubleArray58 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray57);
        double[][] doubleArray59 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray57);
        double[][] doubleArray60 = new double[][] {};
        double[][] doubleArray61 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray60);
        double[][] doubleArray62 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray61);
        double[] doubleArray66 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray70 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray74 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray78 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray79 = new double[][] { doubleArray66, doubleArray70, doubleArray74, doubleArray78 };
        double[] doubleArray81 = new double[] { 1 };
        double[] doubleArray83 = new double[] { 1 };
        double[] doubleArray85 = new double[] { 1 };
        double[] doubleArray87 = new double[] { 1 };
        double[] doubleArray89 = new double[] { 1 };
        double[][] doubleArray90 = new double[][] { doubleArray81, doubleArray83, doubleArray85, doubleArray87, doubleArray89 };
        int[] intArray91 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray90, intArray91);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray79, intArray91);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray61, intArray91);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray59, intArray91);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray1, intArray91);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray0, intArray91);
        java.lang.Class<?> wildcardClass98 = intArray91.getClass();
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[]");
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[]");
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray66), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray70), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray74), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray78), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertNotNull(doubleArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray81), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray83), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray85), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray87), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray89), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray90);
        org.junit.Assert.assertNotNull(intArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray91), "[]");
        org.junit.Assert.assertNotNull(wildcardClass98);
    }

    @Test
    public void test2133() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2133");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[] doubleArray31 = new double[] { 1 };
        double[] doubleArray33 = new double[] { 1 };
        double[] doubleArray35 = new double[] { 1 };
        double[] doubleArray37 = new double[] { 1 };
        double[] doubleArray39 = new double[] { 1 };
        double[][] doubleArray40 = new double[][] { doubleArray31, doubleArray33, doubleArray35, doubleArray37, doubleArray39 };
        int[] intArray41 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray40, intArray41);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray29, intArray41);
        double[][] doubleArray44 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray29);
        java.lang.Class<?> wildcardClass45 = doubleArray44.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertNotNull(wildcardClass45);
    }

    @Test
    public void test2134() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2134");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[][] doubleArray5 = null;
        double[][] doubleArray6 = new double[][] {};
        double[][] doubleArray7 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray6);
        double[][] doubleArray8 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray7);
        double[] doubleArray12 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray16 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray20 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray24 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray25 = new double[][] { doubleArray12, doubleArray16, doubleArray20, doubleArray24 };
        double[] doubleArray27 = new double[] { 1 };
        double[] doubleArray29 = new double[] { 1 };
        double[] doubleArray31 = new double[] { 1 };
        double[] doubleArray33 = new double[] { 1 };
        double[] doubleArray35 = new double[] { 1 };
        double[][] doubleArray36 = new double[][] { doubleArray27, doubleArray29, doubleArray31, doubleArray33, doubleArray35 };
        int[] intArray37 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray36, intArray37);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray25, intArray37);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray8, intArray37);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray5, intArray37);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray3, intArray37);
        double[][] doubleArray43 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[][] doubleArray44 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray43);
        double[][] doubleArray45 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray44);
        double[][] doubleArray46 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray45);
        double[][] doubleArray47 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray46);
        java.lang.Class<?> wildcardClass48 = doubleArray47.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertNotNull(wildcardClass48);
    }

    @Test
    public void test2135() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2135");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[] doubleArray4 = new double[] { 1 };
        double[] doubleArray6 = new double[] { 1 };
        double[] doubleArray8 = new double[] { 1 };
        double[] doubleArray10 = new double[] { 1 };
        double[] doubleArray12 = new double[] { 1 };
        double[][] doubleArray13 = new double[][] { doubleArray4, doubleArray6, doubleArray8, doubleArray10, doubleArray12 };
        int[] intArray14 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray13, intArray14);
        double[] doubleArray22 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray29 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray36 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray43 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray44 = new double[][] { doubleArray22, doubleArray29, doubleArray36, doubleArray43 };
        double[][] doubleArray45 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray44);
        double[] doubleArray47 = new double[] { 1 };
        double[] doubleArray49 = new double[] { 1 };
        double[] doubleArray51 = new double[] { 1 };
        double[] doubleArray53 = new double[] { 1 };
        double[] doubleArray55 = new double[] { 1 };
        double[][] doubleArray56 = new double[][] { doubleArray47, doubleArray49, doubleArray51, doubleArray53, doubleArray55 };
        int[] intArray57 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray56, intArray57);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray45, intArray57);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray13, intArray57);
        double[] doubleArray62 = new double[] { 1 };
        double[] doubleArray64 = new double[] { 1 };
        double[] doubleArray66 = new double[] { 1 };
        double[] doubleArray68 = new double[] { 1 };
        double[] doubleArray70 = new double[] { 1 };
        double[][] doubleArray71 = new double[][] { doubleArray62, doubleArray64, doubleArray66, doubleArray68, doubleArray70 };
        int[] intArray72 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray71, intArray72);
        double[][] doubleArray74 = new double[][] {};
        double[][] doubleArray75 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray74);
        int[] intArray76 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray75, intArray76);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray71, intArray76);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray13, intArray76);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray2, intArray76);
        double[][] doubleArray81 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray82 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray83 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray84 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray83);
        double[][] doubleArray85 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray83);
        double[][] doubleArray86 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray83);
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[]");
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[]");
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray66), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray70), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[]");
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[]");
        org.junit.Assert.assertNotNull(doubleArray81);
        org.junit.Assert.assertNotNull(doubleArray82);
        org.junit.Assert.assertNotNull(doubleArray83);
        org.junit.Assert.assertNotNull(doubleArray84);
        org.junit.Assert.assertNotNull(doubleArray85);
        org.junit.Assert.assertNotNull(doubleArray86);
    }

    @Test
    public void test2136() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2136");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = new double[][] {};
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[] doubleArray5 = new double[] { 1 };
        double[] doubleArray7 = new double[] { 1 };
        double[] doubleArray9 = new double[] { 1 };
        double[] doubleArray11 = new double[] { 1 };
        double[] doubleArray13 = new double[] { 1 };
        double[][] doubleArray14 = new double[][] { doubleArray5, doubleArray7, doubleArray9, doubleArray11, doubleArray13 };
        int[] intArray15 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray14, intArray15);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray2, intArray15);
        double[] doubleArray21 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray25 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray29 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray33 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray34 = new double[][] { doubleArray21, doubleArray25, doubleArray29, doubleArray33 };
        double[] doubleArray36 = new double[] { 1 };
        double[] doubleArray38 = new double[] { 1 };
        double[] doubleArray40 = new double[] { 1 };
        double[] doubleArray42 = new double[] { 1 };
        double[] doubleArray44 = new double[] { 1 };
        double[][] doubleArray45 = new double[][] { doubleArray36, doubleArray38, doubleArray40, doubleArray42, doubleArray44 };
        int[] intArray46 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray45, intArray46);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray34, intArray46);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray2, intArray46);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray1, intArray46);
        double[][] doubleArray51 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray52 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray51);
        double[][] doubleArray53 = new double[][] {};
        double[][] doubleArray54 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray53);
        int[] intArray55 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray54, intArray55);
        double[] doubleArray58 = new double[] { 1 };
        double[] doubleArray60 = new double[] { 1 };
        double[] doubleArray62 = new double[] { 1 };
        double[] doubleArray64 = new double[] { 1 };
        double[] doubleArray66 = new double[] { 1 };
        double[][] doubleArray67 = new double[][] { doubleArray58, doubleArray60, doubleArray62, doubleArray64, doubleArray66 };
        int[] intArray68 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray67, intArray68);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray54, intArray68);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray52, intArray68);
        double[][] doubleArray72 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray52);
        double[][] doubleArray73 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray52);
        double[][] doubleArray74 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray73);
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[]");
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray66), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[]");
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertNotNull(doubleArray74);
    }

    @Test
    public void test2137() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2137");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray30 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray29);
        double[][] doubleArray31 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        double[][] doubleArray32 = new double[][] {};
        double[][] doubleArray33 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray32);
        double[][] doubleArray34 = new double[][] {};
        double[][] doubleArray35 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray34);
        double[] doubleArray37 = new double[] { 1 };
        double[] doubleArray39 = new double[] { 1 };
        double[] doubleArray41 = new double[] { 1 };
        double[] doubleArray43 = new double[] { 1 };
        double[] doubleArray45 = new double[] { 1 };
        double[][] doubleArray46 = new double[][] { doubleArray37, doubleArray39, doubleArray41, doubleArray43, doubleArray45 };
        int[] intArray47 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray46, intArray47);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray34, intArray47);
        double[] doubleArray53 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray57 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray61 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray65 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray66 = new double[][] { doubleArray53, doubleArray57, doubleArray61, doubleArray65 };
        double[] doubleArray68 = new double[] { 1 };
        double[] doubleArray70 = new double[] { 1 };
        double[] doubleArray72 = new double[] { 1 };
        double[] doubleArray74 = new double[] { 1 };
        double[] doubleArray76 = new double[] { 1 };
        double[][] doubleArray77 = new double[][] { doubleArray68, doubleArray70, doubleArray72, doubleArray74, doubleArray76 };
        int[] intArray78 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray77, intArray78);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray66, intArray78);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray34, intArray78);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray33, intArray78);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray30, intArray78);
        double[][] doubleArray84 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        double[][] doubleArray85 = new double[][] {};
        double[][] doubleArray86 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray85);
        double[][] doubleArray87 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray85);
        double[][] doubleArray88 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray85);
        double[][] doubleArray89 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray85);
        double[][] doubleArray90 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray89);
        double[][] doubleArray91 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray89);
        double[][] doubleArray92 = new double[][] {};
        double[][] doubleArray93 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray92);
        int[] intArray94 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray93, intArray94);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray91, intArray94);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray84, intArray94);
        java.lang.Class<?> wildcardClass98 = doubleArray84.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[]");
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray70), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray74), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[]");
        org.junit.Assert.assertNotNull(doubleArray84);
        org.junit.Assert.assertNotNull(doubleArray85);
        org.junit.Assert.assertNotNull(doubleArray86);
        org.junit.Assert.assertNotNull(doubleArray87);
        org.junit.Assert.assertNotNull(doubleArray88);
        org.junit.Assert.assertNotNull(doubleArray89);
        org.junit.Assert.assertNotNull(doubleArray90);
        org.junit.Assert.assertNotNull(doubleArray91);
        org.junit.Assert.assertNotNull(doubleArray92);
        org.junit.Assert.assertNotNull(doubleArray93);
        org.junit.Assert.assertNotNull(intArray94);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray94), "[]");
        org.junit.Assert.assertNotNull(wildcardClass98);
    }

    @Test
    public void test2138() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2138");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = new double[][] {};
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[] doubleArray8 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray12 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray16 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray20 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray21 = new double[][] { doubleArray8, doubleArray12, doubleArray16, doubleArray20 };
        double[] doubleArray23 = new double[] { 1 };
        double[] doubleArray25 = new double[] { 1 };
        double[] doubleArray27 = new double[] { 1 };
        double[] doubleArray29 = new double[] { 1 };
        double[] doubleArray31 = new double[] { 1 };
        double[][] doubleArray32 = new double[][] { doubleArray23, doubleArray25, doubleArray27, doubleArray29, doubleArray31 };
        int[] intArray33 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray32, intArray33);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray21, intArray33);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray3, intArray33);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray1, intArray33);
        double[][] doubleArray38 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray39 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray38);
        double[][] doubleArray40 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray39);
        double[][] doubleArray41 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray39);
        double[][] doubleArray42 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray41);
        double[][] doubleArray43 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray42);
        double[][] doubleArray44 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray42);
        double[][] doubleArray45 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray44);
        double[][] doubleArray46 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray45);
        double[][] doubleArray47 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray46);
        java.lang.Class<?> wildcardClass48 = doubleArray46.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertNotNull(wildcardClass48);
    }

    @Test
    public void test2139() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2139");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[] doubleArray11 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray18 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray25 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray32 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray33 = new double[][] { doubleArray11, doubleArray18, doubleArray25, doubleArray32 };
        double[][] doubleArray34 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray33);
        double[][] doubleArray35 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray34);
        double[][] doubleArray36 = new double[][] {};
        double[][] doubleArray37 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray36);
        double[] doubleArray39 = new double[] { 1 };
        double[] doubleArray41 = new double[] { 1 };
        double[] doubleArray43 = new double[] { 1 };
        double[] doubleArray45 = new double[] { 1 };
        double[] doubleArray47 = new double[] { 1 };
        double[][] doubleArray48 = new double[][] { doubleArray39, doubleArray41, doubleArray43, doubleArray45, doubleArray47 };
        int[] intArray49 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray48, intArray49);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray36, intArray49);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray35, intArray49);
        double[][] doubleArray53 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray35);
        double[] doubleArray55 = new double[] { 1 };
        double[] doubleArray57 = new double[] { 1 };
        double[] doubleArray59 = new double[] { 1 };
        double[] doubleArray61 = new double[] { 1 };
        double[] doubleArray63 = new double[] { 1 };
        double[][] doubleArray64 = new double[][] { doubleArray55, doubleArray57, doubleArray59, doubleArray61, doubleArray63 };
        int[] intArray65 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray64, intArray65);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray53, intArray65);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray3, intArray65);
        double[][] doubleArray69 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[][] doubleArray70 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray69);
        double[][] doubleArray71 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray70);
        double[][] doubleArray72 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray70);
        double[][] doubleArray73 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray72);
        java.lang.Class<?> wildcardClass74 = doubleArray73.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[]");
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[]");
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertNotNull(wildcardClass74);
    }

    @Test
    public void test2140() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2140");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[] doubleArray3 = new double[] { 1 };
        double[] doubleArray5 = new double[] { 1 };
        double[] doubleArray7 = new double[] { 1 };
        double[] doubleArray9 = new double[] { 1 };
        double[] doubleArray11 = new double[] { 1 };
        double[][] doubleArray12 = new double[][] { doubleArray3, doubleArray5, doubleArray7, doubleArray9, doubleArray11 };
        int[] intArray13 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray12, intArray13);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray0, intArray13);
        double[] doubleArray19 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray23 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray27 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray31 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray32 = new double[][] { doubleArray19, doubleArray23, doubleArray27, doubleArray31 };
        double[] doubleArray34 = new double[] { 1 };
        double[] doubleArray36 = new double[] { 1 };
        double[] doubleArray38 = new double[] { 1 };
        double[] doubleArray40 = new double[] { 1 };
        double[] doubleArray42 = new double[] { 1 };
        double[][] doubleArray43 = new double[][] { doubleArray34, doubleArray36, doubleArray38, doubleArray40, doubleArray42 };
        int[] intArray44 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray43, intArray44);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray32, intArray44);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray0, intArray44);
        double[][] doubleArray48 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray49 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray48);
        double[] doubleArray56 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray63 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray70 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray77 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray78 = new double[][] { doubleArray56, doubleArray63, doubleArray70, doubleArray77 };
        double[][] doubleArray79 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray78);
        double[] doubleArray81 = new double[] { 1 };
        double[] doubleArray83 = new double[] { 1 };
        double[] doubleArray85 = new double[] { 1 };
        double[] doubleArray87 = new double[] { 1 };
        double[] doubleArray89 = new double[] { 1 };
        double[][] doubleArray90 = new double[][] { doubleArray81, doubleArray83, doubleArray85, doubleArray87, doubleArray89 };
        int[] intArray91 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray90, intArray91);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray79, intArray91);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray49, intArray91);
        double[][] doubleArray95 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray49);
        double[][] doubleArray96 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray49);
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray70), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray77), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertNotNull(doubleArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray81), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray83), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray85), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray87), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray89), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray90);
        org.junit.Assert.assertNotNull(intArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray91), "[]");
        org.junit.Assert.assertNotNull(doubleArray95);
        org.junit.Assert.assertNotNull(doubleArray96);
    }

    @Test
    public void test2141() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2141");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray5 = new double[][] {};
        double[][] doubleArray6 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray5);
        double[][] doubleArray7 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray6);
        double[] doubleArray11 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray15 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray19 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray23 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray24 = new double[][] { doubleArray11, doubleArray15, doubleArray19, doubleArray23 };
        double[] doubleArray26 = new double[] { 1 };
        double[] doubleArray28 = new double[] { 1 };
        double[] doubleArray30 = new double[] { 1 };
        double[] doubleArray32 = new double[] { 1 };
        double[] doubleArray34 = new double[] { 1 };
        double[][] doubleArray35 = new double[][] { doubleArray26, doubleArray28, doubleArray30, doubleArray32, doubleArray34 };
        int[] intArray36 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray35, intArray36);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray24, intArray36);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray7, intArray36);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray0, intArray36);
        double[][] doubleArray41 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray42 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray41);
        double[][] doubleArray43 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray41);
        java.lang.Class<?> wildcardClass44 = doubleArray43.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(wildcardClass44);
    }

    @Test
    public void test2142() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2142");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        int[] intArray2 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray1, intArray2);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray5 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray6 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray5);
        double[][] doubleArray7 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray6);
        double[][] doubleArray8 = new double[][] {};
        double[][] doubleArray9 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray8);
        int[] intArray10 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray9, intArray10);
        double[][] doubleArray12 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray9);
        double[][] doubleArray13 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray12);
        double[][] doubleArray14 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray12);
        double[][] doubleArray15 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray12);
        double[] doubleArray22 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray29 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray36 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray43 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray44 = new double[][] { doubleArray22, doubleArray29, doubleArray36, doubleArray43 };
        double[][] doubleArray45 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray44);
        double[][] doubleArray46 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray44);
        double[][] doubleArray47 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray44);
        double[][] doubleArray48 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray47);
        double[][] doubleArray49 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray48);
        double[] doubleArray56 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray63 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray70 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray77 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray78 = new double[][] { doubleArray56, doubleArray63, doubleArray70, doubleArray77 };
        double[][] doubleArray79 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray78);
        double[][] doubleArray80 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray78);
        double[][] doubleArray81 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray78);
        double[][] doubleArray82 = new double[][] {};
        double[][] doubleArray83 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray82);
        int[] intArray84 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray83, intArray84);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray81, intArray84);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray49, intArray84);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray15, intArray84);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray6, intArray84);
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray70), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray77), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertNotNull(doubleArray81);
        org.junit.Assert.assertNotNull(doubleArray82);
        org.junit.Assert.assertNotNull(doubleArray83);
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray84), "[]");
    }

    @Test
    public void test2143() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2143");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[][] doubleArray5 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[][] doubleArray6 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[][] doubleArray7 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[][] doubleArray8 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray7);
        double[][] doubleArray9 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray7);
        java.lang.Class<?> wildcardClass10 = doubleArray7.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertNotNull(wildcardClass10);
    }

    @Test
    public void test2144() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2144");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[] doubleArray31 = new double[] { 1 };
        double[] doubleArray33 = new double[] { 1 };
        double[] doubleArray35 = new double[] { 1 };
        double[] doubleArray37 = new double[] { 1 };
        double[] doubleArray39 = new double[] { 1 };
        double[][] doubleArray40 = new double[][] { doubleArray31, doubleArray33, doubleArray35, doubleArray37, doubleArray39 };
        int[] intArray41 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray40, intArray41);
        double[][] doubleArray43 = new double[][] {};
        double[][] doubleArray44 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray43);
        int[] intArray45 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray44, intArray45);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray40, intArray45);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray28, intArray45);
        double[][] doubleArray49 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray50 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray49);
        double[][] doubleArray51 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray49);
        double[][] doubleArray52 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray51);
        double[][] doubleArray53 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray52);
        double[][] doubleArray54 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray52);
        java.lang.Class<?> wildcardClass55 = doubleArray52.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertNotNull(wildcardClass55);
    }

    @Test
    public void test2145() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2145");
        double[][] doubleArray0 = null;
        double[] doubleArray7 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray14 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray21 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray28 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray29 = new double[][] { doubleArray7, doubleArray14, doubleArray21, doubleArray28 };
        double[][] doubleArray30 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray29);
        double[][] doubleArray31 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        double[][] doubleArray32 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray31);
        double[][] doubleArray33 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray32);
        double[][] doubleArray34 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray32);
        double[][] doubleArray35 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray34);
        double[][] doubleArray36 = new double[][] {};
        double[][] doubleArray37 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray36);
        double[][] doubleArray38 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray37);
        double[] doubleArray42 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray46 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray50 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray54 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray55 = new double[][] { doubleArray42, doubleArray46, doubleArray50, doubleArray54 };
        double[] doubleArray57 = new double[] { 1 };
        double[] doubleArray59 = new double[] { 1 };
        double[] doubleArray61 = new double[] { 1 };
        double[] doubleArray63 = new double[] { 1 };
        double[] doubleArray65 = new double[] { 1 };
        double[][] doubleArray66 = new double[][] { doubleArray57, doubleArray59, doubleArray61, doubleArray63, doubleArray65 };
        int[] intArray67 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray66, intArray67);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray55, intArray67);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray37, intArray67);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray35, intArray67);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray0, intArray67);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[]");
    }

    @Test
    public void test2146() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2146");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray30 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray31 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray32 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray31);
        double[][] doubleArray33 = new double[][] {};
        double[][] doubleArray34 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray33);
        int[] intArray35 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray34, intArray35);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray32, intArray35);
        double[][] doubleArray38 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray32);
        double[][] doubleArray39 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray38);
        double[][] doubleArray40 = new double[][] {};
        double[][] doubleArray41 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray40);
        double[][] doubleArray42 = new double[][] {};
        double[][] doubleArray43 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray42);
        double[] doubleArray45 = new double[] { 1 };
        double[] doubleArray47 = new double[] { 1 };
        double[] doubleArray49 = new double[] { 1 };
        double[] doubleArray51 = new double[] { 1 };
        double[] doubleArray53 = new double[] { 1 };
        double[][] doubleArray54 = new double[][] { doubleArray45, doubleArray47, doubleArray49, doubleArray51, doubleArray53 };
        int[] intArray55 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray54, intArray55);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray42, intArray55);
        double[] doubleArray61 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray65 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray69 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray73 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray74 = new double[][] { doubleArray61, doubleArray65, doubleArray69, doubleArray73 };
        double[] doubleArray76 = new double[] { 1 };
        double[] doubleArray78 = new double[] { 1 };
        double[] doubleArray80 = new double[] { 1 };
        double[] doubleArray82 = new double[] { 1 };
        double[] doubleArray84 = new double[] { 1 };
        double[][] doubleArray85 = new double[][] { doubleArray76, doubleArray78, doubleArray80, doubleArray82, doubleArray84 };
        int[] intArray86 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray85, intArray86);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray74, intArray86);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray42, intArray86);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray40, intArray86);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray39, intArray86);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray73), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray78), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray80), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray82), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray84), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray85);
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray86), "[]");
    }

    @Test
    public void test2147() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2147");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray3 = new double[][] {};
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[][] doubleArray5 = new double[][] {};
        double[][] doubleArray6 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray5);
        double[] doubleArray8 = new double[] { 1 };
        double[] doubleArray10 = new double[] { 1 };
        double[] doubleArray12 = new double[] { 1 };
        double[] doubleArray14 = new double[] { 1 };
        double[] doubleArray16 = new double[] { 1 };
        double[][] doubleArray17 = new double[][] { doubleArray8, doubleArray10, doubleArray12, doubleArray14, doubleArray16 };
        int[] intArray18 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray17, intArray18);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray5, intArray18);
        double[] doubleArray24 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray28 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray32 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray36 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray37 = new double[][] { doubleArray24, doubleArray28, doubleArray32, doubleArray36 };
        double[] doubleArray39 = new double[] { 1 };
        double[] doubleArray41 = new double[] { 1 };
        double[] doubleArray43 = new double[] { 1 };
        double[] doubleArray45 = new double[] { 1 };
        double[] doubleArray47 = new double[] { 1 };
        double[][] doubleArray48 = new double[][] { doubleArray39, doubleArray41, doubleArray43, doubleArray45, doubleArray47 };
        int[] intArray49 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray48, intArray49);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray37, intArray49);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray5, intArray49);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray4, intArray49);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray2, intArray49);
        double[][] doubleArray55 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray56 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray55);
        double[][] doubleArray57 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray56);
        double[][] doubleArray58 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray57);
        double[][] doubleArray59 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray57);
        java.lang.Class<?> wildcardClass60 = doubleArray59.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[]");
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[]");
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertNotNull(wildcardClass60);
    }

    @Test
    public void test2148() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2148");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[] doubleArray4 = new double[] { 1 };
        double[] doubleArray6 = new double[] { 1 };
        double[] doubleArray8 = new double[] { 1 };
        double[] doubleArray10 = new double[] { 1 };
        double[] doubleArray12 = new double[] { 1 };
        double[][] doubleArray13 = new double[][] { doubleArray4, doubleArray6, doubleArray8, doubleArray10, doubleArray12 };
        int[] intArray14 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray13, intArray14);
        double[] doubleArray22 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray29 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray36 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray43 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray44 = new double[][] { doubleArray22, doubleArray29, doubleArray36, doubleArray43 };
        double[][] doubleArray45 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray44);
        double[] doubleArray47 = new double[] { 1 };
        double[] doubleArray49 = new double[] { 1 };
        double[] doubleArray51 = new double[] { 1 };
        double[] doubleArray53 = new double[] { 1 };
        double[] doubleArray55 = new double[] { 1 };
        double[][] doubleArray56 = new double[][] { doubleArray47, doubleArray49, doubleArray51, doubleArray53, doubleArray55 };
        int[] intArray57 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray56, intArray57);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray45, intArray57);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray13, intArray57);
        double[] doubleArray62 = new double[] { 1 };
        double[] doubleArray64 = new double[] { 1 };
        double[] doubleArray66 = new double[] { 1 };
        double[] doubleArray68 = new double[] { 1 };
        double[] doubleArray70 = new double[] { 1 };
        double[][] doubleArray71 = new double[][] { doubleArray62, doubleArray64, doubleArray66, doubleArray68, doubleArray70 };
        int[] intArray72 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray71, intArray72);
        double[][] doubleArray74 = new double[][] {};
        double[][] doubleArray75 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray74);
        int[] intArray76 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray75, intArray76);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray71, intArray76);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray13, intArray76);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray2, intArray76);
        double[][] doubleArray81 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray82 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray81);
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[]");
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[]");
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray66), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray70), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[]");
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[]");
        org.junit.Assert.assertNotNull(doubleArray81);
        org.junit.Assert.assertNotNull(doubleArray82);
    }

    @Test
    public void test2149() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2149");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray3 = new double[][] {};
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[][] doubleArray5 = new double[][] {};
        double[][] doubleArray6 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray5);
        double[] doubleArray8 = new double[] { 1 };
        double[] doubleArray10 = new double[] { 1 };
        double[] doubleArray12 = new double[] { 1 };
        double[] doubleArray14 = new double[] { 1 };
        double[] doubleArray16 = new double[] { 1 };
        double[][] doubleArray17 = new double[][] { doubleArray8, doubleArray10, doubleArray12, doubleArray14, doubleArray16 };
        int[] intArray18 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray17, intArray18);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray5, intArray18);
        double[] doubleArray24 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray28 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray32 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray36 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray37 = new double[][] { doubleArray24, doubleArray28, doubleArray32, doubleArray36 };
        double[] doubleArray39 = new double[] { 1 };
        double[] doubleArray41 = new double[] { 1 };
        double[] doubleArray43 = new double[] { 1 };
        double[] doubleArray45 = new double[] { 1 };
        double[] doubleArray47 = new double[] { 1 };
        double[][] doubleArray48 = new double[][] { doubleArray39, doubleArray41, doubleArray43, doubleArray45, doubleArray47 };
        int[] intArray49 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray48, intArray49);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray37, intArray49);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray5, intArray49);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray4, intArray49);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray2, intArray49);
        double[][] doubleArray55 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        java.lang.Class<?> wildcardClass56 = doubleArray2.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[]");
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[]");
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertNotNull(wildcardClass56);
    }

    @Test
    public void test2150() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2150");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[] doubleArray3 = new double[] { 1 };
        double[] doubleArray5 = new double[] { 1 };
        double[] doubleArray7 = new double[] { 1 };
        double[] doubleArray9 = new double[] { 1 };
        double[] doubleArray11 = new double[] { 1 };
        double[][] doubleArray12 = new double[][] { doubleArray3, doubleArray5, doubleArray7, doubleArray9, doubleArray11 };
        int[] intArray13 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray12, intArray13);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray0, intArray13);
        double[] doubleArray19 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray23 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray27 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray31 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray32 = new double[][] { doubleArray19, doubleArray23, doubleArray27, doubleArray31 };
        double[] doubleArray34 = new double[] { 1 };
        double[] doubleArray36 = new double[] { 1 };
        double[] doubleArray38 = new double[] { 1 };
        double[] doubleArray40 = new double[] { 1 };
        double[] doubleArray42 = new double[] { 1 };
        double[][] doubleArray43 = new double[][] { doubleArray34, doubleArray36, doubleArray38, doubleArray40, doubleArray42 };
        int[] intArray44 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray43, intArray44);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray32, intArray44);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray0, intArray44);
        double[] doubleArray49 = new double[] { 1 };
        double[] doubleArray51 = new double[] { 1 };
        double[] doubleArray53 = new double[] { 1 };
        double[] doubleArray55 = new double[] { 1 };
        double[] doubleArray57 = new double[] { 1 };
        double[][] doubleArray58 = new double[][] { doubleArray49, doubleArray51, doubleArray53, doubleArray55, doubleArray57 };
        int[] intArray59 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray58, intArray59);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray0, intArray59);
        double[][] doubleArray62 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray63 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray64 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray65 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray64);
        double[][] doubleArray66 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray65);
        double[][] doubleArray67 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray66);
        java.lang.Class<?> wildcardClass68 = doubleArray67.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[]");
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertNotNull(wildcardClass68);
    }

    @Test
    public void test2151() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2151");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[] doubleArray11 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray18 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray25 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray32 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray33 = new double[][] { doubleArray11, doubleArray18, doubleArray25, doubleArray32 };
        double[][] doubleArray34 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray33);
        double[][] doubleArray35 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray34);
        double[][] doubleArray36 = new double[][] {};
        double[][] doubleArray37 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray36);
        double[] doubleArray39 = new double[] { 1 };
        double[] doubleArray41 = new double[] { 1 };
        double[] doubleArray43 = new double[] { 1 };
        double[] doubleArray45 = new double[] { 1 };
        double[] doubleArray47 = new double[] { 1 };
        double[][] doubleArray48 = new double[][] { doubleArray39, doubleArray41, doubleArray43, doubleArray45, doubleArray47 };
        int[] intArray49 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray48, intArray49);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray36, intArray49);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray35, intArray49);
        double[][] doubleArray53 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray35);
        double[] doubleArray55 = new double[] { 1 };
        double[] doubleArray57 = new double[] { 1 };
        double[] doubleArray59 = new double[] { 1 };
        double[] doubleArray61 = new double[] { 1 };
        double[] doubleArray63 = new double[] { 1 };
        double[][] doubleArray64 = new double[][] { doubleArray55, doubleArray57, doubleArray59, doubleArray61, doubleArray63 };
        int[] intArray65 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray64, intArray65);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray53, intArray65);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray3, intArray65);
        double[][] doubleArray69 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[][] doubleArray70 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray69);
        double[][] doubleArray71 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray69);
        java.lang.Class<?> wildcardClass72 = doubleArray69.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[]");
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[]");
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertNotNull(wildcardClass72);
    }

    @Test
    public void test2152() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2152");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[] doubleArray6 = new double[] { 1 };
        double[] doubleArray8 = new double[] { 1 };
        double[] doubleArray10 = new double[] { 1 };
        double[] doubleArray12 = new double[] { 1 };
        double[] doubleArray14 = new double[] { 1 };
        double[][] doubleArray15 = new double[][] { doubleArray6, doubleArray8, doubleArray10, doubleArray12, doubleArray14 };
        int[] intArray16 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray15, intArray16);
        double[][] doubleArray18 = new double[][] {};
        double[][] doubleArray19 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray18);
        int[] intArray20 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray19, intArray20);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray15, intArray20);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray3, intArray20);
        double[][] doubleArray24 = new double[][] {};
        double[][] doubleArray25 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray24);
        double[][] doubleArray26 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray25);
        double[] doubleArray30 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray34 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray38 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray42 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray43 = new double[][] { doubleArray30, doubleArray34, doubleArray38, doubleArray42 };
        double[] doubleArray45 = new double[] { 1 };
        double[] doubleArray47 = new double[] { 1 };
        double[] doubleArray49 = new double[] { 1 };
        double[] doubleArray51 = new double[] { 1 };
        double[] doubleArray53 = new double[] { 1 };
        double[][] doubleArray54 = new double[][] { doubleArray45, doubleArray47, doubleArray49, doubleArray51, doubleArray53 };
        int[] intArray55 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray54, intArray55);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray43, intArray55);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray25, intArray55);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray3, intArray55);
        double[][] doubleArray60 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[][] doubleArray61 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray60);
        double[][] doubleArray62 = new double[][] {};
        double[][] doubleArray63 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray62);
        double[][] doubleArray64 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray62);
        double[][] doubleArray65 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray62);
        double[][] doubleArray66 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray65);
        double[][] doubleArray67 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray65);
        double[][] doubleArray68 = new double[][] {};
        double[][] doubleArray69 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray68);
        int[] intArray70 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray69, intArray70);
        double[] doubleArray73 = new double[] { 1 };
        double[] doubleArray75 = new double[] { 1 };
        double[] doubleArray77 = new double[] { 1 };
        double[] doubleArray79 = new double[] { 1 };
        double[] doubleArray81 = new double[] { 1 };
        double[][] doubleArray82 = new double[][] { doubleArray73, doubleArray75, doubleArray77, doubleArray79, doubleArray81 };
        int[] intArray83 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray82, intArray83);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray69, intArray83);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray67, intArray83);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray60, intArray83);
        double[][] doubleArray88 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray60);
        double[][] doubleArray89 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray60);
        double[][] doubleArray90 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray89);
        int[] intArray91 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray90, intArray91);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[]");
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[]");
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[]");
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray73), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray75), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray77), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray79), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray81), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray82);
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray83), "[]");
        org.junit.Assert.assertNotNull(doubleArray88);
        org.junit.Assert.assertNotNull(doubleArray89);
        org.junit.Assert.assertNotNull(doubleArray90);
    }

    @Test
    public void test2153() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2153");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[] doubleArray31 = new double[] { 1 };
        double[] doubleArray33 = new double[] { 1 };
        double[] doubleArray35 = new double[] { 1 };
        double[] doubleArray37 = new double[] { 1 };
        double[] doubleArray39 = new double[] { 1 };
        double[][] doubleArray40 = new double[][] { doubleArray31, doubleArray33, doubleArray35, doubleArray37, doubleArray39 };
        int[] intArray41 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray40, intArray41);
        double[][] doubleArray43 = new double[][] {};
        double[][] doubleArray44 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray43);
        int[] intArray45 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray44, intArray45);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray40, intArray45);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray28, intArray45);
        double[][] doubleArray49 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray50 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray49);
        double[][] doubleArray51 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray50);
        double[][] doubleArray52 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray50);
        double[][] doubleArray53 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray50);
        double[][] doubleArray54 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray53);
        double[][] doubleArray55 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray54);
        double[][] doubleArray56 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray55);
        double[][] doubleArray57 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray56);
        double[][] doubleArray58 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray56);
        java.lang.Class<?> wildcardClass59 = doubleArray58.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertNotNull(wildcardClass59);
    }

    @Test
    public void test2154() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2154");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray5 = new double[][] {};
        double[][] doubleArray6 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray5);
        double[][] doubleArray7 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray5);
        double[][] doubleArray8 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray5);
        double[][] doubleArray9 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray8);
        double[][] doubleArray10 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray8);
        double[][] doubleArray11 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray8);
        double[][] doubleArray12 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray8);
        double[][] doubleArray13 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray12);
        double[][] doubleArray14 = new double[][] {};
        double[][] doubleArray15 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray14);
        double[][] doubleArray16 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray15);
        double[][] doubleArray17 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray16);
        double[][] doubleArray18 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray17);
        double[][] doubleArray19 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray17);
        double[] doubleArray21 = new double[] { 1 };
        double[] doubleArray23 = new double[] { 1 };
        double[] doubleArray25 = new double[] { 1 };
        double[] doubleArray27 = new double[] { 1 };
        double[] doubleArray29 = new double[] { 1 };
        double[][] doubleArray30 = new double[][] { doubleArray21, doubleArray23, doubleArray25, doubleArray27, doubleArray29 };
        int[] intArray31 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray30, intArray31);
        double[] doubleArray39 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray46 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray53 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray60 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray61 = new double[][] { doubleArray39, doubleArray46, doubleArray53, doubleArray60 };
        double[][] doubleArray62 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray61);
        double[] doubleArray64 = new double[] { 1 };
        double[] doubleArray66 = new double[] { 1 };
        double[] doubleArray68 = new double[] { 1 };
        double[] doubleArray70 = new double[] { 1 };
        double[] doubleArray72 = new double[] { 1 };
        double[][] doubleArray73 = new double[][] { doubleArray64, doubleArray66, doubleArray68, doubleArray70, doubleArray72 };
        int[] intArray74 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray73, intArray74);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray62, intArray74);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray30, intArray74);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray19, intArray74);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray13, intArray74);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray0, intArray74);
        java.lang.Class<?> wildcardClass81 = doubleArray0.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray66), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray70), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[]");
        org.junit.Assert.assertNotNull(wildcardClass81);
    }

    @Test
    public void test2155() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2155");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[] doubleArray31 = new double[] { 1 };
        double[] doubleArray33 = new double[] { 1 };
        double[] doubleArray35 = new double[] { 1 };
        double[] doubleArray37 = new double[] { 1 };
        double[] doubleArray39 = new double[] { 1 };
        double[][] doubleArray40 = new double[][] { doubleArray31, doubleArray33, doubleArray35, doubleArray37, doubleArray39 };
        int[] intArray41 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray40, intArray41);
        double[][] doubleArray43 = new double[][] {};
        double[][] doubleArray44 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray43);
        int[] intArray45 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray44, intArray45);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray40, intArray45);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray28, intArray45);
        double[][] doubleArray49 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray50 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray49);
        double[][] doubleArray51 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray50);
        double[][] doubleArray52 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray51);
        double[][] doubleArray53 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray52);
        double[][] doubleArray54 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray52);
        double[][] doubleArray55 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray54);
        double[][] doubleArray56 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray55);
        double[][] doubleArray57 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray56);
        double[][] doubleArray58 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray57);
        double[][] doubleArray59 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray57);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertNotNull(doubleArray59);
    }

    @Test
    public void test2156() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2156");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray3 = new double[][] {};
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[][] doubleArray5 = new double[][] {};
        double[][] doubleArray6 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray5);
        double[] doubleArray8 = new double[] { 1 };
        double[] doubleArray10 = new double[] { 1 };
        double[] doubleArray12 = new double[] { 1 };
        double[] doubleArray14 = new double[] { 1 };
        double[] doubleArray16 = new double[] { 1 };
        double[][] doubleArray17 = new double[][] { doubleArray8, doubleArray10, doubleArray12, doubleArray14, doubleArray16 };
        int[] intArray18 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray17, intArray18);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray5, intArray18);
        double[] doubleArray24 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray28 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray32 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray36 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray37 = new double[][] { doubleArray24, doubleArray28, doubleArray32, doubleArray36 };
        double[] doubleArray39 = new double[] { 1 };
        double[] doubleArray41 = new double[] { 1 };
        double[] doubleArray43 = new double[] { 1 };
        double[] doubleArray45 = new double[] { 1 };
        double[] doubleArray47 = new double[] { 1 };
        double[][] doubleArray48 = new double[][] { doubleArray39, doubleArray41, doubleArray43, doubleArray45, doubleArray47 };
        int[] intArray49 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray48, intArray49);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray37, intArray49);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray5, intArray49);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray4, intArray49);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray2, intArray49);
        double[][] doubleArray55 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray56 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray55);
        double[][] doubleArray57 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray55);
        double[][] doubleArray58 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray55);
        double[][] doubleArray59 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray58);
        double[][] doubleArray60 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray58);
        java.lang.Class<?> wildcardClass61 = doubleArray58.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[]");
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[]");
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertNotNull(wildcardClass61);
    }

    @Test
    public void test2157() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2157");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[] doubleArray3 = new double[] { 1 };
        double[] doubleArray5 = new double[] { 1 };
        double[] doubleArray7 = new double[] { 1 };
        double[] doubleArray9 = new double[] { 1 };
        double[] doubleArray11 = new double[] { 1 };
        double[][] doubleArray12 = new double[][] { doubleArray3, doubleArray5, doubleArray7, doubleArray9, doubleArray11 };
        int[] intArray13 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray12, intArray13);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray0, intArray13);
        double[] doubleArray19 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray23 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray27 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray31 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray32 = new double[][] { doubleArray19, doubleArray23, doubleArray27, doubleArray31 };
        double[] doubleArray34 = new double[] { 1 };
        double[] doubleArray36 = new double[] { 1 };
        double[] doubleArray38 = new double[] { 1 };
        double[] doubleArray40 = new double[] { 1 };
        double[] doubleArray42 = new double[] { 1 };
        double[][] doubleArray43 = new double[][] { doubleArray34, doubleArray36, doubleArray38, doubleArray40, doubleArray42 };
        int[] intArray44 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray43, intArray44);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray32, intArray44);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray0, intArray44);
        double[] doubleArray49 = new double[] { 1 };
        double[] doubleArray51 = new double[] { 1 };
        double[] doubleArray53 = new double[] { 1 };
        double[] doubleArray55 = new double[] { 1 };
        double[] doubleArray57 = new double[] { 1 };
        double[][] doubleArray58 = new double[][] { doubleArray49, doubleArray51, doubleArray53, doubleArray55, doubleArray57 };
        int[] intArray59 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray58, intArray59);
        double[][] doubleArray61 = new double[][] {};
        double[][] doubleArray62 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray61);
        int[] intArray63 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray62, intArray63);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray58, intArray63);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray0, intArray63);
        double[][] doubleArray67 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray68 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray67);
        double[][] doubleArray69 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray68);
        double[][] doubleArray70 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray68);
        double[][] doubleArray71 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray70);
        double[][] doubleArray72 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray71);
        java.lang.Class<?> wildcardClass73 = doubleArray71.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[]");
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertNotNull(wildcardClass73);
    }

    @Test
    public void test2158() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2158");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[] doubleArray3 = new double[] { 1 };
        double[] doubleArray5 = new double[] { 1 };
        double[] doubleArray7 = new double[] { 1 };
        double[] doubleArray9 = new double[] { 1 };
        double[] doubleArray11 = new double[] { 1 };
        double[][] doubleArray12 = new double[][] { doubleArray3, doubleArray5, doubleArray7, doubleArray9, doubleArray11 };
        int[] intArray13 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray12, intArray13);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray0, intArray13);
        double[] doubleArray19 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray23 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray27 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray31 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray32 = new double[][] { doubleArray19, doubleArray23, doubleArray27, doubleArray31 };
        double[] doubleArray34 = new double[] { 1 };
        double[] doubleArray36 = new double[] { 1 };
        double[] doubleArray38 = new double[] { 1 };
        double[] doubleArray40 = new double[] { 1 };
        double[] doubleArray42 = new double[] { 1 };
        double[][] doubleArray43 = new double[][] { doubleArray34, doubleArray36, doubleArray38, doubleArray40, doubleArray42 };
        int[] intArray44 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray43, intArray44);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray32, intArray44);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray0, intArray44);
        double[][] doubleArray48 = null;
        double[][] doubleArray49 = new double[][] {};
        double[][] doubleArray50 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray49);
        double[][] doubleArray51 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray49);
        double[][] doubleArray52 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray51);
        double[][] doubleArray53 = null;
        double[][] doubleArray54 = new double[][] {};
        double[][] doubleArray55 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray54);
        double[][] doubleArray56 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray55);
        double[] doubleArray60 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray64 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray68 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray72 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray73 = new double[][] { doubleArray60, doubleArray64, doubleArray68, doubleArray72 };
        double[] doubleArray75 = new double[] { 1 };
        double[] doubleArray77 = new double[] { 1 };
        double[] doubleArray79 = new double[] { 1 };
        double[] doubleArray81 = new double[] { 1 };
        double[] doubleArray83 = new double[] { 1 };
        double[][] doubleArray84 = new double[][] { doubleArray75, doubleArray77, doubleArray79, doubleArray81, doubleArray83 };
        int[] intArray85 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray84, intArray85);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray73, intArray85);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray56, intArray85);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray53, intArray85);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray52, intArray85);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray48, intArray85);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray0, intArray85);
        java.lang.Class<?> wildcardClass93 = doubleArray0.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray75), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray77), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray79), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray81), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray83), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray84);
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray85), "[]");
        org.junit.Assert.assertNotNull(wildcardClass93);
    }

    @Test
    public void test2159() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2159");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = new double[][] {};
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[] doubleArray5 = new double[] { 1 };
        double[] doubleArray7 = new double[] { 1 };
        double[] doubleArray9 = new double[] { 1 };
        double[] doubleArray11 = new double[] { 1 };
        double[] doubleArray13 = new double[] { 1 };
        double[][] doubleArray14 = new double[][] { doubleArray5, doubleArray7, doubleArray9, doubleArray11, doubleArray13 };
        int[] intArray15 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray14, intArray15);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray2, intArray15);
        double[] doubleArray21 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray25 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray29 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray33 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray34 = new double[][] { doubleArray21, doubleArray25, doubleArray29, doubleArray33 };
        double[] doubleArray36 = new double[] { 1 };
        double[] doubleArray38 = new double[] { 1 };
        double[] doubleArray40 = new double[] { 1 };
        double[] doubleArray42 = new double[] { 1 };
        double[] doubleArray44 = new double[] { 1 };
        double[][] doubleArray45 = new double[][] { doubleArray36, doubleArray38, doubleArray40, doubleArray42, doubleArray44 };
        int[] intArray46 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray45, intArray46);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray34, intArray46);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray2, intArray46);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray1, intArray46);
        double[] doubleArray52 = new double[] { 1 };
        double[] doubleArray54 = new double[] { 1 };
        double[] doubleArray56 = new double[] { 1 };
        double[] doubleArray58 = new double[] { 1 };
        double[] doubleArray60 = new double[] { 1 };
        double[][] doubleArray61 = new double[][] { doubleArray52, doubleArray54, doubleArray56, doubleArray58, doubleArray60 };
        int[] intArray62 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray61, intArray62);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray1, intArray62);
        double[][] doubleArray65 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray66 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray67 = new double[][] {};
        double[][] doubleArray68 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray67);
        double[][] doubleArray69 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray67);
        double[][] doubleArray70 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray67);
        double[][] doubleArray71 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray70);
        double[] doubleArray73 = new double[] { 1 };
        double[] doubleArray75 = new double[] { 1 };
        double[] doubleArray77 = new double[] { 1 };
        double[] doubleArray79 = new double[] { 1 };
        double[] doubleArray81 = new double[] { 1 };
        double[][] doubleArray82 = new double[][] { doubleArray73, doubleArray75, doubleArray77, doubleArray79, doubleArray81 };
        int[] intArray83 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray82, intArray83);
        double[][] doubleArray85 = new double[][] {};
        double[][] doubleArray86 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray85);
        int[] intArray87 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray86, intArray87);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray82, intArray87);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray70, intArray87);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray1, intArray87);
        java.lang.Class<?> wildcardClass92 = intArray87.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[]");
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[]");
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray73), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray75), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray77), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray79), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray81), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray82);
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray83), "[]");
        org.junit.Assert.assertNotNull(doubleArray85);
        org.junit.Assert.assertNotNull(doubleArray86);
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray87), "[]");
        org.junit.Assert.assertNotNull(wildcardClass92);
    }

    @Test
    public void test2160() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2160");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray30 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray31 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        double[][] doubleArray32 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray31);
        double[][] doubleArray33 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray32);
        double[][] doubleArray34 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray32);
        java.lang.Class<?> wildcardClass35 = doubleArray32.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertNotNull(wildcardClass35);
    }

    @Test
    public void test2161() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2161");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[][] doubleArray5 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[][] doubleArray6 = new double[][] {};
        double[][] doubleArray7 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray6);
        double[][] doubleArray8 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray7);
        double[] doubleArray15 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray22 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray29 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray36 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray37 = new double[][] { doubleArray15, doubleArray22, doubleArray29, doubleArray36 };
        double[][] doubleArray38 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray37);
        double[] doubleArray40 = new double[] { 1 };
        double[] doubleArray42 = new double[] { 1 };
        double[] doubleArray44 = new double[] { 1 };
        double[] doubleArray46 = new double[] { 1 };
        double[] doubleArray48 = new double[] { 1 };
        double[][] doubleArray49 = new double[][] { doubleArray40, doubleArray42, doubleArray44, doubleArray46, doubleArray48 };
        int[] intArray50 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray49, intArray50);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray38, intArray50);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray7, intArray50);
        double[] doubleArray57 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray61 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray65 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray69 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray70 = new double[][] { doubleArray57, doubleArray61, doubleArray65, doubleArray69 };
        double[] doubleArray72 = new double[] { 1 };
        double[] doubleArray74 = new double[] { 1 };
        double[] doubleArray76 = new double[] { 1 };
        double[] doubleArray78 = new double[] { 1 };
        double[] doubleArray80 = new double[] { 1 };
        double[][] doubleArray81 = new double[][] { doubleArray72, doubleArray74, doubleArray76, doubleArray78, doubleArray80 };
        int[] intArray82 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray81, intArray82);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray70, intArray82);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray7, intArray82);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray3, intArray82);
        double[][] doubleArray87 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[][] doubleArray88 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[][] doubleArray89 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray88);
        double[][] doubleArray90 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray88);
        double[][] doubleArray91 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray90);
        double[][] doubleArray92 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray90);
        double[][] doubleArray93 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray92);
        java.lang.Class<?> wildcardClass94 = doubleArray92.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[]");
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray74), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray78), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray80), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray81);
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[]");
        org.junit.Assert.assertNotNull(doubleArray87);
        org.junit.Assert.assertNotNull(doubleArray88);
        org.junit.Assert.assertNotNull(doubleArray89);
        org.junit.Assert.assertNotNull(doubleArray90);
        org.junit.Assert.assertNotNull(doubleArray91);
        org.junit.Assert.assertNotNull(doubleArray92);
        org.junit.Assert.assertNotNull(doubleArray93);
        org.junit.Assert.assertNotNull(wildcardClass94);
    }

    @Test
    public void test2162() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2162");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[][] doubleArray5 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[] doubleArray7 = new double[] { 1 };
        double[] doubleArray9 = new double[] { 1 };
        double[] doubleArray11 = new double[] { 1 };
        double[] doubleArray13 = new double[] { 1 };
        double[] doubleArray15 = new double[] { 1 };
        double[][] doubleArray16 = new double[][] { doubleArray7, doubleArray9, doubleArray11, doubleArray13, doubleArray15 };
        int[] intArray17 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray16, intArray17);
        double[] doubleArray25 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray32 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray39 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray46 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray47 = new double[][] { doubleArray25, doubleArray32, doubleArray39, doubleArray46 };
        double[][] doubleArray48 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray47);
        double[] doubleArray50 = new double[] { 1 };
        double[] doubleArray52 = new double[] { 1 };
        double[] doubleArray54 = new double[] { 1 };
        double[] doubleArray56 = new double[] { 1 };
        double[] doubleArray58 = new double[] { 1 };
        double[][] doubleArray59 = new double[][] { doubleArray50, doubleArray52, doubleArray54, doubleArray56, doubleArray58 };
        int[] intArray60 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray59, intArray60);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray48, intArray60);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray16, intArray60);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray3, intArray60);
        double[][] doubleArray65 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        java.lang.Class<?> wildcardClass66 = doubleArray3.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[]");
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertNotNull(wildcardClass66);
    }

    @Test
    public void test2163() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2163");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = new double[][] {};
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[] doubleArray5 = new double[] { 1 };
        double[] doubleArray7 = new double[] { 1 };
        double[] doubleArray9 = new double[] { 1 };
        double[] doubleArray11 = new double[] { 1 };
        double[] doubleArray13 = new double[] { 1 };
        double[][] doubleArray14 = new double[][] { doubleArray5, doubleArray7, doubleArray9, doubleArray11, doubleArray13 };
        int[] intArray15 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray14, intArray15);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray2, intArray15);
        double[] doubleArray21 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray25 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray29 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray33 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray34 = new double[][] { doubleArray21, doubleArray25, doubleArray29, doubleArray33 };
        double[] doubleArray36 = new double[] { 1 };
        double[] doubleArray38 = new double[] { 1 };
        double[] doubleArray40 = new double[] { 1 };
        double[] doubleArray42 = new double[] { 1 };
        double[] doubleArray44 = new double[] { 1 };
        double[][] doubleArray45 = new double[][] { doubleArray36, doubleArray38, doubleArray40, doubleArray42, doubleArray44 };
        int[] intArray46 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray45, intArray46);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray34, intArray46);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray2, intArray46);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray1, intArray46);
        double[][] doubleArray51 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray52 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray51);
        double[][] doubleArray53 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray51);
        double[][] doubleArray54 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray53);
        java.lang.Class<?> wildcardClass55 = doubleArray54.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertNotNull(wildcardClass55);
    }

    @Test
    public void test2164() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2164");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[] doubleArray31 = new double[] { 1 };
        double[] doubleArray33 = new double[] { 1 };
        double[] doubleArray35 = new double[] { 1 };
        double[] doubleArray37 = new double[] { 1 };
        double[] doubleArray39 = new double[] { 1 };
        double[][] doubleArray40 = new double[][] { doubleArray31, doubleArray33, doubleArray35, doubleArray37, doubleArray39 };
        int[] intArray41 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray40, intArray41);
        double[][] doubleArray43 = new double[][] {};
        double[][] doubleArray44 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray43);
        int[] intArray45 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray44, intArray45);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray40, intArray45);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray28, intArray45);
        double[][] doubleArray49 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray50 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray51 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray52 = new double[][] {};
        double[][] doubleArray53 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray52);
        double[][] doubleArray54 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray52);
        double[][] doubleArray55 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray52);
        double[] doubleArray62 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray69 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray76 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray83 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray84 = new double[][] { doubleArray62, doubleArray69, doubleArray76, doubleArray83 };
        double[][] doubleArray85 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray84);
        double[][] doubleArray86 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray84);
        double[][] doubleArray87 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray84);
        double[][] doubleArray88 = new double[][] {};
        double[][] doubleArray89 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray88);
        int[] intArray90 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray89, intArray90);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray87, intArray90);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray55, intArray90);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray28, intArray90);
        double[][] doubleArray95 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray96 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        java.lang.Class<?> wildcardClass97 = doubleArray28.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray83), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray84);
        org.junit.Assert.assertNotNull(doubleArray85);
        org.junit.Assert.assertNotNull(doubleArray86);
        org.junit.Assert.assertNotNull(doubleArray87);
        org.junit.Assert.assertNotNull(doubleArray88);
        org.junit.Assert.assertNotNull(doubleArray89);
        org.junit.Assert.assertNotNull(intArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray90), "[]");
        org.junit.Assert.assertNotNull(doubleArray95);
        org.junit.Assert.assertNotNull(doubleArray96);
        org.junit.Assert.assertNotNull(wildcardClass97);
    }

    @Test
    public void test2165() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2165");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[] doubleArray3 = new double[] { 1 };
        double[] doubleArray5 = new double[] { 1 };
        double[] doubleArray7 = new double[] { 1 };
        double[] doubleArray9 = new double[] { 1 };
        double[] doubleArray11 = new double[] { 1 };
        double[][] doubleArray12 = new double[][] { doubleArray3, doubleArray5, doubleArray7, doubleArray9, doubleArray11 };
        int[] intArray13 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray12, intArray13);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray0, intArray13);
        double[] doubleArray19 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray23 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray27 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray31 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray32 = new double[][] { doubleArray19, doubleArray23, doubleArray27, doubleArray31 };
        double[] doubleArray34 = new double[] { 1 };
        double[] doubleArray36 = new double[] { 1 };
        double[] doubleArray38 = new double[] { 1 };
        double[] doubleArray40 = new double[] { 1 };
        double[] doubleArray42 = new double[] { 1 };
        double[][] doubleArray43 = new double[][] { doubleArray34, doubleArray36, doubleArray38, doubleArray40, doubleArray42 };
        int[] intArray44 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray43, intArray44);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray32, intArray44);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray0, intArray44);
        double[] doubleArray49 = new double[] { 1 };
        double[] doubleArray51 = new double[] { 1 };
        double[] doubleArray53 = new double[] { 1 };
        double[] doubleArray55 = new double[] { 1 };
        double[] doubleArray57 = new double[] { 1 };
        double[][] doubleArray58 = new double[][] { doubleArray49, doubleArray51, doubleArray53, doubleArray55, doubleArray57 };
        int[] intArray59 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray58, intArray59);
        double[][] doubleArray61 = new double[][] {};
        double[][] doubleArray62 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray61);
        int[] intArray63 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray62, intArray63);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray58, intArray63);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray0, intArray63);
        double[][] doubleArray67 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray68 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray67);
        double[][] doubleArray69 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray68);
        double[][] doubleArray70 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray68);
        double[][] doubleArray71 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray70);
        double[][] doubleArray72 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray71);
        double[][] doubleArray73 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray71);
        java.lang.Class<?> wildcardClass74 = doubleArray73.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[]");
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertNotNull(wildcardClass74);
    }

    @Test
    public void test2166() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2166");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[] doubleArray3 = new double[] { 1 };
        double[] doubleArray5 = new double[] { 1 };
        double[] doubleArray7 = new double[] { 1 };
        double[] doubleArray9 = new double[] { 1 };
        double[] doubleArray11 = new double[] { 1 };
        double[][] doubleArray12 = new double[][] { doubleArray3, doubleArray5, doubleArray7, doubleArray9, doubleArray11 };
        int[] intArray13 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray12, intArray13);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray0, intArray13);
        double[] doubleArray19 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray23 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray27 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray31 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray32 = new double[][] { doubleArray19, doubleArray23, doubleArray27, doubleArray31 };
        double[] doubleArray34 = new double[] { 1 };
        double[] doubleArray36 = new double[] { 1 };
        double[] doubleArray38 = new double[] { 1 };
        double[] doubleArray40 = new double[] { 1 };
        double[] doubleArray42 = new double[] { 1 };
        double[][] doubleArray43 = new double[][] { doubleArray34, doubleArray36, doubleArray38, doubleArray40, doubleArray42 };
        int[] intArray44 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray43, intArray44);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray32, intArray44);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray0, intArray44);
        double[] doubleArray49 = new double[] { 1 };
        double[] doubleArray51 = new double[] { 1 };
        double[] doubleArray53 = new double[] { 1 };
        double[] doubleArray55 = new double[] { 1 };
        double[] doubleArray57 = new double[] { 1 };
        double[][] doubleArray58 = new double[][] { doubleArray49, doubleArray51, doubleArray53, doubleArray55, doubleArray57 };
        int[] intArray59 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray58, intArray59);
        double[][] doubleArray61 = new double[][] {};
        double[][] doubleArray62 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray61);
        int[] intArray63 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray62, intArray63);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray58, intArray63);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray0, intArray63);
        double[][] doubleArray67 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray68 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray67);
        double[][] doubleArray69 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray67);
        double[][] doubleArray70 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray67);
        double[][] doubleArray71 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray70);
        double[][] doubleArray72 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray71);
        double[][] doubleArray73 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray71);
        int[] intArray74 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray73, intArray74);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[]");
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertNotNull(doubleArray73);
    }

    @Test
    public void test2167() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2167");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray4 = new double[][] {};
        double[][] doubleArray5 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray4);
        double[] doubleArray7 = new double[] { 1 };
        double[] doubleArray9 = new double[] { 1 };
        double[] doubleArray11 = new double[] { 1 };
        double[] doubleArray13 = new double[] { 1 };
        double[] doubleArray15 = new double[] { 1 };
        double[][] doubleArray16 = new double[][] { doubleArray7, doubleArray9, doubleArray11, doubleArray13, doubleArray15 };
        int[] intArray17 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray16, intArray17);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray4, intArray17);
        double[] doubleArray23 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray27 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray31 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray35 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray36 = new double[][] { doubleArray23, doubleArray27, doubleArray31, doubleArray35 };
        double[] doubleArray38 = new double[] { 1 };
        double[] doubleArray40 = new double[] { 1 };
        double[] doubleArray42 = new double[] { 1 };
        double[] doubleArray44 = new double[] { 1 };
        double[] doubleArray46 = new double[] { 1 };
        double[][] doubleArray47 = new double[][] { doubleArray38, doubleArray40, doubleArray42, doubleArray44, doubleArray46 };
        int[] intArray48 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray47, intArray48);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray36, intArray48);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray4, intArray48);
        double[] doubleArray53 = new double[] { 1 };
        double[] doubleArray55 = new double[] { 1 };
        double[] doubleArray57 = new double[] { 1 };
        double[] doubleArray59 = new double[] { 1 };
        double[] doubleArray61 = new double[] { 1 };
        double[][] doubleArray62 = new double[][] { doubleArray53, doubleArray55, doubleArray57, doubleArray59, doubleArray61 };
        int[] intArray63 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray62, intArray63);
        double[][] doubleArray65 = new double[][] {};
        double[][] doubleArray66 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray65);
        int[] intArray67 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray66, intArray67);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray62, intArray67);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray4, intArray67);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray3, intArray67);
        double[][] doubleArray72 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        int[] intArray73 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray3, intArray73);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[]");
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[]");
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[]");
        org.junit.Assert.assertNotNull(doubleArray72);
    }

    @Test
    public void test2168() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2168");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray30 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray31 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray32 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray31);
        double[][] doubleArray33 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray32);
        double[][] doubleArray34 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray33);
        double[][] doubleArray35 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray33);
        java.lang.Class<?> wildcardClass36 = doubleArray35.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertNotNull(wildcardClass36);
    }

    @Test
    public void test2169() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2169");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[] doubleArray6 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray10 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray14 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray18 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray19 = new double[][] { doubleArray6, doubleArray10, doubleArray14, doubleArray18 };
        double[] doubleArray21 = new double[] { 1 };
        double[] doubleArray23 = new double[] { 1 };
        double[] doubleArray25 = new double[] { 1 };
        double[] doubleArray27 = new double[] { 1 };
        double[] doubleArray29 = new double[] { 1 };
        double[][] doubleArray30 = new double[][] { doubleArray21, doubleArray23, doubleArray25, doubleArray27, doubleArray29 };
        int[] intArray31 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray30, intArray31);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray19, intArray31);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray2, intArray31);
        double[][] doubleArray35 = null;
        double[] doubleArray37 = new double[] { 1 };
        double[] doubleArray39 = new double[] { 1 };
        double[] doubleArray41 = new double[] { 1 };
        double[] doubleArray43 = new double[] { 1 };
        double[] doubleArray45 = new double[] { 1 };
        double[][] doubleArray46 = new double[][] { doubleArray37, doubleArray39, doubleArray41, doubleArray43, doubleArray45 };
        int[] intArray47 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray46, intArray47);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray35, intArray47);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray2, intArray47);
        double[][] doubleArray51 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray52 = new double[][] {};
        double[][] doubleArray53 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray52);
        double[][] doubleArray54 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray52);
        double[][] doubleArray55 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray54);
        double[][] doubleArray56 = null;
        double[][] doubleArray57 = new double[][] {};
        double[][] doubleArray58 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray57);
        double[][] doubleArray59 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray58);
        double[] doubleArray63 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray67 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray71 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray75 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray76 = new double[][] { doubleArray63, doubleArray67, doubleArray71, doubleArray75 };
        double[] doubleArray78 = new double[] { 1 };
        double[] doubleArray80 = new double[] { 1 };
        double[] doubleArray82 = new double[] { 1 };
        double[] doubleArray84 = new double[] { 1 };
        double[] doubleArray86 = new double[] { 1 };
        double[][] doubleArray87 = new double[][] { doubleArray78, doubleArray80, doubleArray82, doubleArray84, doubleArray86 };
        int[] intArray88 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray87, intArray88);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray76, intArray88);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray59, intArray88);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray56, intArray88);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray55, intArray88);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray51, intArray88);
        double[][] doubleArray95 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray51);
        double[][] doubleArray96 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray51);
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray71), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray75), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray78), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray80), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray82), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray84), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray86), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray87);
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray88), "[]");
        org.junit.Assert.assertNotNull(doubleArray95);
        org.junit.Assert.assertNotNull(doubleArray96);
    }

    @Test
    public void test2170() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2170");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[] doubleArray3 = new double[] { 1 };
        double[] doubleArray5 = new double[] { 1 };
        double[] doubleArray7 = new double[] { 1 };
        double[] doubleArray9 = new double[] { 1 };
        double[] doubleArray11 = new double[] { 1 };
        double[][] doubleArray12 = new double[][] { doubleArray3, doubleArray5, doubleArray7, doubleArray9, doubleArray11 };
        int[] intArray13 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray12, intArray13);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray0, intArray13);
        double[][] doubleArray16 = new double[][] {};
        double[][] doubleArray17 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray16);
        double[][] doubleArray18 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray16);
        double[][] doubleArray19 = new double[][] {};
        double[][] doubleArray20 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray19);
        double[][] doubleArray21 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray20);
        double[][] doubleArray22 = new double[][] {};
        double[][] doubleArray23 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray22);
        double[][] doubleArray24 = new double[][] {};
        double[][] doubleArray25 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray24);
        double[] doubleArray27 = new double[] { 1 };
        double[] doubleArray29 = new double[] { 1 };
        double[] doubleArray31 = new double[] { 1 };
        double[] doubleArray33 = new double[] { 1 };
        double[] doubleArray35 = new double[] { 1 };
        double[][] doubleArray36 = new double[][] { doubleArray27, doubleArray29, doubleArray31, doubleArray33, doubleArray35 };
        int[] intArray37 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray36, intArray37);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray24, intArray37);
        double[] doubleArray43 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray47 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray51 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray55 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray56 = new double[][] { doubleArray43, doubleArray47, doubleArray51, doubleArray55 };
        double[] doubleArray58 = new double[] { 1 };
        double[] doubleArray60 = new double[] { 1 };
        double[] doubleArray62 = new double[] { 1 };
        double[] doubleArray64 = new double[] { 1 };
        double[] doubleArray66 = new double[] { 1 };
        double[][] doubleArray67 = new double[][] { doubleArray58, doubleArray60, doubleArray62, doubleArray64, doubleArray66 };
        int[] intArray68 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray67, intArray68);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray56, intArray68);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray24, intArray68);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray23, intArray68);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray21, intArray68);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray16, intArray68);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray0, intArray68);
        double[][] doubleArray76 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray66), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[]");
        org.junit.Assert.assertNotNull(doubleArray76);
    }

    @Test
    public void test2171() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2171");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = new double[][] {};
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[] doubleArray8 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray12 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray16 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray20 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray21 = new double[][] { doubleArray8, doubleArray12, doubleArray16, doubleArray20 };
        double[] doubleArray23 = new double[] { 1 };
        double[] doubleArray25 = new double[] { 1 };
        double[] doubleArray27 = new double[] { 1 };
        double[] doubleArray29 = new double[] { 1 };
        double[] doubleArray31 = new double[] { 1 };
        double[][] doubleArray32 = new double[][] { doubleArray23, doubleArray25, doubleArray27, doubleArray29, doubleArray31 };
        int[] intArray33 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray32, intArray33);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray21, intArray33);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray3, intArray33);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray1, intArray33);
        double[][] doubleArray38 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray39 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray38);
        double[][] doubleArray40 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray38);
        double[][] doubleArray41 = new double[][] {};
        double[][] doubleArray42 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray41);
        double[][] doubleArray43 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray41);
        double[][] doubleArray44 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray41);
        double[] doubleArray51 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray58 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray65 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray72 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray73 = new double[][] { doubleArray51, doubleArray58, doubleArray65, doubleArray72 };
        double[][] doubleArray74 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray73);
        double[][] doubleArray75 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray73);
        double[][] doubleArray76 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray73);
        double[][] doubleArray77 = new double[][] {};
        double[][] doubleArray78 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray77);
        int[] intArray79 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray78, intArray79);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray76, intArray79);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray44, intArray79);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray38, intArray79);
        double[][] doubleArray84 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray38);
        double[][] doubleArray85 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray38);
        double[][] doubleArray86 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray38);
        double[][] doubleArray87 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray86);
        java.lang.Class<?> wildcardClass88 = doubleArray87.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray79), "[]");
        org.junit.Assert.assertNotNull(doubleArray84);
        org.junit.Assert.assertNotNull(doubleArray85);
        org.junit.Assert.assertNotNull(doubleArray86);
        org.junit.Assert.assertNotNull(doubleArray87);
        org.junit.Assert.assertNotNull(wildcardClass88);
    }

    @Test
    public void test2172() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2172");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray30 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray29);
        double[][] doubleArray31 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        double[][] doubleArray32 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray31);
        double[][] doubleArray33 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray32);
        double[][] doubleArray34 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray33);
        double[][] doubleArray35 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray33);
        double[][] doubleArray36 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray33);
        double[][] doubleArray37 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray36);
        double[][] doubleArray38 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray36);
        double[][] doubleArray39 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray38);
        double[][] doubleArray40 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray39);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertNotNull(doubleArray40);
    }

    @Test
    public void test2173() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2173");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[] doubleArray9 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray16 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray23 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray30 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray31 = new double[][] { doubleArray9, doubleArray16, doubleArray23, doubleArray30 };
        double[][] doubleArray32 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray31);
        double[] doubleArray34 = new double[] { 1 };
        double[] doubleArray36 = new double[] { 1 };
        double[] doubleArray38 = new double[] { 1 };
        double[] doubleArray40 = new double[] { 1 };
        double[] doubleArray42 = new double[] { 1 };
        double[][] doubleArray43 = new double[][] { doubleArray34, doubleArray36, doubleArray38, doubleArray40, doubleArray42 };
        int[] intArray44 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray43, intArray44);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray32, intArray44);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray1, intArray44);
        double[][] doubleArray48 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray49 = new double[][] {};
        double[][] doubleArray50 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray49);
        double[][] doubleArray51 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray49);
        double[][] doubleArray52 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray49);
        double[][] doubleArray53 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray49);
        double[][] doubleArray54 = new double[][] {};
        double[][] doubleArray55 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray54);
        double[][] doubleArray56 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray55);
        double[] doubleArray60 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray64 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray68 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray72 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray73 = new double[][] { doubleArray60, doubleArray64, doubleArray68, doubleArray72 };
        double[] doubleArray75 = new double[] { 1 };
        double[] doubleArray77 = new double[] { 1 };
        double[] doubleArray79 = new double[] { 1 };
        double[] doubleArray81 = new double[] { 1 };
        double[] doubleArray83 = new double[] { 1 };
        double[][] doubleArray84 = new double[][] { doubleArray75, doubleArray77, doubleArray79, doubleArray81, doubleArray83 };
        int[] intArray85 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray84, intArray85);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray73, intArray85);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray56, intArray85);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray49, intArray85);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray48, intArray85);
        double[][] doubleArray91 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray48);
        double[][] doubleArray92 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray91);
        double[][] doubleArray93 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray91);
        double[][] doubleArray94 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray91);
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray75), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray77), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray79), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray81), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray83), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray84);
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray85), "[]");
        org.junit.Assert.assertNotNull(doubleArray91);
        org.junit.Assert.assertNotNull(doubleArray92);
        org.junit.Assert.assertNotNull(doubleArray93);
        org.junit.Assert.assertNotNull(doubleArray94);
    }

    @Test
    public void test2174() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2174");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[][] doubleArray5 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[][] doubleArray6 = new double[][] {};
        double[][] doubleArray7 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray6);
        double[][] doubleArray8 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray7);
        double[] doubleArray15 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray22 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray29 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray36 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray37 = new double[][] { doubleArray15, doubleArray22, doubleArray29, doubleArray36 };
        double[][] doubleArray38 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray37);
        double[] doubleArray40 = new double[] { 1 };
        double[] doubleArray42 = new double[] { 1 };
        double[] doubleArray44 = new double[] { 1 };
        double[] doubleArray46 = new double[] { 1 };
        double[] doubleArray48 = new double[] { 1 };
        double[][] doubleArray49 = new double[][] { doubleArray40, doubleArray42, doubleArray44, doubleArray46, doubleArray48 };
        int[] intArray50 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray49, intArray50);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray38, intArray50);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray7, intArray50);
        double[] doubleArray57 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray61 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray65 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray69 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray70 = new double[][] { doubleArray57, doubleArray61, doubleArray65, doubleArray69 };
        double[] doubleArray72 = new double[] { 1 };
        double[] doubleArray74 = new double[] { 1 };
        double[] doubleArray76 = new double[] { 1 };
        double[] doubleArray78 = new double[] { 1 };
        double[] doubleArray80 = new double[] { 1 };
        double[][] doubleArray81 = new double[][] { doubleArray72, doubleArray74, doubleArray76, doubleArray78, doubleArray80 };
        int[] intArray82 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray81, intArray82);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray70, intArray82);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray7, intArray82);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray3, intArray82);
        double[][] doubleArray87 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[][] doubleArray88 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray87);
        double[][] doubleArray89 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray88);
        double[][] doubleArray90 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray88);
        double[][] doubleArray91 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray88);
        java.lang.Class<?> wildcardClass92 = doubleArray91.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[]");
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray74), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray78), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray80), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray81);
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[]");
        org.junit.Assert.assertNotNull(doubleArray87);
        org.junit.Assert.assertNotNull(doubleArray88);
        org.junit.Assert.assertNotNull(doubleArray89);
        org.junit.Assert.assertNotNull(doubleArray90);
        org.junit.Assert.assertNotNull(doubleArray91);
        org.junit.Assert.assertNotNull(wildcardClass92);
    }

    @Test
    public void test2175() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2175");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        int[] intArray2 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray1, intArray2);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray5 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray6 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray5);
        double[][] doubleArray7 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray5);
        double[][] doubleArray8 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray5);
        double[][] doubleArray9 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray8);
        double[][] doubleArray10 = new double[][] {};
        double[][] doubleArray11 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray10);
        double[][] doubleArray12 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray10);
        double[][] doubleArray13 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray10);
        double[][] doubleArray14 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray10);
        double[][] doubleArray15 = new double[][] {};
        double[][] doubleArray16 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray15);
        double[][] doubleArray17 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray16);
        double[] doubleArray21 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray25 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray29 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray33 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray34 = new double[][] { doubleArray21, doubleArray25, doubleArray29, doubleArray33 };
        double[] doubleArray36 = new double[] { 1 };
        double[] doubleArray38 = new double[] { 1 };
        double[] doubleArray40 = new double[] { 1 };
        double[] doubleArray42 = new double[] { 1 };
        double[] doubleArray44 = new double[] { 1 };
        double[][] doubleArray45 = new double[][] { doubleArray36, doubleArray38, doubleArray40, doubleArray42, doubleArray44 };
        int[] intArray46 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray45, intArray46);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray34, intArray46);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray17, intArray46);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray10, intArray46);
        double[][] doubleArray51 = new double[][] {};
        double[][] doubleArray52 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray51);
        double[][] doubleArray53 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray52);
        double[][] doubleArray54 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray53);
        double[][] doubleArray55 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray53);
        double[][] doubleArray56 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray53);
        double[][] doubleArray57 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray53);
        double[] doubleArray64 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray71 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray78 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray85 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray86 = new double[][] { doubleArray64, doubleArray71, doubleArray78, doubleArray85 };
        double[][] doubleArray87 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray86);
        double[][] doubleArray88 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray86);
        double[][] doubleArray89 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray86);
        double[][] doubleArray90 = new double[][] {};
        double[][] doubleArray91 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray90);
        int[] intArray92 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray91, intArray92);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray89, intArray92);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray57, intArray92);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray10, intArray92);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray9, intArray92);
        java.lang.Class<?> wildcardClass98 = doubleArray9.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray71), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray78), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray85), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray86);
        org.junit.Assert.assertNotNull(doubleArray87);
        org.junit.Assert.assertNotNull(doubleArray88);
        org.junit.Assert.assertNotNull(doubleArray89);
        org.junit.Assert.assertNotNull(doubleArray90);
        org.junit.Assert.assertNotNull(doubleArray91);
        org.junit.Assert.assertNotNull(intArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray92), "[]");
        org.junit.Assert.assertNotNull(wildcardClass98);
    }

    @Test
    public void test2176() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2176");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray3 = new double[][] {};
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[][] doubleArray5 = new double[][] {};
        double[][] doubleArray6 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray5);
        double[] doubleArray8 = new double[] { 1 };
        double[] doubleArray10 = new double[] { 1 };
        double[] doubleArray12 = new double[] { 1 };
        double[] doubleArray14 = new double[] { 1 };
        double[] doubleArray16 = new double[] { 1 };
        double[][] doubleArray17 = new double[][] { doubleArray8, doubleArray10, doubleArray12, doubleArray14, doubleArray16 };
        int[] intArray18 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray17, intArray18);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray5, intArray18);
        double[] doubleArray24 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray28 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray32 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray36 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray37 = new double[][] { doubleArray24, doubleArray28, doubleArray32, doubleArray36 };
        double[] doubleArray39 = new double[] { 1 };
        double[] doubleArray41 = new double[] { 1 };
        double[] doubleArray43 = new double[] { 1 };
        double[] doubleArray45 = new double[] { 1 };
        double[] doubleArray47 = new double[] { 1 };
        double[][] doubleArray48 = new double[][] { doubleArray39, doubleArray41, doubleArray43, doubleArray45, doubleArray47 };
        int[] intArray49 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray48, intArray49);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray37, intArray49);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray5, intArray49);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray3, intArray49);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray0, intArray49);
        double[][] doubleArray55 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray56 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray57 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        java.lang.Class<?> wildcardClass58 = doubleArray0.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[]");
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[]");
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertNotNull(wildcardClass58);
    }

    @Test
    public void test2177() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2177");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray30 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray31 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray32 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[] doubleArray39 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray46 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray53 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray60 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray61 = new double[][] { doubleArray39, doubleArray46, doubleArray53, doubleArray60 };
        double[][] doubleArray62 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray61);
        double[][] doubleArray63 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray61);
        double[][] doubleArray64 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray61);
        double[][] doubleArray65 = new double[][] {};
        double[][] doubleArray66 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray65);
        int[] intArray67 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray66, intArray67);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray64, intArray67);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray28, intArray67);
        double[][] doubleArray71 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray72 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        java.lang.Class<?> wildcardClass73 = doubleArray28.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[]");
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertNotNull(wildcardClass73);
    }

    @Test
    public void test2178() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2178");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray5 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray4);
        double[][] doubleArray6 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray4);
        double[][] doubleArray7 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray6);
        double[][] doubleArray8 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray6);
        double[][] doubleArray9 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray8);
        double[][] doubleArray10 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray8);
        double[][] doubleArray11 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray10);
        java.lang.Class<?> wildcardClass12 = doubleArray11.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertNotNull(wildcardClass12);
    }

    @Test
    public void test2179() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2179");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[] doubleArray31 = new double[] { 1 };
        double[] doubleArray33 = new double[] { 1 };
        double[] doubleArray35 = new double[] { 1 };
        double[] doubleArray37 = new double[] { 1 };
        double[] doubleArray39 = new double[] { 1 };
        double[][] doubleArray40 = new double[][] { doubleArray31, doubleArray33, doubleArray35, doubleArray37, doubleArray39 };
        int[] intArray41 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray40, intArray41);
        double[][] doubleArray43 = new double[][] {};
        double[][] doubleArray44 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray43);
        int[] intArray45 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray44, intArray45);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray40, intArray45);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray28, intArray45);
        double[][] doubleArray49 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray50 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray49);
        double[][] doubleArray51 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray50);
        double[][] doubleArray52 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray51);
        double[][] doubleArray53 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray52);
        double[][] doubleArray54 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray52);
        double[][] doubleArray55 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray54);
        double[][] doubleArray56 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray54);
        double[][] doubleArray57 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray56);
        double[][] doubleArray58 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray56);
        java.lang.Class<?> wildcardClass59 = doubleArray58.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertNotNull(wildcardClass59);
    }

    @Test
    public void test2180() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2180");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray5 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray4);
        double[][] doubleArray6 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray4);
        double[][] doubleArray7 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray6);
        double[][] doubleArray8 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray6);
        double[][] doubleArray9 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray6);
        double[][] doubleArray10 = new double[][] {};
        double[][] doubleArray11 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray10);
        int[] intArray12 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray11, intArray12);
        double[] doubleArray15 = new double[] { 1 };
        double[] doubleArray17 = new double[] { 1 };
        double[] doubleArray19 = new double[] { 1 };
        double[] doubleArray21 = new double[] { 1 };
        double[] doubleArray23 = new double[] { 1 };
        double[][] doubleArray24 = new double[][] { doubleArray15, doubleArray17, doubleArray19, doubleArray21, doubleArray23 };
        int[] intArray25 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray24, intArray25);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray11, intArray25);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray6, intArray25);
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray6);
        java.lang.Class<?> wildcardClass30 = doubleArray29.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(wildcardClass30);
    }

    @Test
    public void test2181() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2181");
        double[] doubleArray6 = new double[] { '#', (byte) 1, (byte) -1, (-1), (byte) 100, (byte) 1 };
        double[] doubleArray13 = new double[] { '#', (byte) 1, (byte) -1, (-1), (byte) 100, (byte) 1 };
        double[] doubleArray20 = new double[] { '#', (byte) 1, (byte) -1, (-1), (byte) 100, (byte) 1 };
        double[][] doubleArray21 = new double[][] { doubleArray6, doubleArray13, doubleArray20 };
        double[][] doubleArray22 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray21);
        double[][] doubleArray23 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray22);
        double[][] doubleArray24 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray22);
        java.lang.Class<?> wildcardClass25 = doubleArray22.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[35.0, 1.0, -1.0, -1.0, 100.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[1.0, 0.0, 0.0, -1.0, 100.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[1.0, 0.0, 0.0, -1.0, 100.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertNotNull(wildcardClass25);
    }

    @Test
    public void test2182() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2182");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[] doubleArray31 = new double[] { 1 };
        double[] doubleArray33 = new double[] { 1 };
        double[] doubleArray35 = new double[] { 1 };
        double[] doubleArray37 = new double[] { 1 };
        double[] doubleArray39 = new double[] { 1 };
        double[][] doubleArray40 = new double[][] { doubleArray31, doubleArray33, doubleArray35, doubleArray37, doubleArray39 };
        int[] intArray41 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray40, intArray41);
        double[][] doubleArray43 = new double[][] {};
        double[][] doubleArray44 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray43);
        int[] intArray45 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray44, intArray45);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray40, intArray45);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray28, intArray45);
        double[][] doubleArray49 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray50 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray51 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray50);
        double[][] doubleArray52 = new double[][] {};
        double[][] doubleArray53 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray52);
        double[][] doubleArray54 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray53);
        double[] doubleArray58 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray62 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray66 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray70 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray71 = new double[][] { doubleArray58, doubleArray62, doubleArray66, doubleArray70 };
        double[] doubleArray73 = new double[] { 1 };
        double[] doubleArray75 = new double[] { 1 };
        double[] doubleArray77 = new double[] { 1 };
        double[] doubleArray79 = new double[] { 1 };
        double[] doubleArray81 = new double[] { 1 };
        double[][] doubleArray82 = new double[][] { doubleArray73, doubleArray75, doubleArray77, doubleArray79, doubleArray81 };
        int[] intArray83 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray82, intArray83);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray71, intArray83);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray54, intArray83);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray50, intArray83);
        java.lang.Class<?> wildcardClass88 = doubleArray50.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray66), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray70), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray73), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray75), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray77), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray79), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray81), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray82);
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray83), "[]");
        org.junit.Assert.assertNotNull(wildcardClass88);
    }

    @Test
    public void test2183() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2183");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray30 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray29);
        double[][] doubleArray31 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        double[][] doubleArray32 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        double[][] doubleArray33 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        double[][] doubleArray34 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        int[] intArray35 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray30, intArray35);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertNotNull(doubleArray34);
    }

    @Test
    public void test2184() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2184");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray30 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray31 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray32 = new double[][] {};
        double[][] doubleArray33 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray32);
        double[][] doubleArray34 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray33);
        double[][] doubleArray35 = new double[][] {};
        double[][] doubleArray36 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray35);
        double[][] doubleArray37 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray35);
        double[][] doubleArray38 = new double[][] {};
        double[][] doubleArray39 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray38);
        double[][] doubleArray40 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray39);
        double[][] doubleArray41 = new double[][] {};
        double[][] doubleArray42 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray41);
        double[][] doubleArray43 = new double[][] {};
        double[][] doubleArray44 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray43);
        double[] doubleArray46 = new double[] { 1 };
        double[] doubleArray48 = new double[] { 1 };
        double[] doubleArray50 = new double[] { 1 };
        double[] doubleArray52 = new double[] { 1 };
        double[] doubleArray54 = new double[] { 1 };
        double[][] doubleArray55 = new double[][] { doubleArray46, doubleArray48, doubleArray50, doubleArray52, doubleArray54 };
        int[] intArray56 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray55, intArray56);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray43, intArray56);
        double[] doubleArray62 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray66 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray70 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray74 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray75 = new double[][] { doubleArray62, doubleArray66, doubleArray70, doubleArray74 };
        double[] doubleArray77 = new double[] { 1 };
        double[] doubleArray79 = new double[] { 1 };
        double[] doubleArray81 = new double[] { 1 };
        double[] doubleArray83 = new double[] { 1 };
        double[] doubleArray85 = new double[] { 1 };
        double[][] doubleArray86 = new double[][] { doubleArray77, doubleArray79, doubleArray81, doubleArray83, doubleArray85 };
        int[] intArray87 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray86, intArray87);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray75, intArray87);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray43, intArray87);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray42, intArray87);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray40, intArray87);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray35, intArray87);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray34, intArray87);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray31, intArray87);
        double[][] doubleArray96 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray31);
        double[][] doubleArray97 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray31);
        double[][] doubleArray98 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray97);
        double[][] doubleArray99 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray98);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[]");
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray66), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray70), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray74), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray77), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray79), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray81), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray83), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray85), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray86);
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray87), "[]");
        org.junit.Assert.assertNotNull(doubleArray96);
        org.junit.Assert.assertNotNull(doubleArray97);
        org.junit.Assert.assertNotNull(doubleArray98);
        org.junit.Assert.assertNotNull(doubleArray99);
    }

    @Test
    public void test2185() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2185");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray5 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray4);
        double[][] doubleArray6 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray4);
        double[][] doubleArray7 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray6);
        double[][] doubleArray8 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray6);
        double[][] doubleArray9 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray8);
        double[][] doubleArray10 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray8);
        double[][] doubleArray11 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray8);
        double[][] doubleArray12 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray8);
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertNotNull(doubleArray12);
    }

    @Test
    public void test2186() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2186");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[] doubleArray6 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray10 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray14 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray18 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray19 = new double[][] { doubleArray6, doubleArray10, doubleArray14, doubleArray18 };
        double[] doubleArray21 = new double[] { 1 };
        double[] doubleArray23 = new double[] { 1 };
        double[] doubleArray25 = new double[] { 1 };
        double[] doubleArray27 = new double[] { 1 };
        double[] doubleArray29 = new double[] { 1 };
        double[][] doubleArray30 = new double[][] { doubleArray21, doubleArray23, doubleArray25, doubleArray27, doubleArray29 };
        int[] intArray31 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray30, intArray31);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray19, intArray31);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray2, intArray31);
        double[][] doubleArray35 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray36 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray37 = null;
        double[][] doubleArray38 = new double[][] {};
        double[][] doubleArray39 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray38);
        double[][] doubleArray40 = new double[][] {};
        double[][] doubleArray41 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray40);
        double[] doubleArray43 = new double[] { 1 };
        double[] doubleArray45 = new double[] { 1 };
        double[] doubleArray47 = new double[] { 1 };
        double[] doubleArray49 = new double[] { 1 };
        double[] doubleArray51 = new double[] { 1 };
        double[][] doubleArray52 = new double[][] { doubleArray43, doubleArray45, doubleArray47, doubleArray49, doubleArray51 };
        int[] intArray53 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray52, intArray53);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray40, intArray53);
        double[] doubleArray59 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray63 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray67 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray71 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray72 = new double[][] { doubleArray59, doubleArray63, doubleArray67, doubleArray71 };
        double[] doubleArray74 = new double[] { 1 };
        double[] doubleArray76 = new double[] { 1 };
        double[] doubleArray78 = new double[] { 1 };
        double[] doubleArray80 = new double[] { 1 };
        double[] doubleArray82 = new double[] { 1 };
        double[][] doubleArray83 = new double[][] { doubleArray74, doubleArray76, doubleArray78, doubleArray80, doubleArray82 };
        int[] intArray84 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray83, intArray84);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray72, intArray84);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray40, intArray84);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray39, intArray84);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray37, intArray84);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray36, intArray84);
        double[][] doubleArray91 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray36);
        java.lang.Class<?> wildcardClass92 = doubleArray36.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[]");
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray71), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray74), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray78), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray80), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray82), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray83);
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray84), "[]");
        org.junit.Assert.assertNotNull(doubleArray91);
        org.junit.Assert.assertNotNull(wildcardClass92);
    }

    @Test
    public void test2187() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2187");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[] doubleArray10 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray17 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray24 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray31 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray32 = new double[][] { doubleArray10, doubleArray17, doubleArray24, doubleArray31 };
        double[][] doubleArray33 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray32);
        double[][] doubleArray34 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray32);
        double[][] doubleArray35 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray32);
        double[][] doubleArray36 = new double[][] {};
        double[][] doubleArray37 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray36);
        int[] intArray38 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray37, intArray38);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray35, intArray38);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray3, intArray38);
        double[][] doubleArray42 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[][] doubleArray43 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray42);
        double[][] doubleArray44 = new double[][] {};
        double[][] doubleArray45 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray44);
        double[][] doubleArray46 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray44);
        double[][] doubleArray47 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray46);
        double[][] doubleArray48 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray47);
        double[][] doubleArray49 = new double[][] {};
        double[][] doubleArray50 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray49);
        double[][] doubleArray51 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray50);
        double[] doubleArray55 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray59 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray63 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray67 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray68 = new double[][] { doubleArray55, doubleArray59, doubleArray63, doubleArray67 };
        double[] doubleArray70 = new double[] { 1 };
        double[] doubleArray72 = new double[] { 1 };
        double[] doubleArray74 = new double[] { 1 };
        double[] doubleArray76 = new double[] { 1 };
        double[] doubleArray78 = new double[] { 1 };
        double[][] doubleArray79 = new double[][] { doubleArray70, doubleArray72, doubleArray74, doubleArray76, doubleArray78 };
        int[] intArray80 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray79, intArray80);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray68, intArray80);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray51, intArray80);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray47, intArray80);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray43, intArray80);
        double[][] doubleArray86 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray43);
        java.lang.Class<?> wildcardClass87 = doubleArray86.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray70), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray74), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray78), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[]");
        org.junit.Assert.assertNotNull(doubleArray86);
        org.junit.Assert.assertNotNull(wildcardClass87);
    }

    @Test
    public void test2188() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2188");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = new double[][] {};
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[] doubleArray5 = new double[] { 1 };
        double[] doubleArray7 = new double[] { 1 };
        double[] doubleArray9 = new double[] { 1 };
        double[] doubleArray11 = new double[] { 1 };
        double[] doubleArray13 = new double[] { 1 };
        double[][] doubleArray14 = new double[][] { doubleArray5, doubleArray7, doubleArray9, doubleArray11, doubleArray13 };
        int[] intArray15 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray14, intArray15);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray2, intArray15);
        double[] doubleArray21 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray25 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray29 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray33 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray34 = new double[][] { doubleArray21, doubleArray25, doubleArray29, doubleArray33 };
        double[] doubleArray36 = new double[] { 1 };
        double[] doubleArray38 = new double[] { 1 };
        double[] doubleArray40 = new double[] { 1 };
        double[] doubleArray42 = new double[] { 1 };
        double[] doubleArray44 = new double[] { 1 };
        double[][] doubleArray45 = new double[][] { doubleArray36, doubleArray38, doubleArray40, doubleArray42, doubleArray44 };
        int[] intArray46 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray45, intArray46);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray34, intArray46);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray2, intArray46);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray1, intArray46);
        double[] doubleArray52 = new double[] { 1 };
        double[] doubleArray54 = new double[] { 1 };
        double[] doubleArray56 = new double[] { 1 };
        double[] doubleArray58 = new double[] { 1 };
        double[] doubleArray60 = new double[] { 1 };
        double[][] doubleArray61 = new double[][] { doubleArray52, doubleArray54, doubleArray56, doubleArray58, doubleArray60 };
        int[] intArray62 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray61, intArray62);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray1, intArray62);
        double[][] doubleArray65 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray66 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray67 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray66);
        double[][] doubleArray68 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray66);
        double[][] doubleArray69 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray68);
        double[][] doubleArray70 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray68);
        double[][] doubleArray71 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray68);
        java.lang.Class<?> wildcardClass72 = doubleArray68.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[]");
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[]");
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertNotNull(wildcardClass72);
    }

    @Test
    public void test2189() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2189");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray5 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray6 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[] doubleArray8 = new double[] { 1 };
        double[] doubleArray10 = new double[] { 1 };
        double[] doubleArray12 = new double[] { 1 };
        double[] doubleArray14 = new double[] { 1 };
        double[] doubleArray16 = new double[] { 1 };
        double[][] doubleArray17 = new double[][] { doubleArray8, doubleArray10, doubleArray12, doubleArray14, doubleArray16 };
        int[] intArray18 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray17, intArray18);
        double[] doubleArray26 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray33 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray40 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray47 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray48 = new double[][] { doubleArray26, doubleArray33, doubleArray40, doubleArray47 };
        double[][] doubleArray49 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray48);
        double[] doubleArray51 = new double[] { 1 };
        double[] doubleArray53 = new double[] { 1 };
        double[] doubleArray55 = new double[] { 1 };
        double[] doubleArray57 = new double[] { 1 };
        double[] doubleArray59 = new double[] { 1 };
        double[][] doubleArray60 = new double[][] { doubleArray51, doubleArray53, doubleArray55, doubleArray57, doubleArray59 };
        int[] intArray61 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray60, intArray61);
        double[][] doubleArray63 = new double[][] {};
        double[][] doubleArray64 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray63);
        int[] intArray65 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray64, intArray65);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray60, intArray65);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray48, intArray65);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray17, intArray65);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray6, intArray65);
        double[][] doubleArray71 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray6);
        double[][] doubleArray72 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray71);
        java.lang.Class<?> wildcardClass73 = doubleArray72.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[]");
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[]");
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[]");
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertNotNull(wildcardClass73);
    }

    @Test
    public void test2190() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2190");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = new double[][] {};
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[] doubleArray8 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray12 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray16 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray20 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray21 = new double[][] { doubleArray8, doubleArray12, doubleArray16, doubleArray20 };
        double[] doubleArray23 = new double[] { 1 };
        double[] doubleArray25 = new double[] { 1 };
        double[] doubleArray27 = new double[] { 1 };
        double[] doubleArray29 = new double[] { 1 };
        double[] doubleArray31 = new double[] { 1 };
        double[][] doubleArray32 = new double[][] { doubleArray23, doubleArray25, doubleArray27, doubleArray29, doubleArray31 };
        int[] intArray33 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray32, intArray33);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray21, intArray33);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray3, intArray33);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray1, intArray33);
        double[][] doubleArray38 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray39 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray38);
        double[] doubleArray41 = new double[] { 1 };
        double[] doubleArray43 = new double[] { 1 };
        double[] doubleArray45 = new double[] { 1 };
        double[] doubleArray47 = new double[] { 1 };
        double[] doubleArray49 = new double[] { 1 };
        double[][] doubleArray50 = new double[][] { doubleArray41, doubleArray43, doubleArray45, doubleArray47, doubleArray49 };
        int[] intArray51 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray50, intArray51);
        double[][] doubleArray53 = new double[][] {};
        double[][] doubleArray54 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray53);
        int[] intArray55 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray54, intArray55);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray50, intArray55);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray38, intArray55);
        double[][] doubleArray59 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray38);
        double[][] doubleArray60 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray38);
        double[][] doubleArray61 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray60);
        double[][] doubleArray62 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray61);
        double[][] doubleArray63 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray61);
        double[][] doubleArray64 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray61);
        java.lang.Class<?> wildcardClass65 = doubleArray61.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[]");
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[]");
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertNotNull(wildcardClass65);
    }

    @Test
    public void test2191() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2191");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[] doubleArray8 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray12 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray16 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray20 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray21 = new double[][] { doubleArray8, doubleArray12, doubleArray16, doubleArray20 };
        double[] doubleArray23 = new double[] { 1 };
        double[] doubleArray25 = new double[] { 1 };
        double[] doubleArray27 = new double[] { 1 };
        double[] doubleArray29 = new double[] { 1 };
        double[] doubleArray31 = new double[] { 1 };
        double[][] doubleArray32 = new double[][] { doubleArray23, doubleArray25, doubleArray27, doubleArray29, doubleArray31 };
        int[] intArray33 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray32, intArray33);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray21, intArray33);
        double[][] doubleArray36 = new double[][] {};
        double[][] doubleArray37 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray36);
        double[][] doubleArray38 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray37);
        double[][] doubleArray39 = new double[][] {};
        double[][] doubleArray40 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray39);
        double[][] doubleArray41 = new double[][] {};
        double[][] doubleArray42 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray41);
        double[] doubleArray44 = new double[] { 1 };
        double[] doubleArray46 = new double[] { 1 };
        double[] doubleArray48 = new double[] { 1 };
        double[] doubleArray50 = new double[] { 1 };
        double[] doubleArray52 = new double[] { 1 };
        double[][] doubleArray53 = new double[][] { doubleArray44, doubleArray46, doubleArray48, doubleArray50, doubleArray52 };
        int[] intArray54 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray53, intArray54);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray41, intArray54);
        double[] doubleArray60 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray64 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray68 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray72 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray73 = new double[][] { doubleArray60, doubleArray64, doubleArray68, doubleArray72 };
        double[] doubleArray75 = new double[] { 1 };
        double[] doubleArray77 = new double[] { 1 };
        double[] doubleArray79 = new double[] { 1 };
        double[] doubleArray81 = new double[] { 1 };
        double[] doubleArray83 = new double[] { 1 };
        double[][] doubleArray84 = new double[][] { doubleArray75, doubleArray77, doubleArray79, doubleArray81, doubleArray83 };
        int[] intArray85 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray84, intArray85);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray73, intArray85);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray41, intArray85);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray40, intArray85);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray38, intArray85);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray21, intArray85);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray3, intArray85);
        double[][] doubleArray93 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[][] doubleArray94 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray93);
        double[][] doubleArray95 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray94);
        double[][] doubleArray96 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray94);
        double[][] doubleArray97 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray96);
        java.lang.Class<?> wildcardClass98 = doubleArray96.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[]");
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray75), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray77), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray79), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray81), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray83), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray84);
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray85), "[]");
        org.junit.Assert.assertNotNull(doubleArray93);
        org.junit.Assert.assertNotNull(doubleArray94);
        org.junit.Assert.assertNotNull(doubleArray95);
        org.junit.Assert.assertNotNull(doubleArray96);
        org.junit.Assert.assertNotNull(doubleArray97);
        org.junit.Assert.assertNotNull(wildcardClass98);
    }

    @Test
    public void test2192() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2192");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        int[] intArray2 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray1, intArray2);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray5 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray4);
        double[][] doubleArray6 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray5);
        double[][] doubleArray7 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray6);
        double[][] doubleArray8 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray7);
        java.lang.Class<?> wildcardClass9 = doubleArray7.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void test2193() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2193");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray30 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray29);
        double[][] doubleArray31 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        double[][] doubleArray32 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray31);
        double[][] doubleArray33 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray31);
        double[] doubleArray35 = new double[] { 1 };
        double[] doubleArray37 = new double[] { 1 };
        double[] doubleArray39 = new double[] { 1 };
        double[] doubleArray41 = new double[] { 1 };
        double[] doubleArray43 = new double[] { 1 };
        double[][] doubleArray44 = new double[][] { doubleArray35, doubleArray37, doubleArray39, doubleArray41, doubleArray43 };
        int[] intArray45 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray44, intArray45);
        double[][] doubleArray47 = new double[][] {};
        double[][] doubleArray48 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray47);
        int[] intArray49 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray48, intArray49);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray44, intArray49);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray33, intArray49);
        double[][] doubleArray53 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray33);
        double[] doubleArray60 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray67 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray74 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray81 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray82 = new double[][] { doubleArray60, doubleArray67, doubleArray74, doubleArray81 };
        double[][] doubleArray83 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray82);
        double[][] doubleArray84 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray82);
        double[][] doubleArray85 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray82);
        double[][] doubleArray86 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray85);
        double[][] doubleArray87 = new double[][] {};
        double[][] doubleArray88 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray87);
        int[] intArray89 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray88, intArray89);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray86, intArray89);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray33, intArray89);
        java.lang.Class<?> wildcardClass93 = doubleArray33.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[]");
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[]");
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray74), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray81), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray82);
        org.junit.Assert.assertNotNull(doubleArray83);
        org.junit.Assert.assertNotNull(doubleArray84);
        org.junit.Assert.assertNotNull(doubleArray85);
        org.junit.Assert.assertNotNull(doubleArray86);
        org.junit.Assert.assertNotNull(doubleArray87);
        org.junit.Assert.assertNotNull(doubleArray88);
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray89), "[]");
        org.junit.Assert.assertNotNull(wildcardClass93);
    }

    @Test
    public void test2194() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2194");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray30 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray31 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray32 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray31);
        double[][] doubleArray33 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray32);
        double[][] doubleArray34 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray32);
        double[][] doubleArray35 = new double[][] {};
        double[][] doubleArray36 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray35);
        double[][] doubleArray37 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray35);
        double[][] doubleArray38 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray35);
        double[][] doubleArray39 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray35);
        double[][] doubleArray40 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray35);
        double[][] doubleArray41 = new double[][] {};
        double[][] doubleArray42 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray41);
        double[][] doubleArray43 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray41);
        double[][] doubleArray44 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray43);
        double[][] doubleArray45 = null;
        double[][] doubleArray46 = new double[][] {};
        double[][] doubleArray47 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray46);
        double[][] doubleArray48 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray47);
        double[] doubleArray52 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray56 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray60 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray64 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray65 = new double[][] { doubleArray52, doubleArray56, doubleArray60, doubleArray64 };
        double[] doubleArray67 = new double[] { 1 };
        double[] doubleArray69 = new double[] { 1 };
        double[] doubleArray71 = new double[] { 1 };
        double[] doubleArray73 = new double[] { 1 };
        double[] doubleArray75 = new double[] { 1 };
        double[][] doubleArray76 = new double[][] { doubleArray67, doubleArray69, doubleArray71, doubleArray73, doubleArray75 };
        int[] intArray77 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray76, intArray77);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray65, intArray77);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray48, intArray77);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray45, intArray77);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray44, intArray77);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray40, intArray77);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray34, intArray77);
        double[][] doubleArray85 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray34);
        double[][] doubleArray86 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray34);
        java.lang.Class<?> wildcardClass87 = doubleArray86.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray71), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray73), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray75), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray77), "[]");
        org.junit.Assert.assertNotNull(doubleArray85);
        org.junit.Assert.assertNotNull(doubleArray86);
        org.junit.Assert.assertNotNull(wildcardClass87);
    }

    @Test
    public void test2195() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2195");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[] doubleArray3 = new double[] { 1 };
        double[] doubleArray5 = new double[] { 1 };
        double[] doubleArray7 = new double[] { 1 };
        double[] doubleArray9 = new double[] { 1 };
        double[] doubleArray11 = new double[] { 1 };
        double[][] doubleArray12 = new double[][] { doubleArray3, doubleArray5, doubleArray7, doubleArray9, doubleArray11 };
        int[] intArray13 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray12, intArray13);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray0, intArray13);
        double[] doubleArray19 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray23 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray27 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray31 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray32 = new double[][] { doubleArray19, doubleArray23, doubleArray27, doubleArray31 };
        double[] doubleArray34 = new double[] { 1 };
        double[] doubleArray36 = new double[] { 1 };
        double[] doubleArray38 = new double[] { 1 };
        double[] doubleArray40 = new double[] { 1 };
        double[] doubleArray42 = new double[] { 1 };
        double[][] doubleArray43 = new double[][] { doubleArray34, doubleArray36, doubleArray38, doubleArray40, doubleArray42 };
        int[] intArray44 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray43, intArray44);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray32, intArray44);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray0, intArray44);
        double[][] doubleArray48 = new double[][] {};
        double[][] doubleArray49 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray48);
        double[] doubleArray51 = new double[] { 1 };
        double[] doubleArray53 = new double[] { 1 };
        double[] doubleArray55 = new double[] { 1 };
        double[] doubleArray57 = new double[] { 1 };
        double[] doubleArray59 = new double[] { 1 };
        double[][] doubleArray60 = new double[][] { doubleArray51, doubleArray53, doubleArray55, doubleArray57, doubleArray59 };
        int[] intArray61 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray60, intArray61);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray48, intArray61);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray0, intArray61);
        double[][] doubleArray65 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray66 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray67 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        java.lang.Class<?> wildcardClass68 = doubleArray67.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[]");
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertNotNull(wildcardClass68);
    }

    @Test
    public void test2196() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2196");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray30 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray31 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray32 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray33 = new double[][] {};
        double[][] doubleArray34 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray33);
        double[][] doubleArray35 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray34);
        double[] doubleArray39 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray43 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray47 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray51 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray52 = new double[][] { doubleArray39, doubleArray43, doubleArray47, doubleArray51 };
        double[] doubleArray54 = new double[] { 1 };
        double[] doubleArray56 = new double[] { 1 };
        double[] doubleArray58 = new double[] { 1 };
        double[] doubleArray60 = new double[] { 1 };
        double[] doubleArray62 = new double[] { 1 };
        double[][] doubleArray63 = new double[][] { doubleArray54, doubleArray56, doubleArray58, doubleArray60, doubleArray62 };
        int[] intArray64 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray63, intArray64);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray52, intArray64);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray35, intArray64);
        double[][] doubleArray68 = null;
        double[] doubleArray70 = new double[] { 1 };
        double[] doubleArray72 = new double[] { 1 };
        double[] doubleArray74 = new double[] { 1 };
        double[] doubleArray76 = new double[] { 1 };
        double[] doubleArray78 = new double[] { 1 };
        double[][] doubleArray79 = new double[][] { doubleArray70, doubleArray72, doubleArray74, doubleArray76, doubleArray78 };
        int[] intArray80 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray79, intArray80);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray68, intArray80);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray35, intArray80);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray28, intArray80);
        double[][] doubleArray85 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray86 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray85);
        double[][] doubleArray87 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray85);
        double[][] doubleArray88 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray85);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[]");
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray70), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray74), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray78), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[]");
        org.junit.Assert.assertNotNull(doubleArray85);
        org.junit.Assert.assertNotNull(doubleArray86);
        org.junit.Assert.assertNotNull(doubleArray87);
        org.junit.Assert.assertNotNull(doubleArray88);
    }

    @Test
    public void test2197() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2197");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[][] doubleArray5 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[][] doubleArray6 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray5);
        double[][] doubleArray7 = new double[][] {};
        double[][] doubleArray8 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray7);
        double[][] doubleArray9 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray8);
        double[][] doubleArray10 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray9);
        double[][] doubleArray11 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray9);
        double[][] doubleArray12 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray9);
        double[][] doubleArray13 = new double[][] {};
        double[][] doubleArray14 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray13);
        double[][] doubleArray15 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray13);
        double[] doubleArray22 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray29 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray36 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray43 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray44 = new double[][] { doubleArray22, doubleArray29, doubleArray36, doubleArray43 };
        double[][] doubleArray45 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray44);
        double[][] doubleArray46 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray44);
        double[][] doubleArray47 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray44);
        double[][] doubleArray48 = new double[][] {};
        double[][] doubleArray49 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray48);
        int[] intArray50 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray49, intArray50);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray47, intArray50);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray15, intArray50);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray9, intArray50);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray6, intArray50);
        java.lang.Class<?> wildcardClass56 = doubleArray6.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[]");
        org.junit.Assert.assertNotNull(wildcardClass56);
    }

    @Test
    public void test2198() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2198");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[] doubleArray3 = new double[] { 1 };
        double[] doubleArray5 = new double[] { 1 };
        double[] doubleArray7 = new double[] { 1 };
        double[] doubleArray9 = new double[] { 1 };
        double[] doubleArray11 = new double[] { 1 };
        double[][] doubleArray12 = new double[][] { doubleArray3, doubleArray5, doubleArray7, doubleArray9, doubleArray11 };
        int[] intArray13 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray12, intArray13);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray0, intArray13);
        double[] doubleArray19 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray23 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray27 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray31 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray32 = new double[][] { doubleArray19, doubleArray23, doubleArray27, doubleArray31 };
        double[] doubleArray34 = new double[] { 1 };
        double[] doubleArray36 = new double[] { 1 };
        double[] doubleArray38 = new double[] { 1 };
        double[] doubleArray40 = new double[] { 1 };
        double[] doubleArray42 = new double[] { 1 };
        double[][] doubleArray43 = new double[][] { doubleArray34, doubleArray36, doubleArray38, doubleArray40, doubleArray42 };
        int[] intArray44 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray43, intArray44);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray32, intArray44);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray0, intArray44);
        double[] doubleArray49 = new double[] { 1 };
        double[] doubleArray51 = new double[] { 1 };
        double[] doubleArray53 = new double[] { 1 };
        double[] doubleArray55 = new double[] { 1 };
        double[] doubleArray57 = new double[] { 1 };
        double[][] doubleArray58 = new double[][] { doubleArray49, doubleArray51, doubleArray53, doubleArray55, doubleArray57 };
        int[] intArray59 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray58, intArray59);
        double[][] doubleArray61 = new double[][] {};
        double[][] doubleArray62 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray61);
        int[] intArray63 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray62, intArray63);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray58, intArray63);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray0, intArray63);
        double[][] doubleArray67 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray68 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray67);
        double[][] doubleArray69 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray67);
        double[][] doubleArray70 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray67);
        double[][] doubleArray71 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray67);
        double[][] doubleArray72 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray67);
        double[][] doubleArray73 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray67);
        double[][] doubleArray74 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray73);
        java.lang.Class<?> wildcardClass75 = doubleArray74.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[]");
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertNotNull(wildcardClass75);
    }

    @Test
    public void test2199() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2199");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[] doubleArray3 = new double[] { 1 };
        double[] doubleArray5 = new double[] { 1 };
        double[] doubleArray7 = new double[] { 1 };
        double[] doubleArray9 = new double[] { 1 };
        double[] doubleArray11 = new double[] { 1 };
        double[][] doubleArray12 = new double[][] { doubleArray3, doubleArray5, doubleArray7, doubleArray9, doubleArray11 };
        int[] intArray13 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray12, intArray13);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray0, intArray13);
        double[][] doubleArray16 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray17 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray16);
        double[][] doubleArray18 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray17);
        double[][] doubleArray19 = new double[][] {};
        double[][] doubleArray20 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray19);
        double[][] doubleArray21 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray19);
        double[][] doubleArray22 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray21);
        double[][] doubleArray23 = null;
        double[][] doubleArray24 = new double[][] {};
        double[][] doubleArray25 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray24);
        double[][] doubleArray26 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray25);
        double[] doubleArray30 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray34 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray38 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray42 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray43 = new double[][] { doubleArray30, doubleArray34, doubleArray38, doubleArray42 };
        double[] doubleArray45 = new double[] { 1 };
        double[] doubleArray47 = new double[] { 1 };
        double[] doubleArray49 = new double[] { 1 };
        double[] doubleArray51 = new double[] { 1 };
        double[] doubleArray53 = new double[] { 1 };
        double[][] doubleArray54 = new double[][] { doubleArray45, doubleArray47, doubleArray49, doubleArray51, doubleArray53 };
        int[] intArray55 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray54, intArray55);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray43, intArray55);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray26, intArray55);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray23, intArray55);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray22, intArray55);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray17, intArray55);
        double[][] doubleArray62 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray17);
        double[][] doubleArray63 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray17);
        java.lang.Class<?> wildcardClass64 = doubleArray63.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[]");
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertNotNull(wildcardClass64);
    }

    @Test
    public void test2200() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2200");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[] doubleArray3 = new double[] { 1 };
        double[] doubleArray5 = new double[] { 1 };
        double[] doubleArray7 = new double[] { 1 };
        double[] doubleArray9 = new double[] { 1 };
        double[] doubleArray11 = new double[] { 1 };
        double[][] doubleArray12 = new double[][] { doubleArray3, doubleArray5, doubleArray7, doubleArray9, doubleArray11 };
        int[] intArray13 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray12, intArray13);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray0, intArray13);
        double[] doubleArray19 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray23 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray27 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray31 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray32 = new double[][] { doubleArray19, doubleArray23, doubleArray27, doubleArray31 };
        double[] doubleArray34 = new double[] { 1 };
        double[] doubleArray36 = new double[] { 1 };
        double[] doubleArray38 = new double[] { 1 };
        double[] doubleArray40 = new double[] { 1 };
        double[] doubleArray42 = new double[] { 1 };
        double[][] doubleArray43 = new double[][] { doubleArray34, doubleArray36, doubleArray38, doubleArray40, doubleArray42 };
        int[] intArray44 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray43, intArray44);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray32, intArray44);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray0, intArray44);
        double[] doubleArray49 = new double[] { 1 };
        double[] doubleArray51 = new double[] { 1 };
        double[] doubleArray53 = new double[] { 1 };
        double[] doubleArray55 = new double[] { 1 };
        double[] doubleArray57 = new double[] { 1 };
        double[][] doubleArray58 = new double[][] { doubleArray49, doubleArray51, doubleArray53, doubleArray55, doubleArray57 };
        int[] intArray59 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray58, intArray59);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray0, intArray59);
        double[][] doubleArray62 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray63 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray64 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray63);
        double[][] doubleArray65 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray63);
        java.lang.Class<?> wildcardClass66 = doubleArray63.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[]");
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertNotNull(wildcardClass66);
    }

    @Test
    public void test2201() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2201");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray30 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray29);
        double[][] doubleArray31 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        double[][] doubleArray32 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray31);
        double[][] doubleArray33 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray32);
        double[][] doubleArray34 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray33);
        double[][] doubleArray35 = new double[][] {};
        double[][] doubleArray36 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray35);
        double[][] doubleArray37 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray36);
        double[][] doubleArray38 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray37);
        double[][] doubleArray39 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray37);
        double[] doubleArray46 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray53 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray60 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray67 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray68 = new double[][] { doubleArray46, doubleArray53, doubleArray60, doubleArray67 };
        double[][] doubleArray69 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray68);
        double[][] doubleArray70 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray68);
        double[][] doubleArray71 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray68);
        double[][] doubleArray72 = new double[][] {};
        double[][] doubleArray73 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray72);
        int[] intArray74 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray73, intArray74);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray71, intArray74);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray39, intArray74);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray34, intArray74);
        double[][] doubleArray79 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray34);
        double[][] doubleArray80 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray34);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[]");
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertNotNull(doubleArray80);
    }

    @Test
    public void test2202() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2202");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray5 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray6 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[] doubleArray8 = new double[] { 1 };
        double[] doubleArray10 = new double[] { 1 };
        double[] doubleArray12 = new double[] { 1 };
        double[] doubleArray14 = new double[] { 1 };
        double[] doubleArray16 = new double[] { 1 };
        double[][] doubleArray17 = new double[][] { doubleArray8, doubleArray10, doubleArray12, doubleArray14, doubleArray16 };
        int[] intArray18 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray17, intArray18);
        double[] doubleArray26 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray33 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray40 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray47 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray48 = new double[][] { doubleArray26, doubleArray33, doubleArray40, doubleArray47 };
        double[][] doubleArray49 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray48);
        double[] doubleArray51 = new double[] { 1 };
        double[] doubleArray53 = new double[] { 1 };
        double[] doubleArray55 = new double[] { 1 };
        double[] doubleArray57 = new double[] { 1 };
        double[] doubleArray59 = new double[] { 1 };
        double[][] doubleArray60 = new double[][] { doubleArray51, doubleArray53, doubleArray55, doubleArray57, doubleArray59 };
        int[] intArray61 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray60, intArray61);
        double[][] doubleArray63 = new double[][] {};
        double[][] doubleArray64 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray63);
        int[] intArray65 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray64, intArray65);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray60, intArray65);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray48, intArray65);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray17, intArray65);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray6, intArray65);
        double[][] doubleArray71 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray6);
        double[][] doubleArray72 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray6);
        java.lang.Class<?> wildcardClass73 = doubleArray72.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[]");
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[]");
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[]");
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertNotNull(wildcardClass73);
    }

    @Test
    public void test2203() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2203");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[][] doubleArray5 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[][] doubleArray6 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[][] doubleArray7 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray6);
        double[][] doubleArray8 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray6);
        double[][] doubleArray9 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray6);
        double[][] doubleArray10 = new double[][] {};
        double[][] doubleArray11 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray10);
        double[][] doubleArray12 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray11);
        double[][] doubleArray13 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray12);
        double[][] doubleArray14 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray12);
        double[][] doubleArray15 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray12);
        double[][] doubleArray16 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray12);
        double[] doubleArray18 = new double[] { 1 };
        double[] doubleArray20 = new double[] { 1 };
        double[] doubleArray22 = new double[] { 1 };
        double[] doubleArray24 = new double[] { 1 };
        double[] doubleArray26 = new double[] { 1 };
        double[][] doubleArray27 = new double[][] { doubleArray18, doubleArray20, doubleArray22, doubleArray24, doubleArray26 };
        int[] intArray28 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray27, intArray28);
        double[] doubleArray36 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray43 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray50 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray57 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray58 = new double[][] { doubleArray36, doubleArray43, doubleArray50, doubleArray57 };
        double[][] doubleArray59 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray58);
        double[] doubleArray61 = new double[] { 1 };
        double[] doubleArray63 = new double[] { 1 };
        double[] doubleArray65 = new double[] { 1 };
        double[] doubleArray67 = new double[] { 1 };
        double[] doubleArray69 = new double[] { 1 };
        double[][] doubleArray70 = new double[][] { doubleArray61, doubleArray63, doubleArray65, doubleArray67, doubleArray69 };
        int[] intArray71 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray70, intArray71);
        double[][] doubleArray73 = new double[][] {};
        double[][] doubleArray74 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray73);
        int[] intArray75 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray74, intArray75);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray70, intArray75);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray58, intArray75);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray27, intArray75);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray16, intArray75);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray9, intArray75);
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[]");
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[]");
    }

    @Test
    public void test2204() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2204");
        double[][] doubleArray0 = null;
        double[][] doubleArray1 = null;
        double[][] doubleArray2 = null;
        double[] doubleArray6 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray10 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray14 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray18 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray19 = new double[][] { doubleArray6, doubleArray10, doubleArray14, doubleArray18 };
        double[] doubleArray21 = new double[] { 1 };
        double[] doubleArray23 = new double[] { 1 };
        double[] doubleArray25 = new double[] { 1 };
        double[] doubleArray27 = new double[] { 1 };
        double[] doubleArray29 = new double[] { 1 };
        double[][] doubleArray30 = new double[][] { doubleArray21, doubleArray23, doubleArray25, doubleArray27, doubleArray29 };
        int[] intArray31 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray30, intArray31);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray19, intArray31);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray2, intArray31);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray1, intArray31);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray0, intArray31);
        java.lang.Class<?> wildcardClass37 = intArray31.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[]");
        org.junit.Assert.assertNotNull(wildcardClass37);
    }

    @Test
    public void test2205() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2205");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = new double[][] {};
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[] doubleArray8 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray12 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray16 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray20 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray21 = new double[][] { doubleArray8, doubleArray12, doubleArray16, doubleArray20 };
        double[] doubleArray23 = new double[] { 1 };
        double[] doubleArray25 = new double[] { 1 };
        double[] doubleArray27 = new double[] { 1 };
        double[] doubleArray29 = new double[] { 1 };
        double[] doubleArray31 = new double[] { 1 };
        double[][] doubleArray32 = new double[][] { doubleArray23, doubleArray25, doubleArray27, doubleArray29, doubleArray31 };
        int[] intArray33 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray32, intArray33);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray21, intArray33);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray3, intArray33);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray1, intArray33);
        double[][] doubleArray38 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray39 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray38);
        double[][] doubleArray40 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray38);
        double[][] doubleArray41 = new double[][] {};
        double[][] doubleArray42 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray41);
        double[][] doubleArray43 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray41);
        double[][] doubleArray44 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray41);
        double[] doubleArray51 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray58 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray65 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray72 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray73 = new double[][] { doubleArray51, doubleArray58, doubleArray65, doubleArray72 };
        double[][] doubleArray74 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray73);
        double[][] doubleArray75 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray73);
        double[][] doubleArray76 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray73);
        double[][] doubleArray77 = new double[][] {};
        double[][] doubleArray78 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray77);
        int[] intArray79 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray78, intArray79);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray76, intArray79);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray44, intArray79);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray38, intArray79);
        double[][] doubleArray84 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray38);
        double[][] doubleArray85 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray38);
        double[][] doubleArray86 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray38);
        double[][] doubleArray87 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray38);
        java.lang.Class<?> wildcardClass88 = doubleArray87.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray79), "[]");
        org.junit.Assert.assertNotNull(doubleArray84);
        org.junit.Assert.assertNotNull(doubleArray85);
        org.junit.Assert.assertNotNull(doubleArray86);
        org.junit.Assert.assertNotNull(doubleArray87);
        org.junit.Assert.assertNotNull(wildcardClass88);
    }

    @Test
    public void test2206() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2206");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray30 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray31 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        double[][] doubleArray32 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        double[][] doubleArray33 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        double[] doubleArray40 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray47 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray54 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray61 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray62 = new double[][] { doubleArray40, doubleArray47, doubleArray54, doubleArray61 };
        double[][] doubleArray63 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray62);
        double[] doubleArray65 = new double[] { 1 };
        double[] doubleArray67 = new double[] { 1 };
        double[] doubleArray69 = new double[] { 1 };
        double[] doubleArray71 = new double[] { 1 };
        double[] doubleArray73 = new double[] { 1 };
        double[][] doubleArray74 = new double[][] { doubleArray65, doubleArray67, doubleArray69, doubleArray71, doubleArray73 };
        int[] intArray75 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray74, intArray75);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray63, intArray75);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray30, intArray75);
        java.lang.Class<?> wildcardClass79 = doubleArray30.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray71), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray73), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[]");
        org.junit.Assert.assertNotNull(wildcardClass79);
    }

    @Test
    public void test2207() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2207");
        double[][] doubleArray0 = null;
        double[][] doubleArray1 = new double[][] {};
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray5 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray4);
        double[][] doubleArray6 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray4);
        double[][] doubleArray7 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray4);
        double[][] doubleArray8 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray4);
        double[][] doubleArray9 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray4);
        double[][] doubleArray10 = new double[][] {};
        double[][] doubleArray11 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray10);
        double[] doubleArray13 = new double[] { 1 };
        double[] doubleArray15 = new double[] { 1 };
        double[] doubleArray17 = new double[] { 1 };
        double[] doubleArray19 = new double[] { 1 };
        double[] doubleArray21 = new double[] { 1 };
        double[][] doubleArray22 = new double[][] { doubleArray13, doubleArray15, doubleArray17, doubleArray19, doubleArray21 };
        int[] intArray23 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray22, intArray23);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray10, intArray23);
        double[] doubleArray32 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray39 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray46 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray53 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray54 = new double[][] { doubleArray32, doubleArray39, doubleArray46, doubleArray53 };
        double[][] doubleArray55 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray54);
        double[][] doubleArray56 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray55);
        double[][] doubleArray57 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray55);
        double[][] doubleArray58 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray55);
        double[][] doubleArray59 = new double[][] {};
        double[][] doubleArray60 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray59);
        double[][] doubleArray61 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray59);
        double[][] doubleArray62 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray61);
        double[][] doubleArray63 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray61);
        double[][] doubleArray64 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray63);
        double[][] doubleArray65 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray64);
        double[][] doubleArray66 = new double[][] {};
        double[][] doubleArray67 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray66);
        int[] intArray68 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray67, intArray68);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray65, intArray68);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray55, intArray68);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray10, intArray68);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray4, intArray68);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray0, intArray68);
        java.lang.Class<?> wildcardClass75 = intArray68.getClass();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[]");
        org.junit.Assert.assertNotNull(wildcardClass75);
    }

    @Test
    public void test2208() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2208");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[][] doubleArray5 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[][] doubleArray6 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[][] doubleArray7 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray6);
        double[][] doubleArray8 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray6);
        double[][] doubleArray9 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray6);
        java.lang.Class<?> wildcardClass10 = doubleArray6.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertNotNull(wildcardClass10);
    }

    @Test
    public void test2209() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2209");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray30 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray31 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray32 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[] doubleArray39 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray46 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray53 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray60 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray61 = new double[][] { doubleArray39, doubleArray46, doubleArray53, doubleArray60 };
        double[][] doubleArray62 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray61);
        double[][] doubleArray63 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray61);
        double[][] doubleArray64 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray61);
        double[][] doubleArray65 = new double[][] {};
        double[][] doubleArray66 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray65);
        int[] intArray67 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray66, intArray67);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray64, intArray67);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray28, intArray67);
        double[][] doubleArray71 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray72 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray73 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray72);
        double[][] doubleArray74 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray73);
        double[][] doubleArray75 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray73);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[]");
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertNotNull(doubleArray75);
    }

    @Test
    public void test2210() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2210");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[][] doubleArray5 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[][] doubleArray6 = new double[][] {};
        double[][] doubleArray7 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray6);
        double[][] doubleArray8 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray7);
        double[] doubleArray15 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray22 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray29 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray36 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray37 = new double[][] { doubleArray15, doubleArray22, doubleArray29, doubleArray36 };
        double[][] doubleArray38 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray37);
        double[] doubleArray40 = new double[] { 1 };
        double[] doubleArray42 = new double[] { 1 };
        double[] doubleArray44 = new double[] { 1 };
        double[] doubleArray46 = new double[] { 1 };
        double[] doubleArray48 = new double[] { 1 };
        double[][] doubleArray49 = new double[][] { doubleArray40, doubleArray42, doubleArray44, doubleArray46, doubleArray48 };
        int[] intArray50 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray49, intArray50);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray38, intArray50);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray7, intArray50);
        double[] doubleArray57 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray61 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray65 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray69 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray70 = new double[][] { doubleArray57, doubleArray61, doubleArray65, doubleArray69 };
        double[] doubleArray72 = new double[] { 1 };
        double[] doubleArray74 = new double[] { 1 };
        double[] doubleArray76 = new double[] { 1 };
        double[] doubleArray78 = new double[] { 1 };
        double[] doubleArray80 = new double[] { 1 };
        double[][] doubleArray81 = new double[][] { doubleArray72, doubleArray74, doubleArray76, doubleArray78, doubleArray80 };
        int[] intArray82 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray81, intArray82);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray70, intArray82);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray7, intArray82);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray3, intArray82);
        double[][] doubleArray87 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[][] doubleArray88 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray87);
        double[][] doubleArray89 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray88);
        java.lang.Class<?> wildcardClass90 = doubleArray88.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[]");
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray74), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray78), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray80), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray81);
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[]");
        org.junit.Assert.assertNotNull(doubleArray87);
        org.junit.Assert.assertNotNull(doubleArray88);
        org.junit.Assert.assertNotNull(doubleArray89);
        org.junit.Assert.assertNotNull(wildcardClass90);
    }

    @Test
    public void test2211() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2211");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[] doubleArray36 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray43 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray50 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray57 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray58 = new double[][] { doubleArray36, doubleArray43, doubleArray50, doubleArray57 };
        double[][] doubleArray59 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray58);
        double[][] doubleArray60 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray58);
        double[][] doubleArray61 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray58);
        double[][] doubleArray62 = new double[][] {};
        double[][] doubleArray63 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray62);
        int[] intArray64 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray63, intArray64);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray61, intArray64);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray29, intArray64);
        double[][] doubleArray68 = null;
        double[] doubleArray70 = new double[] { 1 };
        double[] doubleArray72 = new double[] { 1 };
        double[] doubleArray74 = new double[] { 1 };
        double[] doubleArray76 = new double[] { 1 };
        double[] doubleArray78 = new double[] { 1 };
        double[][] doubleArray79 = new double[][] { doubleArray70, doubleArray72, doubleArray74, doubleArray76, doubleArray78 };
        int[] intArray80 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray79, intArray80);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray68, intArray80);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray29, intArray80);
        double[][] doubleArray84 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray29);
        double[][] doubleArray85 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[]");
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray70), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray74), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray78), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[]");
        org.junit.Assert.assertNotNull(doubleArray84);
        org.junit.Assert.assertNotNull(doubleArray85);
    }

    @Test
    public void test2212() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2212");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[] doubleArray31 = new double[] { 1 };
        double[] doubleArray33 = new double[] { 1 };
        double[] doubleArray35 = new double[] { 1 };
        double[] doubleArray37 = new double[] { 1 };
        double[] doubleArray39 = new double[] { 1 };
        double[][] doubleArray40 = new double[][] { doubleArray31, doubleArray33, doubleArray35, doubleArray37, doubleArray39 };
        int[] intArray41 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray40, intArray41);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray29, intArray41);
        double[][] doubleArray44 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray29);
        double[][] doubleArray45 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray29);
        java.lang.Class<?> wildcardClass46 = doubleArray29.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertNotNull(wildcardClass46);
    }

    @Test
    public void test2213() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2213");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = new double[][] {};
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[] doubleArray5 = new double[] { 1 };
        double[] doubleArray7 = new double[] { 1 };
        double[] doubleArray9 = new double[] { 1 };
        double[] doubleArray11 = new double[] { 1 };
        double[] doubleArray13 = new double[] { 1 };
        double[][] doubleArray14 = new double[][] { doubleArray5, doubleArray7, doubleArray9, doubleArray11, doubleArray13 };
        int[] intArray15 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray14, intArray15);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray2, intArray15);
        double[] doubleArray21 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray25 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray29 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray33 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray34 = new double[][] { doubleArray21, doubleArray25, doubleArray29, doubleArray33 };
        double[] doubleArray36 = new double[] { 1 };
        double[] doubleArray38 = new double[] { 1 };
        double[] doubleArray40 = new double[] { 1 };
        double[] doubleArray42 = new double[] { 1 };
        double[] doubleArray44 = new double[] { 1 };
        double[][] doubleArray45 = new double[][] { doubleArray36, doubleArray38, doubleArray40, doubleArray42, doubleArray44 };
        int[] intArray46 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray45, intArray46);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray34, intArray46);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray2, intArray46);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray1, intArray46);
        double[][] doubleArray51 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray52 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray51);
        double[][] doubleArray53 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray52);
        double[][] doubleArray54 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray53);
        double[][] doubleArray55 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray54);
        double[][] doubleArray56 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray55);
        double[][] doubleArray57 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray56);
        double[][] doubleArray58 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray56);
        double[][] doubleArray59 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray58);
        double[][] doubleArray60 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray59);
        java.lang.Class<?> wildcardClass61 = doubleArray59.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertNotNull(wildcardClass61);
    }

    @Test
    public void test2214() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2214");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray5 = new double[][] {};
        double[][] doubleArray6 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray5);
        double[][] doubleArray7 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray6);
        double[] doubleArray11 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray15 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray19 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray23 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray24 = new double[][] { doubleArray11, doubleArray15, doubleArray19, doubleArray23 };
        double[] doubleArray26 = new double[] { 1 };
        double[] doubleArray28 = new double[] { 1 };
        double[] doubleArray30 = new double[] { 1 };
        double[] doubleArray32 = new double[] { 1 };
        double[] doubleArray34 = new double[] { 1 };
        double[][] doubleArray35 = new double[][] { doubleArray26, doubleArray28, doubleArray30, doubleArray32, doubleArray34 };
        int[] intArray36 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray35, intArray36);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray24, intArray36);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray7, intArray36);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray0, intArray36);
        double[][] doubleArray41 = new double[][] {};
        double[][] doubleArray42 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray41);
        double[][] doubleArray43 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray42);
        double[][] doubleArray44 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray43);
        double[][] doubleArray45 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray43);
        double[][] doubleArray46 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray43);
        double[][] doubleArray47 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray43);
        double[] doubleArray54 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray61 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray68 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray75 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray76 = new double[][] { doubleArray54, doubleArray61, doubleArray68, doubleArray75 };
        double[][] doubleArray77 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray76);
        double[][] doubleArray78 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray76);
        double[][] doubleArray79 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray76);
        double[][] doubleArray80 = new double[][] {};
        double[][] doubleArray81 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray80);
        int[] intArray82 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray81, intArray82);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray79, intArray82);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray47, intArray82);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray0, intArray82);
        double[][] doubleArray87 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        java.lang.Class<?> wildcardClass88 = doubleArray0.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray75), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertNotNull(doubleArray81);
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[]");
        org.junit.Assert.assertNotNull(doubleArray87);
        org.junit.Assert.assertNotNull(wildcardClass88);
    }

    @Test
    public void test2215() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2215");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[][] doubleArray5 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[][] doubleArray6 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray5);
        double[][] doubleArray7 = null;
        double[][] doubleArray8 = new double[][] {};
        double[][] doubleArray9 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray8);
        double[][] doubleArray10 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray8);
        double[][] doubleArray11 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray10);
        double[][] doubleArray12 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray11);
        double[][] doubleArray13 = new double[][] {};
        double[][] doubleArray14 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray13);
        double[][] doubleArray15 = new double[][] {};
        double[][] doubleArray16 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray15);
        double[][] doubleArray17 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray16);
        double[] doubleArray24 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray31 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray38 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray45 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray46 = new double[][] { doubleArray24, doubleArray31, doubleArray38, doubleArray45 };
        double[][] doubleArray47 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray46);
        double[] doubleArray49 = new double[] { 1 };
        double[] doubleArray51 = new double[] { 1 };
        double[] doubleArray53 = new double[] { 1 };
        double[] doubleArray55 = new double[] { 1 };
        double[] doubleArray57 = new double[] { 1 };
        double[][] doubleArray58 = new double[][] { doubleArray49, doubleArray51, doubleArray53, doubleArray55, doubleArray57 };
        int[] intArray59 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray58, intArray59);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray47, intArray59);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray16, intArray59);
        double[] doubleArray66 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray70 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray74 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray78 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray79 = new double[][] { doubleArray66, doubleArray70, doubleArray74, doubleArray78 };
        double[] doubleArray81 = new double[] { 1 };
        double[] doubleArray83 = new double[] { 1 };
        double[] doubleArray85 = new double[] { 1 };
        double[] doubleArray87 = new double[] { 1 };
        double[] doubleArray89 = new double[] { 1 };
        double[][] doubleArray90 = new double[][] { doubleArray81, doubleArray83, doubleArray85, doubleArray87, doubleArray89 };
        int[] intArray91 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray90, intArray91);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray79, intArray91);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray16, intArray91);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray13, intArray91);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray12, intArray91);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray7, intArray91);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray6, intArray91);
        java.lang.Class<?> wildcardClass99 = intArray91.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[]");
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray66), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray70), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray74), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray78), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertNotNull(doubleArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray81), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray83), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray85), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray87), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray89), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray90);
        org.junit.Assert.assertNotNull(intArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray91), "[]");
        org.junit.Assert.assertNotNull(wildcardClass99);
    }

    @Test
    public void test2216() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2216");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = new double[][] {};
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[] doubleArray5 = new double[] { 1 };
        double[] doubleArray7 = new double[] { 1 };
        double[] doubleArray9 = new double[] { 1 };
        double[] doubleArray11 = new double[] { 1 };
        double[] doubleArray13 = new double[] { 1 };
        double[][] doubleArray14 = new double[][] { doubleArray5, doubleArray7, doubleArray9, doubleArray11, doubleArray13 };
        int[] intArray15 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray14, intArray15);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray2, intArray15);
        double[] doubleArray21 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray25 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray29 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray33 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray34 = new double[][] { doubleArray21, doubleArray25, doubleArray29, doubleArray33 };
        double[] doubleArray36 = new double[] { 1 };
        double[] doubleArray38 = new double[] { 1 };
        double[] doubleArray40 = new double[] { 1 };
        double[] doubleArray42 = new double[] { 1 };
        double[] doubleArray44 = new double[] { 1 };
        double[][] doubleArray45 = new double[][] { doubleArray36, doubleArray38, doubleArray40, doubleArray42, doubleArray44 };
        int[] intArray46 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray45, intArray46);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray34, intArray46);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray2, intArray46);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray1, intArray46);
        double[][] doubleArray51 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray52 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray53 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray54 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray53);
        double[][] doubleArray55 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray54);
        double[][] doubleArray56 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray55);
        java.lang.Class<?> wildcardClass57 = doubleArray55.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertNotNull(wildcardClass57);
    }

    @Test
    public void test2217() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2217");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray30 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray31 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[] doubleArray33 = new double[] { 1 };
        double[] doubleArray35 = new double[] { 1 };
        double[] doubleArray37 = new double[] { 1 };
        double[] doubleArray39 = new double[] { 1 };
        double[] doubleArray41 = new double[] { 1 };
        double[][] doubleArray42 = new double[][] { doubleArray33, doubleArray35, doubleArray37, doubleArray39, doubleArray41 };
        int[] intArray43 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray42, intArray43);
        double[] doubleArray51 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray58 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray65 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray72 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray73 = new double[][] { doubleArray51, doubleArray58, doubleArray65, doubleArray72 };
        double[][] doubleArray74 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray73);
        double[] doubleArray76 = new double[] { 1 };
        double[] doubleArray78 = new double[] { 1 };
        double[] doubleArray80 = new double[] { 1 };
        double[] doubleArray82 = new double[] { 1 };
        double[] doubleArray84 = new double[] { 1 };
        double[][] doubleArray85 = new double[][] { doubleArray76, doubleArray78, doubleArray80, doubleArray82, doubleArray84 };
        int[] intArray86 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray85, intArray86);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray74, intArray86);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray42, intArray86);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray31, intArray86);
        double[][] doubleArray91 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray31);
        double[][] doubleArray92 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray31);
        double[][] doubleArray93 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray31);
        double[][] doubleArray94 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray31);
        double[][] doubleArray95 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray31);
        java.lang.Class<?> wildcardClass96 = doubleArray95.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray78), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray80), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray82), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray84), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray85);
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray86), "[]");
        org.junit.Assert.assertNotNull(doubleArray91);
        org.junit.Assert.assertNotNull(doubleArray92);
        org.junit.Assert.assertNotNull(doubleArray93);
        org.junit.Assert.assertNotNull(doubleArray94);
        org.junit.Assert.assertNotNull(doubleArray95);
        org.junit.Assert.assertNotNull(wildcardClass96);
    }

    @Test
    public void test2218() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2218");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[] doubleArray31 = new double[] { 1 };
        double[] doubleArray33 = new double[] { 1 };
        double[] doubleArray35 = new double[] { 1 };
        double[] doubleArray37 = new double[] { 1 };
        double[] doubleArray39 = new double[] { 1 };
        double[][] doubleArray40 = new double[][] { doubleArray31, doubleArray33, doubleArray35, doubleArray37, doubleArray39 };
        int[] intArray41 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray40, intArray41);
        double[][] doubleArray43 = new double[][] {};
        double[][] doubleArray44 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray43);
        int[] intArray45 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray44, intArray45);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray40, intArray45);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray28, intArray45);
        double[][] doubleArray49 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray50 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray51 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray52 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray53 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray52);
        double[][] doubleArray54 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray53);
        double[][] doubleArray55 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray54);
        double[][] doubleArray56 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray54);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertNotNull(doubleArray56);
    }

    @Test
    public void test2219() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2219");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = new double[][] {};
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[] doubleArray11 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray18 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray25 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray32 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray33 = new double[][] { doubleArray11, doubleArray18, doubleArray25, doubleArray32 };
        double[][] doubleArray34 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray33);
        double[] doubleArray36 = new double[] { 1 };
        double[] doubleArray38 = new double[] { 1 };
        double[] doubleArray40 = new double[] { 1 };
        double[] doubleArray42 = new double[] { 1 };
        double[] doubleArray44 = new double[] { 1 };
        double[][] doubleArray45 = new double[][] { doubleArray36, doubleArray38, doubleArray40, doubleArray42, doubleArray44 };
        int[] intArray46 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray45, intArray46);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray34, intArray46);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray3, intArray46);
        double[] doubleArray53 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray57 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray61 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray65 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray66 = new double[][] { doubleArray53, doubleArray57, doubleArray61, doubleArray65 };
        double[] doubleArray68 = new double[] { 1 };
        double[] doubleArray70 = new double[] { 1 };
        double[] doubleArray72 = new double[] { 1 };
        double[] doubleArray74 = new double[] { 1 };
        double[] doubleArray76 = new double[] { 1 };
        double[][] doubleArray77 = new double[][] { doubleArray68, doubleArray70, doubleArray72, doubleArray74, doubleArray76 };
        int[] intArray78 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray77, intArray78);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray66, intArray78);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray3, intArray78);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray0, intArray78);
        double[][] doubleArray83 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray84 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray85 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray84);
        double[][] doubleArray86 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray85);
        java.lang.Class<?> wildcardClass87 = doubleArray86.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[]");
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray70), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray74), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[]");
        org.junit.Assert.assertNotNull(doubleArray83);
        org.junit.Assert.assertNotNull(doubleArray84);
        org.junit.Assert.assertNotNull(doubleArray85);
        org.junit.Assert.assertNotNull(doubleArray86);
        org.junit.Assert.assertNotNull(wildcardClass87);
    }

    @Test
    public void test2220() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2220");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[] doubleArray3 = new double[] { 1 };
        double[] doubleArray5 = new double[] { 1 };
        double[] doubleArray7 = new double[] { 1 };
        double[] doubleArray9 = new double[] { 1 };
        double[] doubleArray11 = new double[] { 1 };
        double[][] doubleArray12 = new double[][] { doubleArray3, doubleArray5, doubleArray7, doubleArray9, doubleArray11 };
        int[] intArray13 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray12, intArray13);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray0, intArray13);
        double[][] doubleArray16 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray17 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray16);
        double[][] doubleArray18 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray17);
        double[][] doubleArray19 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray18);
        double[][] doubleArray20 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray18);
        double[][] doubleArray21 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray20);
        double[][] doubleArray22 = new double[][] {};
        double[][] doubleArray23 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray22);
        double[][] doubleArray24 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray22);
        double[] doubleArray26 = new double[] { 1 };
        double[] doubleArray28 = new double[] { 1 };
        double[] doubleArray30 = new double[] { 1 };
        double[] doubleArray32 = new double[] { 1 };
        double[] doubleArray34 = new double[] { 1 };
        double[][] doubleArray35 = new double[][] { doubleArray26, doubleArray28, doubleArray30, doubleArray32, doubleArray34 };
        int[] intArray36 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray35, intArray36);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray24, intArray36);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray21, intArray36);
        java.lang.Class<?> wildcardClass40 = doubleArray21.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[]");
        org.junit.Assert.assertNotNull(wildcardClass40);
    }

    @Test
    public void test2221() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2221");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[] doubleArray3 = new double[] { 1 };
        double[] doubleArray5 = new double[] { 1 };
        double[] doubleArray7 = new double[] { 1 };
        double[] doubleArray9 = new double[] { 1 };
        double[] doubleArray11 = new double[] { 1 };
        double[][] doubleArray12 = new double[][] { doubleArray3, doubleArray5, doubleArray7, doubleArray9, doubleArray11 };
        int[] intArray13 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray12, intArray13);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray0, intArray13);
        double[][] doubleArray16 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray17 = new double[][] {};
        double[][] doubleArray18 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray17);
        double[][] doubleArray19 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray17);
        double[][] doubleArray20 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray17);
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray34 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray41 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray48 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray49 = new double[][] { doubleArray27, doubleArray34, doubleArray41, doubleArray48 };
        double[][] doubleArray50 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray49);
        double[][] doubleArray51 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray50);
        double[][] doubleArray52 = new double[][] {};
        double[][] doubleArray53 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray52);
        double[] doubleArray55 = new double[] { 1 };
        double[] doubleArray57 = new double[] { 1 };
        double[] doubleArray59 = new double[] { 1 };
        double[] doubleArray61 = new double[] { 1 };
        double[] doubleArray63 = new double[] { 1 };
        double[][] doubleArray64 = new double[][] { doubleArray55, doubleArray57, doubleArray59, doubleArray61, doubleArray63 };
        int[] intArray65 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray64, intArray65);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray52, intArray65);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray51, intArray65);
        double[][] doubleArray69 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray51);
        double[] doubleArray71 = new double[] { 1 };
        double[] doubleArray73 = new double[] { 1 };
        double[] doubleArray75 = new double[] { 1 };
        double[] doubleArray77 = new double[] { 1 };
        double[] doubleArray79 = new double[] { 1 };
        double[][] doubleArray80 = new double[][] { doubleArray71, doubleArray73, doubleArray75, doubleArray77, doubleArray79 };
        int[] intArray81 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray80, intArray81);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray69, intArray81);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray17, intArray81);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray16, intArray81);
        double[][] doubleArray86 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray16);
        double[][] doubleArray87 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray16);
        java.lang.Class<?> wildcardClass88 = doubleArray16.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[]");
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray71), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray73), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray75), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray77), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray79), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray81), "[]");
        org.junit.Assert.assertNotNull(doubleArray86);
        org.junit.Assert.assertNotNull(doubleArray87);
        org.junit.Assert.assertNotNull(wildcardClass88);
    }

    @Test
    public void test2222() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2222");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray30 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray29);
        double[][] doubleArray31 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        double[][] doubleArray32 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        double[][] doubleArray33 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        double[][] doubleArray34 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        double[][] doubleArray35 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray34);
        double[][] doubleArray36 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray34);
        double[][] doubleArray37 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray36);
        double[][] doubleArray38 = new double[][] {};
        double[][] doubleArray39 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray38);
        double[][] doubleArray40 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray39);
        double[][] doubleArray41 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray40);
        double[][] doubleArray42 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray40);
        double[][] doubleArray43 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray40);
        double[][] doubleArray44 = new double[][] {};
        double[][] doubleArray45 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray44);
        double[][] doubleArray46 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray44);
        double[] doubleArray53 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray60 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray67 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray74 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray75 = new double[][] { doubleArray53, doubleArray60, doubleArray67, doubleArray74 };
        double[][] doubleArray76 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray75);
        double[][] doubleArray77 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray75);
        double[][] doubleArray78 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray75);
        double[][] doubleArray79 = new double[][] {};
        double[][] doubleArray80 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray79);
        int[] intArray81 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray80, intArray81);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray78, intArray81);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray46, intArray81);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray40, intArray81);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray37, intArray81);
        int[] intArray87 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray37, intArray87);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray74), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray81), "[]");
    }

    @Test
    public void test2223() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2223");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray30 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray29);
        double[][] doubleArray31 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        double[][] doubleArray32 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        double[][] doubleArray33 = new double[][] {};
        double[][] doubleArray34 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray33);
        double[][] doubleArray35 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray33);
        double[][] doubleArray36 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray33);
        double[][] doubleArray37 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray36);
        double[] doubleArray39 = new double[] { 1 };
        double[] doubleArray41 = new double[] { 1 };
        double[] doubleArray43 = new double[] { 1 };
        double[] doubleArray45 = new double[] { 1 };
        double[] doubleArray47 = new double[] { 1 };
        double[][] doubleArray48 = new double[][] { doubleArray39, doubleArray41, doubleArray43, doubleArray45, doubleArray47 };
        int[] intArray49 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray48, intArray49);
        double[][] doubleArray51 = new double[][] {};
        double[][] doubleArray52 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray51);
        int[] intArray53 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray52, intArray53);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray48, intArray53);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray36, intArray53);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray32, intArray53);
        double[][] doubleArray58 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray32);
        double[][] doubleArray59 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray32);
        double[][] doubleArray60 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray32);
        java.lang.Class<?> wildcardClass61 = doubleArray32.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[]");
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertNotNull(wildcardClass61);
    }

    @Test
    public void test2224() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2224");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray30 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray29);
        double[][] doubleArray31 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray29);
        double[][] doubleArray32 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray29);
        double[][] doubleArray33 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray32);
        double[][] doubleArray34 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray33);
        java.lang.Class<?> wildcardClass35 = doubleArray33.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertNotNull(wildcardClass35);
    }

    @Test
    public void test2225() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2225");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray30 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray29);
        double[][] doubleArray31 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        double[][] doubleArray32 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray31);
        double[][] doubleArray33 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray31);
        double[][] doubleArray34 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray31);
        double[][] doubleArray35 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray34);
        double[][] doubleArray36 = new double[][] {};
        double[][] doubleArray37 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray36);
        double[][] doubleArray38 = new double[][] {};
        double[][] doubleArray39 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray38);
        double[][] doubleArray40 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray39);
        double[] doubleArray44 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray48 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray52 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray56 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray57 = new double[][] { doubleArray44, doubleArray48, doubleArray52, doubleArray56 };
        double[] doubleArray59 = new double[] { 1 };
        double[] doubleArray61 = new double[] { 1 };
        double[] doubleArray63 = new double[] { 1 };
        double[] doubleArray65 = new double[] { 1 };
        double[] doubleArray67 = new double[] { 1 };
        double[][] doubleArray68 = new double[][] { doubleArray59, doubleArray61, doubleArray63, doubleArray65, doubleArray67 };
        int[] intArray69 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray68, intArray69);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray57, intArray69);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray39, intArray69);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray37, intArray69);
        double[][] doubleArray74 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray37);
        double[][] doubleArray75 = new double[][] {};
        double[][] doubleArray76 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray75);
        double[] doubleArray78 = new double[] { 1 };
        double[] doubleArray80 = new double[] { 1 };
        double[] doubleArray82 = new double[] { 1 };
        double[] doubleArray84 = new double[] { 1 };
        double[] doubleArray86 = new double[] { 1 };
        double[][] doubleArray87 = new double[][] { doubleArray78, doubleArray80, doubleArray82, doubleArray84, doubleArray86 };
        int[] intArray88 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray87, intArray88);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray75, intArray88);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray37, intArray88);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray35, intArray88);
        java.lang.Class<?> wildcardClass93 = intArray88.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[]");
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray78), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray80), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray82), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray84), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray86), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray87);
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray88), "[]");
        org.junit.Assert.assertNotNull(wildcardClass93);
    }

    @Test
    public void test2226() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2226");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[] doubleArray3 = new double[] { 1 };
        double[] doubleArray5 = new double[] { 1 };
        double[] doubleArray7 = new double[] { 1 };
        double[] doubleArray9 = new double[] { 1 };
        double[] doubleArray11 = new double[] { 1 };
        double[][] doubleArray12 = new double[][] { doubleArray3, doubleArray5, doubleArray7, doubleArray9, doubleArray11 };
        int[] intArray13 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray12, intArray13);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray0, intArray13);
        double[] doubleArray19 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray23 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray27 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray31 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray32 = new double[][] { doubleArray19, doubleArray23, doubleArray27, doubleArray31 };
        double[] doubleArray34 = new double[] { 1 };
        double[] doubleArray36 = new double[] { 1 };
        double[] doubleArray38 = new double[] { 1 };
        double[] doubleArray40 = new double[] { 1 };
        double[] doubleArray42 = new double[] { 1 };
        double[][] doubleArray43 = new double[][] { doubleArray34, doubleArray36, doubleArray38, doubleArray40, doubleArray42 };
        int[] intArray44 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray43, intArray44);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray32, intArray44);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray0, intArray44);
        double[] doubleArray49 = new double[] { 1 };
        double[] doubleArray51 = new double[] { 1 };
        double[] doubleArray53 = new double[] { 1 };
        double[] doubleArray55 = new double[] { 1 };
        double[] doubleArray57 = new double[] { 1 };
        double[][] doubleArray58 = new double[][] { doubleArray49, doubleArray51, doubleArray53, doubleArray55, doubleArray57 };
        int[] intArray59 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray58, intArray59);
        double[][] doubleArray61 = new double[][] {};
        double[][] doubleArray62 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray61);
        int[] intArray63 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray62, intArray63);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray58, intArray63);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray0, intArray63);
        double[][] doubleArray67 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray68 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray69 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray70 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray69);
        double[][] doubleArray71 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray69);
        java.lang.Class<?> wildcardClass72 = doubleArray69.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[]");
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertNotNull(wildcardClass72);
    }

    @Test
    public void test2227() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2227");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[] doubleArray31 = new double[] { 1 };
        double[] doubleArray33 = new double[] { 1 };
        double[] doubleArray35 = new double[] { 1 };
        double[] doubleArray37 = new double[] { 1 };
        double[] doubleArray39 = new double[] { 1 };
        double[][] doubleArray40 = new double[][] { doubleArray31, doubleArray33, doubleArray35, doubleArray37, doubleArray39 };
        int[] intArray41 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray40, intArray41);
        double[][] doubleArray43 = new double[][] {};
        double[][] doubleArray44 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray43);
        int[] intArray45 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray44, intArray45);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray40, intArray45);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray28, intArray45);
        double[][] doubleArray49 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray50 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray49);
        double[][] doubleArray51 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray50);
        double[][] doubleArray52 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray50);
        double[][] doubleArray53 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray52);
        double[][] doubleArray54 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray52);
        double[][] doubleArray55 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray52);
        java.lang.Class<?> wildcardClass56 = doubleArray52.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertNotNull(wildcardClass56);
    }

    @Test
    public void test2228() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2228");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        int[] intArray2 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray1, intArray2);
        double[] doubleArray5 = new double[] { 1 };
        double[] doubleArray7 = new double[] { 1 };
        double[] doubleArray9 = new double[] { 1 };
        double[] doubleArray11 = new double[] { 1 };
        double[] doubleArray13 = new double[] { 1 };
        double[][] doubleArray14 = new double[][] { doubleArray5, doubleArray7, doubleArray9, doubleArray11, doubleArray13 };
        int[] intArray15 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray14, intArray15);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray1, intArray15);
        double[][] doubleArray18 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray19 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray20 = new double[][] {};
        double[][] doubleArray21 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray20);
        double[][] doubleArray22 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray20);
        double[][] doubleArray23 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray20);
        double[] doubleArray30 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray37 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray44 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray51 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray52 = new double[][] { doubleArray30, doubleArray37, doubleArray44, doubleArray51 };
        double[][] doubleArray53 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray52);
        double[][] doubleArray54 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray53);
        double[][] doubleArray55 = new double[][] {};
        double[][] doubleArray56 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray55);
        double[] doubleArray58 = new double[] { 1 };
        double[] doubleArray60 = new double[] { 1 };
        double[] doubleArray62 = new double[] { 1 };
        double[] doubleArray64 = new double[] { 1 };
        double[] doubleArray66 = new double[] { 1 };
        double[][] doubleArray67 = new double[][] { doubleArray58, doubleArray60, doubleArray62, doubleArray64, doubleArray66 };
        int[] intArray68 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray67, intArray68);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray55, intArray68);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray54, intArray68);
        double[][] doubleArray72 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray54);
        double[] doubleArray74 = new double[] { 1 };
        double[] doubleArray76 = new double[] { 1 };
        double[] doubleArray78 = new double[] { 1 };
        double[] doubleArray80 = new double[] { 1 };
        double[] doubleArray82 = new double[] { 1 };
        double[][] doubleArray83 = new double[][] { doubleArray74, doubleArray76, doubleArray78, doubleArray80, doubleArray82 };
        int[] intArray84 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray83, intArray84);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray72, intArray84);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray20, intArray84);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray1, intArray84);
        double[][] doubleArray89 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray90 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray89);
        double[][] doubleArray91 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray90);
        double[][] doubleArray92 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray91);
        double[][] doubleArray93 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray91);
        double[][] doubleArray94 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray93);
        java.lang.Class<?> wildcardClass95 = doubleArray93.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray66), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[]");
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray74), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray78), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray80), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray82), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray83);
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray84), "[]");
        org.junit.Assert.assertNotNull(doubleArray89);
        org.junit.Assert.assertNotNull(doubleArray90);
        org.junit.Assert.assertNotNull(doubleArray91);
        org.junit.Assert.assertNotNull(doubleArray92);
        org.junit.Assert.assertNotNull(doubleArray93);
        org.junit.Assert.assertNotNull(doubleArray94);
        org.junit.Assert.assertNotNull(wildcardClass95);
    }

    @Test
    public void test2229() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2229");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[] doubleArray31 = new double[] { 1 };
        double[] doubleArray33 = new double[] { 1 };
        double[] doubleArray35 = new double[] { 1 };
        double[] doubleArray37 = new double[] { 1 };
        double[] doubleArray39 = new double[] { 1 };
        double[][] doubleArray40 = new double[][] { doubleArray31, doubleArray33, doubleArray35, doubleArray37, doubleArray39 };
        int[] intArray41 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray40, intArray41);
        double[][] doubleArray43 = new double[][] {};
        double[][] doubleArray44 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray43);
        int[] intArray45 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray44, intArray45);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray40, intArray45);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray28, intArray45);
        double[][] doubleArray49 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[] doubleArray56 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray63 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray70 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray77 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray78 = new double[][] { doubleArray56, doubleArray63, doubleArray70, doubleArray77 };
        double[][] doubleArray79 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray78);
        double[][] doubleArray80 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray79);
        double[][] doubleArray81 = new double[][] {};
        double[][] doubleArray82 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray81);
        double[] doubleArray84 = new double[] { 1 };
        double[] doubleArray86 = new double[] { 1 };
        double[] doubleArray88 = new double[] { 1 };
        double[] doubleArray90 = new double[] { 1 };
        double[] doubleArray92 = new double[] { 1 };
        double[][] doubleArray93 = new double[][] { doubleArray84, doubleArray86, doubleArray88, doubleArray90, doubleArray92 };
        int[] intArray94 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray93, intArray94);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray81, intArray94);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray80, intArray94);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray49, intArray94);
        double[][] doubleArray99 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray49);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray70), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray77), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertNotNull(doubleArray81);
        org.junit.Assert.assertNotNull(doubleArray82);
        org.junit.Assert.assertNotNull(doubleArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray84), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray86), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray88), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray90), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray92), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray93);
        org.junit.Assert.assertNotNull(intArray94);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray94), "[]");
        org.junit.Assert.assertNotNull(doubleArray99);
    }

    @Test
    public void test2230() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2230");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray30 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray29);
        double[][] doubleArray31 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray29);
        double[][] doubleArray32 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray29);
        double[][] doubleArray33 = new double[][] {};
        double[][] doubleArray34 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray33);
        double[][] doubleArray35 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray33);
        double[][] doubleArray36 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray35);
        double[][] doubleArray37 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray35);
        double[][] doubleArray38 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray37);
        double[][] doubleArray39 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray38);
        double[][] doubleArray40 = new double[][] {};
        double[][] doubleArray41 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray40);
        int[] intArray42 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray41, intArray42);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray39, intArray42);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray29, intArray42);
        double[][] doubleArray46 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray29);
        double[][] doubleArray47 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray29);
        java.lang.Class<?> wildcardClass48 = doubleArray47.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[]");
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertNotNull(wildcardClass48);
    }

    @Test
    public void test2231() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2231");
        double[][] doubleArray0 = null;
        double[][] doubleArray1 = new double[][] {};
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray3 = new double[][] {};
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[][] doubleArray5 = new double[][] {};
        double[][] doubleArray6 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray5);
        double[][] doubleArray7 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray6);
        double[] doubleArray11 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray15 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray19 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray23 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray24 = new double[][] { doubleArray11, doubleArray15, doubleArray19, doubleArray23 };
        double[] doubleArray26 = new double[] { 1 };
        double[] doubleArray28 = new double[] { 1 };
        double[] doubleArray30 = new double[] { 1 };
        double[] doubleArray32 = new double[] { 1 };
        double[] doubleArray34 = new double[] { 1 };
        double[][] doubleArray35 = new double[][] { doubleArray26, doubleArray28, doubleArray30, doubleArray32, doubleArray34 };
        int[] intArray36 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray35, intArray36);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray24, intArray36);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray6, intArray36);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray4, intArray36);
        double[][] doubleArray41 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray4);
        double[][] doubleArray42 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray41);
        double[] doubleArray44 = new double[] { 1 };
        double[] doubleArray46 = new double[] { 1 };
        double[] doubleArray48 = new double[] { 1 };
        double[] doubleArray50 = new double[] { 1 };
        double[] doubleArray52 = new double[] { 1 };
        double[][] doubleArray53 = new double[][] { doubleArray44, doubleArray46, doubleArray48, doubleArray50, doubleArray52 };
        int[] intArray54 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray53, intArray54);
        double[][] doubleArray56 = new double[][] {};
        double[][] doubleArray57 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray56);
        int[] intArray58 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray57, intArray58);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray53, intArray58);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray41, intArray58);
        double[][] doubleArray62 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray41);
        double[][] doubleArray63 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray41);
        double[][] doubleArray64 = null;
        double[] doubleArray68 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray72 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray76 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray80 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray81 = new double[][] { doubleArray68, doubleArray72, doubleArray76, doubleArray80 };
        double[] doubleArray83 = new double[] { 1 };
        double[] doubleArray85 = new double[] { 1 };
        double[] doubleArray87 = new double[] { 1 };
        double[] doubleArray89 = new double[] { 1 };
        double[] doubleArray91 = new double[] { 1 };
        double[][] doubleArray92 = new double[][] { doubleArray83, doubleArray85, doubleArray87, doubleArray89, doubleArray91 };
        int[] intArray93 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray92, intArray93);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray81, intArray93);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray64, intArray93);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray41, intArray93);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray2, intArray93);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray0, intArray93);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[]");
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[]");
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray80), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray81);
        org.junit.Assert.assertNotNull(doubleArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray83), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray85), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray87), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray89), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray91), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray92);
        org.junit.Assert.assertNotNull(intArray93);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray93), "[]");
    }

    @Test
    public void test2232() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2232");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[] doubleArray3 = new double[] { 1 };
        double[] doubleArray5 = new double[] { 1 };
        double[] doubleArray7 = new double[] { 1 };
        double[] doubleArray9 = new double[] { 1 };
        double[] doubleArray11 = new double[] { 1 };
        double[][] doubleArray12 = new double[][] { doubleArray3, doubleArray5, doubleArray7, doubleArray9, doubleArray11 };
        int[] intArray13 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray12, intArray13);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray0, intArray13);
        double[] doubleArray19 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray23 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray27 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray31 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray32 = new double[][] { doubleArray19, doubleArray23, doubleArray27, doubleArray31 };
        double[] doubleArray34 = new double[] { 1 };
        double[] doubleArray36 = new double[] { 1 };
        double[] doubleArray38 = new double[] { 1 };
        double[] doubleArray40 = new double[] { 1 };
        double[] doubleArray42 = new double[] { 1 };
        double[][] doubleArray43 = new double[][] { doubleArray34, doubleArray36, doubleArray38, doubleArray40, doubleArray42 };
        int[] intArray44 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray43, intArray44);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray32, intArray44);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray0, intArray44);
        double[] doubleArray49 = new double[] { 1 };
        double[] doubleArray51 = new double[] { 1 };
        double[] doubleArray53 = new double[] { 1 };
        double[] doubleArray55 = new double[] { 1 };
        double[] doubleArray57 = new double[] { 1 };
        double[][] doubleArray58 = new double[][] { doubleArray49, doubleArray51, doubleArray53, doubleArray55, doubleArray57 };
        int[] intArray59 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray58, intArray59);
        double[][] doubleArray61 = new double[][] {};
        double[][] doubleArray62 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray61);
        int[] intArray63 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray62, intArray63);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray58, intArray63);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray0, intArray63);
        double[][] doubleArray67 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray68 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray69 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray70 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray71 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray72 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray71);
        double[][] doubleArray73 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray71);
        java.lang.Class<?> wildcardClass74 = doubleArray71.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[]");
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertNotNull(wildcardClass74);
    }

    @Test
    public void test2233() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2233");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[] doubleArray31 = new double[] { 1 };
        double[] doubleArray33 = new double[] { 1 };
        double[] doubleArray35 = new double[] { 1 };
        double[] doubleArray37 = new double[] { 1 };
        double[] doubleArray39 = new double[] { 1 };
        double[][] doubleArray40 = new double[][] { doubleArray31, doubleArray33, doubleArray35, doubleArray37, doubleArray39 };
        int[] intArray41 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray40, intArray41);
        double[][] doubleArray43 = new double[][] {};
        double[][] doubleArray44 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray43);
        int[] intArray45 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray44, intArray45);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray40, intArray45);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray28, intArray45);
        double[][] doubleArray49 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray50 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray51 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray52 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray51);
        double[][] doubleArray53 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray51);
        double[][] doubleArray54 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray53);
        double[][] doubleArray55 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray53);
        java.lang.Class<?> wildcardClass56 = doubleArray55.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertNotNull(wildcardClass56);
    }

    @Test
    public void test2234() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2234");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = new double[][] {};
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[] doubleArray5 = new double[] { 1 };
        double[] doubleArray7 = new double[] { 1 };
        double[] doubleArray9 = new double[] { 1 };
        double[] doubleArray11 = new double[] { 1 };
        double[] doubleArray13 = new double[] { 1 };
        double[][] doubleArray14 = new double[][] { doubleArray5, doubleArray7, doubleArray9, doubleArray11, doubleArray13 };
        int[] intArray15 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray14, intArray15);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray2, intArray15);
        double[] doubleArray21 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray25 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray29 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray33 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray34 = new double[][] { doubleArray21, doubleArray25, doubleArray29, doubleArray33 };
        double[] doubleArray36 = new double[] { 1 };
        double[] doubleArray38 = new double[] { 1 };
        double[] doubleArray40 = new double[] { 1 };
        double[] doubleArray42 = new double[] { 1 };
        double[] doubleArray44 = new double[] { 1 };
        double[][] doubleArray45 = new double[][] { doubleArray36, doubleArray38, doubleArray40, doubleArray42, doubleArray44 };
        int[] intArray46 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray45, intArray46);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray34, intArray46);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray2, intArray46);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray1, intArray46);
        double[][] doubleArray51 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray52 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray53 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray54 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray53);
        double[][] doubleArray55 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray54);
        double[][] doubleArray56 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray54);
        java.lang.Class<?> wildcardClass57 = doubleArray56.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertNotNull(wildcardClass57);
    }

    @Test
    public void test2235() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2235");
        double[][] doubleArray0 = null;
        double[][] doubleArray1 = new double[][] {};
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        int[] intArray3 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray2, intArray3);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray0, intArray3);
        java.lang.Class<?> wildcardClass6 = intArray3.getClass();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[]");
        org.junit.Assert.assertNotNull(wildcardClass6);
    }

    @Test
    public void test2236() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2236");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[] doubleArray6 = new double[] { 1 };
        double[] doubleArray8 = new double[] { 1 };
        double[] doubleArray10 = new double[] { 1 };
        double[] doubleArray12 = new double[] { 1 };
        double[] doubleArray14 = new double[] { 1 };
        double[][] doubleArray15 = new double[][] { doubleArray6, doubleArray8, doubleArray10, doubleArray12, doubleArray14 };
        int[] intArray16 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray15, intArray16);
        double[][] doubleArray18 = new double[][] {};
        double[][] doubleArray19 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray18);
        int[] intArray20 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray19, intArray20);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray15, intArray20);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray3, intArray20);
        double[][] doubleArray24 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[][] doubleArray25 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray24);
        double[][] doubleArray26 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray25);
        java.lang.Class<?> wildcardClass27 = doubleArray25.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[]");
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertNotNull(wildcardClass27);
    }

    @Test
    public void test2237() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2237");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray30 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray29);
        double[][] doubleArray31 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        double[][] doubleArray32 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        double[][] doubleArray33 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        double[][] doubleArray34 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        double[][] doubleArray35 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray34);
        double[][] doubleArray36 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray35);
        double[][] doubleArray37 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray35);
        double[][] doubleArray38 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray35);
        double[][] doubleArray39 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray38);
        double[][] doubleArray40 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray39);
        java.lang.Class<?> wildcardClass41 = doubleArray40.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertNotNull(wildcardClass41);
    }

    @Test
    public void test2238() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2238");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = new double[][] {};
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[] doubleArray8 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray12 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray16 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray20 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray21 = new double[][] { doubleArray8, doubleArray12, doubleArray16, doubleArray20 };
        double[] doubleArray23 = new double[] { 1 };
        double[] doubleArray25 = new double[] { 1 };
        double[] doubleArray27 = new double[] { 1 };
        double[] doubleArray29 = new double[] { 1 };
        double[] doubleArray31 = new double[] { 1 };
        double[][] doubleArray32 = new double[][] { doubleArray23, doubleArray25, doubleArray27, doubleArray29, doubleArray31 };
        int[] intArray33 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray32, intArray33);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray21, intArray33);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray3, intArray33);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray1, intArray33);
        double[][] doubleArray38 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray39 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray38);
        double[][] doubleArray40 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray39);
        double[][] doubleArray41 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray39);
        double[][] doubleArray42 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray41);
        double[][] doubleArray43 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray41);
        double[][] doubleArray44 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray43);
        double[][] doubleArray45 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray43);
        double[][] doubleArray46 = null;
        double[][] doubleArray47 = new double[][] {};
        double[][] doubleArray48 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray47);
        double[][] doubleArray49 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray48);
        double[][] doubleArray50 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray49);
        double[][] doubleArray51 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray49);
        double[][] doubleArray52 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray49);
        double[][] doubleArray53 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray49);
        double[] doubleArray60 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray67 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray74 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray81 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray82 = new double[][] { doubleArray60, doubleArray67, doubleArray74, doubleArray81 };
        double[][] doubleArray83 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray82);
        double[][] doubleArray84 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray82);
        double[][] doubleArray85 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray82);
        double[][] doubleArray86 = new double[][] {};
        double[][] doubleArray87 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray86);
        int[] intArray88 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray87, intArray88);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray85, intArray88);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray53, intArray88);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray46, intArray88);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray43, intArray88);
        java.lang.Class<?> wildcardClass94 = doubleArray43.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray74), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray81), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray82);
        org.junit.Assert.assertNotNull(doubleArray83);
        org.junit.Assert.assertNotNull(doubleArray84);
        org.junit.Assert.assertNotNull(doubleArray85);
        org.junit.Assert.assertNotNull(doubleArray86);
        org.junit.Assert.assertNotNull(doubleArray87);
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray88), "[]");
        org.junit.Assert.assertNotNull(wildcardClass94);
    }

    @Test
    public void test2239() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2239");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray30 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray29);
        double[][] doubleArray31 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        double[][] doubleArray32 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        double[][] doubleArray33 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        double[][] doubleArray34 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        double[][] doubleArray35 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray34);
        double[][] doubleArray36 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray35);
        double[][] doubleArray37 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray35);
        double[][] doubleArray38 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray35);
        double[][] doubleArray39 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray38);
        double[][] doubleArray40 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray39);
        java.lang.Class<?> wildcardClass41 = doubleArray39.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertNotNull(wildcardClass41);
    }

    @Test
    public void test2240() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2240");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = new double[][] {};
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[] doubleArray5 = new double[] { 1 };
        double[] doubleArray7 = new double[] { 1 };
        double[] doubleArray9 = new double[] { 1 };
        double[] doubleArray11 = new double[] { 1 };
        double[] doubleArray13 = new double[] { 1 };
        double[][] doubleArray14 = new double[][] { doubleArray5, doubleArray7, doubleArray9, doubleArray11, doubleArray13 };
        int[] intArray15 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray14, intArray15);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray2, intArray15);
        double[] doubleArray21 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray25 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray29 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray33 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray34 = new double[][] { doubleArray21, doubleArray25, doubleArray29, doubleArray33 };
        double[] doubleArray36 = new double[] { 1 };
        double[] doubleArray38 = new double[] { 1 };
        double[] doubleArray40 = new double[] { 1 };
        double[] doubleArray42 = new double[] { 1 };
        double[] doubleArray44 = new double[] { 1 };
        double[][] doubleArray45 = new double[][] { doubleArray36, doubleArray38, doubleArray40, doubleArray42, doubleArray44 };
        int[] intArray46 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray45, intArray46);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray34, intArray46);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray2, intArray46);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray1, intArray46);
        double[][] doubleArray51 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray52 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray53 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray54 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertNotNull(doubleArray54);
    }

    @Test
    public void test2241() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2241");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = new double[][] {};
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[] doubleArray11 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray18 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray25 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray32 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray33 = new double[][] { doubleArray11, doubleArray18, doubleArray25, doubleArray32 };
        double[][] doubleArray34 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray33);
        double[] doubleArray36 = new double[] { 1 };
        double[] doubleArray38 = new double[] { 1 };
        double[] doubleArray40 = new double[] { 1 };
        double[] doubleArray42 = new double[] { 1 };
        double[] doubleArray44 = new double[] { 1 };
        double[][] doubleArray45 = new double[][] { doubleArray36, doubleArray38, doubleArray40, doubleArray42, doubleArray44 };
        int[] intArray46 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray45, intArray46);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray34, intArray46);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray3, intArray46);
        double[] doubleArray53 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray57 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray61 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray65 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray66 = new double[][] { doubleArray53, doubleArray57, doubleArray61, doubleArray65 };
        double[] doubleArray68 = new double[] { 1 };
        double[] doubleArray70 = new double[] { 1 };
        double[] doubleArray72 = new double[] { 1 };
        double[] doubleArray74 = new double[] { 1 };
        double[] doubleArray76 = new double[] { 1 };
        double[][] doubleArray77 = new double[][] { doubleArray68, doubleArray70, doubleArray72, doubleArray74, doubleArray76 };
        int[] intArray78 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray77, intArray78);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray66, intArray78);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray3, intArray78);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray0, intArray78);
        double[][] doubleArray83 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray84 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        java.lang.Class<?> wildcardClass85 = doubleArray84.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[]");
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray70), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray74), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[]");
        org.junit.Assert.assertNotNull(doubleArray83);
        org.junit.Assert.assertNotNull(doubleArray84);
        org.junit.Assert.assertNotNull(wildcardClass85);
    }

    @Test
    public void test2242() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2242");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[] doubleArray9 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray16 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray23 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray30 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray31 = new double[][] { doubleArray9, doubleArray16, doubleArray23, doubleArray30 };
        double[][] doubleArray32 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray31);
        double[][] doubleArray33 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray31);
        double[][] doubleArray34 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray31);
        double[][] doubleArray35 = new double[][] {};
        double[][] doubleArray36 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray35);
        int[] intArray37 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray36, intArray37);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray34, intArray37);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray2, intArray37);
        double[][] doubleArray41 = null;
        double[][] doubleArray42 = new double[][] {};
        double[][] doubleArray43 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray42);
        double[][] doubleArray44 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray43);
        double[] doubleArray48 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray52 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray56 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray60 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray61 = new double[][] { doubleArray48, doubleArray52, doubleArray56, doubleArray60 };
        double[] doubleArray63 = new double[] { 1 };
        double[] doubleArray65 = new double[] { 1 };
        double[] doubleArray67 = new double[] { 1 };
        double[] doubleArray69 = new double[] { 1 };
        double[] doubleArray71 = new double[] { 1 };
        double[][] doubleArray72 = new double[][] { doubleArray63, doubleArray65, doubleArray67, doubleArray69, doubleArray71 };
        int[] intArray73 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray72, intArray73);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray61, intArray73);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray44, intArray73);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray41, intArray73);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray2, intArray73);
        double[][] doubleArray79 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray80 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray79);
        double[][] doubleArray81 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray79);
        java.lang.Class<?> wildcardClass82 = doubleArray79.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray71), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[]");
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertNotNull(doubleArray81);
        org.junit.Assert.assertNotNull(wildcardClass82);
    }

    @Test
    public void test2243() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2243");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray30 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray29);
        double[][] doubleArray31 = new double[][] {};
        double[][] doubleArray32 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray31);
        double[] doubleArray34 = new double[] { 1 };
        double[] doubleArray36 = new double[] { 1 };
        double[] doubleArray38 = new double[] { 1 };
        double[] doubleArray40 = new double[] { 1 };
        double[] doubleArray42 = new double[] { 1 };
        double[][] doubleArray43 = new double[][] { doubleArray34, doubleArray36, doubleArray38, doubleArray40, doubleArray42 };
        int[] intArray44 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray43, intArray44);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray31, intArray44);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray30, intArray44);
        double[][] doubleArray48 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        double[][] doubleArray49 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        java.lang.Class<?> wildcardClass50 = doubleArray30.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertNotNull(wildcardClass50);
    }

    @Test
    public void test2244() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2244");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[][] doubleArray5 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[] doubleArray12 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray19 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray26 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray33 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray34 = new double[][] { doubleArray12, doubleArray19, doubleArray26, doubleArray33 };
        double[][] doubleArray35 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray34);
        double[][] doubleArray36 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray34);
        double[][] doubleArray37 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray36);
        double[][] doubleArray38 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray37);
        double[][] doubleArray39 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray38);
        double[][] doubleArray40 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray39);
        double[][] doubleArray41 = new double[][] {};
        double[][] doubleArray42 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray41);
        double[][] doubleArray43 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray41);
        double[] doubleArray50 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray57 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray64 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray71 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray72 = new double[][] { doubleArray50, doubleArray57, doubleArray64, doubleArray71 };
        double[][] doubleArray73 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray72);
        double[][] doubleArray74 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray72);
        double[][] doubleArray75 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray72);
        double[][] doubleArray76 = new double[][] {};
        double[][] doubleArray77 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray76);
        int[] intArray78 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray77, intArray78);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray75, intArray78);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray43, intArray78);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray40, intArray78);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray3, intArray78);
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray71), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[]");
    }

    @Test
    public void test2245() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2245");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[] doubleArray31 = new double[] { 1 };
        double[] doubleArray33 = new double[] { 1 };
        double[] doubleArray35 = new double[] { 1 };
        double[] doubleArray37 = new double[] { 1 };
        double[] doubleArray39 = new double[] { 1 };
        double[][] doubleArray40 = new double[][] { doubleArray31, doubleArray33, doubleArray35, doubleArray37, doubleArray39 };
        int[] intArray41 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray40, intArray41);
        double[][] doubleArray43 = new double[][] {};
        double[][] doubleArray44 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray43);
        int[] intArray45 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray44, intArray45);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray40, intArray45);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray28, intArray45);
        double[][] doubleArray49 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray50 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray49);
        double[][] doubleArray51 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray50);
        double[][] doubleArray52 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray50);
        double[][] doubleArray53 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray52);
        double[][] doubleArray54 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray52);
        double[][] doubleArray55 = new double[][] {};
        double[][] doubleArray56 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray55);
        double[][] doubleArray57 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray56);
        double[][] doubleArray58 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray57);
        double[][] doubleArray59 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray58);
        double[][] doubleArray60 = null;
        double[][] doubleArray61 = new double[][] {};
        double[][] doubleArray62 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray61);
        double[][] doubleArray63 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray62);
        double[] doubleArray67 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray71 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray75 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray79 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray80 = new double[][] { doubleArray67, doubleArray71, doubleArray75, doubleArray79 };
        double[] doubleArray82 = new double[] { 1 };
        double[] doubleArray84 = new double[] { 1 };
        double[] doubleArray86 = new double[] { 1 };
        double[] doubleArray88 = new double[] { 1 };
        double[] doubleArray90 = new double[] { 1 };
        double[][] doubleArray91 = new double[][] { doubleArray82, doubleArray84, doubleArray86, doubleArray88, doubleArray90 };
        int[] intArray92 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray91, intArray92);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray80, intArray92);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray63, intArray92);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray60, intArray92);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray58, intArray92);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray52, intArray92);
        double[][] doubleArray99 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray52);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray71), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray75), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray79), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertNotNull(doubleArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray82), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray84), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray86), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray88), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray90), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray91);
        org.junit.Assert.assertNotNull(intArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray92), "[]");
        org.junit.Assert.assertNotNull(doubleArray99);
    }

    @Test
    public void test2246() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2246");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = new double[][] {};
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[] doubleArray8 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray12 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray16 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray20 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray21 = new double[][] { doubleArray8, doubleArray12, doubleArray16, doubleArray20 };
        double[] doubleArray23 = new double[] { 1 };
        double[] doubleArray25 = new double[] { 1 };
        double[] doubleArray27 = new double[] { 1 };
        double[] doubleArray29 = new double[] { 1 };
        double[] doubleArray31 = new double[] { 1 };
        double[][] doubleArray32 = new double[][] { doubleArray23, doubleArray25, doubleArray27, doubleArray29, doubleArray31 };
        int[] intArray33 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray32, intArray33);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray21, intArray33);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray3, intArray33);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray1, intArray33);
        double[][] doubleArray38 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray39 = new double[][] {};
        double[][] doubleArray40 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray39);
        double[] doubleArray42 = new double[] { 1 };
        double[] doubleArray44 = new double[] { 1 };
        double[] doubleArray46 = new double[] { 1 };
        double[] doubleArray48 = new double[] { 1 };
        double[] doubleArray50 = new double[] { 1 };
        double[][] doubleArray51 = new double[][] { doubleArray42, doubleArray44, doubleArray46, doubleArray48, doubleArray50 };
        int[] intArray52 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray51, intArray52);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray39, intArray52);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray1, intArray52);
        double[][] doubleArray56 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray57 = new double[][] {};
        double[][] doubleArray58 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray57);
        int[] intArray59 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray58, intArray59);
        double[][] doubleArray61 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray58);
        double[][] doubleArray62 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray61);
        double[][] doubleArray63 = new double[][] {};
        double[][] doubleArray64 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray63);
        int[] intArray65 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray64, intArray65);
        double[] doubleArray68 = new double[] { 1 };
        double[] doubleArray70 = new double[] { 1 };
        double[] doubleArray72 = new double[] { 1 };
        double[] doubleArray74 = new double[] { 1 };
        double[] doubleArray76 = new double[] { 1 };
        double[][] doubleArray77 = new double[][] { doubleArray68, doubleArray70, doubleArray72, doubleArray74, doubleArray76 };
        int[] intArray78 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray77, intArray78);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray64, intArray78);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray61, intArray78);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray1, intArray78);
        double[][] doubleArray83 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        java.lang.Class<?> wildcardClass84 = doubleArray1.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[]");
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[]");
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray70), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray74), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[]");
        org.junit.Assert.assertNotNull(doubleArray83);
        org.junit.Assert.assertNotNull(wildcardClass84);
    }

    @Test
    public void test2247() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2247");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray30 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray29);
        double[][] doubleArray31 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        double[][] doubleArray32 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray31);
        double[][] doubleArray33 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray31);
        double[][] doubleArray34 = new double[][] {};
        double[][] doubleArray35 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray34);
        double[][] doubleArray36 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray34);
        double[][] doubleArray37 = new double[][] {};
        double[][] doubleArray38 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray37);
        double[][] doubleArray39 = new double[][] {};
        double[][] doubleArray40 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray39);
        double[] doubleArray42 = new double[] { 1 };
        double[] doubleArray44 = new double[] { 1 };
        double[] doubleArray46 = new double[] { 1 };
        double[] doubleArray48 = new double[] { 1 };
        double[] doubleArray50 = new double[] { 1 };
        double[][] doubleArray51 = new double[][] { doubleArray42, doubleArray44, doubleArray46, doubleArray48, doubleArray50 };
        int[] intArray52 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray51, intArray52);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray39, intArray52);
        double[] doubleArray58 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray62 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray66 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray70 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray71 = new double[][] { doubleArray58, doubleArray62, doubleArray66, doubleArray70 };
        double[] doubleArray73 = new double[] { 1 };
        double[] doubleArray75 = new double[] { 1 };
        double[] doubleArray77 = new double[] { 1 };
        double[] doubleArray79 = new double[] { 1 };
        double[] doubleArray81 = new double[] { 1 };
        double[][] doubleArray82 = new double[][] { doubleArray73, doubleArray75, doubleArray77, doubleArray79, doubleArray81 };
        int[] intArray83 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray82, intArray83);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray71, intArray83);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray39, intArray83);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray37, intArray83);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray34, intArray83);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray33, intArray83);
        java.lang.Class<?> wildcardClass90 = intArray83.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[]");
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray66), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray70), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray73), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray75), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray77), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray79), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray81), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray82);
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray83), "[]");
        org.junit.Assert.assertNotNull(wildcardClass90);
    }

    @Test
    public void test2248() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2248");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[] doubleArray3 = new double[] { 1 };
        double[] doubleArray5 = new double[] { 1 };
        double[] doubleArray7 = new double[] { 1 };
        double[] doubleArray9 = new double[] { 1 };
        double[] doubleArray11 = new double[] { 1 };
        double[][] doubleArray12 = new double[][] { doubleArray3, doubleArray5, doubleArray7, doubleArray9, doubleArray11 };
        int[] intArray13 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray12, intArray13);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray0, intArray13);
        double[] doubleArray19 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray23 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray27 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray31 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray32 = new double[][] { doubleArray19, doubleArray23, doubleArray27, doubleArray31 };
        double[] doubleArray34 = new double[] { 1 };
        double[] doubleArray36 = new double[] { 1 };
        double[] doubleArray38 = new double[] { 1 };
        double[] doubleArray40 = new double[] { 1 };
        double[] doubleArray42 = new double[] { 1 };
        double[][] doubleArray43 = new double[][] { doubleArray34, doubleArray36, doubleArray38, doubleArray40, doubleArray42 };
        int[] intArray44 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray43, intArray44);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray32, intArray44);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray0, intArray44);
        double[] doubleArray49 = new double[] { 1 };
        double[] doubleArray51 = new double[] { 1 };
        double[] doubleArray53 = new double[] { 1 };
        double[] doubleArray55 = new double[] { 1 };
        double[] doubleArray57 = new double[] { 1 };
        double[][] doubleArray58 = new double[][] { doubleArray49, doubleArray51, doubleArray53, doubleArray55, doubleArray57 };
        int[] intArray59 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray58, intArray59);
        double[][] doubleArray61 = new double[][] {};
        double[][] doubleArray62 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray61);
        int[] intArray63 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray62, intArray63);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray58, intArray63);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray0, intArray63);
        double[][] doubleArray67 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray68 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray67);
        double[][] doubleArray69 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray68);
        double[][] doubleArray70 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray68);
        double[][] doubleArray71 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray70);
        double[][] doubleArray72 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray71);
        double[][] doubleArray73 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray71);
        java.lang.Class<?> wildcardClass74 = doubleArray71.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[]");
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertNotNull(wildcardClass74);
    }

    @Test
    public void test2249() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2249");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[][] doubleArray5 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray4);
        double[][] doubleArray6 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray5);
        double[][] doubleArray7 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray6);
        double[][] doubleArray8 = new double[][] {};
        double[][] doubleArray9 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray8);
        double[][] doubleArray10 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray8);
        double[][] doubleArray11 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray8);
        double[][] doubleArray12 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray11);
        double[][] doubleArray13 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray12);
        double[][] doubleArray14 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray13);
        double[][] doubleArray15 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray14);
        double[][] doubleArray16 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray15);
        double[][] doubleArray17 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray15);
        double[] doubleArray24 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray31 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray38 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray45 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray46 = new double[][] { doubleArray24, doubleArray31, doubleArray38, doubleArray45 };
        double[][] doubleArray47 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray46);
        double[][] doubleArray48 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray47);
        double[][] doubleArray49 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray48);
        double[][] doubleArray50 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray48);
        double[][] doubleArray51 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray48);
        double[][] doubleArray52 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray48);
        double[][] doubleArray53 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray52);
        double[][] doubleArray54 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray53);
        double[][] doubleArray55 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray53);
        double[][] doubleArray56 = new double[][] {};
        double[][] doubleArray57 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray56);
        double[][] doubleArray58 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray57);
        double[] doubleArray62 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray66 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray70 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray74 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray75 = new double[][] { doubleArray62, doubleArray66, doubleArray70, doubleArray74 };
        double[] doubleArray77 = new double[] { 1 };
        double[] doubleArray79 = new double[] { 1 };
        double[] doubleArray81 = new double[] { 1 };
        double[] doubleArray83 = new double[] { 1 };
        double[] doubleArray85 = new double[] { 1 };
        double[][] doubleArray86 = new double[][] { doubleArray77, doubleArray79, doubleArray81, doubleArray83, doubleArray85 };
        int[] intArray87 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray86, intArray87);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray75, intArray87);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray57, intArray87);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray55, intArray87);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray15, intArray87);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray6, intArray87);
        java.lang.Class<?> wildcardClass94 = doubleArray6.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray66), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray70), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray74), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray77), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray79), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray81), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray83), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray85), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray86);
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray87), "[]");
        org.junit.Assert.assertNotNull(wildcardClass94);
    }

    @Test
    public void test2250() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2250");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray30 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray29);
        double[][] doubleArray31 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        double[][] doubleArray32 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        double[][] doubleArray33 = new double[][] {};
        double[][] doubleArray34 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray33);
        double[] doubleArray36 = new double[] { 1 };
        double[] doubleArray38 = new double[] { 1 };
        double[] doubleArray40 = new double[] { 1 };
        double[] doubleArray42 = new double[] { 1 };
        double[] doubleArray44 = new double[] { 1 };
        double[][] doubleArray45 = new double[][] { doubleArray36, doubleArray38, doubleArray40, doubleArray42, doubleArray44 };
        int[] intArray46 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray45, intArray46);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray33, intArray46);
        double[] doubleArray52 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray56 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray60 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray64 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray65 = new double[][] { doubleArray52, doubleArray56, doubleArray60, doubleArray64 };
        double[] doubleArray67 = new double[] { 1 };
        double[] doubleArray69 = new double[] { 1 };
        double[] doubleArray71 = new double[] { 1 };
        double[] doubleArray73 = new double[] { 1 };
        double[] doubleArray75 = new double[] { 1 };
        double[][] doubleArray76 = new double[][] { doubleArray67, doubleArray69, doubleArray71, doubleArray73, doubleArray75 };
        int[] intArray77 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray76, intArray77);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray65, intArray77);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray33, intArray77);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray32, intArray77);
        double[][] doubleArray82 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray32);
        double[][] doubleArray83 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray32);
        double[][] doubleArray84 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray32);
        double[][] doubleArray85 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray84);
        double[][] doubleArray86 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray84);
        double[][] doubleArray87 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray86);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[]");
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray71), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray73), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray75), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray77), "[]");
        org.junit.Assert.assertNotNull(doubleArray82);
        org.junit.Assert.assertNotNull(doubleArray83);
        org.junit.Assert.assertNotNull(doubleArray84);
        org.junit.Assert.assertNotNull(doubleArray85);
        org.junit.Assert.assertNotNull(doubleArray86);
        org.junit.Assert.assertNotNull(doubleArray87);
    }

    @Test
    public void test2251() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2251");
        double[][] doubleArray0 = null;
        double[][] doubleArray1 = null;
        double[] doubleArray3 = new double[] { 1 };
        double[] doubleArray5 = new double[] { 1 };
        double[] doubleArray7 = new double[] { 1 };
        double[] doubleArray9 = new double[] { 1 };
        double[] doubleArray11 = new double[] { 1 };
        double[][] doubleArray12 = new double[][] { doubleArray3, doubleArray5, doubleArray7, doubleArray9, doubleArray11 };
        int[] intArray13 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray12, intArray13);
        double[] doubleArray21 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray28 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray35 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray42 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray43 = new double[][] { doubleArray21, doubleArray28, doubleArray35, doubleArray42 };
        double[][] doubleArray44 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray43);
        double[] doubleArray46 = new double[] { 1 };
        double[] doubleArray48 = new double[] { 1 };
        double[] doubleArray50 = new double[] { 1 };
        double[] doubleArray52 = new double[] { 1 };
        double[] doubleArray54 = new double[] { 1 };
        double[][] doubleArray55 = new double[][] { doubleArray46, doubleArray48, doubleArray50, doubleArray52, doubleArray54 };
        int[] intArray56 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray55, intArray56);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray44, intArray56);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray12, intArray56);
        double[] doubleArray61 = new double[] { 1 };
        double[] doubleArray63 = new double[] { 1 };
        double[] doubleArray65 = new double[] { 1 };
        double[] doubleArray67 = new double[] { 1 };
        double[] doubleArray69 = new double[] { 1 };
        double[][] doubleArray70 = new double[][] { doubleArray61, doubleArray63, doubleArray65, doubleArray67, doubleArray69 };
        int[] intArray71 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray70, intArray71);
        double[][] doubleArray73 = new double[][] {};
        double[][] doubleArray74 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray73);
        int[] intArray75 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray74, intArray75);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray70, intArray75);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray12, intArray75);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray1, intArray75);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray0, intArray75);
        java.lang.Class<?> wildcardClass81 = intArray75.getClass();
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[]");
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[]");
        org.junit.Assert.assertNotNull(wildcardClass81);
    }

    @Test
    public void test2252() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2252");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray3 = new double[][] {};
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[][] doubleArray5 = new double[][] {};
        double[][] doubleArray6 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray5);
        double[] doubleArray8 = new double[] { 1 };
        double[] doubleArray10 = new double[] { 1 };
        double[] doubleArray12 = new double[] { 1 };
        double[] doubleArray14 = new double[] { 1 };
        double[] doubleArray16 = new double[] { 1 };
        double[][] doubleArray17 = new double[][] { doubleArray8, doubleArray10, doubleArray12, doubleArray14, doubleArray16 };
        int[] intArray18 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray17, intArray18);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray5, intArray18);
        double[] doubleArray24 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray28 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray32 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray36 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray37 = new double[][] { doubleArray24, doubleArray28, doubleArray32, doubleArray36 };
        double[] doubleArray39 = new double[] { 1 };
        double[] doubleArray41 = new double[] { 1 };
        double[] doubleArray43 = new double[] { 1 };
        double[] doubleArray45 = new double[] { 1 };
        double[] doubleArray47 = new double[] { 1 };
        double[][] doubleArray48 = new double[][] { doubleArray39, doubleArray41, doubleArray43, doubleArray45, doubleArray47 };
        int[] intArray49 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray48, intArray49);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray37, intArray49);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray5, intArray49);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray4, intArray49);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray2, intArray49);
        double[][] doubleArray55 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray56 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray57 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray56);
        double[][] doubleArray58 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray57);
        java.lang.Class<?> wildcardClass59 = doubleArray57.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[]");
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[]");
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertNotNull(wildcardClass59);
    }

    @Test
    public void test2253() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2253");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray3 = new double[][] {};
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[] doubleArray6 = new double[] { 1 };
        double[] doubleArray8 = new double[] { 1 };
        double[] doubleArray10 = new double[] { 1 };
        double[] doubleArray12 = new double[] { 1 };
        double[] doubleArray14 = new double[] { 1 };
        double[][] doubleArray15 = new double[][] { doubleArray6, doubleArray8, doubleArray10, doubleArray12, doubleArray14 };
        int[] intArray16 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray15, intArray16);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray3, intArray16);
        double[][] doubleArray19 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[][] doubleArray20 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray19);
        double[][] doubleArray21 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray19);
        double[][] doubleArray22 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray19);
        double[][] doubleArray23 = new double[][] {};
        double[][] doubleArray24 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray23);
        int[] intArray25 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray24, intArray25);
        double[][] doubleArray27 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray24);
        double[] doubleArray34 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray41 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray48 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray55 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray56 = new double[][] { doubleArray34, doubleArray41, doubleArray48, doubleArray55 };
        double[][] doubleArray57 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray56);
        double[] doubleArray64 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray71 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray78 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray85 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray86 = new double[][] { doubleArray64, doubleArray71, doubleArray78, doubleArray85 };
        double[][] doubleArray87 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray86);
        double[][] doubleArray88 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray86);
        double[][] doubleArray89 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray86);
        double[][] doubleArray90 = new double[][] {};
        double[][] doubleArray91 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray90);
        int[] intArray92 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray91, intArray92);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray89, intArray92);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray57, intArray92);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray27, intArray92);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray19, intArray92);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray2, intArray92);
        double[][] doubleArray99 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray71), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray78), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray85), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray86);
        org.junit.Assert.assertNotNull(doubleArray87);
        org.junit.Assert.assertNotNull(doubleArray88);
        org.junit.Assert.assertNotNull(doubleArray89);
        org.junit.Assert.assertNotNull(doubleArray90);
        org.junit.Assert.assertNotNull(doubleArray91);
        org.junit.Assert.assertNotNull(intArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray92), "[]");
        org.junit.Assert.assertNotNull(doubleArray99);
    }

    @Test
    public void test2254() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2254");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        int[] intArray2 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray1, intArray2);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray5 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray6 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray5);
        double[][] doubleArray7 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray5);
        double[][] doubleArray8 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray5);
        double[][] doubleArray9 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray8);
        double[][] doubleArray10 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray9);
        double[][] doubleArray11 = new double[][] {};
        double[][] doubleArray12 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray11);
        double[] doubleArray14 = new double[] { 1 };
        double[] doubleArray16 = new double[] { 1 };
        double[] doubleArray18 = new double[] { 1 };
        double[] doubleArray20 = new double[] { 1 };
        double[] doubleArray22 = new double[] { 1 };
        double[][] doubleArray23 = new double[][] { doubleArray14, doubleArray16, doubleArray18, doubleArray20, doubleArray22 };
        int[] intArray24 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray23, intArray24);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray11, intArray24);
        double[][] doubleArray27 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray11);
        double[][] doubleArray28 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray27);
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray30 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray29);
        double[] doubleArray37 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray44 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray51 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray58 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray59 = new double[][] { doubleArray37, doubleArray44, doubleArray51, doubleArray58 };
        double[][] doubleArray60 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray59);
        double[][] doubleArray61 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray60);
        double[][] doubleArray62 = new double[][] {};
        double[][] doubleArray63 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray62);
        double[] doubleArray65 = new double[] { 1 };
        double[] doubleArray67 = new double[] { 1 };
        double[] doubleArray69 = new double[] { 1 };
        double[] doubleArray71 = new double[] { 1 };
        double[] doubleArray73 = new double[] { 1 };
        double[][] doubleArray74 = new double[][] { doubleArray65, doubleArray67, doubleArray69, doubleArray71, doubleArray73 };
        int[] intArray75 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray74, intArray75);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray62, intArray75);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray61, intArray75);
        double[][] doubleArray79 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray61);
        double[] doubleArray81 = new double[] { 1 };
        double[] doubleArray83 = new double[] { 1 };
        double[] doubleArray85 = new double[] { 1 };
        double[] doubleArray87 = new double[] { 1 };
        double[] doubleArray89 = new double[] { 1 };
        double[][] doubleArray90 = new double[][] { doubleArray81, doubleArray83, doubleArray85, doubleArray87, doubleArray89 };
        int[] intArray91 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray90, intArray91);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray79, intArray91);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray29, intArray91);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray9, intArray91);
        double[][] doubleArray96 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray9);
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray71), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray73), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[]");
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertNotNull(doubleArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray81), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray83), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray85), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray87), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray89), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray90);
        org.junit.Assert.assertNotNull(intArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray91), "[]");
        org.junit.Assert.assertNotNull(doubleArray96);
    }

    @Test
    public void test2255() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2255");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[][] doubleArray5 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[][] doubleArray6 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray5);
        double[][] doubleArray7 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray6);
        double[] doubleArray14 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray21 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray28 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray35 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray36 = new double[][] { doubleArray14, doubleArray21, doubleArray28, doubleArray35 };
        double[][] doubleArray37 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray36);
        double[][] doubleArray38 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray37);
        double[][] doubleArray39 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray38);
        double[][] doubleArray40 = new double[][] {};
        double[][] doubleArray41 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray40);
        int[] intArray42 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray41, intArray42);
        double[][] doubleArray44 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray41);
        double[][] doubleArray45 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray44);
        double[][] doubleArray46 = new double[][] {};
        double[][] doubleArray47 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray46);
        int[] intArray48 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray47, intArray48);
        double[] doubleArray51 = new double[] { 1 };
        double[] doubleArray53 = new double[] { 1 };
        double[] doubleArray55 = new double[] { 1 };
        double[] doubleArray57 = new double[] { 1 };
        double[] doubleArray59 = new double[] { 1 };
        double[][] doubleArray60 = new double[][] { doubleArray51, doubleArray53, doubleArray55, doubleArray57, doubleArray59 };
        int[] intArray61 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray60, intArray61);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray47, intArray61);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray44, intArray61);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray39, intArray61);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray7, intArray61);
        java.lang.Class<?> wildcardClass67 = doubleArray7.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[]");
        org.junit.Assert.assertNotNull(wildcardClass67);
    }

    @Test
    public void test2256() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2256");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[][] doubleArray5 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray4);
        double[][] doubleArray6 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray5);
        double[][] doubleArray7 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray6);
        double[][] doubleArray8 = new double[][] {};
        double[][] doubleArray9 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray8);
        double[][] doubleArray10 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray8);
        double[][] doubleArray11 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray8);
        double[][] doubleArray12 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray11);
        double[][] doubleArray13 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray12);
        double[][] doubleArray14 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray13);
        double[][] doubleArray15 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray14);
        double[][] doubleArray16 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray15);
        double[][] doubleArray17 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray15);
        double[] doubleArray24 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray31 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray38 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray45 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray46 = new double[][] { doubleArray24, doubleArray31, doubleArray38, doubleArray45 };
        double[][] doubleArray47 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray46);
        double[][] doubleArray48 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray47);
        double[][] doubleArray49 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray48);
        double[][] doubleArray50 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray48);
        double[][] doubleArray51 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray48);
        double[][] doubleArray52 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray48);
        double[][] doubleArray53 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray52);
        double[][] doubleArray54 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray53);
        double[][] doubleArray55 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray53);
        double[][] doubleArray56 = new double[][] {};
        double[][] doubleArray57 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray56);
        double[][] doubleArray58 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray57);
        double[] doubleArray62 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray66 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray70 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray74 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray75 = new double[][] { doubleArray62, doubleArray66, doubleArray70, doubleArray74 };
        double[] doubleArray77 = new double[] { 1 };
        double[] doubleArray79 = new double[] { 1 };
        double[] doubleArray81 = new double[] { 1 };
        double[] doubleArray83 = new double[] { 1 };
        double[] doubleArray85 = new double[] { 1 };
        double[][] doubleArray86 = new double[][] { doubleArray77, doubleArray79, doubleArray81, doubleArray83, doubleArray85 };
        int[] intArray87 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray86, intArray87);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray75, intArray87);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray57, intArray87);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray55, intArray87);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray15, intArray87);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray6, intArray87);
        java.lang.Class<?> wildcardClass94 = intArray87.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray66), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray70), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray74), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray77), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray79), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray81), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray83), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray85), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray86);
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray87), "[]");
        org.junit.Assert.assertNotNull(wildcardClass94);
    }

    @Test
    public void test2257() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2257");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray30 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray29);
        double[][] doubleArray31 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        double[][] doubleArray32 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        double[][] doubleArray33 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        double[][] doubleArray34 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        double[][] doubleArray35 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray34);
        double[][] doubleArray36 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray35);
        double[][] doubleArray37 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray36);
        double[][] doubleArray38 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray36);
        double[][] doubleArray39 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray36);
        java.lang.Class<?> wildcardClass40 = doubleArray39.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertNotNull(wildcardClass40);
    }

    @Test
    public void test2258() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2258");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = new double[][] {};
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[] doubleArray5 = new double[] { 1 };
        double[] doubleArray7 = new double[] { 1 };
        double[] doubleArray9 = new double[] { 1 };
        double[] doubleArray11 = new double[] { 1 };
        double[] doubleArray13 = new double[] { 1 };
        double[][] doubleArray14 = new double[][] { doubleArray5, doubleArray7, doubleArray9, doubleArray11, doubleArray13 };
        int[] intArray15 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray14, intArray15);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray2, intArray15);
        double[] doubleArray21 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray25 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray29 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray33 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray34 = new double[][] { doubleArray21, doubleArray25, doubleArray29, doubleArray33 };
        double[] doubleArray36 = new double[] { 1 };
        double[] doubleArray38 = new double[] { 1 };
        double[] doubleArray40 = new double[] { 1 };
        double[] doubleArray42 = new double[] { 1 };
        double[] doubleArray44 = new double[] { 1 };
        double[][] doubleArray45 = new double[][] { doubleArray36, doubleArray38, doubleArray40, doubleArray42, doubleArray44 };
        int[] intArray46 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray45, intArray46);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray34, intArray46);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray2, intArray46);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray1, intArray46);
        double[][] doubleArray51 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray52 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray51);
        double[][] doubleArray53 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray52);
        double[][] doubleArray54 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray53);
        int[] intArray55 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray53, intArray55);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertNotNull(doubleArray54);
    }

    @Test
    public void test2259() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2259");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        int[] intArray2 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray1, intArray2);
        double[] doubleArray10 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray17 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray24 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray31 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray32 = new double[][] { doubleArray10, doubleArray17, doubleArray24, doubleArray31 };
        double[][] doubleArray33 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray32);
        double[][] doubleArray34 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray33);
        double[][] doubleArray35 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray34);
        double[][] doubleArray36 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray35);
        double[][] doubleArray37 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray35);
        double[][] doubleArray38 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray37);
        double[][] doubleArray39 = null;
        double[][] doubleArray40 = new double[][] {};
        double[][] doubleArray41 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray40);
        double[][] doubleArray42 = new double[][] {};
        double[][] doubleArray43 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray42);
        double[][] doubleArray44 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray43);
        double[] doubleArray48 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray52 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray56 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray60 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray61 = new double[][] { doubleArray48, doubleArray52, doubleArray56, doubleArray60 };
        double[] doubleArray63 = new double[] { 1 };
        double[] doubleArray65 = new double[] { 1 };
        double[] doubleArray67 = new double[] { 1 };
        double[] doubleArray69 = new double[] { 1 };
        double[] doubleArray71 = new double[] { 1 };
        double[][] doubleArray72 = new double[][] { doubleArray63, doubleArray65, doubleArray67, doubleArray69, doubleArray71 };
        int[] intArray73 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray72, intArray73);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray61, intArray73);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray43, intArray73);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray41, intArray73);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray39, intArray73);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray38, intArray73);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray1, intArray73);
        java.lang.Class<?> wildcardClass81 = doubleArray1.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray71), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[]");
        org.junit.Assert.assertNotNull(wildcardClass81);
    }

    @Test
    public void test2260() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2260");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[] doubleArray3 = new double[] { 1 };
        double[] doubleArray5 = new double[] { 1 };
        double[] doubleArray7 = new double[] { 1 };
        double[] doubleArray9 = new double[] { 1 };
        double[] doubleArray11 = new double[] { 1 };
        double[][] doubleArray12 = new double[][] { doubleArray3, doubleArray5, doubleArray7, doubleArray9, doubleArray11 };
        int[] intArray13 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray12, intArray13);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray0, intArray13);
        double[] doubleArray19 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray23 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray27 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray31 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray32 = new double[][] { doubleArray19, doubleArray23, doubleArray27, doubleArray31 };
        double[] doubleArray34 = new double[] { 1 };
        double[] doubleArray36 = new double[] { 1 };
        double[] doubleArray38 = new double[] { 1 };
        double[] doubleArray40 = new double[] { 1 };
        double[] doubleArray42 = new double[] { 1 };
        double[][] doubleArray43 = new double[][] { doubleArray34, doubleArray36, doubleArray38, doubleArray40, doubleArray42 };
        int[] intArray44 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray43, intArray44);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray32, intArray44);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray0, intArray44);
        double[] doubleArray49 = new double[] { 1 };
        double[] doubleArray51 = new double[] { 1 };
        double[] doubleArray53 = new double[] { 1 };
        double[] doubleArray55 = new double[] { 1 };
        double[] doubleArray57 = new double[] { 1 };
        double[][] doubleArray58 = new double[][] { doubleArray49, doubleArray51, doubleArray53, doubleArray55, doubleArray57 };
        int[] intArray59 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray58, intArray59);
        double[][] doubleArray61 = new double[][] {};
        double[][] doubleArray62 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray61);
        int[] intArray63 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray62, intArray63);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray58, intArray63);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray0, intArray63);
        double[][] doubleArray67 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray68 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray69 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray70 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray71 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray72 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray71);
        double[][] doubleArray73 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray71);
        java.lang.Class<?> wildcardClass74 = doubleArray73.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[]");
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertNotNull(wildcardClass74);
    }

    @Test
    public void test2261() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2261");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray5 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray4);
        double[][] doubleArray6 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray4);
        double[][] doubleArray7 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray6);
        double[][] doubleArray8 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray6);
        double[][] doubleArray9 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray6);
        double[][] doubleArray10 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray6);
        double[][] doubleArray11 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray10);
        java.lang.Class<?> wildcardClass12 = doubleArray11.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertNotNull(wildcardClass12);
    }

    @Test
    public void test2262() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2262");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = new double[][] {};
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[] doubleArray5 = new double[] { 1 };
        double[] doubleArray7 = new double[] { 1 };
        double[] doubleArray9 = new double[] { 1 };
        double[] doubleArray11 = new double[] { 1 };
        double[] doubleArray13 = new double[] { 1 };
        double[][] doubleArray14 = new double[][] { doubleArray5, doubleArray7, doubleArray9, doubleArray11, doubleArray13 };
        int[] intArray15 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray14, intArray15);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray2, intArray15);
        double[] doubleArray21 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray25 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray29 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray33 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray34 = new double[][] { doubleArray21, doubleArray25, doubleArray29, doubleArray33 };
        double[] doubleArray36 = new double[] { 1 };
        double[] doubleArray38 = new double[] { 1 };
        double[] doubleArray40 = new double[] { 1 };
        double[] doubleArray42 = new double[] { 1 };
        double[] doubleArray44 = new double[] { 1 };
        double[][] doubleArray45 = new double[][] { doubleArray36, doubleArray38, doubleArray40, doubleArray42, doubleArray44 };
        int[] intArray46 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray45, intArray46);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray34, intArray46);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray2, intArray46);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray1, intArray46);
        double[][] doubleArray51 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray52 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray51);
        double[][] doubleArray53 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray51);
        double[][] doubleArray54 = new double[][] {};
        double[][] doubleArray55 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray54);
        double[] doubleArray57 = new double[] { 1 };
        double[] doubleArray59 = new double[] { 1 };
        double[] doubleArray61 = new double[] { 1 };
        double[] doubleArray63 = new double[] { 1 };
        double[] doubleArray65 = new double[] { 1 };
        double[][] doubleArray66 = new double[][] { doubleArray57, doubleArray59, doubleArray61, doubleArray63, doubleArray65 };
        int[] intArray67 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray66, intArray67);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray54, intArray67);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray51, intArray67);
        double[][] doubleArray71 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray51);
        java.lang.Class<?> wildcardClass72 = doubleArray51.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[]");
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertNotNull(wildcardClass72);
    }

    @Test
    public void test2263() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2263");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = new double[][] {};
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[] doubleArray5 = new double[] { 1 };
        double[] doubleArray7 = new double[] { 1 };
        double[] doubleArray9 = new double[] { 1 };
        double[] doubleArray11 = new double[] { 1 };
        double[] doubleArray13 = new double[] { 1 };
        double[][] doubleArray14 = new double[][] { doubleArray5, doubleArray7, doubleArray9, doubleArray11, doubleArray13 };
        int[] intArray15 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray14, intArray15);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray2, intArray15);
        double[] doubleArray21 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray25 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray29 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray33 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray34 = new double[][] { doubleArray21, doubleArray25, doubleArray29, doubleArray33 };
        double[] doubleArray36 = new double[] { 1 };
        double[] doubleArray38 = new double[] { 1 };
        double[] doubleArray40 = new double[] { 1 };
        double[] doubleArray42 = new double[] { 1 };
        double[] doubleArray44 = new double[] { 1 };
        double[][] doubleArray45 = new double[][] { doubleArray36, doubleArray38, doubleArray40, doubleArray42, doubleArray44 };
        int[] intArray46 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray45, intArray46);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray34, intArray46);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray2, intArray46);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray0, intArray46);
        double[][] doubleArray51 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray52 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray53 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        java.lang.Class<?> wildcardClass54 = doubleArray0.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertNotNull(wildcardClass54);
    }

    @Test
    public void test2264() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2264");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray5 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray4);
        double[][] doubleArray6 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray4);
        double[][] doubleArray7 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray6);
        double[][] doubleArray8 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray7);
        double[][] doubleArray9 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray8);
        int[] intArray10 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray8, intArray10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertNotNull(doubleArray9);
    }

    @Test
    public void test2265() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2265");
        double[][] doubleArray0 = null;
        double[][] doubleArray1 = new double[][] {};
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray5 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray6 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray5);
        double[][] doubleArray7 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray5);
        double[][] doubleArray8 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray7);
        double[][] doubleArray9 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray7);
        double[][] doubleArray10 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray7);
        double[][] doubleArray11 = new double[][] {};
        double[][] doubleArray12 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray11);
        int[] intArray13 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray12, intArray13);
        double[] doubleArray16 = new double[] { 1 };
        double[] doubleArray18 = new double[] { 1 };
        double[] doubleArray20 = new double[] { 1 };
        double[] doubleArray22 = new double[] { 1 };
        double[] doubleArray24 = new double[] { 1 };
        double[][] doubleArray25 = new double[][] { doubleArray16, doubleArray18, doubleArray20, doubleArray22, doubleArray24 };
        int[] intArray26 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray25, intArray26);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray12, intArray26);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray7, intArray26);
        double[][] doubleArray30 = null;
        double[][] doubleArray31 = new double[][] {};
        double[][] doubleArray32 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray31);
        double[][] doubleArray33 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray31);
        double[][] doubleArray34 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray31);
        double[][] doubleArray35 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray34);
        double[][] doubleArray36 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray34);
        double[][] doubleArray37 = new double[][] {};
        double[][] doubleArray38 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray37);
        int[] intArray39 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray38, intArray39);
        double[] doubleArray42 = new double[] { 1 };
        double[] doubleArray44 = new double[] { 1 };
        double[] doubleArray46 = new double[] { 1 };
        double[] doubleArray48 = new double[] { 1 };
        double[] doubleArray50 = new double[] { 1 };
        double[][] doubleArray51 = new double[][] { doubleArray42, doubleArray44, doubleArray46, doubleArray48, doubleArray50 };
        int[] intArray52 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray51, intArray52);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray38, intArray52);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray36, intArray52);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray30, intArray52);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray7, intArray52);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray0, intArray52);
        java.lang.Class<?> wildcardClass59 = intArray52.getClass();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[]");
        org.junit.Assert.assertNotNull(wildcardClass59);
    }

    @Test
    public void test2266() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2266");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray30 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray29);
        double[][] doubleArray31 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        double[][] doubleArray32 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray31);
        double[][] doubleArray33 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray31);
        double[][] doubleArray34 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray31);
        double[][] doubleArray35 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray34);
        double[][] doubleArray36 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray34);
        double[] doubleArray43 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray50 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray57 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray64 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray65 = new double[][] { doubleArray43, doubleArray50, doubleArray57, doubleArray64 };
        double[][] doubleArray66 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray65);
        double[][] doubleArray67 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray66);
        double[][] doubleArray68 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray67);
        double[][] doubleArray69 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray68);
        double[][] doubleArray70 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray68);
        double[] doubleArray72 = new double[] { 1 };
        double[] doubleArray74 = new double[] { 1 };
        double[] doubleArray76 = new double[] { 1 };
        double[] doubleArray78 = new double[] { 1 };
        double[] doubleArray80 = new double[] { 1 };
        double[][] doubleArray81 = new double[][] { doubleArray72, doubleArray74, doubleArray76, doubleArray78, doubleArray80 };
        int[] intArray82 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray81, intArray82);
        double[][] doubleArray84 = new double[][] {};
        double[][] doubleArray85 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray84);
        int[] intArray86 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray85, intArray86);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray81, intArray86);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray70, intArray86);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray34, intArray86);
        double[][] doubleArray91 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray34);
        java.lang.Class<?> wildcardClass92 = doubleArray91.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray74), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray78), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray80), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray81);
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[]");
        org.junit.Assert.assertNotNull(doubleArray84);
        org.junit.Assert.assertNotNull(doubleArray85);
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray86), "[]");
        org.junit.Assert.assertNotNull(doubleArray91);
        org.junit.Assert.assertNotNull(wildcardClass92);
    }

    @Test
    public void test2267() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2267");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray30 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray29);
        double[][] doubleArray31 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        double[][] doubleArray32 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        double[][] doubleArray33 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        double[][] doubleArray34 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        double[][] doubleArray35 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray34);
        double[][] doubleArray36 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray35);
        double[][] doubleArray37 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray36);
        double[][] doubleArray38 = null;
        double[][] doubleArray39 = new double[][] {};
        double[][] doubleArray40 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray39);
        double[][] doubleArray41 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray40);
        double[] doubleArray45 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray49 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray53 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray57 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray58 = new double[][] { doubleArray45, doubleArray49, doubleArray53, doubleArray57 };
        double[] doubleArray60 = new double[] { 1 };
        double[] doubleArray62 = new double[] { 1 };
        double[] doubleArray64 = new double[] { 1 };
        double[] doubleArray66 = new double[] { 1 };
        double[] doubleArray68 = new double[] { 1 };
        double[][] doubleArray69 = new double[][] { doubleArray60, doubleArray62, doubleArray64, doubleArray66, doubleArray68 };
        int[] intArray70 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray69, intArray70);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray58, intArray70);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray41, intArray70);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray38, intArray70);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray36, intArray70);
        java.lang.Class<?> wildcardClass76 = intArray70.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray66), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[]");
        org.junit.Assert.assertNotNull(wildcardClass76);
    }

    @Test
    public void test2268() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2268");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[] doubleArray31 = new double[] { 1 };
        double[] doubleArray33 = new double[] { 1 };
        double[] doubleArray35 = new double[] { 1 };
        double[] doubleArray37 = new double[] { 1 };
        double[] doubleArray39 = new double[] { 1 };
        double[][] doubleArray40 = new double[][] { doubleArray31, doubleArray33, doubleArray35, doubleArray37, doubleArray39 };
        int[] intArray41 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray40, intArray41);
        double[][] doubleArray43 = new double[][] {};
        double[][] doubleArray44 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray43);
        int[] intArray45 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray44, intArray45);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray40, intArray45);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray28, intArray45);
        double[][] doubleArray49 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray50 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray51 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray52 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray51);
        double[][] doubleArray53 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray51);
        double[][] doubleArray54 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray51);
        double[][] doubleArray55 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray54);
        double[][] doubleArray56 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray55);
        double[][] doubleArray57 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray56);
        double[][] doubleArray58 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray57);
        java.lang.Class<?> wildcardClass59 = doubleArray58.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertNotNull(wildcardClass59);
    }

    @Test
    public void test2269() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2269");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray30 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray29);
        double[][] doubleArray31 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        double[][] doubleArray32 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        double[][] doubleArray33 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        double[][] doubleArray34 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray33);
        double[] doubleArray41 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray48 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray55 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray62 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray63 = new double[][] { doubleArray41, doubleArray48, doubleArray55, doubleArray62 };
        double[][] doubleArray64 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray63);
        double[] doubleArray66 = new double[] { 1 };
        double[] doubleArray68 = new double[] { 1 };
        double[] doubleArray70 = new double[] { 1 };
        double[] doubleArray72 = new double[] { 1 };
        double[] doubleArray74 = new double[] { 1 };
        double[][] doubleArray75 = new double[][] { doubleArray66, doubleArray68, doubleArray70, doubleArray72, doubleArray74 };
        int[] intArray76 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray75, intArray76);
        double[][] doubleArray78 = new double[][] {};
        double[][] doubleArray79 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray78);
        int[] intArray80 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray79, intArray80);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray75, intArray80);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray63, intArray80);
        double[][] doubleArray84 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray63);
        double[][] doubleArray85 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray63);
        double[][] doubleArray86 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray63);
        double[][] doubleArray87 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray63);
        double[][] doubleArray88 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray63);
        int[] intArray90 = new int[] { '4' };
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray63, intArray90);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray34, intArray90);
        double[][] doubleArray93 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray34);
        java.lang.Class<?> wildcardClass94 = doubleArray34.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray66), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray70), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray74), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[]");
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[]");
        org.junit.Assert.assertNotNull(doubleArray84);
        org.junit.Assert.assertNotNull(doubleArray85);
        org.junit.Assert.assertNotNull(doubleArray86);
        org.junit.Assert.assertNotNull(doubleArray87);
        org.junit.Assert.assertNotNull(doubleArray88);
        org.junit.Assert.assertNotNull(intArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray90), "[0]");
        org.junit.Assert.assertNotNull(doubleArray93);
        org.junit.Assert.assertNotNull(wildcardClass94);
    }

    @Test
    public void test2270() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2270");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = new double[][] {};
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[] doubleArray8 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray12 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray16 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray20 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray21 = new double[][] { doubleArray8, doubleArray12, doubleArray16, doubleArray20 };
        double[] doubleArray23 = new double[] { 1 };
        double[] doubleArray25 = new double[] { 1 };
        double[] doubleArray27 = new double[] { 1 };
        double[] doubleArray29 = new double[] { 1 };
        double[] doubleArray31 = new double[] { 1 };
        double[][] doubleArray32 = new double[][] { doubleArray23, doubleArray25, doubleArray27, doubleArray29, doubleArray31 };
        int[] intArray33 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray32, intArray33);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray21, intArray33);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray3, intArray33);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray1, intArray33);
        double[][] doubleArray38 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray39 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray38);
        double[][] doubleArray40 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray38);
        double[][] doubleArray41 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray38);
        double[][] doubleArray42 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray38);
        double[][] doubleArray43 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray42);
        double[][] doubleArray44 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray42);
        double[][] doubleArray45 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray44);
        double[][] doubleArray46 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray45);
        java.lang.Class<?> wildcardClass47 = doubleArray46.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertNotNull(wildcardClass47);
    }

    @Test
    public void test2271() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2271");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray5 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray6 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray7 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray6);
        double[][] doubleArray8 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray7);
        double[] doubleArray10 = new double[] { 1 };
        double[] doubleArray12 = new double[] { 1 };
        double[] doubleArray14 = new double[] { 1 };
        double[] doubleArray16 = new double[] { 1 };
        double[] doubleArray18 = new double[] { 1 };
        double[][] doubleArray19 = new double[][] { doubleArray10, doubleArray12, doubleArray14, doubleArray16, doubleArray18 };
        int[] intArray20 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray19, intArray20);
        double[] doubleArray28 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray35 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray42 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray49 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray50 = new double[][] { doubleArray28, doubleArray35, doubleArray42, doubleArray49 };
        double[][] doubleArray51 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray50);
        double[] doubleArray53 = new double[] { 1 };
        double[] doubleArray55 = new double[] { 1 };
        double[] doubleArray57 = new double[] { 1 };
        double[] doubleArray59 = new double[] { 1 };
        double[] doubleArray61 = new double[] { 1 };
        double[][] doubleArray62 = new double[][] { doubleArray53, doubleArray55, doubleArray57, doubleArray59, doubleArray61 };
        int[] intArray63 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray62, intArray63);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray51, intArray63);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray19, intArray63);
        double[] doubleArray68 = new double[] { 1 };
        double[] doubleArray70 = new double[] { 1 };
        double[] doubleArray72 = new double[] { 1 };
        double[] doubleArray74 = new double[] { 1 };
        double[] doubleArray76 = new double[] { 1 };
        double[][] doubleArray77 = new double[][] { doubleArray68, doubleArray70, doubleArray72, doubleArray74, doubleArray76 };
        int[] intArray78 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray77, intArray78);
        double[][] doubleArray80 = new double[][] {};
        double[][] doubleArray81 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray80);
        int[] intArray82 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray81, intArray82);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray77, intArray82);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray19, intArray82);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray7, intArray82);
        double[][] doubleArray87 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray7);
        java.lang.Class<?> wildcardClass88 = doubleArray87.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[]");
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray70), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray74), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[]");
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertNotNull(doubleArray81);
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[]");
        org.junit.Assert.assertNotNull(doubleArray87);
        org.junit.Assert.assertNotNull(wildcardClass88);
    }

    @Test
    public void test2272() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2272");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        int[] intArray2 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray1, intArray2);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray5 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray6 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray5);
        double[][] doubleArray7 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray5);
        double[][] doubleArray8 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray7);
        double[][] doubleArray9 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray8);
        double[][] doubleArray10 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray9);
        double[][] doubleArray11 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray10);
        java.lang.Class<?> wildcardClass12 = doubleArray11.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertNotNull(wildcardClass12);
    }

    @Test
    public void test2273() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2273");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[] doubleArray8 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray15 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray22 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray29 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray30 = new double[][] { doubleArray8, doubleArray15, doubleArray22, doubleArray29 };
        double[][] doubleArray31 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        double[][] doubleArray32 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        double[][] doubleArray33 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        double[][] doubleArray34 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray33);
        double[] doubleArray41 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray48 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray55 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray62 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray63 = new double[][] { doubleArray41, doubleArray48, doubleArray55, doubleArray62 };
        double[][] doubleArray64 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray63);
        double[] doubleArray66 = new double[] { 1 };
        double[] doubleArray68 = new double[] { 1 };
        double[] doubleArray70 = new double[] { 1 };
        double[] doubleArray72 = new double[] { 1 };
        double[] doubleArray74 = new double[] { 1 };
        double[][] doubleArray75 = new double[][] { doubleArray66, doubleArray68, doubleArray70, doubleArray72, doubleArray74 };
        int[] intArray76 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray75, intArray76);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray64, intArray76);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray34, intArray76);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray1, intArray76);
        double[][] doubleArray81 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray82 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray81);
        int[] intArray83 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray82, intArray83);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray66), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray70), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray74), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[]");
        org.junit.Assert.assertNotNull(doubleArray81);
        org.junit.Assert.assertNotNull(doubleArray82);
    }

    @Test
    public void test2274() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2274");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[] doubleArray9 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray16 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray23 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray30 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray31 = new double[][] { doubleArray9, doubleArray16, doubleArray23, doubleArray30 };
        double[][] doubleArray32 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray31);
        double[][] doubleArray33 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray31);
        double[][] doubleArray34 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray31);
        double[][] doubleArray35 = new double[][] {};
        double[][] doubleArray36 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray35);
        int[] intArray37 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray36, intArray37);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray34, intArray37);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray2, intArray37);
        double[][] doubleArray41 = null;
        double[][] doubleArray42 = new double[][] {};
        double[][] doubleArray43 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray42);
        double[][] doubleArray44 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray43);
        double[] doubleArray48 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray52 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray56 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray60 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray61 = new double[][] { doubleArray48, doubleArray52, doubleArray56, doubleArray60 };
        double[] doubleArray63 = new double[] { 1 };
        double[] doubleArray65 = new double[] { 1 };
        double[] doubleArray67 = new double[] { 1 };
        double[] doubleArray69 = new double[] { 1 };
        double[] doubleArray71 = new double[] { 1 };
        double[][] doubleArray72 = new double[][] { doubleArray63, doubleArray65, doubleArray67, doubleArray69, doubleArray71 };
        int[] intArray73 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray72, intArray73);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray61, intArray73);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray44, intArray73);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray41, intArray73);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray2, intArray73);
        double[][] doubleArray79 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray80 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray79);
        double[][] doubleArray81 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray80);
        double[][] doubleArray82 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray80);
        double[][] doubleArray83 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray82);
        int[] intArray84 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray83, intArray84);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray71), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[]");
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertNotNull(doubleArray81);
        org.junit.Assert.assertNotNull(doubleArray82);
        org.junit.Assert.assertNotNull(doubleArray83);
    }

    @Test
    public void test2275() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2275");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[] doubleArray31 = new double[] { 1 };
        double[] doubleArray33 = new double[] { 1 };
        double[] doubleArray35 = new double[] { 1 };
        double[] doubleArray37 = new double[] { 1 };
        double[] doubleArray39 = new double[] { 1 };
        double[][] doubleArray40 = new double[][] { doubleArray31, doubleArray33, doubleArray35, doubleArray37, doubleArray39 };
        int[] intArray41 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray40, intArray41);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray29, intArray41);
        double[][] doubleArray44 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray29);
        java.lang.Class<?> wildcardClass45 = doubleArray29.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertNotNull(wildcardClass45);
    }

    @Test
    public void test2276() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2276");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[] doubleArray11 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray18 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray25 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray32 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray33 = new double[][] { doubleArray11, doubleArray18, doubleArray25, doubleArray32 };
        double[][] doubleArray34 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray33);
        double[][] doubleArray35 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray33);
        double[][] doubleArray36 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray33);
        double[][] doubleArray37 = new double[][] {};
        double[][] doubleArray38 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray37);
        int[] intArray39 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray38, intArray39);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray36, intArray39);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray4, intArray39);
        double[][] doubleArray43 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray4);
        double[][] doubleArray44 = null;
        double[][] doubleArray45 = new double[][] {};
        double[][] doubleArray46 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray45);
        double[][] doubleArray47 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray45);
        double[][] doubleArray48 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray45);
        double[] doubleArray55 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray62 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray69 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray76 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray77 = new double[][] { doubleArray55, doubleArray62, doubleArray69, doubleArray76 };
        double[][] doubleArray78 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray77);
        double[][] doubleArray79 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray77);
        double[][] doubleArray80 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray77);
        double[][] doubleArray81 = new double[][] {};
        double[][] doubleArray82 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray81);
        int[] intArray83 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray82, intArray83);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray80, intArray83);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray48, intArray83);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray44, intArray83);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray4, intArray83);
        double[][] doubleArray89 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray4);
        java.lang.Class<?> wildcardClass90 = doubleArray4.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertNotNull(doubleArray81);
        org.junit.Assert.assertNotNull(doubleArray82);
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray83), "[]");
        org.junit.Assert.assertNotNull(doubleArray89);
        org.junit.Assert.assertNotNull(wildcardClass90);
    }

    @Test
    public void test2277() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2277");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = new double[][] {};
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[] doubleArray8 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray12 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray16 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray20 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray21 = new double[][] { doubleArray8, doubleArray12, doubleArray16, doubleArray20 };
        double[] doubleArray23 = new double[] { 1 };
        double[] doubleArray25 = new double[] { 1 };
        double[] doubleArray27 = new double[] { 1 };
        double[] doubleArray29 = new double[] { 1 };
        double[] doubleArray31 = new double[] { 1 };
        double[][] doubleArray32 = new double[][] { doubleArray23, doubleArray25, doubleArray27, doubleArray29, doubleArray31 };
        int[] intArray33 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray32, intArray33);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray21, intArray33);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray3, intArray33);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray1, intArray33);
        double[][] doubleArray38 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray39 = new double[][] {};
        double[][] doubleArray40 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray39);
        double[] doubleArray42 = new double[] { 1 };
        double[] doubleArray44 = new double[] { 1 };
        double[] doubleArray46 = new double[] { 1 };
        double[] doubleArray48 = new double[] { 1 };
        double[] doubleArray50 = new double[] { 1 };
        double[][] doubleArray51 = new double[][] { doubleArray42, doubleArray44, doubleArray46, doubleArray48, doubleArray50 };
        int[] intArray52 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray51, intArray52);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray39, intArray52);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray1, intArray52);
        double[][] doubleArray56 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray57 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray58 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray59 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray60 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray59);
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[]");
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertNotNull(doubleArray60);
    }

    @Test
    public void test2278() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2278");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray30 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray31 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray32 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray31);
        double[][] doubleArray33 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray32);
        double[][] doubleArray34 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray32);
        double[][] doubleArray35 = new double[][] {};
        double[][] doubleArray36 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray35);
        double[][] doubleArray37 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray35);
        double[][] doubleArray38 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray35);
        double[][] doubleArray39 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray35);
        double[][] doubleArray40 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray35);
        double[][] doubleArray41 = new double[][] {};
        double[][] doubleArray42 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray41);
        double[][] doubleArray43 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray41);
        double[][] doubleArray44 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray43);
        double[][] doubleArray45 = null;
        double[][] doubleArray46 = new double[][] {};
        double[][] doubleArray47 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray46);
        double[][] doubleArray48 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray47);
        double[] doubleArray52 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray56 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray60 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray64 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray65 = new double[][] { doubleArray52, doubleArray56, doubleArray60, doubleArray64 };
        double[] doubleArray67 = new double[] { 1 };
        double[] doubleArray69 = new double[] { 1 };
        double[] doubleArray71 = new double[] { 1 };
        double[] doubleArray73 = new double[] { 1 };
        double[] doubleArray75 = new double[] { 1 };
        double[][] doubleArray76 = new double[][] { doubleArray67, doubleArray69, doubleArray71, doubleArray73, doubleArray75 };
        int[] intArray77 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray76, intArray77);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray65, intArray77);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray48, intArray77);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray45, intArray77);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray44, intArray77);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray40, intArray77);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray34, intArray77);
        double[][] doubleArray85 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray34);
        java.lang.Class<?> wildcardClass86 = doubleArray34.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray71), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray73), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray75), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray77), "[]");
        org.junit.Assert.assertNotNull(doubleArray85);
        org.junit.Assert.assertNotNull(wildcardClass86);
    }

    @Test
    public void test2279() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2279");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        int[] intArray2 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray1, intArray2);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray5 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray6 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray5);
        double[][] doubleArray7 = new double[][] {};
        double[][] doubleArray8 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray7);
        double[][] doubleArray9 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray8);
        double[][] doubleArray10 = new double[][] {};
        double[][] doubleArray11 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray10);
        double[][] doubleArray12 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray10);
        double[][] doubleArray13 = new double[][] {};
        double[][] doubleArray14 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray13);
        double[][] doubleArray15 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray14);
        double[][] doubleArray16 = new double[][] {};
        double[][] doubleArray17 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray16);
        double[][] doubleArray18 = new double[][] {};
        double[][] doubleArray19 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray18);
        double[] doubleArray21 = new double[] { 1 };
        double[] doubleArray23 = new double[] { 1 };
        double[] doubleArray25 = new double[] { 1 };
        double[] doubleArray27 = new double[] { 1 };
        double[] doubleArray29 = new double[] { 1 };
        double[][] doubleArray30 = new double[][] { doubleArray21, doubleArray23, doubleArray25, doubleArray27, doubleArray29 };
        int[] intArray31 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray30, intArray31);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray18, intArray31);
        double[] doubleArray37 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray41 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray45 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray49 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray50 = new double[][] { doubleArray37, doubleArray41, doubleArray45, doubleArray49 };
        double[] doubleArray52 = new double[] { 1 };
        double[] doubleArray54 = new double[] { 1 };
        double[] doubleArray56 = new double[] { 1 };
        double[] doubleArray58 = new double[] { 1 };
        double[] doubleArray60 = new double[] { 1 };
        double[][] doubleArray61 = new double[][] { doubleArray52, doubleArray54, doubleArray56, doubleArray58, doubleArray60 };
        int[] intArray62 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray61, intArray62);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray50, intArray62);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray18, intArray62);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray17, intArray62);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray15, intArray62);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray10, intArray62);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray9, intArray62);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray6, intArray62);
        double[][] doubleArray71 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray6);
        double[][] doubleArray72 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray71);
        double[][] doubleArray73 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray72);
        double[][] doubleArray74 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray72);
        double[][] doubleArray75 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray74);
        double[][] doubleArray76 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray74);
        java.lang.Class<?> wildcardClass77 = doubleArray76.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[]");
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertNotNull(wildcardClass77);
    }

    @Test
    public void test2280() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2280");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = new double[][] {};
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[] doubleArray8 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray12 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray16 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray20 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray21 = new double[][] { doubleArray8, doubleArray12, doubleArray16, doubleArray20 };
        double[] doubleArray23 = new double[] { 1 };
        double[] doubleArray25 = new double[] { 1 };
        double[] doubleArray27 = new double[] { 1 };
        double[] doubleArray29 = new double[] { 1 };
        double[] doubleArray31 = new double[] { 1 };
        double[][] doubleArray32 = new double[][] { doubleArray23, doubleArray25, doubleArray27, doubleArray29, doubleArray31 };
        int[] intArray33 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray32, intArray33);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray21, intArray33);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray3, intArray33);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray1, intArray33);
        double[][] doubleArray38 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray39 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray38);
        double[][] doubleArray40 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray39);
        double[][] doubleArray41 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray39);
        double[][] doubleArray42 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray41);
        double[][] doubleArray43 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray41);
        double[][] doubleArray44 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray41);
        double[][] doubleArray45 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray44);
        double[][] doubleArray46 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray45);
        java.lang.Class<?> wildcardClass47 = doubleArray46.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertNotNull(wildcardClass47);
    }

    @Test
    public void test2281() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2281");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[] doubleArray3 = new double[] { 1 };
        double[] doubleArray5 = new double[] { 1 };
        double[] doubleArray7 = new double[] { 1 };
        double[] doubleArray9 = new double[] { 1 };
        double[] doubleArray11 = new double[] { 1 };
        double[][] doubleArray12 = new double[][] { doubleArray3, doubleArray5, doubleArray7, doubleArray9, doubleArray11 };
        int[] intArray13 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray12, intArray13);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray0, intArray13);
        double[] doubleArray19 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray23 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray27 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray31 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray32 = new double[][] { doubleArray19, doubleArray23, doubleArray27, doubleArray31 };
        double[] doubleArray34 = new double[] { 1 };
        double[] doubleArray36 = new double[] { 1 };
        double[] doubleArray38 = new double[] { 1 };
        double[] doubleArray40 = new double[] { 1 };
        double[] doubleArray42 = new double[] { 1 };
        double[][] doubleArray43 = new double[][] { doubleArray34, doubleArray36, doubleArray38, doubleArray40, doubleArray42 };
        int[] intArray44 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray43, intArray44);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray32, intArray44);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray0, intArray44);
        double[] doubleArray49 = new double[] { 1 };
        double[] doubleArray51 = new double[] { 1 };
        double[] doubleArray53 = new double[] { 1 };
        double[] doubleArray55 = new double[] { 1 };
        double[] doubleArray57 = new double[] { 1 };
        double[][] doubleArray58 = new double[][] { doubleArray49, doubleArray51, doubleArray53, doubleArray55, doubleArray57 };
        int[] intArray59 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray58, intArray59);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray0, intArray59);
        double[][] doubleArray62 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray63 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray64 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray63);
        double[][] doubleArray65 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray64);
        double[][] doubleArray66 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray65);
        double[][] doubleArray67 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray65);
        java.lang.Class<?> wildcardClass68 = doubleArray65.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[]");
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertNotNull(wildcardClass68);
    }

    @Test
    public void test2282() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2282");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = new double[][] {};
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[] doubleArray8 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray12 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray16 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray20 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray21 = new double[][] { doubleArray8, doubleArray12, doubleArray16, doubleArray20 };
        double[] doubleArray23 = new double[] { 1 };
        double[] doubleArray25 = new double[] { 1 };
        double[] doubleArray27 = new double[] { 1 };
        double[] doubleArray29 = new double[] { 1 };
        double[] doubleArray31 = new double[] { 1 };
        double[][] doubleArray32 = new double[][] { doubleArray23, doubleArray25, doubleArray27, doubleArray29, doubleArray31 };
        int[] intArray33 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray32, intArray33);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray21, intArray33);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray3, intArray33);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray1, intArray33);
        double[][] doubleArray38 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray39 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray38);
        double[][] doubleArray40 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray38);
        double[][] doubleArray41 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray38);
        double[][] doubleArray42 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray38);
        double[][] doubleArray43 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray42);
        java.lang.Class<?> wildcardClass44 = doubleArray43.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(wildcardClass44);
    }

    @Test
    public void test2283() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2283");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[] doubleArray31 = new double[] { 1 };
        double[] doubleArray33 = new double[] { 1 };
        double[] doubleArray35 = new double[] { 1 };
        double[] doubleArray37 = new double[] { 1 };
        double[] doubleArray39 = new double[] { 1 };
        double[][] doubleArray40 = new double[][] { doubleArray31, doubleArray33, doubleArray35, doubleArray37, doubleArray39 };
        int[] intArray41 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray40, intArray41);
        double[][] doubleArray43 = new double[][] {};
        double[][] doubleArray44 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray43);
        int[] intArray45 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray44, intArray45);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray40, intArray45);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray28, intArray45);
        double[][] doubleArray49 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray50 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray51 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray52 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray53 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray54 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray53);
        double[][] doubleArray55 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray54);
        double[][] doubleArray56 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray54);
        java.lang.Class<?> wildcardClass57 = doubleArray56.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertNotNull(wildcardClass57);
    }

    @Test
    public void test2284() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2284");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray30 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray29);
        double[][] doubleArray31 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        double[][] doubleArray32 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray31);
        double[][] doubleArray33 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray31);
        double[] doubleArray35 = new double[] { 1 };
        double[] doubleArray37 = new double[] { 1 };
        double[] doubleArray39 = new double[] { 1 };
        double[] doubleArray41 = new double[] { 1 };
        double[] doubleArray43 = new double[] { 1 };
        double[][] doubleArray44 = new double[][] { doubleArray35, doubleArray37, doubleArray39, doubleArray41, doubleArray43 };
        int[] intArray45 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray44, intArray45);
        double[][] doubleArray47 = new double[][] {};
        double[][] doubleArray48 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray47);
        int[] intArray49 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray48, intArray49);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray44, intArray49);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray33, intArray49);
        double[][] doubleArray53 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray33);
        int[] intArray54 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray53, intArray54);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[]");
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[]");
        org.junit.Assert.assertNotNull(doubleArray53);
    }

    @Test
    public void test2285() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2285");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[][] doubleArray5 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[][] doubleArray6 = new double[][] {};
        double[][] doubleArray7 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray6);
        double[][] doubleArray8 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray7);
        double[] doubleArray15 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray22 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray29 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray36 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray37 = new double[][] { doubleArray15, doubleArray22, doubleArray29, doubleArray36 };
        double[][] doubleArray38 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray37);
        double[] doubleArray40 = new double[] { 1 };
        double[] doubleArray42 = new double[] { 1 };
        double[] doubleArray44 = new double[] { 1 };
        double[] doubleArray46 = new double[] { 1 };
        double[] doubleArray48 = new double[] { 1 };
        double[][] doubleArray49 = new double[][] { doubleArray40, doubleArray42, doubleArray44, doubleArray46, doubleArray48 };
        int[] intArray50 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray49, intArray50);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray38, intArray50);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray7, intArray50);
        double[] doubleArray57 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray61 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray65 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray69 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray70 = new double[][] { doubleArray57, doubleArray61, doubleArray65, doubleArray69 };
        double[] doubleArray72 = new double[] { 1 };
        double[] doubleArray74 = new double[] { 1 };
        double[] doubleArray76 = new double[] { 1 };
        double[] doubleArray78 = new double[] { 1 };
        double[] doubleArray80 = new double[] { 1 };
        double[][] doubleArray81 = new double[][] { doubleArray72, doubleArray74, doubleArray76, doubleArray78, doubleArray80 };
        int[] intArray82 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray81, intArray82);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray70, intArray82);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray7, intArray82);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray3, intArray82);
        double[][] doubleArray87 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[][] doubleArray88 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[][] doubleArray89 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray88);
        double[][] doubleArray90 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray88);
        double[][] doubleArray91 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray90);
        double[][] doubleArray92 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray91);
        double[][] doubleArray93 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray92);
        double[][] doubleArray94 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray92);
        double[][] doubleArray95 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray92);
        java.lang.Class<?> wildcardClass96 = doubleArray92.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[]");
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray74), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray78), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray80), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray81);
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[]");
        org.junit.Assert.assertNotNull(doubleArray87);
        org.junit.Assert.assertNotNull(doubleArray88);
        org.junit.Assert.assertNotNull(doubleArray89);
        org.junit.Assert.assertNotNull(doubleArray90);
        org.junit.Assert.assertNotNull(doubleArray91);
        org.junit.Assert.assertNotNull(doubleArray92);
        org.junit.Assert.assertNotNull(doubleArray93);
        org.junit.Assert.assertNotNull(doubleArray94);
        org.junit.Assert.assertNotNull(doubleArray95);
        org.junit.Assert.assertNotNull(wildcardClass96);
    }

    @Test
    public void test2286() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2286");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[] doubleArray6 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray10 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray14 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray18 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray19 = new double[][] { doubleArray6, doubleArray10, doubleArray14, doubleArray18 };
        double[] doubleArray21 = new double[] { 1 };
        double[] doubleArray23 = new double[] { 1 };
        double[] doubleArray25 = new double[] { 1 };
        double[] doubleArray27 = new double[] { 1 };
        double[] doubleArray29 = new double[] { 1 };
        double[][] doubleArray30 = new double[][] { doubleArray21, doubleArray23, doubleArray25, doubleArray27, doubleArray29 };
        int[] intArray31 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray30, intArray31);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray19, intArray31);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray2, intArray31);
        double[][] doubleArray35 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray36 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray37 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray38 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray37);
        double[] doubleArray45 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray52 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray59 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray66 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray67 = new double[][] { doubleArray45, doubleArray52, doubleArray59, doubleArray66 };
        double[][] doubleArray68 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray67);
        double[] doubleArray70 = new double[] { 1 };
        double[] doubleArray72 = new double[] { 1 };
        double[] doubleArray74 = new double[] { 1 };
        double[] doubleArray76 = new double[] { 1 };
        double[] doubleArray78 = new double[] { 1 };
        double[][] doubleArray79 = new double[][] { doubleArray70, doubleArray72, doubleArray74, doubleArray76, doubleArray78 };
        int[] intArray80 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray79, intArray80);
        double[][] doubleArray82 = new double[][] {};
        double[][] doubleArray83 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray82);
        int[] intArray84 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray83, intArray84);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray79, intArray84);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray67, intArray84);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray37, intArray84);
        double[][] doubleArray89 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray37);
        double[][] doubleArray90 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray89);
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray66), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray70), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray74), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray78), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[]");
        org.junit.Assert.assertNotNull(doubleArray82);
        org.junit.Assert.assertNotNull(doubleArray83);
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray84), "[]");
        org.junit.Assert.assertNotNull(doubleArray89);
        org.junit.Assert.assertNotNull(doubleArray90);
    }

    @Test
    public void test2287() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2287");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = new double[][] {};
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[] doubleArray8 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray12 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray16 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray20 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray21 = new double[][] { doubleArray8, doubleArray12, doubleArray16, doubleArray20 };
        double[] doubleArray23 = new double[] { 1 };
        double[] doubleArray25 = new double[] { 1 };
        double[] doubleArray27 = new double[] { 1 };
        double[] doubleArray29 = new double[] { 1 };
        double[] doubleArray31 = new double[] { 1 };
        double[][] doubleArray32 = new double[][] { doubleArray23, doubleArray25, doubleArray27, doubleArray29, doubleArray31 };
        int[] intArray33 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray32, intArray33);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray21, intArray33);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray3, intArray33);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray1, intArray33);
        double[][] doubleArray38 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray39 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray38);
        double[][] doubleArray40 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray38);
        double[][] doubleArray41 = new double[][] {};
        double[][] doubleArray42 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray41);
        double[][] doubleArray43 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray41);
        double[][] doubleArray44 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray41);
        double[] doubleArray51 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray58 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray65 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray72 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray73 = new double[][] { doubleArray51, doubleArray58, doubleArray65, doubleArray72 };
        double[][] doubleArray74 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray73);
        double[][] doubleArray75 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray73);
        double[][] doubleArray76 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray73);
        double[][] doubleArray77 = new double[][] {};
        double[][] doubleArray78 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray77);
        int[] intArray79 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray78, intArray79);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray76, intArray79);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray44, intArray79);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray38, intArray79);
        double[][] doubleArray84 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray38);
        double[][] doubleArray85 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray38);
        double[][] doubleArray86 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray85);
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray79), "[]");
        org.junit.Assert.assertNotNull(doubleArray84);
        org.junit.Assert.assertNotNull(doubleArray85);
        org.junit.Assert.assertNotNull(doubleArray86);
    }

    @Test
    public void test2288() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2288");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        int[] intArray2 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray1, intArray2);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[] doubleArray11 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray18 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray25 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray32 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray33 = new double[][] { doubleArray11, doubleArray18, doubleArray25, doubleArray32 };
        double[][] doubleArray34 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray33);
        double[] doubleArray41 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray48 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray55 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray62 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray63 = new double[][] { doubleArray41, doubleArray48, doubleArray55, doubleArray62 };
        double[][] doubleArray64 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray63);
        double[][] doubleArray65 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray63);
        double[][] doubleArray66 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray63);
        double[][] doubleArray67 = new double[][] {};
        double[][] doubleArray68 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray67);
        int[] intArray69 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray68, intArray69);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray66, intArray69);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray34, intArray69);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray4, intArray69);
        double[][] doubleArray74 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray4);
        double[][] doubleArray75 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray4);
        java.lang.Class<?> wildcardClass76 = doubleArray75.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[]");
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertNotNull(wildcardClass76);
    }

    @Test
    public void test2289() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2289");
        double[][] doubleArray0 = null;
        double[] doubleArray7 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray14 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray21 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray28 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray29 = new double[][] { doubleArray7, doubleArray14, doubleArray21, doubleArray28 };
        double[][] doubleArray30 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray29);
        double[][] doubleArray31 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        double[][] doubleArray32 = new double[][] {};
        double[][] doubleArray33 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray32);
        double[] doubleArray35 = new double[] { 1 };
        double[] doubleArray37 = new double[] { 1 };
        double[] doubleArray39 = new double[] { 1 };
        double[] doubleArray41 = new double[] { 1 };
        double[] doubleArray43 = new double[] { 1 };
        double[][] doubleArray44 = new double[][] { doubleArray35, doubleArray37, doubleArray39, doubleArray41, doubleArray43 };
        int[] intArray45 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray44, intArray45);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray32, intArray45);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray31, intArray45);
        double[][] doubleArray49 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray31);
        double[][] doubleArray50 = new double[][] {};
        double[][] doubleArray51 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray50);
        int[] intArray52 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray51, intArray52);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray49, intArray52);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray0, intArray52);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[]");
    }

    @Test
    public void test2290() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2290");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        int[] intArray2 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray1, intArray2);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray5 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray6 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray5);
        double[][] doubleArray7 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray5);
        double[][] doubleArray8 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray7);
        double[][] doubleArray9 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray7);
        java.lang.Class<?> wildcardClass10 = doubleArray9.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertNotNull(wildcardClass10);
    }

    @Test
    public void test2291() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2291");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray30 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray29);
        double[][] doubleArray31 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        double[][] doubleArray32 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        double[][] doubleArray33 = new double[][] {};
        double[][] doubleArray34 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray33);
        double[] doubleArray36 = new double[] { 1 };
        double[] doubleArray38 = new double[] { 1 };
        double[] doubleArray40 = new double[] { 1 };
        double[] doubleArray42 = new double[] { 1 };
        double[] doubleArray44 = new double[] { 1 };
        double[][] doubleArray45 = new double[][] { doubleArray36, doubleArray38, doubleArray40, doubleArray42, doubleArray44 };
        int[] intArray46 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray45, intArray46);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray33, intArray46);
        double[] doubleArray52 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray56 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray60 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray64 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray65 = new double[][] { doubleArray52, doubleArray56, doubleArray60, doubleArray64 };
        double[] doubleArray67 = new double[] { 1 };
        double[] doubleArray69 = new double[] { 1 };
        double[] doubleArray71 = new double[] { 1 };
        double[] doubleArray73 = new double[] { 1 };
        double[] doubleArray75 = new double[] { 1 };
        double[][] doubleArray76 = new double[][] { doubleArray67, doubleArray69, doubleArray71, doubleArray73, doubleArray75 };
        int[] intArray77 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray76, intArray77);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray65, intArray77);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray33, intArray77);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray32, intArray77);
        double[][] doubleArray82 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray32);
        double[][] doubleArray83 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray32);
        double[][] doubleArray84 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray32);
        double[][] doubleArray85 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray84);
        java.lang.Class<?> wildcardClass86 = doubleArray85.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[]");
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray71), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray73), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray75), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray77), "[]");
        org.junit.Assert.assertNotNull(doubleArray82);
        org.junit.Assert.assertNotNull(doubleArray83);
        org.junit.Assert.assertNotNull(doubleArray84);
        org.junit.Assert.assertNotNull(doubleArray85);
        org.junit.Assert.assertNotNull(wildcardClass86);
    }

    @Test
    public void test2292() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2292");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[] doubleArray3 = new double[] { 1 };
        double[] doubleArray5 = new double[] { 1 };
        double[] doubleArray7 = new double[] { 1 };
        double[] doubleArray9 = new double[] { 1 };
        double[] doubleArray11 = new double[] { 1 };
        double[][] doubleArray12 = new double[][] { doubleArray3, doubleArray5, doubleArray7, doubleArray9, doubleArray11 };
        int[] intArray13 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray12, intArray13);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray0, intArray13);
        double[] doubleArray19 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray23 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray27 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray31 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray32 = new double[][] { doubleArray19, doubleArray23, doubleArray27, doubleArray31 };
        double[] doubleArray34 = new double[] { 1 };
        double[] doubleArray36 = new double[] { 1 };
        double[] doubleArray38 = new double[] { 1 };
        double[] doubleArray40 = new double[] { 1 };
        double[] doubleArray42 = new double[] { 1 };
        double[][] doubleArray43 = new double[][] { doubleArray34, doubleArray36, doubleArray38, doubleArray40, doubleArray42 };
        int[] intArray44 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray43, intArray44);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray32, intArray44);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray0, intArray44);
        double[] doubleArray49 = new double[] { 1 };
        double[] doubleArray51 = new double[] { 1 };
        double[] doubleArray53 = new double[] { 1 };
        double[] doubleArray55 = new double[] { 1 };
        double[] doubleArray57 = new double[] { 1 };
        double[][] doubleArray58 = new double[][] { doubleArray49, doubleArray51, doubleArray53, doubleArray55, doubleArray57 };
        int[] intArray59 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray58, intArray59);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray0, intArray59);
        double[][] doubleArray62 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray63 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray64 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        java.lang.Class<?> wildcardClass65 = doubleArray64.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[]");
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertNotNull(wildcardClass65);
    }

    @Test
    public void test2293() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2293");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[][] doubleArray5 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[][] doubleArray6 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[][] doubleArray7 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[][] doubleArray8 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[] doubleArray15 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray22 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray29 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray36 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray37 = new double[][] { doubleArray15, doubleArray22, doubleArray29, doubleArray36 };
        double[][] doubleArray38 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray37);
        double[] doubleArray40 = new double[] { 1 };
        double[] doubleArray42 = new double[] { 1 };
        double[] doubleArray44 = new double[] { 1 };
        double[] doubleArray46 = new double[] { 1 };
        double[] doubleArray48 = new double[] { 1 };
        double[][] doubleArray49 = new double[][] { doubleArray40, doubleArray42, doubleArray44, doubleArray46, doubleArray48 };
        int[] intArray50 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray49, intArray50);
        double[][] doubleArray52 = new double[][] {};
        double[][] doubleArray53 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray52);
        int[] intArray54 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray53, intArray54);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray49, intArray54);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray37, intArray54);
        double[][] doubleArray58 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray37);
        double[][] doubleArray59 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray37);
        double[][] doubleArray60 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray37);
        double[][] doubleArray61 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray37);
        double[][] doubleArray62 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray37);
        int[] intArray64 = new int[] { '4' };
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray37, intArray64);
        // The following exception was thrown during execution in test generation
        try {
            com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray3, intArray64);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[]");
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[]");
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[0]");
    }

    @Test
    public void test2294() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2294");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = new double[][] {};
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[] doubleArray8 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray12 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray16 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray20 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray21 = new double[][] { doubleArray8, doubleArray12, doubleArray16, doubleArray20 };
        double[] doubleArray23 = new double[] { 1 };
        double[] doubleArray25 = new double[] { 1 };
        double[] doubleArray27 = new double[] { 1 };
        double[] doubleArray29 = new double[] { 1 };
        double[] doubleArray31 = new double[] { 1 };
        double[][] doubleArray32 = new double[][] { doubleArray23, doubleArray25, doubleArray27, doubleArray29, doubleArray31 };
        int[] intArray33 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray32, intArray33);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray21, intArray33);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray3, intArray33);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray1, intArray33);
        double[][] doubleArray38 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray39 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray38);
        double[][] doubleArray40 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray38);
        double[][] doubleArray41 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray38);
        double[][] doubleArray42 = new double[][] {};
        double[][] doubleArray43 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray42);
        double[][] doubleArray44 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray42);
        double[][] doubleArray45 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray42);
        double[][] doubleArray46 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray45);
        double[][] doubleArray47 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray46);
        double[][] doubleArray48 = new double[][] {};
        double[][] doubleArray49 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray48);
        double[][] doubleArray50 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray48);
        double[][] doubleArray51 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray50);
        double[][] doubleArray52 = null;
        double[][] doubleArray53 = new double[][] {};
        double[][] doubleArray54 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray53);
        double[][] doubleArray55 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray54);
        double[] doubleArray59 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray63 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray67 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray71 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray72 = new double[][] { doubleArray59, doubleArray63, doubleArray67, doubleArray71 };
        double[] doubleArray74 = new double[] { 1 };
        double[] doubleArray76 = new double[] { 1 };
        double[] doubleArray78 = new double[] { 1 };
        double[] doubleArray80 = new double[] { 1 };
        double[] doubleArray82 = new double[] { 1 };
        double[][] doubleArray83 = new double[][] { doubleArray74, doubleArray76, doubleArray78, doubleArray80, doubleArray82 };
        int[] intArray84 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray83, intArray84);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray72, intArray84);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray55, intArray84);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray52, intArray84);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray51, intArray84);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray46, intArray84);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray38, intArray84);
        double[][] doubleArray92 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray38);
        double[][] doubleArray93 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray38);
        java.lang.Class<?> wildcardClass94 = doubleArray93.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray71), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray74), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray78), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray80), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray82), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray83);
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray84), "[]");
        org.junit.Assert.assertNotNull(doubleArray92);
        org.junit.Assert.assertNotNull(doubleArray93);
        org.junit.Assert.assertNotNull(wildcardClass94);
    }

    @Test
    public void test2295() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2295");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray5 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray4);
        double[][] doubleArray6 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray5);
        double[][] doubleArray7 = new double[][] {};
        double[][] doubleArray8 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray7);
        double[] doubleArray10 = new double[] { 1 };
        double[] doubleArray12 = new double[] { 1 };
        double[] doubleArray14 = new double[] { 1 };
        double[] doubleArray16 = new double[] { 1 };
        double[] doubleArray18 = new double[] { 1 };
        double[][] doubleArray19 = new double[][] { doubleArray10, doubleArray12, doubleArray14, doubleArray16, doubleArray18 };
        int[] intArray20 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray19, intArray20);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray7, intArray20);
        double[] doubleArray26 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray30 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray34 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray38 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray39 = new double[][] { doubleArray26, doubleArray30, doubleArray34, doubleArray38 };
        double[] doubleArray41 = new double[] { 1 };
        double[] doubleArray43 = new double[] { 1 };
        double[] doubleArray45 = new double[] { 1 };
        double[] doubleArray47 = new double[] { 1 };
        double[] doubleArray49 = new double[] { 1 };
        double[][] doubleArray50 = new double[][] { doubleArray41, doubleArray43, doubleArray45, doubleArray47, doubleArray49 };
        int[] intArray51 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray50, intArray51);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray39, intArray51);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray7, intArray51);
        double[] doubleArray56 = new double[] { 1 };
        double[] doubleArray58 = new double[] { 1 };
        double[] doubleArray60 = new double[] { 1 };
        double[] doubleArray62 = new double[] { 1 };
        double[] doubleArray64 = new double[] { 1 };
        double[][] doubleArray65 = new double[][] { doubleArray56, doubleArray58, doubleArray60, doubleArray62, doubleArray64 };
        int[] intArray66 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray65, intArray66);
        double[][] doubleArray68 = new double[][] {};
        double[][] doubleArray69 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray68);
        int[] intArray70 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray69, intArray70);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray65, intArray70);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray7, intArray70);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray5, intArray70);
        java.lang.Class<?> wildcardClass75 = intArray70.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[]");
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[]");
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[]");
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[]");
        org.junit.Assert.assertNotNull(wildcardClass75);
    }

    @Test
    public void test2296() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2296");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = new double[][] {};
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[] doubleArray5 = new double[] { 1 };
        double[] doubleArray7 = new double[] { 1 };
        double[] doubleArray9 = new double[] { 1 };
        double[] doubleArray11 = new double[] { 1 };
        double[] doubleArray13 = new double[] { 1 };
        double[][] doubleArray14 = new double[][] { doubleArray5, doubleArray7, doubleArray9, doubleArray11, doubleArray13 };
        int[] intArray15 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray14, intArray15);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray2, intArray15);
        double[] doubleArray21 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray25 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray29 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray33 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray34 = new double[][] { doubleArray21, doubleArray25, doubleArray29, doubleArray33 };
        double[] doubleArray36 = new double[] { 1 };
        double[] doubleArray38 = new double[] { 1 };
        double[] doubleArray40 = new double[] { 1 };
        double[] doubleArray42 = new double[] { 1 };
        double[] doubleArray44 = new double[] { 1 };
        double[][] doubleArray45 = new double[][] { doubleArray36, doubleArray38, doubleArray40, doubleArray42, doubleArray44 };
        int[] intArray46 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray45, intArray46);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray34, intArray46);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray2, intArray46);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray1, intArray46);
        double[][] doubleArray51 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray52 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray51);
        double[][] doubleArray53 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray52);
        double[][] doubleArray54 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray52);
        double[][] doubleArray55 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray54);
        double[][] doubleArray56 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray55);
        double[][] doubleArray57 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray56);
        double[][] doubleArray58 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray57);
        double[][] doubleArray59 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray58);
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertNotNull(doubleArray59);
    }

    @Test
    public void test2297() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2297");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray30 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray29);
        double[][] doubleArray31 = new double[][] {};
        double[][] doubleArray32 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray31);
        double[] doubleArray34 = new double[] { 1 };
        double[] doubleArray36 = new double[] { 1 };
        double[] doubleArray38 = new double[] { 1 };
        double[] doubleArray40 = new double[] { 1 };
        double[] doubleArray42 = new double[] { 1 };
        double[][] doubleArray43 = new double[][] { doubleArray34, doubleArray36, doubleArray38, doubleArray40, doubleArray42 };
        int[] intArray44 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray43, intArray44);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray31, intArray44);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray30, intArray44);
        double[][] doubleArray48 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        double[][] doubleArray49 = new double[][] {};
        double[][] doubleArray50 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray49);
        int[] intArray51 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray50, intArray51);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray48, intArray51);
        double[][] doubleArray54 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray48);
        double[][] doubleArray55 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray54);
        double[][] doubleArray56 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray54);
        double[][] doubleArray57 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray56);
        double[][] doubleArray58 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray56);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[]");
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertNotNull(doubleArray58);
    }

    @Test
    public void test2298() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2298");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray3 = new double[][] {};
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[][] doubleArray5 = new double[][] {};
        double[][] doubleArray6 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray5);
        double[] doubleArray8 = new double[] { 1 };
        double[] doubleArray10 = new double[] { 1 };
        double[] doubleArray12 = new double[] { 1 };
        double[] doubleArray14 = new double[] { 1 };
        double[] doubleArray16 = new double[] { 1 };
        double[][] doubleArray17 = new double[][] { doubleArray8, doubleArray10, doubleArray12, doubleArray14, doubleArray16 };
        int[] intArray18 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray17, intArray18);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray5, intArray18);
        double[] doubleArray24 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray28 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray32 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray36 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray37 = new double[][] { doubleArray24, doubleArray28, doubleArray32, doubleArray36 };
        double[] doubleArray39 = new double[] { 1 };
        double[] doubleArray41 = new double[] { 1 };
        double[] doubleArray43 = new double[] { 1 };
        double[] doubleArray45 = new double[] { 1 };
        double[] doubleArray47 = new double[] { 1 };
        double[][] doubleArray48 = new double[][] { doubleArray39, doubleArray41, doubleArray43, doubleArray45, doubleArray47 };
        int[] intArray49 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray48, intArray49);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray37, intArray49);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray5, intArray49);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray4, intArray49);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray2, intArray49);
        double[][] doubleArray55 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray56 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray55);
        double[][] doubleArray57 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray55);
        double[][] doubleArray58 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray57);
        double[][] doubleArray59 = new double[][] {};
        double[][] doubleArray60 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray59);
        double[][] doubleArray61 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray60);
        double[] doubleArray65 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray69 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray73 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray77 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray78 = new double[][] { doubleArray65, doubleArray69, doubleArray73, doubleArray77 };
        double[] doubleArray80 = new double[] { 1 };
        double[] doubleArray82 = new double[] { 1 };
        double[] doubleArray84 = new double[] { 1 };
        double[] doubleArray86 = new double[] { 1 };
        double[] doubleArray88 = new double[] { 1 };
        double[][] doubleArray89 = new double[][] { doubleArray80, doubleArray82, doubleArray84, doubleArray86, doubleArray88 };
        int[] intArray90 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray89, intArray90);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray78, intArray90);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray61, intArray90);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray57, intArray90);
        double[][] doubleArray95 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray57);
        double[][] doubleArray96 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray95);
        double[][] doubleArray97 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray96);
        double[][] doubleArray98 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray97);
        java.lang.Class<?> wildcardClass99 = doubleArray97.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[]");
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[]");
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray73), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray77), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray80), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray82), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray84), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray86), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray88), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray89);
        org.junit.Assert.assertNotNull(intArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray90), "[]");
        org.junit.Assert.assertNotNull(doubleArray95);
        org.junit.Assert.assertNotNull(doubleArray96);
        org.junit.Assert.assertNotNull(doubleArray97);
        org.junit.Assert.assertNotNull(doubleArray98);
        org.junit.Assert.assertNotNull(wildcardClass99);
    }

    @Test
    public void test2299() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2299");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        int[] intArray2 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray1, intArray2);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray5 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray4);
        double[][] doubleArray6 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray5);
        double[][] doubleArray7 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray6);
        double[][] doubleArray8 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray7);
        double[] doubleArray15 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray22 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray29 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray36 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray37 = new double[][] { doubleArray15, doubleArray22, doubleArray29, doubleArray36 };
        double[][] doubleArray38 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray37);
        double[][] doubleArray39 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray38);
        double[][] doubleArray40 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray39);
        double[][] doubleArray41 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray39);
        double[][] doubleArray42 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray39);
        double[][] doubleArray43 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray42);
        double[][] doubleArray44 = new double[][] {};
        double[][] doubleArray45 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray44);
        double[][] doubleArray46 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray45);
        double[][] doubleArray47 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray46);
        double[][] doubleArray48 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray46);
        double[] doubleArray55 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray62 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray69 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray76 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray77 = new double[][] { doubleArray55, doubleArray62, doubleArray69, doubleArray76 };
        double[][] doubleArray78 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray77);
        double[][] doubleArray79 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray77);
        double[][] doubleArray80 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray77);
        double[][] doubleArray81 = new double[][] {};
        double[][] doubleArray82 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray81);
        int[] intArray83 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray82, intArray83);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray80, intArray83);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray48, intArray83);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray42, intArray83);
        double[][] doubleArray88 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray42);
        double[][] doubleArray89 = new double[][] {};
        double[][] doubleArray90 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray89);
        int[] intArray91 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray90, intArray91);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray88, intArray91);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray8, intArray91);
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertNotNull(doubleArray81);
        org.junit.Assert.assertNotNull(doubleArray82);
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray83), "[]");
        org.junit.Assert.assertNotNull(doubleArray88);
        org.junit.Assert.assertNotNull(doubleArray89);
        org.junit.Assert.assertNotNull(doubleArray90);
        org.junit.Assert.assertNotNull(intArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray91), "[]");
    }

    @Test
    public void test2300() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2300");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray30 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray31 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray32 = new double[][] {};
        double[][] doubleArray33 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray32);
        double[][] doubleArray34 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray32);
        double[][] doubleArray35 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray34);
        double[][] doubleArray36 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray35);
        double[][] doubleArray37 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray35);
        double[][] doubleArray38 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray37);
        double[][] doubleArray39 = new double[][] {};
        double[][] doubleArray40 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray39);
        double[][] doubleArray41 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray40);
        double[][] doubleArray42 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray41);
        double[][] doubleArray43 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray41);
        double[][] doubleArray44 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray41);
        double[][] doubleArray45 = new double[][] {};
        double[][] doubleArray46 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray45);
        double[][] doubleArray47 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray45);
        double[] doubleArray54 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray61 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray68 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray75 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray76 = new double[][] { doubleArray54, doubleArray61, doubleArray68, doubleArray75 };
        double[][] doubleArray77 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray76);
        double[][] doubleArray78 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray76);
        double[][] doubleArray79 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray76);
        double[][] doubleArray80 = new double[][] {};
        double[][] doubleArray81 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray80);
        int[] intArray82 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray81, intArray82);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray79, intArray82);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray47, intArray82);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray41, intArray82);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray38, intArray82);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray28, intArray82);
        double[][] doubleArray89 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray90 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray89);
        double[][] doubleArray91 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray89);
        java.lang.Class<?> wildcardClass92 = doubleArray91.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray75), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertNotNull(doubleArray81);
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[]");
        org.junit.Assert.assertNotNull(doubleArray89);
        org.junit.Assert.assertNotNull(doubleArray90);
        org.junit.Assert.assertNotNull(doubleArray91);
        org.junit.Assert.assertNotNull(wildcardClass92);
    }

    @Test
    public void test2301() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2301");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[][] doubleArray5 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray4);
        double[][] doubleArray6 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray5);
        double[][] doubleArray7 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray6);
        double[][] doubleArray8 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray7);
        double[][] doubleArray9 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray7);
        double[][] doubleArray10 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray9);
        double[][] doubleArray11 = null;
        double[][] doubleArray12 = new double[][] {};
        double[][] doubleArray13 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray12);
        double[][] doubleArray14 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray13);
        double[] doubleArray18 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray22 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray26 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray30 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray31 = new double[][] { doubleArray18, doubleArray22, doubleArray26, doubleArray30 };
        double[] doubleArray33 = new double[] { 1 };
        double[] doubleArray35 = new double[] { 1 };
        double[] doubleArray37 = new double[] { 1 };
        double[] doubleArray39 = new double[] { 1 };
        double[] doubleArray41 = new double[] { 1 };
        double[][] doubleArray42 = new double[][] { doubleArray33, doubleArray35, doubleArray37, doubleArray39, doubleArray41 };
        int[] intArray43 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray42, intArray43);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray31, intArray43);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray14, intArray43);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray11, intArray43);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray9, intArray43);
        java.lang.Class<?> wildcardClass49 = doubleArray9.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[]");
        org.junit.Assert.assertNotNull(wildcardClass49);
    }

    @Test
    public void test2302() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2302");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[] doubleArray36 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray43 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray50 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray57 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray58 = new double[][] { doubleArray36, doubleArray43, doubleArray50, doubleArray57 };
        double[][] doubleArray59 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray58);
        double[][] doubleArray60 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray58);
        double[][] doubleArray61 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray58);
        double[][] doubleArray62 = new double[][] {};
        double[][] doubleArray63 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray62);
        int[] intArray64 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray63, intArray64);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray61, intArray64);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray29, intArray64);
        double[][] doubleArray68 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray29);
        double[][] doubleArray69 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray68);
        java.lang.Class<?> wildcardClass70 = doubleArray68.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[]");
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertNotNull(wildcardClass70);
    }

    @Test
    public void test2303() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2303");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[][] doubleArray5 = null;
        double[][] doubleArray6 = new double[][] {};
        double[][] doubleArray7 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray6);
        double[][] doubleArray8 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray7);
        double[] doubleArray12 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray16 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray20 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray24 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray25 = new double[][] { doubleArray12, doubleArray16, doubleArray20, doubleArray24 };
        double[] doubleArray27 = new double[] { 1 };
        double[] doubleArray29 = new double[] { 1 };
        double[] doubleArray31 = new double[] { 1 };
        double[] doubleArray33 = new double[] { 1 };
        double[] doubleArray35 = new double[] { 1 };
        double[][] doubleArray36 = new double[][] { doubleArray27, doubleArray29, doubleArray31, doubleArray33, doubleArray35 };
        int[] intArray37 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray36, intArray37);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray25, intArray37);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray8, intArray37);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray5, intArray37);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray3, intArray37);
        double[][] doubleArray43 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[][] doubleArray44 = new double[][] {};
        double[][] doubleArray45 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray44);
        double[] doubleArray47 = new double[] { 1 };
        double[] doubleArray49 = new double[] { 1 };
        double[] doubleArray51 = new double[] { 1 };
        double[] doubleArray53 = new double[] { 1 };
        double[] doubleArray55 = new double[] { 1 };
        double[][] doubleArray56 = new double[][] { doubleArray47, doubleArray49, doubleArray51, doubleArray53, doubleArray55 };
        int[] intArray57 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray56, intArray57);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray44, intArray57);
        double[] doubleArray63 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray67 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray71 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray75 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray76 = new double[][] { doubleArray63, doubleArray67, doubleArray71, doubleArray75 };
        double[] doubleArray78 = new double[] { 1 };
        double[] doubleArray80 = new double[] { 1 };
        double[] doubleArray82 = new double[] { 1 };
        double[] doubleArray84 = new double[] { 1 };
        double[] doubleArray86 = new double[] { 1 };
        double[][] doubleArray87 = new double[][] { doubleArray78, doubleArray80, doubleArray82, doubleArray84, doubleArray86 };
        int[] intArray88 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray87, intArray88);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray76, intArray88);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray44, intArray88);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray43, intArray88);
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[]");
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray71), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray75), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray78), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray80), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray82), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray84), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray86), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray87);
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray88), "[]");
    }

    @Test
    public void test2304() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2304");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray30 = new double[][] {};
        double[][] doubleArray31 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        double[][] doubleArray32 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray31);
        double[][] doubleArray33 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray32);
        double[][] doubleArray34 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray32);
        double[][] doubleArray35 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray32);
        double[][] doubleArray36 = new double[][] {};
        double[][] doubleArray37 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray36);
        double[][] doubleArray38 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray36);
        double[] doubleArray45 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray52 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray59 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray66 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray67 = new double[][] { doubleArray45, doubleArray52, doubleArray59, doubleArray66 };
        double[][] doubleArray68 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray67);
        double[][] doubleArray69 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray67);
        double[][] doubleArray70 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray67);
        double[][] doubleArray71 = new double[][] {};
        double[][] doubleArray72 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray71);
        int[] intArray73 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray72, intArray73);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray70, intArray73);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray38, intArray73);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray32, intArray73);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray29, intArray73);
        double[][] doubleArray79 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray29);
        double[][] doubleArray80 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray79);
        double[][] doubleArray81 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray80);
        double[][] doubleArray82 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray80);
        java.lang.Class<?> wildcardClass83 = doubleArray80.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray66), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[]");
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertNotNull(doubleArray81);
        org.junit.Assert.assertNotNull(doubleArray82);
        org.junit.Assert.assertNotNull(wildcardClass83);
    }

    @Test
    public void test2305() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2305");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[] doubleArray31 = new double[] { 1 };
        double[] doubleArray33 = new double[] { 1 };
        double[] doubleArray35 = new double[] { 1 };
        double[] doubleArray37 = new double[] { 1 };
        double[] doubleArray39 = new double[] { 1 };
        double[][] doubleArray40 = new double[][] { doubleArray31, doubleArray33, doubleArray35, doubleArray37, doubleArray39 };
        int[] intArray41 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray40, intArray41);
        double[][] doubleArray43 = new double[][] {};
        double[][] doubleArray44 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray43);
        int[] intArray45 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray44, intArray45);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray40, intArray45);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray28, intArray45);
        double[][] doubleArray49 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray50 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray49);
        double[][] doubleArray51 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray50);
        double[][] doubleArray52 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray51);
        double[][] doubleArray53 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray51);
        double[][] doubleArray54 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray51);
        java.lang.Class<?> wildcardClass55 = doubleArray54.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertNotNull(wildcardClass55);
    }

    @Test
    public void test2306() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2306");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[] doubleArray11 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray18 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray25 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray32 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray33 = new double[][] { doubleArray11, doubleArray18, doubleArray25, doubleArray32 };
        double[][] doubleArray34 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray33);
        double[][] doubleArray35 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray34);
        double[][] doubleArray36 = new double[][] {};
        double[][] doubleArray37 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray36);
        double[] doubleArray39 = new double[] { 1 };
        double[] doubleArray41 = new double[] { 1 };
        double[] doubleArray43 = new double[] { 1 };
        double[] doubleArray45 = new double[] { 1 };
        double[] doubleArray47 = new double[] { 1 };
        double[][] doubleArray48 = new double[][] { doubleArray39, doubleArray41, doubleArray43, doubleArray45, doubleArray47 };
        int[] intArray49 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray48, intArray49);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray36, intArray49);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray35, intArray49);
        double[][] doubleArray53 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray35);
        double[] doubleArray55 = new double[] { 1 };
        double[] doubleArray57 = new double[] { 1 };
        double[] doubleArray59 = new double[] { 1 };
        double[] doubleArray61 = new double[] { 1 };
        double[] doubleArray63 = new double[] { 1 };
        double[][] doubleArray64 = new double[][] { doubleArray55, doubleArray57, doubleArray59, doubleArray61, doubleArray63 };
        int[] intArray65 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray64, intArray65);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray53, intArray65);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray3, intArray65);
        double[][] doubleArray69 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[][] doubleArray70 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray69);
        double[][] doubleArray71 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray69);
        double[][] doubleArray72 = null;
        double[][] doubleArray73 = new double[][] {};
        double[][] doubleArray74 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray73);
        int[] intArray75 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray74, intArray75);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray72, intArray75);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray69, intArray75);
        java.lang.Class<?> wildcardClass79 = doubleArray69.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[]");
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[]");
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[]");
        org.junit.Assert.assertNotNull(wildcardClass79);
    }

    @Test
    public void test2307() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2307");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[] doubleArray31 = new double[] { 1 };
        double[] doubleArray33 = new double[] { 1 };
        double[] doubleArray35 = new double[] { 1 };
        double[] doubleArray37 = new double[] { 1 };
        double[] doubleArray39 = new double[] { 1 };
        double[][] doubleArray40 = new double[][] { doubleArray31, doubleArray33, doubleArray35, doubleArray37, doubleArray39 };
        int[] intArray41 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray40, intArray41);
        double[][] doubleArray43 = new double[][] {};
        double[][] doubleArray44 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray43);
        int[] intArray45 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray44, intArray45);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray40, intArray45);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray28, intArray45);
        double[][] doubleArray49 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray50 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray51 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray52 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray51);
        double[][] doubleArray53 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray51);
        double[][] doubleArray54 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray51);
        double[][] doubleArray55 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray54);
        double[][] doubleArray56 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray55);
        double[][] doubleArray57 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray55);
        java.lang.Class<?> wildcardClass58 = doubleArray55.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertNotNull(wildcardClass58);
    }

    @Test
    public void test2308() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2308");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[] doubleArray31 = new double[] { 1 };
        double[] doubleArray33 = new double[] { 1 };
        double[] doubleArray35 = new double[] { 1 };
        double[] doubleArray37 = new double[] { 1 };
        double[] doubleArray39 = new double[] { 1 };
        double[][] doubleArray40 = new double[][] { doubleArray31, doubleArray33, doubleArray35, doubleArray37, doubleArray39 };
        int[] intArray41 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray40, intArray41);
        double[][] doubleArray43 = new double[][] {};
        double[][] doubleArray44 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray43);
        int[] intArray45 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray44, intArray45);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray40, intArray45);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray28, intArray45);
        double[][] doubleArray49 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray50 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray49);
        double[][] doubleArray51 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray50);
        double[][] doubleArray52 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray50);
        double[][] doubleArray53 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray50);
        double[][] doubleArray54 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray50);
        double[][] doubleArray55 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray50);
        java.lang.Class<?> wildcardClass56 = doubleArray50.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertNotNull(wildcardClass56);
    }

    @Test
    public void test2309() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2309");
        double[][] doubleArray0 = null;
        double[][] doubleArray1 = null;
        double[] doubleArray8 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray15 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray22 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray29 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray30 = new double[][] { doubleArray8, doubleArray15, doubleArray22, doubleArray29 };
        double[][] doubleArray31 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        double[] doubleArray33 = new double[] { 1 };
        double[] doubleArray35 = new double[] { 1 };
        double[] doubleArray37 = new double[] { 1 };
        double[] doubleArray39 = new double[] { 1 };
        double[] doubleArray41 = new double[] { 1 };
        double[][] doubleArray42 = new double[][] { doubleArray33, doubleArray35, doubleArray37, doubleArray39, doubleArray41 };
        int[] intArray43 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray42, intArray43);
        double[][] doubleArray45 = new double[][] {};
        double[][] doubleArray46 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray45);
        int[] intArray47 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray46, intArray47);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray42, intArray47);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray30, intArray47);
        double[][] doubleArray51 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        double[][] doubleArray52 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray51);
        double[][] doubleArray53 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray52);
        double[][] doubleArray54 = null;
        double[][] doubleArray55 = new double[][] {};
        double[][] doubleArray56 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray55);
        double[][] doubleArray57 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray56);
        double[] doubleArray61 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray65 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray69 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray73 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray74 = new double[][] { doubleArray61, doubleArray65, doubleArray69, doubleArray73 };
        double[] doubleArray76 = new double[] { 1 };
        double[] doubleArray78 = new double[] { 1 };
        double[] doubleArray80 = new double[] { 1 };
        double[] doubleArray82 = new double[] { 1 };
        double[] doubleArray84 = new double[] { 1 };
        double[][] doubleArray85 = new double[][] { doubleArray76, doubleArray78, doubleArray80, doubleArray82, doubleArray84 };
        int[] intArray86 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray85, intArray86);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray74, intArray86);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray57, intArray86);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray54, intArray86);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray52, intArray86);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray1, intArray86);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray0, intArray86);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[]");
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray73), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray78), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray80), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray82), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray84), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray85);
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray86), "[]");
    }

    @Test
    public void test2310() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2310");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[][] doubleArray5 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray4);
        double[][] doubleArray6 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray5);
        double[][] doubleArray7 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray5);
        double[][] doubleArray8 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray7);
        double[][] doubleArray9 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray7);
        double[][] doubleArray10 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray7);
        double[][] doubleArray11 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray7);
        double[][] doubleArray12 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray11);
        double[][] doubleArray13 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray12);
        double[][] doubleArray14 = new double[][] {};
        double[][] doubleArray15 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray14);
        double[][] doubleArray16 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray15);
        double[] doubleArray23 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray30 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray37 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray44 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray45 = new double[][] { doubleArray23, doubleArray30, doubleArray37, doubleArray44 };
        double[][] doubleArray46 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray45);
        double[] doubleArray48 = new double[] { 1 };
        double[] doubleArray50 = new double[] { 1 };
        double[] doubleArray52 = new double[] { 1 };
        double[] doubleArray54 = new double[] { 1 };
        double[] doubleArray56 = new double[] { 1 };
        double[][] doubleArray57 = new double[][] { doubleArray48, doubleArray50, doubleArray52, doubleArray54, doubleArray56 };
        int[] intArray58 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray57, intArray58);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray46, intArray58);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray15, intArray58);
        double[] doubleArray65 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray69 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray73 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray77 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray78 = new double[][] { doubleArray65, doubleArray69, doubleArray73, doubleArray77 };
        double[] doubleArray80 = new double[] { 1 };
        double[] doubleArray82 = new double[] { 1 };
        double[] doubleArray84 = new double[] { 1 };
        double[] doubleArray86 = new double[] { 1 };
        double[] doubleArray88 = new double[] { 1 };
        double[][] doubleArray89 = new double[][] { doubleArray80, doubleArray82, doubleArray84, doubleArray86, doubleArray88 };
        int[] intArray90 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray89, intArray90);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray78, intArray90);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray15, intArray90);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray13, intArray90);
        java.lang.Class<?> wildcardClass95 = intArray90.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[]");
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray73), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray77), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray80), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray82), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray84), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray86), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray88), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray89);
        org.junit.Assert.assertNotNull(intArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray90), "[]");
        org.junit.Assert.assertNotNull(wildcardClass95);
    }

    @Test
    public void test2311() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2311");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[][] doubleArray5 = null;
        double[][] doubleArray6 = null;
        double[] doubleArray8 = new double[] { 1 };
        double[] doubleArray10 = new double[] { 1 };
        double[] doubleArray12 = new double[] { 1 };
        double[] doubleArray14 = new double[] { 1 };
        double[] doubleArray16 = new double[] { 1 };
        double[][] doubleArray17 = new double[][] { doubleArray8, doubleArray10, doubleArray12, doubleArray14, doubleArray16 };
        int[] intArray18 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray17, intArray18);
        double[] doubleArray26 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray33 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray40 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray47 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray48 = new double[][] { doubleArray26, doubleArray33, doubleArray40, doubleArray47 };
        double[][] doubleArray49 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray48);
        double[] doubleArray51 = new double[] { 1 };
        double[] doubleArray53 = new double[] { 1 };
        double[] doubleArray55 = new double[] { 1 };
        double[] doubleArray57 = new double[] { 1 };
        double[] doubleArray59 = new double[] { 1 };
        double[][] doubleArray60 = new double[][] { doubleArray51, doubleArray53, doubleArray55, doubleArray57, doubleArray59 };
        int[] intArray61 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray60, intArray61);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray49, intArray61);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray17, intArray61);
        double[] doubleArray66 = new double[] { 1 };
        double[] doubleArray68 = new double[] { 1 };
        double[] doubleArray70 = new double[] { 1 };
        double[] doubleArray72 = new double[] { 1 };
        double[] doubleArray74 = new double[] { 1 };
        double[][] doubleArray75 = new double[][] { doubleArray66, doubleArray68, doubleArray70, doubleArray72, doubleArray74 };
        int[] intArray76 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray75, intArray76);
        double[][] doubleArray78 = new double[][] {};
        double[][] doubleArray79 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray78);
        int[] intArray80 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray79, intArray80);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray75, intArray80);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray17, intArray80);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray6, intArray80);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray5, intArray80);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray4, intArray80);
        double[][] doubleArray87 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray4);
        double[][] doubleArray88 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray87);
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[]");
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[]");
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray66), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray70), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray74), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[]");
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[]");
        org.junit.Assert.assertNotNull(doubleArray87);
        org.junit.Assert.assertNotNull(doubleArray88);
    }

    @Test
    public void test2312() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2312");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray5 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray6 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        java.lang.Class<?> wildcardClass7 = doubleArray2.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(wildcardClass7);
    }

    @Test
    public void test2313() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2313");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = new double[][] {};
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[] doubleArray5 = new double[] { 1 };
        double[] doubleArray7 = new double[] { 1 };
        double[] doubleArray9 = new double[] { 1 };
        double[] doubleArray11 = new double[] { 1 };
        double[] doubleArray13 = new double[] { 1 };
        double[][] doubleArray14 = new double[][] { doubleArray5, doubleArray7, doubleArray9, doubleArray11, doubleArray13 };
        int[] intArray15 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray14, intArray15);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray2, intArray15);
        double[] doubleArray21 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray25 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray29 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray33 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray34 = new double[][] { doubleArray21, doubleArray25, doubleArray29, doubleArray33 };
        double[] doubleArray36 = new double[] { 1 };
        double[] doubleArray38 = new double[] { 1 };
        double[] doubleArray40 = new double[] { 1 };
        double[] doubleArray42 = new double[] { 1 };
        double[] doubleArray44 = new double[] { 1 };
        double[][] doubleArray45 = new double[][] { doubleArray36, doubleArray38, doubleArray40, doubleArray42, doubleArray44 };
        int[] intArray46 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray45, intArray46);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray34, intArray46);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray2, intArray46);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray1, intArray46);
        double[][] doubleArray51 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray52 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray53 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray54 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray53);
        double[][] doubleArray55 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray54);
        double[][] doubleArray56 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray55);
        double[][] doubleArray57 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray55);
        double[][] doubleArray58 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray55);
        java.lang.Class<?> wildcardClass59 = doubleArray58.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertNotNull(wildcardClass59);
    }

    @Test
    public void test2314() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2314");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[] doubleArray3 = new double[] { 1 };
        double[] doubleArray5 = new double[] { 1 };
        double[] doubleArray7 = new double[] { 1 };
        double[] doubleArray9 = new double[] { 1 };
        double[] doubleArray11 = new double[] { 1 };
        double[][] doubleArray12 = new double[][] { doubleArray3, doubleArray5, doubleArray7, doubleArray9, doubleArray11 };
        int[] intArray13 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray12, intArray13);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray0, intArray13);
        double[] doubleArray22 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray29 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray36 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray43 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray44 = new double[][] { doubleArray22, doubleArray29, doubleArray36, doubleArray43 };
        double[][] doubleArray45 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray44);
        double[][] doubleArray46 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray45);
        double[][] doubleArray47 = new double[][] {};
        double[][] doubleArray48 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray47);
        double[] doubleArray50 = new double[] { 1 };
        double[] doubleArray52 = new double[] { 1 };
        double[] doubleArray54 = new double[] { 1 };
        double[] doubleArray56 = new double[] { 1 };
        double[] doubleArray58 = new double[] { 1 };
        double[][] doubleArray59 = new double[][] { doubleArray50, doubleArray52, doubleArray54, doubleArray56, doubleArray58 };
        int[] intArray60 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray59, intArray60);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray47, intArray60);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray46, intArray60);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray0, intArray60);
        double[][] doubleArray65 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        java.lang.Class<?> wildcardClass66 = doubleArray65.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[]");
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[]");
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertNotNull(wildcardClass66);
    }

    @Test
    public void test2315() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2315");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray30 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray31 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        double[][] doubleArray32 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        double[][] doubleArray33 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray32);
        double[][] doubleArray34 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray33);
        double[][] doubleArray35 = null;
        double[][] doubleArray36 = new double[][] {};
        double[][] doubleArray37 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray36);
        double[][] doubleArray38 = new double[][] {};
        double[][] doubleArray39 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray38);
        double[][] doubleArray40 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray39);
        double[] doubleArray44 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray48 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray52 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray56 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray57 = new double[][] { doubleArray44, doubleArray48, doubleArray52, doubleArray56 };
        double[] doubleArray59 = new double[] { 1 };
        double[] doubleArray61 = new double[] { 1 };
        double[] doubleArray63 = new double[] { 1 };
        double[] doubleArray65 = new double[] { 1 };
        double[] doubleArray67 = new double[] { 1 };
        double[][] doubleArray68 = new double[][] { doubleArray59, doubleArray61, doubleArray63, doubleArray65, doubleArray67 };
        int[] intArray69 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray68, intArray69);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray57, intArray69);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray39, intArray69);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray37, intArray69);
        double[][] doubleArray74 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray37);
        double[][] doubleArray75 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray74);
        double[][] doubleArray76 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray74);
        double[][] doubleArray77 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray74);
        double[][] doubleArray78 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray74);
        double[][] doubleArray79 = new double[][] {};
        double[][] doubleArray80 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray79);
        int[] intArray81 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray80, intArray81);
        double[] doubleArray84 = new double[] { 1 };
        double[] doubleArray86 = new double[] { 1 };
        double[] doubleArray88 = new double[] { 1 };
        double[] doubleArray90 = new double[] { 1 };
        double[] doubleArray92 = new double[] { 1 };
        double[][] doubleArray93 = new double[][] { doubleArray84, doubleArray86, doubleArray88, doubleArray90, doubleArray92 };
        int[] intArray94 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray93, intArray94);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray80, intArray94);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray78, intArray94);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray35, intArray94);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray34, intArray94);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[]");
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray81), "[]");
        org.junit.Assert.assertNotNull(doubleArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray84), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray86), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray88), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray90), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray92), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray93);
        org.junit.Assert.assertNotNull(intArray94);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray94), "[]");
    }

    @Test
    public void test2316() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2316");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        int[] intArray2 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray1, intArray2);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray5 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray4);
        double[][] doubleArray6 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray4);
        double[][] doubleArray7 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray4);
        double[][] doubleArray8 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray7);
        double[][] doubleArray9 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray7);
        double[][] doubleArray10 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray7);
        java.lang.Class<?> wildcardClass11 = doubleArray10.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertNotNull(wildcardClass11);
    }

    @Test
    public void test2317() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2317");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray30 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray31 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[] doubleArray33 = new double[] { 1 };
        double[] doubleArray35 = new double[] { 1 };
        double[] doubleArray37 = new double[] { 1 };
        double[] doubleArray39 = new double[] { 1 };
        double[] doubleArray41 = new double[] { 1 };
        double[][] doubleArray42 = new double[][] { doubleArray33, doubleArray35, doubleArray37, doubleArray39, doubleArray41 };
        int[] intArray43 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray42, intArray43);
        double[] doubleArray51 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray58 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray65 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray72 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray73 = new double[][] { doubleArray51, doubleArray58, doubleArray65, doubleArray72 };
        double[][] doubleArray74 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray73);
        double[] doubleArray76 = new double[] { 1 };
        double[] doubleArray78 = new double[] { 1 };
        double[] doubleArray80 = new double[] { 1 };
        double[] doubleArray82 = new double[] { 1 };
        double[] doubleArray84 = new double[] { 1 };
        double[][] doubleArray85 = new double[][] { doubleArray76, doubleArray78, doubleArray80, doubleArray82, doubleArray84 };
        int[] intArray86 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray85, intArray86);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray74, intArray86);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray42, intArray86);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray31, intArray86);
        double[][] doubleArray91 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray31);
        double[][] doubleArray92 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray91);
        double[][] doubleArray93 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray92);
        java.lang.Class<?> wildcardClass94 = doubleArray93.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray78), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray80), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray82), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray84), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray85);
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray86), "[]");
        org.junit.Assert.assertNotNull(doubleArray91);
        org.junit.Assert.assertNotNull(doubleArray92);
        org.junit.Assert.assertNotNull(doubleArray93);
        org.junit.Assert.assertNotNull(wildcardClass94);
    }

    @Test
    public void test2318() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2318");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[][] doubleArray5 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[][] doubleArray6 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray5);
        double[][] doubleArray7 = new double[][] {};
        double[][] doubleArray8 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray7);
        double[][] doubleArray9 = new double[][] {};
        double[][] doubleArray10 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray9);
        double[][] doubleArray11 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray9);
        double[][] doubleArray12 = new double[][] {};
        double[][] doubleArray13 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray12);
        double[][] doubleArray14 = new double[][] {};
        double[][] doubleArray15 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray14);
        double[] doubleArray17 = new double[] { 1 };
        double[] doubleArray19 = new double[] { 1 };
        double[] doubleArray21 = new double[] { 1 };
        double[] doubleArray23 = new double[] { 1 };
        double[] doubleArray25 = new double[] { 1 };
        double[][] doubleArray26 = new double[][] { doubleArray17, doubleArray19, doubleArray21, doubleArray23, doubleArray25 };
        int[] intArray27 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray26, intArray27);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray14, intArray27);
        double[] doubleArray33 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray37 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray41 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray45 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray46 = new double[][] { doubleArray33, doubleArray37, doubleArray41, doubleArray45 };
        double[] doubleArray48 = new double[] { 1 };
        double[] doubleArray50 = new double[] { 1 };
        double[] doubleArray52 = new double[] { 1 };
        double[] doubleArray54 = new double[] { 1 };
        double[] doubleArray56 = new double[] { 1 };
        double[][] doubleArray57 = new double[][] { doubleArray48, doubleArray50, doubleArray52, doubleArray54, doubleArray56 };
        int[] intArray58 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray57, intArray58);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray46, intArray58);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray14, intArray58);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray12, intArray58);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray9, intArray58);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray7, intArray58);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray6, intArray58);
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[]");
    }

    @Test
    public void test2319() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2319");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[] doubleArray6 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray10 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray14 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray18 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray19 = new double[][] { doubleArray6, doubleArray10, doubleArray14, doubleArray18 };
        double[] doubleArray21 = new double[] { 1 };
        double[] doubleArray23 = new double[] { 1 };
        double[] doubleArray25 = new double[] { 1 };
        double[] doubleArray27 = new double[] { 1 };
        double[] doubleArray29 = new double[] { 1 };
        double[][] doubleArray30 = new double[][] { doubleArray21, doubleArray23, doubleArray25, doubleArray27, doubleArray29 };
        int[] intArray31 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray30, intArray31);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray19, intArray31);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray1, intArray31);
        double[][] doubleArray35 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray36 = null;
        double[] doubleArray43 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray50 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray57 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray64 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray65 = new double[][] { doubleArray43, doubleArray50, doubleArray57, doubleArray64 };
        double[][] doubleArray66 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray65);
        double[][] doubleArray67 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray65);
        double[][] doubleArray68 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray65);
        double[][] doubleArray69 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray68);
        double[][] doubleArray70 = new double[][] {};
        double[][] doubleArray71 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray70);
        int[] intArray72 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray71, intArray72);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray69, intArray72);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray36, intArray72);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray35, intArray72);
        double[][] doubleArray77 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray35);
        double[][] doubleArray78 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray77);
        double[][] doubleArray79 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray78);
        java.lang.Class<?> wildcardClass80 = doubleArray78.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[]");
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertNotNull(wildcardClass80);
    }

    @Test
    public void test2320() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2320");
        double[][] doubleArray0 = null;
        double[][] doubleArray1 = new double[][] {};
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray5 = new double[][] {};
        double[][] doubleArray6 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray5);
        double[][] doubleArray7 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray6);
        double[][] doubleArray8 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray7);
        double[][] doubleArray9 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray8);
        double[][] doubleArray10 = null;
        double[][] doubleArray11 = new double[][] {};
        double[][] doubleArray12 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray11);
        double[][] doubleArray13 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray12);
        double[] doubleArray17 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray21 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray25 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray29 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray30 = new double[][] { doubleArray17, doubleArray21, doubleArray25, doubleArray29 };
        double[] doubleArray32 = new double[] { 1 };
        double[] doubleArray34 = new double[] { 1 };
        double[] doubleArray36 = new double[] { 1 };
        double[] doubleArray38 = new double[] { 1 };
        double[] doubleArray40 = new double[] { 1 };
        double[][] doubleArray41 = new double[][] { doubleArray32, doubleArray34, doubleArray36, doubleArray38, doubleArray40 };
        int[] intArray42 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray41, intArray42);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray30, intArray42);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray13, intArray42);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray10, intArray42);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray8, intArray42);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray1, intArray42);
        double[][] doubleArray49 = new double[][] {};
        double[][] doubleArray50 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray49);
        double[][] doubleArray51 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray50);
        double[][] doubleArray52 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray51);
        double[][] doubleArray53 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray52);
        double[][] doubleArray54 = null;
        double[][] doubleArray55 = new double[][] {};
        double[][] doubleArray56 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray55);
        double[][] doubleArray57 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray56);
        double[] doubleArray61 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray65 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray69 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray73 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray74 = new double[][] { doubleArray61, doubleArray65, doubleArray69, doubleArray73 };
        double[] doubleArray76 = new double[] { 1 };
        double[] doubleArray78 = new double[] { 1 };
        double[] doubleArray80 = new double[] { 1 };
        double[] doubleArray82 = new double[] { 1 };
        double[] doubleArray84 = new double[] { 1 };
        double[][] doubleArray85 = new double[][] { doubleArray76, doubleArray78, doubleArray80, doubleArray82, doubleArray84 };
        int[] intArray86 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray85, intArray86);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray74, intArray86);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray57, intArray86);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray54, intArray86);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray52, intArray86);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray1, intArray86);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray0, intArray86);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray73), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray78), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray80), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray82), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray84), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray85);
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray86), "[]");
    }

    @Test
    public void test2321() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2321");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[] doubleArray10 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray17 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray24 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray31 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray32 = new double[][] { doubleArray10, doubleArray17, doubleArray24, doubleArray31 };
        double[][] doubleArray33 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray32);
        double[][] doubleArray34 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray32);
        double[][] doubleArray35 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray32);
        double[] doubleArray37 = new double[] { 1 };
        double[] doubleArray39 = new double[] { 1 };
        double[] doubleArray41 = new double[] { 1 };
        double[] doubleArray43 = new double[] { 1 };
        double[] doubleArray45 = new double[] { 1 };
        double[][] doubleArray46 = new double[][] { doubleArray37, doubleArray39, doubleArray41, doubleArray43, doubleArray45 };
        int[] intArray47 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray46, intArray47);
        double[] doubleArray55 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray62 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray69 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray76 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray77 = new double[][] { doubleArray55, doubleArray62, doubleArray69, doubleArray76 };
        double[][] doubleArray78 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray77);
        double[] doubleArray80 = new double[] { 1 };
        double[] doubleArray82 = new double[] { 1 };
        double[] doubleArray84 = new double[] { 1 };
        double[] doubleArray86 = new double[] { 1 };
        double[] doubleArray88 = new double[] { 1 };
        double[][] doubleArray89 = new double[][] { doubleArray80, doubleArray82, doubleArray84, doubleArray86, doubleArray88 };
        int[] intArray90 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray89, intArray90);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray78, intArray90);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray46, intArray90);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray35, intArray90);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray3, intArray90);
        double[][] doubleArray96 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[][] doubleArray97 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[][] doubleArray98 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray97);
        java.lang.Class<?> wildcardClass99 = doubleArray97.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[]");
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray80), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray82), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray84), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray86), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray88), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray89);
        org.junit.Assert.assertNotNull(intArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray90), "[]");
        org.junit.Assert.assertNotNull(doubleArray96);
        org.junit.Assert.assertNotNull(doubleArray97);
        org.junit.Assert.assertNotNull(doubleArray98);
        org.junit.Assert.assertNotNull(wildcardClass99);
    }

    @Test
    public void test2322() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2322");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray4 = new double[][] {};
        double[][] doubleArray5 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray4);
        double[][] doubleArray6 = new double[][] {};
        double[][] doubleArray7 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray6);
        double[] doubleArray9 = new double[] { 1 };
        double[] doubleArray11 = new double[] { 1 };
        double[] doubleArray13 = new double[] { 1 };
        double[] doubleArray15 = new double[] { 1 };
        double[] doubleArray17 = new double[] { 1 };
        double[][] doubleArray18 = new double[][] { doubleArray9, doubleArray11, doubleArray13, doubleArray15, doubleArray17 };
        int[] intArray19 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray18, intArray19);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray6, intArray19);
        double[] doubleArray25 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray29 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray33 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray37 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray38 = new double[][] { doubleArray25, doubleArray29, doubleArray33, doubleArray37 };
        double[] doubleArray40 = new double[] { 1 };
        double[] doubleArray42 = new double[] { 1 };
        double[] doubleArray44 = new double[] { 1 };
        double[] doubleArray46 = new double[] { 1 };
        double[] doubleArray48 = new double[] { 1 };
        double[][] doubleArray49 = new double[][] { doubleArray40, doubleArray42, doubleArray44, doubleArray46, doubleArray48 };
        int[] intArray50 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray49, intArray50);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray38, intArray50);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray6, intArray50);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray4, intArray50);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray0, intArray50);
        double[][] doubleArray56 = new double[][] {};
        double[][] doubleArray57 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray56);
        double[][] doubleArray58 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray56);
        double[][] doubleArray59 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray58);
        double[][] doubleArray60 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray58);
        double[][] doubleArray61 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray60);
        double[][] doubleArray62 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray61);
        double[][] doubleArray63 = new double[][] {};
        double[][] doubleArray64 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray63);
        int[] intArray65 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray64, intArray65);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray62, intArray65);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray0, intArray65);
        java.lang.Class<?> wildcardClass69 = intArray65.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[]");
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[]");
        org.junit.Assert.assertNotNull(wildcardClass69);
    }

    @Test
    public void test2323() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2323");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[] doubleArray6 = new double[] { 1 };
        double[] doubleArray8 = new double[] { 1 };
        double[] doubleArray10 = new double[] { 1 };
        double[] doubleArray12 = new double[] { 1 };
        double[] doubleArray14 = new double[] { 1 };
        double[][] doubleArray15 = new double[][] { doubleArray6, doubleArray8, doubleArray10, doubleArray12, doubleArray14 };
        int[] intArray16 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray15, intArray16);
        double[][] doubleArray18 = new double[][] {};
        double[][] doubleArray19 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray18);
        int[] intArray20 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray19, intArray20);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray15, intArray20);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray3, intArray20);
        double[][] doubleArray24 = new double[][] {};
        double[][] doubleArray25 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray24);
        double[][] doubleArray26 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray25);
        double[] doubleArray30 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray34 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray38 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray42 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray43 = new double[][] { doubleArray30, doubleArray34, doubleArray38, doubleArray42 };
        double[] doubleArray45 = new double[] { 1 };
        double[] doubleArray47 = new double[] { 1 };
        double[] doubleArray49 = new double[] { 1 };
        double[] doubleArray51 = new double[] { 1 };
        double[] doubleArray53 = new double[] { 1 };
        double[][] doubleArray54 = new double[][] { doubleArray45, doubleArray47, doubleArray49, doubleArray51, doubleArray53 };
        int[] intArray55 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray54, intArray55);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray43, intArray55);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray25, intArray55);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray3, intArray55);
        double[][] doubleArray60 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[][] doubleArray61 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray60);
        double[][] doubleArray62 = new double[][] {};
        double[][] doubleArray63 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray62);
        double[][] doubleArray64 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray62);
        double[][] doubleArray65 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray62);
        double[][] doubleArray66 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray65);
        double[][] doubleArray67 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray65);
        double[][] doubleArray68 = new double[][] {};
        double[][] doubleArray69 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray68);
        int[] intArray70 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray69, intArray70);
        double[] doubleArray73 = new double[] { 1 };
        double[] doubleArray75 = new double[] { 1 };
        double[] doubleArray77 = new double[] { 1 };
        double[] doubleArray79 = new double[] { 1 };
        double[] doubleArray81 = new double[] { 1 };
        double[][] doubleArray82 = new double[][] { doubleArray73, doubleArray75, doubleArray77, doubleArray79, doubleArray81 };
        int[] intArray83 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray82, intArray83);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray69, intArray83);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray67, intArray83);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray60, intArray83);
        double[][] doubleArray88 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray60);
        double[][] doubleArray89 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray60);
        double[][] doubleArray90 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray89);
        double[][] doubleArray91 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray90);
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[]");
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[]");
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[]");
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray73), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray75), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray77), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray79), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray81), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray82);
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray83), "[]");
        org.junit.Assert.assertNotNull(doubleArray88);
        org.junit.Assert.assertNotNull(doubleArray89);
        org.junit.Assert.assertNotNull(doubleArray90);
        org.junit.Assert.assertNotNull(doubleArray91);
    }

    @Test
    public void test2324() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2324");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        int[] intArray2 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray1, intArray2);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray5 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray6 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray5);
        double[][] doubleArray7 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray5);
        double[][] doubleArray8 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray5);
        double[][] doubleArray9 = new double[][] {};
        double[][] doubleArray10 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray9);
        double[][] doubleArray11 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray9);
        double[][] doubleArray12 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray11);
        double[][] doubleArray13 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray11);
        double[][] doubleArray14 = new double[][] {};
        double[][] doubleArray15 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray14);
        double[][] doubleArray16 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray14);
        double[][] doubleArray17 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray14);
        double[][] doubleArray18 = new double[][] {};
        double[][] doubleArray19 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray18);
        double[][] doubleArray20 = new double[][] {};
        double[][] doubleArray21 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray20);
        double[] doubleArray23 = new double[] { 1 };
        double[] doubleArray25 = new double[] { 1 };
        double[] doubleArray27 = new double[] { 1 };
        double[] doubleArray29 = new double[] { 1 };
        double[] doubleArray31 = new double[] { 1 };
        double[][] doubleArray32 = new double[][] { doubleArray23, doubleArray25, doubleArray27, doubleArray29, doubleArray31 };
        int[] intArray33 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray32, intArray33);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray20, intArray33);
        double[] doubleArray39 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray43 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray47 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray51 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray52 = new double[][] { doubleArray39, doubleArray43, doubleArray47, doubleArray51 };
        double[] doubleArray54 = new double[] { 1 };
        double[] doubleArray56 = new double[] { 1 };
        double[] doubleArray58 = new double[] { 1 };
        double[] doubleArray60 = new double[] { 1 };
        double[] doubleArray62 = new double[] { 1 };
        double[][] doubleArray63 = new double[][] { doubleArray54, doubleArray56, doubleArray58, doubleArray60, doubleArray62 };
        int[] intArray64 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray63, intArray64);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray52, intArray64);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray20, intArray64);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray18, intArray64);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray14, intArray64);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray13, intArray64);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray8, intArray64);
        java.lang.Class<?> wildcardClass72 = intArray64.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[]");
        org.junit.Assert.assertNotNull(wildcardClass72);
    }

    @Test
    public void test2325() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2325");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = new double[][] {};
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[] doubleArray5 = new double[] { 1 };
        double[] doubleArray7 = new double[] { 1 };
        double[] doubleArray9 = new double[] { 1 };
        double[] doubleArray11 = new double[] { 1 };
        double[] doubleArray13 = new double[] { 1 };
        double[][] doubleArray14 = new double[][] { doubleArray5, doubleArray7, doubleArray9, doubleArray11, doubleArray13 };
        int[] intArray15 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray14, intArray15);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray2, intArray15);
        double[] doubleArray21 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray25 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray29 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray33 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray34 = new double[][] { doubleArray21, doubleArray25, doubleArray29, doubleArray33 };
        double[] doubleArray36 = new double[] { 1 };
        double[] doubleArray38 = new double[] { 1 };
        double[] doubleArray40 = new double[] { 1 };
        double[] doubleArray42 = new double[] { 1 };
        double[] doubleArray44 = new double[] { 1 };
        double[][] doubleArray45 = new double[][] { doubleArray36, doubleArray38, doubleArray40, doubleArray42, doubleArray44 };
        int[] intArray46 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray45, intArray46);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray34, intArray46);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray2, intArray46);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray0, intArray46);
        double[][] doubleArray51 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray52 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray51);
        java.lang.Class<?> wildcardClass53 = doubleArray52.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertNotNull(wildcardClass53);
    }

    @Test
    public void test2326() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2326");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[] doubleArray3 = new double[] { 1 };
        double[] doubleArray5 = new double[] { 1 };
        double[] doubleArray7 = new double[] { 1 };
        double[] doubleArray9 = new double[] { 1 };
        double[] doubleArray11 = new double[] { 1 };
        double[][] doubleArray12 = new double[][] { doubleArray3, doubleArray5, doubleArray7, doubleArray9, doubleArray11 };
        int[] intArray13 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray12, intArray13);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray0, intArray13);
        double[] doubleArray19 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray23 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray27 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray31 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray32 = new double[][] { doubleArray19, doubleArray23, doubleArray27, doubleArray31 };
        double[] doubleArray34 = new double[] { 1 };
        double[] doubleArray36 = new double[] { 1 };
        double[] doubleArray38 = new double[] { 1 };
        double[] doubleArray40 = new double[] { 1 };
        double[] doubleArray42 = new double[] { 1 };
        double[][] doubleArray43 = new double[][] { doubleArray34, doubleArray36, doubleArray38, doubleArray40, doubleArray42 };
        int[] intArray44 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray43, intArray44);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray32, intArray44);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray0, intArray44);
        double[] doubleArray49 = new double[] { 1 };
        double[] doubleArray51 = new double[] { 1 };
        double[] doubleArray53 = new double[] { 1 };
        double[] doubleArray55 = new double[] { 1 };
        double[] doubleArray57 = new double[] { 1 };
        double[][] doubleArray58 = new double[][] { doubleArray49, doubleArray51, doubleArray53, doubleArray55, doubleArray57 };
        int[] intArray59 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray58, intArray59);
        double[][] doubleArray61 = new double[][] {};
        double[][] doubleArray62 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray61);
        int[] intArray63 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray62, intArray63);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray58, intArray63);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray0, intArray63);
        double[][] doubleArray67 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray68 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray69 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray70 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray71 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        java.lang.Class<?> wildcardClass72 = doubleArray71.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[]");
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertNotNull(wildcardClass72);
    }

    @Test
    public void test2327() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2327");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[] doubleArray6 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray10 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray14 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray18 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray19 = new double[][] { doubleArray6, doubleArray10, doubleArray14, doubleArray18 };
        double[] doubleArray21 = new double[] { 1 };
        double[] doubleArray23 = new double[] { 1 };
        double[] doubleArray25 = new double[] { 1 };
        double[] doubleArray27 = new double[] { 1 };
        double[] doubleArray29 = new double[] { 1 };
        double[][] doubleArray30 = new double[][] { doubleArray21, doubleArray23, doubleArray25, doubleArray27, doubleArray29 };
        int[] intArray31 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray30, intArray31);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray19, intArray31);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray2, intArray31);
        double[][] doubleArray35 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray36 = new double[][] {};
        double[][] doubleArray37 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray36);
        double[][] doubleArray38 = new double[][] {};
        double[][] doubleArray39 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray38);
        double[] doubleArray41 = new double[] { 1 };
        double[] doubleArray43 = new double[] { 1 };
        double[] doubleArray45 = new double[] { 1 };
        double[] doubleArray47 = new double[] { 1 };
        double[] doubleArray49 = new double[] { 1 };
        double[][] doubleArray50 = new double[][] { doubleArray41, doubleArray43, doubleArray45, doubleArray47, doubleArray49 };
        int[] intArray51 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray50, intArray51);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray38, intArray51);
        double[] doubleArray57 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray61 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray65 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray69 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray70 = new double[][] { doubleArray57, doubleArray61, doubleArray65, doubleArray69 };
        double[] doubleArray72 = new double[] { 1 };
        double[] doubleArray74 = new double[] { 1 };
        double[] doubleArray76 = new double[] { 1 };
        double[] doubleArray78 = new double[] { 1 };
        double[] doubleArray80 = new double[] { 1 };
        double[][] doubleArray81 = new double[][] { doubleArray72, doubleArray74, doubleArray76, doubleArray78, doubleArray80 };
        int[] intArray82 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray81, intArray82);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray70, intArray82);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray38, intArray82);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray37, intArray82);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray35, intArray82);
        double[][] doubleArray88 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray35);
        double[][] doubleArray89 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray88);
        double[][] doubleArray90 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray89);
        double[][] doubleArray91 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray89);
        double[][] doubleArray92 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray89);
        double[][] doubleArray93 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray92);
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[]");
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray74), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray78), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray80), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray81);
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[]");
        org.junit.Assert.assertNotNull(doubleArray88);
        org.junit.Assert.assertNotNull(doubleArray89);
        org.junit.Assert.assertNotNull(doubleArray90);
        org.junit.Assert.assertNotNull(doubleArray91);
        org.junit.Assert.assertNotNull(doubleArray92);
        org.junit.Assert.assertNotNull(doubleArray93);
    }

    @Test
    public void test2328() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2328");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[][] doubleArray5 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray4);
        double[][] doubleArray6 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray5);
        double[][] doubleArray7 = new double[][] {};
        double[][] doubleArray8 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray7);
        int[] intArray9 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray8, intArray9);
        double[][] doubleArray11 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray8);
        double[][] doubleArray12 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray11);
        double[][] doubleArray13 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray11);
        double[][] doubleArray14 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray11);
        double[] doubleArray21 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray28 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray35 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray42 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray43 = new double[][] { doubleArray21, doubleArray28, doubleArray35, doubleArray42 };
        double[][] doubleArray44 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray43);
        double[][] doubleArray45 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray43);
        double[][] doubleArray46 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray43);
        double[][] doubleArray47 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray46);
        double[][] doubleArray48 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray47);
        double[] doubleArray55 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray62 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray69 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray76 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray77 = new double[][] { doubleArray55, doubleArray62, doubleArray69, doubleArray76 };
        double[][] doubleArray78 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray77);
        double[][] doubleArray79 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray77);
        double[][] doubleArray80 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray77);
        double[][] doubleArray81 = new double[][] {};
        double[][] doubleArray82 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray81);
        int[] intArray83 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray82, intArray83);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray80, intArray83);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray48, intArray83);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray14, intArray83);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray6, intArray83);
        double[][] doubleArray89 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray6);
        double[][] doubleArray90 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray89);
        double[][] doubleArray91 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray89);
        java.lang.Class<?> wildcardClass92 = doubleArray89.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertNotNull(doubleArray81);
        org.junit.Assert.assertNotNull(doubleArray82);
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray83), "[]");
        org.junit.Assert.assertNotNull(doubleArray89);
        org.junit.Assert.assertNotNull(doubleArray90);
        org.junit.Assert.assertNotNull(doubleArray91);
        org.junit.Assert.assertNotNull(wildcardClass92);
    }

    @Test
    public void test2329() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2329");
        double[][] doubleArray0 = null;
        double[][] doubleArray1 = new double[][] {};
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray5 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray4);
        double[][] doubleArray6 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray5);
        double[][] doubleArray7 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray6);
        double[][] doubleArray8 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray7);
        double[][] doubleArray9 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray8);
        double[][] doubleArray10 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray9);
        double[][] doubleArray11 = new double[][] {};
        double[][] doubleArray12 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray11);
        double[][] doubleArray13 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray11);
        double[][] doubleArray14 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray11);
        double[][] doubleArray15 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray11);
        double[][] doubleArray16 = new double[][] {};
        double[][] doubleArray17 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray16);
        double[][] doubleArray18 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray17);
        double[] doubleArray22 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray26 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray30 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray34 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray35 = new double[][] { doubleArray22, doubleArray26, doubleArray30, doubleArray34 };
        double[] doubleArray37 = new double[] { 1 };
        double[] doubleArray39 = new double[] { 1 };
        double[] doubleArray41 = new double[] { 1 };
        double[] doubleArray43 = new double[] { 1 };
        double[] doubleArray45 = new double[] { 1 };
        double[][] doubleArray46 = new double[][] { doubleArray37, doubleArray39, doubleArray41, doubleArray43, doubleArray45 };
        int[] intArray47 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray46, intArray47);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray35, intArray47);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray18, intArray47);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray11, intArray47);
        double[][] doubleArray52 = new double[][] {};
        double[][] doubleArray53 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray52);
        double[][] doubleArray54 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray53);
        double[][] doubleArray55 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray54);
        double[][] doubleArray56 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray54);
        double[][] doubleArray57 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray54);
        double[][] doubleArray58 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray54);
        double[] doubleArray65 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray72 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray79 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray86 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray87 = new double[][] { doubleArray65, doubleArray72, doubleArray79, doubleArray86 };
        double[][] doubleArray88 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray87);
        double[][] doubleArray89 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray87);
        double[][] doubleArray90 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray87);
        double[][] doubleArray91 = new double[][] {};
        double[][] doubleArray92 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray91);
        int[] intArray93 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray92, intArray93);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray90, intArray93);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray58, intArray93);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray11, intArray93);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray10, intArray93);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray0, intArray93);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[]");
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray79), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray86), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray87);
        org.junit.Assert.assertNotNull(doubleArray88);
        org.junit.Assert.assertNotNull(doubleArray89);
        org.junit.Assert.assertNotNull(doubleArray90);
        org.junit.Assert.assertNotNull(doubleArray91);
        org.junit.Assert.assertNotNull(doubleArray92);
        org.junit.Assert.assertNotNull(intArray93);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray93), "[]");
    }

    @Test
    public void test2330() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2330");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[] doubleArray6 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray10 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray14 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray18 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray19 = new double[][] { doubleArray6, doubleArray10, doubleArray14, doubleArray18 };
        double[] doubleArray21 = new double[] { 1 };
        double[] doubleArray23 = new double[] { 1 };
        double[] doubleArray25 = new double[] { 1 };
        double[] doubleArray27 = new double[] { 1 };
        double[] doubleArray29 = new double[] { 1 };
        double[][] doubleArray30 = new double[][] { doubleArray21, doubleArray23, doubleArray25, doubleArray27, doubleArray29 };
        int[] intArray31 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray30, intArray31);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray19, intArray31);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray1, intArray31);
        double[][] doubleArray35 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray36 = null;
        double[] doubleArray43 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray50 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray57 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray64 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray65 = new double[][] { doubleArray43, doubleArray50, doubleArray57, doubleArray64 };
        double[][] doubleArray66 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray65);
        double[][] doubleArray67 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray65);
        double[][] doubleArray68 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray65);
        double[][] doubleArray69 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray68);
        double[][] doubleArray70 = new double[][] {};
        double[][] doubleArray71 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray70);
        int[] intArray72 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray71, intArray72);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray69, intArray72);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray36, intArray72);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray35, intArray72);
        double[][] doubleArray77 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray35);
        double[][] doubleArray78 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray77);
        java.lang.Class<?> wildcardClass79 = doubleArray78.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[]");
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertNotNull(wildcardClass79);
    }

    @Test
    public void test2331() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2331");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[] doubleArray31 = new double[] { 1 };
        double[] doubleArray33 = new double[] { 1 };
        double[] doubleArray35 = new double[] { 1 };
        double[] doubleArray37 = new double[] { 1 };
        double[] doubleArray39 = new double[] { 1 };
        double[][] doubleArray40 = new double[][] { doubleArray31, doubleArray33, doubleArray35, doubleArray37, doubleArray39 };
        int[] intArray41 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray40, intArray41);
        double[][] doubleArray43 = new double[][] {};
        double[][] doubleArray44 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray43);
        int[] intArray45 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray44, intArray45);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray40, intArray45);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray28, intArray45);
        double[][] doubleArray49 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray50 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray51 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray50);
        double[][] doubleArray52 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray51);
        double[][] doubleArray53 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray51);
        java.lang.Class<?> wildcardClass54 = doubleArray51.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertNotNull(wildcardClass54);
    }

    @Test
    public void test2332() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2332");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray30 = new double[][] {};
        double[][] doubleArray31 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        double[] doubleArray33 = new double[] { 1 };
        double[] doubleArray35 = new double[] { 1 };
        double[] doubleArray37 = new double[] { 1 };
        double[] doubleArray39 = new double[] { 1 };
        double[] doubleArray41 = new double[] { 1 };
        double[][] doubleArray42 = new double[][] { doubleArray33, doubleArray35, doubleArray37, doubleArray39, doubleArray41 };
        int[] intArray43 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray42, intArray43);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray30, intArray43);
        double[] doubleArray49 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray53 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray57 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray61 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray62 = new double[][] { doubleArray49, doubleArray53, doubleArray57, doubleArray61 };
        double[] doubleArray64 = new double[] { 1 };
        double[] doubleArray66 = new double[] { 1 };
        double[] doubleArray68 = new double[] { 1 };
        double[] doubleArray70 = new double[] { 1 };
        double[] doubleArray72 = new double[] { 1 };
        double[][] doubleArray73 = new double[][] { doubleArray64, doubleArray66, doubleArray68, doubleArray70, doubleArray72 };
        int[] intArray74 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray73, intArray74);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray62, intArray74);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray30, intArray74);
        double[][] doubleArray78 = new double[][] {};
        double[][] doubleArray79 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray78);
        double[] doubleArray81 = new double[] { 1 };
        double[] doubleArray83 = new double[] { 1 };
        double[] doubleArray85 = new double[] { 1 };
        double[] doubleArray87 = new double[] { 1 };
        double[] doubleArray89 = new double[] { 1 };
        double[][] doubleArray90 = new double[][] { doubleArray81, doubleArray83, doubleArray85, doubleArray87, doubleArray89 };
        int[] intArray91 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray90, intArray91);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray78, intArray91);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray30, intArray91);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray28, intArray91);
        double[][] doubleArray96 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray97 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray96);
        java.lang.Class<?> wildcardClass98 = doubleArray96.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray66), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray70), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[]");
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertNotNull(doubleArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray81), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray83), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray85), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray87), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray89), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray90);
        org.junit.Assert.assertNotNull(intArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray91), "[]");
        org.junit.Assert.assertNotNull(doubleArray96);
        org.junit.Assert.assertNotNull(doubleArray97);
        org.junit.Assert.assertNotNull(wildcardClass98);
    }

    @Test
    public void test2333() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2333");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[] doubleArray3 = new double[] { 1 };
        double[] doubleArray5 = new double[] { 1 };
        double[] doubleArray7 = new double[] { 1 };
        double[] doubleArray9 = new double[] { 1 };
        double[] doubleArray11 = new double[] { 1 };
        double[][] doubleArray12 = new double[][] { doubleArray3, doubleArray5, doubleArray7, doubleArray9, doubleArray11 };
        int[] intArray13 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray12, intArray13);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray0, intArray13);
        double[] doubleArray22 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray29 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray36 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray43 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray44 = new double[][] { doubleArray22, doubleArray29, doubleArray36, doubleArray43 };
        double[][] doubleArray45 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray44);
        double[][] doubleArray46 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray45);
        double[][] doubleArray47 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray45);
        double[][] doubleArray48 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray45);
        double[][] doubleArray49 = new double[][] {};
        double[][] doubleArray50 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray49);
        double[][] doubleArray51 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray49);
        double[][] doubleArray52 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray51);
        double[][] doubleArray53 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray51);
        double[][] doubleArray54 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray53);
        double[][] doubleArray55 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray54);
        double[][] doubleArray56 = new double[][] {};
        double[][] doubleArray57 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray56);
        int[] intArray58 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray57, intArray58);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray55, intArray58);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray45, intArray58);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray0, intArray58);
        java.lang.Class<?> wildcardClass63 = doubleArray0.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[]");
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[]");
        org.junit.Assert.assertNotNull(wildcardClass63);
    }

    @Test
    public void test2334() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2334");
        double[][] doubleArray0 = null;
        double[][] doubleArray1 = new double[][] {};
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[] doubleArray7 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray11 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray15 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray19 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray20 = new double[][] { doubleArray7, doubleArray11, doubleArray15, doubleArray19 };
        double[] doubleArray22 = new double[] { 1 };
        double[] doubleArray24 = new double[] { 1 };
        double[] doubleArray26 = new double[] { 1 };
        double[] doubleArray28 = new double[] { 1 };
        double[] doubleArray30 = new double[] { 1 };
        double[][] doubleArray31 = new double[][] { doubleArray22, doubleArray24, doubleArray26, doubleArray28, doubleArray30 };
        int[] intArray32 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray31, intArray32);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray20, intArray32);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray3, intArray32);
        double[][] doubleArray36 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[][] doubleArray37 = new double[][] {};
        double[][] doubleArray38 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray37);
        double[][] doubleArray39 = new double[][] {};
        double[][] doubleArray40 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray39);
        double[] doubleArray42 = new double[] { 1 };
        double[] doubleArray44 = new double[] { 1 };
        double[] doubleArray46 = new double[] { 1 };
        double[] doubleArray48 = new double[] { 1 };
        double[] doubleArray50 = new double[] { 1 };
        double[][] doubleArray51 = new double[][] { doubleArray42, doubleArray44, doubleArray46, doubleArray48, doubleArray50 };
        int[] intArray52 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray51, intArray52);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray39, intArray52);
        double[] doubleArray58 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray62 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray66 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray70 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray71 = new double[][] { doubleArray58, doubleArray62, doubleArray66, doubleArray70 };
        double[] doubleArray73 = new double[] { 1 };
        double[] doubleArray75 = new double[] { 1 };
        double[] doubleArray77 = new double[] { 1 };
        double[] doubleArray79 = new double[] { 1 };
        double[] doubleArray81 = new double[] { 1 };
        double[][] doubleArray82 = new double[][] { doubleArray73, doubleArray75, doubleArray77, doubleArray79, doubleArray81 };
        int[] intArray83 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray82, intArray83);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray71, intArray83);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray39, intArray83);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray38, intArray83);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray36, intArray83);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray0, intArray83);
        java.lang.Class<?> wildcardClass90 = intArray83.getClass();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[]");
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray66), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray70), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray73), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray75), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray77), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray79), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray81), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray82);
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray83), "[]");
        org.junit.Assert.assertNotNull(wildcardClass90);
    }

    @Test
    public void test2335() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2335");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray5 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray6 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray7 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray6);
        double[][] doubleArray8 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray7);
        double[][] doubleArray9 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray7);
        double[][] doubleArray10 = new double[][] {};
        double[][] doubleArray11 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray10);
        double[][] doubleArray12 = new double[][] {};
        double[][] doubleArray13 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray12);
        double[] doubleArray15 = new double[] { 1 };
        double[] doubleArray17 = new double[] { 1 };
        double[] doubleArray19 = new double[] { 1 };
        double[] doubleArray21 = new double[] { 1 };
        double[] doubleArray23 = new double[] { 1 };
        double[][] doubleArray24 = new double[][] { doubleArray15, doubleArray17, doubleArray19, doubleArray21, doubleArray23 };
        int[] intArray25 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray24, intArray25);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray12, intArray25);
        double[] doubleArray31 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray35 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray39 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray43 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray44 = new double[][] { doubleArray31, doubleArray35, doubleArray39, doubleArray43 };
        double[] doubleArray46 = new double[] { 1 };
        double[] doubleArray48 = new double[] { 1 };
        double[] doubleArray50 = new double[] { 1 };
        double[] doubleArray52 = new double[] { 1 };
        double[] doubleArray54 = new double[] { 1 };
        double[][] doubleArray55 = new double[][] { doubleArray46, doubleArray48, doubleArray50, doubleArray52, doubleArray54 };
        int[] intArray56 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray55, intArray56);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray44, intArray56);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray12, intArray56);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray11, intArray56);
        double[][] doubleArray61 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray11);
        double[][] doubleArray62 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray61);
        double[][] doubleArray63 = new double[][] {};
        double[][] doubleArray64 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray63);
        int[] intArray65 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray64, intArray65);
        double[] doubleArray68 = new double[] { 1 };
        double[] doubleArray70 = new double[] { 1 };
        double[] doubleArray72 = new double[] { 1 };
        double[] doubleArray74 = new double[] { 1 };
        double[] doubleArray76 = new double[] { 1 };
        double[][] doubleArray77 = new double[][] { doubleArray68, doubleArray70, doubleArray72, doubleArray74, doubleArray76 };
        int[] intArray78 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray77, intArray78);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray64, intArray78);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray62, intArray78);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray7, intArray78);
        double[][] doubleArray83 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray7);
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[]");
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray70), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray74), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[]");
        org.junit.Assert.assertNotNull(doubleArray83);
    }

    @Test
    public void test2336() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2336");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[][] doubleArray5 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray4);
        double[][] doubleArray6 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray4);
        double[][] doubleArray7 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray6);
        java.lang.Class<?> wildcardClass8 = doubleArray7.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertNotNull(wildcardClass8);
    }

    @Test
    public void test2337() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2337");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray30 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray31 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray32 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[] doubleArray39 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray46 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray53 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray60 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray61 = new double[][] { doubleArray39, doubleArray46, doubleArray53, doubleArray60 };
        double[][] doubleArray62 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray61);
        double[][] doubleArray63 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray61);
        double[][] doubleArray64 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray61);
        double[][] doubleArray65 = new double[][] {};
        double[][] doubleArray66 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray65);
        int[] intArray67 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray66, intArray67);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray64, intArray67);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray28, intArray67);
        double[][] doubleArray71 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray72 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray73 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray72);
        double[][] doubleArray74 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray72);
        java.lang.Class<?> wildcardClass75 = doubleArray72.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[]");
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertNotNull(wildcardClass75);
    }

    @Test
    public void test2338() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2338");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[] doubleArray6 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray10 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray14 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray18 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray19 = new double[][] { doubleArray6, doubleArray10, doubleArray14, doubleArray18 };
        double[] doubleArray21 = new double[] { 1 };
        double[] doubleArray23 = new double[] { 1 };
        double[] doubleArray25 = new double[] { 1 };
        double[] doubleArray27 = new double[] { 1 };
        double[] doubleArray29 = new double[] { 1 };
        double[][] doubleArray30 = new double[][] { doubleArray21, doubleArray23, doubleArray25, doubleArray27, doubleArray29 };
        int[] intArray31 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray30, intArray31);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray19, intArray31);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray2, intArray31);
        double[][] doubleArray35 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray36 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray37 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray36);
        double[][] doubleArray38 = new double[][] {};
        double[][] doubleArray39 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray38);
        double[][] doubleArray40 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray38);
        double[][] doubleArray41 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray40);
        double[][] doubleArray42 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray41);
        double[][] doubleArray43 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray41);
        double[][] doubleArray44 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray43);
        double[][] doubleArray45 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray43);
        double[][] doubleArray46 = null;
        double[][] doubleArray47 = new double[][] {};
        double[][] doubleArray48 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray47);
        double[][] doubleArray49 = new double[][] {};
        double[][] doubleArray50 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray49);
        double[][] doubleArray51 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray50);
        double[] doubleArray55 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray59 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray63 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray67 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray68 = new double[][] { doubleArray55, doubleArray59, doubleArray63, doubleArray67 };
        double[] doubleArray70 = new double[] { 1 };
        double[] doubleArray72 = new double[] { 1 };
        double[] doubleArray74 = new double[] { 1 };
        double[] doubleArray76 = new double[] { 1 };
        double[] doubleArray78 = new double[] { 1 };
        double[][] doubleArray79 = new double[][] { doubleArray70, doubleArray72, doubleArray74, doubleArray76, doubleArray78 };
        int[] intArray80 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray79, intArray80);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray68, intArray80);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray50, intArray80);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray48, intArray80);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray46, intArray80);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray45, intArray80);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray36, intArray80);
        java.lang.Class<?> wildcardClass88 = doubleArray36.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray70), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray74), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray78), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[]");
        org.junit.Assert.assertNotNull(wildcardClass88);
    }

    @Test
    public void test2339() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2339");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray30 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray29);
        double[][] doubleArray31 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        double[][] doubleArray32 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray31);
        double[][] doubleArray33 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray31);
        double[][] doubleArray34 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray31);
        double[][] doubleArray35 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray31);
        double[][] doubleArray36 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray35);
        double[][] doubleArray37 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray35);
        double[][] doubleArray38 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray35);
        double[][] doubleArray39 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray35);
        double[][] doubleArray40 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray39);
        java.lang.Class<?> wildcardClass41 = doubleArray40.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertNotNull(wildcardClass41);
    }

    @Test
    public void test2340() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2340");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray30 = new double[][] {};
        double[][] doubleArray31 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        double[] doubleArray33 = new double[] { 1 };
        double[] doubleArray35 = new double[] { 1 };
        double[] doubleArray37 = new double[] { 1 };
        double[] doubleArray39 = new double[] { 1 };
        double[] doubleArray41 = new double[] { 1 };
        double[][] doubleArray42 = new double[][] { doubleArray33, doubleArray35, doubleArray37, doubleArray39, doubleArray41 };
        int[] intArray43 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray42, intArray43);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray30, intArray43);
        double[] doubleArray49 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray53 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray57 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray61 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray62 = new double[][] { doubleArray49, doubleArray53, doubleArray57, doubleArray61 };
        double[] doubleArray64 = new double[] { 1 };
        double[] doubleArray66 = new double[] { 1 };
        double[] doubleArray68 = new double[] { 1 };
        double[] doubleArray70 = new double[] { 1 };
        double[] doubleArray72 = new double[] { 1 };
        double[][] doubleArray73 = new double[][] { doubleArray64, doubleArray66, doubleArray68, doubleArray70, doubleArray72 };
        int[] intArray74 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray73, intArray74);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray62, intArray74);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray30, intArray74);
        double[][] doubleArray78 = new double[][] {};
        double[][] doubleArray79 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray78);
        double[] doubleArray81 = new double[] { 1 };
        double[] doubleArray83 = new double[] { 1 };
        double[] doubleArray85 = new double[] { 1 };
        double[] doubleArray87 = new double[] { 1 };
        double[] doubleArray89 = new double[] { 1 };
        double[][] doubleArray90 = new double[][] { doubleArray81, doubleArray83, doubleArray85, doubleArray87, doubleArray89 };
        int[] intArray91 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray90, intArray91);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray78, intArray91);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray30, intArray91);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray28, intArray91);
        double[][] doubleArray96 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray97 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray98 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray99 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray98);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray66), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray70), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[]");
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertNotNull(doubleArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray81), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray83), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray85), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray87), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray89), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray90);
        org.junit.Assert.assertNotNull(intArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray91), "[]");
        org.junit.Assert.assertNotNull(doubleArray96);
        org.junit.Assert.assertNotNull(doubleArray97);
        org.junit.Assert.assertNotNull(doubleArray98);
        org.junit.Assert.assertNotNull(doubleArray99);
    }

    @Test
    public void test2341() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2341");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[] doubleArray3 = new double[] { 1 };
        double[] doubleArray5 = new double[] { 1 };
        double[] doubleArray7 = new double[] { 1 };
        double[] doubleArray9 = new double[] { 1 };
        double[] doubleArray11 = new double[] { 1 };
        double[][] doubleArray12 = new double[][] { doubleArray3, doubleArray5, doubleArray7, doubleArray9, doubleArray11 };
        int[] intArray13 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray12, intArray13);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray0, intArray13);
        double[][] doubleArray16 = new double[][] {};
        double[][] doubleArray17 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray16);
        double[][] doubleArray18 = new double[][] {};
        double[][] doubleArray19 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray18);
        double[] doubleArray21 = new double[] { 1 };
        double[] doubleArray23 = new double[] { 1 };
        double[] doubleArray25 = new double[] { 1 };
        double[] doubleArray27 = new double[] { 1 };
        double[] doubleArray29 = new double[] { 1 };
        double[][] doubleArray30 = new double[][] { doubleArray21, doubleArray23, doubleArray25, doubleArray27, doubleArray29 };
        int[] intArray31 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray30, intArray31);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray18, intArray31);
        double[] doubleArray37 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray41 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray45 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray49 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray50 = new double[][] { doubleArray37, doubleArray41, doubleArray45, doubleArray49 };
        double[] doubleArray52 = new double[] { 1 };
        double[] doubleArray54 = new double[] { 1 };
        double[] doubleArray56 = new double[] { 1 };
        double[] doubleArray58 = new double[] { 1 };
        double[] doubleArray60 = new double[] { 1 };
        double[][] doubleArray61 = new double[][] { doubleArray52, doubleArray54, doubleArray56, doubleArray58, doubleArray60 };
        int[] intArray62 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray61, intArray62);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray50, intArray62);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray18, intArray62);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray17, intArray62);
        double[] doubleArray68 = new double[] { 1 };
        double[] doubleArray70 = new double[] { 1 };
        double[] doubleArray72 = new double[] { 1 };
        double[] doubleArray74 = new double[] { 1 };
        double[] doubleArray76 = new double[] { 1 };
        double[][] doubleArray77 = new double[][] { doubleArray68, doubleArray70, doubleArray72, doubleArray74, doubleArray76 };
        int[] intArray78 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray77, intArray78);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray17, intArray78);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray0, intArray78);
        double[][] doubleArray82 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray83 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray82);
        double[][] doubleArray84 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray82);
        java.lang.Class<?> wildcardClass85 = doubleArray82.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[]");
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray70), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray74), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[]");
        org.junit.Assert.assertNotNull(doubleArray82);
        org.junit.Assert.assertNotNull(doubleArray83);
        org.junit.Assert.assertNotNull(doubleArray84);
        org.junit.Assert.assertNotNull(wildcardClass85);
    }

    @Test
    public void test2342() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2342");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[][] doubleArray5 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray4);
        double[][] doubleArray6 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray5);
        double[][] doubleArray7 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray6);
        double[][] doubleArray8 = new double[][] {};
        double[][] doubleArray9 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray8);
        double[][] doubleArray10 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray8);
        double[][] doubleArray11 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray8);
        double[][] doubleArray12 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray11);
        double[][] doubleArray13 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray12);
        double[][] doubleArray14 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray13);
        double[][] doubleArray15 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray14);
        double[][] doubleArray16 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray15);
        double[][] doubleArray17 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray15);
        double[] doubleArray24 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray31 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray38 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray45 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray46 = new double[][] { doubleArray24, doubleArray31, doubleArray38, doubleArray45 };
        double[][] doubleArray47 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray46);
        double[][] doubleArray48 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray47);
        double[][] doubleArray49 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray48);
        double[][] doubleArray50 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray48);
        double[][] doubleArray51 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray48);
        double[][] doubleArray52 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray48);
        double[][] doubleArray53 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray52);
        double[][] doubleArray54 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray53);
        double[][] doubleArray55 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray53);
        double[][] doubleArray56 = new double[][] {};
        double[][] doubleArray57 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray56);
        double[][] doubleArray58 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray57);
        double[] doubleArray62 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray66 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray70 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray74 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray75 = new double[][] { doubleArray62, doubleArray66, doubleArray70, doubleArray74 };
        double[] doubleArray77 = new double[] { 1 };
        double[] doubleArray79 = new double[] { 1 };
        double[] doubleArray81 = new double[] { 1 };
        double[] doubleArray83 = new double[] { 1 };
        double[] doubleArray85 = new double[] { 1 };
        double[][] doubleArray86 = new double[][] { doubleArray77, doubleArray79, doubleArray81, doubleArray83, doubleArray85 };
        int[] intArray87 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray86, intArray87);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray75, intArray87);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray57, intArray87);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray55, intArray87);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray15, intArray87);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray6, intArray87);
        double[][] doubleArray94 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray66), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray70), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray74), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray77), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray79), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray81), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray83), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray85), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray86);
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray87), "[]");
        org.junit.Assert.assertNotNull(doubleArray94);
    }

    @Test
    public void test2343() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2343");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[][] doubleArray5 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray4);
        double[][] doubleArray6 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray5);
        double[][] doubleArray7 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray5);
        double[][] doubleArray8 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray7);
        java.lang.Class<?> wildcardClass9 = doubleArray7.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void test2344() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2344");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray5 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray4);
        double[][] doubleArray6 = new double[][] {};
        double[][] doubleArray7 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray6);
        double[][] doubleArray8 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray6);
        double[][] doubleArray9 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray8);
        double[][] doubleArray10 = null;
        double[][] doubleArray11 = new double[][] {};
        double[][] doubleArray12 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray11);
        double[][] doubleArray13 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray12);
        double[] doubleArray17 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray21 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray25 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray29 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray30 = new double[][] { doubleArray17, doubleArray21, doubleArray25, doubleArray29 };
        double[] doubleArray32 = new double[] { 1 };
        double[] doubleArray34 = new double[] { 1 };
        double[] doubleArray36 = new double[] { 1 };
        double[] doubleArray38 = new double[] { 1 };
        double[] doubleArray40 = new double[] { 1 };
        double[][] doubleArray41 = new double[][] { doubleArray32, doubleArray34, doubleArray36, doubleArray38, doubleArray40 };
        int[] intArray42 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray41, intArray42);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray30, intArray42);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray13, intArray42);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray10, intArray42);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray9, intArray42);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray4, intArray42);
        double[][] doubleArray49 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray4);
        int[] intArray50 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray4, intArray50);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[]");
        org.junit.Assert.assertNotNull(doubleArray49);
    }

    @Test
    public void test2345() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2345");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[] doubleArray6 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray10 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray14 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray18 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray19 = new double[][] { doubleArray6, doubleArray10, doubleArray14, doubleArray18 };
        double[] doubleArray21 = new double[] { 1 };
        double[] doubleArray23 = new double[] { 1 };
        double[] doubleArray25 = new double[] { 1 };
        double[] doubleArray27 = new double[] { 1 };
        double[] doubleArray29 = new double[] { 1 };
        double[][] doubleArray30 = new double[][] { doubleArray21, doubleArray23, doubleArray25, doubleArray27, doubleArray29 };
        int[] intArray31 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray30, intArray31);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray19, intArray31);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray1, intArray31);
        double[][] doubleArray35 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray36 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray37 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray38 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        java.lang.Class<?> wildcardClass39 = doubleArray1.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertNotNull(wildcardClass39);
    }

    @Test
    public void test2346() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2346");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        int[] intArray2 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray1, intArray2);
        double[] doubleArray5 = new double[] { 1 };
        double[] doubleArray7 = new double[] { 1 };
        double[] doubleArray9 = new double[] { 1 };
        double[] doubleArray11 = new double[] { 1 };
        double[] doubleArray13 = new double[] { 1 };
        double[][] doubleArray14 = new double[][] { doubleArray5, doubleArray7, doubleArray9, doubleArray11, doubleArray13 };
        int[] intArray15 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray14, intArray15);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray1, intArray15);
        double[][] doubleArray18 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray19 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray20 = new double[][] {};
        double[][] doubleArray21 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray20);
        int[] intArray22 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray21, intArray22);
        double[][] doubleArray24 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray21);
        double[][] doubleArray25 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray21);
        double[][] doubleArray26 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray25);
        double[][] doubleArray27 = new double[][] {};
        double[][] doubleArray28 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray27);
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray27);
        double[][] doubleArray30 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray27);
        double[][] doubleArray31 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        double[] doubleArray33 = new double[] { 1 };
        double[] doubleArray35 = new double[] { 1 };
        double[] doubleArray37 = new double[] { 1 };
        double[] doubleArray39 = new double[] { 1 };
        double[] doubleArray41 = new double[] { 1 };
        double[][] doubleArray42 = new double[][] { doubleArray33, doubleArray35, doubleArray37, doubleArray39, doubleArray41 };
        int[] intArray43 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray42, intArray43);
        double[][] doubleArray45 = new double[][] {};
        double[][] doubleArray46 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray45);
        int[] intArray47 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray46, intArray47);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray42, intArray47);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray30, intArray47);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray25, intArray47);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray1, intArray47);
        double[][] doubleArray53 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        java.lang.Class<?> wildcardClass54 = doubleArray1.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[]");
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[]");
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[]");
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertNotNull(wildcardClass54);
    }

    @Test
    public void test2347() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2347");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray5 = new double[][] {};
        double[][] doubleArray6 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray5);
        double[][] doubleArray7 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray6);
        double[] doubleArray11 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray15 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray19 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray23 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray24 = new double[][] { doubleArray11, doubleArray15, doubleArray19, doubleArray23 };
        double[] doubleArray26 = new double[] { 1 };
        double[] doubleArray28 = new double[] { 1 };
        double[] doubleArray30 = new double[] { 1 };
        double[] doubleArray32 = new double[] { 1 };
        double[] doubleArray34 = new double[] { 1 };
        double[][] doubleArray35 = new double[][] { doubleArray26, doubleArray28, doubleArray30, doubleArray32, doubleArray34 };
        int[] intArray36 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray35, intArray36);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray24, intArray36);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray7, intArray36);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray0, intArray36);
        double[][] doubleArray41 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray42 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray43 = new double[][] {};
        double[][] doubleArray44 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray43);
        double[][] doubleArray45 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray43);
        double[][] doubleArray46 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray43);
        double[][] doubleArray47 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray43);
        double[][] doubleArray48 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray47);
        double[][] doubleArray49 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray48);
        double[][] doubleArray50 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray48);
        double[][] doubleArray51 = new double[][] {};
        double[][] doubleArray52 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray51);
        double[][] doubleArray53 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray51);
        double[][] doubleArray54 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray51);
        double[][] doubleArray55 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray51);
        double[][] doubleArray56 = new double[][] {};
        double[][] doubleArray57 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray56);
        double[][] doubleArray58 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray57);
        double[] doubleArray62 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray66 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray70 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray74 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray75 = new double[][] { doubleArray62, doubleArray66, doubleArray70, doubleArray74 };
        double[] doubleArray77 = new double[] { 1 };
        double[] doubleArray79 = new double[] { 1 };
        double[] doubleArray81 = new double[] { 1 };
        double[] doubleArray83 = new double[] { 1 };
        double[] doubleArray85 = new double[] { 1 };
        double[][] doubleArray86 = new double[][] { doubleArray77, doubleArray79, doubleArray81, doubleArray83, doubleArray85 };
        int[] intArray87 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray86, intArray87);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray75, intArray87);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray58, intArray87);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray51, intArray87);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray50, intArray87);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray42, intArray87);
        java.lang.Class<?> wildcardClass94 = intArray87.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray66), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray70), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray74), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray77), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray79), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray81), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray83), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray85), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray86);
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray87), "[]");
        org.junit.Assert.assertNotNull(wildcardClass94);
    }

    @Test
    public void test2348() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2348");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray30 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray31 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray32 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray31);
        double[][] doubleArray33 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray32);
        double[][] doubleArray34 = new double[][] {};
        double[][] doubleArray35 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray34);
        int[] intArray36 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray35, intArray36);
        double[][] doubleArray38 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray35);
        double[][] doubleArray39 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray35);
        double[][] doubleArray40 = new double[][] {};
        double[][] doubleArray41 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray40);
        double[][] doubleArray42 = new double[][] {};
        double[][] doubleArray43 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray42);
        double[] doubleArray45 = new double[] { 1 };
        double[] doubleArray47 = new double[] { 1 };
        double[] doubleArray49 = new double[] { 1 };
        double[] doubleArray51 = new double[] { 1 };
        double[] doubleArray53 = new double[] { 1 };
        double[][] doubleArray54 = new double[][] { doubleArray45, doubleArray47, doubleArray49, doubleArray51, doubleArray53 };
        int[] intArray55 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray54, intArray55);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray42, intArray55);
        double[] doubleArray61 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray65 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray69 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray73 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray74 = new double[][] { doubleArray61, doubleArray65, doubleArray69, doubleArray73 };
        double[] doubleArray76 = new double[] { 1 };
        double[] doubleArray78 = new double[] { 1 };
        double[] doubleArray80 = new double[] { 1 };
        double[] doubleArray82 = new double[] { 1 };
        double[] doubleArray84 = new double[] { 1 };
        double[][] doubleArray85 = new double[][] { doubleArray76, doubleArray78, doubleArray80, doubleArray82, doubleArray84 };
        int[] intArray86 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray85, intArray86);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray74, intArray86);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray42, intArray86);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray41, intArray86);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray35, intArray86);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray32, intArray86);
        double[][] doubleArray93 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray32);
        java.lang.Class<?> wildcardClass94 = doubleArray93.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray73), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray78), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray80), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray82), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray84), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray85);
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray86), "[]");
        org.junit.Assert.assertNotNull(doubleArray93);
        org.junit.Assert.assertNotNull(wildcardClass94);
    }

    @Test
    public void test2349() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2349");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray5 = new double[][] {};
        double[][] doubleArray6 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray5);
        double[][] doubleArray7 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray6);
        double[] doubleArray11 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray15 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray19 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray23 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray24 = new double[][] { doubleArray11, doubleArray15, doubleArray19, doubleArray23 };
        double[] doubleArray26 = new double[] { 1 };
        double[] doubleArray28 = new double[] { 1 };
        double[] doubleArray30 = new double[] { 1 };
        double[] doubleArray32 = new double[] { 1 };
        double[] doubleArray34 = new double[] { 1 };
        double[][] doubleArray35 = new double[][] { doubleArray26, doubleArray28, doubleArray30, doubleArray32, doubleArray34 };
        int[] intArray36 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray35, intArray36);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray24, intArray36);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray7, intArray36);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray0, intArray36);
        double[][] doubleArray41 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray42 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray41);
        double[][] doubleArray43 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray42);
        double[][] doubleArray44 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray43);
        java.lang.Class<?> wildcardClass45 = doubleArray44.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertNotNull(wildcardClass45);
    }

    @Test
    public void test2350() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2350");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray30 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray31 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        double[][] doubleArray32 = new double[][] {};
        double[][] doubleArray33 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray32);
        double[][] doubleArray34 = new double[][] {};
        double[][] doubleArray35 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray34);
        double[] doubleArray37 = new double[] { 1 };
        double[] doubleArray39 = new double[] { 1 };
        double[] doubleArray41 = new double[] { 1 };
        double[] doubleArray43 = new double[] { 1 };
        double[] doubleArray45 = new double[] { 1 };
        double[][] doubleArray46 = new double[][] { doubleArray37, doubleArray39, doubleArray41, doubleArray43, doubleArray45 };
        int[] intArray47 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray46, intArray47);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray34, intArray47);
        double[] doubleArray53 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray57 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray61 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray65 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray66 = new double[][] { doubleArray53, doubleArray57, doubleArray61, doubleArray65 };
        double[] doubleArray68 = new double[] { 1 };
        double[] doubleArray70 = new double[] { 1 };
        double[] doubleArray72 = new double[] { 1 };
        double[] doubleArray74 = new double[] { 1 };
        double[] doubleArray76 = new double[] { 1 };
        double[][] doubleArray77 = new double[][] { doubleArray68, doubleArray70, doubleArray72, doubleArray74, doubleArray76 };
        int[] intArray78 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray77, intArray78);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray66, intArray78);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray34, intArray78);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray32, intArray78);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray31, intArray78);
        double[][] doubleArray84 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray31);
        double[][] doubleArray85 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray84);
        double[][] doubleArray86 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray84);
        java.lang.Class<?> wildcardClass87 = doubleArray84.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[]");
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray70), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray74), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[]");
        org.junit.Assert.assertNotNull(doubleArray84);
        org.junit.Assert.assertNotNull(doubleArray85);
        org.junit.Assert.assertNotNull(doubleArray86);
        org.junit.Assert.assertNotNull(wildcardClass87);
    }

    @Test
    public void test2351() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2351");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray30 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray29);
        double[][] doubleArray31 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        double[][] doubleArray32 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        double[][] doubleArray33 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        double[][] doubleArray34 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        double[][] doubleArray35 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray34);
        double[][] doubleArray36 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray35);
        double[][] doubleArray37 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray35);
        double[][] doubleArray38 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray35);
        double[][] doubleArray39 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray35);
        double[][] doubleArray40 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray35);
        double[][] doubleArray41 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray35);
        double[][] doubleArray42 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray41);
        double[][] doubleArray43 = null;
        double[][] doubleArray44 = new double[][] {};
        double[][] doubleArray45 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray44);
        double[][] doubleArray46 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray44);
        double[] doubleArray48 = new double[] { 1 };
        double[] doubleArray50 = new double[] { 1 };
        double[] doubleArray52 = new double[] { 1 };
        double[] doubleArray54 = new double[] { 1 };
        double[] doubleArray56 = new double[] { 1 };
        double[][] doubleArray57 = new double[][] { doubleArray48, doubleArray50, doubleArray52, doubleArray54, doubleArray56 };
        int[] intArray58 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray57, intArray58);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray46, intArray58);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray43, intArray58);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray42, intArray58);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[]");
    }

    @Test
    public void test2352() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2352");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray30 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray29);
        double[][] doubleArray31 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        double[][] doubleArray32 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray31);
        double[][] doubleArray33 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray32);
        double[][] doubleArray34 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray33);
        double[][] doubleArray35 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray33);
        double[][] doubleArray36 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray33);
        double[][] doubleArray37 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray36);
        double[][] doubleArray38 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray37);
        double[][] doubleArray39 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray38);
        double[][] doubleArray40 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray39);
        double[][] doubleArray41 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray39);
        java.lang.Class<?> wildcardClass42 = doubleArray41.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertNotNull(wildcardClass42);
    }

    @Test
    public void test2353() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2353");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = new double[][] {};
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[] doubleArray5 = new double[] { 1 };
        double[] doubleArray7 = new double[] { 1 };
        double[] doubleArray9 = new double[] { 1 };
        double[] doubleArray11 = new double[] { 1 };
        double[] doubleArray13 = new double[] { 1 };
        double[][] doubleArray14 = new double[][] { doubleArray5, doubleArray7, doubleArray9, doubleArray11, doubleArray13 };
        int[] intArray15 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray14, intArray15);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray2, intArray15);
        double[] doubleArray21 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray25 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray29 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray33 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray34 = new double[][] { doubleArray21, doubleArray25, doubleArray29, doubleArray33 };
        double[] doubleArray36 = new double[] { 1 };
        double[] doubleArray38 = new double[] { 1 };
        double[] doubleArray40 = new double[] { 1 };
        double[] doubleArray42 = new double[] { 1 };
        double[] doubleArray44 = new double[] { 1 };
        double[][] doubleArray45 = new double[][] { doubleArray36, doubleArray38, doubleArray40, doubleArray42, doubleArray44 };
        int[] intArray46 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray45, intArray46);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray34, intArray46);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray2, intArray46);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray1, intArray46);
        double[][] doubleArray51 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray52 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray51);
        double[][] doubleArray53 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray52);
        double[][] doubleArray54 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray53);
        double[][] doubleArray55 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray54);
        double[][] doubleArray56 = new double[][] {};
        double[][] doubleArray57 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray56);
        double[][] doubleArray58 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray56);
        double[][] doubleArray59 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray58);
        double[][] doubleArray60 = null;
        double[][] doubleArray61 = new double[][] {};
        double[][] doubleArray62 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray61);
        double[][] doubleArray63 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray62);
        double[] doubleArray67 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray71 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray75 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray79 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray80 = new double[][] { doubleArray67, doubleArray71, doubleArray75, doubleArray79 };
        double[] doubleArray82 = new double[] { 1 };
        double[] doubleArray84 = new double[] { 1 };
        double[] doubleArray86 = new double[] { 1 };
        double[] doubleArray88 = new double[] { 1 };
        double[] doubleArray90 = new double[] { 1 };
        double[][] doubleArray91 = new double[][] { doubleArray82, doubleArray84, doubleArray86, doubleArray88, doubleArray90 };
        int[] intArray92 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray91, intArray92);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray80, intArray92);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray63, intArray92);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray60, intArray92);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray59, intArray92);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray54, intArray92);
        java.lang.Class<?> wildcardClass99 = intArray92.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray71), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray75), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray79), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertNotNull(doubleArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray82), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray84), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray86), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray88), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray90), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray91);
        org.junit.Assert.assertNotNull(intArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray92), "[]");
        org.junit.Assert.assertNotNull(wildcardClass99);
    }

    @Test
    public void test2354() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2354");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray30 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray29);
        double[][] doubleArray31 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        double[][] doubleArray32 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray31);
        double[][] doubleArray33 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray31);
        double[][] doubleArray34 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray33);
        double[] doubleArray41 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray48 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray55 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray62 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray63 = new double[][] { doubleArray41, doubleArray48, doubleArray55, doubleArray62 };
        double[][] doubleArray64 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray63);
        double[][] doubleArray65 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray64);
        double[][] doubleArray66 = new double[][] {};
        double[][] doubleArray67 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray66);
        double[] doubleArray69 = new double[] { 1 };
        double[] doubleArray71 = new double[] { 1 };
        double[] doubleArray73 = new double[] { 1 };
        double[] doubleArray75 = new double[] { 1 };
        double[] doubleArray77 = new double[] { 1 };
        double[][] doubleArray78 = new double[][] { doubleArray69, doubleArray71, doubleArray73, doubleArray75, doubleArray77 };
        int[] intArray79 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray78, intArray79);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray66, intArray79);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray65, intArray79);
        double[][] doubleArray83 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray65);
        double[] doubleArray85 = new double[] { 1 };
        double[] doubleArray87 = new double[] { 1 };
        double[] doubleArray89 = new double[] { 1 };
        double[] doubleArray91 = new double[] { 1 };
        double[] doubleArray93 = new double[] { 1 };
        double[][] doubleArray94 = new double[][] { doubleArray85, doubleArray87, doubleArray89, doubleArray91, doubleArray93 };
        int[] intArray95 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray94, intArray95);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray83, intArray95);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray34, intArray95);
        java.lang.Class<?> wildcardClass99 = doubleArray34.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray71), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray73), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray75), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray77), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray79), "[]");
        org.junit.Assert.assertNotNull(doubleArray83);
        org.junit.Assert.assertNotNull(doubleArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray85), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray87), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray89), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray91), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray93);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray93), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray94);
        org.junit.Assert.assertNotNull(intArray95);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray95), "[]");
        org.junit.Assert.assertNotNull(wildcardClass99);
    }

    @Test
    public void test2355() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2355");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray30 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray31 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        double[][] doubleArray32 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        double[][] doubleArray33 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray32);
        double[][] doubleArray34 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray33);
        double[][] doubleArray35 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray34);
        double[][] doubleArray36 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray35);
        double[][] doubleArray37 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray35);
        double[][] doubleArray38 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray35);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertNotNull(doubleArray38);
    }

    @Test
    public void test2356() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2356");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[][] doubleArray5 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray4);
        double[][] doubleArray6 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray4);
        double[][] doubleArray7 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray4);
        java.lang.Class<?> wildcardClass8 = doubleArray4.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertNotNull(wildcardClass8);
    }

    @Test
    public void test2357() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2357");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray30 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray29);
        double[][] doubleArray31 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        double[][] doubleArray32 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray31);
        double[][] doubleArray33 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray32);
        double[][] doubleArray34 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray33);
        double[][] doubleArray35 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray33);
        double[][] doubleArray36 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray33);
        double[][] doubleArray37 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray36);
        double[][] doubleArray38 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray37);
        double[][] doubleArray39 = new double[][] {};
        double[][] doubleArray40 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray39);
        double[][] doubleArray41 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray39);
        double[][] doubleArray42 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray41);
        double[][] doubleArray43 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray41);
        double[][] doubleArray44 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray43);
        double[][] doubleArray45 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray44);
        double[][] doubleArray46 = new double[][] {};
        double[][] doubleArray47 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray46);
        int[] intArray48 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray47, intArray48);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray45, intArray48);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray37, intArray48);
        double[][] doubleArray52 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray37);
        double[][] doubleArray53 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray37);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[]");
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertNotNull(doubleArray53);
    }

    @Test
    public void test2358() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2358");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray30 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray29);
        double[][] doubleArray31 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        double[][] doubleArray32 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray31);
        double[][] doubleArray33 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray31);
        double[][] doubleArray34 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray31);
        double[][] doubleArray35 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray34);
        double[][] doubleArray36 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray34);
        double[][] doubleArray37 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray34);
        double[][] doubleArray38 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray37);
        double[][] doubleArray39 = null;
        double[][] doubleArray40 = new double[][] {};
        double[][] doubleArray41 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray40);
        double[] doubleArray43 = new double[] { 1 };
        double[] doubleArray45 = new double[] { 1 };
        double[] doubleArray47 = new double[] { 1 };
        double[] doubleArray49 = new double[] { 1 };
        double[] doubleArray51 = new double[] { 1 };
        double[][] doubleArray52 = new double[][] { doubleArray43, doubleArray45, doubleArray47, doubleArray49, doubleArray51 };
        int[] intArray53 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray52, intArray53);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray40, intArray53);
        double[] doubleArray59 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray63 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray67 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray71 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray72 = new double[][] { doubleArray59, doubleArray63, doubleArray67, doubleArray71 };
        double[] doubleArray74 = new double[] { 1 };
        double[] doubleArray76 = new double[] { 1 };
        double[] doubleArray78 = new double[] { 1 };
        double[] doubleArray80 = new double[] { 1 };
        double[] doubleArray82 = new double[] { 1 };
        double[][] doubleArray83 = new double[][] { doubleArray74, doubleArray76, doubleArray78, doubleArray80, doubleArray82 };
        int[] intArray84 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray83, intArray84);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray72, intArray84);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray40, intArray84);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray39, intArray84);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray38, intArray84);
        double[][] doubleArray90 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray38);
        java.lang.Class<?> wildcardClass91 = doubleArray38.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[]");
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray71), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray74), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray78), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray80), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray82), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray83);
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray84), "[]");
        org.junit.Assert.assertNotNull(doubleArray90);
        org.junit.Assert.assertNotNull(wildcardClass91);
    }

    @Test
    public void test2359() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2359");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray5 = new double[][] {};
        double[][] doubleArray6 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray5);
        double[][] doubleArray7 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray6);
        double[] doubleArray11 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray15 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray19 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray23 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray24 = new double[][] { doubleArray11, doubleArray15, doubleArray19, doubleArray23 };
        double[] doubleArray26 = new double[] { 1 };
        double[] doubleArray28 = new double[] { 1 };
        double[] doubleArray30 = new double[] { 1 };
        double[] doubleArray32 = new double[] { 1 };
        double[] doubleArray34 = new double[] { 1 };
        double[][] doubleArray35 = new double[][] { doubleArray26, doubleArray28, doubleArray30, doubleArray32, doubleArray34 };
        int[] intArray36 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray35, intArray36);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray24, intArray36);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray7, intArray36);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray0, intArray36);
        double[][] doubleArray41 = new double[][] {};
        double[][] doubleArray42 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray41);
        double[][] doubleArray43 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray42);
        double[][] doubleArray44 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray43);
        double[][] doubleArray45 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray43);
        double[][] doubleArray46 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray43);
        double[][] doubleArray47 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray43);
        double[] doubleArray54 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray61 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray68 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray75 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray76 = new double[][] { doubleArray54, doubleArray61, doubleArray68, doubleArray75 };
        double[][] doubleArray77 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray76);
        double[][] doubleArray78 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray76);
        double[][] doubleArray79 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray76);
        double[][] doubleArray80 = new double[][] {};
        double[][] doubleArray81 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray80);
        int[] intArray82 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray81, intArray82);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray79, intArray82);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray47, intArray82);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray0, intArray82);
        java.lang.Class<?> wildcardClass87 = intArray82.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray75), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertNotNull(doubleArray81);
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[]");
        org.junit.Assert.assertNotNull(wildcardClass87);
    }

    @Test
    public void test2360() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2360");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray5 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray6 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray34 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray35 = new double[][] { doubleArray13, doubleArray20, doubleArray27, doubleArray34 };
        double[][] doubleArray36 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray35);
        double[][] doubleArray37 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray36);
        double[][] doubleArray38 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray36);
        double[][] doubleArray39 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray36);
        double[][] doubleArray40 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray36);
        double[][] doubleArray41 = new double[][] {};
        double[][] doubleArray42 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray41);
        double[][] doubleArray43 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray41);
        double[][] doubleArray44 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray43);
        double[][] doubleArray45 = null;
        double[][] doubleArray46 = new double[][] {};
        double[][] doubleArray47 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray46);
        double[][] doubleArray48 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray47);
        double[] doubleArray52 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray56 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray60 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray64 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray65 = new double[][] { doubleArray52, doubleArray56, doubleArray60, doubleArray64 };
        double[] doubleArray67 = new double[] { 1 };
        double[] doubleArray69 = new double[] { 1 };
        double[] doubleArray71 = new double[] { 1 };
        double[] doubleArray73 = new double[] { 1 };
        double[] doubleArray75 = new double[] { 1 };
        double[][] doubleArray76 = new double[][] { doubleArray67, doubleArray69, doubleArray71, doubleArray73, doubleArray75 };
        int[] intArray77 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray76, intArray77);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray65, intArray77);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray48, intArray77);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray45, intArray77);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray44, intArray77);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray40, intArray77);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray2, intArray77);
        java.lang.Class<?> wildcardClass85 = doubleArray2.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray71), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray73), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray75), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray77), "[]");
        org.junit.Assert.assertNotNull(wildcardClass85);
    }

    @Test
    public void test2361() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2361");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[] doubleArray31 = new double[] { 1 };
        double[] doubleArray33 = new double[] { 1 };
        double[] doubleArray35 = new double[] { 1 };
        double[] doubleArray37 = new double[] { 1 };
        double[] doubleArray39 = new double[] { 1 };
        double[][] doubleArray40 = new double[][] { doubleArray31, doubleArray33, doubleArray35, doubleArray37, doubleArray39 };
        int[] intArray41 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray40, intArray41);
        double[][] doubleArray43 = new double[][] {};
        double[][] doubleArray44 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray43);
        int[] intArray45 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray44, intArray45);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray40, intArray45);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray28, intArray45);
        double[][] doubleArray49 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray50 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray49);
        double[][] doubleArray51 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray50);
        double[][] doubleArray52 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray50);
        double[][] doubleArray53 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray50);
        double[][] doubleArray54 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray50);
        double[][] doubleArray55 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray54);
        double[][] doubleArray56 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray55);
        double[][] doubleArray57 = new double[][] {};
        double[][] doubleArray58 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray57);
        double[][] doubleArray59 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray57);
        double[][] doubleArray60 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray59);
        double[][] doubleArray61 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray60);
        double[][] doubleArray62 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray61);
        double[][] doubleArray63 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray62);
        double[][] doubleArray64 = new double[][] {};
        double[][] doubleArray65 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray64);
        double[][] doubleArray66 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray64);
        double[][] doubleArray67 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray64);
        double[][] doubleArray68 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray64);
        double[][] doubleArray69 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray68);
        double[][] doubleArray70 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray68);
        double[][] doubleArray71 = new double[][] {};
        double[][] doubleArray72 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray71);
        int[] intArray73 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray72, intArray73);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray70, intArray73);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray63, intArray73);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray55, intArray73);
        double[][] doubleArray78 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray55);
        double[][] doubleArray79 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray78);
        double[][] doubleArray80 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray78);
        java.lang.Class<?> wildcardClass81 = doubleArray78.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[]");
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertNotNull(wildcardClass81);
    }

    @Test
    public void test2362() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2362");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[] doubleArray3 = new double[] { 1 };
        double[] doubleArray5 = new double[] { 1 };
        double[] doubleArray7 = new double[] { 1 };
        double[] doubleArray9 = new double[] { 1 };
        double[] doubleArray11 = new double[] { 1 };
        double[][] doubleArray12 = new double[][] { doubleArray3, doubleArray5, doubleArray7, doubleArray9, doubleArray11 };
        int[] intArray13 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray12, intArray13);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray0, intArray13);
        double[] doubleArray19 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray23 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray27 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray31 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray32 = new double[][] { doubleArray19, doubleArray23, doubleArray27, doubleArray31 };
        double[] doubleArray34 = new double[] { 1 };
        double[] doubleArray36 = new double[] { 1 };
        double[] doubleArray38 = new double[] { 1 };
        double[] doubleArray40 = new double[] { 1 };
        double[] doubleArray42 = new double[] { 1 };
        double[][] doubleArray43 = new double[][] { doubleArray34, doubleArray36, doubleArray38, doubleArray40, doubleArray42 };
        int[] intArray44 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray43, intArray44);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray32, intArray44);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray0, intArray44);
        double[] doubleArray49 = new double[] { 1 };
        double[] doubleArray51 = new double[] { 1 };
        double[] doubleArray53 = new double[] { 1 };
        double[] doubleArray55 = new double[] { 1 };
        double[] doubleArray57 = new double[] { 1 };
        double[][] doubleArray58 = new double[][] { doubleArray49, doubleArray51, doubleArray53, doubleArray55, doubleArray57 };
        int[] intArray59 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray58, intArray59);
        double[][] doubleArray61 = new double[][] {};
        double[][] doubleArray62 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray61);
        int[] intArray63 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray62, intArray63);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray58, intArray63);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray0, intArray63);
        double[][] doubleArray67 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray68 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray67);
        double[][] doubleArray69 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray68);
        double[][] doubleArray70 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray68);
        double[][] doubleArray71 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray70);
        double[][] doubleArray72 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray70);
        double[][] doubleArray73 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray72);
        double[][] doubleArray74 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray73);
        java.lang.Class<?> wildcardClass75 = doubleArray73.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[]");
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertNotNull(wildcardClass75);
    }

    @Test
    public void test2363() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2363");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[] doubleArray6 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray10 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray14 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray18 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray19 = new double[][] { doubleArray6, doubleArray10, doubleArray14, doubleArray18 };
        double[] doubleArray21 = new double[] { 1 };
        double[] doubleArray23 = new double[] { 1 };
        double[] doubleArray25 = new double[] { 1 };
        double[] doubleArray27 = new double[] { 1 };
        double[] doubleArray29 = new double[] { 1 };
        double[][] doubleArray30 = new double[][] { doubleArray21, doubleArray23, doubleArray25, doubleArray27, doubleArray29 };
        int[] intArray31 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray30, intArray31);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray19, intArray31);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray1, intArray31);
        double[][] doubleArray35 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray36 = null;
        double[] doubleArray43 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray50 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray57 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray64 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray65 = new double[][] { doubleArray43, doubleArray50, doubleArray57, doubleArray64 };
        double[][] doubleArray66 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray65);
        double[][] doubleArray67 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray65);
        double[][] doubleArray68 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray65);
        double[][] doubleArray69 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray68);
        double[][] doubleArray70 = new double[][] {};
        double[][] doubleArray71 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray70);
        int[] intArray72 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray71, intArray72);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray69, intArray72);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray36, intArray72);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray35, intArray72);
        double[][] doubleArray77 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray35);
        double[][] doubleArray78 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray77);
        double[][] doubleArray79 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray78);
        java.lang.Class<?> wildcardClass80 = doubleArray79.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[]");
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertNotNull(wildcardClass80);
    }

    @Test
    public void test2364() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2364");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[] doubleArray6 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray10 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray14 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray18 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray19 = new double[][] { doubleArray6, doubleArray10, doubleArray14, doubleArray18 };
        double[] doubleArray21 = new double[] { 1 };
        double[] doubleArray23 = new double[] { 1 };
        double[] doubleArray25 = new double[] { 1 };
        double[] doubleArray27 = new double[] { 1 };
        double[] doubleArray29 = new double[] { 1 };
        double[][] doubleArray30 = new double[][] { doubleArray21, doubleArray23, doubleArray25, doubleArray27, doubleArray29 };
        int[] intArray31 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray30, intArray31);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray19, intArray31);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray1, intArray31);
        double[][] doubleArray35 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray36 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray37 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray36);
        java.lang.Class<?> wildcardClass38 = doubleArray36.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertNotNull(wildcardClass38);
    }

    @Test
    public void test2365() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2365");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray5 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray6 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray5);
        double[][] doubleArray7 = null;
        double[][] doubleArray8 = new double[][] {};
        double[][] doubleArray9 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray8);
        double[][] doubleArray10 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray8);
        double[][] doubleArray11 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray8);
        double[][] doubleArray12 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray11);
        double[] doubleArray19 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray26 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray33 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray40 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray41 = new double[][] { doubleArray19, doubleArray26, doubleArray33, doubleArray40 };
        double[][] doubleArray42 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray41);
        double[][] doubleArray43 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray42);
        double[][] doubleArray44 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray43);
        double[][] doubleArray45 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray43);
        double[][] doubleArray46 = new double[][] {};
        double[][] doubleArray47 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray46);
        double[] doubleArray49 = new double[] { 1 };
        double[] doubleArray51 = new double[] { 1 };
        double[] doubleArray53 = new double[] { 1 };
        double[] doubleArray55 = new double[] { 1 };
        double[] doubleArray57 = new double[] { 1 };
        double[][] doubleArray58 = new double[][] { doubleArray49, doubleArray51, doubleArray53, doubleArray55, doubleArray57 };
        int[] intArray59 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray58, intArray59);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray46, intArray59);
        double[] doubleArray65 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray69 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray73 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray77 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray78 = new double[][] { doubleArray65, doubleArray69, doubleArray73, doubleArray77 };
        double[] doubleArray80 = new double[] { 1 };
        double[] doubleArray82 = new double[] { 1 };
        double[] doubleArray84 = new double[] { 1 };
        double[] doubleArray86 = new double[] { 1 };
        double[] doubleArray88 = new double[] { 1 };
        double[][] doubleArray89 = new double[][] { doubleArray80, doubleArray82, doubleArray84, doubleArray86, doubleArray88 };
        int[] intArray90 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray89, intArray90);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray78, intArray90);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray46, intArray90);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray45, intArray90);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray11, intArray90);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray7, intArray90);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray6, intArray90);
        java.lang.Class<?> wildcardClass98 = intArray90.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[]");
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray73), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray77), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray80), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray82), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray84), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray86), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray88), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray89);
        org.junit.Assert.assertNotNull(intArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray90), "[]");
        org.junit.Assert.assertNotNull(wildcardClass98);
    }

    @Test
    public void test2366() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2366");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray30 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray29);
        double[][] doubleArray31 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray29);
        double[] doubleArray38 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray45 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray52 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray59 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray60 = new double[][] { doubleArray38, doubleArray45, doubleArray52, doubleArray59 };
        double[][] doubleArray61 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray60);
        double[][] doubleArray62 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray61);
        double[][] doubleArray63 = new double[][] {};
        double[][] doubleArray64 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray63);
        double[] doubleArray66 = new double[] { 1 };
        double[] doubleArray68 = new double[] { 1 };
        double[] doubleArray70 = new double[] { 1 };
        double[] doubleArray72 = new double[] { 1 };
        double[] doubleArray74 = new double[] { 1 };
        double[][] doubleArray75 = new double[][] { doubleArray66, doubleArray68, doubleArray70, doubleArray72, doubleArray74 };
        int[] intArray76 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray75, intArray76);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray63, intArray76);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray62, intArray76);
        double[][] doubleArray80 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray62);
        double[][] doubleArray81 = new double[][] {};
        double[][] doubleArray82 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray81);
        int[] intArray83 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray82, intArray83);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray80, intArray83);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray31, intArray83);
        double[][] doubleArray87 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray31);
        java.lang.Class<?> wildcardClass88 = doubleArray87.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray66), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray70), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray74), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[]");
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertNotNull(doubleArray81);
        org.junit.Assert.assertNotNull(doubleArray82);
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray83), "[]");
        org.junit.Assert.assertNotNull(doubleArray87);
        org.junit.Assert.assertNotNull(wildcardClass88);
    }

    @Test
    public void test2367() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2367");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray30 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray29);
        double[][] doubleArray31 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        double[][] doubleArray32 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray31);
        double[][] doubleArray33 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray31);
        double[][] doubleArray34 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray31);
        double[][] doubleArray35 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray34);
        double[][] doubleArray36 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray34);
        double[][] doubleArray37 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray34);
        double[][] doubleArray38 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray37);
        java.lang.Class<?> wildcardClass39 = doubleArray38.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertNotNull(wildcardClass39);
    }

    @Test
    public void test2368() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2368");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[][] doubleArray5 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray4);
        double[][] doubleArray6 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray4);
        double[][] doubleArray7 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray4);
        double[][] doubleArray8 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray7);
        double[][] doubleArray9 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray8);
        double[][] doubleArray10 = new double[][] {};
        double[][] doubleArray11 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray10);
        double[][] doubleArray12 = new double[][] {};
        double[][] doubleArray13 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray12);
        double[][] doubleArray14 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray13);
        double[] doubleArray18 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray22 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray26 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray30 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray31 = new double[][] { doubleArray18, doubleArray22, doubleArray26, doubleArray30 };
        double[] doubleArray33 = new double[] { 1 };
        double[] doubleArray35 = new double[] { 1 };
        double[] doubleArray37 = new double[] { 1 };
        double[] doubleArray39 = new double[] { 1 };
        double[] doubleArray41 = new double[] { 1 };
        double[][] doubleArray42 = new double[][] { doubleArray33, doubleArray35, doubleArray37, doubleArray39, doubleArray41 };
        int[] intArray43 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray42, intArray43);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray31, intArray43);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray13, intArray43);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray11, intArray43);
        double[][] doubleArray48 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray11);
        double[][] doubleArray49 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray48);
        double[][] doubleArray50 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray48);
        double[][] doubleArray51 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray48);
        double[][] doubleArray52 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray48);
        double[][] doubleArray53 = new double[][] {};
        double[][] doubleArray54 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray53);
        int[] intArray55 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray54, intArray55);
        double[] doubleArray58 = new double[] { 1 };
        double[] doubleArray60 = new double[] { 1 };
        double[] doubleArray62 = new double[] { 1 };
        double[] doubleArray64 = new double[] { 1 };
        double[] doubleArray66 = new double[] { 1 };
        double[][] doubleArray67 = new double[][] { doubleArray58, doubleArray60, doubleArray62, doubleArray64, doubleArray66 };
        int[] intArray68 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray67, intArray68);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray54, intArray68);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray52, intArray68);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray8, intArray68);
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[]");
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray66), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[]");
    }

    @Test
    public void test2369() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2369");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray30 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray31 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray32 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray31);
        double[][] doubleArray33 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray32);
        double[] doubleArray40 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray47 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray54 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray61 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray62 = new double[][] { doubleArray40, doubleArray47, doubleArray54, doubleArray61 };
        double[][] doubleArray63 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray62);
        double[][] doubleArray64 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray62);
        double[][] doubleArray65 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray62);
        double[][] doubleArray66 = new double[][] {};
        double[][] doubleArray67 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray66);
        int[] intArray68 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray67, intArray68);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray65, intArray68);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray33, intArray68);
        double[][] doubleArray72 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray33);
        double[][] doubleArray73 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray33);
        double[][] doubleArray74 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray33);
        java.lang.Class<?> wildcardClass75 = doubleArray74.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[]");
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertNotNull(wildcardClass75);
    }

    @Test
    public void test2370() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2370");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray5 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray4);
        double[][] doubleArray6 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray4);
        double[][] doubleArray7 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray6);
        double[] doubleArray14 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray21 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray28 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray35 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray36 = new double[][] { doubleArray14, doubleArray21, doubleArray28, doubleArray35 };
        double[][] doubleArray37 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray36);
        double[][] doubleArray38 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray37);
        double[][] doubleArray39 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray37);
        double[][] doubleArray40 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray37);
        double[][] doubleArray41 = new double[][] {};
        double[][] doubleArray42 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray41);
        double[][] doubleArray43 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray41);
        double[][] doubleArray44 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray43);
        double[][] doubleArray45 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray43);
        double[][] doubleArray46 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray45);
        double[][] doubleArray47 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray46);
        double[][] doubleArray48 = new double[][] {};
        double[][] doubleArray49 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray48);
        int[] intArray50 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray49, intArray50);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray47, intArray50);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray37, intArray50);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray6, intArray50);
        java.lang.Class<?> wildcardClass55 = doubleArray6.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[]");
        org.junit.Assert.assertNotNull(wildcardClass55);
    }

    @Test
    public void test2371() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2371");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray30 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray31 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray32 = new double[][] {};
        double[][] doubleArray33 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray32);
        int[] intArray34 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray33, intArray34);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray31, intArray34);
        double[][] doubleArray37 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray31);
        double[][] doubleArray38 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray37);
        double[][] doubleArray39 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray38);
        double[][] doubleArray40 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray38);
        double[][] doubleArray41 = new double[][] {};
        double[][] doubleArray42 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray41);
        double[][] doubleArray43 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray41);
        double[][] doubleArray44 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray43);
        double[][] doubleArray45 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray43);
        double[][] doubleArray46 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray45);
        double[][] doubleArray47 = new double[][] {};
        double[][] doubleArray48 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray47);
        double[][] doubleArray49 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray47);
        double[][] doubleArray50 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray47);
        double[][] doubleArray51 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray50);
        double[][] doubleArray52 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray50);
        double[][] doubleArray53 = new double[][] {};
        double[][] doubleArray54 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray53);
        double[][] doubleArray55 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray54);
        double[][] doubleArray56 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray55);
        double[][] doubleArray57 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray56);
        double[][] doubleArray58 = null;
        double[][] doubleArray59 = new double[][] {};
        double[][] doubleArray60 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray59);
        double[][] doubleArray61 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray60);
        double[] doubleArray65 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray69 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray73 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray77 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray78 = new double[][] { doubleArray65, doubleArray69, doubleArray73, doubleArray77 };
        double[] doubleArray80 = new double[] { 1 };
        double[] doubleArray82 = new double[] { 1 };
        double[] doubleArray84 = new double[] { 1 };
        double[] doubleArray86 = new double[] { 1 };
        double[] doubleArray88 = new double[] { 1 };
        double[][] doubleArray89 = new double[][] { doubleArray80, doubleArray82, doubleArray84, doubleArray86, doubleArray88 };
        int[] intArray90 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray89, intArray90);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray78, intArray90);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray61, intArray90);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray58, intArray90);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray56, intArray90);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray52, intArray90);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray46, intArray90);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray40, intArray90);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray73), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray77), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray80), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray82), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray84), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray86), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray88), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray89);
        org.junit.Assert.assertNotNull(intArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray90), "[]");
    }

    @Test
    public void test2372() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2372");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[][] doubleArray5 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[][] doubleArray6 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[][] doubleArray7 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray6);
        double[][] doubleArray8 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray6);
        double[][] doubleArray9 = new double[][] {};
        double[][] doubleArray10 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray9);
        double[] doubleArray12 = new double[] { 1 };
        double[] doubleArray14 = new double[] { 1 };
        double[] doubleArray16 = new double[] { 1 };
        double[] doubleArray18 = new double[] { 1 };
        double[] doubleArray20 = new double[] { 1 };
        double[][] doubleArray21 = new double[][] { doubleArray12, doubleArray14, doubleArray16, doubleArray18, doubleArray20 };
        int[] intArray22 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray21, intArray22);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray9, intArray22);
        double[][] doubleArray25 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray9);
        double[][] doubleArray26 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray25);
        double[][] doubleArray27 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray26);
        double[][] doubleArray28 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray27);
        double[] doubleArray35 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray42 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray49 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray56 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray57 = new double[][] { doubleArray35, doubleArray42, doubleArray49, doubleArray56 };
        double[][] doubleArray58 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray57);
        double[][] doubleArray59 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray58);
        double[][] doubleArray60 = new double[][] {};
        double[][] doubleArray61 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray60);
        double[] doubleArray63 = new double[] { 1 };
        double[] doubleArray65 = new double[] { 1 };
        double[] doubleArray67 = new double[] { 1 };
        double[] doubleArray69 = new double[] { 1 };
        double[] doubleArray71 = new double[] { 1 };
        double[][] doubleArray72 = new double[][] { doubleArray63, doubleArray65, doubleArray67, doubleArray69, doubleArray71 };
        int[] intArray73 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray72, intArray73);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray60, intArray73);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray59, intArray73);
        double[][] doubleArray77 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray59);
        double[] doubleArray79 = new double[] { 1 };
        double[] doubleArray81 = new double[] { 1 };
        double[] doubleArray83 = new double[] { 1 };
        double[] doubleArray85 = new double[] { 1 };
        double[] doubleArray87 = new double[] { 1 };
        double[][] doubleArray88 = new double[][] { doubleArray79, doubleArray81, doubleArray83, doubleArray85, doubleArray87 };
        int[] intArray89 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray88, intArray89);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray77, intArray89);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray27, intArray89);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray6, intArray89);
        double[][] doubleArray94 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray6);
        java.lang.Class<?> wildcardClass95 = doubleArray6.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray71), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[]");
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray79), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray81), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray83), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray85), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray87), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray88);
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray89), "[]");
        org.junit.Assert.assertNotNull(doubleArray94);
        org.junit.Assert.assertNotNull(wildcardClass95);
    }

    @Test
    public void test2373() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2373");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[] doubleArray3 = new double[] { 1 };
        double[] doubleArray5 = new double[] { 1 };
        double[] doubleArray7 = new double[] { 1 };
        double[] doubleArray9 = new double[] { 1 };
        double[] doubleArray11 = new double[] { 1 };
        double[][] doubleArray12 = new double[][] { doubleArray3, doubleArray5, doubleArray7, doubleArray9, doubleArray11 };
        int[] intArray13 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray12, intArray13);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray0, intArray13);
        double[] doubleArray19 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray23 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray27 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray31 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray32 = new double[][] { doubleArray19, doubleArray23, doubleArray27, doubleArray31 };
        double[] doubleArray34 = new double[] { 1 };
        double[] doubleArray36 = new double[] { 1 };
        double[] doubleArray38 = new double[] { 1 };
        double[] doubleArray40 = new double[] { 1 };
        double[] doubleArray42 = new double[] { 1 };
        double[][] doubleArray43 = new double[][] { doubleArray34, doubleArray36, doubleArray38, doubleArray40, doubleArray42 };
        int[] intArray44 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray43, intArray44);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray32, intArray44);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray0, intArray44);
        double[][] doubleArray48 = new double[][] {};
        double[][] doubleArray49 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray48);
        double[] doubleArray51 = new double[] { 1 };
        double[] doubleArray53 = new double[] { 1 };
        double[] doubleArray55 = new double[] { 1 };
        double[] doubleArray57 = new double[] { 1 };
        double[] doubleArray59 = new double[] { 1 };
        double[][] doubleArray60 = new double[][] { doubleArray51, doubleArray53, doubleArray55, doubleArray57, doubleArray59 };
        int[] intArray61 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray60, intArray61);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray48, intArray61);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray0, intArray61);
        double[][] doubleArray65 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray66 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray67 = new double[][] {};
        double[][] doubleArray68 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray67);
        double[][] doubleArray69 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray67);
        double[] doubleArray71 = new double[] { 1 };
        double[] doubleArray73 = new double[] { 1 };
        double[] doubleArray75 = new double[] { 1 };
        double[] doubleArray77 = new double[] { 1 };
        double[] doubleArray79 = new double[] { 1 };
        double[][] doubleArray80 = new double[][] { doubleArray71, doubleArray73, doubleArray75, doubleArray77, doubleArray79 };
        int[] intArray81 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray80, intArray81);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray69, intArray81);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray0, intArray81);
        double[][] doubleArray85 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        java.lang.Class<?> wildcardClass86 = doubleArray85.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[]");
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray71), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray73), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray75), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray77), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray79), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray81), "[]");
        org.junit.Assert.assertNotNull(doubleArray85);
        org.junit.Assert.assertNotNull(wildcardClass86);
    }

    @Test
    public void test2374() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2374");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        int[] intArray2 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray1, intArray2);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray5 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray4);
        double[][] doubleArray6 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray4);
        double[][] doubleArray7 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray6);
        double[][] doubleArray8 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray6);
        java.lang.Class<?> wildcardClass9 = doubleArray8.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void test2375() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2375");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = new double[][] {};
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[] doubleArray5 = new double[] { 1 };
        double[] doubleArray7 = new double[] { 1 };
        double[] doubleArray9 = new double[] { 1 };
        double[] doubleArray11 = new double[] { 1 };
        double[] doubleArray13 = new double[] { 1 };
        double[][] doubleArray14 = new double[][] { doubleArray5, doubleArray7, doubleArray9, doubleArray11, doubleArray13 };
        int[] intArray15 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray14, intArray15);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray2, intArray15);
        double[] doubleArray21 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray25 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray29 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray33 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray34 = new double[][] { doubleArray21, doubleArray25, doubleArray29, doubleArray33 };
        double[] doubleArray36 = new double[] { 1 };
        double[] doubleArray38 = new double[] { 1 };
        double[] doubleArray40 = new double[] { 1 };
        double[] doubleArray42 = new double[] { 1 };
        double[] doubleArray44 = new double[] { 1 };
        double[][] doubleArray45 = new double[][] { doubleArray36, doubleArray38, doubleArray40, doubleArray42, doubleArray44 };
        int[] intArray46 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray45, intArray46);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray34, intArray46);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray2, intArray46);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray1, intArray46);
        double[][] doubleArray51 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray52 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray51);
        double[][] doubleArray53 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray51);
        double[][] doubleArray54 = new double[][] {};
        double[][] doubleArray55 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray54);
        double[] doubleArray57 = new double[] { 1 };
        double[] doubleArray59 = new double[] { 1 };
        double[] doubleArray61 = new double[] { 1 };
        double[] doubleArray63 = new double[] { 1 };
        double[] doubleArray65 = new double[] { 1 };
        double[][] doubleArray66 = new double[][] { doubleArray57, doubleArray59, doubleArray61, doubleArray63, doubleArray65 };
        int[] intArray67 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray66, intArray67);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray54, intArray67);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray51, intArray67);
        java.lang.Class<?> wildcardClass71 = intArray67.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[]");
        org.junit.Assert.assertNotNull(wildcardClass71);
    }

    @Test
    public void test2376() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2376");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray30 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray29);
        double[][] doubleArray31 = new double[][] {};
        double[][] doubleArray32 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray31);
        double[] doubleArray34 = new double[] { 1 };
        double[] doubleArray36 = new double[] { 1 };
        double[] doubleArray38 = new double[] { 1 };
        double[] doubleArray40 = new double[] { 1 };
        double[] doubleArray42 = new double[] { 1 };
        double[][] doubleArray43 = new double[][] { doubleArray34, doubleArray36, doubleArray38, doubleArray40, doubleArray42 };
        int[] intArray44 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray43, intArray44);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray31, intArray44);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray30, intArray44);
        double[][] doubleArray48 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        double[][] doubleArray49 = new double[][] {};
        double[][] doubleArray50 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray49);
        int[] intArray51 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray50, intArray51);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray48, intArray51);
        double[][] doubleArray54 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray48);
        double[][] doubleArray55 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray54);
        double[][] doubleArray56 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray54);
        double[][] doubleArray57 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray54);
        double[][] doubleArray58 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray54);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[]");
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertNotNull(doubleArray58);
    }

    @Test
    public void test2377() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2377");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray30 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray31 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray32 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray31);
        double[][] doubleArray33 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray32);
        double[][] doubleArray34 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray33);
        double[][] doubleArray35 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray33);
        double[][] doubleArray36 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray35);
        java.lang.Class<?> wildcardClass37 = doubleArray35.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertNotNull(wildcardClass37);
    }

    @Test
    public void test2378() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2378");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray30 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray31 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        double[][] doubleArray32 = new double[][] {};
        double[][] doubleArray33 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray32);
        double[][] doubleArray34 = new double[][] {};
        double[][] doubleArray35 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray34);
        double[] doubleArray37 = new double[] { 1 };
        double[] doubleArray39 = new double[] { 1 };
        double[] doubleArray41 = new double[] { 1 };
        double[] doubleArray43 = new double[] { 1 };
        double[] doubleArray45 = new double[] { 1 };
        double[][] doubleArray46 = new double[][] { doubleArray37, doubleArray39, doubleArray41, doubleArray43, doubleArray45 };
        int[] intArray47 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray46, intArray47);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray34, intArray47);
        double[] doubleArray53 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray57 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray61 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray65 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray66 = new double[][] { doubleArray53, doubleArray57, doubleArray61, doubleArray65 };
        double[] doubleArray68 = new double[] { 1 };
        double[] doubleArray70 = new double[] { 1 };
        double[] doubleArray72 = new double[] { 1 };
        double[] doubleArray74 = new double[] { 1 };
        double[] doubleArray76 = new double[] { 1 };
        double[][] doubleArray77 = new double[][] { doubleArray68, doubleArray70, doubleArray72, doubleArray74, doubleArray76 };
        int[] intArray78 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray77, intArray78);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray66, intArray78);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray34, intArray78);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray32, intArray78);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray31, intArray78);
        double[][] doubleArray84 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray31);
        double[][] doubleArray85 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray84);
        double[][] doubleArray86 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray84);
        double[][] doubleArray87 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray84);
        java.lang.Class<?> wildcardClass88 = doubleArray87.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[]");
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray70), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray74), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[]");
        org.junit.Assert.assertNotNull(doubleArray84);
        org.junit.Assert.assertNotNull(doubleArray85);
        org.junit.Assert.assertNotNull(doubleArray86);
        org.junit.Assert.assertNotNull(doubleArray87);
        org.junit.Assert.assertNotNull(wildcardClass88);
    }

    @Test
    public void test2379() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2379");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[] doubleArray31 = new double[] { 1 };
        double[] doubleArray33 = new double[] { 1 };
        double[] doubleArray35 = new double[] { 1 };
        double[] doubleArray37 = new double[] { 1 };
        double[] doubleArray39 = new double[] { 1 };
        double[][] doubleArray40 = new double[][] { doubleArray31, doubleArray33, doubleArray35, doubleArray37, doubleArray39 };
        int[] intArray41 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray40, intArray41);
        double[][] doubleArray43 = new double[][] {};
        double[][] doubleArray44 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray43);
        int[] intArray45 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray44, intArray45);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray40, intArray45);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray28, intArray45);
        double[][] doubleArray49 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray50 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray51 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray52 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray51);
        double[][] doubleArray53 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray51);
        double[][] doubleArray54 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray53);
        double[][] doubleArray55 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray54);
        double[][] doubleArray56 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray54);
        double[][] doubleArray57 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray56);
        double[][] doubleArray58 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray57);
        java.lang.Class<?> wildcardClass59 = doubleArray58.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertNotNull(wildcardClass59);
    }

    @Test
    public void test2380() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2380");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray5 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray6 = new double[][] {};
        double[][] doubleArray7 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray6);
        double[][] doubleArray8 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray6);
        double[][] doubleArray9 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray6);
        double[][] doubleArray10 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray9);
        double[] doubleArray17 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray24 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray31 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray38 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray39 = new double[][] { doubleArray17, doubleArray24, doubleArray31, doubleArray38 };
        double[][] doubleArray40 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray39);
        double[][] doubleArray41 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray40);
        double[][] doubleArray42 = new double[][] {};
        double[][] doubleArray43 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray42);
        double[] doubleArray45 = new double[] { 1 };
        double[] doubleArray47 = new double[] { 1 };
        double[] doubleArray49 = new double[] { 1 };
        double[] doubleArray51 = new double[] { 1 };
        double[] doubleArray53 = new double[] { 1 };
        double[][] doubleArray54 = new double[][] { doubleArray45, doubleArray47, doubleArray49, doubleArray51, doubleArray53 };
        int[] intArray55 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray54, intArray55);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray42, intArray55);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray41, intArray55);
        double[][] doubleArray59 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray41);
        double[] doubleArray61 = new double[] { 1 };
        double[] doubleArray63 = new double[] { 1 };
        double[] doubleArray65 = new double[] { 1 };
        double[] doubleArray67 = new double[] { 1 };
        double[] doubleArray69 = new double[] { 1 };
        double[][] doubleArray70 = new double[][] { doubleArray61, doubleArray63, doubleArray65, doubleArray67, doubleArray69 };
        int[] intArray71 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray70, intArray71);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray59, intArray71);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray9, intArray71);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray5, intArray71);
        java.lang.Class<?> wildcardClass76 = intArray71.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[]");
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[]");
        org.junit.Assert.assertNotNull(wildcardClass76);
    }

    @Test
    public void test2381() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2381");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray30 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray29);
        double[][] doubleArray31 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        double[][] doubleArray32 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray31);
        double[][] doubleArray33 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray32);
        double[][] doubleArray34 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray33);
        double[][] doubleArray35 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray34);
        double[][] doubleArray36 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray34);
        double[][] doubleArray37 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray36);
        java.lang.Class<?> wildcardClass38 = doubleArray36.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertNotNull(wildcardClass38);
    }

    @Test
    public void test2382() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2382");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[][] doubleArray5 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[][] doubleArray6 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[][] doubleArray7 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray6);
        double[][] doubleArray8 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray6);
        double[][] doubleArray9 = new double[][] {};
        double[][] doubleArray10 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray9);
        double[] doubleArray12 = new double[] { 1 };
        double[] doubleArray14 = new double[] { 1 };
        double[] doubleArray16 = new double[] { 1 };
        double[] doubleArray18 = new double[] { 1 };
        double[] doubleArray20 = new double[] { 1 };
        double[][] doubleArray21 = new double[][] { doubleArray12, doubleArray14, doubleArray16, doubleArray18, doubleArray20 };
        int[] intArray22 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray21, intArray22);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray9, intArray22);
        double[][] doubleArray25 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray9);
        double[][] doubleArray26 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray25);
        double[][] doubleArray27 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray26);
        double[][] doubleArray28 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray27);
        double[] doubleArray35 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray42 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray49 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray56 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray57 = new double[][] { doubleArray35, doubleArray42, doubleArray49, doubleArray56 };
        double[][] doubleArray58 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray57);
        double[][] doubleArray59 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray58);
        double[][] doubleArray60 = new double[][] {};
        double[][] doubleArray61 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray60);
        double[] doubleArray63 = new double[] { 1 };
        double[] doubleArray65 = new double[] { 1 };
        double[] doubleArray67 = new double[] { 1 };
        double[] doubleArray69 = new double[] { 1 };
        double[] doubleArray71 = new double[] { 1 };
        double[][] doubleArray72 = new double[][] { doubleArray63, doubleArray65, doubleArray67, doubleArray69, doubleArray71 };
        int[] intArray73 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray72, intArray73);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray60, intArray73);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray59, intArray73);
        double[][] doubleArray77 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray59);
        double[] doubleArray79 = new double[] { 1 };
        double[] doubleArray81 = new double[] { 1 };
        double[] doubleArray83 = new double[] { 1 };
        double[] doubleArray85 = new double[] { 1 };
        double[] doubleArray87 = new double[] { 1 };
        double[][] doubleArray88 = new double[][] { doubleArray79, doubleArray81, doubleArray83, doubleArray85, doubleArray87 };
        int[] intArray89 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray88, intArray89);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray77, intArray89);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray27, intArray89);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray6, intArray89);
        double[][] doubleArray94 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray6);
        double[][] doubleArray95 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray71), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[]");
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray79), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray81), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray83), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray85), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray87), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray88);
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray89), "[]");
        org.junit.Assert.assertNotNull(doubleArray94);
        org.junit.Assert.assertNotNull(doubleArray95);
    }

    @Test
    public void test2383() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2383");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray30 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray29);
        double[][] doubleArray31 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray29);
        double[][] doubleArray32 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray31);
        double[][] doubleArray33 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray32);
        double[][] doubleArray34 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray32);
        double[][] doubleArray35 = new double[][] {};
        double[][] doubleArray36 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray35);
        double[][] doubleArray37 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray35);
        double[][] doubleArray38 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray35);
        double[][] doubleArray39 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray38);
        double[] doubleArray41 = new double[] { 1 };
        double[] doubleArray43 = new double[] { 1 };
        double[] doubleArray45 = new double[] { 1 };
        double[] doubleArray47 = new double[] { 1 };
        double[] doubleArray49 = new double[] { 1 };
        double[][] doubleArray50 = new double[][] { doubleArray41, doubleArray43, doubleArray45, doubleArray47, doubleArray49 };
        int[] intArray51 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray50, intArray51);
        double[][] doubleArray53 = new double[][] {};
        double[][] doubleArray54 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray53);
        int[] intArray55 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray54, intArray55);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray50, intArray55);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray38, intArray55);
        double[][] doubleArray59 = new double[][] {};
        double[][] doubleArray60 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray59);
        double[][] doubleArray61 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray60);
        double[] doubleArray65 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray69 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray73 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray77 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray78 = new double[][] { doubleArray65, doubleArray69, doubleArray73, doubleArray77 };
        double[] doubleArray80 = new double[] { 1 };
        double[] doubleArray82 = new double[] { 1 };
        double[] doubleArray84 = new double[] { 1 };
        double[] doubleArray86 = new double[] { 1 };
        double[] doubleArray88 = new double[] { 1 };
        double[][] doubleArray89 = new double[][] { doubleArray80, doubleArray82, doubleArray84, doubleArray86, doubleArray88 };
        int[] intArray90 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray89, intArray90);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray78, intArray90);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray60, intArray90);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray38, intArray90);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray32, intArray90);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[]");
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[]");
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray73), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray77), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray80), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray82), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray84), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray86), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray88), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray89);
        org.junit.Assert.assertNotNull(intArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray90), "[]");
    }

    @Test
    public void test2384() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2384");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = new double[][] {};
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[] doubleArray5 = new double[] { 1 };
        double[] doubleArray7 = new double[] { 1 };
        double[] doubleArray9 = new double[] { 1 };
        double[] doubleArray11 = new double[] { 1 };
        double[] doubleArray13 = new double[] { 1 };
        double[][] doubleArray14 = new double[][] { doubleArray5, doubleArray7, doubleArray9, doubleArray11, doubleArray13 };
        int[] intArray15 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray14, intArray15);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray2, intArray15);
        double[] doubleArray21 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray25 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray29 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray33 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray34 = new double[][] { doubleArray21, doubleArray25, doubleArray29, doubleArray33 };
        double[] doubleArray36 = new double[] { 1 };
        double[] doubleArray38 = new double[] { 1 };
        double[] doubleArray40 = new double[] { 1 };
        double[] doubleArray42 = new double[] { 1 };
        double[] doubleArray44 = new double[] { 1 };
        double[][] doubleArray45 = new double[][] { doubleArray36, doubleArray38, doubleArray40, doubleArray42, doubleArray44 };
        int[] intArray46 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray45, intArray46);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray34, intArray46);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray2, intArray46);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray1, intArray46);
        double[][] doubleArray51 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray52 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray53 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray54 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray53);
        double[][] doubleArray55 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray54);
        java.lang.Class<?> wildcardClass56 = doubleArray55.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertNotNull(wildcardClass56);
    }

    @Test
    public void test2385() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2385");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray5 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray6 = new double[][] {};
        double[][] doubleArray7 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray6);
        double[][] doubleArray8 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray6);
        double[] doubleArray15 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray22 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray29 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray36 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray37 = new double[][] { doubleArray15, doubleArray22, doubleArray29, doubleArray36 };
        double[][] doubleArray38 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray37);
        double[][] doubleArray39 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray37);
        double[][] doubleArray40 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray37);
        double[][] doubleArray41 = new double[][] {};
        double[][] doubleArray42 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray41);
        int[] intArray43 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray42, intArray43);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray40, intArray43);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray8, intArray43);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray2, intArray43);
        double[][] doubleArray48 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        java.lang.Class<?> wildcardClass49 = doubleArray2.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertNotNull(wildcardClass49);
    }

    @Test
    public void test2386() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2386");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray5 = new double[][] {};
        double[][] doubleArray6 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray5);
        double[] doubleArray8 = new double[] { 1 };
        double[] doubleArray10 = new double[] { 1 };
        double[] doubleArray12 = new double[] { 1 };
        double[] doubleArray14 = new double[] { 1 };
        double[] doubleArray16 = new double[] { 1 };
        double[][] doubleArray17 = new double[][] { doubleArray8, doubleArray10, doubleArray12, doubleArray14, doubleArray16 };
        int[] intArray18 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray17, intArray18);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray5, intArray18);
        double[] doubleArray24 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray28 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray32 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray36 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray37 = new double[][] { doubleArray24, doubleArray28, doubleArray32, doubleArray36 };
        double[] doubleArray39 = new double[] { 1 };
        double[] doubleArray41 = new double[] { 1 };
        double[] doubleArray43 = new double[] { 1 };
        double[] doubleArray45 = new double[] { 1 };
        double[] doubleArray47 = new double[] { 1 };
        double[][] doubleArray48 = new double[][] { doubleArray39, doubleArray41, doubleArray43, doubleArray45, doubleArray47 };
        int[] intArray49 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray48, intArray49);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray37, intArray49);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray5, intArray49);
        double[] doubleArray54 = new double[] { 1 };
        double[] doubleArray56 = new double[] { 1 };
        double[] doubleArray58 = new double[] { 1 };
        double[] doubleArray60 = new double[] { 1 };
        double[] doubleArray62 = new double[] { 1 };
        double[][] doubleArray63 = new double[][] { doubleArray54, doubleArray56, doubleArray58, doubleArray60, doubleArray62 };
        int[] intArray64 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray63, intArray64);
        double[][] doubleArray66 = new double[][] {};
        double[][] doubleArray67 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray66);
        int[] intArray68 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray67, intArray68);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray63, intArray68);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray5, intArray68);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray0, intArray68);
        double[][] doubleArray73 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray74 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[]");
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[]");
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[]");
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[]");
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertNotNull(doubleArray74);
    }

    @Test
    public void test2387() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2387");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        int[] intArray2 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray1, intArray2);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray5 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray6 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray5);
        double[][] doubleArray7 = new double[][] {};
        double[][] doubleArray8 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray7);
        double[][] doubleArray9 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray8);
        double[][] doubleArray10 = new double[][] {};
        double[][] doubleArray11 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray10);
        double[][] doubleArray12 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray10);
        double[][] doubleArray13 = new double[][] {};
        double[][] doubleArray14 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray13);
        double[][] doubleArray15 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray14);
        double[][] doubleArray16 = new double[][] {};
        double[][] doubleArray17 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray16);
        double[][] doubleArray18 = new double[][] {};
        double[][] doubleArray19 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray18);
        double[] doubleArray21 = new double[] { 1 };
        double[] doubleArray23 = new double[] { 1 };
        double[] doubleArray25 = new double[] { 1 };
        double[] doubleArray27 = new double[] { 1 };
        double[] doubleArray29 = new double[] { 1 };
        double[][] doubleArray30 = new double[][] { doubleArray21, doubleArray23, doubleArray25, doubleArray27, doubleArray29 };
        int[] intArray31 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray30, intArray31);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray18, intArray31);
        double[] doubleArray37 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray41 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray45 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray49 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray50 = new double[][] { doubleArray37, doubleArray41, doubleArray45, doubleArray49 };
        double[] doubleArray52 = new double[] { 1 };
        double[] doubleArray54 = new double[] { 1 };
        double[] doubleArray56 = new double[] { 1 };
        double[] doubleArray58 = new double[] { 1 };
        double[] doubleArray60 = new double[] { 1 };
        double[][] doubleArray61 = new double[][] { doubleArray52, doubleArray54, doubleArray56, doubleArray58, doubleArray60 };
        int[] intArray62 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray61, intArray62);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray50, intArray62);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray18, intArray62);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray17, intArray62);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray15, intArray62);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray10, intArray62);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray9, intArray62);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray6, intArray62);
        double[][] doubleArray71 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray6);
        double[][] doubleArray72 = new double[][] {};
        double[][] doubleArray73 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray72);
        int[] intArray74 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray73, intArray74);
        double[][] doubleArray76 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray73);
        double[][] doubleArray77 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray76);
        double[][] doubleArray78 = new double[][] {};
        double[][] doubleArray79 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray78);
        int[] intArray80 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray79, intArray80);
        double[] doubleArray83 = new double[] { 1 };
        double[] doubleArray85 = new double[] { 1 };
        double[] doubleArray87 = new double[] { 1 };
        double[] doubleArray89 = new double[] { 1 };
        double[] doubleArray91 = new double[] { 1 };
        double[][] doubleArray92 = new double[][] { doubleArray83, doubleArray85, doubleArray87, doubleArray89, doubleArray91 };
        int[] intArray93 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray92, intArray93);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray79, intArray93);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray76, intArray93);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray6, intArray93);
        java.lang.Class<?> wildcardClass98 = intArray93.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[]");
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[]");
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[]");
        org.junit.Assert.assertNotNull(doubleArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray83), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray85), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray87), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray89), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray91), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray92);
        org.junit.Assert.assertNotNull(intArray93);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray93), "[]");
        org.junit.Assert.assertNotNull(wildcardClass98);
    }

    @Test
    public void test2388() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2388");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray30 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray31 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        double[][] doubleArray32 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        double[][] doubleArray33 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray32);
        double[][] doubleArray34 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray33);
        double[][] doubleArray35 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray34);
        double[][] doubleArray36 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray35);
        double[][] doubleArray37 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray35);
        double[][] doubleArray38 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray37);
        double[] doubleArray45 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray52 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray59 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray66 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray67 = new double[][] { doubleArray45, doubleArray52, doubleArray59, doubleArray66 };
        double[][] doubleArray68 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray67);
        double[][] doubleArray69 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray68);
        double[][] doubleArray70 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray68);
        double[][] doubleArray71 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray68);
        double[][] doubleArray72 = new double[][] {};
        double[][] doubleArray73 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray72);
        double[][] doubleArray74 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray72);
        double[][] doubleArray75 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray72);
        double[][] doubleArray76 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray75);
        double[] doubleArray78 = new double[] { 1 };
        double[] doubleArray80 = new double[] { 1 };
        double[] doubleArray82 = new double[] { 1 };
        double[] doubleArray84 = new double[] { 1 };
        double[] doubleArray86 = new double[] { 1 };
        double[][] doubleArray87 = new double[][] { doubleArray78, doubleArray80, doubleArray82, doubleArray84, doubleArray86 };
        int[] intArray88 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray87, intArray88);
        double[][] doubleArray90 = new double[][] {};
        double[][] doubleArray91 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray90);
        int[] intArray92 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray91, intArray92);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray87, intArray92);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray75, intArray92);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray71, intArray92);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray38, intArray92);
        double[][] doubleArray98 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray38);
        double[][] doubleArray99 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray38);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray66), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray78), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray80), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray82), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray84), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray86), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray87);
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray88), "[]");
        org.junit.Assert.assertNotNull(doubleArray90);
        org.junit.Assert.assertNotNull(doubleArray91);
        org.junit.Assert.assertNotNull(intArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray92), "[]");
        org.junit.Assert.assertNotNull(doubleArray98);
        org.junit.Assert.assertNotNull(doubleArray99);
    }

    @Test
    public void test2389() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2389");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[] doubleArray3 = new double[] { 1 };
        double[] doubleArray5 = new double[] { 1 };
        double[] doubleArray7 = new double[] { 1 };
        double[] doubleArray9 = new double[] { 1 };
        double[] doubleArray11 = new double[] { 1 };
        double[][] doubleArray12 = new double[][] { doubleArray3, doubleArray5, doubleArray7, doubleArray9, doubleArray11 };
        int[] intArray13 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray12, intArray13);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray0, intArray13);
        double[] doubleArray19 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray23 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray27 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray31 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray32 = new double[][] { doubleArray19, doubleArray23, doubleArray27, doubleArray31 };
        double[] doubleArray34 = new double[] { 1 };
        double[] doubleArray36 = new double[] { 1 };
        double[] doubleArray38 = new double[] { 1 };
        double[] doubleArray40 = new double[] { 1 };
        double[] doubleArray42 = new double[] { 1 };
        double[][] doubleArray43 = new double[][] { doubleArray34, doubleArray36, doubleArray38, doubleArray40, doubleArray42 };
        int[] intArray44 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray43, intArray44);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray32, intArray44);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray0, intArray44);
        double[] doubleArray49 = new double[] { 1 };
        double[] doubleArray51 = new double[] { 1 };
        double[] doubleArray53 = new double[] { 1 };
        double[] doubleArray55 = new double[] { 1 };
        double[] doubleArray57 = new double[] { 1 };
        double[][] doubleArray58 = new double[][] { doubleArray49, doubleArray51, doubleArray53, doubleArray55, doubleArray57 };
        int[] intArray59 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray58, intArray59);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray0, intArray59);
        double[][] doubleArray62 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray63 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray64 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray63);
        double[][] doubleArray65 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray64);
        double[][] doubleArray66 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray65);
        double[][] doubleArray67 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray65);
        java.lang.Class<?> wildcardClass68 = doubleArray67.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[]");
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertNotNull(wildcardClass68);
    }

    @Test
    public void test2390() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2390");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = new double[][] {};
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[] doubleArray8 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray12 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray16 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray20 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray21 = new double[][] { doubleArray8, doubleArray12, doubleArray16, doubleArray20 };
        double[] doubleArray23 = new double[] { 1 };
        double[] doubleArray25 = new double[] { 1 };
        double[] doubleArray27 = new double[] { 1 };
        double[] doubleArray29 = new double[] { 1 };
        double[] doubleArray31 = new double[] { 1 };
        double[][] doubleArray32 = new double[][] { doubleArray23, doubleArray25, doubleArray27, doubleArray29, doubleArray31 };
        int[] intArray33 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray32, intArray33);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray21, intArray33);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray3, intArray33);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray1, intArray33);
        double[][] doubleArray38 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray39 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray38);
        double[][] doubleArray40 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray38);
        double[][] doubleArray41 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray40);
        double[][] doubleArray42 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray41);
        double[][] doubleArray43 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray41);
        java.lang.Class<?> wildcardClass44 = doubleArray43.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(wildcardClass44);
    }

    @Test
    public void test2391() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2391");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray5 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray4);
        double[][] doubleArray6 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray4);
        double[][] doubleArray7 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray6);
        double[][] doubleArray8 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray6);
        double[] doubleArray15 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray22 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray29 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray36 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray37 = new double[][] { doubleArray15, doubleArray22, doubleArray29, doubleArray36 };
        double[][] doubleArray38 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray37);
        double[][] doubleArray39 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray38);
        double[][] doubleArray40 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray38);
        double[][] doubleArray41 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray40);
        double[][] doubleArray42 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray41);
        double[][] doubleArray43 = null;
        double[][] doubleArray44 = new double[][] {};
        double[][] doubleArray45 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray44);
        int[] intArray46 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray45, intArray46);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray43, intArray46);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray42, intArray46);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray6, intArray46);
        java.lang.Class<?> wildcardClass51 = doubleArray6.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[]");
        org.junit.Assert.assertNotNull(wildcardClass51);
    }

    @Test
    public void test2392() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2392");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray30 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray29);
        double[][] doubleArray31 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        double[][] doubleArray32 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        double[][] doubleArray33 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        double[][] doubleArray34 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        double[][] doubleArray35 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray34);
        double[][] doubleArray36 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray35);
        double[][] doubleArray37 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray36);
        double[][] doubleArray38 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray36);
        java.lang.Class<?> wildcardClass39 = doubleArray36.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertNotNull(wildcardClass39);
    }

    @Test
    public void test2393() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2393");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray3 = new double[][] {};
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[][] doubleArray5 = new double[][] {};
        double[][] doubleArray6 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray5);
        double[] doubleArray8 = new double[] { 1 };
        double[] doubleArray10 = new double[] { 1 };
        double[] doubleArray12 = new double[] { 1 };
        double[] doubleArray14 = new double[] { 1 };
        double[] doubleArray16 = new double[] { 1 };
        double[][] doubleArray17 = new double[][] { doubleArray8, doubleArray10, doubleArray12, doubleArray14, doubleArray16 };
        int[] intArray18 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray17, intArray18);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray5, intArray18);
        double[] doubleArray24 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray28 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray32 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray36 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray37 = new double[][] { doubleArray24, doubleArray28, doubleArray32, doubleArray36 };
        double[] doubleArray39 = new double[] { 1 };
        double[] doubleArray41 = new double[] { 1 };
        double[] doubleArray43 = new double[] { 1 };
        double[] doubleArray45 = new double[] { 1 };
        double[] doubleArray47 = new double[] { 1 };
        double[][] doubleArray48 = new double[][] { doubleArray39, doubleArray41, doubleArray43, doubleArray45, doubleArray47 };
        int[] intArray49 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray48, intArray49);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray37, intArray49);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray5, intArray49);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray4, intArray49);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray2, intArray49);
        double[][] doubleArray55 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray56 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray55);
        double[][] doubleArray57 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray55);
        double[][] doubleArray58 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray55);
        double[][] doubleArray59 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray58);
        double[][] doubleArray60 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray58);
        double[][] doubleArray61 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray60);
        java.lang.Class<?> wildcardClass62 = doubleArray60.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[]");
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[]");
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertNotNull(wildcardClass62);
    }

    @Test
    public void test2394() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2394");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray30 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray31 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        double[][] doubleArray32 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        double[][] doubleArray33 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray32);
        double[][] doubleArray34 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray33);
        double[][] doubleArray35 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray34);
        double[][] doubleArray36 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray35);
        double[][] doubleArray37 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray35);
        double[][] doubleArray38 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray37);
        double[][] doubleArray39 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray38);
        java.lang.Class<?> wildcardClass40 = doubleArray38.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertNotNull(wildcardClass40);
    }

    @Test
    public void test2395() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2395");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray3 = new double[][] {};
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[][] doubleArray5 = new double[][] {};
        double[][] doubleArray6 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray5);
        double[] doubleArray8 = new double[] { 1 };
        double[] doubleArray10 = new double[] { 1 };
        double[] doubleArray12 = new double[] { 1 };
        double[] doubleArray14 = new double[] { 1 };
        double[] doubleArray16 = new double[] { 1 };
        double[][] doubleArray17 = new double[][] { doubleArray8, doubleArray10, doubleArray12, doubleArray14, doubleArray16 };
        int[] intArray18 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray17, intArray18);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray5, intArray18);
        double[] doubleArray24 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray28 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray32 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray36 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray37 = new double[][] { doubleArray24, doubleArray28, doubleArray32, doubleArray36 };
        double[] doubleArray39 = new double[] { 1 };
        double[] doubleArray41 = new double[] { 1 };
        double[] doubleArray43 = new double[] { 1 };
        double[] doubleArray45 = new double[] { 1 };
        double[] doubleArray47 = new double[] { 1 };
        double[][] doubleArray48 = new double[][] { doubleArray39, doubleArray41, doubleArray43, doubleArray45, doubleArray47 };
        int[] intArray49 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray48, intArray49);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray37, intArray49);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray5, intArray49);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray4, intArray49);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray2, intArray49);
        double[][] doubleArray55 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray56 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray55);
        double[][] doubleArray57 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray55);
        double[][] doubleArray58 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray55);
        double[][] doubleArray59 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray55);
        double[][] doubleArray60 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray59);
        java.lang.Class<?> wildcardClass61 = doubleArray60.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[]");
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[]");
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertNotNull(wildcardClass61);
    }

    @Test
    public void test2396() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2396");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[] doubleArray6 = new double[] { 1 };
        double[] doubleArray8 = new double[] { 1 };
        double[] doubleArray10 = new double[] { 1 };
        double[] doubleArray12 = new double[] { 1 };
        double[] doubleArray14 = new double[] { 1 };
        double[][] doubleArray15 = new double[][] { doubleArray6, doubleArray8, doubleArray10, doubleArray12, doubleArray14 };
        int[] intArray16 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray15, intArray16);
        double[][] doubleArray18 = new double[][] {};
        double[][] doubleArray19 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray18);
        int[] intArray20 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray19, intArray20);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray15, intArray20);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray3, intArray20);
        double[][] doubleArray24 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[][] doubleArray25 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray24);
        java.lang.Class<?> wildcardClass26 = doubleArray24.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[]");
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertNotNull(wildcardClass26);
    }

    @Test
    public void test2397() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2397");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray5 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray4);
        double[][] doubleArray6 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray5);
        double[][] doubleArray7 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray7);
    }

    @Test
    public void test2398() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2398");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[] doubleArray6 = new double[] { 1 };
        double[] doubleArray8 = new double[] { 1 };
        double[] doubleArray10 = new double[] { 1 };
        double[] doubleArray12 = new double[] { 1 };
        double[] doubleArray14 = new double[] { 1 };
        double[][] doubleArray15 = new double[][] { doubleArray6, doubleArray8, doubleArray10, doubleArray12, doubleArray14 };
        int[] intArray16 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray15, intArray16);
        double[][] doubleArray18 = new double[][] {};
        double[][] doubleArray19 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray18);
        int[] intArray20 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray19, intArray20);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray15, intArray20);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray3, intArray20);
        double[][] doubleArray24 = new double[][] {};
        double[][] doubleArray25 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray24);
        double[][] doubleArray26 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray25);
        double[] doubleArray30 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray34 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray38 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray42 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray43 = new double[][] { doubleArray30, doubleArray34, doubleArray38, doubleArray42 };
        double[] doubleArray45 = new double[] { 1 };
        double[] doubleArray47 = new double[] { 1 };
        double[] doubleArray49 = new double[] { 1 };
        double[] doubleArray51 = new double[] { 1 };
        double[] doubleArray53 = new double[] { 1 };
        double[][] doubleArray54 = new double[][] { doubleArray45, doubleArray47, doubleArray49, doubleArray51, doubleArray53 };
        int[] intArray55 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray54, intArray55);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray43, intArray55);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray25, intArray55);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray3, intArray55);
        double[][] doubleArray60 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[][] doubleArray61 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray60);
        double[][] doubleArray62 = new double[][] {};
        double[][] doubleArray63 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray62);
        double[][] doubleArray64 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray62);
        double[][] doubleArray65 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray62);
        double[][] doubleArray66 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray65);
        double[][] doubleArray67 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray65);
        double[][] doubleArray68 = new double[][] {};
        double[][] doubleArray69 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray68);
        int[] intArray70 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray69, intArray70);
        double[] doubleArray73 = new double[] { 1 };
        double[] doubleArray75 = new double[] { 1 };
        double[] doubleArray77 = new double[] { 1 };
        double[] doubleArray79 = new double[] { 1 };
        double[] doubleArray81 = new double[] { 1 };
        double[][] doubleArray82 = new double[][] { doubleArray73, doubleArray75, doubleArray77, doubleArray79, doubleArray81 };
        int[] intArray83 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray82, intArray83);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray69, intArray83);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray67, intArray83);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray60, intArray83);
        double[][] doubleArray88 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray60);
        double[][] doubleArray89 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray88);
        java.lang.Class<?> wildcardClass90 = doubleArray89.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[]");
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[]");
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[]");
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray73), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray75), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray77), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray79), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray81), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray82);
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray83), "[]");
        org.junit.Assert.assertNotNull(doubleArray88);
        org.junit.Assert.assertNotNull(doubleArray89);
        org.junit.Assert.assertNotNull(wildcardClass90);
    }

    @Test
    public void test2399() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2399");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[] doubleArray3 = new double[] { 1 };
        double[] doubleArray5 = new double[] { 1 };
        double[] doubleArray7 = new double[] { 1 };
        double[] doubleArray9 = new double[] { 1 };
        double[] doubleArray11 = new double[] { 1 };
        double[][] doubleArray12 = new double[][] { doubleArray3, doubleArray5, doubleArray7, doubleArray9, doubleArray11 };
        int[] intArray13 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray12, intArray13);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray0, intArray13);
        double[] doubleArray19 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray23 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray27 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray31 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray32 = new double[][] { doubleArray19, doubleArray23, doubleArray27, doubleArray31 };
        double[] doubleArray34 = new double[] { 1 };
        double[] doubleArray36 = new double[] { 1 };
        double[] doubleArray38 = new double[] { 1 };
        double[] doubleArray40 = new double[] { 1 };
        double[] doubleArray42 = new double[] { 1 };
        double[][] doubleArray43 = new double[][] { doubleArray34, doubleArray36, doubleArray38, doubleArray40, doubleArray42 };
        int[] intArray44 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray43, intArray44);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray32, intArray44);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray0, intArray44);
        double[][] doubleArray48 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray49 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray48);
        double[][] doubleArray50 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray48);
        double[][] doubleArray51 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray48);
        java.lang.Class<?> wildcardClass52 = doubleArray48.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertNotNull(wildcardClass52);
    }

    @Test
    public void test2400() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2400");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[][] doubleArray5 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray4);
        double[][] doubleArray6 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray5);
        double[][] doubleArray7 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray6);
        double[][] doubleArray8 = new double[][] {};
        double[][] doubleArray9 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray8);
        double[][] doubleArray10 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray8);
        double[][] doubleArray11 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray10);
        double[][] doubleArray12 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray11);
        double[][] doubleArray13 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray11);
        double[][] doubleArray14 = new double[][] {};
        double[][] doubleArray15 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray14);
        double[][] doubleArray16 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray15);
        double[] doubleArray23 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray30 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray37 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray44 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray45 = new double[][] { doubleArray23, doubleArray30, doubleArray37, doubleArray44 };
        double[][] doubleArray46 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray45);
        double[] doubleArray48 = new double[] { 1 };
        double[] doubleArray50 = new double[] { 1 };
        double[] doubleArray52 = new double[] { 1 };
        double[] doubleArray54 = new double[] { 1 };
        double[] doubleArray56 = new double[] { 1 };
        double[][] doubleArray57 = new double[][] { doubleArray48, doubleArray50, doubleArray52, doubleArray54, doubleArray56 };
        int[] intArray58 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray57, intArray58);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray46, intArray58);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray15, intArray58);
        double[] doubleArray65 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray69 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray73 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray77 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray78 = new double[][] { doubleArray65, doubleArray69, doubleArray73, doubleArray77 };
        double[] doubleArray80 = new double[] { 1 };
        double[] doubleArray82 = new double[] { 1 };
        double[] doubleArray84 = new double[] { 1 };
        double[] doubleArray86 = new double[] { 1 };
        double[] doubleArray88 = new double[] { 1 };
        double[][] doubleArray89 = new double[][] { doubleArray80, doubleArray82, doubleArray84, doubleArray86, doubleArray88 };
        int[] intArray90 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray89, intArray90);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray78, intArray90);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray15, intArray90);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray11, intArray90);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray7, intArray90);
        double[][] doubleArray96 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray7);
        java.lang.Class<?> wildcardClass97 = doubleArray7.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[]");
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray73), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray77), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray80), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray82), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray84), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray86), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray88), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray89);
        org.junit.Assert.assertNotNull(intArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray90), "[]");
        org.junit.Assert.assertNotNull(doubleArray96);
        org.junit.Assert.assertNotNull(wildcardClass97);
    }

    @Test
    public void test2401() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2401");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = new double[][] {};
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[] doubleArray8 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray12 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray16 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray20 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray21 = new double[][] { doubleArray8, doubleArray12, doubleArray16, doubleArray20 };
        double[] doubleArray23 = new double[] { 1 };
        double[] doubleArray25 = new double[] { 1 };
        double[] doubleArray27 = new double[] { 1 };
        double[] doubleArray29 = new double[] { 1 };
        double[] doubleArray31 = new double[] { 1 };
        double[][] doubleArray32 = new double[][] { doubleArray23, doubleArray25, doubleArray27, doubleArray29, doubleArray31 };
        int[] intArray33 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray32, intArray33);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray21, intArray33);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray3, intArray33);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray1, intArray33);
        double[][] doubleArray38 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray39 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray38);
        double[][] doubleArray40 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray38);
        double[][] doubleArray41 = new double[][] {};
        double[][] doubleArray42 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray41);
        double[][] doubleArray43 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray41);
        double[][] doubleArray44 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray41);
        double[] doubleArray51 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray58 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray65 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray72 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray73 = new double[][] { doubleArray51, doubleArray58, doubleArray65, doubleArray72 };
        double[][] doubleArray74 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray73);
        double[][] doubleArray75 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray73);
        double[][] doubleArray76 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray73);
        double[][] doubleArray77 = new double[][] {};
        double[][] doubleArray78 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray77);
        int[] intArray79 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray78, intArray79);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray76, intArray79);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray44, intArray79);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray38, intArray79);
        double[][] doubleArray84 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray38);
        double[][] doubleArray85 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray84);
        double[][] doubleArray86 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray84);
        java.lang.Class<?> wildcardClass87 = doubleArray86.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray79), "[]");
        org.junit.Assert.assertNotNull(doubleArray84);
        org.junit.Assert.assertNotNull(doubleArray85);
        org.junit.Assert.assertNotNull(doubleArray86);
        org.junit.Assert.assertNotNull(wildcardClass87);
    }

    @Test
    public void test2402() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2402");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray5 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray4);
        double[][] doubleArray6 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray4);
        double[][] doubleArray7 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray4);
        double[][] doubleArray8 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray7);
        java.lang.Class<?> wildcardClass9 = doubleArray8.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void test2403() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2403");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[][] doubleArray5 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[][] doubleArray6 = new double[][] {};
        double[][] doubleArray7 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray6);
        int[] intArray8 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray7, intArray8);
        double[] doubleArray11 = new double[] { 1 };
        double[] doubleArray13 = new double[] { 1 };
        double[] doubleArray15 = new double[] { 1 };
        double[] doubleArray17 = new double[] { 1 };
        double[] doubleArray19 = new double[] { 1 };
        double[][] doubleArray20 = new double[][] { doubleArray11, doubleArray13, doubleArray15, doubleArray17, doubleArray19 };
        int[] intArray21 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray20, intArray21);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray7, intArray21);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray5, intArray21);
        double[][] doubleArray25 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray5);
        double[][] doubleArray26 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray5);
        java.lang.Class<?> wildcardClass27 = doubleArray26.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertNotNull(wildcardClass27);
    }

    @Test
    public void test2404() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2404");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray30 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray31 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray32 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray33 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray32);
        double[][] doubleArray34 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray33);
        java.lang.Class<?> wildcardClass35 = doubleArray34.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertNotNull(wildcardClass35);
    }

    @Test
    public void test2405() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2405");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray30 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray29);
        double[][] doubleArray31 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        double[][] doubleArray32 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray31);
        double[][] doubleArray33 = new double[][] {};
        double[][] doubleArray34 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray33);
        double[][] doubleArray35 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray34);
        double[][] doubleArray36 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray34);
        double[][] doubleArray37 = new double[][] {};
        double[][] doubleArray38 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray37);
        double[][] doubleArray39 = new double[][] {};
        double[][] doubleArray40 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray39);
        double[] doubleArray42 = new double[] { 1 };
        double[] doubleArray44 = new double[] { 1 };
        double[] doubleArray46 = new double[] { 1 };
        double[] doubleArray48 = new double[] { 1 };
        double[] doubleArray50 = new double[] { 1 };
        double[][] doubleArray51 = new double[][] { doubleArray42, doubleArray44, doubleArray46, doubleArray48, doubleArray50 };
        int[] intArray52 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray51, intArray52);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray39, intArray52);
        double[] doubleArray58 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray62 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray66 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray70 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray71 = new double[][] { doubleArray58, doubleArray62, doubleArray66, doubleArray70 };
        double[] doubleArray73 = new double[] { 1 };
        double[] doubleArray75 = new double[] { 1 };
        double[] doubleArray77 = new double[] { 1 };
        double[] doubleArray79 = new double[] { 1 };
        double[] doubleArray81 = new double[] { 1 };
        double[][] doubleArray82 = new double[][] { doubleArray73, doubleArray75, doubleArray77, doubleArray79, doubleArray81 };
        int[] intArray83 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray82, intArray83);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray71, intArray83);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray39, intArray83);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray37, intArray83);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray34, intArray83);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray32, intArray83);
        double[][] doubleArray90 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray32);
        java.lang.Class<?> wildcardClass91 = doubleArray32.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[]");
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray66), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray70), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray73), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray75), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray77), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray79), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray81), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray82);
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray83), "[]");
        org.junit.Assert.assertNotNull(doubleArray90);
        org.junit.Assert.assertNotNull(wildcardClass91);
    }

    @Test
    public void test2406() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2406");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[] doubleArray3 = new double[] { 1 };
        double[] doubleArray5 = new double[] { 1 };
        double[] doubleArray7 = new double[] { 1 };
        double[] doubleArray9 = new double[] { 1 };
        double[] doubleArray11 = new double[] { 1 };
        double[][] doubleArray12 = new double[][] { doubleArray3, doubleArray5, doubleArray7, doubleArray9, doubleArray11 };
        int[] intArray13 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray12, intArray13);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray0, intArray13);
        double[] doubleArray19 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray23 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray27 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray31 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray32 = new double[][] { doubleArray19, doubleArray23, doubleArray27, doubleArray31 };
        double[] doubleArray34 = new double[] { 1 };
        double[] doubleArray36 = new double[] { 1 };
        double[] doubleArray38 = new double[] { 1 };
        double[] doubleArray40 = new double[] { 1 };
        double[] doubleArray42 = new double[] { 1 };
        double[][] doubleArray43 = new double[][] { doubleArray34, doubleArray36, doubleArray38, doubleArray40, doubleArray42 };
        int[] intArray44 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray43, intArray44);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray32, intArray44);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray0, intArray44);
        double[] doubleArray49 = new double[] { 1 };
        double[] doubleArray51 = new double[] { 1 };
        double[] doubleArray53 = new double[] { 1 };
        double[] doubleArray55 = new double[] { 1 };
        double[] doubleArray57 = new double[] { 1 };
        double[][] doubleArray58 = new double[][] { doubleArray49, doubleArray51, doubleArray53, doubleArray55, doubleArray57 };
        int[] intArray59 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray58, intArray59);
        double[][] doubleArray61 = new double[][] {};
        double[][] doubleArray62 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray61);
        int[] intArray63 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray62, intArray63);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray58, intArray63);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray0, intArray63);
        double[][] doubleArray67 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray68 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray69 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray70 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray71 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray70);
        double[][] doubleArray72 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray70);
        double[][] doubleArray73 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray70);
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[]");
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertNotNull(doubleArray73);
    }

    @Test
    public void test2407() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2407");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray30 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray31 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[] doubleArray33 = new double[] { 1 };
        double[] doubleArray35 = new double[] { 1 };
        double[] doubleArray37 = new double[] { 1 };
        double[] doubleArray39 = new double[] { 1 };
        double[] doubleArray41 = new double[] { 1 };
        double[][] doubleArray42 = new double[][] { doubleArray33, doubleArray35, doubleArray37, doubleArray39, doubleArray41 };
        int[] intArray43 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray42, intArray43);
        double[] doubleArray51 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray58 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray65 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray72 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray73 = new double[][] { doubleArray51, doubleArray58, doubleArray65, doubleArray72 };
        double[][] doubleArray74 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray73);
        double[] doubleArray76 = new double[] { 1 };
        double[] doubleArray78 = new double[] { 1 };
        double[] doubleArray80 = new double[] { 1 };
        double[] doubleArray82 = new double[] { 1 };
        double[] doubleArray84 = new double[] { 1 };
        double[][] doubleArray85 = new double[][] { doubleArray76, doubleArray78, doubleArray80, doubleArray82, doubleArray84 };
        int[] intArray86 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray85, intArray86);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray74, intArray86);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray42, intArray86);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray31, intArray86);
        double[][] doubleArray91 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray31);
        double[][] doubleArray92 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray31);
        double[][] doubleArray93 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray92);
        double[][] doubleArray94 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray93);
        double[][] doubleArray95 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray93);
        java.lang.Class<?> wildcardClass96 = doubleArray93.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray78), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray80), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray82), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray84), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray85);
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray86), "[]");
        org.junit.Assert.assertNotNull(doubleArray91);
        org.junit.Assert.assertNotNull(doubleArray92);
        org.junit.Assert.assertNotNull(doubleArray93);
        org.junit.Assert.assertNotNull(doubleArray94);
        org.junit.Assert.assertNotNull(doubleArray95);
        org.junit.Assert.assertNotNull(wildcardClass96);
    }

    @Test
    public void test2408() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2408");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray5 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray4);
        double[][] doubleArray6 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray5);
        double[][] doubleArray7 = new double[][] {};
        double[][] doubleArray8 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray7);
        double[] doubleArray10 = new double[] { 1 };
        double[] doubleArray12 = new double[] { 1 };
        double[] doubleArray14 = new double[] { 1 };
        double[] doubleArray16 = new double[] { 1 };
        double[] doubleArray18 = new double[] { 1 };
        double[][] doubleArray19 = new double[][] { doubleArray10, doubleArray12, doubleArray14, doubleArray16, doubleArray18 };
        int[] intArray20 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray19, intArray20);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray7, intArray20);
        double[] doubleArray26 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray30 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray34 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray38 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray39 = new double[][] { doubleArray26, doubleArray30, doubleArray34, doubleArray38 };
        double[] doubleArray41 = new double[] { 1 };
        double[] doubleArray43 = new double[] { 1 };
        double[] doubleArray45 = new double[] { 1 };
        double[] doubleArray47 = new double[] { 1 };
        double[] doubleArray49 = new double[] { 1 };
        double[][] doubleArray50 = new double[][] { doubleArray41, doubleArray43, doubleArray45, doubleArray47, doubleArray49 };
        int[] intArray51 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray50, intArray51);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray39, intArray51);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray7, intArray51);
        double[] doubleArray56 = new double[] { 1 };
        double[] doubleArray58 = new double[] { 1 };
        double[] doubleArray60 = new double[] { 1 };
        double[] doubleArray62 = new double[] { 1 };
        double[] doubleArray64 = new double[] { 1 };
        double[][] doubleArray65 = new double[][] { doubleArray56, doubleArray58, doubleArray60, doubleArray62, doubleArray64 };
        int[] intArray66 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray65, intArray66);
        double[][] doubleArray68 = new double[][] {};
        double[][] doubleArray69 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray68);
        int[] intArray70 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray69, intArray70);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray65, intArray70);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray7, intArray70);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray5, intArray70);
        double[][] doubleArray75 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray5);
        double[][] doubleArray76 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray5);
        double[][] doubleArray77 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray76);
        double[][] doubleArray78 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray77);
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[]");
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[]");
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[]");
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[]");
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertNotNull(doubleArray78);
    }

    @Test
    public void test2409() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2409");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[] doubleArray3 = new double[] { 1 };
        double[] doubleArray5 = new double[] { 1 };
        double[] doubleArray7 = new double[] { 1 };
        double[] doubleArray9 = new double[] { 1 };
        double[] doubleArray11 = new double[] { 1 };
        double[][] doubleArray12 = new double[][] { doubleArray3, doubleArray5, doubleArray7, doubleArray9, doubleArray11 };
        int[] intArray13 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray12, intArray13);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray0, intArray13);
        double[][] doubleArray16 = new double[][] {};
        double[][] doubleArray17 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray16);
        double[][] doubleArray18 = new double[][] {};
        double[][] doubleArray19 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray18);
        double[] doubleArray21 = new double[] { 1 };
        double[] doubleArray23 = new double[] { 1 };
        double[] doubleArray25 = new double[] { 1 };
        double[] doubleArray27 = new double[] { 1 };
        double[] doubleArray29 = new double[] { 1 };
        double[][] doubleArray30 = new double[][] { doubleArray21, doubleArray23, doubleArray25, doubleArray27, doubleArray29 };
        int[] intArray31 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray30, intArray31);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray18, intArray31);
        double[] doubleArray37 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray41 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray45 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray49 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray50 = new double[][] { doubleArray37, doubleArray41, doubleArray45, doubleArray49 };
        double[] doubleArray52 = new double[] { 1 };
        double[] doubleArray54 = new double[] { 1 };
        double[] doubleArray56 = new double[] { 1 };
        double[] doubleArray58 = new double[] { 1 };
        double[] doubleArray60 = new double[] { 1 };
        double[][] doubleArray61 = new double[][] { doubleArray52, doubleArray54, doubleArray56, doubleArray58, doubleArray60 };
        int[] intArray62 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray61, intArray62);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray50, intArray62);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray18, intArray62);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray17, intArray62);
        double[] doubleArray68 = new double[] { 1 };
        double[] doubleArray70 = new double[] { 1 };
        double[] doubleArray72 = new double[] { 1 };
        double[] doubleArray74 = new double[] { 1 };
        double[] doubleArray76 = new double[] { 1 };
        double[][] doubleArray77 = new double[][] { doubleArray68, doubleArray70, doubleArray72, doubleArray74, doubleArray76 };
        int[] intArray78 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray77, intArray78);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray17, intArray78);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray0, intArray78);
        double[][] doubleArray82 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        java.lang.Class<?> wildcardClass83 = doubleArray82.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[]");
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray70), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray74), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[]");
        org.junit.Assert.assertNotNull(doubleArray82);
        org.junit.Assert.assertNotNull(wildcardClass83);
    }

    @Test
    public void test2410() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2410");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray30 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray29);
        double[][] doubleArray31 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        double[][] doubleArray32 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray31);
        double[][] doubleArray33 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray32);
        double[][] doubleArray34 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray32);
        double[][] doubleArray35 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray32);
        java.lang.Class<?> wildcardClass36 = doubleArray35.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertNotNull(wildcardClass36);
    }

    @Test
    public void test2411() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2411");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[] doubleArray31 = new double[] { 1 };
        double[] doubleArray33 = new double[] { 1 };
        double[] doubleArray35 = new double[] { 1 };
        double[] doubleArray37 = new double[] { 1 };
        double[] doubleArray39 = new double[] { 1 };
        double[][] doubleArray40 = new double[][] { doubleArray31, doubleArray33, doubleArray35, doubleArray37, doubleArray39 };
        int[] intArray41 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray40, intArray41);
        double[][] doubleArray43 = new double[][] {};
        double[][] doubleArray44 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray43);
        int[] intArray45 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray44, intArray45);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray40, intArray45);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray28, intArray45);
        double[][] doubleArray49 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray50 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray51 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray52 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray51);
        double[][] doubleArray53 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray51);
        double[][] doubleArray54 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray51);
        double[][] doubleArray55 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray54);
        double[][] doubleArray56 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray55);
        double[][] doubleArray57 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray55);
        double[][] doubleArray58 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray57);
        double[][] doubleArray59 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray57);
        java.lang.Class<?> wildcardClass60 = doubleArray59.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertNotNull(wildcardClass60);
    }

    @Test
    public void test2412() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2412");
        double[][] doubleArray0 = null;
        double[] doubleArray7 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray14 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray21 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray28 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray29 = new double[][] { doubleArray7, doubleArray14, doubleArray21, doubleArray28 };
        double[][] doubleArray30 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray29);
        double[][] doubleArray31 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        double[][] doubleArray32 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray31);
        double[][] doubleArray33 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray32);
        double[][] doubleArray34 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray33);
        double[][] doubleArray35 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray34);
        double[][] doubleArray36 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray34);
        double[][] doubleArray37 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray34);
        double[][] doubleArray38 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray37);
        double[][] doubleArray39 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray38);
        double[][] doubleArray40 = new double[][] {};
        double[][] doubleArray41 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray40);
        double[][] doubleArray42 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray40);
        double[][] doubleArray43 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray40);
        double[][] doubleArray44 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray40);
        double[][] doubleArray45 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray44);
        double[][] doubleArray46 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray45);
        double[][] doubleArray47 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray45);
        double[][] doubleArray48 = new double[][] {};
        double[][] doubleArray49 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray48);
        double[][] doubleArray50 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray48);
        double[][] doubleArray51 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray48);
        double[][] doubleArray52 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray48);
        double[][] doubleArray53 = new double[][] {};
        double[][] doubleArray54 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray53);
        double[][] doubleArray55 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray54);
        double[] doubleArray59 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray63 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray67 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray71 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray72 = new double[][] { doubleArray59, doubleArray63, doubleArray67, doubleArray71 };
        double[] doubleArray74 = new double[] { 1 };
        double[] doubleArray76 = new double[] { 1 };
        double[] doubleArray78 = new double[] { 1 };
        double[] doubleArray80 = new double[] { 1 };
        double[] doubleArray82 = new double[] { 1 };
        double[][] doubleArray83 = new double[][] { doubleArray74, doubleArray76, doubleArray78, doubleArray80, doubleArray82 };
        int[] intArray84 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray83, intArray84);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray72, intArray84);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray55, intArray84);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray48, intArray84);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray47, intArray84);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray38, intArray84);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray0, intArray84);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray71), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray74), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray78), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray80), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray82), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray83);
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray84), "[]");
    }

    @Test
    public void test2413() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2413");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray30 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray29);
        double[][] doubleArray31 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        double[][] doubleArray32 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        double[][] doubleArray33 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        double[][] doubleArray34 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        double[][] doubleArray35 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray34);
        double[][] doubleArray36 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray35);
        double[][] doubleArray37 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray35);
        double[][] doubleArray38 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray35);
        double[][] doubleArray39 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray35);
        double[][] doubleArray40 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray35);
        double[][] doubleArray41 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray35);
        java.lang.Class<?> wildcardClass42 = doubleArray41.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertNotNull(wildcardClass42);
    }

    @Test
    public void test2414() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2414");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[] doubleArray9 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray16 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray23 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray30 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray31 = new double[][] { doubleArray9, doubleArray16, doubleArray23, doubleArray30 };
        double[][] doubleArray32 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray31);
        double[][] doubleArray33 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray31);
        double[][] doubleArray34 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray31);
        double[][] doubleArray35 = new double[][] {};
        double[][] doubleArray36 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray35);
        int[] intArray37 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray36, intArray37);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray34, intArray37);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray2, intArray37);
        double[][] doubleArray41 = null;
        double[][] doubleArray42 = new double[][] {};
        double[][] doubleArray43 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray42);
        double[][] doubleArray44 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray43);
        double[] doubleArray48 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray52 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray56 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray60 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray61 = new double[][] { doubleArray48, doubleArray52, doubleArray56, doubleArray60 };
        double[] doubleArray63 = new double[] { 1 };
        double[] doubleArray65 = new double[] { 1 };
        double[] doubleArray67 = new double[] { 1 };
        double[] doubleArray69 = new double[] { 1 };
        double[] doubleArray71 = new double[] { 1 };
        double[][] doubleArray72 = new double[][] { doubleArray63, doubleArray65, doubleArray67, doubleArray69, doubleArray71 };
        int[] intArray73 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray72, intArray73);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray61, intArray73);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray44, intArray73);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray41, intArray73);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray2, intArray73);
        double[][] doubleArray79 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray80 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray81 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray82 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray81);
        double[][] doubleArray83 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray81);
        java.lang.Class<?> wildcardClass84 = doubleArray83.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray71), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[]");
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertNotNull(doubleArray81);
        org.junit.Assert.assertNotNull(doubleArray82);
        org.junit.Assert.assertNotNull(doubleArray83);
        org.junit.Assert.assertNotNull(wildcardClass84);
    }

    @Test
    public void test2415() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2415");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray30 = new double[][] {};
        double[][] doubleArray31 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        double[] doubleArray33 = new double[] { 1 };
        double[] doubleArray35 = new double[] { 1 };
        double[] doubleArray37 = new double[] { 1 };
        double[] doubleArray39 = new double[] { 1 };
        double[] doubleArray41 = new double[] { 1 };
        double[][] doubleArray42 = new double[][] { doubleArray33, doubleArray35, doubleArray37, doubleArray39, doubleArray41 };
        int[] intArray43 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray42, intArray43);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray30, intArray43);
        double[] doubleArray49 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray53 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray57 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray61 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray62 = new double[][] { doubleArray49, doubleArray53, doubleArray57, doubleArray61 };
        double[] doubleArray64 = new double[] { 1 };
        double[] doubleArray66 = new double[] { 1 };
        double[] doubleArray68 = new double[] { 1 };
        double[] doubleArray70 = new double[] { 1 };
        double[] doubleArray72 = new double[] { 1 };
        double[][] doubleArray73 = new double[][] { doubleArray64, doubleArray66, doubleArray68, doubleArray70, doubleArray72 };
        int[] intArray74 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray73, intArray74);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray62, intArray74);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray30, intArray74);
        double[][] doubleArray78 = new double[][] {};
        double[][] doubleArray79 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray78);
        double[] doubleArray81 = new double[] { 1 };
        double[] doubleArray83 = new double[] { 1 };
        double[] doubleArray85 = new double[] { 1 };
        double[] doubleArray87 = new double[] { 1 };
        double[] doubleArray89 = new double[] { 1 };
        double[][] doubleArray90 = new double[][] { doubleArray81, doubleArray83, doubleArray85, doubleArray87, doubleArray89 };
        int[] intArray91 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray90, intArray91);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray78, intArray91);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray30, intArray91);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray28, intArray91);
        double[][] doubleArray96 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray97 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray96);
        double[][] doubleArray98 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray97);
        java.lang.Class<?> wildcardClass99 = doubleArray98.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray66), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray70), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[]");
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertNotNull(doubleArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray81), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray83), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray85), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray87), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray89), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray90);
        org.junit.Assert.assertNotNull(intArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray91), "[]");
        org.junit.Assert.assertNotNull(doubleArray96);
        org.junit.Assert.assertNotNull(doubleArray97);
        org.junit.Assert.assertNotNull(doubleArray98);
        org.junit.Assert.assertNotNull(wildcardClass99);
    }

    @Test
    public void test2416() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2416");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[] doubleArray3 = new double[] { 1 };
        double[] doubleArray5 = new double[] { 1 };
        double[] doubleArray7 = new double[] { 1 };
        double[] doubleArray9 = new double[] { 1 };
        double[] doubleArray11 = new double[] { 1 };
        double[][] doubleArray12 = new double[][] { doubleArray3, doubleArray5, doubleArray7, doubleArray9, doubleArray11 };
        int[] intArray13 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray12, intArray13);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray0, intArray13);
        double[] doubleArray19 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray23 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray27 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray31 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray32 = new double[][] { doubleArray19, doubleArray23, doubleArray27, doubleArray31 };
        double[] doubleArray34 = new double[] { 1 };
        double[] doubleArray36 = new double[] { 1 };
        double[] doubleArray38 = new double[] { 1 };
        double[] doubleArray40 = new double[] { 1 };
        double[] doubleArray42 = new double[] { 1 };
        double[][] doubleArray43 = new double[][] { doubleArray34, doubleArray36, doubleArray38, doubleArray40, doubleArray42 };
        int[] intArray44 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray43, intArray44);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray32, intArray44);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray0, intArray44);
        double[] doubleArray49 = new double[] { 1 };
        double[] doubleArray51 = new double[] { 1 };
        double[] doubleArray53 = new double[] { 1 };
        double[] doubleArray55 = new double[] { 1 };
        double[] doubleArray57 = new double[] { 1 };
        double[][] doubleArray58 = new double[][] { doubleArray49, doubleArray51, doubleArray53, doubleArray55, doubleArray57 };
        int[] intArray59 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray58, intArray59);
        double[][] doubleArray61 = new double[][] {};
        double[][] doubleArray62 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray61);
        int[] intArray63 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray62, intArray63);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray58, intArray63);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray0, intArray63);
        double[][] doubleArray67 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray68 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray67);
        double[][] doubleArray69 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray67);
        double[][] doubleArray70 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray67);
        double[][] doubleArray71 = new double[][] {};
        double[][] doubleArray72 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray71);
        double[][] doubleArray73 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray71);
        double[][] doubleArray74 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray71);
        double[][] doubleArray75 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray71);
        double[][] doubleArray76 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray75);
        double[][] doubleArray77 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray75);
        double[][] doubleArray78 = new double[][] {};
        double[][] doubleArray79 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray78);
        int[] intArray80 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray79, intArray80);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray77, intArray80);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray70, intArray80);
        double[][] doubleArray84 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray70);
        java.lang.Class<?> wildcardClass85 = doubleArray70.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[]");
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[]");
        org.junit.Assert.assertNotNull(doubleArray84);
        org.junit.Assert.assertNotNull(wildcardClass85);
    }

    @Test
    public void test2417() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2417");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray30 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray29);
        double[][] doubleArray31 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        double[][] doubleArray32 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        double[][] doubleArray33 = new double[][] {};
        double[][] doubleArray34 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray33);
        double[] doubleArray36 = new double[] { 1 };
        double[] doubleArray38 = new double[] { 1 };
        double[] doubleArray40 = new double[] { 1 };
        double[] doubleArray42 = new double[] { 1 };
        double[] doubleArray44 = new double[] { 1 };
        double[][] doubleArray45 = new double[][] { doubleArray36, doubleArray38, doubleArray40, doubleArray42, doubleArray44 };
        int[] intArray46 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray45, intArray46);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray33, intArray46);
        double[] doubleArray52 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray56 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray60 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray64 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray65 = new double[][] { doubleArray52, doubleArray56, doubleArray60, doubleArray64 };
        double[] doubleArray67 = new double[] { 1 };
        double[] doubleArray69 = new double[] { 1 };
        double[] doubleArray71 = new double[] { 1 };
        double[] doubleArray73 = new double[] { 1 };
        double[] doubleArray75 = new double[] { 1 };
        double[][] doubleArray76 = new double[][] { doubleArray67, doubleArray69, doubleArray71, doubleArray73, doubleArray75 };
        int[] intArray77 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray76, intArray77);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray65, intArray77);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray33, intArray77);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray32, intArray77);
        double[][] doubleArray82 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray32);
        double[][] doubleArray83 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray32);
        double[][] doubleArray84 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray32);
        double[][] doubleArray85 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray84);
        double[][] doubleArray86 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray84);
        double[][] doubleArray87 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray84);
        double[][] doubleArray88 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray84);
        java.lang.Class<?> wildcardClass89 = doubleArray84.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[]");
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray71), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray73), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray75), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray77), "[]");
        org.junit.Assert.assertNotNull(doubleArray82);
        org.junit.Assert.assertNotNull(doubleArray83);
        org.junit.Assert.assertNotNull(doubleArray84);
        org.junit.Assert.assertNotNull(doubleArray85);
        org.junit.Assert.assertNotNull(doubleArray86);
        org.junit.Assert.assertNotNull(doubleArray87);
        org.junit.Assert.assertNotNull(doubleArray88);
        org.junit.Assert.assertNotNull(wildcardClass89);
    }

    @Test
    public void test2418() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2418");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[][] doubleArray5 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray4);
        double[][] doubleArray6 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray5);
        double[][] doubleArray7 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray6);
        double[][] doubleArray8 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray7);
        double[][] doubleArray9 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray7);
        double[] doubleArray16 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray23 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray30 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray37 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray38 = new double[][] { doubleArray16, doubleArray23, doubleArray30, doubleArray37 };
        double[][] doubleArray39 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray38);
        double[][] doubleArray40 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray39);
        double[][] doubleArray41 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray40);
        double[][] doubleArray42 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray40);
        double[][] doubleArray43 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray40);
        double[][] doubleArray44 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray40);
        double[][] doubleArray45 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray44);
        double[][] doubleArray46 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray45);
        double[][] doubleArray47 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray45);
        double[][] doubleArray48 = new double[][] {};
        double[][] doubleArray49 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray48);
        double[][] doubleArray50 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray49);
        double[] doubleArray54 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray58 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray62 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray66 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray67 = new double[][] { doubleArray54, doubleArray58, doubleArray62, doubleArray66 };
        double[] doubleArray69 = new double[] { 1 };
        double[] doubleArray71 = new double[] { 1 };
        double[] doubleArray73 = new double[] { 1 };
        double[] doubleArray75 = new double[] { 1 };
        double[] doubleArray77 = new double[] { 1 };
        double[][] doubleArray78 = new double[][] { doubleArray69, doubleArray71, doubleArray73, doubleArray75, doubleArray77 };
        int[] intArray79 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray78, intArray79);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray67, intArray79);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray49, intArray79);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray47, intArray79);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray7, intArray79);
        java.lang.Class<?> wildcardClass85 = doubleArray7.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray66), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray71), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray73), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray75), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray77), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray79), "[]");
        org.junit.Assert.assertNotNull(wildcardClass85);
    }

    @Test
    public void test2419() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2419");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[] doubleArray3 = new double[] { 1 };
        double[] doubleArray5 = new double[] { 1 };
        double[] doubleArray7 = new double[] { 1 };
        double[] doubleArray9 = new double[] { 1 };
        double[] doubleArray11 = new double[] { 1 };
        double[][] doubleArray12 = new double[][] { doubleArray3, doubleArray5, doubleArray7, doubleArray9, doubleArray11 };
        int[] intArray13 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray12, intArray13);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray0, intArray13);
        double[][] doubleArray16 = new double[][] {};
        double[][] doubleArray17 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray16);
        double[][] doubleArray18 = new double[][] {};
        double[][] doubleArray19 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray18);
        double[] doubleArray21 = new double[] { 1 };
        double[] doubleArray23 = new double[] { 1 };
        double[] doubleArray25 = new double[] { 1 };
        double[] doubleArray27 = new double[] { 1 };
        double[] doubleArray29 = new double[] { 1 };
        double[][] doubleArray30 = new double[][] { doubleArray21, doubleArray23, doubleArray25, doubleArray27, doubleArray29 };
        int[] intArray31 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray30, intArray31);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray18, intArray31);
        double[] doubleArray37 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray41 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray45 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray49 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray50 = new double[][] { doubleArray37, doubleArray41, doubleArray45, doubleArray49 };
        double[] doubleArray52 = new double[] { 1 };
        double[] doubleArray54 = new double[] { 1 };
        double[] doubleArray56 = new double[] { 1 };
        double[] doubleArray58 = new double[] { 1 };
        double[] doubleArray60 = new double[] { 1 };
        double[][] doubleArray61 = new double[][] { doubleArray52, doubleArray54, doubleArray56, doubleArray58, doubleArray60 };
        int[] intArray62 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray61, intArray62);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray50, intArray62);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray18, intArray62);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray17, intArray62);
        double[] doubleArray68 = new double[] { 1 };
        double[] doubleArray70 = new double[] { 1 };
        double[] doubleArray72 = new double[] { 1 };
        double[] doubleArray74 = new double[] { 1 };
        double[] doubleArray76 = new double[] { 1 };
        double[][] doubleArray77 = new double[][] { doubleArray68, doubleArray70, doubleArray72, doubleArray74, doubleArray76 };
        int[] intArray78 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray77, intArray78);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray17, intArray78);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray0, intArray78);
        double[][] doubleArray82 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray83 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray84 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray85 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray84);
        double[][] doubleArray86 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray84);
        double[][] doubleArray87 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray84);
        java.lang.Class<?> wildcardClass88 = doubleArray87.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[]");
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray70), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray74), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[]");
        org.junit.Assert.assertNotNull(doubleArray82);
        org.junit.Assert.assertNotNull(doubleArray83);
        org.junit.Assert.assertNotNull(doubleArray84);
        org.junit.Assert.assertNotNull(doubleArray85);
        org.junit.Assert.assertNotNull(doubleArray86);
        org.junit.Assert.assertNotNull(doubleArray87);
        org.junit.Assert.assertNotNull(wildcardClass88);
    }

    @Test
    public void test2420() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2420");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[][] doubleArray5 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[][] doubleArray6 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray5);
        double[][] doubleArray7 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray5);
        double[][] doubleArray8 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertNotNull(doubleArray8);
    }

    @Test
    public void test2421() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2421");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        int[] intArray2 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray1, intArray2);
        double[] doubleArray5 = new double[] { 1 };
        double[] doubleArray7 = new double[] { 1 };
        double[] doubleArray9 = new double[] { 1 };
        double[] doubleArray11 = new double[] { 1 };
        double[] doubleArray13 = new double[] { 1 };
        double[][] doubleArray14 = new double[][] { doubleArray5, doubleArray7, doubleArray9, doubleArray11, doubleArray13 };
        int[] intArray15 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray14, intArray15);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray1, intArray15);
        double[][] doubleArray18 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray19 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray18);
        double[][] doubleArray20 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray19);
        double[][] doubleArray21 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray20);
        double[][] doubleArray22 = new double[][] {};
        double[][] doubleArray23 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray22);
        double[][] doubleArray24 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray22);
        double[][] doubleArray25 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray22);
        double[][] doubleArray26 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray25);
        double[][] doubleArray27 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray25);
        double[][] doubleArray28 = new double[][] {};
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[] doubleArray31 = new double[] { 1 };
        double[] doubleArray33 = new double[] { 1 };
        double[] doubleArray35 = new double[] { 1 };
        double[] doubleArray37 = new double[] { 1 };
        double[] doubleArray39 = new double[] { 1 };
        double[][] doubleArray40 = new double[][] { doubleArray31, doubleArray33, doubleArray35, doubleArray37, doubleArray39 };
        int[] intArray41 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray40, intArray41);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray28, intArray41);
        double[][] doubleArray44 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[] doubleArray51 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray58 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray65 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray72 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray73 = new double[][] { doubleArray51, doubleArray58, doubleArray65, doubleArray72 };
        double[][] doubleArray74 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray73);
        double[] doubleArray76 = new double[] { 1 };
        double[] doubleArray78 = new double[] { 1 };
        double[] doubleArray80 = new double[] { 1 };
        double[] doubleArray82 = new double[] { 1 };
        double[] doubleArray84 = new double[] { 1 };
        double[][] doubleArray85 = new double[][] { doubleArray76, doubleArray78, doubleArray80, doubleArray82, doubleArray84 };
        int[] intArray86 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray85, intArray86);
        double[][] doubleArray88 = new double[][] {};
        double[][] doubleArray89 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray88);
        int[] intArray90 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray89, intArray90);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray85, intArray90);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray73, intArray90);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray44, intArray90);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray27, intArray90);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray20, intArray90);
        java.lang.Class<?> wildcardClass97 = intArray90.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray78), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray80), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray82), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray84), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray85);
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray86), "[]");
        org.junit.Assert.assertNotNull(doubleArray88);
        org.junit.Assert.assertNotNull(doubleArray89);
        org.junit.Assert.assertNotNull(intArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray90), "[]");
        org.junit.Assert.assertNotNull(wildcardClass97);
    }

    @Test
    public void test2422() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2422");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray30 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray29);
        double[][] doubleArray31 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        double[][] doubleArray32 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        double[][] doubleArray33 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        double[][] doubleArray34 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray33);
        double[][] doubleArray35 = new double[][] {};
        double[][] doubleArray36 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray35);
        double[][] doubleArray37 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray35);
        double[][] doubleArray38 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray35);
        double[] doubleArray45 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray52 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray59 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray66 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray67 = new double[][] { doubleArray45, doubleArray52, doubleArray59, doubleArray66 };
        double[][] doubleArray68 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray67);
        double[][] doubleArray69 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray67);
        double[][] doubleArray70 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray67);
        double[][] doubleArray71 = new double[][] {};
        double[][] doubleArray72 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray71);
        int[] intArray73 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray72, intArray73);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray70, intArray73);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray38, intArray73);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray34, intArray73);
        double[][] doubleArray78 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray34);
        java.lang.Class<?> wildcardClass79 = doubleArray34.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray66), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[]");
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertNotNull(wildcardClass79);
    }

    @Test
    public void test2423() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2423");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[][] doubleArray5 = new double[][] {};
        double[][] doubleArray6 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray5);
        double[][] doubleArray7 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray6);
        double[][] doubleArray8 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray7);
        double[][] doubleArray9 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray7);
        double[][] doubleArray10 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray7);
        double[][] doubleArray11 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray7);
        double[] doubleArray13 = new double[] { 1 };
        double[] doubleArray15 = new double[] { 1 };
        double[] doubleArray17 = new double[] { 1 };
        double[] doubleArray19 = new double[] { 1 };
        double[] doubleArray21 = new double[] { 1 };
        double[][] doubleArray22 = new double[][] { doubleArray13, doubleArray15, doubleArray17, doubleArray19, doubleArray21 };
        int[] intArray23 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray22, intArray23);
        double[] doubleArray31 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray38 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray45 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray52 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray53 = new double[][] { doubleArray31, doubleArray38, doubleArray45, doubleArray52 };
        double[][] doubleArray54 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray53);
        double[] doubleArray56 = new double[] { 1 };
        double[] doubleArray58 = new double[] { 1 };
        double[] doubleArray60 = new double[] { 1 };
        double[] doubleArray62 = new double[] { 1 };
        double[] doubleArray64 = new double[] { 1 };
        double[][] doubleArray65 = new double[][] { doubleArray56, doubleArray58, doubleArray60, doubleArray62, doubleArray64 };
        int[] intArray66 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray65, intArray66);
        double[][] doubleArray68 = new double[][] {};
        double[][] doubleArray69 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray68);
        int[] intArray70 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray69, intArray70);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray65, intArray70);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray53, intArray70);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray22, intArray70);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray11, intArray70);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray4, intArray70);
        java.lang.Class<?> wildcardClass77 = doubleArray4.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[]");
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[]");
        org.junit.Assert.assertNotNull(wildcardClass77);
    }

    @Test
    public void test2424() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2424");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = new double[][] {};
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[] doubleArray8 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray12 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray16 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray20 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray21 = new double[][] { doubleArray8, doubleArray12, doubleArray16, doubleArray20 };
        double[] doubleArray23 = new double[] { 1 };
        double[] doubleArray25 = new double[] { 1 };
        double[] doubleArray27 = new double[] { 1 };
        double[] doubleArray29 = new double[] { 1 };
        double[] doubleArray31 = new double[] { 1 };
        double[][] doubleArray32 = new double[][] { doubleArray23, doubleArray25, doubleArray27, doubleArray29, doubleArray31 };
        int[] intArray33 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray32, intArray33);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray21, intArray33);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray3, intArray33);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray1, intArray33);
        double[][] doubleArray38 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray39 = new double[][] {};
        double[][] doubleArray40 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray39);
        double[][] doubleArray41 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray39);
        double[][] doubleArray42 = new double[][] {};
        double[][] doubleArray43 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray42);
        double[][] doubleArray44 = new double[][] {};
        double[][] doubleArray45 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray44);
        double[] doubleArray47 = new double[] { 1 };
        double[] doubleArray49 = new double[] { 1 };
        double[] doubleArray51 = new double[] { 1 };
        double[] doubleArray53 = new double[] { 1 };
        double[] doubleArray55 = new double[] { 1 };
        double[][] doubleArray56 = new double[][] { doubleArray47, doubleArray49, doubleArray51, doubleArray53, doubleArray55 };
        int[] intArray57 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray56, intArray57);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray44, intArray57);
        double[] doubleArray63 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray67 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray71 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray75 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray76 = new double[][] { doubleArray63, doubleArray67, doubleArray71, doubleArray75 };
        double[] doubleArray78 = new double[] { 1 };
        double[] doubleArray80 = new double[] { 1 };
        double[] doubleArray82 = new double[] { 1 };
        double[] doubleArray84 = new double[] { 1 };
        double[] doubleArray86 = new double[] { 1 };
        double[][] doubleArray87 = new double[][] { doubleArray78, doubleArray80, doubleArray82, doubleArray84, doubleArray86 };
        int[] intArray88 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray87, intArray88);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray76, intArray88);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray44, intArray88);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray42, intArray88);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray39, intArray88);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray38, intArray88);
        double[][] doubleArray95 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray38);
        java.lang.Class<?> wildcardClass96 = doubleArray95.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[]");
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray71), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray75), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray78), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray80), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray82), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray84), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray86), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray87);
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray88), "[]");
        org.junit.Assert.assertNotNull(doubleArray95);
        org.junit.Assert.assertNotNull(wildcardClass96);
    }

    @Test
    public void test2425() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2425");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = new double[][] {};
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[] doubleArray8 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray12 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray16 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray20 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray21 = new double[][] { doubleArray8, doubleArray12, doubleArray16, doubleArray20 };
        double[] doubleArray23 = new double[] { 1 };
        double[] doubleArray25 = new double[] { 1 };
        double[] doubleArray27 = new double[] { 1 };
        double[] doubleArray29 = new double[] { 1 };
        double[] doubleArray31 = new double[] { 1 };
        double[][] doubleArray32 = new double[][] { doubleArray23, doubleArray25, doubleArray27, doubleArray29, doubleArray31 };
        int[] intArray33 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray32, intArray33);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray21, intArray33);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray3, intArray33);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray1, intArray33);
        double[][] doubleArray38 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray39 = new double[][] {};
        double[][] doubleArray40 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray39);
        double[] doubleArray42 = new double[] { 1 };
        double[] doubleArray44 = new double[] { 1 };
        double[] doubleArray46 = new double[] { 1 };
        double[] doubleArray48 = new double[] { 1 };
        double[] doubleArray50 = new double[] { 1 };
        double[][] doubleArray51 = new double[][] { doubleArray42, doubleArray44, doubleArray46, doubleArray48, doubleArray50 };
        int[] intArray52 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray51, intArray52);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray39, intArray52);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray1, intArray52);
        double[][] doubleArray56 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray57 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray56);
        double[][] doubleArray58 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray56);
        double[][] doubleArray59 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray58);
        double[][] doubleArray60 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray58);
        double[][] doubleArray61 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray60);
        java.lang.Class<?> wildcardClass62 = doubleArray60.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[]");
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertNotNull(wildcardClass62);
    }

    @Test
    public void test2426() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2426");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray30 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray29);
        double[][] doubleArray31 = new double[][] {};
        double[][] doubleArray32 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray31);
        double[] doubleArray34 = new double[] { 1 };
        double[] doubleArray36 = new double[] { 1 };
        double[] doubleArray38 = new double[] { 1 };
        double[] doubleArray40 = new double[] { 1 };
        double[] doubleArray42 = new double[] { 1 };
        double[][] doubleArray43 = new double[][] { doubleArray34, doubleArray36, doubleArray38, doubleArray40, doubleArray42 };
        int[] intArray44 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray43, intArray44);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray31, intArray44);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray30, intArray44);
        double[][] doubleArray48 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        double[][] doubleArray49 = new double[][] {};
        double[][] doubleArray50 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray49);
        int[] intArray51 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray50, intArray51);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray48, intArray51);
        double[][] doubleArray54 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray48);
        double[][] doubleArray55 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray54);
        double[][] doubleArray56 = new double[][] {};
        double[][] doubleArray57 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray56);
        double[][] doubleArray58 = new double[][] {};
        double[][] doubleArray59 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray58);
        double[][] doubleArray60 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray59);
        double[] doubleArray64 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray68 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray72 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray76 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray77 = new double[][] { doubleArray64, doubleArray68, doubleArray72, doubleArray76 };
        double[] doubleArray79 = new double[] { 1 };
        double[] doubleArray81 = new double[] { 1 };
        double[] doubleArray83 = new double[] { 1 };
        double[] doubleArray85 = new double[] { 1 };
        double[] doubleArray87 = new double[] { 1 };
        double[][] doubleArray88 = new double[][] { doubleArray79, doubleArray81, doubleArray83, doubleArray85, doubleArray87 };
        int[] intArray89 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray88, intArray89);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray77, intArray89);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray59, intArray89);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray57, intArray89);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray54, intArray89);
        double[][] doubleArray95 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray54);
        double[][] doubleArray96 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray95);
        int[] intArray97 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray96, intArray97);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[]");
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray79), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray81), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray83), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray85), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray87), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray88);
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray89), "[]");
        org.junit.Assert.assertNotNull(doubleArray95);
        org.junit.Assert.assertNotNull(doubleArray96);
    }

    @Test
    public void test2427() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2427");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[] doubleArray6 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray10 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray14 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray18 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray19 = new double[][] { doubleArray6, doubleArray10, doubleArray14, doubleArray18 };
        double[] doubleArray21 = new double[] { 1 };
        double[] doubleArray23 = new double[] { 1 };
        double[] doubleArray25 = new double[] { 1 };
        double[] doubleArray27 = new double[] { 1 };
        double[] doubleArray29 = new double[] { 1 };
        double[][] doubleArray30 = new double[][] { doubleArray21, doubleArray23, doubleArray25, doubleArray27, doubleArray29 };
        int[] intArray31 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray30, intArray31);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray19, intArray31);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray1, intArray31);
        double[][] doubleArray35 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray36 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray35);
        java.lang.Class<?> wildcardClass37 = doubleArray35.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertNotNull(wildcardClass37);
    }

    @Test
    public void test2428() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2428");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[] doubleArray3 = new double[] { 1 };
        double[] doubleArray5 = new double[] { 1 };
        double[] doubleArray7 = new double[] { 1 };
        double[] doubleArray9 = new double[] { 1 };
        double[] doubleArray11 = new double[] { 1 };
        double[][] doubleArray12 = new double[][] { doubleArray3, doubleArray5, doubleArray7, doubleArray9, doubleArray11 };
        int[] intArray13 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray12, intArray13);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray0, intArray13);
        double[][] doubleArray16 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray17 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray16);
        double[][] doubleArray18 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray17);
        double[][] doubleArray19 = new double[][] {};
        double[][] doubleArray20 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray19);
        double[][] doubleArray21 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray19);
        double[][] doubleArray22 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray21);
        double[][] doubleArray23 = null;
        double[][] doubleArray24 = new double[][] {};
        double[][] doubleArray25 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray24);
        double[][] doubleArray26 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray25);
        double[] doubleArray30 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray34 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray38 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray42 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray43 = new double[][] { doubleArray30, doubleArray34, doubleArray38, doubleArray42 };
        double[] doubleArray45 = new double[] { 1 };
        double[] doubleArray47 = new double[] { 1 };
        double[] doubleArray49 = new double[] { 1 };
        double[] doubleArray51 = new double[] { 1 };
        double[] doubleArray53 = new double[] { 1 };
        double[][] doubleArray54 = new double[][] { doubleArray45, doubleArray47, doubleArray49, doubleArray51, doubleArray53 };
        int[] intArray55 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray54, intArray55);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray43, intArray55);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray26, intArray55);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray23, intArray55);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray22, intArray55);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray17, intArray55);
        double[][] doubleArray62 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray17);
        double[][] doubleArray63 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray17);
        double[][] doubleArray64 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray17);
        double[][] doubleArray65 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray64);
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[]");
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertNotNull(doubleArray65);
    }

    @Test
    public void test2429() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2429");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray30 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray31 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        double[][] doubleArray32 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray31);
        double[][] doubleArray33 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray32);
        java.lang.Class<?> wildcardClass34 = doubleArray33.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertNotNull(wildcardClass34);
    }

    @Test
    public void test2430() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2430");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[] doubleArray4 = new double[] { 1 };
        double[] doubleArray6 = new double[] { 1 };
        double[] doubleArray8 = new double[] { 1 };
        double[] doubleArray10 = new double[] { 1 };
        double[] doubleArray12 = new double[] { 1 };
        double[][] doubleArray13 = new double[][] { doubleArray4, doubleArray6, doubleArray8, doubleArray10, doubleArray12 };
        int[] intArray14 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray13, intArray14);
        double[] doubleArray22 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray29 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray36 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray43 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray44 = new double[][] { doubleArray22, doubleArray29, doubleArray36, doubleArray43 };
        double[][] doubleArray45 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray44);
        double[] doubleArray47 = new double[] { 1 };
        double[] doubleArray49 = new double[] { 1 };
        double[] doubleArray51 = new double[] { 1 };
        double[] doubleArray53 = new double[] { 1 };
        double[] doubleArray55 = new double[] { 1 };
        double[][] doubleArray56 = new double[][] { doubleArray47, doubleArray49, doubleArray51, doubleArray53, doubleArray55 };
        int[] intArray57 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray56, intArray57);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray45, intArray57);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray13, intArray57);
        double[] doubleArray62 = new double[] { 1 };
        double[] doubleArray64 = new double[] { 1 };
        double[] doubleArray66 = new double[] { 1 };
        double[] doubleArray68 = new double[] { 1 };
        double[] doubleArray70 = new double[] { 1 };
        double[][] doubleArray71 = new double[][] { doubleArray62, doubleArray64, doubleArray66, doubleArray68, doubleArray70 };
        int[] intArray72 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray71, intArray72);
        double[][] doubleArray74 = new double[][] {};
        double[][] doubleArray75 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray74);
        int[] intArray76 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray75, intArray76);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray71, intArray76);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray13, intArray76);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray2, intArray76);
        double[][] doubleArray81 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray82 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray83 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray84 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray83);
        java.lang.Class<?> wildcardClass85 = doubleArray84.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[]");
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[]");
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray66), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray70), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[]");
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[]");
        org.junit.Assert.assertNotNull(doubleArray81);
        org.junit.Assert.assertNotNull(doubleArray82);
        org.junit.Assert.assertNotNull(doubleArray83);
        org.junit.Assert.assertNotNull(doubleArray84);
        org.junit.Assert.assertNotNull(wildcardClass85);
    }

    @Test
    public void test2431() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2431");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[] doubleArray4 = new double[] { 1 };
        double[] doubleArray6 = new double[] { 1 };
        double[] doubleArray8 = new double[] { 1 };
        double[] doubleArray10 = new double[] { 1 };
        double[] doubleArray12 = new double[] { 1 };
        double[][] doubleArray13 = new double[][] { doubleArray4, doubleArray6, doubleArray8, doubleArray10, doubleArray12 };
        int[] intArray14 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray13, intArray14);
        double[] doubleArray22 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray29 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray36 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray43 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray44 = new double[][] { doubleArray22, doubleArray29, doubleArray36, doubleArray43 };
        double[][] doubleArray45 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray44);
        double[] doubleArray47 = new double[] { 1 };
        double[] doubleArray49 = new double[] { 1 };
        double[] doubleArray51 = new double[] { 1 };
        double[] doubleArray53 = new double[] { 1 };
        double[] doubleArray55 = new double[] { 1 };
        double[][] doubleArray56 = new double[][] { doubleArray47, doubleArray49, doubleArray51, doubleArray53, doubleArray55 };
        int[] intArray57 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray56, intArray57);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray45, intArray57);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray13, intArray57);
        double[] doubleArray62 = new double[] { 1 };
        double[] doubleArray64 = new double[] { 1 };
        double[] doubleArray66 = new double[] { 1 };
        double[] doubleArray68 = new double[] { 1 };
        double[] doubleArray70 = new double[] { 1 };
        double[][] doubleArray71 = new double[][] { doubleArray62, doubleArray64, doubleArray66, doubleArray68, doubleArray70 };
        int[] intArray72 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray71, intArray72);
        double[][] doubleArray74 = new double[][] {};
        double[][] doubleArray75 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray74);
        int[] intArray76 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray75, intArray76);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray71, intArray76);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray13, intArray76);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray2, intArray76);
        double[][] doubleArray81 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray82 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray83 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray84 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray83);
        java.lang.Class<?> wildcardClass85 = doubleArray83.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[]");
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[]");
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray66), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray70), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[]");
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[]");
        org.junit.Assert.assertNotNull(doubleArray81);
        org.junit.Assert.assertNotNull(doubleArray82);
        org.junit.Assert.assertNotNull(doubleArray83);
        org.junit.Assert.assertNotNull(doubleArray84);
        org.junit.Assert.assertNotNull(wildcardClass85);
    }

    @Test
    public void test2432() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2432");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray4 = new double[][] {};
        double[][] doubleArray5 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray4);
        double[] doubleArray7 = new double[] { 1 };
        double[] doubleArray9 = new double[] { 1 };
        double[] doubleArray11 = new double[] { 1 };
        double[] doubleArray13 = new double[] { 1 };
        double[] doubleArray15 = new double[] { 1 };
        double[][] doubleArray16 = new double[][] { doubleArray7, doubleArray9, doubleArray11, doubleArray13, doubleArray15 };
        int[] intArray17 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray16, intArray17);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray4, intArray17);
        double[] doubleArray23 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray27 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray31 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray35 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray36 = new double[][] { doubleArray23, doubleArray27, doubleArray31, doubleArray35 };
        double[] doubleArray38 = new double[] { 1 };
        double[] doubleArray40 = new double[] { 1 };
        double[] doubleArray42 = new double[] { 1 };
        double[] doubleArray44 = new double[] { 1 };
        double[] doubleArray46 = new double[] { 1 };
        double[][] doubleArray47 = new double[][] { doubleArray38, doubleArray40, doubleArray42, doubleArray44, doubleArray46 };
        int[] intArray48 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray47, intArray48);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray36, intArray48);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray4, intArray48);
        double[] doubleArray53 = new double[] { 1 };
        double[] doubleArray55 = new double[] { 1 };
        double[] doubleArray57 = new double[] { 1 };
        double[] doubleArray59 = new double[] { 1 };
        double[] doubleArray61 = new double[] { 1 };
        double[][] doubleArray62 = new double[][] { doubleArray53, doubleArray55, doubleArray57, doubleArray59, doubleArray61 };
        int[] intArray63 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray62, intArray63);
        double[][] doubleArray65 = new double[][] {};
        double[][] doubleArray66 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray65);
        int[] intArray67 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray66, intArray67);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray62, intArray67);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray4, intArray67);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray3, intArray67);
        double[][] doubleArray72 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[][] doubleArray73 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray72);
        java.lang.Class<?> wildcardClass74 = doubleArray73.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[]");
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[]");
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[]");
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertNotNull(wildcardClass74);
    }

    @Test
    public void test2433() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2433");
        double[][] doubleArray0 = null;
        double[][] doubleArray1 = null;
        double[] doubleArray8 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray15 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray22 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray29 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray30 = new double[][] { doubleArray8, doubleArray15, doubleArray22, doubleArray29 };
        double[][] doubleArray31 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        double[] doubleArray33 = new double[] { 1 };
        double[] doubleArray35 = new double[] { 1 };
        double[] doubleArray37 = new double[] { 1 };
        double[] doubleArray39 = new double[] { 1 };
        double[] doubleArray41 = new double[] { 1 };
        double[][] doubleArray42 = new double[][] { doubleArray33, doubleArray35, doubleArray37, doubleArray39, doubleArray41 };
        int[] intArray43 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray42, intArray43);
        double[][] doubleArray45 = new double[][] {};
        double[][] doubleArray46 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray45);
        int[] intArray47 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray46, intArray47);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray42, intArray47);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray30, intArray47);
        double[][] doubleArray51 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        double[][] doubleArray52 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray51);
        double[][] doubleArray53 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray51);
        double[][] doubleArray54 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray53);
        double[] doubleArray61 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray68 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray75 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray82 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray83 = new double[][] { doubleArray61, doubleArray68, doubleArray75, doubleArray82 };
        double[][] doubleArray84 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray83);
        double[][] doubleArray85 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray83);
        double[][] doubleArray86 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray83);
        double[][] doubleArray87 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray86);
        double[][] doubleArray88 = new double[][] {};
        double[][] doubleArray89 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray88);
        int[] intArray90 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray89, intArray90);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray87, intArray90);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray54, intArray90);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray1, intArray90);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray0, intArray90);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[]");
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray75), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray82), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray83);
        org.junit.Assert.assertNotNull(doubleArray84);
        org.junit.Assert.assertNotNull(doubleArray85);
        org.junit.Assert.assertNotNull(doubleArray86);
        org.junit.Assert.assertNotNull(doubleArray87);
        org.junit.Assert.assertNotNull(doubleArray88);
        org.junit.Assert.assertNotNull(doubleArray89);
        org.junit.Assert.assertNotNull(intArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray90), "[]");
    }

    @Test
    public void test2434() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2434");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = new double[][] {};
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[] doubleArray5 = new double[] { 1 };
        double[] doubleArray7 = new double[] { 1 };
        double[] doubleArray9 = new double[] { 1 };
        double[] doubleArray11 = new double[] { 1 };
        double[] doubleArray13 = new double[] { 1 };
        double[][] doubleArray14 = new double[][] { doubleArray5, doubleArray7, doubleArray9, doubleArray11, doubleArray13 };
        int[] intArray15 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray14, intArray15);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray2, intArray15);
        double[] doubleArray21 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray25 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray29 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray33 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray34 = new double[][] { doubleArray21, doubleArray25, doubleArray29, doubleArray33 };
        double[] doubleArray36 = new double[] { 1 };
        double[] doubleArray38 = new double[] { 1 };
        double[] doubleArray40 = new double[] { 1 };
        double[] doubleArray42 = new double[] { 1 };
        double[] doubleArray44 = new double[] { 1 };
        double[][] doubleArray45 = new double[][] { doubleArray36, doubleArray38, doubleArray40, doubleArray42, doubleArray44 };
        int[] intArray46 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray45, intArray46);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray34, intArray46);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray2, intArray46);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray1, intArray46);
        double[][] doubleArray51 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray52 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray51);
        double[][] doubleArray53 = new double[][] {};
        double[][] doubleArray54 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray53);
        int[] intArray55 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray54, intArray55);
        double[] doubleArray58 = new double[] { 1 };
        double[] doubleArray60 = new double[] { 1 };
        double[] doubleArray62 = new double[] { 1 };
        double[] doubleArray64 = new double[] { 1 };
        double[] doubleArray66 = new double[] { 1 };
        double[][] doubleArray67 = new double[][] { doubleArray58, doubleArray60, doubleArray62, doubleArray64, doubleArray66 };
        int[] intArray68 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray67, intArray68);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray54, intArray68);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray52, intArray68);
        double[][] doubleArray72 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray52);
        java.lang.Class<?> wildcardClass73 = doubleArray52.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[]");
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray66), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[]");
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertNotNull(wildcardClass73);
    }

    @Test
    public void test2435() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2435");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray5 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray6 = null;
        double[][] doubleArray7 = null;
        double[][] doubleArray8 = null;
        double[][] doubleArray9 = new double[][] {};
        double[][] doubleArray10 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray9);
        double[][] doubleArray11 = new double[][] {};
        double[][] doubleArray12 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray11);
        double[][] doubleArray13 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray12);
        double[] doubleArray17 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray21 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray25 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray29 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray30 = new double[][] { doubleArray17, doubleArray21, doubleArray25, doubleArray29 };
        double[] doubleArray32 = new double[] { 1 };
        double[] doubleArray34 = new double[] { 1 };
        double[] doubleArray36 = new double[] { 1 };
        double[] doubleArray38 = new double[] { 1 };
        double[] doubleArray40 = new double[] { 1 };
        double[][] doubleArray41 = new double[][] { doubleArray32, doubleArray34, doubleArray36, doubleArray38, doubleArray40 };
        int[] intArray42 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray41, intArray42);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray30, intArray42);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray12, intArray42);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray10, intArray42);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray8, intArray42);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray7, intArray42);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray6, intArray42);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray5, intArray42);
        java.lang.Class<?> wildcardClass51 = intArray42.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[]");
        org.junit.Assert.assertNotNull(wildcardClass51);
    }

    @Test
    public void test2436() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2436");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray5 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray4);
        double[][] doubleArray6 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray4);
        java.lang.Class<?> wildcardClass7 = doubleArray6.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(wildcardClass7);
    }

    @Test
    public void test2437() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2437");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray30 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray31 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray32 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray33 = new double[][] {};
        double[][] doubleArray34 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray33);
        double[][] doubleArray35 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray34);
        double[] doubleArray39 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray43 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray47 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray51 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray52 = new double[][] { doubleArray39, doubleArray43, doubleArray47, doubleArray51 };
        double[] doubleArray54 = new double[] { 1 };
        double[] doubleArray56 = new double[] { 1 };
        double[] doubleArray58 = new double[] { 1 };
        double[] doubleArray60 = new double[] { 1 };
        double[] doubleArray62 = new double[] { 1 };
        double[][] doubleArray63 = new double[][] { doubleArray54, doubleArray56, doubleArray58, doubleArray60, doubleArray62 };
        int[] intArray64 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray63, intArray64);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray52, intArray64);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray35, intArray64);
        double[][] doubleArray68 = null;
        double[] doubleArray70 = new double[] { 1 };
        double[] doubleArray72 = new double[] { 1 };
        double[] doubleArray74 = new double[] { 1 };
        double[] doubleArray76 = new double[] { 1 };
        double[] doubleArray78 = new double[] { 1 };
        double[][] doubleArray79 = new double[][] { doubleArray70, doubleArray72, doubleArray74, doubleArray76, doubleArray78 };
        int[] intArray80 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray79, intArray80);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray68, intArray80);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray35, intArray80);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray28, intArray80);
        double[][] doubleArray85 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray86 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray85);
        double[][] doubleArray87 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray85);
        double[][] doubleArray88 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray87);
        java.lang.Class<?> wildcardClass89 = doubleArray87.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[]");
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray70), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray74), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray78), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[]");
        org.junit.Assert.assertNotNull(doubleArray85);
        org.junit.Assert.assertNotNull(doubleArray86);
        org.junit.Assert.assertNotNull(doubleArray87);
        org.junit.Assert.assertNotNull(doubleArray88);
        org.junit.Assert.assertNotNull(wildcardClass89);
    }

    @Test
    public void test2438() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2438");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray30 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray31 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        double[][] doubleArray32 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        double[][] doubleArray33 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray32);
        double[][] doubleArray34 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray33);
        double[][] doubleArray35 = new double[][] {};
        double[][] doubleArray36 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray35);
        double[][] doubleArray37 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray36);
        double[][] doubleArray38 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray36);
        double[][] doubleArray39 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray36);
        double[][] doubleArray40 = new double[][] {};
        double[][] doubleArray41 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray40);
        double[][] doubleArray42 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray40);
        double[][] doubleArray43 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray40);
        double[][] doubleArray44 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray40);
        double[][] doubleArray45 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray44);
        double[][] doubleArray46 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray44);
        double[][] doubleArray47 = new double[][] {};
        double[][] doubleArray48 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray47);
        int[] intArray49 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray48, intArray49);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray46, intArray49);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray36, intArray49);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray34, intArray49);
        double[][] doubleArray54 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray34);
        double[][] doubleArray55 = new double[][] {};
        double[][] doubleArray56 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray55);
        double[][] doubleArray57 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray55);
        double[][] doubleArray58 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray55);
        double[][] doubleArray59 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray58);
        double[] doubleArray61 = new double[] { 1 };
        double[] doubleArray63 = new double[] { 1 };
        double[] doubleArray65 = new double[] { 1 };
        double[] doubleArray67 = new double[] { 1 };
        double[] doubleArray69 = new double[] { 1 };
        double[][] doubleArray70 = new double[][] { doubleArray61, doubleArray63, doubleArray65, doubleArray67, doubleArray69 };
        int[] intArray71 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray70, intArray71);
        double[][] doubleArray73 = new double[][] {};
        double[][] doubleArray74 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray73);
        int[] intArray75 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray74, intArray75);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray70, intArray75);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray58, intArray75);
        double[][] doubleArray79 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray58);
        double[][] doubleArray80 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray79);
        double[][] doubleArray81 = null;
        double[][] doubleArray82 = new double[][] {};
        double[][] doubleArray83 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray82);
        int[] intArray84 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray83, intArray84);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray81, intArray84);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray80, intArray84);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray54, intArray84);
        double[][] doubleArray89 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray54);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[]");
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[]");
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[]");
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertNotNull(doubleArray82);
        org.junit.Assert.assertNotNull(doubleArray83);
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray84), "[]");
        org.junit.Assert.assertNotNull(doubleArray89);
    }

    @Test
    public void test2439() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2439");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray5 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray6 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[] doubleArray8 = new double[] { 1 };
        double[] doubleArray10 = new double[] { 1 };
        double[] doubleArray12 = new double[] { 1 };
        double[] doubleArray14 = new double[] { 1 };
        double[] doubleArray16 = new double[] { 1 };
        double[][] doubleArray17 = new double[][] { doubleArray8, doubleArray10, doubleArray12, doubleArray14, doubleArray16 };
        int[] intArray18 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray17, intArray18);
        double[] doubleArray26 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray33 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray40 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray47 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray48 = new double[][] { doubleArray26, doubleArray33, doubleArray40, doubleArray47 };
        double[][] doubleArray49 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray48);
        double[] doubleArray51 = new double[] { 1 };
        double[] doubleArray53 = new double[] { 1 };
        double[] doubleArray55 = new double[] { 1 };
        double[] doubleArray57 = new double[] { 1 };
        double[] doubleArray59 = new double[] { 1 };
        double[][] doubleArray60 = new double[][] { doubleArray51, doubleArray53, doubleArray55, doubleArray57, doubleArray59 };
        int[] intArray61 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray60, intArray61);
        double[][] doubleArray63 = new double[][] {};
        double[][] doubleArray64 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray63);
        int[] intArray65 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray64, intArray65);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray60, intArray65);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray48, intArray65);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray17, intArray65);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray6, intArray65);
        double[][] doubleArray71 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray6);
        double[][] doubleArray72 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray71);
        double[][] doubleArray73 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray71);
        java.lang.Class<?> wildcardClass74 = doubleArray71.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[]");
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[]");
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[]");
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertNotNull(wildcardClass74);
    }

    @Test
    public void test2440() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2440");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = new double[][] {};
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[] doubleArray8 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray12 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray16 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray20 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray21 = new double[][] { doubleArray8, doubleArray12, doubleArray16, doubleArray20 };
        double[] doubleArray23 = new double[] { 1 };
        double[] doubleArray25 = new double[] { 1 };
        double[] doubleArray27 = new double[] { 1 };
        double[] doubleArray29 = new double[] { 1 };
        double[] doubleArray31 = new double[] { 1 };
        double[][] doubleArray32 = new double[][] { doubleArray23, doubleArray25, doubleArray27, doubleArray29, doubleArray31 };
        int[] intArray33 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray32, intArray33);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray21, intArray33);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray3, intArray33);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray1, intArray33);
        double[][] doubleArray38 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray39 = new double[][] {};
        double[][] doubleArray40 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray39);
        double[][] doubleArray41 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray39);
        double[][] doubleArray42 = new double[][] {};
        double[][] doubleArray43 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray42);
        double[][] doubleArray44 = new double[][] {};
        double[][] doubleArray45 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray44);
        double[] doubleArray47 = new double[] { 1 };
        double[] doubleArray49 = new double[] { 1 };
        double[] doubleArray51 = new double[] { 1 };
        double[] doubleArray53 = new double[] { 1 };
        double[] doubleArray55 = new double[] { 1 };
        double[][] doubleArray56 = new double[][] { doubleArray47, doubleArray49, doubleArray51, doubleArray53, doubleArray55 };
        int[] intArray57 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray56, intArray57);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray44, intArray57);
        double[] doubleArray63 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray67 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray71 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray75 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray76 = new double[][] { doubleArray63, doubleArray67, doubleArray71, doubleArray75 };
        double[] doubleArray78 = new double[] { 1 };
        double[] doubleArray80 = new double[] { 1 };
        double[] doubleArray82 = new double[] { 1 };
        double[] doubleArray84 = new double[] { 1 };
        double[] doubleArray86 = new double[] { 1 };
        double[][] doubleArray87 = new double[][] { doubleArray78, doubleArray80, doubleArray82, doubleArray84, doubleArray86 };
        int[] intArray88 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray87, intArray88);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray76, intArray88);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray44, intArray88);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray42, intArray88);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray39, intArray88);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray38, intArray88);
        double[][] doubleArray95 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray38);
        java.lang.Class<?> wildcardClass96 = doubleArray38.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[]");
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray71), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray75), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray78), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray80), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray82), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray84), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray86), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray87);
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray88), "[]");
        org.junit.Assert.assertNotNull(doubleArray95);
        org.junit.Assert.assertNotNull(wildcardClass96);
    }

    @Test
    public void test2441() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2441");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray5 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray6 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray7 = new double[][] {};
        double[][] doubleArray8 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray7);
        double[][] doubleArray9 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray8);
        double[] doubleArray13 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray17 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray21 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray25 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray26 = new double[][] { doubleArray13, doubleArray17, doubleArray21, doubleArray25 };
        double[] doubleArray28 = new double[] { 1 };
        double[] doubleArray30 = new double[] { 1 };
        double[] doubleArray32 = new double[] { 1 };
        double[] doubleArray34 = new double[] { 1 };
        double[] doubleArray36 = new double[] { 1 };
        double[][] doubleArray37 = new double[][] { doubleArray28, doubleArray30, doubleArray32, doubleArray34, doubleArray36 };
        int[] intArray38 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray37, intArray38);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray26, intArray38);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray9, intArray38);
        double[][] doubleArray42 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray9);
        double[][] doubleArray43 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray9);
        double[][] doubleArray44 = null;
        double[][] doubleArray45 = new double[][] {};
        double[][] doubleArray46 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray45);
        double[][] doubleArray47 = new double[][] {};
        double[][] doubleArray48 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray47);
        double[] doubleArray50 = new double[] { 1 };
        double[] doubleArray52 = new double[] { 1 };
        double[] doubleArray54 = new double[] { 1 };
        double[] doubleArray56 = new double[] { 1 };
        double[] doubleArray58 = new double[] { 1 };
        double[][] doubleArray59 = new double[][] { doubleArray50, doubleArray52, doubleArray54, doubleArray56, doubleArray58 };
        int[] intArray60 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray59, intArray60);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray47, intArray60);
        double[] doubleArray66 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray70 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray74 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray78 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray79 = new double[][] { doubleArray66, doubleArray70, doubleArray74, doubleArray78 };
        double[] doubleArray81 = new double[] { 1 };
        double[] doubleArray83 = new double[] { 1 };
        double[] doubleArray85 = new double[] { 1 };
        double[] doubleArray87 = new double[] { 1 };
        double[] doubleArray89 = new double[] { 1 };
        double[][] doubleArray90 = new double[][] { doubleArray81, doubleArray83, doubleArray85, doubleArray87, doubleArray89 };
        int[] intArray91 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray90, intArray91);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray79, intArray91);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray47, intArray91);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray46, intArray91);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray44, intArray91);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray43, intArray91);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray6, intArray91);
        java.lang.Class<?> wildcardClass99 = doubleArray6.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[]");
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray66), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray70), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray74), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray78), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertNotNull(doubleArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray81), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray83), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray85), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray87), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray89), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray90);
        org.junit.Assert.assertNotNull(intArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray91), "[]");
        org.junit.Assert.assertNotNull(wildcardClass99);
    }

    @Test
    public void test2442() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2442");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[] doubleArray31 = new double[] { 1 };
        double[] doubleArray33 = new double[] { 1 };
        double[] doubleArray35 = new double[] { 1 };
        double[] doubleArray37 = new double[] { 1 };
        double[] doubleArray39 = new double[] { 1 };
        double[][] doubleArray40 = new double[][] { doubleArray31, doubleArray33, doubleArray35, doubleArray37, doubleArray39 };
        int[] intArray41 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray40, intArray41);
        double[][] doubleArray43 = new double[][] {};
        double[][] doubleArray44 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray43);
        int[] intArray45 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray44, intArray45);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray40, intArray45);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray28, intArray45);
        double[][] doubleArray49 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray50 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray51 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray52 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray51);
        double[][] doubleArray53 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray52);
        double[][] doubleArray54 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray53);
        java.lang.Class<?> wildcardClass55 = doubleArray53.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertNotNull(wildcardClass55);
    }

    @Test
    public void test2443() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2443");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = new double[][] {};
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[] doubleArray5 = new double[] { 1 };
        double[] doubleArray7 = new double[] { 1 };
        double[] doubleArray9 = new double[] { 1 };
        double[] doubleArray11 = new double[] { 1 };
        double[] doubleArray13 = new double[] { 1 };
        double[][] doubleArray14 = new double[][] { doubleArray5, doubleArray7, doubleArray9, doubleArray11, doubleArray13 };
        int[] intArray15 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray14, intArray15);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray2, intArray15);
        double[] doubleArray21 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray25 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray29 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray33 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray34 = new double[][] { doubleArray21, doubleArray25, doubleArray29, doubleArray33 };
        double[] doubleArray36 = new double[] { 1 };
        double[] doubleArray38 = new double[] { 1 };
        double[] doubleArray40 = new double[] { 1 };
        double[] doubleArray42 = new double[] { 1 };
        double[] doubleArray44 = new double[] { 1 };
        double[][] doubleArray45 = new double[][] { doubleArray36, doubleArray38, doubleArray40, doubleArray42, doubleArray44 };
        int[] intArray46 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray45, intArray46);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray34, intArray46);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray2, intArray46);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray0, intArray46);
        double[][] doubleArray51 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray52 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        java.lang.Class<?> wildcardClass53 = doubleArray0.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertNotNull(wildcardClass53);
    }

    @Test
    public void test2444() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2444");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray30 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray29);
        double[][] doubleArray31 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        double[][] doubleArray32 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        double[][] doubleArray33 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        double[][] doubleArray34 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray33);
        double[][] doubleArray35 = new double[][] {};
        double[][] doubleArray36 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray35);
        double[][] doubleArray37 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray35);
        double[][] doubleArray38 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray37);
        double[][] doubleArray39 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray38);
        double[][] doubleArray40 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray38);
        double[][] doubleArray41 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray40);
        double[][] doubleArray42 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray40);
        double[][] doubleArray43 = null;
        double[][] doubleArray44 = new double[][] {};
        double[][] doubleArray45 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray44);
        double[][] doubleArray46 = new double[][] {};
        double[][] doubleArray47 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray46);
        double[][] doubleArray48 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray47);
        double[] doubleArray52 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray56 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray60 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray64 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray65 = new double[][] { doubleArray52, doubleArray56, doubleArray60, doubleArray64 };
        double[] doubleArray67 = new double[] { 1 };
        double[] doubleArray69 = new double[] { 1 };
        double[] doubleArray71 = new double[] { 1 };
        double[] doubleArray73 = new double[] { 1 };
        double[] doubleArray75 = new double[] { 1 };
        double[][] doubleArray76 = new double[][] { doubleArray67, doubleArray69, doubleArray71, doubleArray73, doubleArray75 };
        int[] intArray77 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray76, intArray77);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray65, intArray77);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray47, intArray77);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray45, intArray77);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray43, intArray77);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray42, intArray77);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray33, intArray77);
        double[][] doubleArray85 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray33);
        double[][] doubleArray86 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray85);
        double[][] doubleArray87 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray86);
        java.lang.Class<?> wildcardClass88 = doubleArray87.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray71), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray73), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray75), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray77), "[]");
        org.junit.Assert.assertNotNull(doubleArray85);
        org.junit.Assert.assertNotNull(doubleArray86);
        org.junit.Assert.assertNotNull(doubleArray87);
        org.junit.Assert.assertNotNull(wildcardClass88);
    }

    @Test
    public void test2445() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2445");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray30 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray31 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        double[][] doubleArray32 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        double[][] doubleArray33 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray32);
        double[][] doubleArray34 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray33);
        double[][] doubleArray35 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray34);
        double[][] doubleArray36 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray35);
        double[][] doubleArray37 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray36);
        double[][] doubleArray38 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray36);
        java.lang.Class<?> wildcardClass39 = doubleArray36.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertNotNull(wildcardClass39);
    }

    @Test
    public void test2446() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2446");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray5 = new double[][] {};
        double[][] doubleArray6 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray5);
        double[][] doubleArray7 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray6);
        double[] doubleArray11 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray15 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray19 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray23 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray24 = new double[][] { doubleArray11, doubleArray15, doubleArray19, doubleArray23 };
        double[] doubleArray26 = new double[] { 1 };
        double[] doubleArray28 = new double[] { 1 };
        double[] doubleArray30 = new double[] { 1 };
        double[] doubleArray32 = new double[] { 1 };
        double[] doubleArray34 = new double[] { 1 };
        double[][] doubleArray35 = new double[][] { doubleArray26, doubleArray28, doubleArray30, doubleArray32, doubleArray34 };
        int[] intArray36 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray35, intArray36);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray24, intArray36);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray7, intArray36);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray0, intArray36);
        double[][] doubleArray41 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray42 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray41);
        double[][] doubleArray43 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray42);
        double[][] doubleArray44 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray43);
        double[][] doubleArray45 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray44);
        double[][] doubleArray46 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray44);
        java.lang.Class<?> wildcardClass47 = doubleArray46.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertNotNull(wildcardClass47);
    }

    @Test
    public void test2447() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2447");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray30 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray29);
        double[][] doubleArray31 = new double[][] {};
        double[][] doubleArray32 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray31);
        double[] doubleArray34 = new double[] { 1 };
        double[] doubleArray36 = new double[] { 1 };
        double[] doubleArray38 = new double[] { 1 };
        double[] doubleArray40 = new double[] { 1 };
        double[] doubleArray42 = new double[] { 1 };
        double[][] doubleArray43 = new double[][] { doubleArray34, doubleArray36, doubleArray38, doubleArray40, doubleArray42 };
        int[] intArray44 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray43, intArray44);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray31, intArray44);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray30, intArray44);
        double[][] doubleArray48 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        double[][] doubleArray49 = new double[][] {};
        double[][] doubleArray50 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray49);
        int[] intArray51 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray50, intArray51);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray48, intArray51);
        double[][] doubleArray54 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray48);
        double[][] doubleArray55 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray54);
        double[][] doubleArray56 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray54);
        double[][] doubleArray57 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray54);
        java.lang.Class<?> wildcardClass58 = doubleArray57.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[]");
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertNotNull(wildcardClass58);
    }

    @Test
    public void test2448() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2448");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[] doubleArray8 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray12 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray16 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray20 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray21 = new double[][] { doubleArray8, doubleArray12, doubleArray16, doubleArray20 };
        double[] doubleArray23 = new double[] { 1 };
        double[] doubleArray25 = new double[] { 1 };
        double[] doubleArray27 = new double[] { 1 };
        double[] doubleArray29 = new double[] { 1 };
        double[] doubleArray31 = new double[] { 1 };
        double[][] doubleArray32 = new double[][] { doubleArray23, doubleArray25, doubleArray27, doubleArray29, doubleArray31 };
        int[] intArray33 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray32, intArray33);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray21, intArray33);
        double[][] doubleArray36 = new double[][] {};
        double[][] doubleArray37 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray36);
        double[][] doubleArray38 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray37);
        double[][] doubleArray39 = new double[][] {};
        double[][] doubleArray40 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray39);
        double[][] doubleArray41 = new double[][] {};
        double[][] doubleArray42 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray41);
        double[] doubleArray44 = new double[] { 1 };
        double[] doubleArray46 = new double[] { 1 };
        double[] doubleArray48 = new double[] { 1 };
        double[] doubleArray50 = new double[] { 1 };
        double[] doubleArray52 = new double[] { 1 };
        double[][] doubleArray53 = new double[][] { doubleArray44, doubleArray46, doubleArray48, doubleArray50, doubleArray52 };
        int[] intArray54 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray53, intArray54);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray41, intArray54);
        double[] doubleArray60 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray64 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray68 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray72 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray73 = new double[][] { doubleArray60, doubleArray64, doubleArray68, doubleArray72 };
        double[] doubleArray75 = new double[] { 1 };
        double[] doubleArray77 = new double[] { 1 };
        double[] doubleArray79 = new double[] { 1 };
        double[] doubleArray81 = new double[] { 1 };
        double[] doubleArray83 = new double[] { 1 };
        double[][] doubleArray84 = new double[][] { doubleArray75, doubleArray77, doubleArray79, doubleArray81, doubleArray83 };
        int[] intArray85 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray84, intArray85);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray73, intArray85);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray41, intArray85);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray40, intArray85);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray38, intArray85);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray21, intArray85);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray3, intArray85);
        double[][] doubleArray93 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[][] doubleArray94 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray93);
        double[][] doubleArray95 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray94);
        double[][] doubleArray96 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray94);
        double[][] doubleArray97 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray96);
        double[][] doubleArray98 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray96);
        java.lang.Class<?> wildcardClass99 = doubleArray96.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[]");
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray75), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray77), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray79), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray81), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray83), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray84);
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray85), "[]");
        org.junit.Assert.assertNotNull(doubleArray93);
        org.junit.Assert.assertNotNull(doubleArray94);
        org.junit.Assert.assertNotNull(doubleArray95);
        org.junit.Assert.assertNotNull(doubleArray96);
        org.junit.Assert.assertNotNull(doubleArray97);
        org.junit.Assert.assertNotNull(doubleArray98);
        org.junit.Assert.assertNotNull(wildcardClass99);
    }

    @Test
    public void test2449() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2449");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray3 = new double[][] {};
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[][] doubleArray5 = new double[][] {};
        double[][] doubleArray6 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray5);
        double[] doubleArray8 = new double[] { 1 };
        double[] doubleArray10 = new double[] { 1 };
        double[] doubleArray12 = new double[] { 1 };
        double[] doubleArray14 = new double[] { 1 };
        double[] doubleArray16 = new double[] { 1 };
        double[][] doubleArray17 = new double[][] { doubleArray8, doubleArray10, doubleArray12, doubleArray14, doubleArray16 };
        int[] intArray18 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray17, intArray18);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray5, intArray18);
        double[] doubleArray24 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray28 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray32 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray36 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray37 = new double[][] { doubleArray24, doubleArray28, doubleArray32, doubleArray36 };
        double[] doubleArray39 = new double[] { 1 };
        double[] doubleArray41 = new double[] { 1 };
        double[] doubleArray43 = new double[] { 1 };
        double[] doubleArray45 = new double[] { 1 };
        double[] doubleArray47 = new double[] { 1 };
        double[][] doubleArray48 = new double[][] { doubleArray39, doubleArray41, doubleArray43, doubleArray45, doubleArray47 };
        int[] intArray49 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray48, intArray49);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray37, intArray49);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray5, intArray49);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray4, intArray49);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray2, intArray49);
        double[][] doubleArray55 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray56 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray55);
        double[][] doubleArray57 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray55);
        double[][] doubleArray58 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray57);
        double[][] doubleArray59 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray58);
        double[][] doubleArray60 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray58);
        double[][] doubleArray61 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray60);
        java.lang.Class<?> wildcardClass62 = doubleArray60.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[]");
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[]");
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertNotNull(wildcardClass62);
    }

    @Test
    public void test2450() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2450");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[] doubleArray31 = new double[] { 1 };
        double[] doubleArray33 = new double[] { 1 };
        double[] doubleArray35 = new double[] { 1 };
        double[] doubleArray37 = new double[] { 1 };
        double[] doubleArray39 = new double[] { 1 };
        double[][] doubleArray40 = new double[][] { doubleArray31, doubleArray33, doubleArray35, doubleArray37, doubleArray39 };
        int[] intArray41 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray40, intArray41);
        double[][] doubleArray43 = new double[][] {};
        double[][] doubleArray44 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray43);
        int[] intArray45 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray44, intArray45);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray40, intArray45);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray28, intArray45);
        double[][] doubleArray49 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray50 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray49);
        double[][] doubleArray51 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray50);
        double[][] doubleArray52 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray50);
        double[][] doubleArray53 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray52);
        double[][] doubleArray54 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray52);
        double[][] doubleArray55 = new double[][] {};
        double[][] doubleArray56 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray55);
        double[][] doubleArray57 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray56);
        double[][] doubleArray58 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray57);
        double[][] doubleArray59 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray58);
        double[][] doubleArray60 = null;
        double[][] doubleArray61 = new double[][] {};
        double[][] doubleArray62 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray61);
        double[][] doubleArray63 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray62);
        double[] doubleArray67 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray71 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray75 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray79 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray80 = new double[][] { doubleArray67, doubleArray71, doubleArray75, doubleArray79 };
        double[] doubleArray82 = new double[] { 1 };
        double[] doubleArray84 = new double[] { 1 };
        double[] doubleArray86 = new double[] { 1 };
        double[] doubleArray88 = new double[] { 1 };
        double[] doubleArray90 = new double[] { 1 };
        double[][] doubleArray91 = new double[][] { doubleArray82, doubleArray84, doubleArray86, doubleArray88, doubleArray90 };
        int[] intArray92 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray91, intArray92);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray80, intArray92);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray63, intArray92);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray60, intArray92);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray58, intArray92);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray52, intArray92);
        java.lang.Class<?> wildcardClass99 = doubleArray52.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray71), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray75), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray79), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertNotNull(doubleArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray82), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray84), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray86), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray88), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray90), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray91);
        org.junit.Assert.assertNotNull(intArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray92), "[]");
        org.junit.Assert.assertNotNull(wildcardClass99);
    }

    @Test
    public void test2451() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2451");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray30 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray29);
        double[][] doubleArray31 = new double[][] {};
        double[][] doubleArray32 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray31);
        double[] doubleArray34 = new double[] { 1 };
        double[] doubleArray36 = new double[] { 1 };
        double[] doubleArray38 = new double[] { 1 };
        double[] doubleArray40 = new double[] { 1 };
        double[] doubleArray42 = new double[] { 1 };
        double[][] doubleArray43 = new double[][] { doubleArray34, doubleArray36, doubleArray38, doubleArray40, doubleArray42 };
        int[] intArray44 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray43, intArray44);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray31, intArray44);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray30, intArray44);
        double[][] doubleArray48 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        double[][] doubleArray49 = new double[][] {};
        double[][] doubleArray50 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray49);
        int[] intArray51 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray50, intArray51);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray48, intArray51);
        double[][] doubleArray54 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray48);
        double[][] doubleArray55 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray54);
        double[][] doubleArray56 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray55);
        double[][] doubleArray57 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray56);
        int[] intArray58 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray56, intArray58);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[]");
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertNotNull(doubleArray57);
    }

    @Test
    public void test2452() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2452");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray30 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray29);
        double[][] doubleArray31 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        double[][] doubleArray32 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        double[][] doubleArray33 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        double[][] doubleArray34 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        double[][] doubleArray35 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray34);
        double[][] doubleArray36 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray35);
        double[][] doubleArray37 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray36);
        double[][] doubleArray38 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray36);
        double[][] doubleArray39 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray36);
        java.lang.Class<?> wildcardClass40 = doubleArray36.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertNotNull(wildcardClass40);
    }

    @Test
    public void test2453() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2453");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray30 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray29);
        double[][] doubleArray31 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray29);
        double[][] doubleArray32 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray31);
        double[][] doubleArray33 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray32);
        double[][] doubleArray34 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray33);
        double[][] doubleArray35 = new double[][] {};
        double[][] doubleArray36 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray35);
        double[][] doubleArray37 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray35);
        double[][] doubleArray38 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray35);
        double[][] doubleArray39 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray35);
        double[][] doubleArray40 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray39);
        double[][] doubleArray41 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray39);
        double[][] doubleArray42 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray41);
        double[] doubleArray49 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray56 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray63 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray70 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray71 = new double[][] { doubleArray49, doubleArray56, doubleArray63, doubleArray70 };
        double[][] doubleArray72 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray71);
        double[][] doubleArray73 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray72);
        double[][] doubleArray74 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray72);
        double[][] doubleArray75 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray72);
        double[][] doubleArray76 = new double[][] {};
        double[][] doubleArray77 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray76);
        double[][] doubleArray78 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray76);
        double[][] doubleArray79 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray78);
        double[][] doubleArray80 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray78);
        double[][] doubleArray81 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray80);
        double[][] doubleArray82 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray81);
        double[][] doubleArray83 = new double[][] {};
        double[][] doubleArray84 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray83);
        int[] intArray85 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray84, intArray85);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray82, intArray85);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray72, intArray85);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray41, intArray85);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray34, intArray85);
        double[][] doubleArray91 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray34);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray70), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertNotNull(doubleArray81);
        org.junit.Assert.assertNotNull(doubleArray82);
        org.junit.Assert.assertNotNull(doubleArray83);
        org.junit.Assert.assertNotNull(doubleArray84);
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray85), "[]");
        org.junit.Assert.assertNotNull(doubleArray91);
    }

    @Test
    public void test2454() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2454");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[] doubleArray9 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray16 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray23 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray30 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray31 = new double[][] { doubleArray9, doubleArray16, doubleArray23, doubleArray30 };
        double[][] doubleArray32 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray31);
        double[][] doubleArray33 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray31);
        double[][] doubleArray34 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray31);
        double[][] doubleArray35 = new double[][] {};
        double[][] doubleArray36 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray35);
        int[] intArray37 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray36, intArray37);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray34, intArray37);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray2, intArray37);
        double[][] doubleArray41 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray42 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray41);
        java.lang.Class<?> wildcardClass43 = doubleArray42.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertNotNull(wildcardClass43);
    }

    @Test
    public void test2455() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2455");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[] doubleArray6 = new double[] { 1 };
        double[] doubleArray8 = new double[] { 1 };
        double[] doubleArray10 = new double[] { 1 };
        double[] doubleArray12 = new double[] { 1 };
        double[] doubleArray14 = new double[] { 1 };
        double[][] doubleArray15 = new double[][] { doubleArray6, doubleArray8, doubleArray10, doubleArray12, doubleArray14 };
        int[] intArray16 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray15, intArray16);
        double[][] doubleArray18 = new double[][] {};
        double[][] doubleArray19 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray18);
        int[] intArray20 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray19, intArray20);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray15, intArray20);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray3, intArray20);
        double[][] doubleArray24 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        int[] intArray25 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray24, intArray25);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[]");
        org.junit.Assert.assertNotNull(doubleArray24);
    }

    @Test
    public void test2456() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2456");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[] doubleArray11 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray18 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray25 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray32 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray33 = new double[][] { doubleArray11, doubleArray18, doubleArray25, doubleArray32 };
        double[][] doubleArray34 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray33);
        double[][] doubleArray35 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray34);
        double[][] doubleArray36 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray35);
        double[][] doubleArray37 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray36);
        double[][] doubleArray38 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray36);
        double[][] doubleArray39 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray38);
        double[][] doubleArray40 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray38);
        double[][] doubleArray41 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray38);
        double[][] doubleArray42 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray38);
        double[][] doubleArray43 = new double[][] {};
        double[][] doubleArray44 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray43);
        double[][] doubleArray45 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray44);
        double[][] doubleArray46 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray44);
        double[][] doubleArray47 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray44);
        double[][] doubleArray48 = new double[][] {};
        double[][] doubleArray49 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray48);
        double[][] doubleArray50 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray48);
        double[][] doubleArray51 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray48);
        double[][] doubleArray52 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray48);
        double[][] doubleArray53 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray52);
        double[][] doubleArray54 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray52);
        double[][] doubleArray55 = new double[][] {};
        double[][] doubleArray56 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray55);
        int[] intArray57 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray56, intArray57);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray54, intArray57);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray44, intArray57);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray42, intArray57);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray1, intArray57);
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[]");
    }

    @Test
    public void test2457() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2457");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = new double[][] {};
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[][] doubleArray5 = new double[][] {};
        double[][] doubleArray6 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray5);
        double[][] doubleArray7 = new double[][] {};
        double[][] doubleArray8 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray7);
        double[] doubleArray10 = new double[] { 1 };
        double[] doubleArray12 = new double[] { 1 };
        double[] doubleArray14 = new double[] { 1 };
        double[] doubleArray16 = new double[] { 1 };
        double[] doubleArray18 = new double[] { 1 };
        double[][] doubleArray19 = new double[][] { doubleArray10, doubleArray12, doubleArray14, doubleArray16, doubleArray18 };
        int[] intArray20 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray19, intArray20);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray7, intArray20);
        double[] doubleArray26 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray30 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray34 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray38 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray39 = new double[][] { doubleArray26, doubleArray30, doubleArray34, doubleArray38 };
        double[] doubleArray41 = new double[] { 1 };
        double[] doubleArray43 = new double[] { 1 };
        double[] doubleArray45 = new double[] { 1 };
        double[] doubleArray47 = new double[] { 1 };
        double[] doubleArray49 = new double[] { 1 };
        double[][] doubleArray50 = new double[][] { doubleArray41, doubleArray43, doubleArray45, doubleArray47, doubleArray49 };
        int[] intArray51 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray50, intArray51);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray39, intArray51);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray7, intArray51);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray6, intArray51);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray4, intArray51);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray1, intArray51);
        double[][] doubleArray58 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray59 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray58);
        double[][] doubleArray60 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray59);
        double[][] doubleArray61 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray60);
        java.lang.Class<?> wildcardClass62 = doubleArray60.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[]");
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[]");
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertNotNull(wildcardClass62);
    }

    @Test
    public void test2458() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2458");
        double[][] doubleArray0 = null;
        double[][] doubleArray1 = new double[][] {};
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[][] doubleArray5 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[][] doubleArray6 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray5);
        double[][] doubleArray7 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray5);
        double[][] doubleArray8 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray5);
        double[] doubleArray15 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray22 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray29 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray36 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray37 = new double[][] { doubleArray15, doubleArray22, doubleArray29, doubleArray36 };
        double[][] doubleArray38 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray37);
        double[][] doubleArray39 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray38);
        double[][] doubleArray40 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray39);
        double[][] doubleArray41 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray39);
        double[][] doubleArray42 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray39);
        double[][] doubleArray43 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray39);
        double[][] doubleArray44 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray43);
        double[][] doubleArray45 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray43);
        double[][] doubleArray46 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray45);
        double[][] doubleArray47 = new double[][] {};
        double[][] doubleArray48 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray47);
        double[][] doubleArray49 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray48);
        double[][] doubleArray50 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray49);
        double[][] doubleArray51 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray49);
        double[][] doubleArray52 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray49);
        double[][] doubleArray53 = new double[][] {};
        double[][] doubleArray54 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray53);
        double[][] doubleArray55 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray53);
        double[] doubleArray62 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray69 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray76 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray83 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray84 = new double[][] { doubleArray62, doubleArray69, doubleArray76, doubleArray83 };
        double[][] doubleArray85 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray84);
        double[][] doubleArray86 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray84);
        double[][] doubleArray87 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray84);
        double[][] doubleArray88 = new double[][] {};
        double[][] doubleArray89 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray88);
        int[] intArray90 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray89, intArray90);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray87, intArray90);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray55, intArray90);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray49, intArray90);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray46, intArray90);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray5, intArray90);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray0, intArray90);
        java.lang.Class<?> wildcardClass98 = intArray90.getClass();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray83), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray84);
        org.junit.Assert.assertNotNull(doubleArray85);
        org.junit.Assert.assertNotNull(doubleArray86);
        org.junit.Assert.assertNotNull(doubleArray87);
        org.junit.Assert.assertNotNull(doubleArray88);
        org.junit.Assert.assertNotNull(doubleArray89);
        org.junit.Assert.assertNotNull(intArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray90), "[]");
        org.junit.Assert.assertNotNull(wildcardClass98);
    }

    @Test
    public void test2459() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2459");
        double[] doubleArray3 = new double[] { 0, 1, 10L };
        double[][] doubleArray4 = new double[][] { doubleArray3 };
        double[][] doubleArray5 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray4);
        double[][] doubleArray6 = new double[][] {};
        double[][] doubleArray7 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray6);
        double[][] doubleArray8 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray6);
        double[][] doubleArray9 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray8);
        double[][] doubleArray10 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray8);
        double[][] doubleArray11 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray8);
        double[][] doubleArray12 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray8);
        double[][] doubleArray13 = new double[][] {};
        double[][] doubleArray14 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray13);
        double[][] doubleArray15 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray14);
        double[][] doubleArray16 = new double[][] {};
        double[][] doubleArray17 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray16);
        double[][] doubleArray18 = new double[][] {};
        double[][] doubleArray19 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray18);
        double[] doubleArray21 = new double[] { 1 };
        double[] doubleArray23 = new double[] { 1 };
        double[] doubleArray25 = new double[] { 1 };
        double[] doubleArray27 = new double[] { 1 };
        double[] doubleArray29 = new double[] { 1 };
        double[][] doubleArray30 = new double[][] { doubleArray21, doubleArray23, doubleArray25, doubleArray27, doubleArray29 };
        int[] intArray31 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray30, intArray31);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray18, intArray31);
        double[] doubleArray37 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray41 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray45 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray49 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray50 = new double[][] { doubleArray37, doubleArray41, doubleArray45, doubleArray49 };
        double[] doubleArray52 = new double[] { 1 };
        double[] doubleArray54 = new double[] { 1 };
        double[] doubleArray56 = new double[] { 1 };
        double[] doubleArray58 = new double[] { 1 };
        double[] doubleArray60 = new double[] { 1 };
        double[][] doubleArray61 = new double[][] { doubleArray52, doubleArray54, doubleArray56, doubleArray58, doubleArray60 };
        int[] intArray62 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray61, intArray62);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray50, intArray62);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray18, intArray62);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray17, intArray62);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray15, intArray62);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray12, intArray62);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray5, intArray62);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[0.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[]");
    }

    @Test
    public void test2460() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2460");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray30 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray31 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        double[][] doubleArray32 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        double[][] doubleArray33 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray32);
        double[][] doubleArray34 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray33);
        double[][] doubleArray35 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray34);
        double[][] doubleArray36 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray35);
        double[][] doubleArray37 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray36);
        int[] intArray38 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray37, intArray38);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertNotNull(doubleArray37);
    }

    @Test
    public void test2461() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2461");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[] doubleArray3 = new double[] { 1 };
        double[] doubleArray5 = new double[] { 1 };
        double[] doubleArray7 = new double[] { 1 };
        double[] doubleArray9 = new double[] { 1 };
        double[] doubleArray11 = new double[] { 1 };
        double[][] doubleArray12 = new double[][] { doubleArray3, doubleArray5, doubleArray7, doubleArray9, doubleArray11 };
        int[] intArray13 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray12, intArray13);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray0, intArray13);
        double[] doubleArray19 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray23 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray27 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray31 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray32 = new double[][] { doubleArray19, doubleArray23, doubleArray27, doubleArray31 };
        double[] doubleArray34 = new double[] { 1 };
        double[] doubleArray36 = new double[] { 1 };
        double[] doubleArray38 = new double[] { 1 };
        double[] doubleArray40 = new double[] { 1 };
        double[] doubleArray42 = new double[] { 1 };
        double[][] doubleArray43 = new double[][] { doubleArray34, doubleArray36, doubleArray38, doubleArray40, doubleArray42 };
        int[] intArray44 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray43, intArray44);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray32, intArray44);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray0, intArray44);
        double[] doubleArray49 = new double[] { 1 };
        double[] doubleArray51 = new double[] { 1 };
        double[] doubleArray53 = new double[] { 1 };
        double[] doubleArray55 = new double[] { 1 };
        double[] doubleArray57 = new double[] { 1 };
        double[][] doubleArray58 = new double[][] { doubleArray49, doubleArray51, doubleArray53, doubleArray55, doubleArray57 };
        int[] intArray59 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray58, intArray59);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray0, intArray59);
        double[][] doubleArray62 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray63 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray64 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray65 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray64);
        double[][] doubleArray66 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray65);
        java.lang.Class<?> wildcardClass67 = doubleArray66.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[]");
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertNotNull(wildcardClass67);
    }

    @Test
    public void test2462() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2462");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[] doubleArray10 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray17 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray24 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray31 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray32 = new double[][] { doubleArray10, doubleArray17, doubleArray24, doubleArray31 };
        double[][] doubleArray33 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray32);
        double[][] doubleArray34 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray32);
        double[][] doubleArray35 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray32);
        double[][] doubleArray36 = new double[][] {};
        double[][] doubleArray37 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray36);
        int[] intArray38 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray37, intArray38);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray35, intArray38);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray3, intArray38);
        double[][] doubleArray42 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[][] doubleArray43 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        java.lang.Class<?> wildcardClass44 = doubleArray3.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(wildcardClass44);
    }

    @Test
    public void test2463() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2463");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray30 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray31 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray32 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray31);
        double[][] doubleArray33 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray32);
        double[][] doubleArray34 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray32);
        double[][] doubleArray35 = new double[][] {};
        double[][] doubleArray36 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray35);
        double[][] doubleArray37 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray35);
        double[][] doubleArray38 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray35);
        double[][] doubleArray39 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray35);
        double[][] doubleArray40 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray35);
        double[][] doubleArray41 = new double[][] {};
        double[][] doubleArray42 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray41);
        double[][] doubleArray43 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray41);
        double[][] doubleArray44 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray43);
        double[][] doubleArray45 = null;
        double[][] doubleArray46 = new double[][] {};
        double[][] doubleArray47 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray46);
        double[][] doubleArray48 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray47);
        double[] doubleArray52 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray56 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray60 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray64 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray65 = new double[][] { doubleArray52, doubleArray56, doubleArray60, doubleArray64 };
        double[] doubleArray67 = new double[] { 1 };
        double[] doubleArray69 = new double[] { 1 };
        double[] doubleArray71 = new double[] { 1 };
        double[] doubleArray73 = new double[] { 1 };
        double[] doubleArray75 = new double[] { 1 };
        double[][] doubleArray76 = new double[][] { doubleArray67, doubleArray69, doubleArray71, doubleArray73, doubleArray75 };
        int[] intArray77 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray76, intArray77);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray65, intArray77);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray48, intArray77);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray45, intArray77);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray44, intArray77);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray40, intArray77);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray34, intArray77);
        java.lang.Class<?> wildcardClass85 = intArray77.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray71), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray73), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray75), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray77), "[]");
        org.junit.Assert.assertNotNull(wildcardClass85);
    }

    @Test
    public void test2464() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2464");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[] doubleArray3 = new double[] { 1 };
        double[] doubleArray5 = new double[] { 1 };
        double[] doubleArray7 = new double[] { 1 };
        double[] doubleArray9 = new double[] { 1 };
        double[] doubleArray11 = new double[] { 1 };
        double[][] doubleArray12 = new double[][] { doubleArray3, doubleArray5, doubleArray7, doubleArray9, doubleArray11 };
        int[] intArray13 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray12, intArray13);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray0, intArray13);
        double[][] doubleArray16 = new double[][] {};
        double[][] doubleArray17 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray16);
        double[][] doubleArray18 = new double[][] {};
        double[][] doubleArray19 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray18);
        double[] doubleArray21 = new double[] { 1 };
        double[] doubleArray23 = new double[] { 1 };
        double[] doubleArray25 = new double[] { 1 };
        double[] doubleArray27 = new double[] { 1 };
        double[] doubleArray29 = new double[] { 1 };
        double[][] doubleArray30 = new double[][] { doubleArray21, doubleArray23, doubleArray25, doubleArray27, doubleArray29 };
        int[] intArray31 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray30, intArray31);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray18, intArray31);
        double[] doubleArray37 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray41 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray45 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray49 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray50 = new double[][] { doubleArray37, doubleArray41, doubleArray45, doubleArray49 };
        double[] doubleArray52 = new double[] { 1 };
        double[] doubleArray54 = new double[] { 1 };
        double[] doubleArray56 = new double[] { 1 };
        double[] doubleArray58 = new double[] { 1 };
        double[] doubleArray60 = new double[] { 1 };
        double[][] doubleArray61 = new double[][] { doubleArray52, doubleArray54, doubleArray56, doubleArray58, doubleArray60 };
        int[] intArray62 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray61, intArray62);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray50, intArray62);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray18, intArray62);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray17, intArray62);
        double[] doubleArray68 = new double[] { 1 };
        double[] doubleArray70 = new double[] { 1 };
        double[] doubleArray72 = new double[] { 1 };
        double[] doubleArray74 = new double[] { 1 };
        double[] doubleArray76 = new double[] { 1 };
        double[][] doubleArray77 = new double[][] { doubleArray68, doubleArray70, doubleArray72, doubleArray74, doubleArray76 };
        int[] intArray78 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray77, intArray78);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray17, intArray78);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray0, intArray78);
        double[][] doubleArray82 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray83 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray84 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        java.lang.Class<?> wildcardClass85 = doubleArray84.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[]");
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray70), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray74), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[]");
        org.junit.Assert.assertNotNull(doubleArray82);
        org.junit.Assert.assertNotNull(doubleArray83);
        org.junit.Assert.assertNotNull(doubleArray84);
        org.junit.Assert.assertNotNull(wildcardClass85);
    }

    @Test
    public void test2465() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2465");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[][] doubleArray5 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[][] doubleArray6 = new double[][] {};
        double[][] doubleArray7 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray6);
        double[][] doubleArray8 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray7);
        double[][] doubleArray9 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray8);
        double[][] doubleArray10 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray8);
        double[][] doubleArray11 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray8);
        double[][] doubleArray12 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray8);
        double[][] doubleArray13 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray12);
        double[][] doubleArray14 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray13);
        double[] doubleArray16 = new double[] { 1 };
        double[] doubleArray18 = new double[] { 1 };
        double[] doubleArray20 = new double[] { 1 };
        double[] doubleArray22 = new double[] { 1 };
        double[] doubleArray24 = new double[] { 1 };
        double[][] doubleArray25 = new double[][] { doubleArray16, doubleArray18, doubleArray20, doubleArray22, doubleArray24 };
        int[] intArray26 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray25, intArray26);
        double[] doubleArray34 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray41 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray48 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray55 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray56 = new double[][] { doubleArray34, doubleArray41, doubleArray48, doubleArray55 };
        double[][] doubleArray57 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray56);
        double[] doubleArray59 = new double[] { 1 };
        double[] doubleArray61 = new double[] { 1 };
        double[] doubleArray63 = new double[] { 1 };
        double[] doubleArray65 = new double[] { 1 };
        double[] doubleArray67 = new double[] { 1 };
        double[][] doubleArray68 = new double[][] { doubleArray59, doubleArray61, doubleArray63, doubleArray65, doubleArray67 };
        int[] intArray69 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray68, intArray69);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray57, intArray69);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray25, intArray69);
        double[] doubleArray74 = new double[] { 1 };
        double[] doubleArray76 = new double[] { 1 };
        double[] doubleArray78 = new double[] { 1 };
        double[] doubleArray80 = new double[] { 1 };
        double[] doubleArray82 = new double[] { 1 };
        double[][] doubleArray83 = new double[][] { doubleArray74, doubleArray76, doubleArray78, doubleArray80, doubleArray82 };
        int[] intArray84 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray83, intArray84);
        double[][] doubleArray86 = new double[][] {};
        double[][] doubleArray87 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray86);
        int[] intArray88 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray87, intArray88);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray83, intArray88);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray25, intArray88);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray13, intArray88);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray3, intArray88);
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[]");
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray74), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray78), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray80), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray82), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray83);
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray84), "[]");
        org.junit.Assert.assertNotNull(doubleArray86);
        org.junit.Assert.assertNotNull(doubleArray87);
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray88), "[]");
    }

    @Test
    public void test2466() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2466");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray30 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray31 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        double[][] doubleArray32 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray31);
        double[][] doubleArray33 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray32);
        double[][] doubleArray34 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray32);
        java.lang.Class<?> wildcardClass35 = doubleArray34.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertNotNull(wildcardClass35);
    }

    @Test
    public void test2467() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2467");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = new double[][] {};
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[] doubleArray5 = new double[] { 1 };
        double[] doubleArray7 = new double[] { 1 };
        double[] doubleArray9 = new double[] { 1 };
        double[] doubleArray11 = new double[] { 1 };
        double[] doubleArray13 = new double[] { 1 };
        double[][] doubleArray14 = new double[][] { doubleArray5, doubleArray7, doubleArray9, doubleArray11, doubleArray13 };
        int[] intArray15 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray14, intArray15);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray2, intArray15);
        double[] doubleArray21 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray25 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray29 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray33 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray34 = new double[][] { doubleArray21, doubleArray25, doubleArray29, doubleArray33 };
        double[] doubleArray36 = new double[] { 1 };
        double[] doubleArray38 = new double[] { 1 };
        double[] doubleArray40 = new double[] { 1 };
        double[] doubleArray42 = new double[] { 1 };
        double[] doubleArray44 = new double[] { 1 };
        double[][] doubleArray45 = new double[][] { doubleArray36, doubleArray38, doubleArray40, doubleArray42, doubleArray44 };
        int[] intArray46 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray45, intArray46);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray34, intArray46);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray2, intArray46);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray1, intArray46);
        double[] doubleArray52 = new double[] { 1 };
        double[] doubleArray54 = new double[] { 1 };
        double[] doubleArray56 = new double[] { 1 };
        double[] doubleArray58 = new double[] { 1 };
        double[] doubleArray60 = new double[] { 1 };
        double[][] doubleArray61 = new double[][] { doubleArray52, doubleArray54, doubleArray56, doubleArray58, doubleArray60 };
        int[] intArray62 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray61, intArray62);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray1, intArray62);
        double[][] doubleArray65 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray66 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray65);
        java.lang.Class<?> wildcardClass67 = doubleArray66.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[]");
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[]");
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertNotNull(wildcardClass67);
    }

    @Test
    public void test2468() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2468");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray30 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray29);
        double[][] doubleArray31 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        double[][] doubleArray32 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray31);
        double[][] doubleArray33 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray32);
        double[][] doubleArray34 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray33);
        double[][] doubleArray35 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray33);
        double[][] doubleArray36 = new double[][] {};
        double[][] doubleArray37 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray36);
        int[] intArray38 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray37, intArray38);
        double[][] doubleArray40 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray37);
        double[][] doubleArray41 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray37);
        double[][] doubleArray42 = new double[][] {};
        double[][] doubleArray43 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray42);
        double[][] doubleArray44 = new double[][] {};
        double[][] doubleArray45 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray44);
        double[] doubleArray47 = new double[] { 1 };
        double[] doubleArray49 = new double[] { 1 };
        double[] doubleArray51 = new double[] { 1 };
        double[] doubleArray53 = new double[] { 1 };
        double[] doubleArray55 = new double[] { 1 };
        double[][] doubleArray56 = new double[][] { doubleArray47, doubleArray49, doubleArray51, doubleArray53, doubleArray55 };
        int[] intArray57 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray56, intArray57);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray44, intArray57);
        double[] doubleArray63 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray67 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray71 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray75 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray76 = new double[][] { doubleArray63, doubleArray67, doubleArray71, doubleArray75 };
        double[] doubleArray78 = new double[] { 1 };
        double[] doubleArray80 = new double[] { 1 };
        double[] doubleArray82 = new double[] { 1 };
        double[] doubleArray84 = new double[] { 1 };
        double[] doubleArray86 = new double[] { 1 };
        double[][] doubleArray87 = new double[][] { doubleArray78, doubleArray80, doubleArray82, doubleArray84, doubleArray86 };
        int[] intArray88 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray87, intArray88);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray76, intArray88);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray44, intArray88);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray43, intArray88);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray37, intArray88);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray33, intArray88);
        double[][] doubleArray95 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray33);
        double[][] doubleArray96 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray95);
        java.lang.Class<?> wildcardClass97 = doubleArray96.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[]");
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray71), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray75), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray78), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray80), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray82), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray84), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray86), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray87);
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray88), "[]");
        org.junit.Assert.assertNotNull(doubleArray95);
        org.junit.Assert.assertNotNull(doubleArray96);
        org.junit.Assert.assertNotNull(wildcardClass97);
    }

    @Test
    public void test2469() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2469");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[] doubleArray3 = new double[] { 1 };
        double[] doubleArray5 = new double[] { 1 };
        double[] doubleArray7 = new double[] { 1 };
        double[] doubleArray9 = new double[] { 1 };
        double[] doubleArray11 = new double[] { 1 };
        double[][] doubleArray12 = new double[][] { doubleArray3, doubleArray5, doubleArray7, doubleArray9, doubleArray11 };
        int[] intArray13 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray12, intArray13);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray0, intArray13);
        double[] doubleArray19 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray23 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray27 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray31 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray32 = new double[][] { doubleArray19, doubleArray23, doubleArray27, doubleArray31 };
        double[] doubleArray34 = new double[] { 1 };
        double[] doubleArray36 = new double[] { 1 };
        double[] doubleArray38 = new double[] { 1 };
        double[] doubleArray40 = new double[] { 1 };
        double[] doubleArray42 = new double[] { 1 };
        double[][] doubleArray43 = new double[][] { doubleArray34, doubleArray36, doubleArray38, doubleArray40, doubleArray42 };
        int[] intArray44 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray43, intArray44);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray32, intArray44);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray0, intArray44);
        double[] doubleArray49 = new double[] { 1 };
        double[] doubleArray51 = new double[] { 1 };
        double[] doubleArray53 = new double[] { 1 };
        double[] doubleArray55 = new double[] { 1 };
        double[] doubleArray57 = new double[] { 1 };
        double[][] doubleArray58 = new double[][] { doubleArray49, doubleArray51, doubleArray53, doubleArray55, doubleArray57 };
        int[] intArray59 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray58, intArray59);
        double[][] doubleArray61 = new double[][] {};
        double[][] doubleArray62 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray61);
        int[] intArray63 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray62, intArray63);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray58, intArray63);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray0, intArray63);
        double[][] doubleArray67 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray68 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray67);
        double[][] doubleArray69 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray67);
        double[][] doubleArray70 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray67);
        double[][] doubleArray71 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray70);
        java.lang.Class<?> wildcardClass72 = doubleArray70.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[]");
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertNotNull(wildcardClass72);
    }

    @Test
    public void test2470() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2470");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[][] doubleArray5 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[][] doubleArray6 = new double[][] {};
        double[][] doubleArray7 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray6);
        double[][] doubleArray8 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray6);
        double[][] doubleArray9 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray6);
        double[][] doubleArray10 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray9);
        double[] doubleArray17 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray24 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray31 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray38 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray39 = new double[][] { doubleArray17, doubleArray24, doubleArray31, doubleArray38 };
        double[][] doubleArray40 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray39);
        double[][] doubleArray41 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray40);
        double[][] doubleArray42 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray41);
        double[][] doubleArray43 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray41);
        double[][] doubleArray44 = new double[][] {};
        double[][] doubleArray45 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray44);
        double[] doubleArray47 = new double[] { 1 };
        double[] doubleArray49 = new double[] { 1 };
        double[] doubleArray51 = new double[] { 1 };
        double[] doubleArray53 = new double[] { 1 };
        double[] doubleArray55 = new double[] { 1 };
        double[][] doubleArray56 = new double[][] { doubleArray47, doubleArray49, doubleArray51, doubleArray53, doubleArray55 };
        int[] intArray57 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray56, intArray57);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray44, intArray57);
        double[] doubleArray63 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray67 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray71 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray75 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray76 = new double[][] { doubleArray63, doubleArray67, doubleArray71, doubleArray75 };
        double[] doubleArray78 = new double[] { 1 };
        double[] doubleArray80 = new double[] { 1 };
        double[] doubleArray82 = new double[] { 1 };
        double[] doubleArray84 = new double[] { 1 };
        double[] doubleArray86 = new double[] { 1 };
        double[][] doubleArray87 = new double[][] { doubleArray78, doubleArray80, doubleArray82, doubleArray84, doubleArray86 };
        int[] intArray88 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray87, intArray88);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray76, intArray88);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray44, intArray88);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray43, intArray88);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray9, intArray88);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray3, intArray88);
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[]");
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray71), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray75), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray78), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray80), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray82), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray84), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray86), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray87);
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray88), "[]");
    }

    @Test
    public void test2471() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2471");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray30 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray31 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray32 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray33 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray32);
        double[][] doubleArray34 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray33);
        double[][] doubleArray35 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray33);
        java.lang.Class<?> wildcardClass36 = doubleArray35.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertNotNull(wildcardClass36);
    }

    @Test
    public void test2472() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2472");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[] doubleArray11 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray18 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray25 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray32 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray33 = new double[][] { doubleArray11, doubleArray18, doubleArray25, doubleArray32 };
        double[][] doubleArray34 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray33);
        double[][] doubleArray35 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray34);
        double[][] doubleArray36 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray35);
        double[][] doubleArray37 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray35);
        double[][] doubleArray38 = new double[][] {};
        double[][] doubleArray39 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray38);
        double[] doubleArray41 = new double[] { 1 };
        double[] doubleArray43 = new double[] { 1 };
        double[] doubleArray45 = new double[] { 1 };
        double[] doubleArray47 = new double[] { 1 };
        double[] doubleArray49 = new double[] { 1 };
        double[][] doubleArray50 = new double[][] { doubleArray41, doubleArray43, doubleArray45, doubleArray47, doubleArray49 };
        int[] intArray51 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray50, intArray51);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray38, intArray51);
        double[] doubleArray57 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray61 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray65 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray69 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray70 = new double[][] { doubleArray57, doubleArray61, doubleArray65, doubleArray69 };
        double[] doubleArray72 = new double[] { 1 };
        double[] doubleArray74 = new double[] { 1 };
        double[] doubleArray76 = new double[] { 1 };
        double[] doubleArray78 = new double[] { 1 };
        double[] doubleArray80 = new double[] { 1 };
        double[][] doubleArray81 = new double[][] { doubleArray72, doubleArray74, doubleArray76, doubleArray78, doubleArray80 };
        int[] intArray82 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray81, intArray82);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray70, intArray82);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray38, intArray82);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray37, intArray82);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray3, intArray82);
        java.lang.Class<?> wildcardClass88 = doubleArray3.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[]");
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray74), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray78), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray80), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray81);
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[]");
        org.junit.Assert.assertNotNull(wildcardClass88);
    }

    @Test
    public void test2473() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2473");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[] doubleArray31 = new double[] { 1 };
        double[] doubleArray33 = new double[] { 1 };
        double[] doubleArray35 = new double[] { 1 };
        double[] doubleArray37 = new double[] { 1 };
        double[] doubleArray39 = new double[] { 1 };
        double[][] doubleArray40 = new double[][] { doubleArray31, doubleArray33, doubleArray35, doubleArray37, doubleArray39 };
        int[] intArray41 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray40, intArray41);
        double[][] doubleArray43 = new double[][] {};
        double[][] doubleArray44 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray43);
        int[] intArray45 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray44, intArray45);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray40, intArray45);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray28, intArray45);
        double[][] doubleArray49 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray50 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray49);
        double[][] doubleArray51 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray50);
        double[][] doubleArray52 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray50);
        double[][] doubleArray53 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray50);
        double[][] doubleArray54 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray53);
        double[][] doubleArray55 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray53);
        double[][] doubleArray56 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray53);
        double[][] doubleArray57 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray53);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertNotNull(doubleArray57);
    }

    @Test
    public void test2474() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2474");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = new double[][] {};
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[] doubleArray5 = new double[] { 1 };
        double[] doubleArray7 = new double[] { 1 };
        double[] doubleArray9 = new double[] { 1 };
        double[] doubleArray11 = new double[] { 1 };
        double[] doubleArray13 = new double[] { 1 };
        double[][] doubleArray14 = new double[][] { doubleArray5, doubleArray7, doubleArray9, doubleArray11, doubleArray13 };
        int[] intArray15 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray14, intArray15);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray2, intArray15);
        double[] doubleArray21 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray25 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray29 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray33 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray34 = new double[][] { doubleArray21, doubleArray25, doubleArray29, doubleArray33 };
        double[] doubleArray36 = new double[] { 1 };
        double[] doubleArray38 = new double[] { 1 };
        double[] doubleArray40 = new double[] { 1 };
        double[] doubleArray42 = new double[] { 1 };
        double[] doubleArray44 = new double[] { 1 };
        double[][] doubleArray45 = new double[][] { doubleArray36, doubleArray38, doubleArray40, doubleArray42, doubleArray44 };
        int[] intArray46 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray45, intArray46);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray34, intArray46);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray2, intArray46);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray1, intArray46);
        double[][] doubleArray51 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray52 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray51);
        double[][] doubleArray53 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray52);
        double[][] doubleArray54 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray53);
        double[][] doubleArray55 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray54);
        double[][] doubleArray56 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray55);
        double[][] doubleArray57 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray56);
        double[][] doubleArray58 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray56);
        double[][] doubleArray59 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray58);
        double[][] doubleArray60 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray58);
        java.lang.Class<?> wildcardClass61 = doubleArray58.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertNotNull(wildcardClass61);
    }

    @Test
    public void test2475() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2475");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = new double[][] {};
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[] doubleArray8 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray12 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray16 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray20 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray21 = new double[][] { doubleArray8, doubleArray12, doubleArray16, doubleArray20 };
        double[] doubleArray23 = new double[] { 1 };
        double[] doubleArray25 = new double[] { 1 };
        double[] doubleArray27 = new double[] { 1 };
        double[] doubleArray29 = new double[] { 1 };
        double[] doubleArray31 = new double[] { 1 };
        double[][] doubleArray32 = new double[][] { doubleArray23, doubleArray25, doubleArray27, doubleArray29, doubleArray31 };
        int[] intArray33 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray32, intArray33);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray21, intArray33);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray3, intArray33);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray1, intArray33);
        double[][] doubleArray38 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray39 = new double[][] {};
        double[][] doubleArray40 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray39);
        double[] doubleArray42 = new double[] { 1 };
        double[] doubleArray44 = new double[] { 1 };
        double[] doubleArray46 = new double[] { 1 };
        double[] doubleArray48 = new double[] { 1 };
        double[] doubleArray50 = new double[] { 1 };
        double[][] doubleArray51 = new double[][] { doubleArray42, doubleArray44, doubleArray46, doubleArray48, doubleArray50 };
        int[] intArray52 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray51, intArray52);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray39, intArray52);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray1, intArray52);
        double[][] doubleArray56 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        java.lang.Class<?> wildcardClass57 = doubleArray1.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[]");
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertNotNull(wildcardClass57);
    }

    @Test
    public void test2476() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2476");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[] doubleArray31 = new double[] { 1 };
        double[] doubleArray33 = new double[] { 1 };
        double[] doubleArray35 = new double[] { 1 };
        double[] doubleArray37 = new double[] { 1 };
        double[] doubleArray39 = new double[] { 1 };
        double[][] doubleArray40 = new double[][] { doubleArray31, doubleArray33, doubleArray35, doubleArray37, doubleArray39 };
        int[] intArray41 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray40, intArray41);
        double[][] doubleArray43 = new double[][] {};
        double[][] doubleArray44 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray43);
        int[] intArray45 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray44, intArray45);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray40, intArray45);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray28, intArray45);
        double[][] doubleArray49 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray50 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray49);
        double[][] doubleArray51 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray50);
        double[][] doubleArray52 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray50);
        double[][] doubleArray53 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray50);
        double[][] doubleArray54 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray53);
        double[][] doubleArray55 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray54);
        double[][] doubleArray56 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray55);
        double[][] doubleArray57 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray55);
        double[][] doubleArray58 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray57);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertNotNull(doubleArray58);
    }

    @Test
    public void test2477() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2477");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray30 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray29);
        double[][] doubleArray31 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        double[][] doubleArray32 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray31);
        double[][] doubleArray33 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray31);
        double[][] doubleArray34 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray33);
        double[][] doubleArray35 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray33);
        double[][] doubleArray36 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray33);
        double[][] doubleArray37 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray33);
        java.lang.Class<?> wildcardClass38 = doubleArray37.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertNotNull(wildcardClass38);
    }

    @Test
    public void test2478() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2478");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[][] doubleArray5 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[][] doubleArray6 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray5);
        double[][] doubleArray7 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray5);
        java.lang.Class<?> wildcardClass8 = doubleArray5.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertNotNull(wildcardClass8);
    }

    @Test
    public void test2479() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2479");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        int[] intArray2 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray1, intArray2);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray5 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray6 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray5);
        double[][] doubleArray7 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray5);
        double[][] doubleArray8 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray5);
        double[][] doubleArray9 = new double[][] {};
        double[][] doubleArray10 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray9);
        double[][] doubleArray11 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray10);
        double[][] doubleArray12 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray11);
        double[][] doubleArray13 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray11);
        double[][] doubleArray14 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray11);
        double[][] doubleArray15 = new double[][] {};
        double[][] doubleArray16 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray15);
        double[][] doubleArray17 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray15);
        double[] doubleArray24 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray31 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray38 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray45 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray46 = new double[][] { doubleArray24, doubleArray31, doubleArray38, doubleArray45 };
        double[][] doubleArray47 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray46);
        double[][] doubleArray48 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray46);
        double[][] doubleArray49 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray46);
        double[][] doubleArray50 = new double[][] {};
        double[][] doubleArray51 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray50);
        int[] intArray52 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray51, intArray52);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray49, intArray52);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray17, intArray52);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray11, intArray52);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray8, intArray52);
        double[][] doubleArray58 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray8);
        java.lang.Class<?> wildcardClass59 = doubleArray8.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[]");
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertNotNull(wildcardClass59);
    }

    @Test
    public void test2480() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2480");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = new double[][] {};
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[] doubleArray5 = new double[] { 1 };
        double[] doubleArray7 = new double[] { 1 };
        double[] doubleArray9 = new double[] { 1 };
        double[] doubleArray11 = new double[] { 1 };
        double[] doubleArray13 = new double[] { 1 };
        double[][] doubleArray14 = new double[][] { doubleArray5, doubleArray7, doubleArray9, doubleArray11, doubleArray13 };
        int[] intArray15 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray14, intArray15);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray2, intArray15);
        double[] doubleArray21 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray25 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray29 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray33 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray34 = new double[][] { doubleArray21, doubleArray25, doubleArray29, doubleArray33 };
        double[] doubleArray36 = new double[] { 1 };
        double[] doubleArray38 = new double[] { 1 };
        double[] doubleArray40 = new double[] { 1 };
        double[] doubleArray42 = new double[] { 1 };
        double[] doubleArray44 = new double[] { 1 };
        double[][] doubleArray45 = new double[][] { doubleArray36, doubleArray38, doubleArray40, doubleArray42, doubleArray44 };
        int[] intArray46 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray45, intArray46);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray34, intArray46);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray2, intArray46);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray1, intArray46);
        double[] doubleArray52 = new double[] { 1 };
        double[] doubleArray54 = new double[] { 1 };
        double[] doubleArray56 = new double[] { 1 };
        double[] doubleArray58 = new double[] { 1 };
        double[] doubleArray60 = new double[] { 1 };
        double[][] doubleArray61 = new double[][] { doubleArray52, doubleArray54, doubleArray56, doubleArray58, doubleArray60 };
        int[] intArray62 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray61, intArray62);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray1, intArray62);
        double[][] doubleArray65 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray66 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray67 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray66);
        double[][] doubleArray68 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray66);
        double[][] doubleArray69 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray68);
        double[][] doubleArray70 = new double[][] {};
        double[][] doubleArray71 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray70);
        double[][] doubleArray72 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray70);
        double[] doubleArray74 = new double[] { 1 };
        double[] doubleArray76 = new double[] { 1 };
        double[] doubleArray78 = new double[] { 1 };
        double[] doubleArray80 = new double[] { 1 };
        double[] doubleArray82 = new double[] { 1 };
        double[][] doubleArray83 = new double[][] { doubleArray74, doubleArray76, doubleArray78, doubleArray80, doubleArray82 };
        int[] intArray84 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray83, intArray84);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray72, intArray84);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray69, intArray84);
        java.lang.Class<?> wildcardClass88 = doubleArray69.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[]");
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[]");
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray74), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray78), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray80), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray82), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray83);
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray84), "[]");
        org.junit.Assert.assertNotNull(wildcardClass88);
    }

    @Test
    public void test2481() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2481");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = new double[][] {};
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[] doubleArray5 = new double[] { 1 };
        double[] doubleArray7 = new double[] { 1 };
        double[] doubleArray9 = new double[] { 1 };
        double[] doubleArray11 = new double[] { 1 };
        double[] doubleArray13 = new double[] { 1 };
        double[][] doubleArray14 = new double[][] { doubleArray5, doubleArray7, doubleArray9, doubleArray11, doubleArray13 };
        int[] intArray15 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray14, intArray15);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray2, intArray15);
        double[] doubleArray21 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray25 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray29 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray33 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray34 = new double[][] { doubleArray21, doubleArray25, doubleArray29, doubleArray33 };
        double[] doubleArray36 = new double[] { 1 };
        double[] doubleArray38 = new double[] { 1 };
        double[] doubleArray40 = new double[] { 1 };
        double[] doubleArray42 = new double[] { 1 };
        double[] doubleArray44 = new double[] { 1 };
        double[][] doubleArray45 = new double[][] { doubleArray36, doubleArray38, doubleArray40, doubleArray42, doubleArray44 };
        int[] intArray46 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray45, intArray46);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray34, intArray46);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray2, intArray46);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray1, intArray46);
        double[][] doubleArray51 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray52 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray51);
        double[][] doubleArray53 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray51);
        double[][] doubleArray54 = new double[][] {};
        double[][] doubleArray55 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray54);
        double[][] doubleArray56 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray55);
        double[] doubleArray60 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray64 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray68 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray72 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray73 = new double[][] { doubleArray60, doubleArray64, doubleArray68, doubleArray72 };
        double[] doubleArray75 = new double[] { 1 };
        double[] doubleArray77 = new double[] { 1 };
        double[] doubleArray79 = new double[] { 1 };
        double[] doubleArray81 = new double[] { 1 };
        double[] doubleArray83 = new double[] { 1 };
        double[][] doubleArray84 = new double[][] { doubleArray75, doubleArray77, doubleArray79, doubleArray81, doubleArray83 };
        int[] intArray85 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray84, intArray85);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray73, intArray85);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray56, intArray85);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray53, intArray85);
        java.lang.Class<?> wildcardClass90 = intArray85.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray75), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray77), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray79), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray81), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray83), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray84);
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray85), "[]");
        org.junit.Assert.assertNotNull(wildcardClass90);
    }

    @Test
    public void test2482() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2482");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[] doubleArray31 = new double[] { 1 };
        double[] doubleArray33 = new double[] { 1 };
        double[] doubleArray35 = new double[] { 1 };
        double[] doubleArray37 = new double[] { 1 };
        double[] doubleArray39 = new double[] { 1 };
        double[][] doubleArray40 = new double[][] { doubleArray31, doubleArray33, doubleArray35, doubleArray37, doubleArray39 };
        int[] intArray41 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray40, intArray41);
        double[][] doubleArray43 = new double[][] {};
        double[][] doubleArray44 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray43);
        int[] intArray45 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray44, intArray45);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray40, intArray45);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray28, intArray45);
        double[][] doubleArray49 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray50 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray51 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray52 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray53 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray54 = null;
        double[] doubleArray61 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray68 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray75 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray82 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray83 = new double[][] { doubleArray61, doubleArray68, doubleArray75, doubleArray82 };
        double[][] doubleArray84 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray83);
        double[][] doubleArray85 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray83);
        double[][] doubleArray86 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray83);
        double[][] doubleArray87 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray86);
        double[][] doubleArray88 = new double[][] {};
        double[][] doubleArray89 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray88);
        int[] intArray90 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray89, intArray90);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray87, intArray90);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray54, intArray90);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray28, intArray90);
        java.lang.Class<?> wildcardClass95 = doubleArray28.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray75), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray82), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray83);
        org.junit.Assert.assertNotNull(doubleArray84);
        org.junit.Assert.assertNotNull(doubleArray85);
        org.junit.Assert.assertNotNull(doubleArray86);
        org.junit.Assert.assertNotNull(doubleArray87);
        org.junit.Assert.assertNotNull(doubleArray88);
        org.junit.Assert.assertNotNull(doubleArray89);
        org.junit.Assert.assertNotNull(intArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray90), "[]");
        org.junit.Assert.assertNotNull(wildcardClass95);
    }

    @Test
    public void test2483() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2483");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray5 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray4);
        double[][] doubleArray6 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray4);
        double[][] doubleArray7 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray6);
        double[][] doubleArray8 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray6);
        double[][] doubleArray9 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray6);
        java.lang.Class<?> wildcardClass10 = doubleArray9.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertNotNull(wildcardClass10);
    }

    @Test
    public void test2484() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2484");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[][] doubleArray5 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray4);
        double[] doubleArray7 = new double[] { 1 };
        double[] doubleArray9 = new double[] { 1 };
        double[] doubleArray11 = new double[] { 1 };
        double[] doubleArray13 = new double[] { 1 };
        double[] doubleArray15 = new double[] { 1 };
        double[][] doubleArray16 = new double[][] { doubleArray7, doubleArray9, doubleArray11, doubleArray13, doubleArray15 };
        int[] intArray17 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray16, intArray17);
        double[][] doubleArray19 = new double[][] {};
        double[][] doubleArray20 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray19);
        int[] intArray21 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray20, intArray21);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray16, intArray21);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray4, intArray21);
        java.lang.Class<?> wildcardClass25 = intArray21.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[]");
        org.junit.Assert.assertNotNull(wildcardClass25);
    }

    @Test
    public void test2485() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2485");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray30 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray29);
        double[][] doubleArray31 = new double[][] {};
        double[][] doubleArray32 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray31);
        double[] doubleArray34 = new double[] { 1 };
        double[] doubleArray36 = new double[] { 1 };
        double[] doubleArray38 = new double[] { 1 };
        double[] doubleArray40 = new double[] { 1 };
        double[] doubleArray42 = new double[] { 1 };
        double[][] doubleArray43 = new double[][] { doubleArray34, doubleArray36, doubleArray38, doubleArray40, doubleArray42 };
        int[] intArray44 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray43, intArray44);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray31, intArray44);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray30, intArray44);
        double[][] doubleArray48 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        double[][] doubleArray49 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        double[][] doubleArray50 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        double[][] doubleArray51 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray50);
        double[][] doubleArray52 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray51);
        double[][] doubleArray53 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray51);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertNotNull(doubleArray53);
    }

    @Test
    public void test2486() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2486");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray30 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray29);
        double[][] doubleArray31 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        double[][] doubleArray32 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray31);
        double[][] doubleArray33 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray31);
        double[][] doubleArray34 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray31);
        double[][] doubleArray35 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray31);
        double[][] doubleArray36 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray35);
        double[][] doubleArray37 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray35);
        double[][] doubleArray38 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray35);
        double[][] doubleArray39 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray35);
        double[][] doubleArray40 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray39);
        java.lang.Class<?> wildcardClass41 = doubleArray39.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertNotNull(wildcardClass41);
    }

    @Test
    public void test2487() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2487");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[] doubleArray8 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray15 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray22 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray29 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray30 = new double[][] { doubleArray8, doubleArray15, doubleArray22, doubleArray29 };
        double[][] doubleArray31 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        double[][] doubleArray32 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        double[][] doubleArray33 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        double[][] doubleArray34 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray33);
        double[] doubleArray41 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray48 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray55 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray62 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray63 = new double[][] { doubleArray41, doubleArray48, doubleArray55, doubleArray62 };
        double[][] doubleArray64 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray63);
        double[] doubleArray66 = new double[] { 1 };
        double[] doubleArray68 = new double[] { 1 };
        double[] doubleArray70 = new double[] { 1 };
        double[] doubleArray72 = new double[] { 1 };
        double[] doubleArray74 = new double[] { 1 };
        double[][] doubleArray75 = new double[][] { doubleArray66, doubleArray68, doubleArray70, doubleArray72, doubleArray74 };
        int[] intArray76 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray75, intArray76);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray64, intArray76);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray34, intArray76);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray1, intArray76);
        double[][] doubleArray81 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray82 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray83 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        java.lang.Class<?> wildcardClass84 = doubleArray83.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray66), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray70), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray74), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[]");
        org.junit.Assert.assertNotNull(doubleArray81);
        org.junit.Assert.assertNotNull(doubleArray82);
        org.junit.Assert.assertNotNull(doubleArray83);
        org.junit.Assert.assertNotNull(wildcardClass84);
    }

    @Test
    public void test2488() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2488");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray30 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray29);
        double[][] doubleArray31 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        double[][] doubleArray32 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray31);
        double[][] doubleArray33 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray31);
        double[][] doubleArray34 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray31);
        double[][] doubleArray35 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray34);
        double[][] doubleArray36 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray34);
        double[] doubleArray43 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray50 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray57 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray64 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray65 = new double[][] { doubleArray43, doubleArray50, doubleArray57, doubleArray64 };
        double[][] doubleArray66 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray65);
        double[][] doubleArray67 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray66);
        double[][] doubleArray68 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray67);
        double[][] doubleArray69 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray68);
        double[][] doubleArray70 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray68);
        double[] doubleArray72 = new double[] { 1 };
        double[] doubleArray74 = new double[] { 1 };
        double[] doubleArray76 = new double[] { 1 };
        double[] doubleArray78 = new double[] { 1 };
        double[] doubleArray80 = new double[] { 1 };
        double[][] doubleArray81 = new double[][] { doubleArray72, doubleArray74, doubleArray76, doubleArray78, doubleArray80 };
        int[] intArray82 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray81, intArray82);
        double[][] doubleArray84 = new double[][] {};
        double[][] doubleArray85 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray84);
        int[] intArray86 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray85, intArray86);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray81, intArray86);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray70, intArray86);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray34, intArray86);
        double[][] doubleArray91 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray34);
        double[][] doubleArray92 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray91);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray74), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray78), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray80), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray81);
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[]");
        org.junit.Assert.assertNotNull(doubleArray84);
        org.junit.Assert.assertNotNull(doubleArray85);
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray86), "[]");
        org.junit.Assert.assertNotNull(doubleArray91);
        org.junit.Assert.assertNotNull(doubleArray92);
    }

    @Test
    public void test2489() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2489");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[] doubleArray4 = new double[] { 1 };
        double[] doubleArray6 = new double[] { 1 };
        double[] doubleArray8 = new double[] { 1 };
        double[] doubleArray10 = new double[] { 1 };
        double[] doubleArray12 = new double[] { 1 };
        double[][] doubleArray13 = new double[][] { doubleArray4, doubleArray6, doubleArray8, doubleArray10, doubleArray12 };
        int[] intArray14 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray13, intArray14);
        double[] doubleArray22 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray29 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray36 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray43 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray44 = new double[][] { doubleArray22, doubleArray29, doubleArray36, doubleArray43 };
        double[][] doubleArray45 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray44);
        double[] doubleArray47 = new double[] { 1 };
        double[] doubleArray49 = new double[] { 1 };
        double[] doubleArray51 = new double[] { 1 };
        double[] doubleArray53 = new double[] { 1 };
        double[] doubleArray55 = new double[] { 1 };
        double[][] doubleArray56 = new double[][] { doubleArray47, doubleArray49, doubleArray51, doubleArray53, doubleArray55 };
        int[] intArray57 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray56, intArray57);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray45, intArray57);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray13, intArray57);
        double[] doubleArray62 = new double[] { 1 };
        double[] doubleArray64 = new double[] { 1 };
        double[] doubleArray66 = new double[] { 1 };
        double[] doubleArray68 = new double[] { 1 };
        double[] doubleArray70 = new double[] { 1 };
        double[][] doubleArray71 = new double[][] { doubleArray62, doubleArray64, doubleArray66, doubleArray68, doubleArray70 };
        int[] intArray72 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray71, intArray72);
        double[][] doubleArray74 = new double[][] {};
        double[][] doubleArray75 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray74);
        int[] intArray76 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray75, intArray76);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray71, intArray76);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray13, intArray76);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray2, intArray76);
        double[][] doubleArray81 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray82 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray83 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray82);
        double[][] doubleArray84 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray83);
        double[][] doubleArray85 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray83);
        java.lang.Class<?> wildcardClass86 = doubleArray85.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[]");
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[]");
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray66), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray70), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[]");
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[]");
        org.junit.Assert.assertNotNull(doubleArray81);
        org.junit.Assert.assertNotNull(doubleArray82);
        org.junit.Assert.assertNotNull(doubleArray83);
        org.junit.Assert.assertNotNull(doubleArray84);
        org.junit.Assert.assertNotNull(doubleArray85);
        org.junit.Assert.assertNotNull(wildcardClass86);
    }

    @Test
    public void test2490() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2490");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray30 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray29);
        double[][] doubleArray31 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        double[][] doubleArray32 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray31);
        double[][] doubleArray33 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray31);
        double[][] doubleArray34 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray33);
        double[][] doubleArray35 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray34);
        double[][] doubleArray36 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray34);
        double[][] doubleArray37 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray34);
        double[] doubleArray44 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray51 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray58 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray65 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray66 = new double[][] { doubleArray44, doubleArray51, doubleArray58, doubleArray65 };
        double[][] doubleArray67 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray66);
        double[][] doubleArray68 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray67);
        double[][] doubleArray69 = new double[][] {};
        double[][] doubleArray70 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray69);
        double[] doubleArray72 = new double[] { 1 };
        double[] doubleArray74 = new double[] { 1 };
        double[] doubleArray76 = new double[] { 1 };
        double[] doubleArray78 = new double[] { 1 };
        double[] doubleArray80 = new double[] { 1 };
        double[][] doubleArray81 = new double[][] { doubleArray72, doubleArray74, doubleArray76, doubleArray78, doubleArray80 };
        int[] intArray82 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray81, intArray82);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray69, intArray82);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray68, intArray82);
        double[][] doubleArray86 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray68);
        double[][] doubleArray87 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray68);
        double[][] doubleArray88 = null;
        double[][] doubleArray89 = new double[][] {};
        double[][] doubleArray90 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray89);
        int[] intArray91 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray90, intArray91);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray88, intArray91);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray87, intArray91);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray34, intArray91);
        double[][] doubleArray96 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray34);
        java.lang.Class<?> wildcardClass97 = doubleArray34.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray74), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray78), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray80), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray81);
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[]");
        org.junit.Assert.assertNotNull(doubleArray86);
        org.junit.Assert.assertNotNull(doubleArray87);
        org.junit.Assert.assertNotNull(doubleArray89);
        org.junit.Assert.assertNotNull(doubleArray90);
        org.junit.Assert.assertNotNull(intArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray91), "[]");
        org.junit.Assert.assertNotNull(doubleArray96);
        org.junit.Assert.assertNotNull(wildcardClass97);
    }

    @Test
    public void test2491() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2491");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[] doubleArray31 = new double[] { 1 };
        double[] doubleArray33 = new double[] { 1 };
        double[] doubleArray35 = new double[] { 1 };
        double[] doubleArray37 = new double[] { 1 };
        double[] doubleArray39 = new double[] { 1 };
        double[][] doubleArray40 = new double[][] { doubleArray31, doubleArray33, doubleArray35, doubleArray37, doubleArray39 };
        int[] intArray41 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray40, intArray41);
        double[][] doubleArray43 = new double[][] {};
        double[][] doubleArray44 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray43);
        int[] intArray45 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray44, intArray45);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray40, intArray45);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray28, intArray45);
        double[][] doubleArray49 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray50 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray51 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray50);
        double[][] doubleArray52 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray50);
        double[][] doubleArray53 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray52);
        double[][] doubleArray54 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray52);
        int[] intArray55 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray54, intArray55);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertNotNull(doubleArray54);
    }

    @Test
    public void test2492() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2492");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[] doubleArray31 = new double[] { 1 };
        double[] doubleArray33 = new double[] { 1 };
        double[] doubleArray35 = new double[] { 1 };
        double[] doubleArray37 = new double[] { 1 };
        double[] doubleArray39 = new double[] { 1 };
        double[][] doubleArray40 = new double[][] { doubleArray31, doubleArray33, doubleArray35, doubleArray37, doubleArray39 };
        int[] intArray41 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray40, intArray41);
        double[][] doubleArray43 = new double[][] {};
        double[][] doubleArray44 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray43);
        int[] intArray45 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray44, intArray45);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray40, intArray45);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray28, intArray45);
        double[][] doubleArray49 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray50 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray51 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray52 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray51);
        double[][] doubleArray53 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray51);
        double[][] doubleArray54 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray53);
        double[][] doubleArray55 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray53);
        double[][] doubleArray56 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray53);
        java.lang.Class<?> wildcardClass57 = doubleArray56.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertNotNull(wildcardClass57);
    }

    @Test
    public void test2493() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2493");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray5 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray4);
        double[][] doubleArray6 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray4);
        double[][] doubleArray7 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray4);
        double[][] doubleArray8 = null;
        double[] doubleArray15 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray22 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray29 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray36 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray37 = new double[][] { doubleArray15, doubleArray22, doubleArray29, doubleArray36 };
        double[][] doubleArray38 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray37);
        double[][] doubleArray39 = new double[][] {};
        double[][] doubleArray40 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray39);
        double[][] doubleArray41 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray40);
        double[][] doubleArray42 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray41);
        double[][] doubleArray43 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray41);
        double[][] doubleArray44 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray41);
        double[][] doubleArray45 = new double[][] {};
        double[][] doubleArray46 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray45);
        double[][] doubleArray47 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray45);
        double[] doubleArray54 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray61 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray68 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray75 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray76 = new double[][] { doubleArray54, doubleArray61, doubleArray68, doubleArray75 };
        double[][] doubleArray77 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray76);
        double[][] doubleArray78 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray76);
        double[][] doubleArray79 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray76);
        double[][] doubleArray80 = new double[][] {};
        double[][] doubleArray81 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray80);
        int[] intArray82 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray81, intArray82);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray79, intArray82);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray47, intArray82);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray41, intArray82);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray38, intArray82);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray8, intArray82);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray7, intArray82);
        double[][] doubleArray90 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray7);
        java.lang.Class<?> wildcardClass91 = doubleArray90.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray75), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertNotNull(doubleArray81);
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[]");
        org.junit.Assert.assertNotNull(doubleArray90);
        org.junit.Assert.assertNotNull(wildcardClass91);
    }

    @Test
    public void test2494() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2494");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[] doubleArray3 = new double[] { 1 };
        double[] doubleArray5 = new double[] { 1 };
        double[] doubleArray7 = new double[] { 1 };
        double[] doubleArray9 = new double[] { 1 };
        double[] doubleArray11 = new double[] { 1 };
        double[][] doubleArray12 = new double[][] { doubleArray3, doubleArray5, doubleArray7, doubleArray9, doubleArray11 };
        int[] intArray13 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray12, intArray13);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray0, intArray13);
        double[] doubleArray19 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray23 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray27 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray31 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray32 = new double[][] { doubleArray19, doubleArray23, doubleArray27, doubleArray31 };
        double[] doubleArray34 = new double[] { 1 };
        double[] doubleArray36 = new double[] { 1 };
        double[] doubleArray38 = new double[] { 1 };
        double[] doubleArray40 = new double[] { 1 };
        double[] doubleArray42 = new double[] { 1 };
        double[][] doubleArray43 = new double[][] { doubleArray34, doubleArray36, doubleArray38, doubleArray40, doubleArray42 };
        int[] intArray44 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray43, intArray44);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray32, intArray44);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray0, intArray44);
        double[] doubleArray49 = new double[] { 1 };
        double[] doubleArray51 = new double[] { 1 };
        double[] doubleArray53 = new double[] { 1 };
        double[] doubleArray55 = new double[] { 1 };
        double[] doubleArray57 = new double[] { 1 };
        double[][] doubleArray58 = new double[][] { doubleArray49, doubleArray51, doubleArray53, doubleArray55, doubleArray57 };
        int[] intArray59 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray58, intArray59);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray0, intArray59);
        double[][] doubleArray62 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray63 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray64 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray63);
        double[][] doubleArray65 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray63);
        java.lang.Class<?> wildcardClass66 = doubleArray65.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[]");
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertNotNull(wildcardClass66);
    }

    @Test
    public void test2495() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2495");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray3 = new double[][] {};
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[][] doubleArray5 = new double[][] {};
        double[][] doubleArray6 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray5);
        double[] doubleArray8 = new double[] { 1 };
        double[] doubleArray10 = new double[] { 1 };
        double[] doubleArray12 = new double[] { 1 };
        double[] doubleArray14 = new double[] { 1 };
        double[] doubleArray16 = new double[] { 1 };
        double[][] doubleArray17 = new double[][] { doubleArray8, doubleArray10, doubleArray12, doubleArray14, doubleArray16 };
        int[] intArray18 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray17, intArray18);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray5, intArray18);
        double[] doubleArray24 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray28 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray32 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray36 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray37 = new double[][] { doubleArray24, doubleArray28, doubleArray32, doubleArray36 };
        double[] doubleArray39 = new double[] { 1 };
        double[] doubleArray41 = new double[] { 1 };
        double[] doubleArray43 = new double[] { 1 };
        double[] doubleArray45 = new double[] { 1 };
        double[] doubleArray47 = new double[] { 1 };
        double[][] doubleArray48 = new double[][] { doubleArray39, doubleArray41, doubleArray43, doubleArray45, doubleArray47 };
        int[] intArray49 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray48, intArray49);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray37, intArray49);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray5, intArray49);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray4, intArray49);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray2, intArray49);
        double[][] doubleArray55 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray56 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray57 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        java.lang.Class<?> wildcardClass58 = doubleArray57.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[]");
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[]");
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertNotNull(wildcardClass58);
    }

    @Test
    public void test2496() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2496");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray30 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray31 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        double[][] doubleArray32 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        double[][] doubleArray33 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray32);
        double[][] doubleArray34 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray33);
        double[][] doubleArray35 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray34);
        double[][] doubleArray36 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray35);
        double[][] doubleArray37 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray36);
        double[][] doubleArray38 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray36);
        java.lang.Class<?> wildcardClass39 = doubleArray38.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertNotNull(wildcardClass39);
    }

    @Test
    public void test2497() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2497");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[] doubleArray31 = new double[] { 1 };
        double[] doubleArray33 = new double[] { 1 };
        double[] doubleArray35 = new double[] { 1 };
        double[] doubleArray37 = new double[] { 1 };
        double[] doubleArray39 = new double[] { 1 };
        double[][] doubleArray40 = new double[][] { doubleArray31, doubleArray33, doubleArray35, doubleArray37, doubleArray39 };
        int[] intArray41 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray40, intArray41);
        double[][] doubleArray43 = new double[][] {};
        double[][] doubleArray44 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray43);
        int[] intArray45 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray44, intArray45);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray40, intArray45);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray28, intArray45);
        double[][] doubleArray49 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray50 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray51 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray52 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray51);
        double[][] doubleArray53 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray51);
        double[][] doubleArray54 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray53);
        double[][] doubleArray55 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray54);
        double[][] doubleArray56 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray54);
        double[][] doubleArray57 = null;
        double[][] doubleArray58 = null;
        double[][] doubleArray59 = new double[][] {};
        double[][] doubleArray60 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray59);
        double[][] doubleArray61 = new double[][] {};
        double[][] doubleArray62 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray61);
        double[][] doubleArray63 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray62);
        double[] doubleArray67 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray71 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray75 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray79 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray80 = new double[][] { doubleArray67, doubleArray71, doubleArray75, doubleArray79 };
        double[] doubleArray82 = new double[] { 1 };
        double[] doubleArray84 = new double[] { 1 };
        double[] doubleArray86 = new double[] { 1 };
        double[] doubleArray88 = new double[] { 1 };
        double[] doubleArray90 = new double[] { 1 };
        double[][] doubleArray91 = new double[][] { doubleArray82, doubleArray84, doubleArray86, doubleArray88, doubleArray90 };
        int[] intArray92 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray91, intArray92);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray80, intArray92);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray62, intArray92);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray60, intArray92);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray58, intArray92);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray57, intArray92);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray56, intArray92);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray71), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray75), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray79), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertNotNull(doubleArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray82), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray84), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray86), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray88), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray90), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray91);
        org.junit.Assert.assertNotNull(intArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray92), "[]");
    }

    @Test
    public void test2498() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2498");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[] doubleArray6 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray10 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray14 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray18 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray19 = new double[][] { doubleArray6, doubleArray10, doubleArray14, doubleArray18 };
        double[] doubleArray21 = new double[] { 1 };
        double[] doubleArray23 = new double[] { 1 };
        double[] doubleArray25 = new double[] { 1 };
        double[] doubleArray27 = new double[] { 1 };
        double[] doubleArray29 = new double[] { 1 };
        double[][] doubleArray30 = new double[][] { doubleArray21, doubleArray23, doubleArray25, doubleArray27, doubleArray29 };
        int[] intArray31 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray30, intArray31);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray19, intArray31);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray2, intArray31);
        double[][] doubleArray35 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray36 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray37 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray36);
        java.lang.Class<?> wildcardClass38 = doubleArray37.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertNotNull(wildcardClass38);
    }

    @Test
    public void test2499() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2499");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray30 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray29);
        double[][] doubleArray31 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        double[][] doubleArray32 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        double[][] doubleArray33 = new double[][] {};
        double[][] doubleArray34 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray33);
        double[] doubleArray36 = new double[] { 1 };
        double[] doubleArray38 = new double[] { 1 };
        double[] doubleArray40 = new double[] { 1 };
        double[] doubleArray42 = new double[] { 1 };
        double[] doubleArray44 = new double[] { 1 };
        double[][] doubleArray45 = new double[][] { doubleArray36, doubleArray38, doubleArray40, doubleArray42, doubleArray44 };
        int[] intArray46 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray45, intArray46);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray33, intArray46);
        double[] doubleArray52 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray56 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray60 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray64 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray65 = new double[][] { doubleArray52, doubleArray56, doubleArray60, doubleArray64 };
        double[] doubleArray67 = new double[] { 1 };
        double[] doubleArray69 = new double[] { 1 };
        double[] doubleArray71 = new double[] { 1 };
        double[] doubleArray73 = new double[] { 1 };
        double[] doubleArray75 = new double[] { 1 };
        double[][] doubleArray76 = new double[][] { doubleArray67, doubleArray69, doubleArray71, doubleArray73, doubleArray75 };
        int[] intArray77 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray76, intArray77);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray65, intArray77);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray33, intArray77);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray32, intArray77);
        double[][] doubleArray82 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray32);
        double[][] doubleArray83 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray82);
        double[][] doubleArray84 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray82);
        double[][] doubleArray85 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray84);
        double[][] doubleArray86 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray84);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[]");
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray71), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray73), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray75), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray77), "[]");
        org.junit.Assert.assertNotNull(doubleArray82);
        org.junit.Assert.assertNotNull(doubleArray83);
        org.junit.Assert.assertNotNull(doubleArray84);
        org.junit.Assert.assertNotNull(doubleArray85);
        org.junit.Assert.assertNotNull(doubleArray86);
    }

    @Test
    public void test2500() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2500");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[] doubleArray6 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray10 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray14 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray18 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray19 = new double[][] { doubleArray6, doubleArray10, doubleArray14, doubleArray18 };
        double[] doubleArray21 = new double[] { 1 };
        double[] doubleArray23 = new double[] { 1 };
        double[] doubleArray25 = new double[] { 1 };
        double[] doubleArray27 = new double[] { 1 };
        double[] doubleArray29 = new double[] { 1 };
        double[][] doubleArray30 = new double[][] { doubleArray21, doubleArray23, doubleArray25, doubleArray27, doubleArray29 };
        int[] intArray31 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray30, intArray31);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray19, intArray31);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray1, intArray31);
        double[][] doubleArray35 = null;
        double[][] doubleArray36 = null;
        double[][] doubleArray37 = new double[][] {};
        double[][] doubleArray38 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray37);
        double[][] doubleArray39 = new double[][] {};
        double[][] doubleArray40 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray39);
        double[][] doubleArray41 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray40);
        double[] doubleArray45 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray49 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray53 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray57 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray58 = new double[][] { doubleArray45, doubleArray49, doubleArray53, doubleArray57 };
        double[] doubleArray60 = new double[] { 1 };
        double[] doubleArray62 = new double[] { 1 };
        double[] doubleArray64 = new double[] { 1 };
        double[] doubleArray66 = new double[] { 1 };
        double[] doubleArray68 = new double[] { 1 };
        double[][] doubleArray69 = new double[][] { doubleArray60, doubleArray62, doubleArray64, doubleArray66, doubleArray68 };
        int[] intArray70 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray69, intArray70);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray58, intArray70);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray40, intArray70);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray38, intArray70);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray36, intArray70);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray35, intArray70);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray1, intArray70);
        java.lang.Class<?> wildcardClass78 = intArray70.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray66), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[]");
        org.junit.Assert.assertNotNull(wildcardClass78);
    }
}


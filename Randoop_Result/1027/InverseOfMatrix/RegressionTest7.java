package InverseOfMatrix;

import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class RegressionTest7 {

    public static boolean debug = false;

    @Test
    public void test3501() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3501");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = new double[][] {};
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[] doubleArray8 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray12 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray16 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray20 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray21 = new double[][] { doubleArray8, doubleArray12, doubleArray16, doubleArray20 };
        double[] doubleArray23 = new double[] { 1 };
        double[] doubleArray25 = new double[] { 1 };
        double[] doubleArray27 = new double[] { 1 };
        double[] doubleArray29 = new double[] { 1 };
        double[] doubleArray31 = new double[] { 1 };
        double[][] doubleArray32 = new double[][] { doubleArray23, doubleArray25, doubleArray27, doubleArray29, doubleArray31 };
        int[] intArray33 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray32, intArray33);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray21, intArray33);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray3, intArray33);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray1, intArray33);
        double[][] doubleArray38 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray39 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray38);
        double[] doubleArray41 = new double[] { 1 };
        double[] doubleArray43 = new double[] { 1 };
        double[] doubleArray45 = new double[] { 1 };
        double[] doubleArray47 = new double[] { 1 };
        double[] doubleArray49 = new double[] { 1 };
        double[][] doubleArray50 = new double[][] { doubleArray41, doubleArray43, doubleArray45, doubleArray47, doubleArray49 };
        int[] intArray51 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray50, intArray51);
        double[][] doubleArray53 = new double[][] {};
        double[][] doubleArray54 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray53);
        int[] intArray55 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray54, intArray55);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray50, intArray55);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray38, intArray55);
        double[][] doubleArray59 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray38);
        double[][] doubleArray60 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray38);
        double[][] doubleArray61 = null;
        double[] doubleArray65 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray69 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray73 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray77 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray78 = new double[][] { doubleArray65, doubleArray69, doubleArray73, doubleArray77 };
        double[] doubleArray80 = new double[] { 1 };
        double[] doubleArray82 = new double[] { 1 };
        double[] doubleArray84 = new double[] { 1 };
        double[] doubleArray86 = new double[] { 1 };
        double[] doubleArray88 = new double[] { 1 };
        double[][] doubleArray89 = new double[][] { doubleArray80, doubleArray82, doubleArray84, doubleArray86, doubleArray88 };
        int[] intArray90 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray89, intArray90);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray78, intArray90);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray61, intArray90);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray38, intArray90);
        double[][] doubleArray95 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray38);
        double[][] doubleArray96 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray95);
        double[][] doubleArray97 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray96);
        java.lang.Class<?> wildcardClass98 = doubleArray96.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[]");
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[]");
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray73), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray77), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray80), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray82), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray84), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray86), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray88), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray89);
        org.junit.Assert.assertNotNull(intArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray90), "[]");
        org.junit.Assert.assertNotNull(doubleArray95);
        org.junit.Assert.assertNotNull(doubleArray96);
        org.junit.Assert.assertNotNull(doubleArray97);
        org.junit.Assert.assertNotNull(wildcardClass98);
    }

    @Test
    public void test3502() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3502");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray5 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray4);
        double[][] doubleArray6 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray4);
        double[][] doubleArray7 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray6);
        double[][] doubleArray8 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray6);
        double[][] doubleArray9 = null;
        double[][] doubleArray10 = null;
        double[][] doubleArray11 = new double[][] {};
        double[][] doubleArray12 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray11);
        double[][] doubleArray13 = new double[][] {};
        double[][] doubleArray14 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray13);
        double[][] doubleArray15 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray14);
        double[] doubleArray19 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray23 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray27 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray31 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray32 = new double[][] { doubleArray19, doubleArray23, doubleArray27, doubleArray31 };
        double[] doubleArray34 = new double[] { 1 };
        double[] doubleArray36 = new double[] { 1 };
        double[] doubleArray38 = new double[] { 1 };
        double[] doubleArray40 = new double[] { 1 };
        double[] doubleArray42 = new double[] { 1 };
        double[][] doubleArray43 = new double[][] { doubleArray34, doubleArray36, doubleArray38, doubleArray40, doubleArray42 };
        int[] intArray44 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray43, intArray44);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray32, intArray44);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray14, intArray44);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray12, intArray44);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray10, intArray44);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray9, intArray44);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray8, intArray44);
        double[] doubleArray58 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray65 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray72 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray79 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray80 = new double[][] { doubleArray58, doubleArray65, doubleArray72, doubleArray79 };
        double[][] doubleArray81 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray80);
        double[][] doubleArray82 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray80);
        double[][] doubleArray83 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray80);
        double[][] doubleArray84 = new double[][] {};
        double[][] doubleArray85 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray84);
        int[] intArray86 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray85, intArray86);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray83, intArray86);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray8, intArray86);
        double[][] doubleArray90 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray8);
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[]");
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray79), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertNotNull(doubleArray81);
        org.junit.Assert.assertNotNull(doubleArray82);
        org.junit.Assert.assertNotNull(doubleArray83);
        org.junit.Assert.assertNotNull(doubleArray84);
        org.junit.Assert.assertNotNull(doubleArray85);
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray86), "[]");
        org.junit.Assert.assertNotNull(doubleArray90);
    }

    @Test
    public void test3503() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3503");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        int[] intArray2 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray1, intArray2);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray5 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray6 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray5);
        double[][] doubleArray7 = new double[][] {};
        double[][] doubleArray8 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray7);
        double[][] doubleArray9 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray8);
        double[][] doubleArray10 = new double[][] {};
        double[][] doubleArray11 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray10);
        double[][] doubleArray12 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray10);
        double[][] doubleArray13 = new double[][] {};
        double[][] doubleArray14 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray13);
        double[][] doubleArray15 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray14);
        double[][] doubleArray16 = new double[][] {};
        double[][] doubleArray17 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray16);
        double[][] doubleArray18 = new double[][] {};
        double[][] doubleArray19 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray18);
        double[] doubleArray21 = new double[] { 1 };
        double[] doubleArray23 = new double[] { 1 };
        double[] doubleArray25 = new double[] { 1 };
        double[] doubleArray27 = new double[] { 1 };
        double[] doubleArray29 = new double[] { 1 };
        double[][] doubleArray30 = new double[][] { doubleArray21, doubleArray23, doubleArray25, doubleArray27, doubleArray29 };
        int[] intArray31 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray30, intArray31);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray18, intArray31);
        double[] doubleArray37 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray41 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray45 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray49 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray50 = new double[][] { doubleArray37, doubleArray41, doubleArray45, doubleArray49 };
        double[] doubleArray52 = new double[] { 1 };
        double[] doubleArray54 = new double[] { 1 };
        double[] doubleArray56 = new double[] { 1 };
        double[] doubleArray58 = new double[] { 1 };
        double[] doubleArray60 = new double[] { 1 };
        double[][] doubleArray61 = new double[][] { doubleArray52, doubleArray54, doubleArray56, doubleArray58, doubleArray60 };
        int[] intArray62 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray61, intArray62);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray50, intArray62);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray18, intArray62);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray17, intArray62);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray15, intArray62);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray10, intArray62);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray9, intArray62);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray6, intArray62);
        double[][] doubleArray71 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray6);
        double[][] doubleArray72 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray6);
        double[][] doubleArray73 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray72);
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[]");
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertNotNull(doubleArray73);
    }

    @Test
    public void test3504() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3504");
        double[][] doubleArray0 = null;
        double[][] doubleArray1 = new double[][] {};
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray5 = new double[][] {};
        double[][] doubleArray6 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray5);
        double[][] doubleArray7 = new double[][] {};
        double[][] doubleArray8 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray7);
        double[] doubleArray10 = new double[] { 1 };
        double[] doubleArray12 = new double[] { 1 };
        double[] doubleArray14 = new double[] { 1 };
        double[] doubleArray16 = new double[] { 1 };
        double[] doubleArray18 = new double[] { 1 };
        double[][] doubleArray19 = new double[][] { doubleArray10, doubleArray12, doubleArray14, doubleArray16, doubleArray18 };
        int[] intArray20 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray19, intArray20);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray7, intArray20);
        double[] doubleArray26 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray30 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray34 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray38 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray39 = new double[][] { doubleArray26, doubleArray30, doubleArray34, doubleArray38 };
        double[] doubleArray41 = new double[] { 1 };
        double[] doubleArray43 = new double[] { 1 };
        double[] doubleArray45 = new double[] { 1 };
        double[] doubleArray47 = new double[] { 1 };
        double[] doubleArray49 = new double[] { 1 };
        double[][] doubleArray50 = new double[][] { doubleArray41, doubleArray43, doubleArray45, doubleArray47, doubleArray49 };
        int[] intArray51 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray50, intArray51);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray39, intArray51);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray7, intArray51);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray5, intArray51);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray1, intArray51);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray0, intArray51);
        java.lang.Class<?> wildcardClass58 = intArray51.getClass();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[]");
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[]");
        org.junit.Assert.assertNotNull(wildcardClass58);
    }

    @Test
    public void test3505() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3505");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = new double[][] {};
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[] doubleArray8 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray12 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray16 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray20 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray21 = new double[][] { doubleArray8, doubleArray12, doubleArray16, doubleArray20 };
        double[] doubleArray23 = new double[] { 1 };
        double[] doubleArray25 = new double[] { 1 };
        double[] doubleArray27 = new double[] { 1 };
        double[] doubleArray29 = new double[] { 1 };
        double[] doubleArray31 = new double[] { 1 };
        double[][] doubleArray32 = new double[][] { doubleArray23, doubleArray25, doubleArray27, doubleArray29, doubleArray31 };
        int[] intArray33 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray32, intArray33);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray21, intArray33);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray3, intArray33);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray1, intArray33);
        double[][] doubleArray38 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray39 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray38);
        double[][] doubleArray40 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray39);
        double[][] doubleArray41 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray39);
        double[][] doubleArray42 = new double[][] {};
        double[][] doubleArray43 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray42);
        double[][] doubleArray44 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray43);
        double[] doubleArray48 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray52 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray56 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray60 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray61 = new double[][] { doubleArray48, doubleArray52, doubleArray56, doubleArray60 };
        double[] doubleArray63 = new double[] { 1 };
        double[] doubleArray65 = new double[] { 1 };
        double[] doubleArray67 = new double[] { 1 };
        double[] doubleArray69 = new double[] { 1 };
        double[] doubleArray71 = new double[] { 1 };
        double[][] doubleArray72 = new double[][] { doubleArray63, doubleArray65, doubleArray67, doubleArray69, doubleArray71 };
        int[] intArray73 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray72, intArray73);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray61, intArray73);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray44, intArray73);
        double[][] doubleArray77 = null;
        double[] doubleArray79 = new double[] { 1 };
        double[] doubleArray81 = new double[] { 1 };
        double[] doubleArray83 = new double[] { 1 };
        double[] doubleArray85 = new double[] { 1 };
        double[] doubleArray87 = new double[] { 1 };
        double[][] doubleArray88 = new double[][] { doubleArray79, doubleArray81, doubleArray83, doubleArray85, doubleArray87 };
        int[] intArray89 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray88, intArray89);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray77, intArray89);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray44, intArray89);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray41, intArray89);
        int[] intArray94 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray41, intArray94);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray71), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[]");
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray79), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray81), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray83), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray85), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray87), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray88);
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray89), "[]");
    }

    @Test
    public void test3506() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3506");
        double[][] doubleArray0 = null;
        double[] doubleArray7 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray14 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray21 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray28 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray29 = new double[][] { doubleArray7, doubleArray14, doubleArray21, doubleArray28 };
        double[][] doubleArray30 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray29);
        double[][] doubleArray31 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        double[][] doubleArray32 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray31);
        double[][] doubleArray33 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray31);
        double[][] doubleArray34 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray31);
        double[][] doubleArray35 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray34);
        double[] doubleArray42 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray49 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray56 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray63 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray64 = new double[][] { doubleArray42, doubleArray49, doubleArray56, doubleArray63 };
        double[][] doubleArray65 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray64);
        double[] doubleArray67 = new double[] { 1 };
        double[] doubleArray69 = new double[] { 1 };
        double[] doubleArray71 = new double[] { 1 };
        double[] doubleArray73 = new double[] { 1 };
        double[] doubleArray75 = new double[] { 1 };
        double[][] doubleArray76 = new double[][] { doubleArray67, doubleArray69, doubleArray71, doubleArray73, doubleArray75 };
        int[] intArray77 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray76, intArray77);
        double[][] doubleArray79 = new double[][] {};
        double[][] doubleArray80 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray79);
        int[] intArray81 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray80, intArray81);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray76, intArray81);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray64, intArray81);
        double[][] doubleArray85 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray64);
        double[][] doubleArray86 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray64);
        double[][] doubleArray87 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray64);
        double[][] doubleArray88 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray64);
        double[][] doubleArray89 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray64);
        int[] intArray91 = new int[] { '4' };
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray64, intArray91);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray35, intArray91);
        // The following exception was thrown during execution in test generation
        try {
            com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray0, intArray91);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot load from object array because \"a\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray71), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray73), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray75), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray77), "[]");
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray81), "[]");
        org.junit.Assert.assertNotNull(doubleArray85);
        org.junit.Assert.assertNotNull(doubleArray86);
        org.junit.Assert.assertNotNull(doubleArray87);
        org.junit.Assert.assertNotNull(doubleArray88);
        org.junit.Assert.assertNotNull(doubleArray89);
        org.junit.Assert.assertNotNull(intArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray91), "[0]");
    }

    @Test
    public void test3507() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3507");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = new double[][] {};
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[] doubleArray8 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray12 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray16 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray20 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray21 = new double[][] { doubleArray8, doubleArray12, doubleArray16, doubleArray20 };
        double[] doubleArray23 = new double[] { 1 };
        double[] doubleArray25 = new double[] { 1 };
        double[] doubleArray27 = new double[] { 1 };
        double[] doubleArray29 = new double[] { 1 };
        double[] doubleArray31 = new double[] { 1 };
        double[][] doubleArray32 = new double[][] { doubleArray23, doubleArray25, doubleArray27, doubleArray29, doubleArray31 };
        int[] intArray33 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray32, intArray33);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray21, intArray33);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray3, intArray33);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray1, intArray33);
        double[][] doubleArray38 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray39 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray38);
        double[][] doubleArray40 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray39);
        double[][] doubleArray41 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray39);
        double[][] doubleArray42 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray41);
        double[][] doubleArray43 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray41);
        double[][] doubleArray44 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray41);
        double[][] doubleArray45 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray41);
        double[][] doubleArray46 = new double[][] {};
        double[][] doubleArray47 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray46);
        double[][] doubleArray48 = new double[][] {};
        double[][] doubleArray49 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray48);
        double[] doubleArray51 = new double[] { 1 };
        double[] doubleArray53 = new double[] { 1 };
        double[] doubleArray55 = new double[] { 1 };
        double[] doubleArray57 = new double[] { 1 };
        double[] doubleArray59 = new double[] { 1 };
        double[][] doubleArray60 = new double[][] { doubleArray51, doubleArray53, doubleArray55, doubleArray57, doubleArray59 };
        int[] intArray61 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray60, intArray61);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray48, intArray61);
        double[] doubleArray67 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray71 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray75 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray79 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray80 = new double[][] { doubleArray67, doubleArray71, doubleArray75, doubleArray79 };
        double[] doubleArray82 = new double[] { 1 };
        double[] doubleArray84 = new double[] { 1 };
        double[] doubleArray86 = new double[] { 1 };
        double[] doubleArray88 = new double[] { 1 };
        double[] doubleArray90 = new double[] { 1 };
        double[][] doubleArray91 = new double[][] { doubleArray82, doubleArray84, doubleArray86, doubleArray88, doubleArray90 };
        int[] intArray92 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray91, intArray92);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray80, intArray92);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray48, intArray92);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray46, intArray92);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray45, intArray92);
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[]");
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray71), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray75), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray79), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertNotNull(doubleArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray82), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray84), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray86), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray88), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray90), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray91);
        org.junit.Assert.assertNotNull(intArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray92), "[]");
    }

    @Test
    public void test3508() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3508");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[][] doubleArray5 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[] doubleArray12 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray19 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray26 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray33 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray34 = new double[][] { doubleArray12, doubleArray19, doubleArray26, doubleArray33 };
        double[][] doubleArray35 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray34);
        double[] doubleArray37 = new double[] { 1 };
        double[] doubleArray39 = new double[] { 1 };
        double[] doubleArray41 = new double[] { 1 };
        double[] doubleArray43 = new double[] { 1 };
        double[] doubleArray45 = new double[] { 1 };
        double[][] doubleArray46 = new double[][] { doubleArray37, doubleArray39, doubleArray41, doubleArray43, doubleArray45 };
        int[] intArray47 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray46, intArray47);
        double[][] doubleArray49 = new double[][] {};
        double[][] doubleArray50 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray49);
        int[] intArray51 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray50, intArray51);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray46, intArray51);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray34, intArray51);
        double[][] doubleArray55 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray34);
        double[][] doubleArray56 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray55);
        double[][] doubleArray57 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray56);
        double[][] doubleArray58 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray56);
        double[][] doubleArray59 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray56);
        double[][] doubleArray60 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray56);
        double[][] doubleArray61 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray60);
        double[][] doubleArray62 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray61);
        double[][] doubleArray63 = new double[][] {};
        double[][] doubleArray64 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray63);
        double[][] doubleArray65 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray63);
        double[][] doubleArray66 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray65);
        double[][] doubleArray67 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray66);
        double[][] doubleArray68 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray67);
        double[][] doubleArray69 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray68);
        double[][] doubleArray70 = new double[][] {};
        double[][] doubleArray71 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray70);
        double[][] doubleArray72 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray70);
        double[][] doubleArray73 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray70);
        double[][] doubleArray74 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray70);
        double[][] doubleArray75 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray74);
        double[][] doubleArray76 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray74);
        double[][] doubleArray77 = new double[][] {};
        double[][] doubleArray78 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray77);
        int[] intArray79 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray78, intArray79);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray76, intArray79);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray69, intArray79);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray61, intArray79);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray5, intArray79);
        double[][] doubleArray85 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[]");
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray79), "[]");
        org.junit.Assert.assertNotNull(doubleArray85);
    }

    @Test
    public void test3509() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3509");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray30 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray29);
        double[][] doubleArray31 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray29);
        double[][] doubleArray32 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray29);
        double[][] doubleArray33 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray29);
        double[][] doubleArray34 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray29);
        java.lang.Class<?> wildcardClass35 = doubleArray34.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertNotNull(wildcardClass35);
    }

    @Test
    public void test3510() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3510");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[] doubleArray31 = new double[] { 1 };
        double[] doubleArray33 = new double[] { 1 };
        double[] doubleArray35 = new double[] { 1 };
        double[] doubleArray37 = new double[] { 1 };
        double[] doubleArray39 = new double[] { 1 };
        double[][] doubleArray40 = new double[][] { doubleArray31, doubleArray33, doubleArray35, doubleArray37, doubleArray39 };
        int[] intArray41 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray40, intArray41);
        double[][] doubleArray43 = new double[][] {};
        double[][] doubleArray44 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray43);
        int[] intArray45 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray44, intArray45);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray40, intArray45);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray28, intArray45);
        double[][] doubleArray49 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray50 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray51 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[] doubleArray58 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray65 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray72 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray79 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray80 = new double[][] { doubleArray58, doubleArray65, doubleArray72, doubleArray79 };
        double[][] doubleArray81 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray80);
        double[][] doubleArray82 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray80);
        double[][] doubleArray83 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray80);
        double[][] doubleArray84 = new double[][] {};
        double[][] doubleArray85 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray84);
        int[] intArray86 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray85, intArray86);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray83, intArray86);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray51, intArray86);
        double[][] doubleArray90 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray51);
        double[][] doubleArray91 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray51);
        double[][] doubleArray92 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray91);
        double[][] doubleArray93 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray92);
        java.lang.Class<?> wildcardClass94 = doubleArray92.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray79), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertNotNull(doubleArray81);
        org.junit.Assert.assertNotNull(doubleArray82);
        org.junit.Assert.assertNotNull(doubleArray83);
        org.junit.Assert.assertNotNull(doubleArray84);
        org.junit.Assert.assertNotNull(doubleArray85);
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray86), "[]");
        org.junit.Assert.assertNotNull(doubleArray90);
        org.junit.Assert.assertNotNull(doubleArray91);
        org.junit.Assert.assertNotNull(doubleArray92);
        org.junit.Assert.assertNotNull(doubleArray93);
        org.junit.Assert.assertNotNull(wildcardClass94);
    }

    @Test
    public void test3511() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3511");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray30 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray31 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray32 = new double[][] {};
        double[][] doubleArray33 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray32);
        int[] intArray34 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray33, intArray34);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray31, intArray34);
        double[][] doubleArray37 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray31);
        double[][] doubleArray38 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray31);
        double[][] doubleArray39 = null;
        double[][] doubleArray40 = null;
        double[] doubleArray42 = new double[] { 1 };
        double[] doubleArray44 = new double[] { 1 };
        double[] doubleArray46 = new double[] { 1 };
        double[] doubleArray48 = new double[] { 1 };
        double[] doubleArray50 = new double[] { 1 };
        double[][] doubleArray51 = new double[][] { doubleArray42, doubleArray44, doubleArray46, doubleArray48, doubleArray50 };
        int[] intArray52 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray51, intArray52);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray40, intArray52);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray39, intArray52);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray31, intArray52);
        java.lang.Class<?> wildcardClass57 = intArray52.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[]");
        org.junit.Assert.assertNotNull(wildcardClass57);
    }

    @Test
    public void test3512() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3512");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray30 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray29);
        double[][] doubleArray31 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        double[][] doubleArray32 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray31);
        double[][] doubleArray33 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray31);
        double[][] doubleArray34 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray33);
        double[][] doubleArray35 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray33);
        double[][] doubleArray36 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray33);
        double[][] doubleArray37 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray33);
        double[][] doubleArray38 = new double[][] {};
        double[][] doubleArray39 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray38);
        double[][] doubleArray40 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray39);
        double[][] doubleArray41 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray39);
        double[][] doubleArray42 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray39);
        double[][] doubleArray43 = new double[][] {};
        double[][] doubleArray44 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray43);
        double[][] doubleArray45 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray43);
        double[][] doubleArray46 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray43);
        double[][] doubleArray47 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray43);
        double[][] doubleArray48 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray47);
        double[][] doubleArray49 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray47);
        double[][] doubleArray50 = new double[][] {};
        double[][] doubleArray51 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray50);
        int[] intArray52 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray51, intArray52);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray49, intArray52);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray39, intArray52);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray37, intArray52);
        double[][] doubleArray57 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray37);
        int[] intArray58 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray37, intArray58);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[]");
        org.junit.Assert.assertNotNull(doubleArray57);
    }

    @Test
    public void test3513() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3513");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray5 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray6 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray7 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray6);
        double[][] doubleArray8 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray7);
        double[][] doubleArray9 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray8);
        double[] doubleArray16 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray23 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray30 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray37 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray38 = new double[][] { doubleArray16, doubleArray23, doubleArray30, doubleArray37 };
        double[][] doubleArray39 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray38);
        double[][] doubleArray40 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray39);
        double[][] doubleArray41 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray40);
        double[][] doubleArray42 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray40);
        double[][] doubleArray43 = new double[][] {};
        double[][] doubleArray44 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray43);
        double[] doubleArray46 = new double[] { 1 };
        double[] doubleArray48 = new double[] { 1 };
        double[] doubleArray50 = new double[] { 1 };
        double[] doubleArray52 = new double[] { 1 };
        double[] doubleArray54 = new double[] { 1 };
        double[][] doubleArray55 = new double[][] { doubleArray46, doubleArray48, doubleArray50, doubleArray52, doubleArray54 };
        int[] intArray56 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray55, intArray56);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray43, intArray56);
        double[] doubleArray62 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray66 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray70 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray74 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray75 = new double[][] { doubleArray62, doubleArray66, doubleArray70, doubleArray74 };
        double[] doubleArray77 = new double[] { 1 };
        double[] doubleArray79 = new double[] { 1 };
        double[] doubleArray81 = new double[] { 1 };
        double[] doubleArray83 = new double[] { 1 };
        double[] doubleArray85 = new double[] { 1 };
        double[][] doubleArray86 = new double[][] { doubleArray77, doubleArray79, doubleArray81, doubleArray83, doubleArray85 };
        int[] intArray87 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray86, intArray87);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray75, intArray87);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray43, intArray87);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray42, intArray87);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray9, intArray87);
        double[][] doubleArray93 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray9);
        double[][] doubleArray94 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray93);
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[]");
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray66), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray70), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray74), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray77), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray79), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray81), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray83), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray85), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray86);
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray87), "[]");
        org.junit.Assert.assertNotNull(doubleArray93);
        org.junit.Assert.assertNotNull(doubleArray94);
    }

    @Test
    public void test3514() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3514");
        double[][] doubleArray0 = null;
        double[][] doubleArray1 = new double[][] {};
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray5 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray6 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray7 = new double[][] {};
        double[][] doubleArray8 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray7);
        double[][] doubleArray9 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray7);
        double[][] doubleArray10 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray9);
        double[][] doubleArray11 = null;
        double[][] doubleArray12 = new double[][] {};
        double[][] doubleArray13 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray12);
        double[][] doubleArray14 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray13);
        double[] doubleArray18 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray22 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray26 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray30 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray31 = new double[][] { doubleArray18, doubleArray22, doubleArray26, doubleArray30 };
        double[] doubleArray33 = new double[] { 1 };
        double[] doubleArray35 = new double[] { 1 };
        double[] doubleArray37 = new double[] { 1 };
        double[] doubleArray39 = new double[] { 1 };
        double[] doubleArray41 = new double[] { 1 };
        double[][] doubleArray42 = new double[][] { doubleArray33, doubleArray35, doubleArray37, doubleArray39, doubleArray41 };
        int[] intArray43 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray42, intArray43);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray31, intArray43);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray14, intArray43);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray11, intArray43);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray10, intArray43);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray6, intArray43);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray0, intArray43);
        java.lang.Class<?> wildcardClass51 = intArray43.getClass();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[]");
        org.junit.Assert.assertNotNull(wildcardClass51);
    }

    @Test
    public void test3515() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3515");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[][] doubleArray5 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray4);
        double[][] doubleArray6 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray5);
        double[][] doubleArray7 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray5);
        double[][] doubleArray8 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray7);
        double[][] doubleArray9 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray7);
        double[][] doubleArray10 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray7);
        double[][] doubleArray11 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray7);
        double[][] doubleArray12 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray11);
        double[][] doubleArray13 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray12);
        double[][] doubleArray14 = new double[][] {};
        double[][] doubleArray15 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray14);
        double[][] doubleArray16 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray14);
        double[][] doubleArray17 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray14);
        double[][] doubleArray18 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray14);
        double[][] doubleArray19 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray14);
        double[][] doubleArray20 = new double[][] {};
        double[][] doubleArray21 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray20);
        double[][] doubleArray22 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray20);
        double[][] doubleArray23 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray22);
        double[][] doubleArray24 = null;
        double[][] doubleArray25 = new double[][] {};
        double[][] doubleArray26 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray25);
        double[][] doubleArray27 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray26);
        double[] doubleArray31 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray35 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray39 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray43 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray44 = new double[][] { doubleArray31, doubleArray35, doubleArray39, doubleArray43 };
        double[] doubleArray46 = new double[] { 1 };
        double[] doubleArray48 = new double[] { 1 };
        double[] doubleArray50 = new double[] { 1 };
        double[] doubleArray52 = new double[] { 1 };
        double[] doubleArray54 = new double[] { 1 };
        double[][] doubleArray55 = new double[][] { doubleArray46, doubleArray48, doubleArray50, doubleArray52, doubleArray54 };
        int[] intArray56 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray55, intArray56);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray44, intArray56);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray27, intArray56);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray24, intArray56);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray23, intArray56);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray19, intArray56);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray13, intArray56);
        java.lang.Class<?> wildcardClass64 = doubleArray13.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[]");
        org.junit.Assert.assertNotNull(wildcardClass64);
    }

    @Test
    public void test3516() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3516");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = new double[][] {};
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[] doubleArray5 = new double[] { 1 };
        double[] doubleArray7 = new double[] { 1 };
        double[] doubleArray9 = new double[] { 1 };
        double[] doubleArray11 = new double[] { 1 };
        double[] doubleArray13 = new double[] { 1 };
        double[][] doubleArray14 = new double[][] { doubleArray5, doubleArray7, doubleArray9, doubleArray11, doubleArray13 };
        int[] intArray15 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray14, intArray15);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray2, intArray15);
        double[] doubleArray21 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray25 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray29 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray33 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray34 = new double[][] { doubleArray21, doubleArray25, doubleArray29, doubleArray33 };
        double[] doubleArray36 = new double[] { 1 };
        double[] doubleArray38 = new double[] { 1 };
        double[] doubleArray40 = new double[] { 1 };
        double[] doubleArray42 = new double[] { 1 };
        double[] doubleArray44 = new double[] { 1 };
        double[][] doubleArray45 = new double[][] { doubleArray36, doubleArray38, doubleArray40, doubleArray42, doubleArray44 };
        int[] intArray46 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray45, intArray46);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray34, intArray46);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray2, intArray46);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray1, intArray46);
        double[] doubleArray52 = new double[] { 1 };
        double[] doubleArray54 = new double[] { 1 };
        double[] doubleArray56 = new double[] { 1 };
        double[] doubleArray58 = new double[] { 1 };
        double[] doubleArray60 = new double[] { 1 };
        double[][] doubleArray61 = new double[][] { doubleArray52, doubleArray54, doubleArray56, doubleArray58, doubleArray60 };
        int[] intArray62 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray61, intArray62);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray1, intArray62);
        double[][] doubleArray65 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray66 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray65);
        double[][] doubleArray67 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray65);
        double[][] doubleArray68 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray65);
        java.lang.Class<?> wildcardClass69 = doubleArray68.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[]");
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[]");
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertNotNull(wildcardClass69);
    }

    @Test
    public void test3517() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3517");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray30 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray29);
        double[][] doubleArray31 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        double[][] doubleArray32 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray31);
        double[][] doubleArray33 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray32);
        double[][] doubleArray34 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray33);
        double[][] doubleArray35 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray33);
        double[][] doubleArray36 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray33);
        double[][] doubleArray37 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray36);
        double[][] doubleArray38 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray37);
        double[][] doubleArray39 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray38);
        double[][] doubleArray40 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray39);
        double[][] doubleArray41 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray40);
        java.lang.Class<?> wildcardClass42 = doubleArray41.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertNotNull(wildcardClass42);
    }

    @Test
    public void test3518() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3518");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        int[] intArray2 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray1, intArray2);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray5 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray6 = new double[][] {};
        double[][] doubleArray7 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray6);
        double[][] doubleArray8 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray6);
        double[][] doubleArray9 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray6);
        double[] doubleArray16 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray23 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray30 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray37 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray38 = new double[][] { doubleArray16, doubleArray23, doubleArray30, doubleArray37 };
        double[][] doubleArray39 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray38);
        double[][] doubleArray40 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray39);
        double[][] doubleArray41 = new double[][] {};
        double[][] doubleArray42 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray41);
        double[] doubleArray44 = new double[] { 1 };
        double[] doubleArray46 = new double[] { 1 };
        double[] doubleArray48 = new double[] { 1 };
        double[] doubleArray50 = new double[] { 1 };
        double[] doubleArray52 = new double[] { 1 };
        double[][] doubleArray53 = new double[][] { doubleArray44, doubleArray46, doubleArray48, doubleArray50, doubleArray52 };
        int[] intArray54 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray53, intArray54);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray41, intArray54);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray40, intArray54);
        double[][] doubleArray58 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray40);
        double[] doubleArray60 = new double[] { 1 };
        double[] doubleArray62 = new double[] { 1 };
        double[] doubleArray64 = new double[] { 1 };
        double[] doubleArray66 = new double[] { 1 };
        double[] doubleArray68 = new double[] { 1 };
        double[][] doubleArray69 = new double[][] { doubleArray60, doubleArray62, doubleArray64, doubleArray66, doubleArray68 };
        int[] intArray70 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray69, intArray70);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray58, intArray70);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray6, intArray70);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray5, intArray70);
        double[][] doubleArray75 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray5);
        java.lang.Class<?> wildcardClass76 = doubleArray75.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[]");
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray66), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[]");
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertNotNull(wildcardClass76);
    }

    @Test
    public void test3519() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3519");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[][] doubleArray5 = null;
        double[][] doubleArray6 = new double[][] {};
        double[][] doubleArray7 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray6);
        double[][] doubleArray8 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray7);
        double[] doubleArray12 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray16 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray20 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray24 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray25 = new double[][] { doubleArray12, doubleArray16, doubleArray20, doubleArray24 };
        double[] doubleArray27 = new double[] { 1 };
        double[] doubleArray29 = new double[] { 1 };
        double[] doubleArray31 = new double[] { 1 };
        double[] doubleArray33 = new double[] { 1 };
        double[] doubleArray35 = new double[] { 1 };
        double[][] doubleArray36 = new double[][] { doubleArray27, doubleArray29, doubleArray31, doubleArray33, doubleArray35 };
        int[] intArray37 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray36, intArray37);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray25, intArray37);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray8, intArray37);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray5, intArray37);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray3, intArray37);
        double[][] doubleArray43 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[][] doubleArray44 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray43);
        double[][] doubleArray45 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray44);
        double[][] doubleArray46 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray45);
        double[][] doubleArray47 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray46);
        double[][] doubleArray48 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray47);
        int[] intArray49 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray47, intArray49);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertNotNull(doubleArray48);
    }

    @Test
    public void test3520() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3520");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray30 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray31 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray32 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray31);
        double[] doubleArray39 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray46 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray53 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray60 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray61 = new double[][] { doubleArray39, doubleArray46, doubleArray53, doubleArray60 };
        double[][] doubleArray62 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray61);
        double[] doubleArray64 = new double[] { 1 };
        double[] doubleArray66 = new double[] { 1 };
        double[] doubleArray68 = new double[] { 1 };
        double[] doubleArray70 = new double[] { 1 };
        double[] doubleArray72 = new double[] { 1 };
        double[][] doubleArray73 = new double[][] { doubleArray64, doubleArray66, doubleArray68, doubleArray70, doubleArray72 };
        int[] intArray74 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray73, intArray74);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray62, intArray74);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray32, intArray74);
        double[][] doubleArray78 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray32);
        double[][] doubleArray79 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray78);
        double[][] doubleArray80 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray78);
        double[][] doubleArray81 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray78);
        double[][] doubleArray82 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray81);
        java.lang.Class<?> wildcardClass83 = doubleArray82.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray66), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray70), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[]");
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertNotNull(doubleArray81);
        org.junit.Assert.assertNotNull(doubleArray82);
        org.junit.Assert.assertNotNull(wildcardClass83);
    }

    @Test
    public void test3521() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3521");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[] doubleArray6 = new double[] { 1 };
        double[] doubleArray8 = new double[] { 1 };
        double[] doubleArray10 = new double[] { 1 };
        double[] doubleArray12 = new double[] { 1 };
        double[] doubleArray14 = new double[] { 1 };
        double[][] doubleArray15 = new double[][] { doubleArray6, doubleArray8, doubleArray10, doubleArray12, doubleArray14 };
        int[] intArray16 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray15, intArray16);
        double[][] doubleArray18 = new double[][] {};
        double[][] doubleArray19 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray18);
        int[] intArray20 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray19, intArray20);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray15, intArray20);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray3, intArray20);
        double[][] doubleArray24 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[][] doubleArray25 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        java.lang.Class<?> wildcardClass26 = doubleArray25.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[]");
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertNotNull(wildcardClass26);
    }

    @Test
    public void test3522() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3522");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray4 = new double[][] {};
        double[][] doubleArray5 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray4);
        double[][] doubleArray6 = new double[][] {};
        double[][] doubleArray7 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray6);
        double[] doubleArray9 = new double[] { 1 };
        double[] doubleArray11 = new double[] { 1 };
        double[] doubleArray13 = new double[] { 1 };
        double[] doubleArray15 = new double[] { 1 };
        double[] doubleArray17 = new double[] { 1 };
        double[][] doubleArray18 = new double[][] { doubleArray9, doubleArray11, doubleArray13, doubleArray15, doubleArray17 };
        int[] intArray19 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray18, intArray19);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray6, intArray19);
        double[] doubleArray25 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray29 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray33 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray37 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray38 = new double[][] { doubleArray25, doubleArray29, doubleArray33, doubleArray37 };
        double[] doubleArray40 = new double[] { 1 };
        double[] doubleArray42 = new double[] { 1 };
        double[] doubleArray44 = new double[] { 1 };
        double[] doubleArray46 = new double[] { 1 };
        double[] doubleArray48 = new double[] { 1 };
        double[][] doubleArray49 = new double[][] { doubleArray40, doubleArray42, doubleArray44, doubleArray46, doubleArray48 };
        int[] intArray50 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray49, intArray50);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray38, intArray50);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray6, intArray50);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray4, intArray50);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray1, intArray50);
        double[][] doubleArray56 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray57 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray58 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray57);
        double[] doubleArray60 = new double[] { 1 };
        double[] doubleArray62 = new double[] { 1 };
        double[] doubleArray64 = new double[] { 1 };
        double[] doubleArray66 = new double[] { 1 };
        double[] doubleArray68 = new double[] { 1 };
        double[][] doubleArray69 = new double[][] { doubleArray60, doubleArray62, doubleArray64, doubleArray66, doubleArray68 };
        int[] intArray70 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray69, intArray70);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray57, intArray70);
        double[][] doubleArray73 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray57);
        double[][] doubleArray74 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray57);
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[]");
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray66), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[]");
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertNotNull(doubleArray74);
    }

    @Test
    public void test3523() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3523");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray3 = new double[][] {};
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[][] doubleArray5 = new double[][] {};
        double[][] doubleArray6 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray5);
        double[] doubleArray8 = new double[] { 1 };
        double[] doubleArray10 = new double[] { 1 };
        double[] doubleArray12 = new double[] { 1 };
        double[] doubleArray14 = new double[] { 1 };
        double[] doubleArray16 = new double[] { 1 };
        double[][] doubleArray17 = new double[][] { doubleArray8, doubleArray10, doubleArray12, doubleArray14, doubleArray16 };
        int[] intArray18 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray17, intArray18);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray5, intArray18);
        double[] doubleArray24 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray28 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray32 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray36 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray37 = new double[][] { doubleArray24, doubleArray28, doubleArray32, doubleArray36 };
        double[] doubleArray39 = new double[] { 1 };
        double[] doubleArray41 = new double[] { 1 };
        double[] doubleArray43 = new double[] { 1 };
        double[] doubleArray45 = new double[] { 1 };
        double[] doubleArray47 = new double[] { 1 };
        double[][] doubleArray48 = new double[][] { doubleArray39, doubleArray41, doubleArray43, doubleArray45, doubleArray47 };
        int[] intArray49 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray48, intArray49);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray37, intArray49);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray5, intArray49);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray4, intArray49);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray2, intArray49);
        double[][] doubleArray55 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray56 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray55);
        double[][] doubleArray57 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray55);
        double[][] doubleArray58 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray57);
        double[][] doubleArray59 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray58);
        java.lang.Class<?> wildcardClass60 = doubleArray58.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[]");
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[]");
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertNotNull(wildcardClass60);
    }

    @Test
    public void test3524() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3524");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[] doubleArray6 = new double[] { 1 };
        double[] doubleArray8 = new double[] { 1 };
        double[] doubleArray10 = new double[] { 1 };
        double[] doubleArray12 = new double[] { 1 };
        double[] doubleArray14 = new double[] { 1 };
        double[][] doubleArray15 = new double[][] { doubleArray6, doubleArray8, doubleArray10, doubleArray12, doubleArray14 };
        int[] intArray16 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray15, intArray16);
        double[][] doubleArray18 = new double[][] {};
        double[][] doubleArray19 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray18);
        int[] intArray20 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray19, intArray20);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray15, intArray20);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray3, intArray20);
        double[][] doubleArray24 = new double[][] {};
        double[][] doubleArray25 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray24);
        double[] doubleArray27 = new double[] { 1 };
        double[] doubleArray29 = new double[] { 1 };
        double[] doubleArray31 = new double[] { 1 };
        double[] doubleArray33 = new double[] { 1 };
        double[] doubleArray35 = new double[] { 1 };
        double[][] doubleArray36 = new double[][] { doubleArray27, doubleArray29, doubleArray31, doubleArray33, doubleArray35 };
        int[] intArray37 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray36, intArray37);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray24, intArray37);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray3, intArray37);
        double[][] doubleArray41 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[][] doubleArray42 = new double[][] {};
        double[][] doubleArray43 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray42);
        double[][] doubleArray44 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray43);
        double[][] doubleArray45 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray44);
        double[][] doubleArray46 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray44);
        double[][] doubleArray47 = new double[][] {};
        double[][] doubleArray48 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray47);
        double[][] doubleArray49 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray47);
        double[][] doubleArray50 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray49);
        double[][] doubleArray51 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray50);
        double[][] doubleArray52 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray50);
        double[][] doubleArray53 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray52);
        double[][] doubleArray54 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray52);
        double[][] doubleArray55 = null;
        double[][] doubleArray56 = new double[][] {};
        double[][] doubleArray57 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray56);
        double[][] doubleArray58 = new double[][] {};
        double[][] doubleArray59 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray58);
        double[][] doubleArray60 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray59);
        double[] doubleArray64 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray68 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray72 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray76 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray77 = new double[][] { doubleArray64, doubleArray68, doubleArray72, doubleArray76 };
        double[] doubleArray79 = new double[] { 1 };
        double[] doubleArray81 = new double[] { 1 };
        double[] doubleArray83 = new double[] { 1 };
        double[] doubleArray85 = new double[] { 1 };
        double[] doubleArray87 = new double[] { 1 };
        double[][] doubleArray88 = new double[][] { doubleArray79, doubleArray81, doubleArray83, doubleArray85, doubleArray87 };
        int[] intArray89 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray88, intArray89);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray77, intArray89);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray59, intArray89);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray57, intArray89);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray55, intArray89);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray54, intArray89);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray44, intArray89);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray3, intArray89);
        java.lang.Class<?> wildcardClass98 = intArray89.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[]");
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray79), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray81), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray83), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray85), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray87), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray88);
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray89), "[]");
        org.junit.Assert.assertNotNull(wildcardClass98);
    }

    @Test
    public void test3525() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3525");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[][] doubleArray5 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[][] doubleArray6 = new double[][] {};
        double[][] doubleArray7 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray6);
        int[] intArray8 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray7, intArray8);
        double[] doubleArray11 = new double[] { 1 };
        double[] doubleArray13 = new double[] { 1 };
        double[] doubleArray15 = new double[] { 1 };
        double[] doubleArray17 = new double[] { 1 };
        double[] doubleArray19 = new double[] { 1 };
        double[][] doubleArray20 = new double[][] { doubleArray11, doubleArray13, doubleArray15, doubleArray17, doubleArray19 };
        int[] intArray21 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray20, intArray21);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray7, intArray21);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray5, intArray21);
        double[][] doubleArray25 = new double[][] {};
        double[][] doubleArray26 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray25);
        double[][] doubleArray27 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray25);
        double[][] doubleArray28 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray25);
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray30 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray31 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        double[][] doubleArray32 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray31);
        double[] doubleArray39 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray46 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray53 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray60 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray61 = new double[][] { doubleArray39, doubleArray46, doubleArray53, doubleArray60 };
        double[][] doubleArray62 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray61);
        double[][] doubleArray63 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray62);
        double[][] doubleArray64 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray63);
        double[][] doubleArray65 = new double[][] {};
        double[][] doubleArray66 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray65);
        int[] intArray67 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray66, intArray67);
        double[][] doubleArray69 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray66);
        double[][] doubleArray70 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray69);
        double[][] doubleArray71 = new double[][] {};
        double[][] doubleArray72 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray71);
        int[] intArray73 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray72, intArray73);
        double[] doubleArray76 = new double[] { 1 };
        double[] doubleArray78 = new double[] { 1 };
        double[] doubleArray80 = new double[] { 1 };
        double[] doubleArray82 = new double[] { 1 };
        double[] doubleArray84 = new double[] { 1 };
        double[][] doubleArray85 = new double[][] { doubleArray76, doubleArray78, doubleArray80, doubleArray82, doubleArray84 };
        int[] intArray86 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray85, intArray86);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray72, intArray86);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray69, intArray86);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray64, intArray86);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray32, intArray86);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray5, intArray86);
        java.lang.Class<?> wildcardClass93 = doubleArray5.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[]");
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[]");
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray78), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray80), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray82), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray84), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray85);
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray86), "[]");
        org.junit.Assert.assertNotNull(wildcardClass93);
    }

    @Test
    public void test3526() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3526");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[] doubleArray31 = new double[] { 1 };
        double[] doubleArray33 = new double[] { 1 };
        double[] doubleArray35 = new double[] { 1 };
        double[] doubleArray37 = new double[] { 1 };
        double[] doubleArray39 = new double[] { 1 };
        double[][] doubleArray40 = new double[][] { doubleArray31, doubleArray33, doubleArray35, doubleArray37, doubleArray39 };
        int[] intArray41 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray40, intArray41);
        double[][] doubleArray43 = new double[][] {};
        double[][] doubleArray44 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray43);
        int[] intArray45 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray44, intArray45);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray40, intArray45);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray28, intArray45);
        double[][] doubleArray49 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray50 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray49);
        double[][] doubleArray51 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray50);
        double[][] doubleArray52 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray50);
        double[][] doubleArray53 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray50);
        double[][] doubleArray54 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray50);
        double[][] doubleArray55 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray54);
        double[][] doubleArray56 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray55);
        double[][] doubleArray57 = new double[][] {};
        double[][] doubleArray58 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray57);
        double[][] doubleArray59 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray57);
        double[][] doubleArray60 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray59);
        double[][] doubleArray61 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray60);
        double[][] doubleArray62 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray61);
        double[][] doubleArray63 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray62);
        double[][] doubleArray64 = new double[][] {};
        double[][] doubleArray65 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray64);
        double[][] doubleArray66 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray64);
        double[][] doubleArray67 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray64);
        double[][] doubleArray68 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray64);
        double[][] doubleArray69 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray68);
        double[][] doubleArray70 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray68);
        double[][] doubleArray71 = new double[][] {};
        double[][] doubleArray72 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray71);
        int[] intArray73 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray72, intArray73);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray70, intArray73);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray63, intArray73);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray55, intArray73);
        double[][] doubleArray78 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray55);
        double[][] doubleArray79 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray78);
        double[][] doubleArray80 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray79);
        double[][] doubleArray81 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray79);
        double[][] doubleArray82 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray81);
        double[][] doubleArray83 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray82);
        java.lang.Class<?> wildcardClass84 = doubleArray83.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[]");
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertNotNull(doubleArray81);
        org.junit.Assert.assertNotNull(doubleArray82);
        org.junit.Assert.assertNotNull(doubleArray83);
        org.junit.Assert.assertNotNull(wildcardClass84);
    }

    @Test
    public void test3527() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3527");
        double[][] doubleArray0 = null;
        double[] doubleArray7 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray14 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray21 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray28 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray29 = new double[][] { doubleArray7, doubleArray14, doubleArray21, doubleArray28 };
        double[][] doubleArray30 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray29);
        double[][] doubleArray31 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray29);
        double[][] doubleArray32 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray29);
        double[][] doubleArray33 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray32);
        double[][] doubleArray34 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray33);
        double[][] doubleArray35 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray33);
        double[][] doubleArray36 = new double[][] {};
        double[][] doubleArray37 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray36);
        double[][] doubleArray38 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray36);
        double[][] doubleArray39 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray36);
        double[][] doubleArray40 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray36);
        double[][] doubleArray41 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray36);
        double[][] doubleArray42 = new double[][] {};
        double[][] doubleArray43 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray42);
        double[][] doubleArray44 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray42);
        double[][] doubleArray45 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray44);
        double[][] doubleArray46 = null;
        double[][] doubleArray47 = new double[][] {};
        double[][] doubleArray48 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray47);
        double[][] doubleArray49 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray48);
        double[] doubleArray53 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray57 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray61 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray65 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray66 = new double[][] { doubleArray53, doubleArray57, doubleArray61, doubleArray65 };
        double[] doubleArray68 = new double[] { 1 };
        double[] doubleArray70 = new double[] { 1 };
        double[] doubleArray72 = new double[] { 1 };
        double[] doubleArray74 = new double[] { 1 };
        double[] doubleArray76 = new double[] { 1 };
        double[][] doubleArray77 = new double[][] { doubleArray68, doubleArray70, doubleArray72, doubleArray74, doubleArray76 };
        int[] intArray78 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray77, intArray78);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray66, intArray78);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray49, intArray78);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray46, intArray78);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray45, intArray78);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray41, intArray78);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray35, intArray78);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray0, intArray78);
        java.lang.Class<?> wildcardClass87 = intArray78.getClass();
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray70), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray74), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[]");
        org.junit.Assert.assertNotNull(wildcardClass87);
    }

    @Test
    public void test3528() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3528");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[] doubleArray31 = new double[] { 1 };
        double[] doubleArray33 = new double[] { 1 };
        double[] doubleArray35 = new double[] { 1 };
        double[] doubleArray37 = new double[] { 1 };
        double[] doubleArray39 = new double[] { 1 };
        double[][] doubleArray40 = new double[][] { doubleArray31, doubleArray33, doubleArray35, doubleArray37, doubleArray39 };
        int[] intArray41 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray40, intArray41);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray29, intArray41);
        double[] doubleArray50 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray57 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray64 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray71 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray72 = new double[][] { doubleArray50, doubleArray57, doubleArray64, doubleArray71 };
        double[][] doubleArray73 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray72);
        double[] doubleArray75 = new double[] { 1 };
        double[] doubleArray77 = new double[] { 1 };
        double[] doubleArray79 = new double[] { 1 };
        double[] doubleArray81 = new double[] { 1 };
        double[] doubleArray83 = new double[] { 1 };
        double[][] doubleArray84 = new double[][] { doubleArray75, doubleArray77, doubleArray79, doubleArray81, doubleArray83 };
        int[] intArray85 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray84, intArray85);
        double[][] doubleArray87 = new double[][] {};
        double[][] doubleArray88 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray87);
        int[] intArray89 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray88, intArray89);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray84, intArray89);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray72, intArray89);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray29, intArray89);
        double[][] doubleArray94 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray29);
        double[][] doubleArray95 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray94);
        int[] intArray97 = new int[] { (byte) 10 };
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray95, intArray97);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[]");
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray71), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray75), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray77), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray79), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray81), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray83), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray84);
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray85), "[]");
        org.junit.Assert.assertNotNull(doubleArray87);
        org.junit.Assert.assertNotNull(doubleArray88);
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray89), "[]");
        org.junit.Assert.assertNotNull(doubleArray94);
        org.junit.Assert.assertNotNull(doubleArray95);
        org.junit.Assert.assertNotNull(intArray97);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray97), "[0]");
    }

    @Test
    public void test3529() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3529");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray30 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray29);
        double[][] doubleArray31 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        double[][] doubleArray32 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray31);
        double[][] doubleArray33 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray31);
        double[][] doubleArray34 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray33);
        double[][] doubleArray35 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray33);
        double[][] doubleArray36 = new double[][] {};
        double[][] doubleArray37 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray36);
        double[][] doubleArray38 = new double[][] {};
        double[][] doubleArray39 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray38);
        double[][] doubleArray40 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray39);
        double[] doubleArray44 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray48 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray52 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray56 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray57 = new double[][] { doubleArray44, doubleArray48, doubleArray52, doubleArray56 };
        double[] doubleArray59 = new double[] { 1 };
        double[] doubleArray61 = new double[] { 1 };
        double[] doubleArray63 = new double[] { 1 };
        double[] doubleArray65 = new double[] { 1 };
        double[] doubleArray67 = new double[] { 1 };
        double[][] doubleArray68 = new double[][] { doubleArray59, doubleArray61, doubleArray63, doubleArray65, doubleArray67 };
        int[] intArray69 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray68, intArray69);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray57, intArray69);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray39, intArray69);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray37, intArray69);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray33, intArray69);
        double[][] doubleArray75 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray33);
        double[][] doubleArray76 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray75);
        java.lang.Class<?> wildcardClass77 = doubleArray76.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[]");
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertNotNull(wildcardClass77);
    }

    @Test
    public void test3530() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3530");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray30 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray31 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        double[][] doubleArray32 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        double[][] doubleArray33 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray32);
        double[][] doubleArray34 = new double[][] {};
        double[][] doubleArray35 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray34);
        double[][] doubleArray36 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray34);
        double[][] doubleArray37 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray34);
        double[][] doubleArray38 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray34);
        double[][] doubleArray39 = new double[][] {};
        double[][] doubleArray40 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray39);
        double[][] doubleArray41 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray40);
        double[] doubleArray45 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray49 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray53 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray57 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray58 = new double[][] { doubleArray45, doubleArray49, doubleArray53, doubleArray57 };
        double[] doubleArray60 = new double[] { 1 };
        double[] doubleArray62 = new double[] { 1 };
        double[] doubleArray64 = new double[] { 1 };
        double[] doubleArray66 = new double[] { 1 };
        double[] doubleArray68 = new double[] { 1 };
        double[][] doubleArray69 = new double[][] { doubleArray60, doubleArray62, doubleArray64, doubleArray66, doubleArray68 };
        int[] intArray70 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray69, intArray70);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray58, intArray70);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray41, intArray70);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray34, intArray70);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray33, intArray70);
        java.lang.Class<?> wildcardClass76 = intArray70.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray66), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[]");
        org.junit.Assert.assertNotNull(wildcardClass76);
    }

    @Test
    public void test3531() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3531");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[] doubleArray3 = new double[] { 1 };
        double[] doubleArray5 = new double[] { 1 };
        double[] doubleArray7 = new double[] { 1 };
        double[] doubleArray9 = new double[] { 1 };
        double[] doubleArray11 = new double[] { 1 };
        double[][] doubleArray12 = new double[][] { doubleArray3, doubleArray5, doubleArray7, doubleArray9, doubleArray11 };
        int[] intArray13 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray12, intArray13);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray0, intArray13);
        double[][] doubleArray16 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray17 = new double[][] {};
        double[][] doubleArray18 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray17);
        double[][] doubleArray19 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray17);
        double[][] doubleArray20 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray17);
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray34 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray41 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray48 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray49 = new double[][] { doubleArray27, doubleArray34, doubleArray41, doubleArray48 };
        double[][] doubleArray50 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray49);
        double[][] doubleArray51 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray50);
        double[][] doubleArray52 = new double[][] {};
        double[][] doubleArray53 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray52);
        double[] doubleArray55 = new double[] { 1 };
        double[] doubleArray57 = new double[] { 1 };
        double[] doubleArray59 = new double[] { 1 };
        double[] doubleArray61 = new double[] { 1 };
        double[] doubleArray63 = new double[] { 1 };
        double[][] doubleArray64 = new double[][] { doubleArray55, doubleArray57, doubleArray59, doubleArray61, doubleArray63 };
        int[] intArray65 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray64, intArray65);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray52, intArray65);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray51, intArray65);
        double[][] doubleArray69 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray51);
        double[] doubleArray71 = new double[] { 1 };
        double[] doubleArray73 = new double[] { 1 };
        double[] doubleArray75 = new double[] { 1 };
        double[] doubleArray77 = new double[] { 1 };
        double[] doubleArray79 = new double[] { 1 };
        double[][] doubleArray80 = new double[][] { doubleArray71, doubleArray73, doubleArray75, doubleArray77, doubleArray79 };
        int[] intArray81 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray80, intArray81);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray69, intArray81);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray17, intArray81);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray16, intArray81);
        double[][] doubleArray86 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray16);
        double[][] doubleArray87 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray86);
        double[][] doubleArray88 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray87);
        double[][] doubleArray89 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray88);
        double[][] doubleArray90 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray88);
        java.lang.Class<?> wildcardClass91 = doubleArray88.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[]");
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray71), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray73), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray75), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray77), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray79), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray81), "[]");
        org.junit.Assert.assertNotNull(doubleArray86);
        org.junit.Assert.assertNotNull(doubleArray87);
        org.junit.Assert.assertNotNull(doubleArray88);
        org.junit.Assert.assertNotNull(doubleArray89);
        org.junit.Assert.assertNotNull(doubleArray90);
        org.junit.Assert.assertNotNull(wildcardClass91);
    }

    @Test
    public void test3532() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3532");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = new double[][] {};
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[] doubleArray5 = new double[] { 1 };
        double[] doubleArray7 = new double[] { 1 };
        double[] doubleArray9 = new double[] { 1 };
        double[] doubleArray11 = new double[] { 1 };
        double[] doubleArray13 = new double[] { 1 };
        double[][] doubleArray14 = new double[][] { doubleArray5, doubleArray7, doubleArray9, doubleArray11, doubleArray13 };
        int[] intArray15 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray14, intArray15);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray2, intArray15);
        double[] doubleArray21 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray25 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray29 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray33 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray34 = new double[][] { doubleArray21, doubleArray25, doubleArray29, doubleArray33 };
        double[] doubleArray36 = new double[] { 1 };
        double[] doubleArray38 = new double[] { 1 };
        double[] doubleArray40 = new double[] { 1 };
        double[] doubleArray42 = new double[] { 1 };
        double[] doubleArray44 = new double[] { 1 };
        double[][] doubleArray45 = new double[][] { doubleArray36, doubleArray38, doubleArray40, doubleArray42, doubleArray44 };
        int[] intArray46 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray45, intArray46);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray34, intArray46);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray2, intArray46);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray1, intArray46);
        double[][] doubleArray51 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray52 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray51);
        double[][] doubleArray53 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray52);
        double[][] doubleArray54 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray52);
        double[][] doubleArray55 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray54);
        double[][] doubleArray56 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray54);
        double[][] doubleArray57 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray56);
        double[][] doubleArray58 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray57);
        java.lang.Class<?> wildcardClass59 = doubleArray58.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertNotNull(wildcardClass59);
    }

    @Test
    public void test3533() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3533");
        double[][] doubleArray0 = null;
        double[][] doubleArray1 = new double[][] {};
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        int[] intArray3 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray2, intArray3);
        double[][] doubleArray5 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray6 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray7 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray6);
        double[][] doubleArray8 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray6);
        double[][] doubleArray9 = new double[][] {};
        double[][] doubleArray10 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray9);
        double[][] doubleArray11 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray10);
        double[][] doubleArray12 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray11);
        double[][] doubleArray13 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray12);
        double[][] doubleArray14 = null;
        double[][] doubleArray15 = new double[][] {};
        double[][] doubleArray16 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray15);
        double[][] doubleArray17 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray16);
        double[] doubleArray21 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray25 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray29 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray33 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray34 = new double[][] { doubleArray21, doubleArray25, doubleArray29, doubleArray33 };
        double[] doubleArray36 = new double[] { 1 };
        double[] doubleArray38 = new double[] { 1 };
        double[] doubleArray40 = new double[] { 1 };
        double[] doubleArray42 = new double[] { 1 };
        double[] doubleArray44 = new double[] { 1 };
        double[][] doubleArray45 = new double[][] { doubleArray36, doubleArray38, doubleArray40, doubleArray42, doubleArray44 };
        int[] intArray46 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray45, intArray46);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray34, intArray46);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray17, intArray46);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray14, intArray46);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray12, intArray46);
        double[][] doubleArray52 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray12);
        double[][] doubleArray53 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray52);
        double[][] doubleArray54 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray53);
        double[][] doubleArray55 = new double[][] {};
        double[][] doubleArray56 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray55);
        int[] intArray57 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray56, intArray57);
        double[][] doubleArray59 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray56);
        double[][] doubleArray60 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray59);
        double[][] doubleArray61 = new double[][] {};
        double[][] doubleArray62 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray61);
        int[] intArray63 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray62, intArray63);
        double[] doubleArray66 = new double[] { 1 };
        double[] doubleArray68 = new double[] { 1 };
        double[] doubleArray70 = new double[] { 1 };
        double[] doubleArray72 = new double[] { 1 };
        double[] doubleArray74 = new double[] { 1 };
        double[][] doubleArray75 = new double[][] { doubleArray66, doubleArray68, doubleArray70, doubleArray72, doubleArray74 };
        int[] intArray76 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray75, intArray76);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray62, intArray76);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray59, intArray76);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray54, intArray76);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray8, intArray76);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray0, intArray76);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[]");
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[]");
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[]");
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray66), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray70), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray74), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[]");
    }

    @Test
    public void test3534() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3534");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        int[] intArray2 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray1, intArray2);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray5 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray6 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray5);
        double[][] doubleArray7 = null;
        double[][] doubleArray8 = new double[][] {};
        double[][] doubleArray9 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray8);
        double[][] doubleArray10 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray9);
        double[][] doubleArray11 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray10);
        double[][] doubleArray12 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray11);
        double[][] doubleArray13 = new double[][] {};
        double[][] doubleArray14 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray13);
        double[][] doubleArray15 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray14);
        double[][] doubleArray16 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray15);
        double[][] doubleArray17 = new double[][] {};
        double[][] doubleArray18 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray17);
        double[] doubleArray20 = new double[] { 1 };
        double[] doubleArray22 = new double[] { 1 };
        double[] doubleArray24 = new double[] { 1 };
        double[] doubleArray26 = new double[] { 1 };
        double[] doubleArray28 = new double[] { 1 };
        double[][] doubleArray29 = new double[][] { doubleArray20, doubleArray22, doubleArray24, doubleArray26, doubleArray28 };
        int[] intArray30 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray29, intArray30);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray17, intArray30);
        double[] doubleArray36 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray40 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray44 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray48 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray49 = new double[][] { doubleArray36, doubleArray40, doubleArray44, doubleArray48 };
        double[] doubleArray51 = new double[] { 1 };
        double[] doubleArray53 = new double[] { 1 };
        double[] doubleArray55 = new double[] { 1 };
        double[] doubleArray57 = new double[] { 1 };
        double[] doubleArray59 = new double[] { 1 };
        double[][] doubleArray60 = new double[][] { doubleArray51, doubleArray53, doubleArray55, doubleArray57, doubleArray59 };
        int[] intArray61 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray60, intArray61);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray49, intArray61);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray17, intArray61);
        double[] doubleArray66 = new double[] { 1 };
        double[] doubleArray68 = new double[] { 1 };
        double[] doubleArray70 = new double[] { 1 };
        double[] doubleArray72 = new double[] { 1 };
        double[] doubleArray74 = new double[] { 1 };
        double[][] doubleArray75 = new double[][] { doubleArray66, doubleArray68, doubleArray70, doubleArray72, doubleArray74 };
        int[] intArray76 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray75, intArray76);
        double[][] doubleArray78 = new double[][] {};
        double[][] doubleArray79 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray78);
        int[] intArray80 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray79, intArray80);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray75, intArray80);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray17, intArray80);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray16, intArray80);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray11, intArray80);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray7, intArray80);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray5, intArray80);
        double[][] doubleArray88 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray5);
        java.lang.Class<?> wildcardClass89 = doubleArray5.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[]");
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray66), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray70), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray74), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[]");
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[]");
        org.junit.Assert.assertNotNull(doubleArray88);
        org.junit.Assert.assertNotNull(wildcardClass89);
    }

    @Test
    public void test3535() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3535");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray30 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray31 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray32 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray31);
        double[][] doubleArray33 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray32);
        double[][] doubleArray34 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray33);
        double[][] doubleArray35 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray34);
        int[] intArray36 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray35, intArray36);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertNotNull(doubleArray35);
    }

    @Test
    public void test3536() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3536");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[] doubleArray6 = new double[] { 1 };
        double[] doubleArray8 = new double[] { 1 };
        double[] doubleArray10 = new double[] { 1 };
        double[] doubleArray12 = new double[] { 1 };
        double[] doubleArray14 = new double[] { 1 };
        double[][] doubleArray15 = new double[][] { doubleArray6, doubleArray8, doubleArray10, doubleArray12, doubleArray14 };
        int[] intArray16 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray15, intArray16);
        double[][] doubleArray18 = new double[][] {};
        double[][] doubleArray19 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray18);
        int[] intArray20 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray19, intArray20);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray15, intArray20);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray3, intArray20);
        double[][] doubleArray24 = new double[][] {};
        double[][] doubleArray25 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray24);
        double[][] doubleArray26 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray25);
        double[] doubleArray30 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray34 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray38 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray42 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray43 = new double[][] { doubleArray30, doubleArray34, doubleArray38, doubleArray42 };
        double[] doubleArray45 = new double[] { 1 };
        double[] doubleArray47 = new double[] { 1 };
        double[] doubleArray49 = new double[] { 1 };
        double[] doubleArray51 = new double[] { 1 };
        double[] doubleArray53 = new double[] { 1 };
        double[][] doubleArray54 = new double[][] { doubleArray45, doubleArray47, doubleArray49, doubleArray51, doubleArray53 };
        int[] intArray55 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray54, intArray55);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray43, intArray55);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray25, intArray55);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray3, intArray55);
        double[][] doubleArray60 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[][] doubleArray61 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray60);
        double[][] doubleArray62 = new double[][] {};
        double[][] doubleArray63 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray62);
        double[][] doubleArray64 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray62);
        double[][] doubleArray65 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray62);
        double[][] doubleArray66 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray65);
        double[][] doubleArray67 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray65);
        double[][] doubleArray68 = new double[][] {};
        double[][] doubleArray69 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray68);
        int[] intArray70 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray69, intArray70);
        double[] doubleArray73 = new double[] { 1 };
        double[] doubleArray75 = new double[] { 1 };
        double[] doubleArray77 = new double[] { 1 };
        double[] doubleArray79 = new double[] { 1 };
        double[] doubleArray81 = new double[] { 1 };
        double[][] doubleArray82 = new double[][] { doubleArray73, doubleArray75, doubleArray77, doubleArray79, doubleArray81 };
        int[] intArray83 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray82, intArray83);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray69, intArray83);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray67, intArray83);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray60, intArray83);
        double[][] doubleArray88 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray60);
        double[][] doubleArray89 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray60);
        double[][] doubleArray90 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray89);
        java.lang.Class<?> wildcardClass91 = doubleArray89.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[]");
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[]");
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[]");
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray73), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray75), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray77), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray79), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray81), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray82);
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray83), "[]");
        org.junit.Assert.assertNotNull(doubleArray88);
        org.junit.Assert.assertNotNull(doubleArray89);
        org.junit.Assert.assertNotNull(doubleArray90);
        org.junit.Assert.assertNotNull(wildcardClass91);
    }

    @Test
    public void test3537() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3537");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[] doubleArray11 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray18 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray25 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray32 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray33 = new double[][] { doubleArray11, doubleArray18, doubleArray25, doubleArray32 };
        double[][] doubleArray34 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray33);
        double[][] doubleArray35 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray34);
        double[][] doubleArray36 = new double[][] {};
        double[][] doubleArray37 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray36);
        double[] doubleArray39 = new double[] { 1 };
        double[] doubleArray41 = new double[] { 1 };
        double[] doubleArray43 = new double[] { 1 };
        double[] doubleArray45 = new double[] { 1 };
        double[] doubleArray47 = new double[] { 1 };
        double[][] doubleArray48 = new double[][] { doubleArray39, doubleArray41, doubleArray43, doubleArray45, doubleArray47 };
        int[] intArray49 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray48, intArray49);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray36, intArray49);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray35, intArray49);
        double[][] doubleArray53 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray35);
        double[] doubleArray55 = new double[] { 1 };
        double[] doubleArray57 = new double[] { 1 };
        double[] doubleArray59 = new double[] { 1 };
        double[] doubleArray61 = new double[] { 1 };
        double[] doubleArray63 = new double[] { 1 };
        double[][] doubleArray64 = new double[][] { doubleArray55, doubleArray57, doubleArray59, doubleArray61, doubleArray63 };
        int[] intArray65 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray64, intArray65);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray53, intArray65);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray3, intArray65);
        double[][] doubleArray69 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[][] doubleArray70 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray69);
        double[][] doubleArray71 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray69);
        double[][] doubleArray72 = null;
        double[][] doubleArray73 = new double[][] {};
        double[][] doubleArray74 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray73);
        int[] intArray75 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray74, intArray75);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray72, intArray75);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray69, intArray75);
        double[][] doubleArray79 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray69);
        java.lang.Class<?> wildcardClass80 = doubleArray79.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[]");
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[]");
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[]");
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertNotNull(wildcardClass80);
    }

    @Test
    public void test3538() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3538");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[][] doubleArray5 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray4);
        double[][] doubleArray6 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray5);
        double[][] doubleArray7 = new double[][] {};
        double[][] doubleArray8 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray7);
        double[][] doubleArray9 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray7);
        double[][] doubleArray10 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray9);
        double[][] doubleArray11 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray9);
        double[][] doubleArray12 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray11);
        double[][] doubleArray13 = new double[][] {};
        double[][] doubleArray14 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray13);
        double[][] doubleArray15 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray13);
        double[][] doubleArray16 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray15);
        double[][] doubleArray17 = null;
        double[][] doubleArray18 = new double[][] {};
        double[][] doubleArray19 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray18);
        double[][] doubleArray20 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray19);
        double[] doubleArray24 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray28 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray32 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray36 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray37 = new double[][] { doubleArray24, doubleArray28, doubleArray32, doubleArray36 };
        double[] doubleArray39 = new double[] { 1 };
        double[] doubleArray41 = new double[] { 1 };
        double[] doubleArray43 = new double[] { 1 };
        double[] doubleArray45 = new double[] { 1 };
        double[] doubleArray47 = new double[] { 1 };
        double[][] doubleArray48 = new double[][] { doubleArray39, doubleArray41, doubleArray43, doubleArray45, doubleArray47 };
        int[] intArray49 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray48, intArray49);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray37, intArray49);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray20, intArray49);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray17, intArray49);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray16, intArray49);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray11, intArray49);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray5, intArray49);
        double[][] doubleArray57 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray5);
        double[][] doubleArray58 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[]");
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertNotNull(doubleArray58);
    }

    @Test
    public void test3539() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3539");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[][] doubleArray5 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray4);
        double[][] doubleArray6 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray5);
        double[][] doubleArray7 = new double[][] {};
        double[][] doubleArray8 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray7);
        double[][] doubleArray9 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray7);
        double[][] doubleArray10 = new double[][] {};
        double[][] doubleArray11 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray10);
        double[][] doubleArray12 = new double[][] {};
        double[][] doubleArray13 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray12);
        double[] doubleArray15 = new double[] { 1 };
        double[] doubleArray17 = new double[] { 1 };
        double[] doubleArray19 = new double[] { 1 };
        double[] doubleArray21 = new double[] { 1 };
        double[] doubleArray23 = new double[] { 1 };
        double[][] doubleArray24 = new double[][] { doubleArray15, doubleArray17, doubleArray19, doubleArray21, doubleArray23 };
        int[] intArray25 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray24, intArray25);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray12, intArray25);
        double[] doubleArray31 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray35 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray39 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray43 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray44 = new double[][] { doubleArray31, doubleArray35, doubleArray39, doubleArray43 };
        double[] doubleArray46 = new double[] { 1 };
        double[] doubleArray48 = new double[] { 1 };
        double[] doubleArray50 = new double[] { 1 };
        double[] doubleArray52 = new double[] { 1 };
        double[] doubleArray54 = new double[] { 1 };
        double[][] doubleArray55 = new double[][] { doubleArray46, doubleArray48, doubleArray50, doubleArray52, doubleArray54 };
        int[] intArray56 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray55, intArray56);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray44, intArray56);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray12, intArray56);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray10, intArray56);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray7, intArray56);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray6, intArray56);
        double[][] doubleArray63 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray6);
        double[][] doubleArray64 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[]");
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertNotNull(doubleArray64);
    }

    @Test
    public void test3540() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3540");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[][] doubleArray5 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[][] doubleArray6 = new double[][] {};
        double[][] doubleArray7 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray6);
        double[][] doubleArray8 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray7);
        double[] doubleArray15 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray22 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray29 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray36 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray37 = new double[][] { doubleArray15, doubleArray22, doubleArray29, doubleArray36 };
        double[][] doubleArray38 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray37);
        double[] doubleArray40 = new double[] { 1 };
        double[] doubleArray42 = new double[] { 1 };
        double[] doubleArray44 = new double[] { 1 };
        double[] doubleArray46 = new double[] { 1 };
        double[] doubleArray48 = new double[] { 1 };
        double[][] doubleArray49 = new double[][] { doubleArray40, doubleArray42, doubleArray44, doubleArray46, doubleArray48 };
        int[] intArray50 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray49, intArray50);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray38, intArray50);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray7, intArray50);
        double[] doubleArray57 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray61 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray65 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray69 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray70 = new double[][] { doubleArray57, doubleArray61, doubleArray65, doubleArray69 };
        double[] doubleArray72 = new double[] { 1 };
        double[] doubleArray74 = new double[] { 1 };
        double[] doubleArray76 = new double[] { 1 };
        double[] doubleArray78 = new double[] { 1 };
        double[] doubleArray80 = new double[] { 1 };
        double[][] doubleArray81 = new double[][] { doubleArray72, doubleArray74, doubleArray76, doubleArray78, doubleArray80 };
        int[] intArray82 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray81, intArray82);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray70, intArray82);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray7, intArray82);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray3, intArray82);
        double[][] doubleArray87 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[][] doubleArray88 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray87);
        double[][] doubleArray89 = null;
        double[][] doubleArray90 = new double[][] {};
        double[][] doubleArray91 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray90);
        int[] intArray92 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray91, intArray92);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray89, intArray92);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray87, intArray92);
        double[][] doubleArray96 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray87);
        double[][] doubleArray97 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray87);
        double[][] doubleArray98 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray97);
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[]");
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray74), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray78), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray80), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray81);
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[]");
        org.junit.Assert.assertNotNull(doubleArray87);
        org.junit.Assert.assertNotNull(doubleArray88);
        org.junit.Assert.assertNotNull(doubleArray90);
        org.junit.Assert.assertNotNull(doubleArray91);
        org.junit.Assert.assertNotNull(intArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray92), "[]");
        org.junit.Assert.assertNotNull(doubleArray96);
        org.junit.Assert.assertNotNull(doubleArray97);
        org.junit.Assert.assertNotNull(doubleArray98);
    }

    @Test
    public void test3541() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3541");
        double[][] doubleArray0 = null;
        double[][] doubleArray1 = new double[][] {};
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[][] doubleArray5 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[][] doubleArray6 = new double[][] {};
        double[][] doubleArray7 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray6);
        double[][] doubleArray8 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray6);
        double[][] doubleArray9 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray6);
        double[][] doubleArray10 = new double[][] {};
        double[][] doubleArray11 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray10);
        double[][] doubleArray12 = new double[][] {};
        double[][] doubleArray13 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray12);
        double[] doubleArray15 = new double[] { 1 };
        double[] doubleArray17 = new double[] { 1 };
        double[] doubleArray19 = new double[] { 1 };
        double[] doubleArray21 = new double[] { 1 };
        double[] doubleArray23 = new double[] { 1 };
        double[][] doubleArray24 = new double[][] { doubleArray15, doubleArray17, doubleArray19, doubleArray21, doubleArray23 };
        int[] intArray25 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray24, intArray25);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray12, intArray25);
        double[] doubleArray31 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray35 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray39 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray43 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray44 = new double[][] { doubleArray31, doubleArray35, doubleArray39, doubleArray43 };
        double[] doubleArray46 = new double[] { 1 };
        double[] doubleArray48 = new double[] { 1 };
        double[] doubleArray50 = new double[] { 1 };
        double[] doubleArray52 = new double[] { 1 };
        double[] doubleArray54 = new double[] { 1 };
        double[][] doubleArray55 = new double[][] { doubleArray46, doubleArray48, doubleArray50, doubleArray52, doubleArray54 };
        int[] intArray56 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray55, intArray56);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray44, intArray56);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray12, intArray56);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray10, intArray56);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray6, intArray56);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray5, intArray56);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray0, intArray56);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[]");
    }

    @Test
    public void test3542() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3542");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[][] doubleArray5 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[][] doubleArray6 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray5);
        double[][] doubleArray7 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray5);
        double[][] doubleArray8 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray7);
        double[][] doubleArray9 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray8);
        java.lang.Class<?> wildcardClass10 = doubleArray8.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertNotNull(wildcardClass10);
    }

    @Test
    public void test3543() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3543");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray5 = new double[][] {};
        double[][] doubleArray6 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray5);
        double[][] doubleArray7 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray6);
        double[] doubleArray11 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray15 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray19 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray23 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray24 = new double[][] { doubleArray11, doubleArray15, doubleArray19, doubleArray23 };
        double[] doubleArray26 = new double[] { 1 };
        double[] doubleArray28 = new double[] { 1 };
        double[] doubleArray30 = new double[] { 1 };
        double[] doubleArray32 = new double[] { 1 };
        double[] doubleArray34 = new double[] { 1 };
        double[][] doubleArray35 = new double[][] { doubleArray26, doubleArray28, doubleArray30, doubleArray32, doubleArray34 };
        int[] intArray36 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray35, intArray36);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray24, intArray36);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray7, intArray36);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray0, intArray36);
        double[][] doubleArray41 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray42 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray41);
        double[][] doubleArray43 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray42);
        double[][] doubleArray44 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray43);
        double[][] doubleArray45 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray44);
        double[][] doubleArray46 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray44);
        double[][] doubleArray47 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray46);
        double[][] doubleArray48 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray46);
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertNotNull(doubleArray48);
    }

    @Test
    public void test3544() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3544");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[] doubleArray9 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray16 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray23 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray30 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray31 = new double[][] { doubleArray9, doubleArray16, doubleArray23, doubleArray30 };
        double[][] doubleArray32 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray31);
        double[][] doubleArray33 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray31);
        double[][] doubleArray34 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray31);
        double[][] doubleArray35 = new double[][] {};
        double[][] doubleArray36 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray35);
        int[] intArray37 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray36, intArray37);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray34, intArray37);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray2, intArray37);
        double[][] doubleArray41 = null;
        double[][] doubleArray42 = new double[][] {};
        double[][] doubleArray43 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray42);
        double[][] doubleArray44 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray43);
        double[] doubleArray48 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray52 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray56 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray60 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray61 = new double[][] { doubleArray48, doubleArray52, doubleArray56, doubleArray60 };
        double[] doubleArray63 = new double[] { 1 };
        double[] doubleArray65 = new double[] { 1 };
        double[] doubleArray67 = new double[] { 1 };
        double[] doubleArray69 = new double[] { 1 };
        double[] doubleArray71 = new double[] { 1 };
        double[][] doubleArray72 = new double[][] { doubleArray63, doubleArray65, doubleArray67, doubleArray69, doubleArray71 };
        int[] intArray73 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray72, intArray73);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray61, intArray73);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray44, intArray73);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray41, intArray73);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray2, intArray73);
        double[][] doubleArray79 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray80 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray81 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray80);
        double[][] doubleArray82 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray80);
        double[][] doubleArray83 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray80);
        double[][] doubleArray84 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray80);
        double[][] doubleArray85 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray84);
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray71), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[]");
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertNotNull(doubleArray81);
        org.junit.Assert.assertNotNull(doubleArray82);
        org.junit.Assert.assertNotNull(doubleArray83);
        org.junit.Assert.assertNotNull(doubleArray84);
        org.junit.Assert.assertNotNull(doubleArray85);
    }

    @Test
    public void test3545() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3545");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[] doubleArray31 = new double[] { 1 };
        double[] doubleArray33 = new double[] { 1 };
        double[] doubleArray35 = new double[] { 1 };
        double[] doubleArray37 = new double[] { 1 };
        double[] doubleArray39 = new double[] { 1 };
        double[][] doubleArray40 = new double[][] { doubleArray31, doubleArray33, doubleArray35, doubleArray37, doubleArray39 };
        int[] intArray41 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray40, intArray41);
        double[][] doubleArray43 = new double[][] {};
        double[][] doubleArray44 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray43);
        int[] intArray45 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray44, intArray45);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray40, intArray45);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray28, intArray45);
        double[][] doubleArray49 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray50 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray51 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray52 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray51);
        double[][] doubleArray53 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray51);
        double[][] doubleArray54 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray53);
        double[][] doubleArray55 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray54);
        double[][] doubleArray56 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray54);
        double[][] doubleArray57 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray56);
        java.lang.Class<?> wildcardClass58 = doubleArray56.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertNotNull(wildcardClass58);
    }

    @Test
    public void test3546() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3546");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray30 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray29);
        double[][] doubleArray31 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        double[][] doubleArray32 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray31);
        double[][] doubleArray33 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray31);
        double[][] doubleArray34 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray33);
        double[][] doubleArray35 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray34);
        double[][] doubleArray36 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray34);
        double[][] doubleArray37 = new double[][] {};
        double[][] doubleArray38 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray37);
        double[][] doubleArray39 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray38);
        double[][] doubleArray40 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray39);
        double[][] doubleArray41 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray39);
        double[][] doubleArray42 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray41);
        double[][] doubleArray43 = new double[][] {};
        double[][] doubleArray44 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray43);
        double[][] doubleArray45 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray44);
        double[] doubleArray49 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray53 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray57 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray61 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray62 = new double[][] { doubleArray49, doubleArray53, doubleArray57, doubleArray61 };
        double[] doubleArray64 = new double[] { 1 };
        double[] doubleArray66 = new double[] { 1 };
        double[] doubleArray68 = new double[] { 1 };
        double[] doubleArray70 = new double[] { 1 };
        double[] doubleArray72 = new double[] { 1 };
        double[][] doubleArray73 = new double[][] { doubleArray64, doubleArray66, doubleArray68, doubleArray70, doubleArray72 };
        int[] intArray74 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray73, intArray74);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray62, intArray74);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray45, intArray74);
        double[][] doubleArray78 = null;
        double[] doubleArray80 = new double[] { 1 };
        double[] doubleArray82 = new double[] { 1 };
        double[] doubleArray84 = new double[] { 1 };
        double[] doubleArray86 = new double[] { 1 };
        double[] doubleArray88 = new double[] { 1 };
        double[][] doubleArray89 = new double[][] { doubleArray80, doubleArray82, doubleArray84, doubleArray86, doubleArray88 };
        int[] intArray90 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray89, intArray90);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray78, intArray90);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray45, intArray90);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray41, intArray90);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray34, intArray90);
        java.lang.Class<?> wildcardClass96 = intArray90.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray66), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray70), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[]");
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray80), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray82), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray84), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray86), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray88), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray89);
        org.junit.Assert.assertNotNull(intArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray90), "[]");
        org.junit.Assert.assertNotNull(wildcardClass96);
    }

    @Test
    public void test3547() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3547");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray5 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray6 = null;
        double[][] doubleArray7 = new double[][] {};
        double[][] doubleArray8 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray7);
        double[][] doubleArray9 = new double[][] {};
        double[][] doubleArray10 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray9);
        double[] doubleArray12 = new double[] { 1 };
        double[] doubleArray14 = new double[] { 1 };
        double[] doubleArray16 = new double[] { 1 };
        double[] doubleArray18 = new double[] { 1 };
        double[] doubleArray20 = new double[] { 1 };
        double[][] doubleArray21 = new double[][] { doubleArray12, doubleArray14, doubleArray16, doubleArray18, doubleArray20 };
        int[] intArray22 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray21, intArray22);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray9, intArray22);
        double[] doubleArray28 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray32 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray36 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray40 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray41 = new double[][] { doubleArray28, doubleArray32, doubleArray36, doubleArray40 };
        double[] doubleArray43 = new double[] { 1 };
        double[] doubleArray45 = new double[] { 1 };
        double[] doubleArray47 = new double[] { 1 };
        double[] doubleArray49 = new double[] { 1 };
        double[] doubleArray51 = new double[] { 1 };
        double[][] doubleArray52 = new double[][] { doubleArray43, doubleArray45, doubleArray47, doubleArray49, doubleArray51 };
        int[] intArray53 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray52, intArray53);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray41, intArray53);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray9, intArray53);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray8, intArray53);
        double[] doubleArray59 = new double[] { 1 };
        double[] doubleArray61 = new double[] { 1 };
        double[] doubleArray63 = new double[] { 1 };
        double[] doubleArray65 = new double[] { 1 };
        double[] doubleArray67 = new double[] { 1 };
        double[][] doubleArray68 = new double[][] { doubleArray59, doubleArray61, doubleArray63, doubleArray65, doubleArray67 };
        int[] intArray69 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray68, intArray69);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray8, intArray69);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray6, intArray69);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray5, intArray69);
        double[][] doubleArray74 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray5);
        java.lang.Class<?> wildcardClass75 = doubleArray5.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[]");
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[]");
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertNotNull(wildcardClass75);
    }

    @Test
    public void test3548() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3548");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray30 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray29);
        double[][] doubleArray31 = new double[][] {};
        double[][] doubleArray32 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray31);
        double[] doubleArray34 = new double[] { 1 };
        double[] doubleArray36 = new double[] { 1 };
        double[] doubleArray38 = new double[] { 1 };
        double[] doubleArray40 = new double[] { 1 };
        double[] doubleArray42 = new double[] { 1 };
        double[][] doubleArray43 = new double[][] { doubleArray34, doubleArray36, doubleArray38, doubleArray40, doubleArray42 };
        int[] intArray44 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray43, intArray44);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray31, intArray44);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray30, intArray44);
        double[][] doubleArray48 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        double[][] doubleArray49 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        double[][] doubleArray50 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        double[][] doubleArray51 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray50);
        double[][] doubleArray52 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray50);
        double[][] doubleArray53 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray52);
        double[][] doubleArray54 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray52);
        java.lang.Class<?> wildcardClass55 = doubleArray52.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertNotNull(wildcardClass55);
    }

    @Test
    public void test3549() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3549");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[] doubleArray3 = new double[] { 1 };
        double[] doubleArray5 = new double[] { 1 };
        double[] doubleArray7 = new double[] { 1 };
        double[] doubleArray9 = new double[] { 1 };
        double[] doubleArray11 = new double[] { 1 };
        double[][] doubleArray12 = new double[][] { doubleArray3, doubleArray5, doubleArray7, doubleArray9, doubleArray11 };
        int[] intArray13 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray12, intArray13);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray0, intArray13);
        double[] doubleArray19 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray23 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray27 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray31 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray32 = new double[][] { doubleArray19, doubleArray23, doubleArray27, doubleArray31 };
        double[] doubleArray34 = new double[] { 1 };
        double[] doubleArray36 = new double[] { 1 };
        double[] doubleArray38 = new double[] { 1 };
        double[] doubleArray40 = new double[] { 1 };
        double[] doubleArray42 = new double[] { 1 };
        double[][] doubleArray43 = new double[][] { doubleArray34, doubleArray36, doubleArray38, doubleArray40, doubleArray42 };
        int[] intArray44 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray43, intArray44);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray32, intArray44);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray0, intArray44);
        double[] doubleArray49 = new double[] { 1 };
        double[] doubleArray51 = new double[] { 1 };
        double[] doubleArray53 = new double[] { 1 };
        double[] doubleArray55 = new double[] { 1 };
        double[] doubleArray57 = new double[] { 1 };
        double[][] doubleArray58 = new double[][] { doubleArray49, doubleArray51, doubleArray53, doubleArray55, doubleArray57 };
        int[] intArray59 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray58, intArray59);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray0, intArray59);
        double[][] doubleArray62 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray63 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray64 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray65 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray66 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        java.lang.Class<?> wildcardClass67 = doubleArray66.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[]");
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertNotNull(wildcardClass67);
    }

    @Test
    public void test3550() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3550");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        int[] intArray2 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray1, intArray2);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray5 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray4);
        double[][] doubleArray6 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray5);
        double[][] doubleArray7 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray6);
        double[][] doubleArray8 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray7);
        double[][] doubleArray9 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray7);
        double[][] doubleArray10 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray7);
        double[][] doubleArray11 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray10);
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertNotNull(doubleArray11);
    }

    @Test
    public void test3551() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3551");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray5 = new double[][] {};
        double[][] doubleArray6 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray5);
        double[][] doubleArray7 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray5);
        double[][] doubleArray8 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray5);
        double[][] doubleArray9 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray5);
        double[][] doubleArray10 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray9);
        double[][] doubleArray11 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray9);
        double[][] doubleArray12 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray11);
        double[][] doubleArray13 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray11);
        double[][] doubleArray14 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray11);
        double[][] doubleArray15 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray14);
        double[] doubleArray22 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray29 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray36 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray43 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray44 = new double[][] { doubleArray22, doubleArray29, doubleArray36, doubleArray43 };
        double[][] doubleArray45 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray44);
        double[][] doubleArray46 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray44);
        double[][] doubleArray47 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray46);
        double[][] doubleArray48 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray46);
        double[][] doubleArray49 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray48);
        double[][] doubleArray50 = new double[][] {};
        double[][] doubleArray51 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray50);
        double[][] doubleArray52 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray50);
        double[][] doubleArray53 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray50);
        double[][] doubleArray54 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray50);
        double[][] doubleArray55 = new double[][] {};
        double[][] doubleArray56 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray55);
        double[][] doubleArray57 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray56);
        double[] doubleArray61 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray65 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray69 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray73 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray74 = new double[][] { doubleArray61, doubleArray65, doubleArray69, doubleArray73 };
        double[] doubleArray76 = new double[] { 1 };
        double[] doubleArray78 = new double[] { 1 };
        double[] doubleArray80 = new double[] { 1 };
        double[] doubleArray82 = new double[] { 1 };
        double[] doubleArray84 = new double[] { 1 };
        double[][] doubleArray85 = new double[][] { doubleArray76, doubleArray78, doubleArray80, doubleArray82, doubleArray84 };
        int[] intArray86 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray85, intArray86);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray74, intArray86);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray57, intArray86);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray50, intArray86);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray49, intArray86);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray15, intArray86);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray4, intArray86);
        java.lang.Class<?> wildcardClass94 = intArray86.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray73), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray78), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray80), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray82), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray84), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray85);
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray86), "[]");
        org.junit.Assert.assertNotNull(wildcardClass94);
    }

    @Test
    public void test3552() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3552");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[][] doubleArray5 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[][] doubleArray6 = new double[][] {};
        double[][] doubleArray7 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray6);
        double[][] doubleArray8 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray7);
        double[] doubleArray15 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray22 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray29 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray36 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray37 = new double[][] { doubleArray15, doubleArray22, doubleArray29, doubleArray36 };
        double[][] doubleArray38 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray37);
        double[] doubleArray40 = new double[] { 1 };
        double[] doubleArray42 = new double[] { 1 };
        double[] doubleArray44 = new double[] { 1 };
        double[] doubleArray46 = new double[] { 1 };
        double[] doubleArray48 = new double[] { 1 };
        double[][] doubleArray49 = new double[][] { doubleArray40, doubleArray42, doubleArray44, doubleArray46, doubleArray48 };
        int[] intArray50 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray49, intArray50);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray38, intArray50);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray7, intArray50);
        double[] doubleArray57 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray61 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray65 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray69 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray70 = new double[][] { doubleArray57, doubleArray61, doubleArray65, doubleArray69 };
        double[] doubleArray72 = new double[] { 1 };
        double[] doubleArray74 = new double[] { 1 };
        double[] doubleArray76 = new double[] { 1 };
        double[] doubleArray78 = new double[] { 1 };
        double[] doubleArray80 = new double[] { 1 };
        double[][] doubleArray81 = new double[][] { doubleArray72, doubleArray74, doubleArray76, doubleArray78, doubleArray80 };
        int[] intArray82 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray81, intArray82);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray70, intArray82);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray7, intArray82);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray3, intArray82);
        double[][] doubleArray87 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[][] doubleArray88 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[][] doubleArray89 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray88);
        double[][] doubleArray90 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray88);
        double[][] doubleArray91 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray88);
        double[][] doubleArray92 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray88);
        double[][] doubleArray93 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray88);
        double[][] doubleArray94 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray93);
        java.lang.Class<?> wildcardClass95 = doubleArray93.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[]");
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray74), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray78), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray80), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray81);
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[]");
        org.junit.Assert.assertNotNull(doubleArray87);
        org.junit.Assert.assertNotNull(doubleArray88);
        org.junit.Assert.assertNotNull(doubleArray89);
        org.junit.Assert.assertNotNull(doubleArray90);
        org.junit.Assert.assertNotNull(doubleArray91);
        org.junit.Assert.assertNotNull(doubleArray92);
        org.junit.Assert.assertNotNull(doubleArray93);
        org.junit.Assert.assertNotNull(doubleArray94);
        org.junit.Assert.assertNotNull(wildcardClass95);
    }

    @Test
    public void test3553() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3553");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray30 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray31 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray32 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray31);
        double[][] doubleArray33 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray32);
        double[] doubleArray40 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray47 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray54 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray61 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray62 = new double[][] { doubleArray40, doubleArray47, doubleArray54, doubleArray61 };
        double[][] doubleArray63 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray62);
        double[][] doubleArray64 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray62);
        double[][] doubleArray65 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray62);
        double[][] doubleArray66 = new double[][] {};
        double[][] doubleArray67 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray66);
        int[] intArray68 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray67, intArray68);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray65, intArray68);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray33, intArray68);
        double[][] doubleArray72 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray33);
        double[][] doubleArray73 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray33);
        double[][] doubleArray74 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray73);
        double[][] doubleArray75 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray74);
        java.lang.Class<?> wildcardClass76 = doubleArray75.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[]");
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertNotNull(wildcardClass76);
    }

    @Test
    public void test3554() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3554");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[] doubleArray6 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray10 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray14 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray18 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray19 = new double[][] { doubleArray6, doubleArray10, doubleArray14, doubleArray18 };
        double[] doubleArray21 = new double[] { 1 };
        double[] doubleArray23 = new double[] { 1 };
        double[] doubleArray25 = new double[] { 1 };
        double[] doubleArray27 = new double[] { 1 };
        double[] doubleArray29 = new double[] { 1 };
        double[][] doubleArray30 = new double[][] { doubleArray21, doubleArray23, doubleArray25, doubleArray27, doubleArray29 };
        int[] intArray31 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray30, intArray31);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray19, intArray31);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray1, intArray31);
        double[][] doubleArray35 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray36 = null;
        double[] doubleArray43 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray50 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray57 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray64 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray65 = new double[][] { doubleArray43, doubleArray50, doubleArray57, doubleArray64 };
        double[][] doubleArray66 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray65);
        double[][] doubleArray67 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray65);
        double[][] doubleArray68 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray65);
        double[][] doubleArray69 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray68);
        double[][] doubleArray70 = new double[][] {};
        double[][] doubleArray71 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray70);
        int[] intArray72 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray71, intArray72);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray69, intArray72);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray36, intArray72);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray35, intArray72);
        double[][] doubleArray77 = new double[][] {};
        double[][] doubleArray78 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray77);
        int[] intArray79 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray78, intArray79);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray35, intArray79);
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[]");
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray79), "[]");
    }

    @Test
    public void test3555() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3555");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[] doubleArray31 = new double[] { 1 };
        double[] doubleArray33 = new double[] { 1 };
        double[] doubleArray35 = new double[] { 1 };
        double[] doubleArray37 = new double[] { 1 };
        double[] doubleArray39 = new double[] { 1 };
        double[][] doubleArray40 = new double[][] { doubleArray31, doubleArray33, doubleArray35, doubleArray37, doubleArray39 };
        int[] intArray41 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray40, intArray41);
        double[][] doubleArray43 = new double[][] {};
        double[][] doubleArray44 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray43);
        int[] intArray45 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray44, intArray45);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray40, intArray45);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray28, intArray45);
        double[][] doubleArray49 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray50 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray51 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray52 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray51);
        double[][] doubleArray53 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray51);
        double[][] doubleArray54 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray53);
        double[][] doubleArray55 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray54);
        double[][] doubleArray56 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray54);
        double[][] doubleArray57 = null;
        double[] doubleArray61 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray65 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray69 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray73 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray74 = new double[][] { doubleArray61, doubleArray65, doubleArray69, doubleArray73 };
        double[] doubleArray76 = new double[] { 1 };
        double[] doubleArray78 = new double[] { 1 };
        double[] doubleArray80 = new double[] { 1 };
        double[] doubleArray82 = new double[] { 1 };
        double[] doubleArray84 = new double[] { 1 };
        double[][] doubleArray85 = new double[][] { doubleArray76, doubleArray78, doubleArray80, doubleArray82, doubleArray84 };
        int[] intArray86 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray85, intArray86);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray74, intArray86);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray57, intArray86);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray54, intArray86);
        double[][] doubleArray91 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray54);
        double[][] doubleArray92 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray91);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray73), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray78), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray80), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray82), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray84), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray85);
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray86), "[]");
        org.junit.Assert.assertNotNull(doubleArray91);
        org.junit.Assert.assertNotNull(doubleArray92);
    }

    @Test
    public void test3556() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3556");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[] doubleArray3 = new double[] { 1 };
        double[] doubleArray5 = new double[] { 1 };
        double[] doubleArray7 = new double[] { 1 };
        double[] doubleArray9 = new double[] { 1 };
        double[] doubleArray11 = new double[] { 1 };
        double[][] doubleArray12 = new double[][] { doubleArray3, doubleArray5, doubleArray7, doubleArray9, doubleArray11 };
        int[] intArray13 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray12, intArray13);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray0, intArray13);
        double[] doubleArray19 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray23 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray27 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray31 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray32 = new double[][] { doubleArray19, doubleArray23, doubleArray27, doubleArray31 };
        double[] doubleArray34 = new double[] { 1 };
        double[] doubleArray36 = new double[] { 1 };
        double[] doubleArray38 = new double[] { 1 };
        double[] doubleArray40 = new double[] { 1 };
        double[] doubleArray42 = new double[] { 1 };
        double[][] doubleArray43 = new double[][] { doubleArray34, doubleArray36, doubleArray38, doubleArray40, doubleArray42 };
        int[] intArray44 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray43, intArray44);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray32, intArray44);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray0, intArray44);
        double[][] doubleArray48 = new double[][] {};
        double[][] doubleArray49 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray48);
        double[] doubleArray51 = new double[] { 1 };
        double[] doubleArray53 = new double[] { 1 };
        double[] doubleArray55 = new double[] { 1 };
        double[] doubleArray57 = new double[] { 1 };
        double[] doubleArray59 = new double[] { 1 };
        double[][] doubleArray60 = new double[][] { doubleArray51, doubleArray53, doubleArray55, doubleArray57, doubleArray59 };
        int[] intArray61 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray60, intArray61);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray48, intArray61);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray0, intArray61);
        double[][] doubleArray65 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray66 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray65);
        java.lang.Class<?> wildcardClass67 = doubleArray65.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[]");
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertNotNull(wildcardClass67);
    }

    @Test
    public void test3557() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3557");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray3 = new double[][] {};
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[][] doubleArray5 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[][] doubleArray6 = new double[][] {};
        double[][] doubleArray7 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray6);
        double[][] doubleArray8 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray7);
        double[][] doubleArray9 = new double[][] {};
        double[][] doubleArray10 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray9);
        double[][] doubleArray11 = new double[][] {};
        double[][] doubleArray12 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray11);
        double[] doubleArray14 = new double[] { 1 };
        double[] doubleArray16 = new double[] { 1 };
        double[] doubleArray18 = new double[] { 1 };
        double[] doubleArray20 = new double[] { 1 };
        double[] doubleArray22 = new double[] { 1 };
        double[][] doubleArray23 = new double[][] { doubleArray14, doubleArray16, doubleArray18, doubleArray20, doubleArray22 };
        int[] intArray24 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray23, intArray24);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray11, intArray24);
        double[] doubleArray30 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray34 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray38 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray42 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray43 = new double[][] { doubleArray30, doubleArray34, doubleArray38, doubleArray42 };
        double[] doubleArray45 = new double[] { 1 };
        double[] doubleArray47 = new double[] { 1 };
        double[] doubleArray49 = new double[] { 1 };
        double[] doubleArray51 = new double[] { 1 };
        double[] doubleArray53 = new double[] { 1 };
        double[][] doubleArray54 = new double[][] { doubleArray45, doubleArray47, doubleArray49, doubleArray51, doubleArray53 };
        int[] intArray55 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray54, intArray55);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray43, intArray55);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray11, intArray55);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray10, intArray55);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray8, intArray55);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray3, intArray55);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray2, intArray55);
        double[][] doubleArray63 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray64 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray65 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray64);
        double[][] doubleArray66 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray65);
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[]");
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertNotNull(doubleArray66);
    }

    @Test
    public void test3558() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3558");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = new double[][] {};
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[] doubleArray8 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray12 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray16 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray20 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray21 = new double[][] { doubleArray8, doubleArray12, doubleArray16, doubleArray20 };
        double[] doubleArray23 = new double[] { 1 };
        double[] doubleArray25 = new double[] { 1 };
        double[] doubleArray27 = new double[] { 1 };
        double[] doubleArray29 = new double[] { 1 };
        double[] doubleArray31 = new double[] { 1 };
        double[][] doubleArray32 = new double[][] { doubleArray23, doubleArray25, doubleArray27, doubleArray29, doubleArray31 };
        int[] intArray33 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray32, intArray33);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray21, intArray33);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray3, intArray33);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray1, intArray33);
        double[][] doubleArray38 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray39 = new double[][] {};
        double[][] doubleArray40 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray39);
        double[] doubleArray42 = new double[] { 1 };
        double[] doubleArray44 = new double[] { 1 };
        double[] doubleArray46 = new double[] { 1 };
        double[] doubleArray48 = new double[] { 1 };
        double[] doubleArray50 = new double[] { 1 };
        double[][] doubleArray51 = new double[][] { doubleArray42, doubleArray44, doubleArray46, doubleArray48, doubleArray50 };
        int[] intArray52 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray51, intArray52);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray39, intArray52);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray1, intArray52);
        double[][] doubleArray56 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray57 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray56);
        double[][] doubleArray58 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray56);
        double[][] doubleArray59 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray58);
        double[][] doubleArray60 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray58);
        double[][] doubleArray61 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray60);
        double[][] doubleArray62 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray61);
        double[][] doubleArray63 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray61);
        double[][] doubleArray64 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray63);
        double[][] doubleArray65 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray63);
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[]");
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertNotNull(doubleArray65);
    }

    @Test
    public void test3559() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3559");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[][] doubleArray5 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[] doubleArray7 = new double[] { 1 };
        double[] doubleArray9 = new double[] { 1 };
        double[] doubleArray11 = new double[] { 1 };
        double[] doubleArray13 = new double[] { 1 };
        double[] doubleArray15 = new double[] { 1 };
        double[][] doubleArray16 = new double[][] { doubleArray7, doubleArray9, doubleArray11, doubleArray13, doubleArray15 };
        int[] intArray17 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray16, intArray17);
        double[] doubleArray25 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray32 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray39 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray46 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray47 = new double[][] { doubleArray25, doubleArray32, doubleArray39, doubleArray46 };
        double[][] doubleArray48 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray47);
        double[] doubleArray50 = new double[] { 1 };
        double[] doubleArray52 = new double[] { 1 };
        double[] doubleArray54 = new double[] { 1 };
        double[] doubleArray56 = new double[] { 1 };
        double[] doubleArray58 = new double[] { 1 };
        double[][] doubleArray59 = new double[][] { doubleArray50, doubleArray52, doubleArray54, doubleArray56, doubleArray58 };
        int[] intArray60 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray59, intArray60);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray48, intArray60);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray16, intArray60);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray3, intArray60);
        double[][] doubleArray65 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[][] doubleArray66 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray65);
        double[][] doubleArray67 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray65);
        double[][] doubleArray68 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray65);
        int[] intArray69 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray65, intArray69);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[]");
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertNotNull(doubleArray68);
    }

    @Test
    public void test3560() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3560");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray5 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray6 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray5);
        double[][] doubleArray7 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray6);
        double[][] doubleArray8 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray7);
        double[][] doubleArray9 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray7);
        java.lang.Class<?> wildcardClass10 = doubleArray7.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertNotNull(wildcardClass10);
    }

    @Test
    public void test3561() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3561");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[] doubleArray31 = new double[] { 1 };
        double[] doubleArray33 = new double[] { 1 };
        double[] doubleArray35 = new double[] { 1 };
        double[] doubleArray37 = new double[] { 1 };
        double[] doubleArray39 = new double[] { 1 };
        double[][] doubleArray40 = new double[][] { doubleArray31, doubleArray33, doubleArray35, doubleArray37, doubleArray39 };
        int[] intArray41 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray40, intArray41);
        double[][] doubleArray43 = new double[][] {};
        double[][] doubleArray44 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray43);
        int[] intArray45 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray44, intArray45);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray40, intArray45);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray28, intArray45);
        double[][] doubleArray49 = null;
        double[][] doubleArray50 = new double[][] {};
        double[][] doubleArray51 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray50);
        double[][] doubleArray52 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray51);
        double[] doubleArray56 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray60 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray64 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray68 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray69 = new double[][] { doubleArray56, doubleArray60, doubleArray64, doubleArray68 };
        double[] doubleArray71 = new double[] { 1 };
        double[] doubleArray73 = new double[] { 1 };
        double[] doubleArray75 = new double[] { 1 };
        double[] doubleArray77 = new double[] { 1 };
        double[] doubleArray79 = new double[] { 1 };
        double[][] doubleArray80 = new double[][] { doubleArray71, doubleArray73, doubleArray75, doubleArray77, doubleArray79 };
        int[] intArray81 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray80, intArray81);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray69, intArray81);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray52, intArray81);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray49, intArray81);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray28, intArray81);
        double[][] doubleArray87 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray88 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray87);
        double[][] doubleArray89 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray87);
        double[][] doubleArray90 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray89);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[]");
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray71), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray73), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray75), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray77), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray79), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray81), "[]");
        org.junit.Assert.assertNotNull(doubleArray87);
        org.junit.Assert.assertNotNull(doubleArray88);
        org.junit.Assert.assertNotNull(doubleArray89);
        org.junit.Assert.assertNotNull(doubleArray90);
    }

    @Test
    public void test3562() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3562");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = new double[][] {};
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[] doubleArray8 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray12 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray16 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray20 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray21 = new double[][] { doubleArray8, doubleArray12, doubleArray16, doubleArray20 };
        double[] doubleArray23 = new double[] { 1 };
        double[] doubleArray25 = new double[] { 1 };
        double[] doubleArray27 = new double[] { 1 };
        double[] doubleArray29 = new double[] { 1 };
        double[] doubleArray31 = new double[] { 1 };
        double[][] doubleArray32 = new double[][] { doubleArray23, doubleArray25, doubleArray27, doubleArray29, doubleArray31 };
        int[] intArray33 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray32, intArray33);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray21, intArray33);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray3, intArray33);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray1, intArray33);
        double[][] doubleArray38 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray39 = new double[][] {};
        double[][] doubleArray40 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray39);
        double[] doubleArray42 = new double[] { 1 };
        double[] doubleArray44 = new double[] { 1 };
        double[] doubleArray46 = new double[] { 1 };
        double[] doubleArray48 = new double[] { 1 };
        double[] doubleArray50 = new double[] { 1 };
        double[][] doubleArray51 = new double[][] { doubleArray42, doubleArray44, doubleArray46, doubleArray48, doubleArray50 };
        int[] intArray52 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray51, intArray52);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray39, intArray52);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray1, intArray52);
        double[][] doubleArray56 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray57 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray56);
        double[][] doubleArray58 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray56);
        double[][] doubleArray59 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray58);
        double[][] doubleArray60 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray58);
        java.lang.Class<?> wildcardClass61 = doubleArray60.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[]");
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertNotNull(wildcardClass61);
    }

    @Test
    public void test3563() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3563");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[][] doubleArray5 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray4);
        double[][] doubleArray6 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray5);
        double[][] doubleArray7 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray6);
        double[][] doubleArray8 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray6);
        double[][] doubleArray9 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray6);
        double[][] doubleArray10 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertNotNull(doubleArray10);
    }

    @Test
    public void test3564() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3564");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = new double[][] {};
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[] doubleArray8 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray12 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray16 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray20 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray21 = new double[][] { doubleArray8, doubleArray12, doubleArray16, doubleArray20 };
        double[] doubleArray23 = new double[] { 1 };
        double[] doubleArray25 = new double[] { 1 };
        double[] doubleArray27 = new double[] { 1 };
        double[] doubleArray29 = new double[] { 1 };
        double[] doubleArray31 = new double[] { 1 };
        double[][] doubleArray32 = new double[][] { doubleArray23, doubleArray25, doubleArray27, doubleArray29, doubleArray31 };
        int[] intArray33 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray32, intArray33);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray21, intArray33);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray3, intArray33);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray1, intArray33);
        double[][] doubleArray38 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray39 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray38);
        double[][] doubleArray40 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray39);
        double[][] doubleArray41 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray39);
        double[][] doubleArray42 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray41);
        double[][] doubleArray43 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray41);
        double[] doubleArray44 = new double[] {};
        double[][] doubleArray45 = new double[][] { doubleArray44 };
        double[][] doubleArray46 = new double[][] {};
        double[][] doubleArray47 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray46);
        double[][] doubleArray48 = new double[][] {};
        double[][] doubleArray49 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray48);
        double[] doubleArray51 = new double[] { 1 };
        double[] doubleArray53 = new double[] { 1 };
        double[] doubleArray55 = new double[] { 1 };
        double[] doubleArray57 = new double[] { 1 };
        double[] doubleArray59 = new double[] { 1 };
        double[][] doubleArray60 = new double[][] { doubleArray51, doubleArray53, doubleArray55, doubleArray57, doubleArray59 };
        int[] intArray61 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray60, intArray61);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray48, intArray61);
        double[] doubleArray67 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray71 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray75 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray79 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray80 = new double[][] { doubleArray67, doubleArray71, doubleArray75, doubleArray79 };
        double[] doubleArray82 = new double[] { 1 };
        double[] doubleArray84 = new double[] { 1 };
        double[] doubleArray86 = new double[] { 1 };
        double[] doubleArray88 = new double[] { 1 };
        double[] doubleArray90 = new double[] { 1 };
        double[][] doubleArray91 = new double[][] { doubleArray82, doubleArray84, doubleArray86, doubleArray88, doubleArray90 };
        int[] intArray92 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray91, intArray92);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray80, intArray92);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray48, intArray92);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray47, intArray92);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray45, intArray92);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray41, intArray92);
        java.lang.Class<?> wildcardClass99 = intArray92.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[]");
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[]");
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray71), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray75), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray79), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertNotNull(doubleArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray82), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray84), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray86), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray88), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray90), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray91);
        org.junit.Assert.assertNotNull(intArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray92), "[]");
        org.junit.Assert.assertNotNull(wildcardClass99);
    }

    @Test
    public void test3565() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3565");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = new double[][] {};
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[][] doubleArray5 = new double[][] {};
        double[][] doubleArray6 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray5);
        double[][] doubleArray7 = new double[][] {};
        double[][] doubleArray8 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray7);
        double[] doubleArray10 = new double[] { 1 };
        double[] doubleArray12 = new double[] { 1 };
        double[] doubleArray14 = new double[] { 1 };
        double[] doubleArray16 = new double[] { 1 };
        double[] doubleArray18 = new double[] { 1 };
        double[][] doubleArray19 = new double[][] { doubleArray10, doubleArray12, doubleArray14, doubleArray16, doubleArray18 };
        int[] intArray20 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray19, intArray20);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray7, intArray20);
        double[] doubleArray26 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray30 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray34 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray38 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray39 = new double[][] { doubleArray26, doubleArray30, doubleArray34, doubleArray38 };
        double[] doubleArray41 = new double[] { 1 };
        double[] doubleArray43 = new double[] { 1 };
        double[] doubleArray45 = new double[] { 1 };
        double[] doubleArray47 = new double[] { 1 };
        double[] doubleArray49 = new double[] { 1 };
        double[][] doubleArray50 = new double[][] { doubleArray41, doubleArray43, doubleArray45, doubleArray47, doubleArray49 };
        int[] intArray51 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray50, intArray51);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray39, intArray51);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray7, intArray51);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray6, intArray51);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray4, intArray51);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray1, intArray51);
        double[][] doubleArray58 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray59 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray58);
        double[][] doubleArray60 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray58);
        double[][] doubleArray61 = new double[][] {};
        double[][] doubleArray62 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray61);
        int[] intArray63 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray62, intArray63);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray58, intArray63);
        java.lang.Class<?> wildcardClass66 = intArray63.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[]");
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[]");
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[]");
        org.junit.Assert.assertNotNull(wildcardClass66);
    }

    @Test
    public void test3566() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3566");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray30 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray29);
        double[][] doubleArray31 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray29);
        double[][] doubleArray32 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray31);
        double[][] doubleArray33 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray31);
        double[][] doubleArray34 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray31);
        double[][] doubleArray35 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray31);
        double[][] doubleArray36 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray31);
        double[][] doubleArray37 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray31);
        double[][] doubleArray38 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray37);
        double[][] doubleArray39 = new double[][] {};
        double[][] doubleArray40 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray39);
        double[][] doubleArray41 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray39);
        double[][] doubleArray42 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray41);
        double[][] doubleArray43 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray41);
        double[][] doubleArray44 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray43);
        double[][] doubleArray45 = new double[][] {};
        double[][] doubleArray46 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray45);
        double[][] doubleArray47 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray45);
        double[][] doubleArray48 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray47);
        double[][] doubleArray49 = null;
        double[][] doubleArray50 = new double[][] {};
        double[][] doubleArray51 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray50);
        double[][] doubleArray52 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray51);
        double[] doubleArray56 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray60 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray64 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray68 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray69 = new double[][] { doubleArray56, doubleArray60, doubleArray64, doubleArray68 };
        double[] doubleArray71 = new double[] { 1 };
        double[] doubleArray73 = new double[] { 1 };
        double[] doubleArray75 = new double[] { 1 };
        double[] doubleArray77 = new double[] { 1 };
        double[] doubleArray79 = new double[] { 1 };
        double[][] doubleArray80 = new double[][] { doubleArray71, doubleArray73, doubleArray75, doubleArray77, doubleArray79 };
        int[] intArray81 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray80, intArray81);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray69, intArray81);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray52, intArray81);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray49, intArray81);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray48, intArray81);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray43, intArray81);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray38, intArray81);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray71), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray73), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray75), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray77), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray79), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray81), "[]");
    }

    @Test
    public void test3567() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3567");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[][] doubleArray5 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[][] doubleArray6 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray5);
        double[][] doubleArray7 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray6);
        java.lang.Class<?> wildcardClass8 = doubleArray7.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertNotNull(wildcardClass8);
    }

    @Test
    public void test3568() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3568");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[] doubleArray31 = new double[] { 1 };
        double[] doubleArray33 = new double[] { 1 };
        double[] doubleArray35 = new double[] { 1 };
        double[] doubleArray37 = new double[] { 1 };
        double[] doubleArray39 = new double[] { 1 };
        double[][] doubleArray40 = new double[][] { doubleArray31, doubleArray33, doubleArray35, doubleArray37, doubleArray39 };
        int[] intArray41 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray40, intArray41);
        double[][] doubleArray43 = new double[][] {};
        double[][] doubleArray44 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray43);
        int[] intArray45 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray44, intArray45);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray40, intArray45);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray28, intArray45);
        double[][] doubleArray49 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray50 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray49);
        double[][] doubleArray51 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray50);
        double[][] doubleArray52 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray51);
        double[][] doubleArray53 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray52);
        double[][] doubleArray54 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray52);
        double[][] doubleArray55 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray54);
        double[] doubleArray57 = new double[] { 1 };
        double[] doubleArray59 = new double[] { 1 };
        double[] doubleArray61 = new double[] { 1 };
        double[] doubleArray63 = new double[] { 1 };
        double[] doubleArray65 = new double[] { 1 };
        double[][] doubleArray66 = new double[][] { doubleArray57, doubleArray59, doubleArray61, doubleArray63, doubleArray65 };
        int[] intArray67 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray66, intArray67);
        double[][] doubleArray69 = new double[][] {};
        double[][] doubleArray70 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray69);
        int[] intArray71 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray70, intArray71);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray66, intArray71);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray55, intArray71);
        int[] intArray75 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray55, intArray75);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[]");
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[]");
    }

    @Test
    public void test3569() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3569");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[][] doubleArray5 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[][] doubleArray6 = new double[][] {};
        double[][] doubleArray7 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray6);
        double[][] doubleArray8 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray7);
        double[] doubleArray15 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray22 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray29 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray36 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray37 = new double[][] { doubleArray15, doubleArray22, doubleArray29, doubleArray36 };
        double[][] doubleArray38 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray37);
        double[] doubleArray40 = new double[] { 1 };
        double[] doubleArray42 = new double[] { 1 };
        double[] doubleArray44 = new double[] { 1 };
        double[] doubleArray46 = new double[] { 1 };
        double[] doubleArray48 = new double[] { 1 };
        double[][] doubleArray49 = new double[][] { doubleArray40, doubleArray42, doubleArray44, doubleArray46, doubleArray48 };
        int[] intArray50 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray49, intArray50);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray38, intArray50);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray7, intArray50);
        double[] doubleArray57 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray61 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray65 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray69 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray70 = new double[][] { doubleArray57, doubleArray61, doubleArray65, doubleArray69 };
        double[] doubleArray72 = new double[] { 1 };
        double[] doubleArray74 = new double[] { 1 };
        double[] doubleArray76 = new double[] { 1 };
        double[] doubleArray78 = new double[] { 1 };
        double[] doubleArray80 = new double[] { 1 };
        double[][] doubleArray81 = new double[][] { doubleArray72, doubleArray74, doubleArray76, doubleArray78, doubleArray80 };
        int[] intArray82 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray81, intArray82);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray70, intArray82);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray7, intArray82);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray3, intArray82);
        double[][] doubleArray87 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[][] doubleArray88 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[][] doubleArray89 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray88);
        double[][] doubleArray90 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray88);
        double[][] doubleArray91 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray90);
        double[][] doubleArray92 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray91);
        java.lang.Class<?> wildcardClass93 = doubleArray91.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[]");
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray74), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray78), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray80), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray81);
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[]");
        org.junit.Assert.assertNotNull(doubleArray87);
        org.junit.Assert.assertNotNull(doubleArray88);
        org.junit.Assert.assertNotNull(doubleArray89);
        org.junit.Assert.assertNotNull(doubleArray90);
        org.junit.Assert.assertNotNull(doubleArray91);
        org.junit.Assert.assertNotNull(doubleArray92);
        org.junit.Assert.assertNotNull(wildcardClass93);
    }

    @Test
    public void test3570() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3570");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray3 = new double[][] {};
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[][] doubleArray5 = new double[][] {};
        double[][] doubleArray6 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray5);
        double[] doubleArray8 = new double[] { 1 };
        double[] doubleArray10 = new double[] { 1 };
        double[] doubleArray12 = new double[] { 1 };
        double[] doubleArray14 = new double[] { 1 };
        double[] doubleArray16 = new double[] { 1 };
        double[][] doubleArray17 = new double[][] { doubleArray8, doubleArray10, doubleArray12, doubleArray14, doubleArray16 };
        int[] intArray18 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray17, intArray18);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray5, intArray18);
        double[] doubleArray24 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray28 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray32 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray36 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray37 = new double[][] { doubleArray24, doubleArray28, doubleArray32, doubleArray36 };
        double[] doubleArray39 = new double[] { 1 };
        double[] doubleArray41 = new double[] { 1 };
        double[] doubleArray43 = new double[] { 1 };
        double[] doubleArray45 = new double[] { 1 };
        double[] doubleArray47 = new double[] { 1 };
        double[][] doubleArray48 = new double[][] { doubleArray39, doubleArray41, doubleArray43, doubleArray45, doubleArray47 };
        int[] intArray49 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray48, intArray49);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray37, intArray49);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray5, intArray49);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray4, intArray49);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray2, intArray49);
        double[][] doubleArray55 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray56 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray55);
        double[][] doubleArray57 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray55);
        double[][] doubleArray58 = new double[][] {};
        double[][] doubleArray59 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray58);
        double[][] doubleArray60 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray59);
        double[] doubleArray64 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray68 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray72 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray76 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray77 = new double[][] { doubleArray64, doubleArray68, doubleArray72, doubleArray76 };
        double[] doubleArray79 = new double[] { 1 };
        double[] doubleArray81 = new double[] { 1 };
        double[] doubleArray83 = new double[] { 1 };
        double[] doubleArray85 = new double[] { 1 };
        double[] doubleArray87 = new double[] { 1 };
        double[][] doubleArray88 = new double[][] { doubleArray79, doubleArray81, doubleArray83, doubleArray85, doubleArray87 };
        int[] intArray89 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray88, intArray89);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray77, intArray89);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray59, intArray89);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray57, intArray89);
        double[][] doubleArray94 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray57);
        double[][] doubleArray95 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray94);
        java.lang.Class<?> wildcardClass96 = doubleArray95.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[]");
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[]");
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray79), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray81), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray83), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray85), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray87), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray88);
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray89), "[]");
        org.junit.Assert.assertNotNull(doubleArray94);
        org.junit.Assert.assertNotNull(doubleArray95);
        org.junit.Assert.assertNotNull(wildcardClass96);
    }

    @Test
    public void test3571() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3571");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[] doubleArray9 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray16 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray23 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray30 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray31 = new double[][] { doubleArray9, doubleArray16, doubleArray23, doubleArray30 };
        double[][] doubleArray32 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray31);
        double[] doubleArray34 = new double[] { 1 };
        double[] doubleArray36 = new double[] { 1 };
        double[] doubleArray38 = new double[] { 1 };
        double[] doubleArray40 = new double[] { 1 };
        double[] doubleArray42 = new double[] { 1 };
        double[][] doubleArray43 = new double[][] { doubleArray34, doubleArray36, doubleArray38, doubleArray40, doubleArray42 };
        int[] intArray44 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray43, intArray44);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray32, intArray44);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray1, intArray44);
        double[][] doubleArray48 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray49 = new double[][] {};
        double[][] doubleArray50 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray49);
        double[][] doubleArray51 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray49);
        double[][] doubleArray52 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray49);
        double[][] doubleArray53 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray49);
        double[][] doubleArray54 = new double[][] {};
        double[][] doubleArray55 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray54);
        double[][] doubleArray56 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray55);
        double[] doubleArray60 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray64 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray68 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray72 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray73 = new double[][] { doubleArray60, doubleArray64, doubleArray68, doubleArray72 };
        double[] doubleArray75 = new double[] { 1 };
        double[] doubleArray77 = new double[] { 1 };
        double[] doubleArray79 = new double[] { 1 };
        double[] doubleArray81 = new double[] { 1 };
        double[] doubleArray83 = new double[] { 1 };
        double[][] doubleArray84 = new double[][] { doubleArray75, doubleArray77, doubleArray79, doubleArray81, doubleArray83 };
        int[] intArray85 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray84, intArray85);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray73, intArray85);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray56, intArray85);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray49, intArray85);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray48, intArray85);
        double[][] doubleArray91 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray48);
        double[][] doubleArray92 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray91);
        double[][] doubleArray93 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray91);
        double[][] doubleArray94 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray93);
        double[][] doubleArray95 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray93);
        java.lang.Class<?> wildcardClass96 = doubleArray93.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray75), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray77), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray79), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray81), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray83), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray84);
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray85), "[]");
        org.junit.Assert.assertNotNull(doubleArray91);
        org.junit.Assert.assertNotNull(doubleArray92);
        org.junit.Assert.assertNotNull(doubleArray93);
        org.junit.Assert.assertNotNull(doubleArray94);
        org.junit.Assert.assertNotNull(doubleArray95);
        org.junit.Assert.assertNotNull(wildcardClass96);
    }

    @Test
    public void test3572() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3572");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray30 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray29);
        double[][] doubleArray31 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        double[][] doubleArray32 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        double[][] doubleArray33 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        double[][] doubleArray34 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        double[][] doubleArray35 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray34);
        double[][] doubleArray36 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray35);
        double[][] doubleArray37 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray35);
        double[][] doubleArray38 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray35);
        double[][] doubleArray39 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray35);
        double[][] doubleArray40 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray35);
        double[][] doubleArray41 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray35);
        java.lang.Class<?> wildcardClass42 = doubleArray35.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertNotNull(wildcardClass42);
    }

    @Test
    public void test3573() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3573");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        int[] intArray2 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray1, intArray2);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray5 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray4);
        double[][] doubleArray6 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray4);
        double[][] doubleArray7 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray4);
        double[][] doubleArray8 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray4);
        double[][] doubleArray9 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray4);
        double[][] doubleArray10 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray9);
        double[][] doubleArray11 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray10);
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertNotNull(doubleArray11);
    }

    @Test
    public void test3574() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3574");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray5 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray4);
        double[][] doubleArray6 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray5);
        double[][] doubleArray7 = new double[][] {};
        double[][] doubleArray8 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray7);
        double[] doubleArray10 = new double[] { 1 };
        double[] doubleArray12 = new double[] { 1 };
        double[] doubleArray14 = new double[] { 1 };
        double[] doubleArray16 = new double[] { 1 };
        double[] doubleArray18 = new double[] { 1 };
        double[][] doubleArray19 = new double[][] { doubleArray10, doubleArray12, doubleArray14, doubleArray16, doubleArray18 };
        int[] intArray20 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray19, intArray20);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray7, intArray20);
        double[] doubleArray26 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray30 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray34 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray38 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray39 = new double[][] { doubleArray26, doubleArray30, doubleArray34, doubleArray38 };
        double[] doubleArray41 = new double[] { 1 };
        double[] doubleArray43 = new double[] { 1 };
        double[] doubleArray45 = new double[] { 1 };
        double[] doubleArray47 = new double[] { 1 };
        double[] doubleArray49 = new double[] { 1 };
        double[][] doubleArray50 = new double[][] { doubleArray41, doubleArray43, doubleArray45, doubleArray47, doubleArray49 };
        int[] intArray51 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray50, intArray51);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray39, intArray51);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray7, intArray51);
        double[] doubleArray56 = new double[] { 1 };
        double[] doubleArray58 = new double[] { 1 };
        double[] doubleArray60 = new double[] { 1 };
        double[] doubleArray62 = new double[] { 1 };
        double[] doubleArray64 = new double[] { 1 };
        double[][] doubleArray65 = new double[][] { doubleArray56, doubleArray58, doubleArray60, doubleArray62, doubleArray64 };
        int[] intArray66 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray65, intArray66);
        double[][] doubleArray68 = new double[][] {};
        double[][] doubleArray69 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray68);
        int[] intArray70 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray69, intArray70);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray65, intArray70);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray7, intArray70);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray5, intArray70);
        double[][] doubleArray75 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray5);
        double[][] doubleArray76 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray5);
        double[][] doubleArray77 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray5);
        java.lang.Class<?> wildcardClass78 = doubleArray77.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[]");
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[]");
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[]");
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[]");
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertNotNull(wildcardClass78);
    }

    @Test
    public void test3575() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3575");
        double[][] doubleArray0 = null;
        double[][] doubleArray1 = new double[][] {};
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[] doubleArray4 = new double[] { 1 };
        double[] doubleArray6 = new double[] { 1 };
        double[] doubleArray8 = new double[] { 1 };
        double[] doubleArray10 = new double[] { 1 };
        double[] doubleArray12 = new double[] { 1 };
        double[][] doubleArray13 = new double[][] { doubleArray4, doubleArray6, doubleArray8, doubleArray10, doubleArray12 };
        int[] intArray14 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray13, intArray14);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray1, intArray14);
        double[][] doubleArray17 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray18 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray17);
        double[][] doubleArray19 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray18);
        double[][] doubleArray20 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray18);
        double[][] doubleArray21 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray20);
        double[][] doubleArray22 = new double[][] {};
        double[][] doubleArray23 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray22);
        double[] doubleArray25 = new double[] { 1 };
        double[] doubleArray27 = new double[] { 1 };
        double[] doubleArray29 = new double[] { 1 };
        double[] doubleArray31 = new double[] { 1 };
        double[] doubleArray33 = new double[] { 1 };
        double[][] doubleArray34 = new double[][] { doubleArray25, doubleArray27, doubleArray29, doubleArray31, doubleArray33 };
        int[] intArray35 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray34, intArray35);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray22, intArray35);
        double[][] doubleArray38 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray22);
        double[][] doubleArray39 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray38);
        double[][] doubleArray40 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray39);
        double[][] doubleArray41 = new double[][] {};
        double[][] doubleArray42 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray41);
        double[][] doubleArray43 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray41);
        double[][] doubleArray44 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray43);
        double[][] doubleArray45 = null;
        double[][] doubleArray46 = new double[][] {};
        double[][] doubleArray47 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray46);
        double[][] doubleArray48 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray47);
        double[] doubleArray52 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray56 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray60 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray64 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray65 = new double[][] { doubleArray52, doubleArray56, doubleArray60, doubleArray64 };
        double[] doubleArray67 = new double[] { 1 };
        double[] doubleArray69 = new double[] { 1 };
        double[] doubleArray71 = new double[] { 1 };
        double[] doubleArray73 = new double[] { 1 };
        double[] doubleArray75 = new double[] { 1 };
        double[][] doubleArray76 = new double[][] { doubleArray67, doubleArray69, doubleArray71, doubleArray73, doubleArray75 };
        int[] intArray77 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray76, intArray77);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray65, intArray77);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray48, intArray77);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray45, intArray77);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray44, intArray77);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray39, intArray77);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray21, intArray77);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray0, intArray77);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray71), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray73), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray75), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray77), "[]");
    }

    @Test
    public void test3576() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3576");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = new double[][] {};
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[] doubleArray11 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray18 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray25 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray32 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray33 = new double[][] { doubleArray11, doubleArray18, doubleArray25, doubleArray32 };
        double[][] doubleArray34 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray33);
        double[] doubleArray36 = new double[] { 1 };
        double[] doubleArray38 = new double[] { 1 };
        double[] doubleArray40 = new double[] { 1 };
        double[] doubleArray42 = new double[] { 1 };
        double[] doubleArray44 = new double[] { 1 };
        double[][] doubleArray45 = new double[][] { doubleArray36, doubleArray38, doubleArray40, doubleArray42, doubleArray44 };
        int[] intArray46 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray45, intArray46);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray34, intArray46);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray3, intArray46);
        double[] doubleArray53 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray57 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray61 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray65 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray66 = new double[][] { doubleArray53, doubleArray57, doubleArray61, doubleArray65 };
        double[] doubleArray68 = new double[] { 1 };
        double[] doubleArray70 = new double[] { 1 };
        double[] doubleArray72 = new double[] { 1 };
        double[] doubleArray74 = new double[] { 1 };
        double[] doubleArray76 = new double[] { 1 };
        double[][] doubleArray77 = new double[][] { doubleArray68, doubleArray70, doubleArray72, doubleArray74, doubleArray76 };
        int[] intArray78 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray77, intArray78);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray66, intArray78);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray3, intArray78);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray0, intArray78);
        double[][] doubleArray83 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray84 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray83);
        double[][] doubleArray85 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray83);
        double[][] doubleArray86 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray85);
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[]");
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray70), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray74), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[]");
        org.junit.Assert.assertNotNull(doubleArray83);
        org.junit.Assert.assertNotNull(doubleArray84);
        org.junit.Assert.assertNotNull(doubleArray85);
        org.junit.Assert.assertNotNull(doubleArray86);
    }

    @Test
    public void test3577() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3577");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[] doubleArray3 = new double[] { 1 };
        double[] doubleArray5 = new double[] { 1 };
        double[] doubleArray7 = new double[] { 1 };
        double[] doubleArray9 = new double[] { 1 };
        double[] doubleArray11 = new double[] { 1 };
        double[][] doubleArray12 = new double[][] { doubleArray3, doubleArray5, doubleArray7, doubleArray9, doubleArray11 };
        int[] intArray13 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray12, intArray13);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray0, intArray13);
        double[][] doubleArray16 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray17 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray16);
        double[][] doubleArray18 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray17);
        double[][] doubleArray19 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray18);
        double[][] doubleArray20 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray18);
        double[][] doubleArray21 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray20);
        double[][] doubleArray22 = new double[][] {};
        double[][] doubleArray23 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray22);
        double[][] doubleArray24 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray22);
        double[] doubleArray26 = new double[] { 1 };
        double[] doubleArray28 = new double[] { 1 };
        double[] doubleArray30 = new double[] { 1 };
        double[] doubleArray32 = new double[] { 1 };
        double[] doubleArray34 = new double[] { 1 };
        double[][] doubleArray35 = new double[][] { doubleArray26, doubleArray28, doubleArray30, doubleArray32, doubleArray34 };
        int[] intArray36 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray35, intArray36);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray24, intArray36);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray21, intArray36);
        double[][] doubleArray40 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray21);
        double[][] doubleArray41 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray40);
        java.lang.Class<?> wildcardClass42 = doubleArray40.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertNotNull(wildcardClass42);
    }

    @Test
    public void test3578() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3578");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = new double[][] {};
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[] doubleArray8 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray12 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray16 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray20 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray21 = new double[][] { doubleArray8, doubleArray12, doubleArray16, doubleArray20 };
        double[] doubleArray23 = new double[] { 1 };
        double[] doubleArray25 = new double[] { 1 };
        double[] doubleArray27 = new double[] { 1 };
        double[] doubleArray29 = new double[] { 1 };
        double[] doubleArray31 = new double[] { 1 };
        double[][] doubleArray32 = new double[][] { doubleArray23, doubleArray25, doubleArray27, doubleArray29, doubleArray31 };
        int[] intArray33 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray32, intArray33);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray21, intArray33);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray3, intArray33);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray1, intArray33);
        double[][] doubleArray38 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray39 = new double[][] {};
        double[][] doubleArray40 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray39);
        double[] doubleArray42 = new double[] { 1 };
        double[] doubleArray44 = new double[] { 1 };
        double[] doubleArray46 = new double[] { 1 };
        double[] doubleArray48 = new double[] { 1 };
        double[] doubleArray50 = new double[] { 1 };
        double[][] doubleArray51 = new double[][] { doubleArray42, doubleArray44, doubleArray46, doubleArray48, doubleArray50 };
        int[] intArray52 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray51, intArray52);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray39, intArray52);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray1, intArray52);
        double[][] doubleArray56 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[] doubleArray60 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray64 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray68 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray72 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray73 = new double[][] { doubleArray60, doubleArray64, doubleArray68, doubleArray72 };
        double[] doubleArray75 = new double[] { 1 };
        double[] doubleArray77 = new double[] { 1 };
        double[] doubleArray79 = new double[] { 1 };
        double[] doubleArray81 = new double[] { 1 };
        double[] doubleArray83 = new double[] { 1 };
        double[][] doubleArray84 = new double[][] { doubleArray75, doubleArray77, doubleArray79, doubleArray81, doubleArray83 };
        int[] intArray85 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray84, intArray85);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray73, intArray85);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray1, intArray85);
        double[][] doubleArray89 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray90 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray91 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[]");
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray75), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray77), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray79), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray81), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray83), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray84);
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray85), "[]");
        org.junit.Assert.assertNotNull(doubleArray89);
        org.junit.Assert.assertNotNull(doubleArray90);
        org.junit.Assert.assertNotNull(doubleArray91);
    }

    @Test
    public void test3579() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3579");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[] doubleArray6 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray10 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray14 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray18 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray19 = new double[][] { doubleArray6, doubleArray10, doubleArray14, doubleArray18 };
        double[] doubleArray21 = new double[] { 1 };
        double[] doubleArray23 = new double[] { 1 };
        double[] doubleArray25 = new double[] { 1 };
        double[] doubleArray27 = new double[] { 1 };
        double[] doubleArray29 = new double[] { 1 };
        double[][] doubleArray30 = new double[][] { doubleArray21, doubleArray23, doubleArray25, doubleArray27, doubleArray29 };
        int[] intArray31 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray30, intArray31);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray19, intArray31);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray2, intArray31);
        double[][] doubleArray35 = null;
        double[][] doubleArray36 = new double[][] {};
        double[][] doubleArray37 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray36);
        double[][] doubleArray38 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray37);
        double[] doubleArray42 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray46 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray50 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray54 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray55 = new double[][] { doubleArray42, doubleArray46, doubleArray50, doubleArray54 };
        double[] doubleArray57 = new double[] { 1 };
        double[] doubleArray59 = new double[] { 1 };
        double[] doubleArray61 = new double[] { 1 };
        double[] doubleArray63 = new double[] { 1 };
        double[] doubleArray65 = new double[] { 1 };
        double[][] doubleArray66 = new double[][] { doubleArray57, doubleArray59, doubleArray61, doubleArray63, doubleArray65 };
        int[] intArray67 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray66, intArray67);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray55, intArray67);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray38, intArray67);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray35, intArray67);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray2, intArray67);
        double[][] doubleArray73 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray74 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray73);
        double[][] doubleArray75 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray73);
        double[][] doubleArray76 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray73);
        java.lang.Class<?> wildcardClass77 = doubleArray73.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[]");
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertNotNull(wildcardClass77);
    }

    @Test
    public void test3580() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3580");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray5 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray4);
        double[][] doubleArray6 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray4);
        double[][] doubleArray7 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray6);
        double[][] doubleArray8 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray6);
        double[][] doubleArray9 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray6);
        double[][] doubleArray10 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray6);
        double[][] doubleArray11 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray6);
        double[] doubleArray18 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray25 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray32 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray39 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray40 = new double[][] { doubleArray18, doubleArray25, doubleArray32, doubleArray39 };
        double[][] doubleArray41 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray40);
        double[][] doubleArray42 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray41);
        double[][] doubleArray43 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray42);
        double[][] doubleArray44 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray43);
        double[][] doubleArray45 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray44);
        double[][] doubleArray46 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray45);
        double[][] doubleArray47 = new double[][] {};
        double[][] doubleArray48 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray47);
        double[][] doubleArray49 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray48);
        double[][] doubleArray50 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray49);
        double[][] doubleArray51 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray49);
        double[] doubleArray58 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray65 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray72 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray79 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray80 = new double[][] { doubleArray58, doubleArray65, doubleArray72, doubleArray79 };
        double[][] doubleArray81 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray80);
        double[][] doubleArray82 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray80);
        double[][] doubleArray83 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray80);
        double[][] doubleArray84 = new double[][] {};
        double[][] doubleArray85 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray84);
        int[] intArray86 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray85, intArray86);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray83, intArray86);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray51, intArray86);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray46, intArray86);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray11, intArray86);
        java.lang.Class<?> wildcardClass92 = doubleArray11.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray79), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertNotNull(doubleArray81);
        org.junit.Assert.assertNotNull(doubleArray82);
        org.junit.Assert.assertNotNull(doubleArray83);
        org.junit.Assert.assertNotNull(doubleArray84);
        org.junit.Assert.assertNotNull(doubleArray85);
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray86), "[]");
        org.junit.Assert.assertNotNull(wildcardClass92);
    }

    @Test
    public void test3581() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3581");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = new double[][] {};
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[] doubleArray5 = new double[] { 1 };
        double[] doubleArray7 = new double[] { 1 };
        double[] doubleArray9 = new double[] { 1 };
        double[] doubleArray11 = new double[] { 1 };
        double[] doubleArray13 = new double[] { 1 };
        double[][] doubleArray14 = new double[][] { doubleArray5, doubleArray7, doubleArray9, doubleArray11, doubleArray13 };
        int[] intArray15 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray14, intArray15);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray2, intArray15);
        double[] doubleArray21 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray25 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray29 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray33 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray34 = new double[][] { doubleArray21, doubleArray25, doubleArray29, doubleArray33 };
        double[] doubleArray36 = new double[] { 1 };
        double[] doubleArray38 = new double[] { 1 };
        double[] doubleArray40 = new double[] { 1 };
        double[] doubleArray42 = new double[] { 1 };
        double[] doubleArray44 = new double[] { 1 };
        double[][] doubleArray45 = new double[][] { doubleArray36, doubleArray38, doubleArray40, doubleArray42, doubleArray44 };
        int[] intArray46 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray45, intArray46);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray34, intArray46);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray2, intArray46);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray1, intArray46);
        double[][] doubleArray51 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray52 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray53 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray54 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray53);
        double[][] doubleArray55 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray54);
        double[][] doubleArray56 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray55);
        double[][] doubleArray57 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray55);
        double[][] doubleArray58 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray55);
        double[][] doubleArray59 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray58);
        int[] intArray60 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray58, intArray60);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertNotNull(doubleArray59);
    }

    @Test
    public void test3582() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3582");
        double[][] doubleArray0 = null;
        double[][] doubleArray1 = new double[][] {};
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray3 = new double[][] {};
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[][] doubleArray5 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray4);
        double[] doubleArray9 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray13 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray17 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray21 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray22 = new double[][] { doubleArray9, doubleArray13, doubleArray17, doubleArray21 };
        double[] doubleArray24 = new double[] { 1 };
        double[] doubleArray26 = new double[] { 1 };
        double[] doubleArray28 = new double[] { 1 };
        double[] doubleArray30 = new double[] { 1 };
        double[] doubleArray32 = new double[] { 1 };
        double[][] doubleArray33 = new double[][] { doubleArray24, doubleArray26, doubleArray28, doubleArray30, doubleArray32 };
        int[] intArray34 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray33, intArray34);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray22, intArray34);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray4, intArray34);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray2, intArray34);
        double[][] doubleArray39 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray40 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray39);
        double[][] doubleArray41 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray40);
        double[][] doubleArray42 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray40);
        double[][] doubleArray43 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray42);
        double[][] doubleArray44 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray42);
        double[][] doubleArray45 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray44);
        double[][] doubleArray46 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray44);
        double[][] doubleArray47 = null;
        double[][] doubleArray48 = new double[][] {};
        double[][] doubleArray49 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray48);
        double[][] doubleArray50 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray49);
        double[][] doubleArray51 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray50);
        double[][] doubleArray52 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray50);
        double[][] doubleArray53 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray50);
        double[][] doubleArray54 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray50);
        double[] doubleArray61 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray68 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray75 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray82 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray83 = new double[][] { doubleArray61, doubleArray68, doubleArray75, doubleArray82 };
        double[][] doubleArray84 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray83);
        double[][] doubleArray85 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray83);
        double[][] doubleArray86 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray83);
        double[][] doubleArray87 = new double[][] {};
        double[][] doubleArray88 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray87);
        int[] intArray89 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray88, intArray89);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray86, intArray89);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray54, intArray89);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray47, intArray89);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray44, intArray89);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray0, intArray89);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray75), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray82), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray83);
        org.junit.Assert.assertNotNull(doubleArray84);
        org.junit.Assert.assertNotNull(doubleArray85);
        org.junit.Assert.assertNotNull(doubleArray86);
        org.junit.Assert.assertNotNull(doubleArray87);
        org.junit.Assert.assertNotNull(doubleArray88);
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray89), "[]");
    }

    @Test
    public void test3583() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3583");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray5 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray4);
        double[][] doubleArray6 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray4);
        double[][] doubleArray7 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray6);
        double[][] doubleArray8 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray6);
        double[][] doubleArray9 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray8);
        java.lang.Class<?> wildcardClass10 = doubleArray9.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertNotNull(wildcardClass10);
    }

    @Test
    public void test3584() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3584");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[][] doubleArray5 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray4);
        java.lang.Class<?> wildcardClass6 = doubleArray4.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(wildcardClass6);
    }

    @Test
    public void test3585() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3585");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray30 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray29);
        double[][] doubleArray31 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        double[][] doubleArray32 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        double[][] doubleArray33 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        double[][] doubleArray34 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        double[][] doubleArray35 = new double[][] {};
        double[][] doubleArray36 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray35);
        int[] intArray37 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray36, intArray37);
        double[][] doubleArray39 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray36);
        double[][] doubleArray40 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray36);
        double[][] doubleArray41 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray40);
        double[][] doubleArray42 = new double[][] {};
        double[][] doubleArray43 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray42);
        double[][] doubleArray44 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray42);
        double[][] doubleArray45 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray42);
        double[][] doubleArray46 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray45);
        double[] doubleArray48 = new double[] { 1 };
        double[] doubleArray50 = new double[] { 1 };
        double[] doubleArray52 = new double[] { 1 };
        double[] doubleArray54 = new double[] { 1 };
        double[] doubleArray56 = new double[] { 1 };
        double[][] doubleArray57 = new double[][] { doubleArray48, doubleArray50, doubleArray52, doubleArray54, doubleArray56 };
        int[] intArray58 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray57, intArray58);
        double[][] doubleArray60 = new double[][] {};
        double[][] doubleArray61 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray60);
        int[] intArray62 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray61, intArray62);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray57, intArray62);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray45, intArray62);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray40, intArray62);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray34, intArray62);
        double[][] doubleArray68 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray34);
        double[][] doubleArray69 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray34);
        double[][] doubleArray70 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray34);
        java.lang.Class<?> wildcardClass71 = doubleArray34.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[]");
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[]");
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertNotNull(wildcardClass71);
    }

    @Test
    public void test3586() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3586");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray30 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray29);
        double[][] doubleArray31 = new double[][] {};
        double[][] doubleArray32 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray31);
        double[] doubleArray34 = new double[] { 1 };
        double[] doubleArray36 = new double[] { 1 };
        double[] doubleArray38 = new double[] { 1 };
        double[] doubleArray40 = new double[] { 1 };
        double[] doubleArray42 = new double[] { 1 };
        double[][] doubleArray43 = new double[][] { doubleArray34, doubleArray36, doubleArray38, doubleArray40, doubleArray42 };
        int[] intArray44 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray43, intArray44);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray31, intArray44);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray30, intArray44);
        double[][] doubleArray48 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        double[] doubleArray50 = new double[] { 1 };
        double[] doubleArray52 = new double[] { 1 };
        double[] doubleArray54 = new double[] { 1 };
        double[] doubleArray56 = new double[] { 1 };
        double[] doubleArray58 = new double[] { 1 };
        double[][] doubleArray59 = new double[][] { doubleArray50, doubleArray52, doubleArray54, doubleArray56, doubleArray58 };
        int[] intArray60 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray59, intArray60);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray48, intArray60);
        double[][] doubleArray63 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray48);
        double[][] doubleArray64 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray63);
        double[][] doubleArray65 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray63);
        double[][] doubleArray66 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray63);
        double[][] doubleArray67 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray63);
        double[][] doubleArray68 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray67);
        int[] intArray69 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray67, intArray69);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[]");
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertNotNull(doubleArray68);
    }

    @Test
    public void test3587() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3587");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray30 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray31 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray32 = new double[][] {};
        double[][] doubleArray33 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray32);
        double[][] doubleArray34 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray33);
        double[][] doubleArray35 = new double[][] {};
        double[][] doubleArray36 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray35);
        double[][] doubleArray37 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray35);
        double[][] doubleArray38 = new double[][] {};
        double[][] doubleArray39 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray38);
        double[][] doubleArray40 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray39);
        double[][] doubleArray41 = new double[][] {};
        double[][] doubleArray42 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray41);
        double[][] doubleArray43 = new double[][] {};
        double[][] doubleArray44 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray43);
        double[] doubleArray46 = new double[] { 1 };
        double[] doubleArray48 = new double[] { 1 };
        double[] doubleArray50 = new double[] { 1 };
        double[] doubleArray52 = new double[] { 1 };
        double[] doubleArray54 = new double[] { 1 };
        double[][] doubleArray55 = new double[][] { doubleArray46, doubleArray48, doubleArray50, doubleArray52, doubleArray54 };
        int[] intArray56 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray55, intArray56);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray43, intArray56);
        double[] doubleArray62 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray66 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray70 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray74 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray75 = new double[][] { doubleArray62, doubleArray66, doubleArray70, doubleArray74 };
        double[] doubleArray77 = new double[] { 1 };
        double[] doubleArray79 = new double[] { 1 };
        double[] doubleArray81 = new double[] { 1 };
        double[] doubleArray83 = new double[] { 1 };
        double[] doubleArray85 = new double[] { 1 };
        double[][] doubleArray86 = new double[][] { doubleArray77, doubleArray79, doubleArray81, doubleArray83, doubleArray85 };
        int[] intArray87 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray86, intArray87);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray75, intArray87);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray43, intArray87);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray42, intArray87);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray40, intArray87);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray35, intArray87);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray34, intArray87);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray31, intArray87);
        double[][] doubleArray96 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray31);
        double[][] doubleArray97 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray96);
        double[][] doubleArray98 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray96);
        java.lang.Class<?> wildcardClass99 = doubleArray98.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[]");
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray66), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray70), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray74), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray77), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray79), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray81), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray83), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray85), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray86);
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray87), "[]");
        org.junit.Assert.assertNotNull(doubleArray96);
        org.junit.Assert.assertNotNull(doubleArray97);
        org.junit.Assert.assertNotNull(doubleArray98);
        org.junit.Assert.assertNotNull(wildcardClass99);
    }

    @Test
    public void test3588() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3588");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray30 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray29);
        double[][] doubleArray31 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        double[][] doubleArray32 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray31);
        double[][] doubleArray33 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray32);
        double[][] doubleArray34 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray33);
        double[][] doubleArray35 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray33);
        double[][] doubleArray36 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray33);
        double[][] doubleArray37 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray36);
        double[][] doubleArray38 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray37);
        double[][] doubleArray39 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray38);
        double[][] doubleArray40 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray39);
        double[][] doubleArray41 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray39);
        java.lang.Class<?> wildcardClass42 = doubleArray39.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertNotNull(wildcardClass42);
    }

    @Test
    public void test3589() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3589");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray30 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray29);
        double[][] doubleArray31 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        double[][] doubleArray32 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray31);
        double[][] doubleArray33 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray31);
        double[][] doubleArray34 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray31);
        double[][] doubleArray35 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray31);
        double[][] doubleArray36 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray35);
        double[][] doubleArray37 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray35);
        double[][] doubleArray38 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray35);
        double[][] doubleArray39 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray35);
        double[][] doubleArray40 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray39);
        double[][] doubleArray41 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray39);
        double[][] doubleArray42 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray41);
        double[][] doubleArray43 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray41);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertNotNull(doubleArray43);
    }

    @Test
    public void test3590() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3590");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[] doubleArray3 = new double[] { 1 };
        double[] doubleArray5 = new double[] { 1 };
        double[] doubleArray7 = new double[] { 1 };
        double[] doubleArray9 = new double[] { 1 };
        double[] doubleArray11 = new double[] { 1 };
        double[][] doubleArray12 = new double[][] { doubleArray3, doubleArray5, doubleArray7, doubleArray9, doubleArray11 };
        int[] intArray13 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray12, intArray13);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray0, intArray13);
        double[] doubleArray19 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray23 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray27 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray31 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray32 = new double[][] { doubleArray19, doubleArray23, doubleArray27, doubleArray31 };
        double[] doubleArray34 = new double[] { 1 };
        double[] doubleArray36 = new double[] { 1 };
        double[] doubleArray38 = new double[] { 1 };
        double[] doubleArray40 = new double[] { 1 };
        double[] doubleArray42 = new double[] { 1 };
        double[][] doubleArray43 = new double[][] { doubleArray34, doubleArray36, doubleArray38, doubleArray40, doubleArray42 };
        int[] intArray44 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray43, intArray44);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray32, intArray44);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray0, intArray44);
        double[] doubleArray49 = new double[] { 1 };
        double[] doubleArray51 = new double[] { 1 };
        double[] doubleArray53 = new double[] { 1 };
        double[] doubleArray55 = new double[] { 1 };
        double[] doubleArray57 = new double[] { 1 };
        double[][] doubleArray58 = new double[][] { doubleArray49, doubleArray51, doubleArray53, doubleArray55, doubleArray57 };
        int[] intArray59 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray58, intArray59);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray0, intArray59);
        double[][] doubleArray62 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray63 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray64 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray65 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray64);
        int[] intArray66 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray64, intArray66);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[]");
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertNotNull(doubleArray65);
    }

    @Test
    public void test3591() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3591");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray5 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray4);
        double[][] doubleArray6 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray4);
        double[][] doubleArray7 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray6);
        double[][] doubleArray8 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray6);
        double[][] doubleArray9 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray6);
        double[][] doubleArray10 = new double[][] {};
        double[][] doubleArray11 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray10);
        int[] intArray12 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray11, intArray12);
        double[] doubleArray15 = new double[] { 1 };
        double[] doubleArray17 = new double[] { 1 };
        double[] doubleArray19 = new double[] { 1 };
        double[] doubleArray21 = new double[] { 1 };
        double[] doubleArray23 = new double[] { 1 };
        double[][] doubleArray24 = new double[][] { doubleArray15, doubleArray17, doubleArray19, doubleArray21, doubleArray23 };
        int[] intArray25 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray24, intArray25);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray11, intArray25);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray6, intArray25);
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray6);
        int[] intArray30 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray6, intArray30);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[]");
        org.junit.Assert.assertNotNull(doubleArray29);
    }

    @Test
    public void test3592() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3592");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[][] doubleArray5 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray4);
        double[][] doubleArray6 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray5);
        double[][] doubleArray7 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray5);
        double[][] doubleArray8 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray7);
        java.lang.Class<?> wildcardClass9 = doubleArray7.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void test3593() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3593");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray30 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray29);
        double[][] doubleArray31 = new double[][] {};
        double[][] doubleArray32 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray31);
        double[] doubleArray34 = new double[] { 1 };
        double[] doubleArray36 = new double[] { 1 };
        double[] doubleArray38 = new double[] { 1 };
        double[] doubleArray40 = new double[] { 1 };
        double[] doubleArray42 = new double[] { 1 };
        double[][] doubleArray43 = new double[][] { doubleArray34, doubleArray36, doubleArray38, doubleArray40, doubleArray42 };
        int[] intArray44 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray43, intArray44);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray31, intArray44);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray30, intArray44);
        double[][] doubleArray48 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        double[][] doubleArray49 = new double[][] {};
        double[][] doubleArray50 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray49);
        int[] intArray51 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray50, intArray51);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray48, intArray51);
        double[][] doubleArray54 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray48);
        double[][] doubleArray55 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray54);
        double[][] doubleArray56 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray55);
        double[][] doubleArray57 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray56);
        double[][] doubleArray58 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray57);
        double[][] doubleArray59 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray57);
        java.lang.Class<?> wildcardClass60 = doubleArray59.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[]");
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertNotNull(wildcardClass60);
    }

    @Test
    public void test3594() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3594");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[] doubleArray6 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray10 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray14 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray18 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray19 = new double[][] { doubleArray6, doubleArray10, doubleArray14, doubleArray18 };
        double[] doubleArray21 = new double[] { 1 };
        double[] doubleArray23 = new double[] { 1 };
        double[] doubleArray25 = new double[] { 1 };
        double[] doubleArray27 = new double[] { 1 };
        double[] doubleArray29 = new double[] { 1 };
        double[][] doubleArray30 = new double[][] { doubleArray21, doubleArray23, doubleArray25, doubleArray27, doubleArray29 };
        int[] intArray31 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray30, intArray31);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray19, intArray31);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray2, intArray31);
        double[][] doubleArray35 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray36 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray37 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray38 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray37);
        double[] doubleArray45 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray52 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray59 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray66 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray67 = new double[][] { doubleArray45, doubleArray52, doubleArray59, doubleArray66 };
        double[][] doubleArray68 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray67);
        double[] doubleArray70 = new double[] { 1 };
        double[] doubleArray72 = new double[] { 1 };
        double[] doubleArray74 = new double[] { 1 };
        double[] doubleArray76 = new double[] { 1 };
        double[] doubleArray78 = new double[] { 1 };
        double[][] doubleArray79 = new double[][] { doubleArray70, doubleArray72, doubleArray74, doubleArray76, doubleArray78 };
        int[] intArray80 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray79, intArray80);
        double[][] doubleArray82 = new double[][] {};
        double[][] doubleArray83 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray82);
        int[] intArray84 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray83, intArray84);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray79, intArray84);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray67, intArray84);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray37, intArray84);
        double[][] doubleArray89 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray37);
        java.lang.Class<?> wildcardClass90 = doubleArray89.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray66), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray70), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray74), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray78), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[]");
        org.junit.Assert.assertNotNull(doubleArray82);
        org.junit.Assert.assertNotNull(doubleArray83);
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray84), "[]");
        org.junit.Assert.assertNotNull(doubleArray89);
        org.junit.Assert.assertNotNull(wildcardClass90);
    }

    @Test
    public void test3595() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3595");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[] doubleArray31 = new double[] { 1 };
        double[] doubleArray33 = new double[] { 1 };
        double[] doubleArray35 = new double[] { 1 };
        double[] doubleArray37 = new double[] { 1 };
        double[] doubleArray39 = new double[] { 1 };
        double[][] doubleArray40 = new double[][] { doubleArray31, doubleArray33, doubleArray35, doubleArray37, doubleArray39 };
        int[] intArray41 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray40, intArray41);
        double[][] doubleArray43 = new double[][] {};
        double[][] doubleArray44 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray43);
        int[] intArray45 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray44, intArray45);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray40, intArray45);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray28, intArray45);
        double[][] doubleArray49 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray50 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray49);
        double[][] doubleArray51 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray50);
        double[][] doubleArray52 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray51);
        double[][] doubleArray53 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray52);
        double[][] doubleArray54 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray52);
        double[][] doubleArray55 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray54);
        double[][] doubleArray56 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray54);
        double[][] doubleArray57 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray56);
        java.lang.Class<?> wildcardClass58 = doubleArray57.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertNotNull(wildcardClass58);
    }

    @Test
    public void test3596() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3596");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray5 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray6 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[] doubleArray8 = new double[] { 1 };
        double[] doubleArray10 = new double[] { 1 };
        double[] doubleArray12 = new double[] { 1 };
        double[] doubleArray14 = new double[] { 1 };
        double[] doubleArray16 = new double[] { 1 };
        double[][] doubleArray17 = new double[][] { doubleArray8, doubleArray10, doubleArray12, doubleArray14, doubleArray16 };
        int[] intArray18 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray17, intArray18);
        double[] doubleArray26 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray33 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray40 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray47 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray48 = new double[][] { doubleArray26, doubleArray33, doubleArray40, doubleArray47 };
        double[][] doubleArray49 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray48);
        double[] doubleArray51 = new double[] { 1 };
        double[] doubleArray53 = new double[] { 1 };
        double[] doubleArray55 = new double[] { 1 };
        double[] doubleArray57 = new double[] { 1 };
        double[] doubleArray59 = new double[] { 1 };
        double[][] doubleArray60 = new double[][] { doubleArray51, doubleArray53, doubleArray55, doubleArray57, doubleArray59 };
        int[] intArray61 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray60, intArray61);
        double[][] doubleArray63 = new double[][] {};
        double[][] doubleArray64 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray63);
        int[] intArray65 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray64, intArray65);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray60, intArray65);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray48, intArray65);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray17, intArray65);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray6, intArray65);
        double[][] doubleArray71 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray6);
        double[][] doubleArray72 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray6);
        double[][] doubleArray73 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray72);
        double[][] doubleArray74 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray73);
        double[][] doubleArray75 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray74);
        double[][] doubleArray76 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray74);
        double[][] doubleArray77 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray76);
        java.lang.Class<?> wildcardClass78 = doubleArray77.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[]");
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[]");
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[]");
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertNotNull(wildcardClass78);
    }

    @Test
    public void test3597() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3597");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray30 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray29);
        double[][] doubleArray31 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        double[][] doubleArray32 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        double[][] doubleArray33 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        double[][] doubleArray34 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        double[][] doubleArray35 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray34);
        double[][] doubleArray36 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray35);
        double[][] doubleArray37 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray35);
        double[][] doubleArray38 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray35);
        double[][] doubleArray39 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray38);
        double[][] doubleArray40 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray39);
        double[][] doubleArray41 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray39);
        double[][] doubleArray42 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray41);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertNotNull(doubleArray42);
    }

    @Test
    public void test3598() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3598");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = new double[][] {};
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[] doubleArray5 = new double[] { 1 };
        double[] doubleArray7 = new double[] { 1 };
        double[] doubleArray9 = new double[] { 1 };
        double[] doubleArray11 = new double[] { 1 };
        double[] doubleArray13 = new double[] { 1 };
        double[][] doubleArray14 = new double[][] { doubleArray5, doubleArray7, doubleArray9, doubleArray11, doubleArray13 };
        int[] intArray15 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray14, intArray15);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray2, intArray15);
        double[] doubleArray21 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray25 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray29 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray33 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray34 = new double[][] { doubleArray21, doubleArray25, doubleArray29, doubleArray33 };
        double[] doubleArray36 = new double[] { 1 };
        double[] doubleArray38 = new double[] { 1 };
        double[] doubleArray40 = new double[] { 1 };
        double[] doubleArray42 = new double[] { 1 };
        double[] doubleArray44 = new double[] { 1 };
        double[][] doubleArray45 = new double[][] { doubleArray36, doubleArray38, doubleArray40, doubleArray42, doubleArray44 };
        int[] intArray46 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray45, intArray46);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray34, intArray46);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray2, intArray46);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray1, intArray46);
        double[][] doubleArray51 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray52 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray53 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray54 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray53);
        double[][] doubleArray55 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray54);
        double[][] doubleArray56 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray54);
        double[][] doubleArray57 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray54);
        double[][] doubleArray58 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray57);
        double[][] doubleArray59 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray58);
        java.lang.Class<?> wildcardClass60 = doubleArray59.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertNotNull(wildcardClass60);
    }

    @Test
    public void test3599() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3599");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[] doubleArray9 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray16 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray23 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray30 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray31 = new double[][] { doubleArray9, doubleArray16, doubleArray23, doubleArray30 };
        double[][] doubleArray32 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray31);
        double[] doubleArray34 = new double[] { 1 };
        double[] doubleArray36 = new double[] { 1 };
        double[] doubleArray38 = new double[] { 1 };
        double[] doubleArray40 = new double[] { 1 };
        double[] doubleArray42 = new double[] { 1 };
        double[][] doubleArray43 = new double[][] { doubleArray34, doubleArray36, doubleArray38, doubleArray40, doubleArray42 };
        int[] intArray44 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray43, intArray44);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray32, intArray44);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray1, intArray44);
        double[][] doubleArray48 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray49 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray48);
        double[][] doubleArray50 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray48);
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertNotNull(doubleArray50);
    }

    @Test
    public void test3600() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3600");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[][] doubleArray5 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray4);
        double[][] doubleArray6 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray4);
        double[][] doubleArray7 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray4);
        double[][] doubleArray8 = new double[][] {};
        double[][] doubleArray9 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray8);
        double[][] doubleArray10 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray9);
        double[] doubleArray17 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray24 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray31 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray38 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray39 = new double[][] { doubleArray17, doubleArray24, doubleArray31, doubleArray38 };
        double[][] doubleArray40 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray39);
        double[] doubleArray42 = new double[] { 1 };
        double[] doubleArray44 = new double[] { 1 };
        double[] doubleArray46 = new double[] { 1 };
        double[] doubleArray48 = new double[] { 1 };
        double[] doubleArray50 = new double[] { 1 };
        double[][] doubleArray51 = new double[][] { doubleArray42, doubleArray44, doubleArray46, doubleArray48, doubleArray50 };
        int[] intArray52 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray51, intArray52);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray40, intArray52);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray9, intArray52);
        double[] doubleArray59 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray63 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray67 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray71 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray72 = new double[][] { doubleArray59, doubleArray63, doubleArray67, doubleArray71 };
        double[] doubleArray74 = new double[] { 1 };
        double[] doubleArray76 = new double[] { 1 };
        double[] doubleArray78 = new double[] { 1 };
        double[] doubleArray80 = new double[] { 1 };
        double[] doubleArray82 = new double[] { 1 };
        double[][] doubleArray83 = new double[][] { doubleArray74, doubleArray76, doubleArray78, doubleArray80, doubleArray82 };
        int[] intArray84 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray83, intArray84);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray72, intArray84);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray9, intArray84);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray4, intArray84);
        java.lang.Class<?> wildcardClass89 = doubleArray4.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[]");
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray71), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray74), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray78), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray80), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray82), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray83);
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray84), "[]");
        org.junit.Assert.assertNotNull(wildcardClass89);
    }

    @Test
    public void test3601() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3601");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[] doubleArray11 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray18 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray25 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray32 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray33 = new double[][] { doubleArray11, doubleArray18, doubleArray25, doubleArray32 };
        double[][] doubleArray34 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray33);
        double[][] doubleArray35 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray33);
        double[][] doubleArray36 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray33);
        double[][] doubleArray37 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray36);
        double[][] doubleArray38 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray37);
        double[] doubleArray45 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray52 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray59 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray66 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray67 = new double[][] { doubleArray45, doubleArray52, doubleArray59, doubleArray66 };
        double[][] doubleArray68 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray67);
        double[][] doubleArray69 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray67);
        double[][] doubleArray70 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray67);
        double[][] doubleArray71 = new double[][] {};
        double[][] doubleArray72 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray71);
        int[] intArray73 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray72, intArray73);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray70, intArray73);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray38, intArray73);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray0, intArray73);
        double[][] doubleArray78 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray79 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray80 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray79);
        double[][] doubleArray81 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray79);
        java.lang.Class<?> wildcardClass82 = doubleArray81.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray66), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[]");
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertNotNull(doubleArray81);
        org.junit.Assert.assertNotNull(wildcardClass82);
    }

    @Test
    public void test3602() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3602");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray3 = new double[][] {};
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[][] doubleArray5 = new double[][] {};
        double[][] doubleArray6 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray5);
        double[] doubleArray8 = new double[] { 1 };
        double[] doubleArray10 = new double[] { 1 };
        double[] doubleArray12 = new double[] { 1 };
        double[] doubleArray14 = new double[] { 1 };
        double[] doubleArray16 = new double[] { 1 };
        double[][] doubleArray17 = new double[][] { doubleArray8, doubleArray10, doubleArray12, doubleArray14, doubleArray16 };
        int[] intArray18 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray17, intArray18);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray5, intArray18);
        double[] doubleArray24 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray28 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray32 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray36 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray37 = new double[][] { doubleArray24, doubleArray28, doubleArray32, doubleArray36 };
        double[] doubleArray39 = new double[] { 1 };
        double[] doubleArray41 = new double[] { 1 };
        double[] doubleArray43 = new double[] { 1 };
        double[] doubleArray45 = new double[] { 1 };
        double[] doubleArray47 = new double[] { 1 };
        double[][] doubleArray48 = new double[][] { doubleArray39, doubleArray41, doubleArray43, doubleArray45, doubleArray47 };
        int[] intArray49 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray48, intArray49);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray37, intArray49);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray5, intArray49);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray4, intArray49);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray2, intArray49);
        double[][] doubleArray55 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray56 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray55);
        double[][] doubleArray57 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray55);
        double[][] doubleArray58 = new double[][] {};
        double[][] doubleArray59 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray58);
        double[][] doubleArray60 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray59);
        double[] doubleArray64 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray68 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray72 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray76 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray77 = new double[][] { doubleArray64, doubleArray68, doubleArray72, doubleArray76 };
        double[] doubleArray79 = new double[] { 1 };
        double[] doubleArray81 = new double[] { 1 };
        double[] doubleArray83 = new double[] { 1 };
        double[] doubleArray85 = new double[] { 1 };
        double[] doubleArray87 = new double[] { 1 };
        double[][] doubleArray88 = new double[][] { doubleArray79, doubleArray81, doubleArray83, doubleArray85, doubleArray87 };
        int[] intArray89 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray88, intArray89);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray77, intArray89);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray59, intArray89);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray57, intArray89);
        double[][] doubleArray94 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray57);
        double[][] doubleArray95 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray94);
        double[][] doubleArray96 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray94);
        double[][] doubleArray97 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray94);
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[]");
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[]");
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray79), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray81), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray83), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray85), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray87), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray88);
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray89), "[]");
        org.junit.Assert.assertNotNull(doubleArray94);
        org.junit.Assert.assertNotNull(doubleArray95);
        org.junit.Assert.assertNotNull(doubleArray96);
        org.junit.Assert.assertNotNull(doubleArray97);
    }

    @Test
    public void test3603() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3603");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray30 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray29);
        double[][] doubleArray31 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray29);
        double[] doubleArray38 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray45 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray52 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray59 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray60 = new double[][] { doubleArray38, doubleArray45, doubleArray52, doubleArray59 };
        double[][] doubleArray61 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray60);
        double[][] doubleArray62 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray61);
        double[][] doubleArray63 = new double[][] {};
        double[][] doubleArray64 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray63);
        double[] doubleArray66 = new double[] { 1 };
        double[] doubleArray68 = new double[] { 1 };
        double[] doubleArray70 = new double[] { 1 };
        double[] doubleArray72 = new double[] { 1 };
        double[] doubleArray74 = new double[] { 1 };
        double[][] doubleArray75 = new double[][] { doubleArray66, doubleArray68, doubleArray70, doubleArray72, doubleArray74 };
        int[] intArray76 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray75, intArray76);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray63, intArray76);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray62, intArray76);
        double[][] doubleArray80 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray62);
        double[][] doubleArray81 = new double[][] {};
        double[][] doubleArray82 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray81);
        int[] intArray83 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray82, intArray83);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray80, intArray83);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray31, intArray83);
        double[][] doubleArray87 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray31);
        double[][] doubleArray88 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray87);
        double[][] doubleArray89 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray88);
        java.lang.Class<?> wildcardClass90 = doubleArray88.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray66), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray70), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray74), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[]");
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertNotNull(doubleArray81);
        org.junit.Assert.assertNotNull(doubleArray82);
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray83), "[]");
        org.junit.Assert.assertNotNull(doubleArray87);
        org.junit.Assert.assertNotNull(doubleArray88);
        org.junit.Assert.assertNotNull(doubleArray89);
        org.junit.Assert.assertNotNull(wildcardClass90);
    }

    @Test
    public void test3604() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3604");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[] doubleArray11 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray18 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray25 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray32 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray33 = new double[][] { doubleArray11, doubleArray18, doubleArray25, doubleArray32 };
        double[][] doubleArray34 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray33);
        double[][] doubleArray35 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray34);
        double[][] doubleArray36 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray35);
        double[][] doubleArray37 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray36);
        double[][] doubleArray38 = new double[][] {};
        double[][] doubleArray39 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray38);
        double[][] doubleArray40 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray39);
        double[][] doubleArray41 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray39);
        double[][] doubleArray42 = new double[][] {};
        double[][] doubleArray43 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray42);
        double[][] doubleArray44 = new double[][] {};
        double[][] doubleArray45 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray44);
        double[] doubleArray47 = new double[] { 1 };
        double[] doubleArray49 = new double[] { 1 };
        double[] doubleArray51 = new double[] { 1 };
        double[] doubleArray53 = new double[] { 1 };
        double[] doubleArray55 = new double[] { 1 };
        double[][] doubleArray56 = new double[][] { doubleArray47, doubleArray49, doubleArray51, doubleArray53, doubleArray55 };
        int[] intArray57 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray56, intArray57);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray44, intArray57);
        double[] doubleArray63 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray67 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray71 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray75 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray76 = new double[][] { doubleArray63, doubleArray67, doubleArray71, doubleArray75 };
        double[] doubleArray78 = new double[] { 1 };
        double[] doubleArray80 = new double[] { 1 };
        double[] doubleArray82 = new double[] { 1 };
        double[] doubleArray84 = new double[] { 1 };
        double[] doubleArray86 = new double[] { 1 };
        double[][] doubleArray87 = new double[][] { doubleArray78, doubleArray80, doubleArray82, doubleArray84, doubleArray86 };
        int[] intArray88 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray87, intArray88);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray76, intArray88);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray44, intArray88);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray42, intArray88);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray39, intArray88);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray37, intArray88);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray4, intArray88);
        double[][] doubleArray96 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray4);
        double[][] doubleArray97 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray4);
        double[][] doubleArray98 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray4);
        java.lang.Class<?> wildcardClass99 = doubleArray98.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[]");
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray71), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray75), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray78), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray80), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray82), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray84), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray86), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray87);
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray88), "[]");
        org.junit.Assert.assertNotNull(doubleArray96);
        org.junit.Assert.assertNotNull(doubleArray97);
        org.junit.Assert.assertNotNull(doubleArray98);
        org.junit.Assert.assertNotNull(wildcardClass99);
    }

    @Test
    public void test3605() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3605");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = new double[][] {};
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[] doubleArray5 = new double[] { 1 };
        double[] doubleArray7 = new double[] { 1 };
        double[] doubleArray9 = new double[] { 1 };
        double[] doubleArray11 = new double[] { 1 };
        double[] doubleArray13 = new double[] { 1 };
        double[][] doubleArray14 = new double[][] { doubleArray5, doubleArray7, doubleArray9, doubleArray11, doubleArray13 };
        int[] intArray15 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray14, intArray15);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray2, intArray15);
        double[] doubleArray21 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray25 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray29 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray33 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray34 = new double[][] { doubleArray21, doubleArray25, doubleArray29, doubleArray33 };
        double[] doubleArray36 = new double[] { 1 };
        double[] doubleArray38 = new double[] { 1 };
        double[] doubleArray40 = new double[] { 1 };
        double[] doubleArray42 = new double[] { 1 };
        double[] doubleArray44 = new double[] { 1 };
        double[][] doubleArray45 = new double[][] { doubleArray36, doubleArray38, doubleArray40, doubleArray42, doubleArray44 };
        int[] intArray46 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray45, intArray46);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray34, intArray46);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray2, intArray46);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray1, intArray46);
        double[][] doubleArray51 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray52 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray53 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray54 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray53);
        double[][] doubleArray55 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray54);
        double[][] doubleArray56 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray55);
        double[][] doubleArray57 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray56);
        java.lang.Class<?> wildcardClass58 = doubleArray56.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertNotNull(wildcardClass58);
    }

    @Test
    public void test3606() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3606");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray5 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray4);
        double[][] doubleArray6 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray4);
        double[][] doubleArray7 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray6);
        double[][] doubleArray8 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray6);
        double[][] doubleArray9 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray6);
        double[][] doubleArray10 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray6);
        double[][] doubleArray11 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray6);
        double[][] doubleArray12 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertNotNull(doubleArray12);
    }

    @Test
    public void test3607() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3607");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[][] doubleArray5 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray4);
        double[][] doubleArray6 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray5);
        double[][] doubleArray7 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray6);
        double[][] doubleArray8 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray6);
        double[][] doubleArray9 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray6);
        java.lang.Class<?> wildcardClass10 = doubleArray9.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertNotNull(wildcardClass10);
    }

    @Test
    public void test3608() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3608");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray30 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray31 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray32 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray31);
        double[][] doubleArray33 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray32);
        double[] doubleArray40 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray47 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray54 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray61 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray62 = new double[][] { doubleArray40, doubleArray47, doubleArray54, doubleArray61 };
        double[][] doubleArray63 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray62);
        double[][] doubleArray64 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray62);
        double[][] doubleArray65 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray62);
        double[][] doubleArray66 = new double[][] {};
        double[][] doubleArray67 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray66);
        int[] intArray68 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray67, intArray68);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray65, intArray68);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray33, intArray68);
        double[][] doubleArray72 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray33);
        double[][] doubleArray73 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray72);
        java.lang.Class<?> wildcardClass74 = doubleArray73.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[]");
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertNotNull(wildcardClass74);
    }

    @Test
    public void test3609() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3609");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[] doubleArray31 = new double[] { 1 };
        double[] doubleArray33 = new double[] { 1 };
        double[] doubleArray35 = new double[] { 1 };
        double[] doubleArray37 = new double[] { 1 };
        double[] doubleArray39 = new double[] { 1 };
        double[][] doubleArray40 = new double[][] { doubleArray31, doubleArray33, doubleArray35, doubleArray37, doubleArray39 };
        int[] intArray41 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray40, intArray41);
        double[][] doubleArray43 = new double[][] {};
        double[][] doubleArray44 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray43);
        int[] intArray45 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray44, intArray45);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray40, intArray45);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray28, intArray45);
        double[][] doubleArray49 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray50 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray49);
        double[][] doubleArray51 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray50);
        double[][] doubleArray52 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray51);
        double[][] doubleArray53 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray52);
        double[][] doubleArray54 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray52);
        double[][] doubleArray55 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray52);
        double[][] doubleArray56 = null;
        double[][] doubleArray57 = null;
        double[] doubleArray61 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray65 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray69 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray73 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray74 = new double[][] { doubleArray61, doubleArray65, doubleArray69, doubleArray73 };
        double[] doubleArray76 = new double[] { 1 };
        double[] doubleArray78 = new double[] { 1 };
        double[] doubleArray80 = new double[] { 1 };
        double[] doubleArray82 = new double[] { 1 };
        double[] doubleArray84 = new double[] { 1 };
        double[][] doubleArray85 = new double[][] { doubleArray76, doubleArray78, doubleArray80, doubleArray82, doubleArray84 };
        int[] intArray86 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray85, intArray86);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray74, intArray86);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray57, intArray86);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray56, intArray86);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray55, intArray86);
        java.lang.Class<?> wildcardClass92 = intArray86.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray73), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray78), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray80), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray82), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray84), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray85);
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray86), "[]");
        org.junit.Assert.assertNotNull(wildcardClass92);
    }

    @Test
    public void test3610() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3610");
        double[][] doubleArray0 = null;
        double[][] doubleArray1 = new double[][] {};
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[][] doubleArray5 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[][] doubleArray6 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[][] doubleArray7 = new double[][] {};
        double[][] doubleArray8 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray7);
        double[][] doubleArray9 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray7);
        double[][] doubleArray10 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray7);
        double[][] doubleArray11 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray7);
        double[][] doubleArray12 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray11);
        double[][] doubleArray13 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray12);
        double[][] doubleArray14 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray12);
        double[][] doubleArray15 = new double[][] {};
        double[][] doubleArray16 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray15);
        double[][] doubleArray17 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray15);
        double[][] doubleArray18 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray15);
        double[][] doubleArray19 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray15);
        double[][] doubleArray20 = new double[][] {};
        double[][] doubleArray21 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray20);
        double[][] doubleArray22 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray21);
        double[] doubleArray26 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray30 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray34 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray38 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray39 = new double[][] { doubleArray26, doubleArray30, doubleArray34, doubleArray38 };
        double[] doubleArray41 = new double[] { 1 };
        double[] doubleArray43 = new double[] { 1 };
        double[] doubleArray45 = new double[] { 1 };
        double[] doubleArray47 = new double[] { 1 };
        double[] doubleArray49 = new double[] { 1 };
        double[][] doubleArray50 = new double[][] { doubleArray41, doubleArray43, doubleArray45, doubleArray47, doubleArray49 };
        int[] intArray51 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray50, intArray51);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray39, intArray51);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray22, intArray51);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray15, intArray51);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray14, intArray51);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray6, intArray51);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray0, intArray51);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[]");
    }

    @Test
    public void test3611() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3611");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray30 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray29);
        double[][] doubleArray31 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        double[][] doubleArray32 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray31);
        double[][] doubleArray33 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray32);
        double[][] doubleArray34 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray33);
        double[][] doubleArray35 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray33);
        double[][] doubleArray36 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray33);
        double[][] doubleArray37 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray36);
        double[][] doubleArray38 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray36);
        double[][] doubleArray39 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray36);
        double[][] doubleArray40 = null;
        double[][] doubleArray41 = new double[][] {};
        double[][] doubleArray42 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray41);
        int[] intArray43 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray42, intArray43);
        double[][] doubleArray45 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray42);
        double[][] doubleArray46 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray42);
        double[][] doubleArray47 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray46);
        double[][] doubleArray48 = new double[][] {};
        double[][] doubleArray49 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray48);
        double[][] doubleArray50 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray48);
        double[][] doubleArray51 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray48);
        double[][] doubleArray52 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray51);
        double[] doubleArray54 = new double[] { 1 };
        double[] doubleArray56 = new double[] { 1 };
        double[] doubleArray58 = new double[] { 1 };
        double[] doubleArray60 = new double[] { 1 };
        double[] doubleArray62 = new double[] { 1 };
        double[][] doubleArray63 = new double[][] { doubleArray54, doubleArray56, doubleArray58, doubleArray60, doubleArray62 };
        int[] intArray64 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray63, intArray64);
        double[][] doubleArray66 = new double[][] {};
        double[][] doubleArray67 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray66);
        int[] intArray68 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray67, intArray68);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray63, intArray68);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray51, intArray68);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray46, intArray68);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray40, intArray68);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray36, intArray68);
        double[][] doubleArray75 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray36);
        java.lang.Class<?> wildcardClass76 = doubleArray36.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[]");
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[]");
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[]");
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertNotNull(wildcardClass76);
    }

    @Test
    public void test3612() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3612");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[] doubleArray3 = new double[] { 1 };
        double[] doubleArray5 = new double[] { 1 };
        double[] doubleArray7 = new double[] { 1 };
        double[] doubleArray9 = new double[] { 1 };
        double[] doubleArray11 = new double[] { 1 };
        double[][] doubleArray12 = new double[][] { doubleArray3, doubleArray5, doubleArray7, doubleArray9, doubleArray11 };
        int[] intArray13 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray12, intArray13);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray0, intArray13);
        double[] doubleArray22 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray29 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray36 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray43 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray44 = new double[][] { doubleArray22, doubleArray29, doubleArray36, doubleArray43 };
        double[][] doubleArray45 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray44);
        double[][] doubleArray46 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray45);
        double[][] doubleArray47 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray45);
        double[][] doubleArray48 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray45);
        double[][] doubleArray49 = new double[][] {};
        double[][] doubleArray50 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray49);
        double[][] doubleArray51 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray49);
        double[][] doubleArray52 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray51);
        double[][] doubleArray53 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray51);
        double[][] doubleArray54 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray53);
        double[][] doubleArray55 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray54);
        double[][] doubleArray56 = new double[][] {};
        double[][] doubleArray57 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray56);
        int[] intArray58 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray57, intArray58);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray55, intArray58);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray45, intArray58);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray0, intArray58);
        double[][] doubleArray63 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray64 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        java.lang.Class<?> wildcardClass65 = doubleArray0.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[]");
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[]");
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertNotNull(wildcardClass65);
    }

    @Test
    public void test3613() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3613");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        int[] intArray2 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray1, intArray2);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray5 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray4);
        double[][] doubleArray6 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray5);
        double[][] doubleArray7 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray6);
        double[][] doubleArray8 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray6);
        double[][] doubleArray9 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray6);
        double[][] doubleArray10 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray9);
        double[][] doubleArray11 = new double[][] {};
        double[][] doubleArray12 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray11);
        double[][] doubleArray13 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray12);
        double[][] doubleArray14 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray13);
        double[][] doubleArray15 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray14);
        double[][] doubleArray16 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray14);
        double[] doubleArray18 = new double[] { 1 };
        double[] doubleArray20 = new double[] { 1 };
        double[] doubleArray22 = new double[] { 1 };
        double[] doubleArray24 = new double[] { 1 };
        double[] doubleArray26 = new double[] { 1 };
        double[][] doubleArray27 = new double[][] { doubleArray18, doubleArray20, doubleArray22, doubleArray24, doubleArray26 };
        int[] intArray28 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray27, intArray28);
        double[] doubleArray36 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray43 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray50 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray57 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray58 = new double[][] { doubleArray36, doubleArray43, doubleArray50, doubleArray57 };
        double[][] doubleArray59 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray58);
        double[] doubleArray61 = new double[] { 1 };
        double[] doubleArray63 = new double[] { 1 };
        double[] doubleArray65 = new double[] { 1 };
        double[] doubleArray67 = new double[] { 1 };
        double[] doubleArray69 = new double[] { 1 };
        double[][] doubleArray70 = new double[][] { doubleArray61, doubleArray63, doubleArray65, doubleArray67, doubleArray69 };
        int[] intArray71 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray70, intArray71);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray59, intArray71);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray27, intArray71);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray16, intArray71);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray9, intArray71);
        double[][] doubleArray77 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray9);
        double[][] doubleArray78 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray77);
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[]");
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertNotNull(doubleArray78);
    }

    @Test
    public void test3614() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3614");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[][] doubleArray5 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray4);
        double[][] doubleArray6 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray5);
        double[][] doubleArray7 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray5);
        double[][] doubleArray8 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray7);
        double[][] doubleArray9 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray8);
        java.lang.Class<?> wildcardClass10 = doubleArray8.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertNotNull(wildcardClass10);
    }

    @Test
    public void test3615() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3615");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[] doubleArray6 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray10 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray14 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray18 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray19 = new double[][] { doubleArray6, doubleArray10, doubleArray14, doubleArray18 };
        double[] doubleArray21 = new double[] { 1 };
        double[] doubleArray23 = new double[] { 1 };
        double[] doubleArray25 = new double[] { 1 };
        double[] doubleArray27 = new double[] { 1 };
        double[] doubleArray29 = new double[] { 1 };
        double[][] doubleArray30 = new double[][] { doubleArray21, doubleArray23, doubleArray25, doubleArray27, doubleArray29 };
        int[] intArray31 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray30, intArray31);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray19, intArray31);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray2, intArray31);
        double[][] doubleArray35 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray36 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray37 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        java.lang.Class<?> wildcardClass38 = doubleArray2.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertNotNull(wildcardClass38);
    }

    @Test
    public void test3616() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3616");
        double[][] doubleArray0 = null;
        double[][] doubleArray1 = new double[][] {};
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray5 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray4);
        double[][] doubleArray6 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray5);
        double[][] doubleArray7 = new double[][] {};
        double[][] doubleArray8 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray7);
        double[][] doubleArray9 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray7);
        double[][] doubleArray10 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray9);
        double[][] doubleArray11 = null;
        double[][] doubleArray12 = new double[][] {};
        double[][] doubleArray13 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray12);
        double[][] doubleArray14 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray13);
        double[] doubleArray18 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray22 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray26 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray30 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray31 = new double[][] { doubleArray18, doubleArray22, doubleArray26, doubleArray30 };
        double[] doubleArray33 = new double[] { 1 };
        double[] doubleArray35 = new double[] { 1 };
        double[] doubleArray37 = new double[] { 1 };
        double[] doubleArray39 = new double[] { 1 };
        double[] doubleArray41 = new double[] { 1 };
        double[][] doubleArray42 = new double[][] { doubleArray33, doubleArray35, doubleArray37, doubleArray39, doubleArray41 };
        int[] intArray43 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray42, intArray43);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray31, intArray43);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray14, intArray43);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray11, intArray43);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray10, intArray43);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray5, intArray43);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray0, intArray43);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[]");
    }

    @Test
    public void test3617() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3617");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray4 = new double[][] {};
        double[][] doubleArray5 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray4);
        double[][] doubleArray6 = new double[][] {};
        double[][] doubleArray7 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray6);
        double[] doubleArray9 = new double[] { 1 };
        double[] doubleArray11 = new double[] { 1 };
        double[] doubleArray13 = new double[] { 1 };
        double[] doubleArray15 = new double[] { 1 };
        double[] doubleArray17 = new double[] { 1 };
        double[][] doubleArray18 = new double[][] { doubleArray9, doubleArray11, doubleArray13, doubleArray15, doubleArray17 };
        int[] intArray19 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray18, intArray19);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray6, intArray19);
        double[] doubleArray25 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray29 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray33 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray37 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray38 = new double[][] { doubleArray25, doubleArray29, doubleArray33, doubleArray37 };
        double[] doubleArray40 = new double[] { 1 };
        double[] doubleArray42 = new double[] { 1 };
        double[] doubleArray44 = new double[] { 1 };
        double[] doubleArray46 = new double[] { 1 };
        double[] doubleArray48 = new double[] { 1 };
        double[][] doubleArray49 = new double[][] { doubleArray40, doubleArray42, doubleArray44, doubleArray46, doubleArray48 };
        int[] intArray50 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray49, intArray50);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray38, intArray50);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray6, intArray50);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray4, intArray50);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray1, intArray50);
        double[][] doubleArray56 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray57 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray56);
        double[][] doubleArray58 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray57);
        java.lang.Class<?> wildcardClass59 = doubleArray57.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[]");
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertNotNull(wildcardClass59);
    }

    @Test
    public void test3618() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3618");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray30 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray29);
        double[][] doubleArray31 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        double[][] doubleArray32 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        double[][] doubleArray33 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        double[][] doubleArray34 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray33);
        double[][] doubleArray35 = new double[][] {};
        double[][] doubleArray36 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray35);
        double[][] doubleArray37 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray35);
        double[][] doubleArray38 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray37);
        double[][] doubleArray39 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray38);
        double[][] doubleArray40 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray38);
        double[][] doubleArray41 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray40);
        double[][] doubleArray42 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray40);
        double[][] doubleArray43 = null;
        double[][] doubleArray44 = new double[][] {};
        double[][] doubleArray45 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray44);
        double[][] doubleArray46 = new double[][] {};
        double[][] doubleArray47 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray46);
        double[][] doubleArray48 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray47);
        double[] doubleArray52 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray56 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray60 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray64 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray65 = new double[][] { doubleArray52, doubleArray56, doubleArray60, doubleArray64 };
        double[] doubleArray67 = new double[] { 1 };
        double[] doubleArray69 = new double[] { 1 };
        double[] doubleArray71 = new double[] { 1 };
        double[] doubleArray73 = new double[] { 1 };
        double[] doubleArray75 = new double[] { 1 };
        double[][] doubleArray76 = new double[][] { doubleArray67, doubleArray69, doubleArray71, doubleArray73, doubleArray75 };
        int[] intArray77 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray76, intArray77);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray65, intArray77);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray47, intArray77);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray45, intArray77);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray43, intArray77);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray42, intArray77);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray33, intArray77);
        java.lang.Class<?> wildcardClass85 = intArray77.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray71), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray73), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray75), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray77), "[]");
        org.junit.Assert.assertNotNull(wildcardClass85);
    }

    @Test
    public void test3619() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3619");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray30 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray29);
        double[][] doubleArray31 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray29);
        double[][] doubleArray32 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray31);
        double[][] doubleArray33 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray32);
        double[][] doubleArray34 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray32);
        double[][] doubleArray35 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray32);
        double[][] doubleArray36 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray35);
        double[][] doubleArray37 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray36);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertNotNull(doubleArray37);
    }

    @Test
    public void test3620() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3620");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray3 = new double[][] {};
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[][] doubleArray5 = new double[][] {};
        double[][] doubleArray6 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray5);
        double[] doubleArray8 = new double[] { 1 };
        double[] doubleArray10 = new double[] { 1 };
        double[] doubleArray12 = new double[] { 1 };
        double[] doubleArray14 = new double[] { 1 };
        double[] doubleArray16 = new double[] { 1 };
        double[][] doubleArray17 = new double[][] { doubleArray8, doubleArray10, doubleArray12, doubleArray14, doubleArray16 };
        int[] intArray18 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray17, intArray18);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray5, intArray18);
        double[] doubleArray24 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray28 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray32 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray36 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray37 = new double[][] { doubleArray24, doubleArray28, doubleArray32, doubleArray36 };
        double[] doubleArray39 = new double[] { 1 };
        double[] doubleArray41 = new double[] { 1 };
        double[] doubleArray43 = new double[] { 1 };
        double[] doubleArray45 = new double[] { 1 };
        double[] doubleArray47 = new double[] { 1 };
        double[][] doubleArray48 = new double[][] { doubleArray39, doubleArray41, doubleArray43, doubleArray45, doubleArray47 };
        int[] intArray49 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray48, intArray49);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray37, intArray49);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray5, intArray49);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray4, intArray49);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray2, intArray49);
        double[][] doubleArray55 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray56 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray55);
        double[][] doubleArray57 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray55);
        double[][] doubleArray58 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray57);
        double[][] doubleArray59 = new double[][] {};
        double[][] doubleArray60 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray59);
        double[][] doubleArray61 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray60);
        double[] doubleArray65 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray69 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray73 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray77 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray78 = new double[][] { doubleArray65, doubleArray69, doubleArray73, doubleArray77 };
        double[] doubleArray80 = new double[] { 1 };
        double[] doubleArray82 = new double[] { 1 };
        double[] doubleArray84 = new double[] { 1 };
        double[] doubleArray86 = new double[] { 1 };
        double[] doubleArray88 = new double[] { 1 };
        double[][] doubleArray89 = new double[][] { doubleArray80, doubleArray82, doubleArray84, doubleArray86, doubleArray88 };
        int[] intArray90 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray89, intArray90);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray78, intArray90);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray61, intArray90);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray57, intArray90);
        double[][] doubleArray95 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray57);
        double[][] doubleArray96 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray57);
        double[][] doubleArray97 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray57);
        double[][] doubleArray98 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray97);
        java.lang.Class<?> wildcardClass99 = doubleArray97.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[]");
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[]");
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray73), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray77), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray80), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray82), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray84), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray86), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray88), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray89);
        org.junit.Assert.assertNotNull(intArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray90), "[]");
        org.junit.Assert.assertNotNull(doubleArray95);
        org.junit.Assert.assertNotNull(doubleArray96);
        org.junit.Assert.assertNotNull(doubleArray97);
        org.junit.Assert.assertNotNull(doubleArray98);
        org.junit.Assert.assertNotNull(wildcardClass99);
    }

    @Test
    public void test3621() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3621");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[] doubleArray31 = new double[] { 1 };
        double[] doubleArray33 = new double[] { 1 };
        double[] doubleArray35 = new double[] { 1 };
        double[] doubleArray37 = new double[] { 1 };
        double[] doubleArray39 = new double[] { 1 };
        double[][] doubleArray40 = new double[][] { doubleArray31, doubleArray33, doubleArray35, doubleArray37, doubleArray39 };
        int[] intArray41 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray40, intArray41);
        double[][] doubleArray43 = new double[][] {};
        double[][] doubleArray44 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray43);
        int[] intArray45 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray44, intArray45);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray40, intArray45);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray28, intArray45);
        double[][] doubleArray49 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray50 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray49);
        double[][] doubleArray51 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray50);
        double[][] doubleArray52 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray50);
        double[][] doubleArray53 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray50);
        double[][] doubleArray54 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray50);
        double[][] doubleArray55 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray54);
        double[][] doubleArray56 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray55);
        double[][] doubleArray57 = new double[][] {};
        double[][] doubleArray58 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray57);
        double[][] doubleArray59 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray57);
        double[][] doubleArray60 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray59);
        double[][] doubleArray61 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray60);
        double[][] doubleArray62 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray61);
        double[][] doubleArray63 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray62);
        double[][] doubleArray64 = new double[][] {};
        double[][] doubleArray65 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray64);
        double[][] doubleArray66 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray64);
        double[][] doubleArray67 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray64);
        double[][] doubleArray68 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray64);
        double[][] doubleArray69 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray68);
        double[][] doubleArray70 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray68);
        double[][] doubleArray71 = new double[][] {};
        double[][] doubleArray72 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray71);
        int[] intArray73 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray72, intArray73);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray70, intArray73);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray63, intArray73);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray55, intArray73);
        java.lang.Class<?> wildcardClass78 = doubleArray55.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[]");
        org.junit.Assert.assertNotNull(wildcardClass78);
    }

    @Test
    public void test3622() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3622");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[] doubleArray31 = new double[] { 1 };
        double[] doubleArray33 = new double[] { 1 };
        double[] doubleArray35 = new double[] { 1 };
        double[] doubleArray37 = new double[] { 1 };
        double[] doubleArray39 = new double[] { 1 };
        double[][] doubleArray40 = new double[][] { doubleArray31, doubleArray33, doubleArray35, doubleArray37, doubleArray39 };
        int[] intArray41 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray40, intArray41);
        double[][] doubleArray43 = new double[][] {};
        double[][] doubleArray44 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray43);
        int[] intArray45 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray44, intArray45);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray40, intArray45);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray28, intArray45);
        double[][] doubleArray49 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray50 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray51 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray50);
        double[][] doubleArray52 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray50);
        double[][] doubleArray53 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray52);
        double[][] doubleArray54 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray53);
        double[][] doubleArray55 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray54);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertNotNull(doubleArray55);
    }

    @Test
    public void test3623() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3623");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray5 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray6 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray7 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray6);
        double[][] doubleArray8 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray7);
        double[][] doubleArray9 = new double[][] {};
        double[][] doubleArray10 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray9);
        double[] doubleArray12 = new double[] { 1 };
        double[] doubleArray14 = new double[] { 1 };
        double[] doubleArray16 = new double[] { 1 };
        double[] doubleArray18 = new double[] { 1 };
        double[] doubleArray20 = new double[] { 1 };
        double[][] doubleArray21 = new double[][] { doubleArray12, doubleArray14, doubleArray16, doubleArray18, doubleArray20 };
        int[] intArray22 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray21, intArray22);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray9, intArray22);
        double[] doubleArray28 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray32 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray36 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray40 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray41 = new double[][] { doubleArray28, doubleArray32, doubleArray36, doubleArray40 };
        double[] doubleArray43 = new double[] { 1 };
        double[] doubleArray45 = new double[] { 1 };
        double[] doubleArray47 = new double[] { 1 };
        double[] doubleArray49 = new double[] { 1 };
        double[] doubleArray51 = new double[] { 1 };
        double[][] doubleArray52 = new double[][] { doubleArray43, doubleArray45, doubleArray47, doubleArray49, doubleArray51 };
        int[] intArray53 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray52, intArray53);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray41, intArray53);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray9, intArray53);
        double[][] doubleArray57 = new double[][] {};
        double[][] doubleArray58 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray57);
        double[] doubleArray60 = new double[] { 1 };
        double[] doubleArray62 = new double[] { 1 };
        double[] doubleArray64 = new double[] { 1 };
        double[] doubleArray66 = new double[] { 1 };
        double[] doubleArray68 = new double[] { 1 };
        double[][] doubleArray69 = new double[][] { doubleArray60, doubleArray62, doubleArray64, doubleArray66, doubleArray68 };
        int[] intArray70 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray69, intArray70);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray57, intArray70);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray9, intArray70);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray8, intArray70);
        java.lang.Class<?> wildcardClass75 = intArray70.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[]");
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray66), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[]");
        org.junit.Assert.assertNotNull(wildcardClass75);
    }

    @Test
    public void test3624() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3624");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[][] doubleArray5 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray4);
        double[][] doubleArray6 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray4);
        double[][] doubleArray7 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray6);
        double[][] doubleArray8 = new double[][] {};
        double[][] doubleArray9 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray8);
        double[][] doubleArray10 = new double[][] {};
        double[][] doubleArray11 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray10);
        double[][] doubleArray12 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray11);
        double[] doubleArray16 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray20 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray24 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray28 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray29 = new double[][] { doubleArray16, doubleArray20, doubleArray24, doubleArray28 };
        double[] doubleArray31 = new double[] { 1 };
        double[] doubleArray33 = new double[] { 1 };
        double[] doubleArray35 = new double[] { 1 };
        double[] doubleArray37 = new double[] { 1 };
        double[] doubleArray39 = new double[] { 1 };
        double[][] doubleArray40 = new double[][] { doubleArray31, doubleArray33, doubleArray35, doubleArray37, doubleArray39 };
        int[] intArray41 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray40, intArray41);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray29, intArray41);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray11, intArray41);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray9, intArray41);
        double[][] doubleArray46 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray9);
        double[][] doubleArray47 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray46);
        double[][] doubleArray48 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray46);
        double[][] doubleArray49 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray46);
        double[][] doubleArray50 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray46);
        double[][] doubleArray51 = new double[][] {};
        double[][] doubleArray52 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray51);
        int[] intArray53 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray52, intArray53);
        double[] doubleArray56 = new double[] { 1 };
        double[] doubleArray58 = new double[] { 1 };
        double[] doubleArray60 = new double[] { 1 };
        double[] doubleArray62 = new double[] { 1 };
        double[] doubleArray64 = new double[] { 1 };
        double[][] doubleArray65 = new double[][] { doubleArray56, doubleArray58, doubleArray60, doubleArray62, doubleArray64 };
        int[] intArray66 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray65, intArray66);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray52, intArray66);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray50, intArray66);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray7, intArray66);
        double[][] doubleArray71 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray7);
        double[][] doubleArray72 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray7);
        java.lang.Class<?> wildcardClass73 = doubleArray72.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[]");
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[]");
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[]");
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertNotNull(wildcardClass73);
    }

    @Test
    public void test3625() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3625");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        int[] intArray2 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray1, intArray2);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray5 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray4);
        double[][] doubleArray6 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray4);
        double[][] doubleArray7 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray4);
        double[][] doubleArray8 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray7);
        double[][] doubleArray9 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray7);
        double[][] doubleArray10 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray7);
        double[][] doubleArray11 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray10);
        java.lang.Class<?> wildcardClass12 = doubleArray10.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertNotNull(wildcardClass12);
    }

    @Test
    public void test3626() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3626");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        int[] intArray2 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray1, intArray2);
        double[] doubleArray5 = new double[] { 1 };
        double[] doubleArray7 = new double[] { 1 };
        double[] doubleArray9 = new double[] { 1 };
        double[] doubleArray11 = new double[] { 1 };
        double[] doubleArray13 = new double[] { 1 };
        double[][] doubleArray14 = new double[][] { doubleArray5, doubleArray7, doubleArray9, doubleArray11, doubleArray13 };
        int[] intArray15 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray14, intArray15);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray1, intArray15);
        double[][] doubleArray18 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray19 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray18);
        double[][] doubleArray20 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray18);
        double[][] doubleArray21 = new double[][] {};
        double[][] doubleArray22 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray21);
        double[][] doubleArray23 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray21);
        double[][] doubleArray24 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray23);
        double[][] doubleArray25 = null;
        double[][] doubleArray26 = new double[][] {};
        double[][] doubleArray27 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray26);
        double[][] doubleArray28 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray27);
        double[] doubleArray32 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray36 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray40 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray44 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray45 = new double[][] { doubleArray32, doubleArray36, doubleArray40, doubleArray44 };
        double[] doubleArray47 = new double[] { 1 };
        double[] doubleArray49 = new double[] { 1 };
        double[] doubleArray51 = new double[] { 1 };
        double[] doubleArray53 = new double[] { 1 };
        double[] doubleArray55 = new double[] { 1 };
        double[][] doubleArray56 = new double[][] { doubleArray47, doubleArray49, doubleArray51, doubleArray53, doubleArray55 };
        int[] intArray57 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray56, intArray57);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray45, intArray57);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray28, intArray57);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray25, intArray57);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray24, intArray57);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray20, intArray57);
        java.lang.Class<?> wildcardClass64 = doubleArray20.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[]");
        org.junit.Assert.assertNotNull(wildcardClass64);
    }

    @Test
    public void test3627() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3627");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[] doubleArray3 = new double[] { 1 };
        double[] doubleArray5 = new double[] { 1 };
        double[] doubleArray7 = new double[] { 1 };
        double[] doubleArray9 = new double[] { 1 };
        double[] doubleArray11 = new double[] { 1 };
        double[][] doubleArray12 = new double[][] { doubleArray3, doubleArray5, doubleArray7, doubleArray9, doubleArray11 };
        int[] intArray13 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray12, intArray13);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray0, intArray13);
        double[] doubleArray19 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray23 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray27 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray31 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray32 = new double[][] { doubleArray19, doubleArray23, doubleArray27, doubleArray31 };
        double[] doubleArray34 = new double[] { 1 };
        double[] doubleArray36 = new double[] { 1 };
        double[] doubleArray38 = new double[] { 1 };
        double[] doubleArray40 = new double[] { 1 };
        double[] doubleArray42 = new double[] { 1 };
        double[][] doubleArray43 = new double[][] { doubleArray34, doubleArray36, doubleArray38, doubleArray40, doubleArray42 };
        int[] intArray44 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray43, intArray44);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray32, intArray44);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray0, intArray44);
        double[][] doubleArray48 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray49 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray48);
        double[] doubleArray56 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray63 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray70 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray77 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray78 = new double[][] { doubleArray56, doubleArray63, doubleArray70, doubleArray77 };
        double[][] doubleArray79 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray78);
        double[] doubleArray81 = new double[] { 1 };
        double[] doubleArray83 = new double[] { 1 };
        double[] doubleArray85 = new double[] { 1 };
        double[] doubleArray87 = new double[] { 1 };
        double[] doubleArray89 = new double[] { 1 };
        double[][] doubleArray90 = new double[][] { doubleArray81, doubleArray83, doubleArray85, doubleArray87, doubleArray89 };
        int[] intArray91 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray90, intArray91);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray79, intArray91);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray49, intArray91);
        double[][] doubleArray95 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray49);
        java.lang.Class<?> wildcardClass96 = doubleArray49.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray70), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray77), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertNotNull(doubleArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray81), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray83), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray85), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray87), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray89), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray90);
        org.junit.Assert.assertNotNull(intArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray91), "[]");
        org.junit.Assert.assertNotNull(doubleArray95);
        org.junit.Assert.assertNotNull(wildcardClass96);
    }

    @Test
    public void test3628() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3628");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = new double[][] {};
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[][] doubleArray5 = new double[][] {};
        double[][] doubleArray6 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray5);
        double[][] doubleArray7 = new double[][] {};
        double[][] doubleArray8 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray7);
        double[] doubleArray10 = new double[] { 1 };
        double[] doubleArray12 = new double[] { 1 };
        double[] doubleArray14 = new double[] { 1 };
        double[] doubleArray16 = new double[] { 1 };
        double[] doubleArray18 = new double[] { 1 };
        double[][] doubleArray19 = new double[][] { doubleArray10, doubleArray12, doubleArray14, doubleArray16, doubleArray18 };
        int[] intArray20 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray19, intArray20);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray7, intArray20);
        double[] doubleArray26 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray30 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray34 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray38 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray39 = new double[][] { doubleArray26, doubleArray30, doubleArray34, doubleArray38 };
        double[] doubleArray41 = new double[] { 1 };
        double[] doubleArray43 = new double[] { 1 };
        double[] doubleArray45 = new double[] { 1 };
        double[] doubleArray47 = new double[] { 1 };
        double[] doubleArray49 = new double[] { 1 };
        double[][] doubleArray50 = new double[][] { doubleArray41, doubleArray43, doubleArray45, doubleArray47, doubleArray49 };
        int[] intArray51 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray50, intArray51);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray39, intArray51);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray7, intArray51);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray6, intArray51);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray4, intArray51);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray1, intArray51);
        double[][] doubleArray58 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray59 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray58);
        double[][] doubleArray60 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray59);
        double[][] doubleArray61 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray59);
        java.lang.Class<?> wildcardClass62 = doubleArray59.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[]");
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[]");
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertNotNull(wildcardClass62);
    }

    @Test
    public void test3629() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3629");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[] doubleArray3 = new double[] { 1 };
        double[] doubleArray5 = new double[] { 1 };
        double[] doubleArray7 = new double[] { 1 };
        double[] doubleArray9 = new double[] { 1 };
        double[] doubleArray11 = new double[] { 1 };
        double[][] doubleArray12 = new double[][] { doubleArray3, doubleArray5, doubleArray7, doubleArray9, doubleArray11 };
        int[] intArray13 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray12, intArray13);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray0, intArray13);
        double[][] doubleArray16 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray17 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray16);
        double[][] doubleArray18 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray17);
        double[][] doubleArray19 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray18);
        double[][] doubleArray20 = new double[][] {};
        double[][] doubleArray21 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray20);
        double[] doubleArray23 = new double[] { 1 };
        double[] doubleArray25 = new double[] { 1 };
        double[] doubleArray27 = new double[] { 1 };
        double[] doubleArray29 = new double[] { 1 };
        double[] doubleArray31 = new double[] { 1 };
        double[][] doubleArray32 = new double[][] { doubleArray23, doubleArray25, doubleArray27, doubleArray29, doubleArray31 };
        int[] intArray33 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray32, intArray33);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray20, intArray33);
        double[][] doubleArray36 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray20);
        double[] doubleArray43 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray50 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray57 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray64 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray65 = new double[][] { doubleArray43, doubleArray50, doubleArray57, doubleArray64 };
        double[][] doubleArray66 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray65);
        double[] doubleArray68 = new double[] { 1 };
        double[] doubleArray70 = new double[] { 1 };
        double[] doubleArray72 = new double[] { 1 };
        double[] doubleArray74 = new double[] { 1 };
        double[] doubleArray76 = new double[] { 1 };
        double[][] doubleArray77 = new double[][] { doubleArray68, doubleArray70, doubleArray72, doubleArray74, doubleArray76 };
        int[] intArray78 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray77, intArray78);
        double[][] doubleArray80 = new double[][] {};
        double[][] doubleArray81 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray80);
        int[] intArray82 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray81, intArray82);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray77, intArray82);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray65, intArray82);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray36, intArray82);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray18, intArray82);
        double[][] doubleArray88 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray18);
        double[][] doubleArray89 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray18);
        double[][] doubleArray90 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray89);
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray70), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray74), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[]");
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertNotNull(doubleArray81);
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[]");
        org.junit.Assert.assertNotNull(doubleArray88);
        org.junit.Assert.assertNotNull(doubleArray89);
        org.junit.Assert.assertNotNull(doubleArray90);
    }

    @Test
    public void test3630() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3630");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = new double[][] {};
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[] doubleArray5 = new double[] { 1 };
        double[] doubleArray7 = new double[] { 1 };
        double[] doubleArray9 = new double[] { 1 };
        double[] doubleArray11 = new double[] { 1 };
        double[] doubleArray13 = new double[] { 1 };
        double[][] doubleArray14 = new double[][] { doubleArray5, doubleArray7, doubleArray9, doubleArray11, doubleArray13 };
        int[] intArray15 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray14, intArray15);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray2, intArray15);
        double[] doubleArray21 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray25 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray29 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray33 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray34 = new double[][] { doubleArray21, doubleArray25, doubleArray29, doubleArray33 };
        double[] doubleArray36 = new double[] { 1 };
        double[] doubleArray38 = new double[] { 1 };
        double[] doubleArray40 = new double[] { 1 };
        double[] doubleArray42 = new double[] { 1 };
        double[] doubleArray44 = new double[] { 1 };
        double[][] doubleArray45 = new double[][] { doubleArray36, doubleArray38, doubleArray40, doubleArray42, doubleArray44 };
        int[] intArray46 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray45, intArray46);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray34, intArray46);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray2, intArray46);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray1, intArray46);
        double[] doubleArray52 = new double[] { 1 };
        double[] doubleArray54 = new double[] { 1 };
        double[] doubleArray56 = new double[] { 1 };
        double[] doubleArray58 = new double[] { 1 };
        double[] doubleArray60 = new double[] { 1 };
        double[][] doubleArray61 = new double[][] { doubleArray52, doubleArray54, doubleArray56, doubleArray58, doubleArray60 };
        int[] intArray62 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray61, intArray62);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray1, intArray62);
        double[][] doubleArray65 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray66 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray67 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray68 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        java.lang.Class<?> wildcardClass69 = doubleArray68.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[]");
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[]");
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertNotNull(wildcardClass69);
    }

    @Test
    public void test3631() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3631");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray30 = new double[][] {};
        double[][] doubleArray31 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        double[][] doubleArray32 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray31);
        double[][] doubleArray33 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray32);
        double[][] doubleArray34 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray32);
        double[][] doubleArray35 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray32);
        double[][] doubleArray36 = new double[][] {};
        double[][] doubleArray37 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray36);
        double[][] doubleArray38 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray36);
        double[] doubleArray45 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray52 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray59 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray66 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray67 = new double[][] { doubleArray45, doubleArray52, doubleArray59, doubleArray66 };
        double[][] doubleArray68 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray67);
        double[][] doubleArray69 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray67);
        double[][] doubleArray70 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray67);
        double[][] doubleArray71 = new double[][] {};
        double[][] doubleArray72 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray71);
        int[] intArray73 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray72, intArray73);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray70, intArray73);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray38, intArray73);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray32, intArray73);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray29, intArray73);
        double[][] doubleArray79 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray29);
        double[][] doubleArray80 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray79);
        double[][] doubleArray81 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray80);
        double[][] doubleArray82 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray80);
        double[][] doubleArray83 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray82);
        double[][] doubleArray84 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray83);
        double[][] doubleArray85 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray83);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray66), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[]");
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertNotNull(doubleArray81);
        org.junit.Assert.assertNotNull(doubleArray82);
        org.junit.Assert.assertNotNull(doubleArray83);
        org.junit.Assert.assertNotNull(doubleArray84);
        org.junit.Assert.assertNotNull(doubleArray85);
    }

    @Test
    public void test3632() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3632");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray30 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray29);
        double[][] doubleArray31 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        double[][] doubleArray32 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        double[][] doubleArray33 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        double[][] doubleArray34 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        double[][] doubleArray35 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray34);
        double[][] doubleArray36 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray35);
        double[][] doubleArray37 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray35);
        double[][] doubleArray38 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray35);
        double[][] doubleArray39 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray38);
        double[][] doubleArray40 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray39);
        double[][] doubleArray41 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray40);
        double[][] doubleArray42 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray41);
        double[][] doubleArray43 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray41);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertNotNull(doubleArray43);
    }

    @Test
    public void test3633() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3633");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray5 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray6 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray7 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray6);
        double[][] doubleArray8 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray7);
        double[][] doubleArray9 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray8);
        double[][] doubleArray10 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray8);
        double[][] doubleArray11 = null;
        double[] doubleArray13 = new double[] { 1 };
        double[] doubleArray15 = new double[] { 1 };
        double[] doubleArray17 = new double[] { 1 };
        double[] doubleArray19 = new double[] { 1 };
        double[] doubleArray21 = new double[] { 1 };
        double[][] doubleArray22 = new double[][] { doubleArray13, doubleArray15, doubleArray17, doubleArray19, doubleArray21 };
        int[] intArray23 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray22, intArray23);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray11, intArray23);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray8, intArray23);
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[]");
    }

    @Test
    public void test3634() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3634");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        int[] intArray2 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray1, intArray2);
        double[] doubleArray5 = new double[] { 1 };
        double[] doubleArray7 = new double[] { 1 };
        double[] doubleArray9 = new double[] { 1 };
        double[] doubleArray11 = new double[] { 1 };
        double[] doubleArray13 = new double[] { 1 };
        double[][] doubleArray14 = new double[][] { doubleArray5, doubleArray7, doubleArray9, doubleArray11, doubleArray13 };
        int[] intArray15 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray14, intArray15);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray1, intArray15);
        double[][] doubleArray18 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray19 = new double[][] {};
        double[][] doubleArray20 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray19);
        double[][] doubleArray21 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray19);
        double[][] doubleArray22 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray19);
        double[] doubleArray29 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray36 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray43 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray50 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray51 = new double[][] { doubleArray29, doubleArray36, doubleArray43, doubleArray50 };
        double[][] doubleArray52 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray51);
        double[][] doubleArray53 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray51);
        double[][] doubleArray54 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray51);
        double[][] doubleArray55 = new double[][] {};
        double[][] doubleArray56 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray55);
        int[] intArray57 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray56, intArray57);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray54, intArray57);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray22, intArray57);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray1, intArray57);
        double[][] doubleArray62 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray63 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray64 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[]");
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertNotNull(doubleArray64);
    }

    @Test
    public void test3635() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3635");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray30 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray29);
        double[][] doubleArray31 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        double[][] doubleArray32 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        double[][] doubleArray33 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        double[][] doubleArray34 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        double[][] doubleArray35 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray34);
        double[][] doubleArray36 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray34);
        double[][] doubleArray37 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray34);
        java.lang.Class<?> wildcardClass38 = doubleArray34.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertNotNull(wildcardClass38);
    }

    @Test
    public void test3636() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3636");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray5 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray6 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray7 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray6);
        double[][] doubleArray8 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray7);
        double[][] doubleArray9 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray7);
        double[][] doubleArray10 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray9);
        double[][] doubleArray11 = null;
        double[][] doubleArray12 = new double[][] {};
        double[][] doubleArray13 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray12);
        int[] intArray14 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray13, intArray14);
        double[][] doubleArray16 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray13);
        double[][] doubleArray17 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray16);
        double[][] doubleArray18 = new double[][] {};
        double[][] doubleArray19 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray18);
        int[] intArray20 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray19, intArray20);
        double[] doubleArray23 = new double[] { 1 };
        double[] doubleArray25 = new double[] { 1 };
        double[] doubleArray27 = new double[] { 1 };
        double[] doubleArray29 = new double[] { 1 };
        double[] doubleArray31 = new double[] { 1 };
        double[][] doubleArray32 = new double[][] { doubleArray23, doubleArray25, doubleArray27, doubleArray29, doubleArray31 };
        int[] intArray33 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray32, intArray33);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray19, intArray33);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray16, intArray33);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray11, intArray33);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray9, intArray33);
        double[][] doubleArray39 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray9);
        double[][] doubleArray40 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray39);
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertNotNull(doubleArray40);
    }

    @Test
    public void test3637() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3637");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[][] doubleArray5 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[][] doubleArray6 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray5);
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray34 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray35 = new double[][] { doubleArray13, doubleArray20, doubleArray27, doubleArray34 };
        double[][] doubleArray36 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray35);
        double[][] doubleArray37 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray36);
        double[][] doubleArray38 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray37);
        double[][] doubleArray39 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray38);
        double[] doubleArray46 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray53 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray60 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray67 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray68 = new double[][] { doubleArray46, doubleArray53, doubleArray60, doubleArray67 };
        double[][] doubleArray69 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray68);
        double[][] doubleArray70 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray69);
        double[][] doubleArray71 = new double[][] {};
        double[][] doubleArray72 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray71);
        double[] doubleArray74 = new double[] { 1 };
        double[] doubleArray76 = new double[] { 1 };
        double[] doubleArray78 = new double[] { 1 };
        double[] doubleArray80 = new double[] { 1 };
        double[] doubleArray82 = new double[] { 1 };
        double[][] doubleArray83 = new double[][] { doubleArray74, doubleArray76, doubleArray78, doubleArray80, doubleArray82 };
        int[] intArray84 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray83, intArray84);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray71, intArray84);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray70, intArray84);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray38, intArray84);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray6, intArray84);
        double[][] doubleArray90 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray6);
        double[][] doubleArray91 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray90);
        double[][] doubleArray92 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray91);
        double[][] doubleArray93 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray92);
        double[][] doubleArray94 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray93);
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray74), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray78), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray80), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray82), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray83);
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray84), "[]");
        org.junit.Assert.assertNotNull(doubleArray90);
        org.junit.Assert.assertNotNull(doubleArray91);
        org.junit.Assert.assertNotNull(doubleArray92);
        org.junit.Assert.assertNotNull(doubleArray93);
        org.junit.Assert.assertNotNull(doubleArray94);
    }

    @Test
    public void test3638() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3638");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[] doubleArray3 = new double[] { 1 };
        double[] doubleArray5 = new double[] { 1 };
        double[] doubleArray7 = new double[] { 1 };
        double[] doubleArray9 = new double[] { 1 };
        double[] doubleArray11 = new double[] { 1 };
        double[][] doubleArray12 = new double[][] { doubleArray3, doubleArray5, doubleArray7, doubleArray9, doubleArray11 };
        int[] intArray13 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray12, intArray13);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray0, intArray13);
        double[] doubleArray19 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray23 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray27 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray31 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray32 = new double[][] { doubleArray19, doubleArray23, doubleArray27, doubleArray31 };
        double[] doubleArray34 = new double[] { 1 };
        double[] doubleArray36 = new double[] { 1 };
        double[] doubleArray38 = new double[] { 1 };
        double[] doubleArray40 = new double[] { 1 };
        double[] doubleArray42 = new double[] { 1 };
        double[][] doubleArray43 = new double[][] { doubleArray34, doubleArray36, doubleArray38, doubleArray40, doubleArray42 };
        int[] intArray44 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray43, intArray44);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray32, intArray44);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray0, intArray44);
        double[] doubleArray49 = new double[] { 1 };
        double[] doubleArray51 = new double[] { 1 };
        double[] doubleArray53 = new double[] { 1 };
        double[] doubleArray55 = new double[] { 1 };
        double[] doubleArray57 = new double[] { 1 };
        double[][] doubleArray58 = new double[][] { doubleArray49, doubleArray51, doubleArray53, doubleArray55, doubleArray57 };
        int[] intArray59 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray58, intArray59);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray0, intArray59);
        double[][] doubleArray62 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray63 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray64 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray63);
        double[][] doubleArray65 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray64);
        double[][] doubleArray66 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray65);
        double[][] doubleArray67 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray65);
        double[][] doubleArray68 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray65);
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[]");
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertNotNull(doubleArray68);
    }

    @Test
    public void test3639() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3639");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[][] doubleArray5 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray4);
        double[][] doubleArray6 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray5);
        double[][] doubleArray7 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray5);
        double[][] doubleArray8 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray7);
        double[][] doubleArray9 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray7);
        double[][] doubleArray10 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray7);
        double[][] doubleArray11 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray10);
        double[] doubleArray18 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray25 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray32 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray39 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray40 = new double[][] { doubleArray18, doubleArray25, doubleArray32, doubleArray39 };
        double[][] doubleArray41 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray40);
        double[][] doubleArray42 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray40);
        double[][] doubleArray43 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray42);
        double[][] doubleArray44 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray42);
        double[][] doubleArray45 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray42);
        double[][] doubleArray46 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray45);
        double[][] doubleArray47 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray46);
        double[][] doubleArray48 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray47);
        double[][] doubleArray49 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray48);
        double[][] doubleArray50 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray48);
        double[][] doubleArray51 = null;
        double[][] doubleArray52 = null;
        double[][] doubleArray53 = new double[][] {};
        double[][] doubleArray54 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray53);
        int[] intArray55 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray54, intArray55);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray52, intArray55);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray51, intArray55);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray48, intArray55);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray11, intArray55);
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[]");
    }

    @Test
    public void test3640() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3640");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray5 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray6 = new double[][] {};
        double[][] doubleArray7 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray6);
        double[][] doubleArray8 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray6);
        double[][] doubleArray9 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray6);
        double[][] doubleArray10 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray9);
        double[] doubleArray17 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray24 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray31 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray38 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray39 = new double[][] { doubleArray17, doubleArray24, doubleArray31, doubleArray38 };
        double[][] doubleArray40 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray39);
        double[][] doubleArray41 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray40);
        double[][] doubleArray42 = new double[][] {};
        double[][] doubleArray43 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray42);
        double[] doubleArray45 = new double[] { 1 };
        double[] doubleArray47 = new double[] { 1 };
        double[] doubleArray49 = new double[] { 1 };
        double[] doubleArray51 = new double[] { 1 };
        double[] doubleArray53 = new double[] { 1 };
        double[][] doubleArray54 = new double[][] { doubleArray45, doubleArray47, doubleArray49, doubleArray51, doubleArray53 };
        int[] intArray55 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray54, intArray55);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray42, intArray55);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray41, intArray55);
        double[][] doubleArray59 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray41);
        double[] doubleArray61 = new double[] { 1 };
        double[] doubleArray63 = new double[] { 1 };
        double[] doubleArray65 = new double[] { 1 };
        double[] doubleArray67 = new double[] { 1 };
        double[] doubleArray69 = new double[] { 1 };
        double[][] doubleArray70 = new double[][] { doubleArray61, doubleArray63, doubleArray65, doubleArray67, doubleArray69 };
        int[] intArray71 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray70, intArray71);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray59, intArray71);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray9, intArray71);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray5, intArray71);
        double[][] doubleArray76 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray5);
        double[][] doubleArray77 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray5);
        double[][] doubleArray78 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray77);
        java.lang.Class<?> wildcardClass79 = doubleArray77.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[]");
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[]");
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertNotNull(wildcardClass79);
    }

    @Test
    public void test3641() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3641");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray5 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray4);
        double[][] doubleArray6 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray5);
        double[][] doubleArray7 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray5);
        double[] doubleArray14 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray21 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray28 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray35 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray36 = new double[][] { doubleArray14, doubleArray21, doubleArray28, doubleArray35 };
        double[][] doubleArray37 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray36);
        double[][] doubleArray38 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray37);
        double[][] doubleArray39 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray38);
        double[][] doubleArray40 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray39);
        double[][] doubleArray41 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray39);
        double[][] doubleArray42 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray41);
        double[][] doubleArray43 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray41);
        double[][] doubleArray44 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray41);
        double[][] doubleArray45 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray41);
        double[][] doubleArray46 = new double[][] {};
        double[][] doubleArray47 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray46);
        double[][] doubleArray48 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray47);
        double[][] doubleArray49 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray47);
        double[][] doubleArray50 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray47);
        double[][] doubleArray51 = new double[][] {};
        double[][] doubleArray52 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray51);
        double[][] doubleArray53 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray51);
        double[][] doubleArray54 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray51);
        double[][] doubleArray55 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray51);
        double[][] doubleArray56 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray55);
        double[][] doubleArray57 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray55);
        double[][] doubleArray58 = new double[][] {};
        double[][] doubleArray59 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray58);
        int[] intArray60 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray59, intArray60);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray57, intArray60);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray47, intArray60);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray45, intArray60);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray5, intArray60);
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[]");
    }

    @Test
    public void test3642() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3642");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = new double[][] {};
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[] doubleArray8 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray12 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray16 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray20 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray21 = new double[][] { doubleArray8, doubleArray12, doubleArray16, doubleArray20 };
        double[] doubleArray23 = new double[] { 1 };
        double[] doubleArray25 = new double[] { 1 };
        double[] doubleArray27 = new double[] { 1 };
        double[] doubleArray29 = new double[] { 1 };
        double[] doubleArray31 = new double[] { 1 };
        double[][] doubleArray32 = new double[][] { doubleArray23, doubleArray25, doubleArray27, doubleArray29, doubleArray31 };
        int[] intArray33 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray32, intArray33);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray21, intArray33);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray3, intArray33);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray1, intArray33);
        double[][] doubleArray38 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray39 = new double[][] {};
        double[][] doubleArray40 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray39);
        double[] doubleArray42 = new double[] { 1 };
        double[] doubleArray44 = new double[] { 1 };
        double[] doubleArray46 = new double[] { 1 };
        double[] doubleArray48 = new double[] { 1 };
        double[] doubleArray50 = new double[] { 1 };
        double[][] doubleArray51 = new double[][] { doubleArray42, doubleArray44, doubleArray46, doubleArray48, doubleArray50 };
        int[] intArray52 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray51, intArray52);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray39, intArray52);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray1, intArray52);
        double[][] doubleArray56 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray57 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray58 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray59 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray58);
        double[][] doubleArray60 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray59);
        double[][] doubleArray61 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray60);
        java.lang.Class<?> wildcardClass62 = doubleArray61.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[]");
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertNotNull(wildcardClass62);
    }

    @Test
    public void test3643() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3643");
        double[][] doubleArray0 = null;
        double[][] doubleArray1 = null;
        double[][] doubleArray2 = new double[][] {};
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[][] doubleArray5 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[][] doubleArray6 = new double[][] {};
        double[][] doubleArray7 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray6);
        double[][] doubleArray8 = new double[][] {};
        double[][] doubleArray9 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray8);
        double[] doubleArray11 = new double[] { 1 };
        double[] doubleArray13 = new double[] { 1 };
        double[] doubleArray15 = new double[] { 1 };
        double[] doubleArray17 = new double[] { 1 };
        double[] doubleArray19 = new double[] { 1 };
        double[][] doubleArray20 = new double[][] { doubleArray11, doubleArray13, doubleArray15, doubleArray17, doubleArray19 };
        int[] intArray21 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray20, intArray21);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray8, intArray21);
        double[] doubleArray27 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray31 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray35 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray39 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray40 = new double[][] { doubleArray27, doubleArray31, doubleArray35, doubleArray39 };
        double[] doubleArray42 = new double[] { 1 };
        double[] doubleArray44 = new double[] { 1 };
        double[] doubleArray46 = new double[] { 1 };
        double[] doubleArray48 = new double[] { 1 };
        double[] doubleArray50 = new double[] { 1 };
        double[][] doubleArray51 = new double[][] { doubleArray42, doubleArray44, doubleArray46, doubleArray48, doubleArray50 };
        int[] intArray52 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray51, intArray52);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray40, intArray52);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray8, intArray52);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray6, intArray52);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray3, intArray52);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray1, intArray52);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray0, intArray52);
        java.lang.Class<?> wildcardClass60 = intArray52.getClass();
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[]");
        org.junit.Assert.assertNotNull(wildcardClass60);
    }

    @Test
    public void test3644() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3644");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[][] doubleArray5 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[][] doubleArray6 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray5);
        double[][] doubleArray7 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray5);
        double[][] doubleArray8 = new double[][] {};
        double[][] doubleArray9 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray8);
        double[][] doubleArray10 = new double[][] {};
        double[][] doubleArray11 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray10);
        double[] doubleArray13 = new double[] { 1 };
        double[] doubleArray15 = new double[] { 1 };
        double[] doubleArray17 = new double[] { 1 };
        double[] doubleArray19 = new double[] { 1 };
        double[] doubleArray21 = new double[] { 1 };
        double[][] doubleArray22 = new double[][] { doubleArray13, doubleArray15, doubleArray17, doubleArray19, doubleArray21 };
        int[] intArray23 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray22, intArray23);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray10, intArray23);
        double[] doubleArray29 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray33 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray37 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray41 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray42 = new double[][] { doubleArray29, doubleArray33, doubleArray37, doubleArray41 };
        double[] doubleArray44 = new double[] { 1 };
        double[] doubleArray46 = new double[] { 1 };
        double[] doubleArray48 = new double[] { 1 };
        double[] doubleArray50 = new double[] { 1 };
        double[] doubleArray52 = new double[] { 1 };
        double[][] doubleArray53 = new double[][] { doubleArray44, doubleArray46, doubleArray48, doubleArray50, doubleArray52 };
        int[] intArray54 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray53, intArray54);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray42, intArray54);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray10, intArray54);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray9, intArray54);
        double[] doubleArray60 = new double[] { 1 };
        double[] doubleArray62 = new double[] { 1 };
        double[] doubleArray64 = new double[] { 1 };
        double[] doubleArray66 = new double[] { 1 };
        double[] doubleArray68 = new double[] { 1 };
        double[][] doubleArray69 = new double[][] { doubleArray60, doubleArray62, doubleArray64, doubleArray66, doubleArray68 };
        int[] intArray70 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray69, intArray70);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray9, intArray70);
        double[][] doubleArray73 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray9);
        double[][] doubleArray74 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray9);
        double[][] doubleArray75 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray74);
        double[][] doubleArray76 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray75);
        double[][] doubleArray77 = null;
        double[] doubleArray79 = new double[] { 1 };
        double[] doubleArray81 = new double[] { 1 };
        double[] doubleArray83 = new double[] { 1 };
        double[] doubleArray85 = new double[] { 1 };
        double[] doubleArray87 = new double[] { 1 };
        double[][] doubleArray88 = new double[][] { doubleArray79, doubleArray81, doubleArray83, doubleArray85, doubleArray87 };
        int[] intArray89 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray88, intArray89);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray77, intArray89);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray76, intArray89);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray7, intArray89);
        double[][] doubleArray94 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray7);
        double[][] doubleArray95 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray94);
        double[][] doubleArray96 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray94);
        java.lang.Class<?> wildcardClass97 = doubleArray96.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[]");
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray66), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[]");
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray79), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray81), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray83), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray85), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray87), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray88);
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray89), "[]");
        org.junit.Assert.assertNotNull(doubleArray94);
        org.junit.Assert.assertNotNull(doubleArray95);
        org.junit.Assert.assertNotNull(doubleArray96);
        org.junit.Assert.assertNotNull(wildcardClass97);
    }

    @Test
    public void test3645() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3645");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray3 = new double[][] {};
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[][] doubleArray5 = new double[][] {};
        double[][] doubleArray6 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray5);
        double[] doubleArray8 = new double[] { 1 };
        double[] doubleArray10 = new double[] { 1 };
        double[] doubleArray12 = new double[] { 1 };
        double[] doubleArray14 = new double[] { 1 };
        double[] doubleArray16 = new double[] { 1 };
        double[][] doubleArray17 = new double[][] { doubleArray8, doubleArray10, doubleArray12, doubleArray14, doubleArray16 };
        int[] intArray18 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray17, intArray18);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray5, intArray18);
        double[] doubleArray24 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray28 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray32 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray36 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray37 = new double[][] { doubleArray24, doubleArray28, doubleArray32, doubleArray36 };
        double[] doubleArray39 = new double[] { 1 };
        double[] doubleArray41 = new double[] { 1 };
        double[] doubleArray43 = new double[] { 1 };
        double[] doubleArray45 = new double[] { 1 };
        double[] doubleArray47 = new double[] { 1 };
        double[][] doubleArray48 = new double[][] { doubleArray39, doubleArray41, doubleArray43, doubleArray45, doubleArray47 };
        int[] intArray49 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray48, intArray49);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray37, intArray49);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray5, intArray49);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray3, intArray49);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray0, intArray49);
        double[][] doubleArray55 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray56 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray57 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray58 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray59 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray58);
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[]");
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[]");
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertNotNull(doubleArray59);
    }

    @Test
    public void test3646() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3646");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray3 = new double[][] {};
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[][] doubleArray5 = new double[][] {};
        double[][] doubleArray6 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray5);
        double[] doubleArray8 = new double[] { 1 };
        double[] doubleArray10 = new double[] { 1 };
        double[] doubleArray12 = new double[] { 1 };
        double[] doubleArray14 = new double[] { 1 };
        double[] doubleArray16 = new double[] { 1 };
        double[][] doubleArray17 = new double[][] { doubleArray8, doubleArray10, doubleArray12, doubleArray14, doubleArray16 };
        int[] intArray18 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray17, intArray18);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray5, intArray18);
        double[] doubleArray24 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray28 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray32 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray36 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray37 = new double[][] { doubleArray24, doubleArray28, doubleArray32, doubleArray36 };
        double[] doubleArray39 = new double[] { 1 };
        double[] doubleArray41 = new double[] { 1 };
        double[] doubleArray43 = new double[] { 1 };
        double[] doubleArray45 = new double[] { 1 };
        double[] doubleArray47 = new double[] { 1 };
        double[][] doubleArray48 = new double[][] { doubleArray39, doubleArray41, doubleArray43, doubleArray45, doubleArray47 };
        int[] intArray49 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray48, intArray49);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray37, intArray49);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray5, intArray49);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray4, intArray49);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray2, intArray49);
        double[][] doubleArray55 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray56 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray55);
        double[][] doubleArray57 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray55);
        double[][] doubleArray58 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray55);
        double[][] doubleArray59 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray55);
        double[][] doubleArray60 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray59);
        java.lang.Class<?> wildcardClass61 = doubleArray59.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[]");
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[]");
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertNotNull(wildcardClass61);
    }

    @Test
    public void test3647() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3647");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray30 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray31 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray32 = new double[][] {};
        double[][] doubleArray33 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray32);
        int[] intArray34 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray33, intArray34);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray31, intArray34);
        double[][] doubleArray37 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray31);
        double[][] doubleArray38 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray37);
        double[][] doubleArray39 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray37);
        double[][] doubleArray40 = null;
        double[][] doubleArray41 = new double[][] {};
        double[][] doubleArray42 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray41);
        double[][] doubleArray43 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray41);
        double[][] doubleArray44 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray41);
        double[][] doubleArray45 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray41);
        double[][] doubleArray46 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray41);
        double[][] doubleArray47 = new double[][] {};
        double[][] doubleArray48 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray47);
        double[][] doubleArray49 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray47);
        double[][] doubleArray50 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray49);
        double[][] doubleArray51 = null;
        double[][] doubleArray52 = new double[][] {};
        double[][] doubleArray53 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray52);
        double[][] doubleArray54 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray53);
        double[] doubleArray58 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray62 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray66 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray70 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray71 = new double[][] { doubleArray58, doubleArray62, doubleArray66, doubleArray70 };
        double[] doubleArray73 = new double[] { 1 };
        double[] doubleArray75 = new double[] { 1 };
        double[] doubleArray77 = new double[] { 1 };
        double[] doubleArray79 = new double[] { 1 };
        double[] doubleArray81 = new double[] { 1 };
        double[][] doubleArray82 = new double[][] { doubleArray73, doubleArray75, doubleArray77, doubleArray79, doubleArray81 };
        int[] intArray83 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray82, intArray83);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray71, intArray83);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray54, intArray83);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray51, intArray83);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray50, intArray83);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray46, intArray83);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray40, intArray83);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray37, intArray83);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray66), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray70), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray73), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray75), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray77), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray79), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray81), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray82);
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray83), "[]");
    }

    @Test
    public void test3648() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3648");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[] doubleArray31 = new double[] { 1 };
        double[] doubleArray33 = new double[] { 1 };
        double[] doubleArray35 = new double[] { 1 };
        double[] doubleArray37 = new double[] { 1 };
        double[] doubleArray39 = new double[] { 1 };
        double[][] doubleArray40 = new double[][] { doubleArray31, doubleArray33, doubleArray35, doubleArray37, doubleArray39 };
        int[] intArray41 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray40, intArray41);
        double[][] doubleArray43 = new double[][] {};
        double[][] doubleArray44 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray43);
        int[] intArray45 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray44, intArray45);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray40, intArray45);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray28, intArray45);
        double[][] doubleArray49 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray50 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray51 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray52 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray51);
        double[][] doubleArray53 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray51);
        double[][] doubleArray54 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray51);
        double[][] doubleArray55 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray54);
        double[][] doubleArray56 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray54);
        double[][] doubleArray57 = null;
        double[] doubleArray59 = new double[] { 1 };
        double[] doubleArray61 = new double[] { 1 };
        double[] doubleArray63 = new double[] { 1 };
        double[] doubleArray65 = new double[] { 1 };
        double[] doubleArray67 = new double[] { 1 };
        double[][] doubleArray68 = new double[][] { doubleArray59, doubleArray61, doubleArray63, doubleArray65, doubleArray67 };
        int[] intArray69 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray68, intArray69);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray57, intArray69);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray54, intArray69);
        double[][] doubleArray73 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray54);
        java.lang.Class<?> wildcardClass74 = doubleArray54.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[]");
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertNotNull(wildcardClass74);
    }

    @Test
    public void test3649() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3649");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[] doubleArray11 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray18 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray25 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray32 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray33 = new double[][] { doubleArray11, doubleArray18, doubleArray25, doubleArray32 };
        double[][] doubleArray34 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray33);
        double[][] doubleArray35 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray33);
        double[][] doubleArray36 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray33);
        double[][] doubleArray37 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray36);
        double[][] doubleArray38 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray37);
        double[] doubleArray45 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray52 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray59 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray66 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray67 = new double[][] { doubleArray45, doubleArray52, doubleArray59, doubleArray66 };
        double[][] doubleArray68 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray67);
        double[][] doubleArray69 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray67);
        double[][] doubleArray70 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray67);
        double[][] doubleArray71 = new double[][] {};
        double[][] doubleArray72 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray71);
        int[] intArray73 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray72, intArray73);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray70, intArray73);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray38, intArray73);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray4, intArray73);
        java.lang.Class<?> wildcardClass78 = doubleArray4.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray66), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[]");
        org.junit.Assert.assertNotNull(wildcardClass78);
    }

    @Test
    public void test3650() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3650");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[][] doubleArray5 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[][] doubleArray6 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray5);
        double[][] doubleArray7 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray6);
        double[][] doubleArray8 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray7);
        double[][] doubleArray9 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray7);
        double[][] doubleArray10 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray7);
        java.lang.Class<?> wildcardClass11 = doubleArray7.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertNotNull(wildcardClass11);
    }

    @Test
    public void test3651() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3651");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[] doubleArray3 = new double[] { 1 };
        double[] doubleArray5 = new double[] { 1 };
        double[] doubleArray7 = new double[] { 1 };
        double[] doubleArray9 = new double[] { 1 };
        double[] doubleArray11 = new double[] { 1 };
        double[][] doubleArray12 = new double[][] { doubleArray3, doubleArray5, doubleArray7, doubleArray9, doubleArray11 };
        int[] intArray13 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray12, intArray13);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray0, intArray13);
        double[][] doubleArray16 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[] doubleArray23 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray30 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray37 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray44 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray45 = new double[][] { doubleArray23, doubleArray30, doubleArray37, doubleArray44 };
        double[][] doubleArray46 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray45);
        double[] doubleArray48 = new double[] { 1 };
        double[] doubleArray50 = new double[] { 1 };
        double[] doubleArray52 = new double[] { 1 };
        double[] doubleArray54 = new double[] { 1 };
        double[] doubleArray56 = new double[] { 1 };
        double[][] doubleArray57 = new double[][] { doubleArray48, doubleArray50, doubleArray52, doubleArray54, doubleArray56 };
        int[] intArray58 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray57, intArray58);
        double[][] doubleArray60 = new double[][] {};
        double[][] doubleArray61 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray60);
        int[] intArray62 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray61, intArray62);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray57, intArray62);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray45, intArray62);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray16, intArray62);
        double[][] doubleArray67 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray16);
        double[][] doubleArray68 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray16);
        double[][] doubleArray69 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray16);
        double[][] doubleArray70 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray69);
        java.lang.Class<?> wildcardClass71 = doubleArray70.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[]");
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[]");
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertNotNull(wildcardClass71);
    }

    @Test
    public void test3652() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3652");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[] doubleArray6 = new double[] { 1 };
        double[] doubleArray8 = new double[] { 1 };
        double[] doubleArray10 = new double[] { 1 };
        double[] doubleArray12 = new double[] { 1 };
        double[] doubleArray14 = new double[] { 1 };
        double[][] doubleArray15 = new double[][] { doubleArray6, doubleArray8, doubleArray10, doubleArray12, doubleArray14 };
        int[] intArray16 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray15, intArray16);
        double[][] doubleArray18 = new double[][] {};
        double[][] doubleArray19 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray18);
        int[] intArray20 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray19, intArray20);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray15, intArray20);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray3, intArray20);
        double[][] doubleArray24 = new double[][] {};
        double[][] doubleArray25 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray24);
        double[][] doubleArray26 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray25);
        double[] doubleArray30 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray34 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray38 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray42 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray43 = new double[][] { doubleArray30, doubleArray34, doubleArray38, doubleArray42 };
        double[] doubleArray45 = new double[] { 1 };
        double[] doubleArray47 = new double[] { 1 };
        double[] doubleArray49 = new double[] { 1 };
        double[] doubleArray51 = new double[] { 1 };
        double[] doubleArray53 = new double[] { 1 };
        double[][] doubleArray54 = new double[][] { doubleArray45, doubleArray47, doubleArray49, doubleArray51, doubleArray53 };
        int[] intArray55 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray54, intArray55);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray43, intArray55);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray25, intArray55);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray3, intArray55);
        double[][] doubleArray60 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[][] doubleArray61 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray60);
        double[][] doubleArray62 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray60);
        double[][] doubleArray63 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray60);
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[]");
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[]");
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertNotNull(doubleArray63);
    }

    @Test
    public void test3653() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3653");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[] doubleArray31 = new double[] { 1 };
        double[] doubleArray33 = new double[] { 1 };
        double[] doubleArray35 = new double[] { 1 };
        double[] doubleArray37 = new double[] { 1 };
        double[] doubleArray39 = new double[] { 1 };
        double[][] doubleArray40 = new double[][] { doubleArray31, doubleArray33, doubleArray35, doubleArray37, doubleArray39 };
        int[] intArray41 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray40, intArray41);
        double[][] doubleArray43 = new double[][] {};
        double[][] doubleArray44 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray43);
        int[] intArray45 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray44, intArray45);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray40, intArray45);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray28, intArray45);
        double[][] doubleArray49 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray50 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray49);
        double[][] doubleArray51 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray50);
        double[][] doubleArray52 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray51);
        double[][] doubleArray53 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray52);
        double[][] doubleArray54 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray52);
        double[][] doubleArray55 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray52);
        double[][] doubleArray56 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray52);
        double[][] doubleArray57 = null;
        double[][] doubleArray58 = new double[][] {};
        double[][] doubleArray59 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray58);
        double[][] doubleArray60 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray58);
        double[][] doubleArray61 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray60);
        double[][] doubleArray62 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray60);
        double[][] doubleArray63 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray62);
        double[][] doubleArray64 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray63);
        double[][] doubleArray65 = new double[][] {};
        double[][] doubleArray66 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray65);
        int[] intArray67 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray66, intArray67);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray64, intArray67);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray57, intArray67);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray56, intArray67);
        double[][] doubleArray72 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray56);
        int[] intArray73 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray72, intArray73);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[]");
        org.junit.Assert.assertNotNull(doubleArray72);
    }

    @Test
    public void test3654() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3654");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[][] doubleArray5 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray4);
        double[][] doubleArray6 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray5);
        double[][] doubleArray7 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray6);
        double[][] doubleArray8 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray7);
        double[][] doubleArray9 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray7);
        double[][] doubleArray10 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray9);
        java.lang.Class<?> wildcardClass11 = doubleArray10.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertNotNull(wildcardClass11);
    }

    @Test
    public void test3655() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3655");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray30 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray31 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray32 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray31);
        double[][] doubleArray33 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray32);
        double[][] doubleArray34 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray32);
        double[][] doubleArray35 = new double[][] {};
        double[][] doubleArray36 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray35);
        double[][] doubleArray37 = new double[][] {};
        double[][] doubleArray38 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray37);
        double[][] doubleArray39 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray38);
        double[][] doubleArray40 = new double[][] {};
        double[][] doubleArray41 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray40);
        double[][] doubleArray42 = new double[][] {};
        double[][] doubleArray43 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray42);
        double[] doubleArray45 = new double[] { 1 };
        double[] doubleArray47 = new double[] { 1 };
        double[] doubleArray49 = new double[] { 1 };
        double[] doubleArray51 = new double[] { 1 };
        double[] doubleArray53 = new double[] { 1 };
        double[][] doubleArray54 = new double[][] { doubleArray45, doubleArray47, doubleArray49, doubleArray51, doubleArray53 };
        int[] intArray55 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray54, intArray55);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray42, intArray55);
        double[] doubleArray61 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray65 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray69 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray73 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray74 = new double[][] { doubleArray61, doubleArray65, doubleArray69, doubleArray73 };
        double[] doubleArray76 = new double[] { 1 };
        double[] doubleArray78 = new double[] { 1 };
        double[] doubleArray80 = new double[] { 1 };
        double[] doubleArray82 = new double[] { 1 };
        double[] doubleArray84 = new double[] { 1 };
        double[][] doubleArray85 = new double[][] { doubleArray76, doubleArray78, doubleArray80, doubleArray82, doubleArray84 };
        int[] intArray86 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray85, intArray86);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray74, intArray86);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray42, intArray86);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray41, intArray86);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray39, intArray86);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray36, intArray86);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray34, intArray86);
        double[][] doubleArray94 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray34);
        double[][] doubleArray95 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray94);
        double[][] doubleArray96 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray95);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray73), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray78), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray80), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray82), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray84), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray85);
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray86), "[]");
        org.junit.Assert.assertNotNull(doubleArray94);
        org.junit.Assert.assertNotNull(doubleArray95);
        org.junit.Assert.assertNotNull(doubleArray96);
    }

    @Test
    public void test3656() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3656");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray30 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray29);
        double[][] doubleArray31 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        double[][] doubleArray32 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray31);
        double[][] doubleArray33 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray31);
        double[][] doubleArray34 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray31);
        double[][] doubleArray35 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray31);
        double[][] doubleArray36 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray35);
        double[][] doubleArray37 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray35);
        double[][] doubleArray38 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray35);
        double[][] doubleArray39 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray35);
        double[][] doubleArray40 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray35);
        double[][] doubleArray41 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray40);
        double[][] doubleArray42 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray41);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertNotNull(doubleArray42);
    }

    @Test
    public void test3657() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3657");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[][] doubleArray5 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray4);
        double[][] doubleArray6 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray5);
        double[][] doubleArray7 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray6);
        double[][] doubleArray8 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray7);
        double[][] doubleArray9 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray7);
        double[][] doubleArray10 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray9);
        double[][] doubleArray11 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray9);
        java.lang.Class<?> wildcardClass12 = doubleArray9.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertNotNull(wildcardClass12);
    }

    @Test
    public void test3658() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3658");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray30 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray29);
        double[][] doubleArray31 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        double[][] doubleArray32 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray31);
        double[][] doubleArray33 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray32);
        double[][] doubleArray34 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray33);
        double[][] doubleArray35 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray33);
        double[][] doubleArray36 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray35);
        double[][] doubleArray37 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray36);
        double[][] doubleArray38 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray36);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertNotNull(doubleArray38);
    }

    @Test
    public void test3659() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3659");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[] doubleArray6 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray10 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray14 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray18 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray19 = new double[][] { doubleArray6, doubleArray10, doubleArray14, doubleArray18 };
        double[] doubleArray21 = new double[] { 1 };
        double[] doubleArray23 = new double[] { 1 };
        double[] doubleArray25 = new double[] { 1 };
        double[] doubleArray27 = new double[] { 1 };
        double[] doubleArray29 = new double[] { 1 };
        double[][] doubleArray30 = new double[][] { doubleArray21, doubleArray23, doubleArray25, doubleArray27, doubleArray29 };
        int[] intArray31 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray30, intArray31);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray19, intArray31);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray2, intArray31);
        double[][] doubleArray35 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray36 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray37 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray36);
        double[][] doubleArray38 = new double[][] {};
        double[][] doubleArray39 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray38);
        double[][] doubleArray40 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray38);
        double[][] doubleArray41 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray40);
        double[][] doubleArray42 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray41);
        double[][] doubleArray43 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray41);
        double[][] doubleArray44 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray43);
        double[][] doubleArray45 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray43);
        double[][] doubleArray46 = null;
        double[][] doubleArray47 = new double[][] {};
        double[][] doubleArray48 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray47);
        double[][] doubleArray49 = new double[][] {};
        double[][] doubleArray50 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray49);
        double[][] doubleArray51 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray50);
        double[] doubleArray55 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray59 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray63 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray67 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray68 = new double[][] { doubleArray55, doubleArray59, doubleArray63, doubleArray67 };
        double[] doubleArray70 = new double[] { 1 };
        double[] doubleArray72 = new double[] { 1 };
        double[] doubleArray74 = new double[] { 1 };
        double[] doubleArray76 = new double[] { 1 };
        double[] doubleArray78 = new double[] { 1 };
        double[][] doubleArray79 = new double[][] { doubleArray70, doubleArray72, doubleArray74, doubleArray76, doubleArray78 };
        int[] intArray80 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray79, intArray80);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray68, intArray80);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray50, intArray80);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray48, intArray80);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray46, intArray80);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray45, intArray80);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray36, intArray80);
        double[][] doubleArray88 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray36);
        double[][] doubleArray89 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray36);
        java.lang.Class<?> wildcardClass90 = doubleArray89.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray70), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray74), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray78), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[]");
        org.junit.Assert.assertNotNull(doubleArray88);
        org.junit.Assert.assertNotNull(doubleArray89);
        org.junit.Assert.assertNotNull(wildcardClass90);
    }

    @Test
    public void test3660() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3660");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[][] doubleArray5 = null;
        double[][] doubleArray6 = new double[][] {};
        double[][] doubleArray7 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray6);
        double[][] doubleArray8 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray7);
        double[] doubleArray12 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray16 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray20 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray24 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray25 = new double[][] { doubleArray12, doubleArray16, doubleArray20, doubleArray24 };
        double[] doubleArray27 = new double[] { 1 };
        double[] doubleArray29 = new double[] { 1 };
        double[] doubleArray31 = new double[] { 1 };
        double[] doubleArray33 = new double[] { 1 };
        double[] doubleArray35 = new double[] { 1 };
        double[][] doubleArray36 = new double[][] { doubleArray27, doubleArray29, doubleArray31, doubleArray33, doubleArray35 };
        int[] intArray37 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray36, intArray37);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray25, intArray37);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray8, intArray37);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray5, intArray37);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray3, intArray37);
        double[][] doubleArray43 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[][] doubleArray44 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray43);
        double[][] doubleArray45 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray44);
        double[][] doubleArray46 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray45);
        double[][] doubleArray47 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray45);
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertNotNull(doubleArray47);
    }

    @Test
    public void test3661() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3661");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray5 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray4);
        double[][] doubleArray6 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray4);
        double[][] doubleArray7 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray6);
        double[][] doubleArray8 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray6);
        double[][] doubleArray9 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray8);
        double[][] doubleArray10 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray8);
        double[][] doubleArray11 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray10);
        double[][] doubleArray12 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray10);
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertNotNull(doubleArray12);
    }

    @Test
    public void test3662() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3662");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray30 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray29);
        double[][] doubleArray31 = new double[][] {};
        double[][] doubleArray32 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray31);
        double[] doubleArray34 = new double[] { 1 };
        double[] doubleArray36 = new double[] { 1 };
        double[] doubleArray38 = new double[] { 1 };
        double[] doubleArray40 = new double[] { 1 };
        double[] doubleArray42 = new double[] { 1 };
        double[][] doubleArray43 = new double[][] { doubleArray34, doubleArray36, doubleArray38, doubleArray40, doubleArray42 };
        int[] intArray44 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray43, intArray44);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray31, intArray44);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray30, intArray44);
        double[][] doubleArray48 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        double[][] doubleArray49 = new double[][] {};
        double[][] doubleArray50 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray49);
        int[] intArray51 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray50, intArray51);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray48, intArray51);
        double[][] doubleArray54 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray48);
        double[][] doubleArray55 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray54);
        double[][] doubleArray56 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray54);
        double[][] doubleArray57 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray54);
        double[][] doubleArray58 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray57);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[]");
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertNotNull(doubleArray58);
    }

    @Test
    public void test3663() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3663");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[][] doubleArray5 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray4);
        double[][] doubleArray6 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray4);
        double[][] doubleArray7 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray6);
        double[][] doubleArray8 = new double[][] {};
        double[][] doubleArray9 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray8);
        double[][] doubleArray10 = new double[][] {};
        double[][] doubleArray11 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray10);
        double[][] doubleArray12 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray11);
        double[] doubleArray16 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray20 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray24 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray28 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray29 = new double[][] { doubleArray16, doubleArray20, doubleArray24, doubleArray28 };
        double[] doubleArray31 = new double[] { 1 };
        double[] doubleArray33 = new double[] { 1 };
        double[] doubleArray35 = new double[] { 1 };
        double[] doubleArray37 = new double[] { 1 };
        double[] doubleArray39 = new double[] { 1 };
        double[][] doubleArray40 = new double[][] { doubleArray31, doubleArray33, doubleArray35, doubleArray37, doubleArray39 };
        int[] intArray41 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray40, intArray41);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray29, intArray41);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray11, intArray41);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray9, intArray41);
        double[][] doubleArray46 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray9);
        double[][] doubleArray47 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray46);
        double[][] doubleArray48 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray46);
        double[][] doubleArray49 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray46);
        double[][] doubleArray50 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray46);
        double[][] doubleArray51 = new double[][] {};
        double[][] doubleArray52 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray51);
        int[] intArray53 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray52, intArray53);
        double[] doubleArray56 = new double[] { 1 };
        double[] doubleArray58 = new double[] { 1 };
        double[] doubleArray60 = new double[] { 1 };
        double[] doubleArray62 = new double[] { 1 };
        double[] doubleArray64 = new double[] { 1 };
        double[][] doubleArray65 = new double[][] { doubleArray56, doubleArray58, doubleArray60, doubleArray62, doubleArray64 };
        int[] intArray66 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray65, intArray66);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray52, intArray66);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray50, intArray66);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray7, intArray66);
        java.lang.Class<?> wildcardClass71 = intArray66.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[]");
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[]");
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[]");
        org.junit.Assert.assertNotNull(wildcardClass71);
    }

    @Test
    public void test3664() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3664");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray30 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray29);
        double[][] doubleArray31 = new double[][] {};
        double[][] doubleArray32 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray31);
        double[] doubleArray34 = new double[] { 1 };
        double[] doubleArray36 = new double[] { 1 };
        double[] doubleArray38 = new double[] { 1 };
        double[] doubleArray40 = new double[] { 1 };
        double[] doubleArray42 = new double[] { 1 };
        double[][] doubleArray43 = new double[][] { doubleArray34, doubleArray36, doubleArray38, doubleArray40, doubleArray42 };
        int[] intArray44 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray43, intArray44);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray31, intArray44);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray30, intArray44);
        double[][] doubleArray48 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        double[][] doubleArray49 = new double[][] {};
        double[][] doubleArray50 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray49);
        int[] intArray51 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray50, intArray51);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray48, intArray51);
        double[][] doubleArray54 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray48);
        double[][] doubleArray55 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray54);
        double[][] doubleArray56 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray55);
        double[][] doubleArray57 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray56);
        double[][] doubleArray58 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray56);
        double[][] doubleArray59 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray58);
        double[][] doubleArray60 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray58);
        java.lang.Class<?> wildcardClass61 = doubleArray58.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[]");
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertNotNull(wildcardClass61);
    }

    @Test
    public void test3665() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3665");
        double[][] doubleArray0 = null;
        double[][] doubleArray1 = new double[][] {};
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[][] doubleArray5 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray4);
        double[][] doubleArray6 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray5);
        double[][] doubleArray7 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray6);
        double[][] doubleArray8 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray6);
        double[][] doubleArray9 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray8);
        double[][] doubleArray10 = new double[][] {};
        double[][] doubleArray11 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray10);
        double[][] doubleArray12 = new double[][] {};
        double[][] doubleArray13 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray12);
        double[][] doubleArray14 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray13);
        double[] doubleArray18 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray22 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray26 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray30 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray31 = new double[][] { doubleArray18, doubleArray22, doubleArray26, doubleArray30 };
        double[] doubleArray33 = new double[] { 1 };
        double[] doubleArray35 = new double[] { 1 };
        double[] doubleArray37 = new double[] { 1 };
        double[] doubleArray39 = new double[] { 1 };
        double[] doubleArray41 = new double[] { 1 };
        double[][] doubleArray42 = new double[][] { doubleArray33, doubleArray35, doubleArray37, doubleArray39, doubleArray41 };
        int[] intArray43 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray42, intArray43);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray31, intArray43);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray13, intArray43);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray11, intArray43);
        double[][] doubleArray48 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray11);
        double[][] doubleArray49 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray48);
        double[][] doubleArray50 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray48);
        double[][] doubleArray51 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray48);
        double[][] doubleArray52 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray48);
        double[][] doubleArray53 = new double[][] {};
        double[][] doubleArray54 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray53);
        int[] intArray55 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray54, intArray55);
        double[] doubleArray58 = new double[] { 1 };
        double[] doubleArray60 = new double[] { 1 };
        double[] doubleArray62 = new double[] { 1 };
        double[] doubleArray64 = new double[] { 1 };
        double[] doubleArray66 = new double[] { 1 };
        double[][] doubleArray67 = new double[][] { doubleArray58, doubleArray60, doubleArray62, doubleArray64, doubleArray66 };
        int[] intArray68 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray67, intArray68);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray54, intArray68);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray52, intArray68);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray9, intArray68);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray0, intArray68);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[]");
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray66), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[]");
    }

    @Test
    public void test3666() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3666");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray5 = new double[][] {};
        double[][] doubleArray6 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray5);
        double[][] doubleArray7 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray6);
        double[] doubleArray11 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray15 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray19 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray23 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray24 = new double[][] { doubleArray11, doubleArray15, doubleArray19, doubleArray23 };
        double[] doubleArray26 = new double[] { 1 };
        double[] doubleArray28 = new double[] { 1 };
        double[] doubleArray30 = new double[] { 1 };
        double[] doubleArray32 = new double[] { 1 };
        double[] doubleArray34 = new double[] { 1 };
        double[][] doubleArray35 = new double[][] { doubleArray26, doubleArray28, doubleArray30, doubleArray32, doubleArray34 };
        int[] intArray36 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray35, intArray36);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray24, intArray36);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray7, intArray36);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray0, intArray36);
        double[][] doubleArray41 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray42 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray41);
        double[][] doubleArray43 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray42);
        double[][] doubleArray44 = new double[][] {};
        double[][] doubleArray45 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray44);
        double[][] doubleArray46 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray45);
        double[][] doubleArray47 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray46);
        double[][] doubleArray48 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray46);
        double[][] doubleArray49 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray46);
        double[][] doubleArray50 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray46);
        double[] doubleArray57 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray64 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray71 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray78 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray79 = new double[][] { doubleArray57, doubleArray64, doubleArray71, doubleArray78 };
        double[][] doubleArray80 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray79);
        double[][] doubleArray81 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray79);
        double[][] doubleArray82 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray79);
        double[][] doubleArray83 = new double[][] {};
        double[][] doubleArray84 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray83);
        int[] intArray85 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray84, intArray85);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray82, intArray85);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray50, intArray85);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray42, intArray85);
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray71), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray78), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertNotNull(doubleArray81);
        org.junit.Assert.assertNotNull(doubleArray82);
        org.junit.Assert.assertNotNull(doubleArray83);
        org.junit.Assert.assertNotNull(doubleArray84);
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray85), "[]");
    }

    @Test
    public void test3667() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3667");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[] doubleArray3 = new double[] { 1 };
        double[] doubleArray5 = new double[] { 1 };
        double[] doubleArray7 = new double[] { 1 };
        double[] doubleArray9 = new double[] { 1 };
        double[] doubleArray11 = new double[] { 1 };
        double[][] doubleArray12 = new double[][] { doubleArray3, doubleArray5, doubleArray7, doubleArray9, doubleArray11 };
        int[] intArray13 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray12, intArray13);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray0, intArray13);
        double[][] doubleArray16 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray17 = new double[][] {};
        double[][] doubleArray18 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray17);
        double[][] doubleArray19 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray17);
        double[][] doubleArray20 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray17);
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray34 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray41 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray48 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray49 = new double[][] { doubleArray27, doubleArray34, doubleArray41, doubleArray48 };
        double[][] doubleArray50 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray49);
        double[][] doubleArray51 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray50);
        double[][] doubleArray52 = new double[][] {};
        double[][] doubleArray53 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray52);
        double[] doubleArray55 = new double[] { 1 };
        double[] doubleArray57 = new double[] { 1 };
        double[] doubleArray59 = new double[] { 1 };
        double[] doubleArray61 = new double[] { 1 };
        double[] doubleArray63 = new double[] { 1 };
        double[][] doubleArray64 = new double[][] { doubleArray55, doubleArray57, doubleArray59, doubleArray61, doubleArray63 };
        int[] intArray65 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray64, intArray65);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray52, intArray65);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray51, intArray65);
        double[][] doubleArray69 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray51);
        double[] doubleArray71 = new double[] { 1 };
        double[] doubleArray73 = new double[] { 1 };
        double[] doubleArray75 = new double[] { 1 };
        double[] doubleArray77 = new double[] { 1 };
        double[] doubleArray79 = new double[] { 1 };
        double[][] doubleArray80 = new double[][] { doubleArray71, doubleArray73, doubleArray75, doubleArray77, doubleArray79 };
        int[] intArray81 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray80, intArray81);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray69, intArray81);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray17, intArray81);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray16, intArray81);
        double[][] doubleArray86 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray16);
        double[][] doubleArray87 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray86);
        double[][] doubleArray88 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray87);
        double[][] doubleArray89 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray87);
        double[][] doubleArray90 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray89);
        double[][] doubleArray91 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray90);
        double[][] doubleArray92 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray90);
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[]");
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray71), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray73), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray75), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray77), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray79), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray81), "[]");
        org.junit.Assert.assertNotNull(doubleArray86);
        org.junit.Assert.assertNotNull(doubleArray87);
        org.junit.Assert.assertNotNull(doubleArray88);
        org.junit.Assert.assertNotNull(doubleArray89);
        org.junit.Assert.assertNotNull(doubleArray90);
        org.junit.Assert.assertNotNull(doubleArray91);
        org.junit.Assert.assertNotNull(doubleArray92);
    }

    @Test
    public void test3668() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3668");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[][] doubleArray5 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[][] doubleArray6 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[][] doubleArray7 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[][] doubleArray8 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray7);
        double[][] doubleArray9 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray7);
        double[][] doubleArray10 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray7);
        double[][] doubleArray11 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray7);
        double[][] doubleArray12 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray7);
        double[][] doubleArray13 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray12);
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertNotNull(doubleArray13);
    }

    @Test
    public void test3669() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3669");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[][] doubleArray5 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray4);
        double[][] doubleArray6 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray5);
        double[][] doubleArray7 = new double[][] {};
        double[][] doubleArray8 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray7);
        double[][] doubleArray9 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray7);
        double[][] doubleArray10 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray7);
        double[][] doubleArray11 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray7);
        double[][] doubleArray12 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray11);
        double[][] doubleArray13 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray11);
        double[][] doubleArray14 = new double[][] {};
        double[][] doubleArray15 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray14);
        int[] intArray16 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray15, intArray16);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray13, intArray16);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray6, intArray16);
        java.lang.Class<?> wildcardClass20 = intArray16.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[]");
        org.junit.Assert.assertNotNull(wildcardClass20);
    }

    @Test
    public void test3670() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3670");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[] doubleArray9 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray16 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray23 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray30 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray31 = new double[][] { doubleArray9, doubleArray16, doubleArray23, doubleArray30 };
        double[][] doubleArray32 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray31);
        double[] doubleArray34 = new double[] { 1 };
        double[] doubleArray36 = new double[] { 1 };
        double[] doubleArray38 = new double[] { 1 };
        double[] doubleArray40 = new double[] { 1 };
        double[] doubleArray42 = new double[] { 1 };
        double[][] doubleArray43 = new double[][] { doubleArray34, doubleArray36, doubleArray38, doubleArray40, doubleArray42 };
        int[] intArray44 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray43, intArray44);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray32, intArray44);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray1, intArray44);
        double[][] doubleArray48 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray49 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray50 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray51 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray50);
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertNotNull(doubleArray51);
    }

    @Test
    public void test3671() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3671");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        int[] intArray2 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray1, intArray2);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[] doubleArray11 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray18 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray25 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray32 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray33 = new double[][] { doubleArray11, doubleArray18, doubleArray25, doubleArray32 };
        double[][] doubleArray34 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray33);
        double[] doubleArray41 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray48 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray55 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray62 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray63 = new double[][] { doubleArray41, doubleArray48, doubleArray55, doubleArray62 };
        double[][] doubleArray64 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray63);
        double[][] doubleArray65 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray63);
        double[][] doubleArray66 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray63);
        double[][] doubleArray67 = new double[][] {};
        double[][] doubleArray68 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray67);
        int[] intArray69 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray68, intArray69);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray66, intArray69);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray34, intArray69);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray4, intArray69);
        double[][] doubleArray74 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray4);
        double[][] doubleArray75 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray74);
        double[][] doubleArray76 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray74);
        double[][] doubleArray77 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray76);
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[]");
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertNotNull(doubleArray77);
    }

    @Test
    public void test3672() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3672");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        int[] intArray2 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray1, intArray2);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray5 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray6 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray5);
        double[][] doubleArray7 = null;
        double[][] doubleArray8 = new double[][] {};
        double[][] doubleArray9 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray8);
        double[][] doubleArray10 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray9);
        double[][] doubleArray11 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray10);
        double[][] doubleArray12 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray11);
        double[][] doubleArray13 = new double[][] {};
        double[][] doubleArray14 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray13);
        double[][] doubleArray15 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray14);
        double[][] doubleArray16 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray15);
        double[][] doubleArray17 = new double[][] {};
        double[][] doubleArray18 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray17);
        double[] doubleArray20 = new double[] { 1 };
        double[] doubleArray22 = new double[] { 1 };
        double[] doubleArray24 = new double[] { 1 };
        double[] doubleArray26 = new double[] { 1 };
        double[] doubleArray28 = new double[] { 1 };
        double[][] doubleArray29 = new double[][] { doubleArray20, doubleArray22, doubleArray24, doubleArray26, doubleArray28 };
        int[] intArray30 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray29, intArray30);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray17, intArray30);
        double[] doubleArray36 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray40 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray44 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray48 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray49 = new double[][] { doubleArray36, doubleArray40, doubleArray44, doubleArray48 };
        double[] doubleArray51 = new double[] { 1 };
        double[] doubleArray53 = new double[] { 1 };
        double[] doubleArray55 = new double[] { 1 };
        double[] doubleArray57 = new double[] { 1 };
        double[] doubleArray59 = new double[] { 1 };
        double[][] doubleArray60 = new double[][] { doubleArray51, doubleArray53, doubleArray55, doubleArray57, doubleArray59 };
        int[] intArray61 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray60, intArray61);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray49, intArray61);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray17, intArray61);
        double[] doubleArray66 = new double[] { 1 };
        double[] doubleArray68 = new double[] { 1 };
        double[] doubleArray70 = new double[] { 1 };
        double[] doubleArray72 = new double[] { 1 };
        double[] doubleArray74 = new double[] { 1 };
        double[][] doubleArray75 = new double[][] { doubleArray66, doubleArray68, doubleArray70, doubleArray72, doubleArray74 };
        int[] intArray76 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray75, intArray76);
        double[][] doubleArray78 = new double[][] {};
        double[][] doubleArray79 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray78);
        int[] intArray80 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray79, intArray80);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray75, intArray80);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray17, intArray80);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray16, intArray80);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray11, intArray80);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray7, intArray80);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray5, intArray80);
        java.lang.Class<?> wildcardClass88 = doubleArray5.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[]");
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray66), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray70), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray74), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[]");
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[]");
        org.junit.Assert.assertNotNull(wildcardClass88);
    }

    @Test
    public void test3673() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3673");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = new double[][] {};
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[] doubleArray8 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray12 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray16 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray20 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray21 = new double[][] { doubleArray8, doubleArray12, doubleArray16, doubleArray20 };
        double[] doubleArray23 = new double[] { 1 };
        double[] doubleArray25 = new double[] { 1 };
        double[] doubleArray27 = new double[] { 1 };
        double[] doubleArray29 = new double[] { 1 };
        double[] doubleArray31 = new double[] { 1 };
        double[][] doubleArray32 = new double[][] { doubleArray23, doubleArray25, doubleArray27, doubleArray29, doubleArray31 };
        int[] intArray33 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray32, intArray33);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray21, intArray33);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray3, intArray33);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray1, intArray33);
        double[][] doubleArray38 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray39 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray38);
        double[][] doubleArray40 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray39);
        double[][] doubleArray41 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray39);
        double[][] doubleArray42 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray41);
        double[][] doubleArray43 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray41);
        double[][] doubleArray44 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray41);
        double[][] doubleArray45 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray44);
        double[][] doubleArray46 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray44);
        java.lang.Class<?> wildcardClass47 = doubleArray44.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertNotNull(wildcardClass47);
    }

    @Test
    public void test3674() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3674");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray4 = null;
        double[][] doubleArray5 = new double[][] {};
        double[][] doubleArray6 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray5);
        double[][] doubleArray7 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray6);
        double[] doubleArray11 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray15 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray19 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray23 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray24 = new double[][] { doubleArray11, doubleArray15, doubleArray19, doubleArray23 };
        double[] doubleArray26 = new double[] { 1 };
        double[] doubleArray28 = new double[] { 1 };
        double[] doubleArray30 = new double[] { 1 };
        double[] doubleArray32 = new double[] { 1 };
        double[] doubleArray34 = new double[] { 1 };
        double[][] doubleArray35 = new double[][] { doubleArray26, doubleArray28, doubleArray30, doubleArray32, doubleArray34 };
        int[] intArray36 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray35, intArray36);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray24, intArray36);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray7, intArray36);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray4, intArray36);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray3, intArray36);
        double[][] doubleArray42 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[][] doubleArray43 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[][] doubleArray44 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[][] doubleArray45 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        java.lang.Class<?> wildcardClass46 = doubleArray45.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertNotNull(wildcardClass46);
    }

    @Test
    public void test3675() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3675");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        int[] intArray2 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray1, intArray2);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray5 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray6 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray5);
        double[][] doubleArray7 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray5);
        double[][] doubleArray8 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray7);
        double[][] doubleArray9 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray7);
        java.lang.Class<?> wildcardClass10 = doubleArray7.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertNotNull(wildcardClass10);
    }

    @Test
    public void test3676() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3676");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray30 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray29);
        double[][] doubleArray31 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray29);
        double[] doubleArray38 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray45 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray52 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray59 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray60 = new double[][] { doubleArray38, doubleArray45, doubleArray52, doubleArray59 };
        double[][] doubleArray61 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray60);
        double[][] doubleArray62 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray61);
        double[][] doubleArray63 = new double[][] {};
        double[][] doubleArray64 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray63);
        double[] doubleArray66 = new double[] { 1 };
        double[] doubleArray68 = new double[] { 1 };
        double[] doubleArray70 = new double[] { 1 };
        double[] doubleArray72 = new double[] { 1 };
        double[] doubleArray74 = new double[] { 1 };
        double[][] doubleArray75 = new double[][] { doubleArray66, doubleArray68, doubleArray70, doubleArray72, doubleArray74 };
        int[] intArray76 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray75, intArray76);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray63, intArray76);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray62, intArray76);
        double[][] doubleArray80 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray62);
        double[][] doubleArray81 = new double[][] {};
        double[][] doubleArray82 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray81);
        int[] intArray83 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray82, intArray83);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray80, intArray83);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray31, intArray83);
        double[][] doubleArray87 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray31);
        double[][] doubleArray88 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray87);
        double[][] doubleArray89 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray88);
        double[][] doubleArray90 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray88);
        double[][] doubleArray91 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray90);
        java.lang.Class<?> wildcardClass92 = doubleArray90.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray66), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray70), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray74), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[]");
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertNotNull(doubleArray81);
        org.junit.Assert.assertNotNull(doubleArray82);
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray83), "[]");
        org.junit.Assert.assertNotNull(doubleArray87);
        org.junit.Assert.assertNotNull(doubleArray88);
        org.junit.Assert.assertNotNull(doubleArray89);
        org.junit.Assert.assertNotNull(doubleArray90);
        org.junit.Assert.assertNotNull(doubleArray91);
        org.junit.Assert.assertNotNull(wildcardClass92);
    }

    @Test
    public void test3677() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3677");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        int[] intArray2 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray1, intArray2);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray5 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray4);
        double[][] doubleArray6 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray4);
        double[][] doubleArray7 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray6);
        double[][] doubleArray8 = new double[][] {};
        double[][] doubleArray9 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray8);
        double[][] doubleArray10 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray8);
        double[][] doubleArray11 = new double[][] {};
        double[][] doubleArray12 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray11);
        double[][] doubleArray13 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray12);
        double[][] doubleArray14 = new double[][] {};
        double[][] doubleArray15 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray14);
        double[][] doubleArray16 = new double[][] {};
        double[][] doubleArray17 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray16);
        double[] doubleArray19 = new double[] { 1 };
        double[] doubleArray21 = new double[] { 1 };
        double[] doubleArray23 = new double[] { 1 };
        double[] doubleArray25 = new double[] { 1 };
        double[] doubleArray27 = new double[] { 1 };
        double[][] doubleArray28 = new double[][] { doubleArray19, doubleArray21, doubleArray23, doubleArray25, doubleArray27 };
        int[] intArray29 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray28, intArray29);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray16, intArray29);
        double[] doubleArray35 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray39 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray43 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray47 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray48 = new double[][] { doubleArray35, doubleArray39, doubleArray43, doubleArray47 };
        double[] doubleArray50 = new double[] { 1 };
        double[] doubleArray52 = new double[] { 1 };
        double[] doubleArray54 = new double[] { 1 };
        double[] doubleArray56 = new double[] { 1 };
        double[] doubleArray58 = new double[] { 1 };
        double[][] doubleArray59 = new double[][] { doubleArray50, doubleArray52, doubleArray54, doubleArray56, doubleArray58 };
        int[] intArray60 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray59, intArray60);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray48, intArray60);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray16, intArray60);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray15, intArray60);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray13, intArray60);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray8, intArray60);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray7, intArray60);
        double[][] doubleArray68 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray7);
        java.lang.Class<?> wildcardClass69 = doubleArray7.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[]");
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertNotNull(wildcardClass69);
    }

    @Test
    public void test3678() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3678");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[][] doubleArray5 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray4);
        double[][] doubleArray6 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray4);
        double[][] doubleArray7 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray4);
        double[][] doubleArray8 = new double[][] {};
        double[][] doubleArray9 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray8);
        double[][] doubleArray10 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray8);
        double[][] doubleArray11 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray10);
        double[][] doubleArray12 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray11);
        double[][] doubleArray13 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray11);
        double[][] doubleArray14 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray13);
        double[][] doubleArray15 = new double[][] {};
        double[][] doubleArray16 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray15);
        double[][] doubleArray17 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray16);
        double[][] doubleArray18 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray17);
        double[][] doubleArray19 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray17);
        double[][] doubleArray20 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray17);
        double[][] doubleArray21 = new double[][] {};
        double[][] doubleArray22 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray21);
        double[][] doubleArray23 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray21);
        double[] doubleArray30 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray37 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray44 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray51 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray52 = new double[][] { doubleArray30, doubleArray37, doubleArray44, doubleArray51 };
        double[][] doubleArray53 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray52);
        double[][] doubleArray54 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray52);
        double[][] doubleArray55 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray52);
        double[][] doubleArray56 = new double[][] {};
        double[][] doubleArray57 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray56);
        int[] intArray58 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray57, intArray58);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray55, intArray58);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray23, intArray58);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray17, intArray58);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray14, intArray58);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray7, intArray58);
        double[][] doubleArray65 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray7);
        java.lang.Class<?> wildcardClass66 = doubleArray65.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[]");
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertNotNull(wildcardClass66);
    }

    @Test
    public void test3679() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3679");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray3 = new double[][] {};
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[][] doubleArray5 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray4);
        double[][] doubleArray6 = new double[][] {};
        double[][] doubleArray7 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray6);
        double[][] doubleArray8 = new double[][] {};
        double[][] doubleArray9 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray8);
        double[] doubleArray11 = new double[] { 1 };
        double[] doubleArray13 = new double[] { 1 };
        double[] doubleArray15 = new double[] { 1 };
        double[] doubleArray17 = new double[] { 1 };
        double[] doubleArray19 = new double[] { 1 };
        double[][] doubleArray20 = new double[][] { doubleArray11, doubleArray13, doubleArray15, doubleArray17, doubleArray19 };
        int[] intArray21 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray20, intArray21);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray8, intArray21);
        double[] doubleArray27 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray31 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray35 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray39 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray40 = new double[][] { doubleArray27, doubleArray31, doubleArray35, doubleArray39 };
        double[] doubleArray42 = new double[] { 1 };
        double[] doubleArray44 = new double[] { 1 };
        double[] doubleArray46 = new double[] { 1 };
        double[] doubleArray48 = new double[] { 1 };
        double[] doubleArray50 = new double[] { 1 };
        double[][] doubleArray51 = new double[][] { doubleArray42, doubleArray44, doubleArray46, doubleArray48, doubleArray50 };
        int[] intArray52 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray51, intArray52);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray40, intArray52);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray8, intArray52);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray7, intArray52);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray5, intArray52);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray0, intArray52);
        double[][] doubleArray59 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray60 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray59);
        double[][] doubleArray61 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray60);
        double[] doubleArray65 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray69 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray73 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray77 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray78 = new double[][] { doubleArray65, doubleArray69, doubleArray73, doubleArray77 };
        double[] doubleArray80 = new double[] { 1 };
        double[] doubleArray82 = new double[] { 1 };
        double[] doubleArray84 = new double[] { 1 };
        double[] doubleArray86 = new double[] { 1 };
        double[] doubleArray88 = new double[] { 1 };
        double[][] doubleArray89 = new double[][] { doubleArray80, doubleArray82, doubleArray84, doubleArray86, doubleArray88 };
        int[] intArray90 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray89, intArray90);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray78, intArray90);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray60, intArray90);
        double[][] doubleArray94 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray60);
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[]");
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray73), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray77), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray80), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray82), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray84), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray86), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray88), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray89);
        org.junit.Assert.assertNotNull(intArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray90), "[]");
        org.junit.Assert.assertNotNull(doubleArray94);
    }

    @Test
    public void test3680() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3680");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray30 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray31 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray32 = new double[][] {};
        double[][] doubleArray33 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray32);
        int[] intArray34 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray33, intArray34);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray31, intArray34);
        double[][] doubleArray37 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray31);
        double[][] doubleArray38 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray37);
        double[][] doubleArray39 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray38);
        double[][] doubleArray40 = new double[][] {};
        double[][] doubleArray41 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray40);
        double[][] doubleArray42 = new double[][] {};
        double[][] doubleArray43 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray42);
        double[][] doubleArray44 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray43);
        double[] doubleArray48 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray52 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray56 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray60 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray61 = new double[][] { doubleArray48, doubleArray52, doubleArray56, doubleArray60 };
        double[] doubleArray63 = new double[] { 1 };
        double[] doubleArray65 = new double[] { 1 };
        double[] doubleArray67 = new double[] { 1 };
        double[] doubleArray69 = new double[] { 1 };
        double[] doubleArray71 = new double[] { 1 };
        double[][] doubleArray72 = new double[][] { doubleArray63, doubleArray65, doubleArray67, doubleArray69, doubleArray71 };
        int[] intArray73 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray72, intArray73);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray61, intArray73);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray43, intArray73);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray41, intArray73);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray39, intArray73);
        double[][] doubleArray79 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray39);
        double[][] doubleArray80 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray79);
        java.lang.Class<?> wildcardClass81 = doubleArray80.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray71), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[]");
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertNotNull(wildcardClass81);
    }

    @Test
    public void test3681() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3681");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[] doubleArray3 = new double[] { 1 };
        double[] doubleArray5 = new double[] { 1 };
        double[] doubleArray7 = new double[] { 1 };
        double[] doubleArray9 = new double[] { 1 };
        double[] doubleArray11 = new double[] { 1 };
        double[][] doubleArray12 = new double[][] { doubleArray3, doubleArray5, doubleArray7, doubleArray9, doubleArray11 };
        int[] intArray13 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray12, intArray13);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray0, intArray13);
        double[][] doubleArray16 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray17 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray16);
        double[][] doubleArray18 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray17);
        double[][] doubleArray19 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray17);
        double[][] doubleArray20 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray19);
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray34 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray41 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray48 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray49 = new double[][] { doubleArray27, doubleArray34, doubleArray41, doubleArray48 };
        double[][] doubleArray50 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray49);
        double[][] doubleArray51 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray50);
        double[][] doubleArray52 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray51);
        double[][] doubleArray53 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray52);
        double[] doubleArray57 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray61 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray65 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray69 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray70 = new double[][] { doubleArray57, doubleArray61, doubleArray65, doubleArray69 };
        double[] doubleArray72 = new double[] { 1 };
        double[] doubleArray74 = new double[] { 1 };
        double[] doubleArray76 = new double[] { 1 };
        double[] doubleArray78 = new double[] { 1 };
        double[] doubleArray80 = new double[] { 1 };
        double[][] doubleArray81 = new double[][] { doubleArray72, doubleArray74, doubleArray76, doubleArray78, doubleArray80 };
        int[] intArray82 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray81, intArray82);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray70, intArray82);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray53, intArray82);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray20, intArray82);
        java.lang.Class<?> wildcardClass87 = intArray82.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray74), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray78), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray80), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray81);
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[]");
        org.junit.Assert.assertNotNull(wildcardClass87);
    }

    @Test
    public void test3682() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3682");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[][] doubleArray5 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[][] doubleArray6 = new double[][] {};
        double[][] doubleArray7 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray6);
        int[] intArray8 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray7, intArray8);
        double[] doubleArray11 = new double[] { 1 };
        double[] doubleArray13 = new double[] { 1 };
        double[] doubleArray15 = new double[] { 1 };
        double[] doubleArray17 = new double[] { 1 };
        double[] doubleArray19 = new double[] { 1 };
        double[][] doubleArray20 = new double[][] { doubleArray11, doubleArray13, doubleArray15, doubleArray17, doubleArray19 };
        int[] intArray21 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray20, intArray21);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray7, intArray21);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray5, intArray21);
        double[][] doubleArray25 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray5);
        double[][] doubleArray26 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray25);
        double[][] doubleArray27 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray25);
        double[][] doubleArray28 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray27);
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray27);
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
    }

    @Test
    public void test3683() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3683");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[] doubleArray31 = new double[] { 1 };
        double[] doubleArray33 = new double[] { 1 };
        double[] doubleArray35 = new double[] { 1 };
        double[] doubleArray37 = new double[] { 1 };
        double[] doubleArray39 = new double[] { 1 };
        double[][] doubleArray40 = new double[][] { doubleArray31, doubleArray33, doubleArray35, doubleArray37, doubleArray39 };
        int[] intArray41 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray40, intArray41);
        double[][] doubleArray43 = new double[][] {};
        double[][] doubleArray44 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray43);
        int[] intArray45 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray44, intArray45);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray40, intArray45);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray28, intArray45);
        double[][] doubleArray49 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray50 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray51 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray50);
        double[][] doubleArray52 = new double[][] {};
        double[][] doubleArray53 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray52);
        int[] intArray54 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray53, intArray54);
        double[][] doubleArray56 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray53);
        double[][] doubleArray57 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray53);
        double[][] doubleArray58 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray57);
        double[][] doubleArray59 = new double[][] {};
        double[][] doubleArray60 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray59);
        double[][] doubleArray61 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray59);
        double[][] doubleArray62 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray59);
        double[][] doubleArray63 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray62);
        double[] doubleArray65 = new double[] { 1 };
        double[] doubleArray67 = new double[] { 1 };
        double[] doubleArray69 = new double[] { 1 };
        double[] doubleArray71 = new double[] { 1 };
        double[] doubleArray73 = new double[] { 1 };
        double[][] doubleArray74 = new double[][] { doubleArray65, doubleArray67, doubleArray69, doubleArray71, doubleArray73 };
        int[] intArray75 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray74, intArray75);
        double[][] doubleArray77 = new double[][] {};
        double[][] doubleArray78 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray77);
        int[] intArray79 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray78, intArray79);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray74, intArray79);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray62, intArray79);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray57, intArray79);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray50, intArray79);
        java.lang.Class<?> wildcardClass85 = intArray79.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[]");
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray71), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray73), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[]");
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray79), "[]");
        org.junit.Assert.assertNotNull(wildcardClass85);
    }

    @Test
    public void test3684() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3684");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[] doubleArray31 = new double[] { 1 };
        double[] doubleArray33 = new double[] { 1 };
        double[] doubleArray35 = new double[] { 1 };
        double[] doubleArray37 = new double[] { 1 };
        double[] doubleArray39 = new double[] { 1 };
        double[][] doubleArray40 = new double[][] { doubleArray31, doubleArray33, doubleArray35, doubleArray37, doubleArray39 };
        int[] intArray41 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray40, intArray41);
        double[][] doubleArray43 = new double[][] {};
        double[][] doubleArray44 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray43);
        int[] intArray45 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray44, intArray45);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray40, intArray45);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray28, intArray45);
        double[][] doubleArray49 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray50 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray49);
        double[][] doubleArray51 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray50);
        double[][] doubleArray52 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray51);
        double[][] doubleArray53 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray52);
        double[][] doubleArray54 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray52);
        double[][] doubleArray55 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray54);
        double[][] doubleArray56 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray55);
        int[] intArray57 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray55, intArray57);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertNotNull(doubleArray56);
    }

    @Test
    public void test3685() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3685");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray4 = null;
        double[][] doubleArray5 = new double[][] {};
        double[][] doubleArray6 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray5);
        double[][] doubleArray7 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray6);
        double[] doubleArray11 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray15 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray19 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray23 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray24 = new double[][] { doubleArray11, doubleArray15, doubleArray19, doubleArray23 };
        double[] doubleArray26 = new double[] { 1 };
        double[] doubleArray28 = new double[] { 1 };
        double[] doubleArray30 = new double[] { 1 };
        double[] doubleArray32 = new double[] { 1 };
        double[] doubleArray34 = new double[] { 1 };
        double[][] doubleArray35 = new double[][] { doubleArray26, doubleArray28, doubleArray30, doubleArray32, doubleArray34 };
        int[] intArray36 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray35, intArray36);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray24, intArray36);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray7, intArray36);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray4, intArray36);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray3, intArray36);
        double[][] doubleArray42 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[][] doubleArray43 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[][] doubleArray44 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[][] doubleArray45 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[][] doubleArray46 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray45);
        java.lang.Class<?> wildcardClass47 = doubleArray46.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertNotNull(wildcardClass47);
    }

    @Test
    public void test3686() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3686");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray30 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray29);
        double[][] doubleArray31 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        double[][] doubleArray32 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        double[][] doubleArray33 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        double[][] doubleArray34 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray33);
        double[][] doubleArray35 = new double[][] {};
        double[][] doubleArray36 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray35);
        double[][] doubleArray37 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray36);
        double[][] doubleArray38 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray37);
        double[][] doubleArray39 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray37);
        double[] doubleArray46 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray53 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray60 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray67 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray68 = new double[][] { doubleArray46, doubleArray53, doubleArray60, doubleArray67 };
        double[][] doubleArray69 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray68);
        double[][] doubleArray70 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray68);
        double[][] doubleArray71 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray68);
        double[][] doubleArray72 = new double[][] {};
        double[][] doubleArray73 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray72);
        int[] intArray74 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray73, intArray74);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray71, intArray74);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray39, intArray74);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray33, intArray74);
        double[][] doubleArray79 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray33);
        java.lang.Class<?> wildcardClass80 = doubleArray79.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[]");
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertNotNull(wildcardClass80);
    }

    @Test
    public void test3687() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3687");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray5 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray6 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray7 = new double[][] {};
        double[][] doubleArray8 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray7);
        double[][] doubleArray9 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray7);
        double[][] doubleArray10 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray7);
        double[][] doubleArray11 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray10);
        double[][] doubleArray12 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray10);
        double[][] doubleArray13 = new double[][] {};
        double[][] doubleArray14 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray13);
        double[] doubleArray16 = new double[] { 1 };
        double[] doubleArray18 = new double[] { 1 };
        double[] doubleArray20 = new double[] { 1 };
        double[] doubleArray22 = new double[] { 1 };
        double[] doubleArray24 = new double[] { 1 };
        double[][] doubleArray25 = new double[][] { doubleArray16, doubleArray18, doubleArray20, doubleArray22, doubleArray24 };
        int[] intArray26 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray25, intArray26);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray13, intArray26);
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray13);
        double[] doubleArray36 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray43 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray50 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray57 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray58 = new double[][] { doubleArray36, doubleArray43, doubleArray50, doubleArray57 };
        double[][] doubleArray59 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray58);
        double[] doubleArray61 = new double[] { 1 };
        double[] doubleArray63 = new double[] { 1 };
        double[] doubleArray65 = new double[] { 1 };
        double[] doubleArray67 = new double[] { 1 };
        double[] doubleArray69 = new double[] { 1 };
        double[][] doubleArray70 = new double[][] { doubleArray61, doubleArray63, doubleArray65, doubleArray67, doubleArray69 };
        int[] intArray71 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray70, intArray71);
        double[][] doubleArray73 = new double[][] {};
        double[][] doubleArray74 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray73);
        int[] intArray75 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray74, intArray75);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray70, intArray75);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray58, intArray75);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray29, intArray75);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray12, intArray75);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray6, intArray75);
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[]");
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[]");
    }

    @Test
    public void test3688() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3688");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[][] doubleArray5 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray4);
        double[][] doubleArray6 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray5);
        double[][] doubleArray7 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray5);
        double[] doubleArray11 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray15 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray19 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray23 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray24 = new double[][] { doubleArray11, doubleArray15, doubleArray19, doubleArray23 };
        double[] doubleArray26 = new double[] { 1 };
        double[] doubleArray28 = new double[] { 1 };
        double[] doubleArray30 = new double[] { 1 };
        double[] doubleArray32 = new double[] { 1 };
        double[] doubleArray34 = new double[] { 1 };
        double[][] doubleArray35 = new double[][] { doubleArray26, doubleArray28, doubleArray30, doubleArray32, doubleArray34 };
        int[] intArray36 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray35, intArray36);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray24, intArray36);
        double[][] doubleArray39 = new double[][] {};
        double[][] doubleArray40 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray39);
        double[][] doubleArray41 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray40);
        double[][] doubleArray42 = new double[][] {};
        double[][] doubleArray43 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray42);
        double[][] doubleArray44 = new double[][] {};
        double[][] doubleArray45 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray44);
        double[] doubleArray47 = new double[] { 1 };
        double[] doubleArray49 = new double[] { 1 };
        double[] doubleArray51 = new double[] { 1 };
        double[] doubleArray53 = new double[] { 1 };
        double[] doubleArray55 = new double[] { 1 };
        double[][] doubleArray56 = new double[][] { doubleArray47, doubleArray49, doubleArray51, doubleArray53, doubleArray55 };
        int[] intArray57 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray56, intArray57);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray44, intArray57);
        double[] doubleArray63 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray67 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray71 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray75 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray76 = new double[][] { doubleArray63, doubleArray67, doubleArray71, doubleArray75 };
        double[] doubleArray78 = new double[] { 1 };
        double[] doubleArray80 = new double[] { 1 };
        double[] doubleArray82 = new double[] { 1 };
        double[] doubleArray84 = new double[] { 1 };
        double[] doubleArray86 = new double[] { 1 };
        double[][] doubleArray87 = new double[][] { doubleArray78, doubleArray80, doubleArray82, doubleArray84, doubleArray86 };
        int[] intArray88 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray87, intArray88);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray76, intArray88);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray44, intArray88);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray43, intArray88);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray41, intArray88);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray24, intArray88);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray5, intArray88);
        double[][] doubleArray96 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray5);
        double[][] doubleArray97 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray96);
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[]");
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray71), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray75), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray78), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray80), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray82), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray84), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray86), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray87);
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray88), "[]");
        org.junit.Assert.assertNotNull(doubleArray96);
        org.junit.Assert.assertNotNull(doubleArray97);
    }

    @Test
    public void test3689() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3689");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = new double[][] {};
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[] doubleArray5 = new double[] { 1 };
        double[] doubleArray7 = new double[] { 1 };
        double[] doubleArray9 = new double[] { 1 };
        double[] doubleArray11 = new double[] { 1 };
        double[] doubleArray13 = new double[] { 1 };
        double[][] doubleArray14 = new double[][] { doubleArray5, doubleArray7, doubleArray9, doubleArray11, doubleArray13 };
        int[] intArray15 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray14, intArray15);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray2, intArray15);
        double[] doubleArray21 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray25 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray29 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray33 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray34 = new double[][] { doubleArray21, doubleArray25, doubleArray29, doubleArray33 };
        double[] doubleArray36 = new double[] { 1 };
        double[] doubleArray38 = new double[] { 1 };
        double[] doubleArray40 = new double[] { 1 };
        double[] doubleArray42 = new double[] { 1 };
        double[] doubleArray44 = new double[] { 1 };
        double[][] doubleArray45 = new double[][] { doubleArray36, doubleArray38, doubleArray40, doubleArray42, doubleArray44 };
        int[] intArray46 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray45, intArray46);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray34, intArray46);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray2, intArray46);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray1, intArray46);
        double[][] doubleArray51 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray52 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray53 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray54 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray53);
        double[][] doubleArray55 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray54);
        double[][] doubleArray56 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray54);
        double[][] doubleArray57 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray54);
        double[][] doubleArray58 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray57);
        double[][] doubleArray59 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray58);
        java.lang.Class<?> wildcardClass60 = doubleArray58.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertNotNull(wildcardClass60);
    }

    @Test
    public void test3690() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3690");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray5 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray4);
        double[][] doubleArray6 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray5);
        double[][] doubleArray7 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray5);
        double[][] doubleArray8 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray7);
        double[][] doubleArray9 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray7);
        double[][] doubleArray10 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray9);
        java.lang.Class<?> wildcardClass11 = doubleArray10.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertNotNull(wildcardClass11);
    }

    @Test
    public void test3691() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3691");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray5 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray6 = new double[][] {};
        double[][] doubleArray7 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray6);
        double[][] doubleArray8 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray6);
        double[][] doubleArray9 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray6);
        double[][] doubleArray10 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray9);
        double[] doubleArray17 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray24 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray31 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray38 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray39 = new double[][] { doubleArray17, doubleArray24, doubleArray31, doubleArray38 };
        double[][] doubleArray40 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray39);
        double[][] doubleArray41 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray40);
        double[][] doubleArray42 = new double[][] {};
        double[][] doubleArray43 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray42);
        double[] doubleArray45 = new double[] { 1 };
        double[] doubleArray47 = new double[] { 1 };
        double[] doubleArray49 = new double[] { 1 };
        double[] doubleArray51 = new double[] { 1 };
        double[] doubleArray53 = new double[] { 1 };
        double[][] doubleArray54 = new double[][] { doubleArray45, doubleArray47, doubleArray49, doubleArray51, doubleArray53 };
        int[] intArray55 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray54, intArray55);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray42, intArray55);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray41, intArray55);
        double[][] doubleArray59 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray41);
        double[] doubleArray61 = new double[] { 1 };
        double[] doubleArray63 = new double[] { 1 };
        double[] doubleArray65 = new double[] { 1 };
        double[] doubleArray67 = new double[] { 1 };
        double[] doubleArray69 = new double[] { 1 };
        double[][] doubleArray70 = new double[][] { doubleArray61, doubleArray63, doubleArray65, doubleArray67, doubleArray69 };
        int[] intArray71 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray70, intArray71);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray59, intArray71);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray9, intArray71);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray5, intArray71);
        double[][] doubleArray76 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray5);
        double[][] doubleArray77 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray5);
        double[][] doubleArray78 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray77);
        double[][] doubleArray79 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray78);
        double[][] doubleArray80 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray79);
        double[][] doubleArray81 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray80);
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[]");
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[]");
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertNotNull(doubleArray81);
    }

    @Test
    public void test3692() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3692");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray4 = new double[][] {};
        double[][] doubleArray5 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray4);
        double[][] doubleArray6 = new double[][] {};
        double[][] doubleArray7 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray6);
        double[] doubleArray9 = new double[] { 1 };
        double[] doubleArray11 = new double[] { 1 };
        double[] doubleArray13 = new double[] { 1 };
        double[] doubleArray15 = new double[] { 1 };
        double[] doubleArray17 = new double[] { 1 };
        double[][] doubleArray18 = new double[][] { doubleArray9, doubleArray11, doubleArray13, doubleArray15, doubleArray17 };
        int[] intArray19 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray18, intArray19);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray6, intArray19);
        double[] doubleArray25 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray29 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray33 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray37 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray38 = new double[][] { doubleArray25, doubleArray29, doubleArray33, doubleArray37 };
        double[] doubleArray40 = new double[] { 1 };
        double[] doubleArray42 = new double[] { 1 };
        double[] doubleArray44 = new double[] { 1 };
        double[] doubleArray46 = new double[] { 1 };
        double[] doubleArray48 = new double[] { 1 };
        double[][] doubleArray49 = new double[][] { doubleArray40, doubleArray42, doubleArray44, doubleArray46, doubleArray48 };
        int[] intArray50 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray49, intArray50);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray38, intArray50);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray6, intArray50);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray4, intArray50);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray1, intArray50);
        double[][] doubleArray56 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray57 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray58 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray57);
        double[] doubleArray60 = new double[] { 1 };
        double[] doubleArray62 = new double[] { 1 };
        double[] doubleArray64 = new double[] { 1 };
        double[] doubleArray66 = new double[] { 1 };
        double[] doubleArray68 = new double[] { 1 };
        double[][] doubleArray69 = new double[][] { doubleArray60, doubleArray62, doubleArray64, doubleArray66, doubleArray68 };
        int[] intArray70 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray69, intArray70);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray57, intArray70);
        java.lang.Class<?> wildcardClass73 = doubleArray57.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[]");
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray66), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[]");
        org.junit.Assert.assertNotNull(wildcardClass73);
    }

    @Test
    public void test3693() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3693");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = new double[][] {};
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[] doubleArray8 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray12 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray16 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray20 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray21 = new double[][] { doubleArray8, doubleArray12, doubleArray16, doubleArray20 };
        double[] doubleArray23 = new double[] { 1 };
        double[] doubleArray25 = new double[] { 1 };
        double[] doubleArray27 = new double[] { 1 };
        double[] doubleArray29 = new double[] { 1 };
        double[] doubleArray31 = new double[] { 1 };
        double[][] doubleArray32 = new double[][] { doubleArray23, doubleArray25, doubleArray27, doubleArray29, doubleArray31 };
        int[] intArray33 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray32, intArray33);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray21, intArray33);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray3, intArray33);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray1, intArray33);
        double[][] doubleArray38 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray39 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray38);
        double[][] doubleArray40 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray39);
        double[][] doubleArray41 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray39);
        double[][] doubleArray42 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray41);
        double[][] doubleArray43 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray41);
        double[][] doubleArray44 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray43);
        double[][] doubleArray45 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray44);
        double[][] doubleArray46 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray45);
        double[][] doubleArray47 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray46);
        double[][] doubleArray48 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray46);
        double[][] doubleArray49 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray46);
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertNotNull(doubleArray49);
    }

    @Test
    public void test3694() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3694");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[][] doubleArray5 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray4);
        double[][] doubleArray6 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray4);
        double[][] doubleArray7 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray6);
        double[] doubleArray14 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray21 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray28 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray35 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray36 = new double[][] { doubleArray14, doubleArray21, doubleArray28, doubleArray35 };
        double[][] doubleArray37 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray36);
        double[][] doubleArray38 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray36);
        double[][] doubleArray39 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray36);
        double[][] doubleArray40 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray39);
        double[][] doubleArray41 = new double[][] {};
        double[][] doubleArray42 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray41);
        int[] intArray43 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray42, intArray43);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray40, intArray43);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray6, intArray43);
        double[][] doubleArray47 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray6);
        double[][] doubleArray48 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray6);
        double[][] doubleArray49 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray6);
        double[][] doubleArray50 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray49);
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[]");
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertNotNull(doubleArray50);
    }

    @Test
    public void test3695() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3695");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = new double[][] {};
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[] doubleArray8 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray12 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray16 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray20 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray21 = new double[][] { doubleArray8, doubleArray12, doubleArray16, doubleArray20 };
        double[] doubleArray23 = new double[] { 1 };
        double[] doubleArray25 = new double[] { 1 };
        double[] doubleArray27 = new double[] { 1 };
        double[] doubleArray29 = new double[] { 1 };
        double[] doubleArray31 = new double[] { 1 };
        double[][] doubleArray32 = new double[][] { doubleArray23, doubleArray25, doubleArray27, doubleArray29, doubleArray31 };
        int[] intArray33 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray32, intArray33);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray21, intArray33);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray3, intArray33);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray1, intArray33);
        double[][] doubleArray38 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray39 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray38);
        double[][] doubleArray40 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray38);
        double[][] doubleArray41 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray40);
        double[][] doubleArray42 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray41);
        double[][] doubleArray43 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray41);
        double[][] doubleArray44 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray43);
        double[][] doubleArray45 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray44);
        java.lang.Class<?> wildcardClass46 = doubleArray44.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertNotNull(wildcardClass46);
    }

    @Test
    public void test3696() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3696");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = new double[][] {};
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[][] doubleArray5 = new double[][] {};
        double[][] doubleArray6 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray5);
        double[][] doubleArray7 = new double[][] {};
        double[][] doubleArray8 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray7);
        double[] doubleArray10 = new double[] { 1 };
        double[] doubleArray12 = new double[] { 1 };
        double[] doubleArray14 = new double[] { 1 };
        double[] doubleArray16 = new double[] { 1 };
        double[] doubleArray18 = new double[] { 1 };
        double[][] doubleArray19 = new double[][] { doubleArray10, doubleArray12, doubleArray14, doubleArray16, doubleArray18 };
        int[] intArray20 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray19, intArray20);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray7, intArray20);
        double[] doubleArray26 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray30 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray34 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray38 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray39 = new double[][] { doubleArray26, doubleArray30, doubleArray34, doubleArray38 };
        double[] doubleArray41 = new double[] { 1 };
        double[] doubleArray43 = new double[] { 1 };
        double[] doubleArray45 = new double[] { 1 };
        double[] doubleArray47 = new double[] { 1 };
        double[] doubleArray49 = new double[] { 1 };
        double[][] doubleArray50 = new double[][] { doubleArray41, doubleArray43, doubleArray45, doubleArray47, doubleArray49 };
        int[] intArray51 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray50, intArray51);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray39, intArray51);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray7, intArray51);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray6, intArray51);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray4, intArray51);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray1, intArray51);
        double[][] doubleArray58 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[] doubleArray65 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray72 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray79 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray86 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray87 = new double[][] { doubleArray65, doubleArray72, doubleArray79, doubleArray86 };
        double[][] doubleArray88 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray87);
        double[][] doubleArray89 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray87);
        double[][] doubleArray90 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray87);
        double[][] doubleArray91 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray90);
        double[][] doubleArray92 = new double[][] {};
        double[][] doubleArray93 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray92);
        int[] intArray94 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray93, intArray94);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray91, intArray94);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray58, intArray94);
        double[][] doubleArray98 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray58);
        java.lang.Class<?> wildcardClass99 = doubleArray58.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[]");
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[]");
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray79), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray86), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray87);
        org.junit.Assert.assertNotNull(doubleArray88);
        org.junit.Assert.assertNotNull(doubleArray89);
        org.junit.Assert.assertNotNull(doubleArray90);
        org.junit.Assert.assertNotNull(doubleArray91);
        org.junit.Assert.assertNotNull(doubleArray92);
        org.junit.Assert.assertNotNull(doubleArray93);
        org.junit.Assert.assertNotNull(intArray94);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray94), "[]");
        org.junit.Assert.assertNotNull(doubleArray98);
        org.junit.Assert.assertNotNull(wildcardClass99);
    }

    @Test
    public void test3697() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3697");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray30 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray29);
        double[][] doubleArray31 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        double[][] doubleArray32 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        double[][] doubleArray33 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        double[][] doubleArray34 = new double[][] {};
        double[][] doubleArray35 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray34);
        double[][] doubleArray36 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray35);
        double[] doubleArray43 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray50 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray57 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray64 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray65 = new double[][] { doubleArray43, doubleArray50, doubleArray57, doubleArray64 };
        double[][] doubleArray66 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray65);
        double[] doubleArray68 = new double[] { 1 };
        double[] doubleArray70 = new double[] { 1 };
        double[] doubleArray72 = new double[] { 1 };
        double[] doubleArray74 = new double[] { 1 };
        double[] doubleArray76 = new double[] { 1 };
        double[][] doubleArray77 = new double[][] { doubleArray68, doubleArray70, doubleArray72, doubleArray74, doubleArray76 };
        int[] intArray78 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray77, intArray78);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray66, intArray78);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray35, intArray78);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray33, intArray78);
        double[][] doubleArray83 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray33);
        double[][] doubleArray84 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray33);
        java.lang.Class<?> wildcardClass85 = doubleArray33.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray70), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray74), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[]");
        org.junit.Assert.assertNotNull(doubleArray83);
        org.junit.Assert.assertNotNull(doubleArray84);
        org.junit.Assert.assertNotNull(wildcardClass85);
    }

    @Test
    public void test3698() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3698");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        int[] intArray2 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray1, intArray2);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray5 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray4);
        double[] doubleArray12 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray19 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray26 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray33 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray34 = new double[][] { doubleArray12, doubleArray19, doubleArray26, doubleArray33 };
        double[][] doubleArray35 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray34);
        double[][] doubleArray36 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray34);
        double[][] doubleArray37 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray34);
        double[] doubleArray39 = new double[] { 1 };
        double[] doubleArray41 = new double[] { 1 };
        double[] doubleArray43 = new double[] { 1 };
        double[] doubleArray45 = new double[] { 1 };
        double[] doubleArray47 = new double[] { 1 };
        double[][] doubleArray48 = new double[][] { doubleArray39, doubleArray41, doubleArray43, doubleArray45, doubleArray47 };
        int[] intArray49 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray48, intArray49);
        double[] doubleArray57 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray64 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray71 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray78 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray79 = new double[][] { doubleArray57, doubleArray64, doubleArray71, doubleArray78 };
        double[][] doubleArray80 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray79);
        double[] doubleArray82 = new double[] { 1 };
        double[] doubleArray84 = new double[] { 1 };
        double[] doubleArray86 = new double[] { 1 };
        double[] doubleArray88 = new double[] { 1 };
        double[] doubleArray90 = new double[] { 1 };
        double[][] doubleArray91 = new double[][] { doubleArray82, doubleArray84, doubleArray86, doubleArray88, doubleArray90 };
        int[] intArray92 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray91, intArray92);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray80, intArray92);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray48, intArray92);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray37, intArray92);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray4, intArray92);
        double[][] doubleArray98 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray4);
        java.lang.Class<?> wildcardClass99 = doubleArray98.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[]");
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray71), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray78), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertNotNull(doubleArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray82), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray84), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray86), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray88), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray90), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray91);
        org.junit.Assert.assertNotNull(intArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray92), "[]");
        org.junit.Assert.assertNotNull(doubleArray98);
        org.junit.Assert.assertNotNull(wildcardClass99);
    }

    @Test
    public void test3699() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3699");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = new double[][] {};
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[] doubleArray5 = new double[] { 1 };
        double[] doubleArray7 = new double[] { 1 };
        double[] doubleArray9 = new double[] { 1 };
        double[] doubleArray11 = new double[] { 1 };
        double[] doubleArray13 = new double[] { 1 };
        double[][] doubleArray14 = new double[][] { doubleArray5, doubleArray7, doubleArray9, doubleArray11, doubleArray13 };
        int[] intArray15 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray14, intArray15);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray2, intArray15);
        double[] doubleArray21 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray25 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray29 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray33 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray34 = new double[][] { doubleArray21, doubleArray25, doubleArray29, doubleArray33 };
        double[] doubleArray36 = new double[] { 1 };
        double[] doubleArray38 = new double[] { 1 };
        double[] doubleArray40 = new double[] { 1 };
        double[] doubleArray42 = new double[] { 1 };
        double[] doubleArray44 = new double[] { 1 };
        double[][] doubleArray45 = new double[][] { doubleArray36, doubleArray38, doubleArray40, doubleArray42, doubleArray44 };
        int[] intArray46 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray45, intArray46);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray34, intArray46);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray2, intArray46);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray1, intArray46);
        double[][] doubleArray51 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray52 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray51);
        double[][] doubleArray53 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray52);
        double[][] doubleArray54 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray53);
        double[][] doubleArray55 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray53);
        double[][] doubleArray56 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray55);
        double[][] doubleArray57 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray55);
        double[][] doubleArray58 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray55);
        java.lang.Class<?> wildcardClass59 = doubleArray58.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertNotNull(wildcardClass59);
    }

    @Test
    public void test3700() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3700");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray30 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray31 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray32 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray33 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray32);
        double[][] doubleArray34 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray33);
        double[][] doubleArray35 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray33);
        double[][] doubleArray36 = new double[][] {};
        double[][] doubleArray37 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray36);
        double[][] doubleArray38 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray36);
        double[][] doubleArray39 = new double[][] {};
        double[][] doubleArray40 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray39);
        double[][] doubleArray41 = new double[][] {};
        double[][] doubleArray42 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray41);
        double[] doubleArray44 = new double[] { 1 };
        double[] doubleArray46 = new double[] { 1 };
        double[] doubleArray48 = new double[] { 1 };
        double[] doubleArray50 = new double[] { 1 };
        double[] doubleArray52 = new double[] { 1 };
        double[][] doubleArray53 = new double[][] { doubleArray44, doubleArray46, doubleArray48, doubleArray50, doubleArray52 };
        int[] intArray54 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray53, intArray54);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray41, intArray54);
        double[] doubleArray60 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray64 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray68 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray72 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray73 = new double[][] { doubleArray60, doubleArray64, doubleArray68, doubleArray72 };
        double[] doubleArray75 = new double[] { 1 };
        double[] doubleArray77 = new double[] { 1 };
        double[] doubleArray79 = new double[] { 1 };
        double[] doubleArray81 = new double[] { 1 };
        double[] doubleArray83 = new double[] { 1 };
        double[][] doubleArray84 = new double[][] { doubleArray75, doubleArray77, doubleArray79, doubleArray81, doubleArray83 };
        int[] intArray85 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray84, intArray85);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray73, intArray85);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray41, intArray85);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray39, intArray85);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray36, intArray85);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray33, intArray85);
        double[][] doubleArray92 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray33);
        double[][] doubleArray93 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray33);
        double[][] doubleArray94 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray93);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[]");
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray75), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray77), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray79), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray81), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray83), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray84);
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray85), "[]");
        org.junit.Assert.assertNotNull(doubleArray92);
        org.junit.Assert.assertNotNull(doubleArray93);
        org.junit.Assert.assertNotNull(doubleArray94);
    }

    @Test
    public void test3701() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3701");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[] doubleArray31 = new double[] { 1 };
        double[] doubleArray33 = new double[] { 1 };
        double[] doubleArray35 = new double[] { 1 };
        double[] doubleArray37 = new double[] { 1 };
        double[] doubleArray39 = new double[] { 1 };
        double[][] doubleArray40 = new double[][] { doubleArray31, doubleArray33, doubleArray35, doubleArray37, doubleArray39 };
        int[] intArray41 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray40, intArray41);
        double[][] doubleArray43 = new double[][] {};
        double[][] doubleArray44 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray43);
        int[] intArray45 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray44, intArray45);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray40, intArray45);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray28, intArray45);
        double[][] doubleArray49 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray50 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray49);
        double[][] doubleArray51 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray49);
        double[][] doubleArray52 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray49);
        double[][] doubleArray53 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray49);
        double[][] doubleArray54 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray53);
        java.lang.Class<?> wildcardClass55 = doubleArray53.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertNotNull(wildcardClass55);
    }

    @Test
    public void test3702() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3702");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        int[] intArray2 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray1, intArray2);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray5 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray6 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray5);
        double[][] doubleArray7 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray5);
        double[][] doubleArray8 = new double[][] {};
        double[][] doubleArray9 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray8);
        double[][] doubleArray10 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray9);
        double[][] doubleArray11 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray10);
        double[][] doubleArray12 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray11);
        double[][] doubleArray13 = null;
        double[][] doubleArray14 = new double[][] {};
        double[][] doubleArray15 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray14);
        double[][] doubleArray16 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray15);
        double[] doubleArray20 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray24 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray28 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray32 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray33 = new double[][] { doubleArray20, doubleArray24, doubleArray28, doubleArray32 };
        double[] doubleArray35 = new double[] { 1 };
        double[] doubleArray37 = new double[] { 1 };
        double[] doubleArray39 = new double[] { 1 };
        double[] doubleArray41 = new double[] { 1 };
        double[] doubleArray43 = new double[] { 1 };
        double[][] doubleArray44 = new double[][] { doubleArray35, doubleArray37, doubleArray39, doubleArray41, doubleArray43 };
        int[] intArray45 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray44, intArray45);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray33, intArray45);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray16, intArray45);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray13, intArray45);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray11, intArray45);
        double[][] doubleArray51 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray11);
        double[][] doubleArray52 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray51);
        double[][] doubleArray53 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray52);
        double[][] doubleArray54 = new double[][] {};
        double[][] doubleArray55 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray54);
        int[] intArray56 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray55, intArray56);
        double[][] doubleArray58 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray55);
        double[][] doubleArray59 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray58);
        double[][] doubleArray60 = new double[][] {};
        double[][] doubleArray61 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray60);
        int[] intArray62 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray61, intArray62);
        double[] doubleArray65 = new double[] { 1 };
        double[] doubleArray67 = new double[] { 1 };
        double[] doubleArray69 = new double[] { 1 };
        double[] doubleArray71 = new double[] { 1 };
        double[] doubleArray73 = new double[] { 1 };
        double[][] doubleArray74 = new double[][] { doubleArray65, doubleArray67, doubleArray69, doubleArray71, doubleArray73 };
        int[] intArray75 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray74, intArray75);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray61, intArray75);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray58, intArray75);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray53, intArray75);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray7, intArray75);
        double[][] doubleArray81 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray7);
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[]");
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[]");
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray71), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray73), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[]");
        org.junit.Assert.assertNotNull(doubleArray81);
    }

    @Test
    public void test3703() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3703");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = new double[][] {};
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[] doubleArray5 = new double[] { 1 };
        double[] doubleArray7 = new double[] { 1 };
        double[] doubleArray9 = new double[] { 1 };
        double[] doubleArray11 = new double[] { 1 };
        double[] doubleArray13 = new double[] { 1 };
        double[][] doubleArray14 = new double[][] { doubleArray5, doubleArray7, doubleArray9, doubleArray11, doubleArray13 };
        int[] intArray15 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray14, intArray15);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray2, intArray15);
        double[] doubleArray21 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray25 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray29 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray33 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray34 = new double[][] { doubleArray21, doubleArray25, doubleArray29, doubleArray33 };
        double[] doubleArray36 = new double[] { 1 };
        double[] doubleArray38 = new double[] { 1 };
        double[] doubleArray40 = new double[] { 1 };
        double[] doubleArray42 = new double[] { 1 };
        double[] doubleArray44 = new double[] { 1 };
        double[][] doubleArray45 = new double[][] { doubleArray36, doubleArray38, doubleArray40, doubleArray42, doubleArray44 };
        int[] intArray46 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray45, intArray46);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray34, intArray46);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray2, intArray46);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray1, intArray46);
        double[][] doubleArray51 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray52 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray51);
        double[][] doubleArray53 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray52);
        double[][] doubleArray54 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray53);
        double[][] doubleArray55 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray54);
        double[][] doubleArray56 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray54);
        java.lang.Class<?> wildcardClass57 = doubleArray54.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertNotNull(wildcardClass57);
    }

    @Test
    public void test3704() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3704");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray5 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray6 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray5);
        double[][] doubleArray7 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray6);
        double[][] doubleArray8 = null;
        double[][] doubleArray9 = null;
        double[][] doubleArray10 = new double[][] {};
        double[][] doubleArray11 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray10);
        double[] doubleArray13 = new double[] { 1 };
        double[] doubleArray15 = new double[] { 1 };
        double[] doubleArray17 = new double[] { 1 };
        double[] doubleArray19 = new double[] { 1 };
        double[] doubleArray21 = new double[] { 1 };
        double[][] doubleArray22 = new double[][] { doubleArray13, doubleArray15, doubleArray17, doubleArray19, doubleArray21 };
        int[] intArray23 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray22, intArray23);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray10, intArray23);
        double[] doubleArray29 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray33 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray37 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray41 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray42 = new double[][] { doubleArray29, doubleArray33, doubleArray37, doubleArray41 };
        double[] doubleArray44 = new double[] { 1 };
        double[] doubleArray46 = new double[] { 1 };
        double[] doubleArray48 = new double[] { 1 };
        double[] doubleArray50 = new double[] { 1 };
        double[] doubleArray52 = new double[] { 1 };
        double[][] doubleArray53 = new double[][] { doubleArray44, doubleArray46, doubleArray48, doubleArray50, doubleArray52 };
        int[] intArray54 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray53, intArray54);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray42, intArray54);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray10, intArray54);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray9, intArray54);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray8, intArray54);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray7, intArray54);
        double[][] doubleArray61 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray7);
        double[][] doubleArray62 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray61);
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertNotNull(doubleArray62);
    }

    @Test
    public void test3705() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3705");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray30 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray31 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray32 = new double[][] {};
        double[][] doubleArray33 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray32);
        double[][] doubleArray34 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray33);
        double[][] doubleArray35 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray33);
        double[][] doubleArray36 = new double[][] {};
        double[][] doubleArray37 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray36);
        double[][] doubleArray38 = new double[][] {};
        double[][] doubleArray39 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray38);
        double[] doubleArray41 = new double[] { 1 };
        double[] doubleArray43 = new double[] { 1 };
        double[] doubleArray45 = new double[] { 1 };
        double[] doubleArray47 = new double[] { 1 };
        double[] doubleArray49 = new double[] { 1 };
        double[][] doubleArray50 = new double[][] { doubleArray41, doubleArray43, doubleArray45, doubleArray47, doubleArray49 };
        int[] intArray51 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray50, intArray51);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray38, intArray51);
        double[] doubleArray57 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray61 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray65 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray69 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray70 = new double[][] { doubleArray57, doubleArray61, doubleArray65, doubleArray69 };
        double[] doubleArray72 = new double[] { 1 };
        double[] doubleArray74 = new double[] { 1 };
        double[] doubleArray76 = new double[] { 1 };
        double[] doubleArray78 = new double[] { 1 };
        double[] doubleArray80 = new double[] { 1 };
        double[][] doubleArray81 = new double[][] { doubleArray72, doubleArray74, doubleArray76, doubleArray78, doubleArray80 };
        int[] intArray82 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray81, intArray82);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray70, intArray82);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray38, intArray82);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray36, intArray82);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray33, intArray82);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray31, intArray82);
        double[][] doubleArray89 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray31);
        double[][] doubleArray90 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray89);
        double[][] doubleArray91 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray90);
        double[][] doubleArray92 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray90);
        java.lang.Class<?> wildcardClass93 = doubleArray90.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[]");
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray74), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray78), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray80), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray81);
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[]");
        org.junit.Assert.assertNotNull(doubleArray89);
        org.junit.Assert.assertNotNull(doubleArray90);
        org.junit.Assert.assertNotNull(doubleArray91);
        org.junit.Assert.assertNotNull(doubleArray92);
        org.junit.Assert.assertNotNull(wildcardClass93);
    }

    @Test
    public void test3706() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3706");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray30 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray29);
        double[][] doubleArray31 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        double[][] doubleArray32 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        double[][] doubleArray33 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        double[][] doubleArray34 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        double[][] doubleArray35 = null;
        double[][] doubleArray36 = null;
        double[][] doubleArray37 = new double[][] {};
        double[][] doubleArray38 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray37);
        double[] doubleArray40 = new double[] { 1 };
        double[] doubleArray42 = new double[] { 1 };
        double[] doubleArray44 = new double[] { 1 };
        double[] doubleArray46 = new double[] { 1 };
        double[] doubleArray48 = new double[] { 1 };
        double[][] doubleArray49 = new double[][] { doubleArray40, doubleArray42, doubleArray44, doubleArray46, doubleArray48 };
        int[] intArray50 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray49, intArray50);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray37, intArray50);
        double[] doubleArray56 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray60 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray64 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray68 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray69 = new double[][] { doubleArray56, doubleArray60, doubleArray64, doubleArray68 };
        double[] doubleArray71 = new double[] { 1 };
        double[] doubleArray73 = new double[] { 1 };
        double[] doubleArray75 = new double[] { 1 };
        double[] doubleArray77 = new double[] { 1 };
        double[] doubleArray79 = new double[] { 1 };
        double[][] doubleArray80 = new double[][] { doubleArray71, doubleArray73, doubleArray75, doubleArray77, doubleArray79 };
        int[] intArray81 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray80, intArray81);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray69, intArray81);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray37, intArray81);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray36, intArray81);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray35, intArray81);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray34, intArray81);
        java.lang.Class<?> wildcardClass88 = doubleArray34.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[]");
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray71), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray73), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray75), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray77), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray79), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray81), "[]");
        org.junit.Assert.assertNotNull(wildcardClass88);
    }

    @Test
    public void test3707() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3707");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray30 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray31 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        double[][] doubleArray32 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray31);
        double[][] doubleArray33 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray32);
        double[][] doubleArray34 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray33);
        double[][] doubleArray35 = new double[][] {};
        double[][] doubleArray36 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray35);
        double[][] doubleArray37 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray35);
        double[] doubleArray44 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray51 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray58 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray65 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray66 = new double[][] { doubleArray44, doubleArray51, doubleArray58, doubleArray65 };
        double[][] doubleArray67 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray66);
        double[][] doubleArray68 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray66);
        double[][] doubleArray69 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray66);
        double[][] doubleArray70 = new double[][] {};
        double[][] doubleArray71 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray70);
        int[] intArray72 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray71, intArray72);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray69, intArray72);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray37, intArray72);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray34, intArray72);
        java.lang.Class<?> wildcardClass77 = intArray72.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[]");
        org.junit.Assert.assertNotNull(wildcardClass77);
    }

    @Test
    public void test3708() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3708");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[] doubleArray31 = new double[] { 1 };
        double[] doubleArray33 = new double[] { 1 };
        double[] doubleArray35 = new double[] { 1 };
        double[] doubleArray37 = new double[] { 1 };
        double[] doubleArray39 = new double[] { 1 };
        double[][] doubleArray40 = new double[][] { doubleArray31, doubleArray33, doubleArray35, doubleArray37, doubleArray39 };
        int[] intArray41 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray40, intArray41);
        double[][] doubleArray43 = new double[][] {};
        double[][] doubleArray44 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray43);
        int[] intArray45 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray44, intArray45);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray40, intArray45);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray28, intArray45);
        double[][] doubleArray49 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray50 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray49);
        double[][] doubleArray51 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray50);
        double[][] doubleArray52 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray50);
        double[][] doubleArray53 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray50);
        double[][] doubleArray54 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray53);
        double[][] doubleArray55 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray54);
        double[][] doubleArray56 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray55);
        double[][] doubleArray57 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray56);
        double[][] doubleArray58 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray57);
        java.lang.Class<?> wildcardClass59 = doubleArray58.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertNotNull(wildcardClass59);
    }

    @Test
    public void test3709() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3709");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray5 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray4);
        double[][] doubleArray6 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray5);
        double[][] doubleArray7 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray5);
        double[][] doubleArray8 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray5);
        java.lang.Class<?> wildcardClass9 = doubleArray5.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void test3710() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3710");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray5 = new double[][] {};
        double[][] doubleArray6 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray5);
        double[][] doubleArray7 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray5);
        double[][] doubleArray8 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray5);
        double[][] doubleArray9 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray5);
        double[][] doubleArray10 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray9);
        double[][] doubleArray11 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray9);
        double[][] doubleArray12 = new double[][] {};
        double[][] doubleArray13 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray12);
        int[] intArray14 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray13, intArray14);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray11, intArray14);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray1, intArray14);
        double[][] doubleArray18 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[] doubleArray25 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray32 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray39 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray46 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray47 = new double[][] { doubleArray25, doubleArray32, doubleArray39, doubleArray46 };
        double[][] doubleArray48 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray47);
        double[][] doubleArray49 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray48);
        double[][] doubleArray50 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray49);
        double[][] doubleArray51 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray50);
        double[][] doubleArray52 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray50);
        double[][] doubleArray53 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray52);
        double[][] doubleArray54 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray52);
        double[][] doubleArray55 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray52);
        double[][] doubleArray56 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray52);
        double[][] doubleArray57 = new double[][] {};
        double[][] doubleArray58 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray57);
        double[][] doubleArray59 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray58);
        double[][] doubleArray60 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray58);
        double[][] doubleArray61 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray58);
        double[][] doubleArray62 = new double[][] {};
        double[][] doubleArray63 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray62);
        double[][] doubleArray64 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray62);
        double[][] doubleArray65 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray62);
        double[][] doubleArray66 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray62);
        double[][] doubleArray67 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray66);
        double[][] doubleArray68 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray66);
        double[][] doubleArray69 = new double[][] {};
        double[][] doubleArray70 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray69);
        int[] intArray71 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray70, intArray71);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray68, intArray71);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray58, intArray71);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray56, intArray71);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray1, intArray71);
        java.lang.Class<?> wildcardClass77 = intArray71.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[]");
        org.junit.Assert.assertNotNull(wildcardClass77);
    }

    @Test
    public void test3711() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3711");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[] doubleArray3 = new double[] { 1 };
        double[] doubleArray5 = new double[] { 1 };
        double[] doubleArray7 = new double[] { 1 };
        double[] doubleArray9 = new double[] { 1 };
        double[] doubleArray11 = new double[] { 1 };
        double[][] doubleArray12 = new double[][] { doubleArray3, doubleArray5, doubleArray7, doubleArray9, doubleArray11 };
        int[] intArray13 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray12, intArray13);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray0, intArray13);
        double[][] doubleArray16 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray17 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray16);
        double[][] doubleArray18 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray17);
        double[][] doubleArray19 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray18);
        double[][] doubleArray20 = new double[][] {};
        double[][] doubleArray21 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray20);
        double[] doubleArray23 = new double[] { 1 };
        double[] doubleArray25 = new double[] { 1 };
        double[] doubleArray27 = new double[] { 1 };
        double[] doubleArray29 = new double[] { 1 };
        double[] doubleArray31 = new double[] { 1 };
        double[][] doubleArray32 = new double[][] { doubleArray23, doubleArray25, doubleArray27, doubleArray29, doubleArray31 };
        int[] intArray33 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray32, intArray33);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray20, intArray33);
        double[][] doubleArray36 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray20);
        double[] doubleArray43 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray50 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray57 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray64 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray65 = new double[][] { doubleArray43, doubleArray50, doubleArray57, doubleArray64 };
        double[][] doubleArray66 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray65);
        double[] doubleArray68 = new double[] { 1 };
        double[] doubleArray70 = new double[] { 1 };
        double[] doubleArray72 = new double[] { 1 };
        double[] doubleArray74 = new double[] { 1 };
        double[] doubleArray76 = new double[] { 1 };
        double[][] doubleArray77 = new double[][] { doubleArray68, doubleArray70, doubleArray72, doubleArray74, doubleArray76 };
        int[] intArray78 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray77, intArray78);
        double[][] doubleArray80 = new double[][] {};
        double[][] doubleArray81 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray80);
        int[] intArray82 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray81, intArray82);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray77, intArray82);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray65, intArray82);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray36, intArray82);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray18, intArray82);
        double[][] doubleArray88 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray18);
        double[][] doubleArray89 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray18);
        java.lang.Class<?> wildcardClass90 = doubleArray89.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray70), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray74), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[]");
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertNotNull(doubleArray81);
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[]");
        org.junit.Assert.assertNotNull(doubleArray88);
        org.junit.Assert.assertNotNull(doubleArray89);
        org.junit.Assert.assertNotNull(wildcardClass90);
    }

    @Test
    public void test3712() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3712");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray30 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray31 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray32 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray31);
        double[][] doubleArray33 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray32);
        double[][] doubleArray34 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray32);
        double[][] doubleArray35 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray34);
        java.lang.Class<?> wildcardClass36 = doubleArray35.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertNotNull(wildcardClass36);
    }

    @Test
    public void test3713() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3713");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        int[] intArray2 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray1, intArray2);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray5 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray4);
        double[][] doubleArray6 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray4);
        double[][] doubleArray7 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray4);
        double[] doubleArray14 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray21 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray28 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray35 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray36 = new double[][] { doubleArray14, doubleArray21, doubleArray28, doubleArray35 };
        double[][] doubleArray37 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray36);
        double[][] doubleArray38 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray36);
        double[][] doubleArray39 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray36);
        double[][] doubleArray40 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray39);
        double[][] doubleArray41 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray40);
        double[] doubleArray48 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray55 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray62 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray69 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray70 = new double[][] { doubleArray48, doubleArray55, doubleArray62, doubleArray69 };
        double[][] doubleArray71 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray70);
        double[][] doubleArray72 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray70);
        double[][] doubleArray73 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray70);
        double[][] doubleArray74 = new double[][] {};
        double[][] doubleArray75 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray74);
        int[] intArray76 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray75, intArray76);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray73, intArray76);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray41, intArray76);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray7, intArray76);
        double[][] doubleArray81 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray7);
        double[][] doubleArray82 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray81);
        double[][] doubleArray83 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray82);
        double[][] doubleArray84 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray82);
        double[][] doubleArray85 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray82);
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[]");
        org.junit.Assert.assertNotNull(doubleArray81);
        org.junit.Assert.assertNotNull(doubleArray82);
        org.junit.Assert.assertNotNull(doubleArray83);
        org.junit.Assert.assertNotNull(doubleArray84);
        org.junit.Assert.assertNotNull(doubleArray85);
    }

    @Test
    public void test3714() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3714");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray5 = new double[][] {};
        double[][] doubleArray6 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray5);
        double[][] doubleArray7 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray5);
        double[][] doubleArray8 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray5);
        double[][] doubleArray9 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray5);
        double[][] doubleArray10 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray9);
        double[][] doubleArray11 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray9);
        double[][] doubleArray12 = new double[][] {};
        double[][] doubleArray13 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray12);
        int[] intArray14 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray13, intArray14);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray11, intArray14);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray1, intArray14);
        double[][] doubleArray18 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray19 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray18);
        java.lang.Class<?> wildcardClass20 = doubleArray18.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertNotNull(wildcardClass20);
    }

    @Test
    public void test3715() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3715");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray30 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray31 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray32 = new double[][] {};
        double[][] doubleArray33 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray32);
        int[] intArray34 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray33, intArray34);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray31, intArray34);
        double[][] doubleArray37 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray31);
        double[][] doubleArray38 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray37);
        double[][] doubleArray39 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray37);
        java.lang.Class<?> wildcardClass40 = doubleArray37.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertNotNull(wildcardClass40);
    }

    @Test
    public void test3716() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3716");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[] doubleArray9 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray16 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray23 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray30 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray31 = new double[][] { doubleArray9, doubleArray16, doubleArray23, doubleArray30 };
        double[][] doubleArray32 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray31);
        double[][] doubleArray33 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray32);
        double[][] doubleArray34 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray32);
        double[][] doubleArray35 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray32);
        double[][] doubleArray36 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray32);
        double[][] doubleArray37 = new double[][] {};
        double[][] doubleArray38 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray37);
        double[][] doubleArray39 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray37);
        double[][] doubleArray40 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray39);
        double[][] doubleArray41 = null;
        double[][] doubleArray42 = new double[][] {};
        double[][] doubleArray43 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray42);
        double[][] doubleArray44 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray43);
        double[] doubleArray48 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray52 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray56 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray60 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray61 = new double[][] { doubleArray48, doubleArray52, doubleArray56, doubleArray60 };
        double[] doubleArray63 = new double[] { 1 };
        double[] doubleArray65 = new double[] { 1 };
        double[] doubleArray67 = new double[] { 1 };
        double[] doubleArray69 = new double[] { 1 };
        double[] doubleArray71 = new double[] { 1 };
        double[][] doubleArray72 = new double[][] { doubleArray63, doubleArray65, doubleArray67, doubleArray69, doubleArray71 };
        int[] intArray73 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray72, intArray73);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray61, intArray73);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray44, intArray73);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray41, intArray73);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray40, intArray73);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray36, intArray73);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray1, intArray73);
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray71), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[]");
    }

    @Test
    public void test3717() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3717");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[] doubleArray6 = new double[] { 1 };
        double[] doubleArray8 = new double[] { 1 };
        double[] doubleArray10 = new double[] { 1 };
        double[] doubleArray12 = new double[] { 1 };
        double[] doubleArray14 = new double[] { 1 };
        double[][] doubleArray15 = new double[][] { doubleArray6, doubleArray8, doubleArray10, doubleArray12, doubleArray14 };
        int[] intArray16 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray15, intArray16);
        double[][] doubleArray18 = new double[][] {};
        double[][] doubleArray19 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray18);
        int[] intArray20 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray19, intArray20);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray15, intArray20);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray3, intArray20);
        double[][] doubleArray24 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[][] doubleArray25 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray24);
        double[][] doubleArray26 = null;
        double[][] doubleArray27 = new double[][] {};
        double[][] doubleArray28 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray27);
        int[] intArray29 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray28, intArray29);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray26, intArray29);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray25, intArray29);
        double[][] doubleArray33 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray25);
        java.lang.Class<?> wildcardClass34 = doubleArray25.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[]");
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertNotNull(wildcardClass34);
    }

    @Test
    public void test3718() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3718");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray5 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray6 = new double[][] {};
        double[][] doubleArray7 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray6);
        double[][] doubleArray8 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray7);
        double[][] doubleArray9 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray7);
        double[][] doubleArray10 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray7);
        double[][] doubleArray11 = new double[][] {};
        double[][] doubleArray12 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray11);
        double[] doubleArray19 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray26 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray33 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray40 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray41 = new double[][] { doubleArray19, doubleArray26, doubleArray33, doubleArray40 };
        double[][] doubleArray42 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray41);
        double[][] doubleArray43 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray42);
        double[][] doubleArray44 = new double[][] {};
        double[][] doubleArray45 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray44);
        double[] doubleArray47 = new double[] { 1 };
        double[] doubleArray49 = new double[] { 1 };
        double[] doubleArray51 = new double[] { 1 };
        double[] doubleArray53 = new double[] { 1 };
        double[] doubleArray55 = new double[] { 1 };
        double[][] doubleArray56 = new double[][] { doubleArray47, doubleArray49, doubleArray51, doubleArray53, doubleArray55 };
        int[] intArray57 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray56, intArray57);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray44, intArray57);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray43, intArray57);
        double[][] doubleArray61 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray43);
        double[][] doubleArray62 = new double[][] {};
        double[][] doubleArray63 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray62);
        int[] intArray64 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray63, intArray64);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray61, intArray64);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray12, intArray64);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray10, intArray64);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray5, intArray64);
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[]");
    }

    @Test
    public void test3719() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3719");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray5 = new double[][] {};
        double[][] doubleArray6 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray5);
        double[][] doubleArray7 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray5);
        double[][] doubleArray8 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray5);
        double[][] doubleArray9 = new double[][] {};
        double[][] doubleArray10 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray9);
        double[][] doubleArray11 = new double[][] {};
        double[][] doubleArray12 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray11);
        double[] doubleArray14 = new double[] { 1 };
        double[] doubleArray16 = new double[] { 1 };
        double[] doubleArray18 = new double[] { 1 };
        double[] doubleArray20 = new double[] { 1 };
        double[] doubleArray22 = new double[] { 1 };
        double[][] doubleArray23 = new double[][] { doubleArray14, doubleArray16, doubleArray18, doubleArray20, doubleArray22 };
        int[] intArray24 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray23, intArray24);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray11, intArray24);
        double[] doubleArray30 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray34 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray38 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray42 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray43 = new double[][] { doubleArray30, doubleArray34, doubleArray38, doubleArray42 };
        double[] doubleArray45 = new double[] { 1 };
        double[] doubleArray47 = new double[] { 1 };
        double[] doubleArray49 = new double[] { 1 };
        double[] doubleArray51 = new double[] { 1 };
        double[] doubleArray53 = new double[] { 1 };
        double[][] doubleArray54 = new double[][] { doubleArray45, doubleArray47, doubleArray49, doubleArray51, doubleArray53 };
        int[] intArray55 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray54, intArray55);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray43, intArray55);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray11, intArray55);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray9, intArray55);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray5, intArray55);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray4, intArray55);
        double[][] doubleArray62 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray4);
        double[][] doubleArray63 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray4);
        java.lang.Class<?> wildcardClass64 = doubleArray63.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[]");
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertNotNull(wildcardClass64);
    }

    @Test
    public void test3720() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3720");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        int[] intArray2 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray1, intArray2);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray5 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray6 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray5);
        double[][] doubleArray7 = new double[][] {};
        double[][] doubleArray8 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray7);
        double[][] doubleArray9 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray8);
        double[][] doubleArray10 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray9);
        double[][] doubleArray11 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray10);
        double[][] doubleArray12 = null;
        double[][] doubleArray13 = new double[][] {};
        double[][] doubleArray14 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray13);
        double[][] doubleArray15 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray14);
        double[] doubleArray19 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray23 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray27 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray31 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray32 = new double[][] { doubleArray19, doubleArray23, doubleArray27, doubleArray31 };
        double[] doubleArray34 = new double[] { 1 };
        double[] doubleArray36 = new double[] { 1 };
        double[] doubleArray38 = new double[] { 1 };
        double[] doubleArray40 = new double[] { 1 };
        double[] doubleArray42 = new double[] { 1 };
        double[][] doubleArray43 = new double[][] { doubleArray34, doubleArray36, doubleArray38, doubleArray40, doubleArray42 };
        int[] intArray44 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray43, intArray44);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray32, intArray44);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray15, intArray44);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray12, intArray44);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray10, intArray44);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray6, intArray44);
        double[][] doubleArray51 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray6);
        double[][] doubleArray52 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray6);
        double[][] doubleArray53 = new double[][] {};
        double[][] doubleArray54 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray53);
        double[][] doubleArray55 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray54);
        double[] doubleArray59 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray63 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray67 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray71 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray72 = new double[][] { doubleArray59, doubleArray63, doubleArray67, doubleArray71 };
        double[] doubleArray74 = new double[] { 1 };
        double[] doubleArray76 = new double[] { 1 };
        double[] doubleArray78 = new double[] { 1 };
        double[] doubleArray80 = new double[] { 1 };
        double[] doubleArray82 = new double[] { 1 };
        double[][] doubleArray83 = new double[][] { doubleArray74, doubleArray76, doubleArray78, doubleArray80, doubleArray82 };
        int[] intArray84 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray83, intArray84);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray72, intArray84);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray55, intArray84);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray52, intArray84);
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray71), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray74), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray78), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray80), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray82), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray83);
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray84), "[]");
    }

    @Test
    public void test3721() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3721");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray30 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray29);
        double[][] doubleArray31 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        double[][] doubleArray32 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray31);
        double[][] doubleArray33 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray32);
        double[][] doubleArray34 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray33);
        double[][] doubleArray35 = new double[][] {};
        double[][] doubleArray36 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray35);
        double[][] doubleArray37 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray35);
        double[][] doubleArray38 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray37);
        double[][] doubleArray39 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray38);
        double[][] doubleArray40 = new double[][] {};
        double[][] doubleArray41 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray40);
        double[][] doubleArray42 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray41);
        double[] doubleArray46 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray50 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray54 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray58 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray59 = new double[][] { doubleArray46, doubleArray50, doubleArray54, doubleArray58 };
        double[] doubleArray61 = new double[] { 1 };
        double[] doubleArray63 = new double[] { 1 };
        double[] doubleArray65 = new double[] { 1 };
        double[] doubleArray67 = new double[] { 1 };
        double[] doubleArray69 = new double[] { 1 };
        double[][] doubleArray70 = new double[][] { doubleArray61, doubleArray63, doubleArray65, doubleArray67, doubleArray69 };
        int[] intArray71 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray70, intArray71);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray59, intArray71);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray42, intArray71);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray38, intArray71);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray33, intArray71);
        double[][] doubleArray77 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray33);
        double[][] doubleArray78 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray77);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[]");
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertNotNull(doubleArray78);
    }

    @Test
    public void test3722() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3722");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[] doubleArray6 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray10 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray14 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray18 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray19 = new double[][] { doubleArray6, doubleArray10, doubleArray14, doubleArray18 };
        double[] doubleArray21 = new double[] { 1 };
        double[] doubleArray23 = new double[] { 1 };
        double[] doubleArray25 = new double[] { 1 };
        double[] doubleArray27 = new double[] { 1 };
        double[] doubleArray29 = new double[] { 1 };
        double[][] doubleArray30 = new double[][] { doubleArray21, doubleArray23, doubleArray25, doubleArray27, doubleArray29 };
        int[] intArray31 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray30, intArray31);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray19, intArray31);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray2, intArray31);
        double[][] doubleArray35 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray36 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray37 = null;
        double[][] doubleArray38 = new double[][] {};
        double[][] doubleArray39 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray38);
        double[][] doubleArray40 = new double[][] {};
        double[][] doubleArray41 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray40);
        double[] doubleArray43 = new double[] { 1 };
        double[] doubleArray45 = new double[] { 1 };
        double[] doubleArray47 = new double[] { 1 };
        double[] doubleArray49 = new double[] { 1 };
        double[] doubleArray51 = new double[] { 1 };
        double[][] doubleArray52 = new double[][] { doubleArray43, doubleArray45, doubleArray47, doubleArray49, doubleArray51 };
        int[] intArray53 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray52, intArray53);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray40, intArray53);
        double[] doubleArray59 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray63 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray67 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray71 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray72 = new double[][] { doubleArray59, doubleArray63, doubleArray67, doubleArray71 };
        double[] doubleArray74 = new double[] { 1 };
        double[] doubleArray76 = new double[] { 1 };
        double[] doubleArray78 = new double[] { 1 };
        double[] doubleArray80 = new double[] { 1 };
        double[] doubleArray82 = new double[] { 1 };
        double[][] doubleArray83 = new double[][] { doubleArray74, doubleArray76, doubleArray78, doubleArray80, doubleArray82 };
        int[] intArray84 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray83, intArray84);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray72, intArray84);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray40, intArray84);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray39, intArray84);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray37, intArray84);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray36, intArray84);
        double[][] doubleArray91 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray36);
        double[][] doubleArray92 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray91);
        java.lang.Class<?> wildcardClass93 = doubleArray92.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[]");
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray71), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray74), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray78), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray80), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray82), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray83);
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray84), "[]");
        org.junit.Assert.assertNotNull(doubleArray91);
        org.junit.Assert.assertNotNull(doubleArray92);
        org.junit.Assert.assertNotNull(wildcardClass93);
    }

    @Test
    public void test3723() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3723");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[] doubleArray10 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray17 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray24 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray31 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray32 = new double[][] { doubleArray10, doubleArray17, doubleArray24, doubleArray31 };
        double[][] doubleArray33 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray32);
        double[][] doubleArray34 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray32);
        double[][] doubleArray35 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray32);
        double[][] doubleArray36 = new double[][] {};
        double[][] doubleArray37 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray36);
        int[] intArray38 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray37, intArray38);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray35, intArray38);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray3, intArray38);
        double[][] doubleArray42 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[][] doubleArray43 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray42);
        double[][] doubleArray44 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray43);
        double[][] doubleArray45 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray43);
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertNotNull(doubleArray45);
    }

    @Test
    public void test3724() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3724");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[] doubleArray3 = new double[] { 1 };
        double[] doubleArray5 = new double[] { 1 };
        double[] doubleArray7 = new double[] { 1 };
        double[] doubleArray9 = new double[] { 1 };
        double[] doubleArray11 = new double[] { 1 };
        double[][] doubleArray12 = new double[][] { doubleArray3, doubleArray5, doubleArray7, doubleArray9, doubleArray11 };
        int[] intArray13 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray12, intArray13);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray0, intArray13);
        double[] doubleArray22 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray29 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray36 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray43 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray44 = new double[][] { doubleArray22, doubleArray29, doubleArray36, doubleArray43 };
        double[][] doubleArray45 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray44);
        double[][] doubleArray46 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray45);
        double[][] doubleArray47 = new double[][] {};
        double[][] doubleArray48 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray47);
        double[] doubleArray50 = new double[] { 1 };
        double[] doubleArray52 = new double[] { 1 };
        double[] doubleArray54 = new double[] { 1 };
        double[] doubleArray56 = new double[] { 1 };
        double[] doubleArray58 = new double[] { 1 };
        double[][] doubleArray59 = new double[][] { doubleArray50, doubleArray52, doubleArray54, doubleArray56, doubleArray58 };
        int[] intArray60 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray59, intArray60);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray47, intArray60);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray46, intArray60);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray0, intArray60);
        double[][] doubleArray65 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray66 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[]");
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[]");
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertNotNull(doubleArray66);
    }

    @Test
    public void test3725() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3725");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = new double[][] {};
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[] doubleArray5 = new double[] { 1 };
        double[] doubleArray7 = new double[] { 1 };
        double[] doubleArray9 = new double[] { 1 };
        double[] doubleArray11 = new double[] { 1 };
        double[] doubleArray13 = new double[] { 1 };
        double[][] doubleArray14 = new double[][] { doubleArray5, doubleArray7, doubleArray9, doubleArray11, doubleArray13 };
        int[] intArray15 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray14, intArray15);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray2, intArray15);
        double[] doubleArray21 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray25 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray29 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray33 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray34 = new double[][] { doubleArray21, doubleArray25, doubleArray29, doubleArray33 };
        double[] doubleArray36 = new double[] { 1 };
        double[] doubleArray38 = new double[] { 1 };
        double[] doubleArray40 = new double[] { 1 };
        double[] doubleArray42 = new double[] { 1 };
        double[] doubleArray44 = new double[] { 1 };
        double[][] doubleArray45 = new double[][] { doubleArray36, doubleArray38, doubleArray40, doubleArray42, doubleArray44 };
        int[] intArray46 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray45, intArray46);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray34, intArray46);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray2, intArray46);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray1, intArray46);
        double[][] doubleArray51 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray52 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray51);
        double[][] doubleArray53 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray52);
        double[][] doubleArray54 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray53);
        double[][] doubleArray55 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray53);
        double[][] doubleArray56 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray53);
        double[][] doubleArray57 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray56);
        double[][] doubleArray58 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray56);
        double[][] doubleArray59 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray58);
        double[][] doubleArray60 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray58);
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertNotNull(doubleArray60);
    }

    @Test
    public void test3726() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3726");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray5 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray6 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[] doubleArray8 = new double[] { 1 };
        double[] doubleArray10 = new double[] { 1 };
        double[] doubleArray12 = new double[] { 1 };
        double[] doubleArray14 = new double[] { 1 };
        double[] doubleArray16 = new double[] { 1 };
        double[][] doubleArray17 = new double[][] { doubleArray8, doubleArray10, doubleArray12, doubleArray14, doubleArray16 };
        int[] intArray18 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray17, intArray18);
        double[] doubleArray26 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray33 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray40 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray47 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray48 = new double[][] { doubleArray26, doubleArray33, doubleArray40, doubleArray47 };
        double[][] doubleArray49 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray48);
        double[] doubleArray51 = new double[] { 1 };
        double[] doubleArray53 = new double[] { 1 };
        double[] doubleArray55 = new double[] { 1 };
        double[] doubleArray57 = new double[] { 1 };
        double[] doubleArray59 = new double[] { 1 };
        double[][] doubleArray60 = new double[][] { doubleArray51, doubleArray53, doubleArray55, doubleArray57, doubleArray59 };
        int[] intArray61 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray60, intArray61);
        double[][] doubleArray63 = new double[][] {};
        double[][] doubleArray64 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray63);
        int[] intArray65 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray64, intArray65);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray60, intArray65);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray48, intArray65);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray17, intArray65);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray6, intArray65);
        double[][] doubleArray71 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray6);
        double[][] doubleArray72 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray6);
        double[][] doubleArray73 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray72);
        double[][] doubleArray74 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray72);
        double[][] doubleArray75 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray72);
        java.lang.Class<?> wildcardClass76 = doubleArray72.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[]");
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[]");
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[]");
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertNotNull(wildcardClass76);
    }

    @Test
    public void test3727() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3727");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = new double[][] {};
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[] doubleArray8 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray12 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray16 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray20 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray21 = new double[][] { doubleArray8, doubleArray12, doubleArray16, doubleArray20 };
        double[] doubleArray23 = new double[] { 1 };
        double[] doubleArray25 = new double[] { 1 };
        double[] doubleArray27 = new double[] { 1 };
        double[] doubleArray29 = new double[] { 1 };
        double[] doubleArray31 = new double[] { 1 };
        double[][] doubleArray32 = new double[][] { doubleArray23, doubleArray25, doubleArray27, doubleArray29, doubleArray31 };
        int[] intArray33 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray32, intArray33);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray21, intArray33);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray3, intArray33);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray1, intArray33);
        double[][] doubleArray38 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray39 = new double[][] {};
        double[][] doubleArray40 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray39);
        double[] doubleArray42 = new double[] { 1 };
        double[] doubleArray44 = new double[] { 1 };
        double[] doubleArray46 = new double[] { 1 };
        double[] doubleArray48 = new double[] { 1 };
        double[] doubleArray50 = new double[] { 1 };
        double[][] doubleArray51 = new double[][] { doubleArray42, doubleArray44, doubleArray46, doubleArray48, doubleArray50 };
        int[] intArray52 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray51, intArray52);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray39, intArray52);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray1, intArray52);
        double[][] doubleArray56 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray57 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray56);
        double[][] doubleArray58 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray56);
        double[][] doubleArray59 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray58);
        double[][] doubleArray60 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray58);
        double[][] doubleArray61 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray60);
        java.lang.Class<?> wildcardClass62 = doubleArray61.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[]");
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertNotNull(wildcardClass62);
    }

    @Test
    public void test3728() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3728");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[][] doubleArray5 = null;
        double[][] doubleArray6 = new double[][] {};
        double[][] doubleArray7 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray6);
        double[][] doubleArray8 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray7);
        double[] doubleArray12 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray16 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray20 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray24 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray25 = new double[][] { doubleArray12, doubleArray16, doubleArray20, doubleArray24 };
        double[] doubleArray27 = new double[] { 1 };
        double[] doubleArray29 = new double[] { 1 };
        double[] doubleArray31 = new double[] { 1 };
        double[] doubleArray33 = new double[] { 1 };
        double[] doubleArray35 = new double[] { 1 };
        double[][] doubleArray36 = new double[][] { doubleArray27, doubleArray29, doubleArray31, doubleArray33, doubleArray35 };
        int[] intArray37 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray36, intArray37);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray25, intArray37);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray8, intArray37);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray5, intArray37);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray3, intArray37);
        double[][] doubleArray43 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[][] doubleArray44 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray43);
        double[][] doubleArray45 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray44);
        double[][] doubleArray46 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray45);
        double[][] doubleArray47 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray46);
        java.lang.Class<?> wildcardClass48 = doubleArray46.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertNotNull(wildcardClass48);
    }

    @Test
    public void test3729() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3729");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray4 = new double[][] {};
        double[][] doubleArray5 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray4);
        double[] doubleArray7 = new double[] { 1 };
        double[] doubleArray9 = new double[] { 1 };
        double[] doubleArray11 = new double[] { 1 };
        double[] doubleArray13 = new double[] { 1 };
        double[] doubleArray15 = new double[] { 1 };
        double[][] doubleArray16 = new double[][] { doubleArray7, doubleArray9, doubleArray11, doubleArray13, doubleArray15 };
        int[] intArray17 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray16, intArray17);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray4, intArray17);
        double[] doubleArray23 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray27 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray31 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray35 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray36 = new double[][] { doubleArray23, doubleArray27, doubleArray31, doubleArray35 };
        double[] doubleArray38 = new double[] { 1 };
        double[] doubleArray40 = new double[] { 1 };
        double[] doubleArray42 = new double[] { 1 };
        double[] doubleArray44 = new double[] { 1 };
        double[] doubleArray46 = new double[] { 1 };
        double[][] doubleArray47 = new double[][] { doubleArray38, doubleArray40, doubleArray42, doubleArray44, doubleArray46 };
        int[] intArray48 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray47, intArray48);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray36, intArray48);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray4, intArray48);
        double[] doubleArray53 = new double[] { 1 };
        double[] doubleArray55 = new double[] { 1 };
        double[] doubleArray57 = new double[] { 1 };
        double[] doubleArray59 = new double[] { 1 };
        double[] doubleArray61 = new double[] { 1 };
        double[][] doubleArray62 = new double[][] { doubleArray53, doubleArray55, doubleArray57, doubleArray59, doubleArray61 };
        int[] intArray63 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray62, intArray63);
        double[][] doubleArray65 = new double[][] {};
        double[][] doubleArray66 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray65);
        int[] intArray67 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray66, intArray67);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray62, intArray67);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray4, intArray67);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray3, intArray67);
        double[][] doubleArray72 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[][] doubleArray73 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray72);
        double[][] doubleArray74 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray73);
        double[][] doubleArray75 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray74);
        double[][] doubleArray76 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray74);
        double[][] doubleArray77 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray74);
        java.lang.Class<?> wildcardClass78 = doubleArray77.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[]");
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[]");
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[]");
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertNotNull(wildcardClass78);
    }

    @Test
    public void test3730() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3730");
        double[][] doubleArray0 = null;
        double[][] doubleArray1 = null;
        double[][] doubleArray2 = null;
        double[][] doubleArray3 = null;
        double[] doubleArray7 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray11 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray15 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray19 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray20 = new double[][] { doubleArray7, doubleArray11, doubleArray15, doubleArray19 };
        double[] doubleArray22 = new double[] { 1 };
        double[] doubleArray24 = new double[] { 1 };
        double[] doubleArray26 = new double[] { 1 };
        double[] doubleArray28 = new double[] { 1 };
        double[] doubleArray30 = new double[] { 1 };
        double[][] doubleArray31 = new double[][] { doubleArray22, doubleArray24, doubleArray26, doubleArray28, doubleArray30 };
        int[] intArray32 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray31, intArray32);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray20, intArray32);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray3, intArray32);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray2, intArray32);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray1, intArray32);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray0, intArray32);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[]");
    }

    @Test
    public void test3731() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3731");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray30 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray29);
        double[][] doubleArray31 = new double[][] {};
        double[][] doubleArray32 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray31);
        double[] doubleArray34 = new double[] { 1 };
        double[] doubleArray36 = new double[] { 1 };
        double[] doubleArray38 = new double[] { 1 };
        double[] doubleArray40 = new double[] { 1 };
        double[] doubleArray42 = new double[] { 1 };
        double[][] doubleArray43 = new double[][] { doubleArray34, doubleArray36, doubleArray38, doubleArray40, doubleArray42 };
        int[] intArray44 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray43, intArray44);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray31, intArray44);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray30, intArray44);
        double[][] doubleArray48 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        double[][] doubleArray49 = new double[][] {};
        double[][] doubleArray50 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray49);
        int[] intArray51 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray50, intArray51);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray48, intArray51);
        double[][] doubleArray54 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray48);
        double[][] doubleArray55 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray54);
        double[][] doubleArray56 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray55);
        double[][] doubleArray57 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray56);
        double[][] doubleArray58 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray56);
        double[][] doubleArray59 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray56);
        double[][] doubleArray60 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray56);
        double[][] doubleArray61 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray60);
        java.lang.Class<?> wildcardClass62 = doubleArray60.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[]");
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertNotNull(wildcardClass62);
    }

    @Test
    public void test3732() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3732");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray30 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray29);
        double[][] doubleArray31 = new double[][] {};
        double[][] doubleArray32 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray31);
        double[] doubleArray34 = new double[] { 1 };
        double[] doubleArray36 = new double[] { 1 };
        double[] doubleArray38 = new double[] { 1 };
        double[] doubleArray40 = new double[] { 1 };
        double[] doubleArray42 = new double[] { 1 };
        double[][] doubleArray43 = new double[][] { doubleArray34, doubleArray36, doubleArray38, doubleArray40, doubleArray42 };
        int[] intArray44 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray43, intArray44);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray31, intArray44);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray30, intArray44);
        double[][] doubleArray48 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        double[][] doubleArray49 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray48);
        double[][] doubleArray50 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray48);
        double[][] doubleArray51 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray50);
        double[][] doubleArray52 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray51);
        double[][] doubleArray53 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray52);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertNotNull(doubleArray53);
    }

    @Test
    public void test3733() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3733");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[] doubleArray6 = new double[] { 1 };
        double[] doubleArray8 = new double[] { 1 };
        double[] doubleArray10 = new double[] { 1 };
        double[] doubleArray12 = new double[] { 1 };
        double[] doubleArray14 = new double[] { 1 };
        double[][] doubleArray15 = new double[][] { doubleArray6, doubleArray8, doubleArray10, doubleArray12, doubleArray14 };
        int[] intArray16 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray15, intArray16);
        double[][] doubleArray18 = new double[][] {};
        double[][] doubleArray19 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray18);
        int[] intArray20 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray19, intArray20);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray15, intArray20);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray3, intArray20);
        double[][] doubleArray24 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[][] doubleArray25 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray24);
        double[][] doubleArray26 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray25);
        double[][] doubleArray27 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray25);
        java.lang.Class<?> wildcardClass28 = doubleArray25.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[]");
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertNotNull(wildcardClass28);
    }

    @Test
    public void test3734() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3734");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[] doubleArray8 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray12 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray16 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray20 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray21 = new double[][] { doubleArray8, doubleArray12, doubleArray16, doubleArray20 };
        double[] doubleArray23 = new double[] { 1 };
        double[] doubleArray25 = new double[] { 1 };
        double[] doubleArray27 = new double[] { 1 };
        double[] doubleArray29 = new double[] { 1 };
        double[] doubleArray31 = new double[] { 1 };
        double[][] doubleArray32 = new double[][] { doubleArray23, doubleArray25, doubleArray27, doubleArray29, doubleArray31 };
        int[] intArray33 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray32, intArray33);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray21, intArray33);
        double[][] doubleArray36 = new double[][] {};
        double[][] doubleArray37 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray36);
        double[][] doubleArray38 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray37);
        double[][] doubleArray39 = new double[][] {};
        double[][] doubleArray40 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray39);
        double[][] doubleArray41 = new double[][] {};
        double[][] doubleArray42 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray41);
        double[] doubleArray44 = new double[] { 1 };
        double[] doubleArray46 = new double[] { 1 };
        double[] doubleArray48 = new double[] { 1 };
        double[] doubleArray50 = new double[] { 1 };
        double[] doubleArray52 = new double[] { 1 };
        double[][] doubleArray53 = new double[][] { doubleArray44, doubleArray46, doubleArray48, doubleArray50, doubleArray52 };
        int[] intArray54 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray53, intArray54);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray41, intArray54);
        double[] doubleArray60 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray64 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray68 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray72 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray73 = new double[][] { doubleArray60, doubleArray64, doubleArray68, doubleArray72 };
        double[] doubleArray75 = new double[] { 1 };
        double[] doubleArray77 = new double[] { 1 };
        double[] doubleArray79 = new double[] { 1 };
        double[] doubleArray81 = new double[] { 1 };
        double[] doubleArray83 = new double[] { 1 };
        double[][] doubleArray84 = new double[][] { doubleArray75, doubleArray77, doubleArray79, doubleArray81, doubleArray83 };
        int[] intArray85 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray84, intArray85);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray73, intArray85);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray41, intArray85);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray40, intArray85);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray38, intArray85);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray21, intArray85);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray3, intArray85);
        double[][] doubleArray93 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[][] doubleArray94 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[][] doubleArray95 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[][] doubleArray96 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray95);
        double[][] doubleArray97 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray95);
        java.lang.Class<?> wildcardClass98 = doubleArray97.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[]");
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray75), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray77), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray79), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray81), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray83), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray84);
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray85), "[]");
        org.junit.Assert.assertNotNull(doubleArray93);
        org.junit.Assert.assertNotNull(doubleArray94);
        org.junit.Assert.assertNotNull(doubleArray95);
        org.junit.Assert.assertNotNull(doubleArray96);
        org.junit.Assert.assertNotNull(doubleArray97);
        org.junit.Assert.assertNotNull(wildcardClass98);
    }

    @Test
    public void test3735() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3735");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[] doubleArray6 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray10 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray14 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray18 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray19 = new double[][] { doubleArray6, doubleArray10, doubleArray14, doubleArray18 };
        double[] doubleArray21 = new double[] { 1 };
        double[] doubleArray23 = new double[] { 1 };
        double[] doubleArray25 = new double[] { 1 };
        double[] doubleArray27 = new double[] { 1 };
        double[] doubleArray29 = new double[] { 1 };
        double[][] doubleArray30 = new double[][] { doubleArray21, doubleArray23, doubleArray25, doubleArray27, doubleArray29 };
        int[] intArray31 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray30, intArray31);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray19, intArray31);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray1, intArray31);
        double[][] doubleArray35 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray36 = new double[][] {};
        double[][] doubleArray37 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray36);
        int[] intArray38 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray37, intArray38);
        double[] doubleArray41 = new double[] { 1 };
        double[] doubleArray43 = new double[] { 1 };
        double[] doubleArray45 = new double[] { 1 };
        double[] doubleArray47 = new double[] { 1 };
        double[] doubleArray49 = new double[] { 1 };
        double[][] doubleArray50 = new double[][] { doubleArray41, doubleArray43, doubleArray45, doubleArray47, doubleArray49 };
        int[] intArray51 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray50, intArray51);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray37, intArray51);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray35, intArray51);
        java.lang.Class<?> wildcardClass55 = doubleArray35.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[]");
        org.junit.Assert.assertNotNull(wildcardClass55);
    }

    @Test
    public void test3736() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3736");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[] doubleArray31 = new double[] { 1 };
        double[] doubleArray33 = new double[] { 1 };
        double[] doubleArray35 = new double[] { 1 };
        double[] doubleArray37 = new double[] { 1 };
        double[] doubleArray39 = new double[] { 1 };
        double[][] doubleArray40 = new double[][] { doubleArray31, doubleArray33, doubleArray35, doubleArray37, doubleArray39 };
        int[] intArray41 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray40, intArray41);
        double[][] doubleArray43 = new double[][] {};
        double[][] doubleArray44 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray43);
        int[] intArray45 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray44, intArray45);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray40, intArray45);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray28, intArray45);
        double[][] doubleArray49 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray50 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray49);
        double[][] doubleArray51 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray50);
        double[][] doubleArray52 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray50);
        double[][] doubleArray53 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray50);
        double[][] doubleArray54 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray53);
        double[][] doubleArray55 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray53);
        double[][] doubleArray56 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray53);
        java.lang.Class<?> wildcardClass57 = doubleArray56.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertNotNull(wildcardClass57);
    }

    @Test
    public void test3737() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3737");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray30 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray29);
        double[][] doubleArray31 = new double[][] {};
        double[][] doubleArray32 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray31);
        double[] doubleArray34 = new double[] { 1 };
        double[] doubleArray36 = new double[] { 1 };
        double[] doubleArray38 = new double[] { 1 };
        double[] doubleArray40 = new double[] { 1 };
        double[] doubleArray42 = new double[] { 1 };
        double[][] doubleArray43 = new double[][] { doubleArray34, doubleArray36, doubleArray38, doubleArray40, doubleArray42 };
        int[] intArray44 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray43, intArray44);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray31, intArray44);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray30, intArray44);
        double[][] doubleArray48 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        double[] doubleArray50 = new double[] { 1 };
        double[] doubleArray52 = new double[] { 1 };
        double[] doubleArray54 = new double[] { 1 };
        double[] doubleArray56 = new double[] { 1 };
        double[] doubleArray58 = new double[] { 1 };
        double[][] doubleArray59 = new double[][] { doubleArray50, doubleArray52, doubleArray54, doubleArray56, doubleArray58 };
        int[] intArray60 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray59, intArray60);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray48, intArray60);
        double[][] doubleArray63 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray48);
        double[][] doubleArray64 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray63);
        double[][] doubleArray65 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray63);
        double[][] doubleArray66 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray63);
        double[][] doubleArray67 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray63);
        double[][] doubleArray68 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray67);
        java.lang.Class<?> wildcardClass69 = doubleArray68.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[]");
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertNotNull(wildcardClass69);
    }

    @Test
    public void test3738() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3738");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray5 = new double[][] {};
        double[][] doubleArray6 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray5);
        double[][] doubleArray7 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray6);
        double[][] doubleArray8 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray7);
        double[][] doubleArray9 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray8);
        double[][] doubleArray10 = new double[][] {};
        double[][] doubleArray11 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray10);
        double[] doubleArray18 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray25 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray32 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray39 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray40 = new double[][] { doubleArray18, doubleArray25, doubleArray32, doubleArray39 };
        double[][] doubleArray41 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray40);
        double[][] doubleArray42 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray40);
        double[][] doubleArray43 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray40);
        double[][] doubleArray44 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray43);
        double[] doubleArray51 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray58 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray65 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray72 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray73 = new double[][] { doubleArray51, doubleArray58, doubleArray65, doubleArray72 };
        double[][] doubleArray74 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray73);
        double[] doubleArray76 = new double[] { 1 };
        double[] doubleArray78 = new double[] { 1 };
        double[] doubleArray80 = new double[] { 1 };
        double[] doubleArray82 = new double[] { 1 };
        double[] doubleArray84 = new double[] { 1 };
        double[][] doubleArray85 = new double[][] { doubleArray76, doubleArray78, doubleArray80, doubleArray82, doubleArray84 };
        int[] intArray86 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray85, intArray86);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray74, intArray86);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray44, intArray86);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray11, intArray86);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray9, intArray86);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray4, intArray86);
        java.lang.Class<?> wildcardClass93 = doubleArray4.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray78), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray80), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray82), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray84), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray85);
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray86), "[]");
        org.junit.Assert.assertNotNull(wildcardClass93);
    }

    @Test
    public void test3739() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3739");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray4 = new double[][] {};
        double[][] doubleArray5 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray4);
        double[][] doubleArray6 = new double[][] {};
        double[][] doubleArray7 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray6);
        double[] doubleArray9 = new double[] { 1 };
        double[] doubleArray11 = new double[] { 1 };
        double[] doubleArray13 = new double[] { 1 };
        double[] doubleArray15 = new double[] { 1 };
        double[] doubleArray17 = new double[] { 1 };
        double[][] doubleArray18 = new double[][] { doubleArray9, doubleArray11, doubleArray13, doubleArray15, doubleArray17 };
        int[] intArray19 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray18, intArray19);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray6, intArray19);
        double[] doubleArray25 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray29 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray33 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray37 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray38 = new double[][] { doubleArray25, doubleArray29, doubleArray33, doubleArray37 };
        double[] doubleArray40 = new double[] { 1 };
        double[] doubleArray42 = new double[] { 1 };
        double[] doubleArray44 = new double[] { 1 };
        double[] doubleArray46 = new double[] { 1 };
        double[] doubleArray48 = new double[] { 1 };
        double[][] doubleArray49 = new double[][] { doubleArray40, doubleArray42, doubleArray44, doubleArray46, doubleArray48 };
        int[] intArray50 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray49, intArray50);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray38, intArray50);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray6, intArray50);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray4, intArray50);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray1, intArray50);
        double[][] doubleArray56 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray57 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray58 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray57);
        double[][] doubleArray59 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray57);
        double[][] doubleArray60 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray59);
        double[][] doubleArray61 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray60);
        double[][] doubleArray62 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray60);
        double[][] doubleArray63 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray62);
        double[][] doubleArray64 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray62);
        java.lang.Class<?> wildcardClass65 = doubleArray62.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[]");
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertNotNull(wildcardClass65);
    }

    @Test
    public void test3740() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3740");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[] doubleArray31 = new double[] { 1 };
        double[] doubleArray33 = new double[] { 1 };
        double[] doubleArray35 = new double[] { 1 };
        double[] doubleArray37 = new double[] { 1 };
        double[] doubleArray39 = new double[] { 1 };
        double[][] doubleArray40 = new double[][] { doubleArray31, doubleArray33, doubleArray35, doubleArray37, doubleArray39 };
        int[] intArray41 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray40, intArray41);
        double[][] doubleArray43 = new double[][] {};
        double[][] doubleArray44 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray43);
        int[] intArray45 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray44, intArray45);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray40, intArray45);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray28, intArray45);
        double[][] doubleArray49 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray50 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray51 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray52 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray53 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray54 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray53);
        double[][] doubleArray55 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray54);
        double[][] doubleArray56 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray54);
        double[][] doubleArray57 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray56);
        double[][] doubleArray58 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray57);
        java.lang.Class<?> wildcardClass59 = doubleArray58.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertNotNull(wildcardClass59);
    }

    @Test
    public void test3741() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3741");
        double[][] doubleArray0 = null;
        double[] doubleArray7 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray14 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray21 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray28 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray29 = new double[][] { doubleArray7, doubleArray14, doubleArray21, doubleArray28 };
        double[][] doubleArray30 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray29);
        double[][] doubleArray31 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        double[][] doubleArray32 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray31);
        double[][] doubleArray33 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray31);
        double[][] doubleArray34 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray31);
        double[][] doubleArray35 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray31);
        double[][] doubleArray36 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray31);
        double[][] doubleArray37 = null;
        double[] doubleArray44 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray51 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray58 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray65 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray66 = new double[][] { doubleArray44, doubleArray51, doubleArray58, doubleArray65 };
        double[][] doubleArray67 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray66);
        double[][] doubleArray68 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray66);
        double[][] doubleArray69 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray66);
        double[][] doubleArray70 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray69);
        double[][] doubleArray71 = new double[][] {};
        double[][] doubleArray72 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray71);
        int[] intArray73 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray72, intArray73);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray70, intArray73);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray37, intArray73);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray31, intArray73);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray0, intArray73);
        java.lang.Class<?> wildcardClass79 = intArray73.getClass();
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[]");
        org.junit.Assert.assertNotNull(wildcardClass79);
    }

    @Test
    public void test3742() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3742");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[] doubleArray31 = new double[] { 1 };
        double[] doubleArray33 = new double[] { 1 };
        double[] doubleArray35 = new double[] { 1 };
        double[] doubleArray37 = new double[] { 1 };
        double[] doubleArray39 = new double[] { 1 };
        double[][] doubleArray40 = new double[][] { doubleArray31, doubleArray33, doubleArray35, doubleArray37, doubleArray39 };
        int[] intArray41 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray40, intArray41);
        double[][] doubleArray43 = new double[][] {};
        double[][] doubleArray44 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray43);
        int[] intArray45 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray44, intArray45);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray40, intArray45);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray28, intArray45);
        double[][] doubleArray49 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray50 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray49);
        double[][] doubleArray51 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray50);
        double[][] doubleArray52 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray51);
        double[][] doubleArray53 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray52);
        double[][] doubleArray54 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray52);
        double[][] doubleArray55 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray54);
        double[][] doubleArray56 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray55);
        double[][] doubleArray57 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray56);
        double[][] doubleArray58 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray56);
        double[][] doubleArray59 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray56);
        java.lang.Class<?> wildcardClass60 = doubleArray56.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertNotNull(wildcardClass60);
    }

    @Test
    public void test3743() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3743");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[][] doubleArray5 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray4);
        double[][] doubleArray6 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray5);
        double[][] doubleArray7 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray6);
        double[][] doubleArray8 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray7);
        double[][] doubleArray9 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray7);
        double[][] doubleArray10 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray9);
        double[][] doubleArray11 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray9);
        java.lang.Class<?> wildcardClass12 = doubleArray11.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertNotNull(wildcardClass12);
    }

    @Test
    public void test3744() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3744");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = new double[][] {};
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[] doubleArray5 = new double[] { 1 };
        double[] doubleArray7 = new double[] { 1 };
        double[] doubleArray9 = new double[] { 1 };
        double[] doubleArray11 = new double[] { 1 };
        double[] doubleArray13 = new double[] { 1 };
        double[][] doubleArray14 = new double[][] { doubleArray5, doubleArray7, doubleArray9, doubleArray11, doubleArray13 };
        int[] intArray15 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray14, intArray15);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray2, intArray15);
        double[] doubleArray21 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray25 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray29 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray33 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray34 = new double[][] { doubleArray21, doubleArray25, doubleArray29, doubleArray33 };
        double[] doubleArray36 = new double[] { 1 };
        double[] doubleArray38 = new double[] { 1 };
        double[] doubleArray40 = new double[] { 1 };
        double[] doubleArray42 = new double[] { 1 };
        double[] doubleArray44 = new double[] { 1 };
        double[][] doubleArray45 = new double[][] { doubleArray36, doubleArray38, doubleArray40, doubleArray42, doubleArray44 };
        int[] intArray46 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray45, intArray46);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray34, intArray46);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray2, intArray46);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray1, intArray46);
        double[][] doubleArray51 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray52 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray51);
        double[][] doubleArray53 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray52);
        double[][] doubleArray54 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray53);
        double[][] doubleArray55 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray53);
        double[][] doubleArray56 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray53);
        double[][] doubleArray57 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray53);
        double[][] doubleArray58 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray53);
        double[][] doubleArray59 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray58);
        java.lang.Class<?> wildcardClass60 = doubleArray59.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertNotNull(wildcardClass60);
    }

    @Test
    public void test3745() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3745");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray5 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray6 = new double[][] {};
        double[][] doubleArray7 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray6);
        double[][] doubleArray8 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray6);
        double[][] doubleArray9 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray6);
        double[][] doubleArray10 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray9);
        double[] doubleArray17 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray24 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray31 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray38 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray39 = new double[][] { doubleArray17, doubleArray24, doubleArray31, doubleArray38 };
        double[][] doubleArray40 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray39);
        double[][] doubleArray41 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray40);
        double[][] doubleArray42 = new double[][] {};
        double[][] doubleArray43 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray42);
        double[] doubleArray45 = new double[] { 1 };
        double[] doubleArray47 = new double[] { 1 };
        double[] doubleArray49 = new double[] { 1 };
        double[] doubleArray51 = new double[] { 1 };
        double[] doubleArray53 = new double[] { 1 };
        double[][] doubleArray54 = new double[][] { doubleArray45, doubleArray47, doubleArray49, doubleArray51, doubleArray53 };
        int[] intArray55 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray54, intArray55);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray42, intArray55);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray41, intArray55);
        double[][] doubleArray59 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray41);
        double[] doubleArray61 = new double[] { 1 };
        double[] doubleArray63 = new double[] { 1 };
        double[] doubleArray65 = new double[] { 1 };
        double[] doubleArray67 = new double[] { 1 };
        double[] doubleArray69 = new double[] { 1 };
        double[][] doubleArray70 = new double[][] { doubleArray61, doubleArray63, doubleArray65, doubleArray67, doubleArray69 };
        int[] intArray71 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray70, intArray71);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray59, intArray71);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray9, intArray71);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray5, intArray71);
        double[][] doubleArray76 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray5);
        double[][] doubleArray77 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray5);
        double[][] doubleArray78 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray5);
        java.lang.Class<?> wildcardClass79 = doubleArray78.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[]");
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[]");
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertNotNull(wildcardClass79);
    }

    @Test
    public void test3746() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3746");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray30 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray29);
        double[][] doubleArray31 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        double[][] doubleArray32 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray31);
        double[][] doubleArray33 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray32);
        double[][] doubleArray34 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray33);
        double[][] doubleArray35 = new double[][] {};
        double[][] doubleArray36 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray35);
        double[][] doubleArray37 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray35);
        double[][] doubleArray38 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray37);
        double[][] doubleArray39 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray38);
        double[][] doubleArray40 = new double[][] {};
        double[][] doubleArray41 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray40);
        double[][] doubleArray42 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray41);
        double[] doubleArray46 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray50 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray54 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray58 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray59 = new double[][] { doubleArray46, doubleArray50, doubleArray54, doubleArray58 };
        double[] doubleArray61 = new double[] { 1 };
        double[] doubleArray63 = new double[] { 1 };
        double[] doubleArray65 = new double[] { 1 };
        double[] doubleArray67 = new double[] { 1 };
        double[] doubleArray69 = new double[] { 1 };
        double[][] doubleArray70 = new double[][] { doubleArray61, doubleArray63, doubleArray65, doubleArray67, doubleArray69 };
        int[] intArray71 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray70, intArray71);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray59, intArray71);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray42, intArray71);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray38, intArray71);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray33, intArray71);
        double[][] doubleArray77 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray33);
        double[][] doubleArray78 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray33);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[]");
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertNotNull(doubleArray78);
    }

    @Test
    public void test3747() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3747");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray5 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray4);
        double[][] doubleArray6 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray4);
        java.lang.Class<?> wildcardClass7 = doubleArray6.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(wildcardClass7);
    }

    @Test
    public void test3748() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3748");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        int[] intArray2 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray1, intArray2);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray5 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray4);
        double[][] doubleArray6 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray4);
        double[][] doubleArray7 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray6);
        double[][] doubleArray8 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray6);
        double[][] doubleArray9 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray6);
        double[][] doubleArray10 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray6);
        double[][] doubleArray11 = null;
        double[][] doubleArray12 = new double[][] {};
        double[][] doubleArray13 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray12);
        int[] intArray14 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray13, intArray14);
        double[][] doubleArray16 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray13);
        double[][] doubleArray17 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray13);
        double[][] doubleArray18 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray17);
        double[][] doubleArray19 = new double[][] {};
        double[][] doubleArray20 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray19);
        double[][] doubleArray21 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray20);
        double[][] doubleArray22 = new double[][] {};
        double[][] doubleArray23 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray22);
        double[][] doubleArray24 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray22);
        double[][] doubleArray25 = new double[][] {};
        double[][] doubleArray26 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray25);
        double[][] doubleArray27 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray26);
        double[][] doubleArray28 = new double[][] {};
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray30 = new double[][] {};
        double[][] doubleArray31 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        double[] doubleArray33 = new double[] { 1 };
        double[] doubleArray35 = new double[] { 1 };
        double[] doubleArray37 = new double[] { 1 };
        double[] doubleArray39 = new double[] { 1 };
        double[] doubleArray41 = new double[] { 1 };
        double[][] doubleArray42 = new double[][] { doubleArray33, doubleArray35, doubleArray37, doubleArray39, doubleArray41 };
        int[] intArray43 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray42, intArray43);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray30, intArray43);
        double[] doubleArray49 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray53 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray57 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray61 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray62 = new double[][] { doubleArray49, doubleArray53, doubleArray57, doubleArray61 };
        double[] doubleArray64 = new double[] { 1 };
        double[] doubleArray66 = new double[] { 1 };
        double[] doubleArray68 = new double[] { 1 };
        double[] doubleArray70 = new double[] { 1 };
        double[] doubleArray72 = new double[] { 1 };
        double[][] doubleArray73 = new double[][] { doubleArray64, doubleArray66, doubleArray68, doubleArray70, doubleArray72 };
        int[] intArray74 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray73, intArray74);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray62, intArray74);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray30, intArray74);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray29, intArray74);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray27, intArray74);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray22, intArray74);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray21, intArray74);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray18, intArray74);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray11, intArray74);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray6, intArray74);
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray66), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray70), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[]");
    }

    @Test
    public void test3749() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3749");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray30 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray31 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[] doubleArray33 = new double[] { 1 };
        double[] doubleArray35 = new double[] { 1 };
        double[] doubleArray37 = new double[] { 1 };
        double[] doubleArray39 = new double[] { 1 };
        double[] doubleArray41 = new double[] { 1 };
        double[][] doubleArray42 = new double[][] { doubleArray33, doubleArray35, doubleArray37, doubleArray39, doubleArray41 };
        int[] intArray43 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray42, intArray43);
        double[] doubleArray51 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray58 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray65 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray72 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray73 = new double[][] { doubleArray51, doubleArray58, doubleArray65, doubleArray72 };
        double[][] doubleArray74 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray73);
        double[] doubleArray76 = new double[] { 1 };
        double[] doubleArray78 = new double[] { 1 };
        double[] doubleArray80 = new double[] { 1 };
        double[] doubleArray82 = new double[] { 1 };
        double[] doubleArray84 = new double[] { 1 };
        double[][] doubleArray85 = new double[][] { doubleArray76, doubleArray78, doubleArray80, doubleArray82, doubleArray84 };
        int[] intArray86 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray85, intArray86);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray74, intArray86);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray42, intArray86);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray31, intArray86);
        double[][] doubleArray91 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray31);
        double[][] doubleArray92 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray91);
        double[][] doubleArray93 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray91);
        double[][] doubleArray94 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray93);
        double[][] doubleArray95 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray94);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray78), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray80), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray82), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray84), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray85);
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray86), "[]");
        org.junit.Assert.assertNotNull(doubleArray91);
        org.junit.Assert.assertNotNull(doubleArray92);
        org.junit.Assert.assertNotNull(doubleArray93);
        org.junit.Assert.assertNotNull(doubleArray94);
        org.junit.Assert.assertNotNull(doubleArray95);
    }

    @Test
    public void test3750() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3750");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[] doubleArray31 = new double[] { 1 };
        double[] doubleArray33 = new double[] { 1 };
        double[] doubleArray35 = new double[] { 1 };
        double[] doubleArray37 = new double[] { 1 };
        double[] doubleArray39 = new double[] { 1 };
        double[][] doubleArray40 = new double[][] { doubleArray31, doubleArray33, doubleArray35, doubleArray37, doubleArray39 };
        int[] intArray41 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray40, intArray41);
        double[][] doubleArray43 = new double[][] {};
        double[][] doubleArray44 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray43);
        int[] intArray45 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray44, intArray45);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray40, intArray45);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray28, intArray45);
        double[][] doubleArray49 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray50 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray49);
        double[][] doubleArray51 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray50);
        double[][] doubleArray52 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray50);
        double[][] doubleArray53 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray50);
        double[][] doubleArray54 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray50);
        double[][] doubleArray55 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray54);
        double[][] doubleArray56 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray55);
        double[][] doubleArray57 = new double[][] {};
        double[][] doubleArray58 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray57);
        double[][] doubleArray59 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray57);
        double[][] doubleArray60 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray59);
        double[][] doubleArray61 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray60);
        double[][] doubleArray62 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray61);
        double[][] doubleArray63 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray62);
        double[][] doubleArray64 = new double[][] {};
        double[][] doubleArray65 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray64);
        double[][] doubleArray66 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray64);
        double[][] doubleArray67 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray64);
        double[][] doubleArray68 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray64);
        double[][] doubleArray69 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray68);
        double[][] doubleArray70 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray68);
        double[][] doubleArray71 = new double[][] {};
        double[][] doubleArray72 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray71);
        int[] intArray73 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray72, intArray73);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray70, intArray73);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray63, intArray73);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray55, intArray73);
        double[][] doubleArray78 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray55);
        double[][] doubleArray79 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray78);
        double[][] doubleArray80 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray79);
        java.lang.Class<?> wildcardClass81 = doubleArray80.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[]");
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertNotNull(wildcardClass81);
    }

    @Test
    public void test3751() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3751");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        int[] intArray2 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray1, intArray2);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray5 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray6 = new double[][] {};
        double[][] doubleArray7 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray6);
        double[][] doubleArray8 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray6);
        double[][] doubleArray9 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray6);
        double[] doubleArray16 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray23 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray30 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray37 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray38 = new double[][] { doubleArray16, doubleArray23, doubleArray30, doubleArray37 };
        double[][] doubleArray39 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray38);
        double[][] doubleArray40 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray39);
        double[][] doubleArray41 = new double[][] {};
        double[][] doubleArray42 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray41);
        double[] doubleArray44 = new double[] { 1 };
        double[] doubleArray46 = new double[] { 1 };
        double[] doubleArray48 = new double[] { 1 };
        double[] doubleArray50 = new double[] { 1 };
        double[] doubleArray52 = new double[] { 1 };
        double[][] doubleArray53 = new double[][] { doubleArray44, doubleArray46, doubleArray48, doubleArray50, doubleArray52 };
        int[] intArray54 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray53, intArray54);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray41, intArray54);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray40, intArray54);
        double[][] doubleArray58 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray40);
        double[] doubleArray60 = new double[] { 1 };
        double[] doubleArray62 = new double[] { 1 };
        double[] doubleArray64 = new double[] { 1 };
        double[] doubleArray66 = new double[] { 1 };
        double[] doubleArray68 = new double[] { 1 };
        double[][] doubleArray69 = new double[][] { doubleArray60, doubleArray62, doubleArray64, doubleArray66, doubleArray68 };
        int[] intArray70 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray69, intArray70);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray58, intArray70);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray6, intArray70);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray5, intArray70);
        double[][] doubleArray75 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray5);
        double[][] doubleArray76 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray5);
        double[][] doubleArray77 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray5);
        double[][] doubleArray78 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray77);
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[]");
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray66), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[]");
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertNotNull(doubleArray78);
    }

    @Test
    public void test3752() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3752");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray3 = new double[][] {};
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[][] doubleArray5 = new double[][] {};
        double[][] doubleArray6 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray5);
        double[] doubleArray8 = new double[] { 1 };
        double[] doubleArray10 = new double[] { 1 };
        double[] doubleArray12 = new double[] { 1 };
        double[] doubleArray14 = new double[] { 1 };
        double[] doubleArray16 = new double[] { 1 };
        double[][] doubleArray17 = new double[][] { doubleArray8, doubleArray10, doubleArray12, doubleArray14, doubleArray16 };
        int[] intArray18 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray17, intArray18);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray5, intArray18);
        double[] doubleArray24 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray28 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray32 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray36 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray37 = new double[][] { doubleArray24, doubleArray28, doubleArray32, doubleArray36 };
        double[] doubleArray39 = new double[] { 1 };
        double[] doubleArray41 = new double[] { 1 };
        double[] doubleArray43 = new double[] { 1 };
        double[] doubleArray45 = new double[] { 1 };
        double[] doubleArray47 = new double[] { 1 };
        double[][] doubleArray48 = new double[][] { doubleArray39, doubleArray41, doubleArray43, doubleArray45, doubleArray47 };
        int[] intArray49 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray48, intArray49);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray37, intArray49);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray5, intArray49);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray4, intArray49);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray2, intArray49);
        double[][] doubleArray55 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray56 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray55);
        double[][] doubleArray57 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray55);
        double[][] doubleArray58 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray55);
        double[][] doubleArray59 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray58);
        double[][] doubleArray60 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray59);
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[]");
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[]");
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertNotNull(doubleArray60);
    }

    @Test
    public void test3753() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3753");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray30 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray31 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray32 = new double[][] {};
        double[][] doubleArray33 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray32);
        int[] intArray34 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray33, intArray34);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray31, intArray34);
        double[][] doubleArray37 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray31);
        double[][] doubleArray38 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray37);
        double[][] doubleArray39 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray38);
        double[][] doubleArray40 = new double[][] {};
        double[][] doubleArray41 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray40);
        double[][] doubleArray42 = new double[][] {};
        double[][] doubleArray43 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray42);
        double[][] doubleArray44 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray43);
        double[] doubleArray48 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray52 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray56 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray60 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray61 = new double[][] { doubleArray48, doubleArray52, doubleArray56, doubleArray60 };
        double[] doubleArray63 = new double[] { 1 };
        double[] doubleArray65 = new double[] { 1 };
        double[] doubleArray67 = new double[] { 1 };
        double[] doubleArray69 = new double[] { 1 };
        double[] doubleArray71 = new double[] { 1 };
        double[][] doubleArray72 = new double[][] { doubleArray63, doubleArray65, doubleArray67, doubleArray69, doubleArray71 };
        int[] intArray73 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray72, intArray73);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray61, intArray73);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray43, intArray73);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray41, intArray73);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray39, intArray73);
        double[][] doubleArray79 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray39);
        double[][] doubleArray80 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray79);
        java.lang.Class<?> wildcardClass81 = doubleArray79.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray71), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[]");
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertNotNull(wildcardClass81);
    }

    @Test
    public void test3754() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3754");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        int[] intArray2 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray1, intArray2);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray5 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray4);
        double[][] doubleArray6 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray4);
        double[][] doubleArray7 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray6);
        double[][] doubleArray8 = new double[][] {};
        double[][] doubleArray9 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray8);
        double[][] doubleArray10 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray8);
        double[][] doubleArray11 = new double[][] {};
        double[][] doubleArray12 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray11);
        double[][] doubleArray13 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray12);
        double[][] doubleArray14 = new double[][] {};
        double[][] doubleArray15 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray14);
        double[][] doubleArray16 = new double[][] {};
        double[][] doubleArray17 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray16);
        double[] doubleArray19 = new double[] { 1 };
        double[] doubleArray21 = new double[] { 1 };
        double[] doubleArray23 = new double[] { 1 };
        double[] doubleArray25 = new double[] { 1 };
        double[] doubleArray27 = new double[] { 1 };
        double[][] doubleArray28 = new double[][] { doubleArray19, doubleArray21, doubleArray23, doubleArray25, doubleArray27 };
        int[] intArray29 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray28, intArray29);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray16, intArray29);
        double[] doubleArray35 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray39 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray43 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray47 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray48 = new double[][] { doubleArray35, doubleArray39, doubleArray43, doubleArray47 };
        double[] doubleArray50 = new double[] { 1 };
        double[] doubleArray52 = new double[] { 1 };
        double[] doubleArray54 = new double[] { 1 };
        double[] doubleArray56 = new double[] { 1 };
        double[] doubleArray58 = new double[] { 1 };
        double[][] doubleArray59 = new double[][] { doubleArray50, doubleArray52, doubleArray54, doubleArray56, doubleArray58 };
        int[] intArray60 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray59, intArray60);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray48, intArray60);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray16, intArray60);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray15, intArray60);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray13, intArray60);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray8, intArray60);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray7, intArray60);
        double[][] doubleArray68 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray7);
        double[][] doubleArray69 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray7);
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[]");
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertNotNull(doubleArray69);
    }

    @Test
    public void test3755() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3755");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[][] doubleArray5 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray4);
        double[][] doubleArray6 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray5);
        double[][] doubleArray7 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray5);
        double[][] doubleArray8 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray7);
        double[][] doubleArray9 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray7);
        double[][] doubleArray10 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray7);
        double[][] doubleArray11 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray7);
        double[][] doubleArray12 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray11);
        double[][] doubleArray13 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray11);
        double[][] doubleArray14 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray13);
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertNotNull(doubleArray14);
    }

    @Test
    public void test3756() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3756");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[][] doubleArray5 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray4);
        double[][] doubleArray6 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray5);
        double[][] doubleArray7 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray5);
        double[][] doubleArray8 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray5);
        double[][] doubleArray9 = new double[][] {};
        double[][] doubleArray10 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray9);
        double[] doubleArray12 = new double[] { 1 };
        double[] doubleArray14 = new double[] { 1 };
        double[] doubleArray16 = new double[] { 1 };
        double[] doubleArray18 = new double[] { 1 };
        double[] doubleArray20 = new double[] { 1 };
        double[][] doubleArray21 = new double[][] { doubleArray12, doubleArray14, doubleArray16, doubleArray18, doubleArray20 };
        int[] intArray22 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray21, intArray22);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray9, intArray22);
        double[] doubleArray31 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray38 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray45 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray52 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray53 = new double[][] { doubleArray31, doubleArray38, doubleArray45, doubleArray52 };
        double[][] doubleArray54 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray53);
        double[][] doubleArray55 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray54);
        double[][] doubleArray56 = new double[][] {};
        double[][] doubleArray57 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray56);
        double[] doubleArray59 = new double[] { 1 };
        double[] doubleArray61 = new double[] { 1 };
        double[] doubleArray63 = new double[] { 1 };
        double[] doubleArray65 = new double[] { 1 };
        double[] doubleArray67 = new double[] { 1 };
        double[][] doubleArray68 = new double[][] { doubleArray59, doubleArray61, doubleArray63, doubleArray65, doubleArray67 };
        int[] intArray69 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray68, intArray69);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray56, intArray69);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray55, intArray69);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray9, intArray69);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray8, intArray69);
        double[][] doubleArray75 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray8);
        double[][] doubleArray76 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray75);
        java.lang.Class<?> wildcardClass77 = doubleArray76.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[]");
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertNotNull(wildcardClass77);
    }

    @Test
    public void test3757() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3757");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[] doubleArray31 = new double[] { 1 };
        double[] doubleArray33 = new double[] { 1 };
        double[] doubleArray35 = new double[] { 1 };
        double[] doubleArray37 = new double[] { 1 };
        double[] doubleArray39 = new double[] { 1 };
        double[][] doubleArray40 = new double[][] { doubleArray31, doubleArray33, doubleArray35, doubleArray37, doubleArray39 };
        int[] intArray41 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray40, intArray41);
        double[][] doubleArray43 = new double[][] {};
        double[][] doubleArray44 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray43);
        int[] intArray45 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray44, intArray45);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray40, intArray45);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray28, intArray45);
        double[][] doubleArray49 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray50 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray49);
        double[][] doubleArray51 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray50);
        double[][] doubleArray52 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray51);
        double[][] doubleArray53 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray52);
        double[][] doubleArray54 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray52);
        double[][] doubleArray55 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray54);
        double[][] doubleArray56 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray54);
        double[][] doubleArray57 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray54);
        double[][] doubleArray58 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray57);
        double[][] doubleArray59 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray58);
        double[][] doubleArray60 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray59);
        double[][] doubleArray61 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray59);
        double[][] doubleArray62 = new double[][] {};
        double[][] doubleArray63 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray62);
        int[] intArray64 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray63, intArray64);
        double[][] doubleArray66 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray63);
        double[][] doubleArray67 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray66);
        double[][] doubleArray68 = new double[][] {};
        double[][] doubleArray69 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray68);
        int[] intArray70 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray69, intArray70);
        double[] doubleArray73 = new double[] { 1 };
        double[] doubleArray75 = new double[] { 1 };
        double[] doubleArray77 = new double[] { 1 };
        double[] doubleArray79 = new double[] { 1 };
        double[] doubleArray81 = new double[] { 1 };
        double[][] doubleArray82 = new double[][] { doubleArray73, doubleArray75, doubleArray77, doubleArray79, doubleArray81 };
        int[] intArray83 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray82, intArray83);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray69, intArray83);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray66, intArray83);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray61, intArray83);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[]");
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[]");
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray73), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray75), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray77), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray79), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray81), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray82);
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray83), "[]");
    }

    @Test
    public void test3758() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3758");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[] doubleArray31 = new double[] { 1 };
        double[] doubleArray33 = new double[] { 1 };
        double[] doubleArray35 = new double[] { 1 };
        double[] doubleArray37 = new double[] { 1 };
        double[] doubleArray39 = new double[] { 1 };
        double[][] doubleArray40 = new double[][] { doubleArray31, doubleArray33, doubleArray35, doubleArray37, doubleArray39 };
        int[] intArray41 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray40, intArray41);
        double[][] doubleArray43 = new double[][] {};
        double[][] doubleArray44 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray43);
        int[] intArray45 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray44, intArray45);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray40, intArray45);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray28, intArray45);
        double[][] doubleArray49 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray50 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray49);
        double[][] doubleArray51 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray50);
        double[][] doubleArray52 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray50);
        double[][] doubleArray53 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray50);
        double[][] doubleArray54 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray53);
        double[][] doubleArray55 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray53);
        double[][] doubleArray56 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray53);
        double[][] doubleArray57 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray56);
        double[][] doubleArray58 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray56);
        double[][] doubleArray59 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray58);
        double[][] doubleArray60 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray58);
        java.lang.Class<?> wildcardClass61 = doubleArray60.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertNotNull(wildcardClass61);
    }

    @Test
    public void test3759() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3759");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = new double[][] {};
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[] doubleArray8 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray12 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray16 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray20 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray21 = new double[][] { doubleArray8, doubleArray12, doubleArray16, doubleArray20 };
        double[] doubleArray23 = new double[] { 1 };
        double[] doubleArray25 = new double[] { 1 };
        double[] doubleArray27 = new double[] { 1 };
        double[] doubleArray29 = new double[] { 1 };
        double[] doubleArray31 = new double[] { 1 };
        double[][] doubleArray32 = new double[][] { doubleArray23, doubleArray25, doubleArray27, doubleArray29, doubleArray31 };
        int[] intArray33 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray32, intArray33);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray21, intArray33);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray3, intArray33);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray1, intArray33);
        double[][] doubleArray38 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray39 = new double[][] {};
        double[][] doubleArray40 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray39);
        double[] doubleArray42 = new double[] { 1 };
        double[] doubleArray44 = new double[] { 1 };
        double[] doubleArray46 = new double[] { 1 };
        double[] doubleArray48 = new double[] { 1 };
        double[] doubleArray50 = new double[] { 1 };
        double[][] doubleArray51 = new double[][] { doubleArray42, doubleArray44, doubleArray46, doubleArray48, doubleArray50 };
        int[] intArray52 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray51, intArray52);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray39, intArray52);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray1, intArray52);
        double[][] doubleArray56 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[] doubleArray60 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray64 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray68 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray72 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray73 = new double[][] { doubleArray60, doubleArray64, doubleArray68, doubleArray72 };
        double[] doubleArray75 = new double[] { 1 };
        double[] doubleArray77 = new double[] { 1 };
        double[] doubleArray79 = new double[] { 1 };
        double[] doubleArray81 = new double[] { 1 };
        double[] doubleArray83 = new double[] { 1 };
        double[][] doubleArray84 = new double[][] { doubleArray75, doubleArray77, doubleArray79, doubleArray81, doubleArray83 };
        int[] intArray85 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray84, intArray85);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray73, intArray85);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray1, intArray85);
        java.lang.Class<?> wildcardClass89 = intArray85.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[]");
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray75), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray77), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray79), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray81), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray83), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray84);
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray85), "[]");
        org.junit.Assert.assertNotNull(wildcardClass89);
    }

    @Test
    public void test3760() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3760");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[] doubleArray11 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray18 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray25 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray32 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray33 = new double[][] { doubleArray11, doubleArray18, doubleArray25, doubleArray32 };
        double[][] doubleArray34 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray33);
        double[][] doubleArray35 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray34);
        double[][] doubleArray36 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray35);
        double[][] doubleArray37 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray36);
        double[][] doubleArray38 = new double[][] {};
        double[][] doubleArray39 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray38);
        double[][] doubleArray40 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray39);
        double[][] doubleArray41 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray39);
        double[][] doubleArray42 = new double[][] {};
        double[][] doubleArray43 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray42);
        double[][] doubleArray44 = new double[][] {};
        double[][] doubleArray45 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray44);
        double[] doubleArray47 = new double[] { 1 };
        double[] doubleArray49 = new double[] { 1 };
        double[] doubleArray51 = new double[] { 1 };
        double[] doubleArray53 = new double[] { 1 };
        double[] doubleArray55 = new double[] { 1 };
        double[][] doubleArray56 = new double[][] { doubleArray47, doubleArray49, doubleArray51, doubleArray53, doubleArray55 };
        int[] intArray57 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray56, intArray57);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray44, intArray57);
        double[] doubleArray63 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray67 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray71 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray75 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray76 = new double[][] { doubleArray63, doubleArray67, doubleArray71, doubleArray75 };
        double[] doubleArray78 = new double[] { 1 };
        double[] doubleArray80 = new double[] { 1 };
        double[] doubleArray82 = new double[] { 1 };
        double[] doubleArray84 = new double[] { 1 };
        double[] doubleArray86 = new double[] { 1 };
        double[][] doubleArray87 = new double[][] { doubleArray78, doubleArray80, doubleArray82, doubleArray84, doubleArray86 };
        int[] intArray88 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray87, intArray88);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray76, intArray88);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray44, intArray88);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray42, intArray88);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray39, intArray88);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray37, intArray88);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray4, intArray88);
        double[][] doubleArray96 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray4);
        java.lang.Class<?> wildcardClass97 = doubleArray4.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[]");
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray71), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray75), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray78), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray80), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray82), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray84), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray86), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray87);
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray88), "[]");
        org.junit.Assert.assertNotNull(doubleArray96);
        org.junit.Assert.assertNotNull(wildcardClass97);
    }

    @Test
    public void test3761() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3761");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        int[] intArray2 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray1, intArray2);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[] doubleArray11 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray18 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray25 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray32 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray33 = new double[][] { doubleArray11, doubleArray18, doubleArray25, doubleArray32 };
        double[][] doubleArray34 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray33);
        double[] doubleArray41 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray48 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray55 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray62 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray63 = new double[][] { doubleArray41, doubleArray48, doubleArray55, doubleArray62 };
        double[][] doubleArray64 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray63);
        double[][] doubleArray65 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray63);
        double[][] doubleArray66 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray63);
        double[][] doubleArray67 = new double[][] {};
        double[][] doubleArray68 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray67);
        int[] intArray69 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray68, intArray69);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray66, intArray69);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray34, intArray69);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray4, intArray69);
        double[][] doubleArray74 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray4);
        double[][] doubleArray75 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray4);
        double[][] doubleArray76 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray75);
        double[][] doubleArray77 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray75);
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[]");
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertNotNull(doubleArray77);
    }

    @Test
    public void test3762() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3762");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray30 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray31 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray32 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray33 = new double[][] {};
        double[][] doubleArray34 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray33);
        double[][] doubleArray35 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray34);
        double[] doubleArray39 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray43 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray47 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray51 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray52 = new double[][] { doubleArray39, doubleArray43, doubleArray47, doubleArray51 };
        double[] doubleArray54 = new double[] { 1 };
        double[] doubleArray56 = new double[] { 1 };
        double[] doubleArray58 = new double[] { 1 };
        double[] doubleArray60 = new double[] { 1 };
        double[] doubleArray62 = new double[] { 1 };
        double[][] doubleArray63 = new double[][] { doubleArray54, doubleArray56, doubleArray58, doubleArray60, doubleArray62 };
        int[] intArray64 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray63, intArray64);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray52, intArray64);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray35, intArray64);
        double[][] doubleArray68 = null;
        double[] doubleArray70 = new double[] { 1 };
        double[] doubleArray72 = new double[] { 1 };
        double[] doubleArray74 = new double[] { 1 };
        double[] doubleArray76 = new double[] { 1 };
        double[] doubleArray78 = new double[] { 1 };
        double[][] doubleArray79 = new double[][] { doubleArray70, doubleArray72, doubleArray74, doubleArray76, doubleArray78 };
        int[] intArray80 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray79, intArray80);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray68, intArray80);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray35, intArray80);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray28, intArray80);
        double[][] doubleArray85 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray86 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray85);
        double[][] doubleArray87 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray86);
        int[] intArray88 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray87, intArray88);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[]");
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray70), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray74), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray78), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[]");
        org.junit.Assert.assertNotNull(doubleArray85);
        org.junit.Assert.assertNotNull(doubleArray86);
        org.junit.Assert.assertNotNull(doubleArray87);
    }

    @Test
    public void test3763() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3763");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[] doubleArray9 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray16 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray23 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray30 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray31 = new double[][] { doubleArray9, doubleArray16, doubleArray23, doubleArray30 };
        double[][] doubleArray32 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray31);
        double[] doubleArray34 = new double[] { 1 };
        double[] doubleArray36 = new double[] { 1 };
        double[] doubleArray38 = new double[] { 1 };
        double[] doubleArray40 = new double[] { 1 };
        double[] doubleArray42 = new double[] { 1 };
        double[][] doubleArray43 = new double[][] { doubleArray34, doubleArray36, doubleArray38, doubleArray40, doubleArray42 };
        int[] intArray44 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray43, intArray44);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray32, intArray44);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray1, intArray44);
        double[][] doubleArray48 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray49 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray50 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        java.lang.Class<?> wildcardClass51 = doubleArray50.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertNotNull(wildcardClass51);
    }

    @Test
    public void test3764() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3764");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray4 = new double[][] {};
        double[][] doubleArray5 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray4);
        double[][] doubleArray6 = new double[][] {};
        double[][] doubleArray7 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray6);
        double[] doubleArray9 = new double[] { 1 };
        double[] doubleArray11 = new double[] { 1 };
        double[] doubleArray13 = new double[] { 1 };
        double[] doubleArray15 = new double[] { 1 };
        double[] doubleArray17 = new double[] { 1 };
        double[][] doubleArray18 = new double[][] { doubleArray9, doubleArray11, doubleArray13, doubleArray15, doubleArray17 };
        int[] intArray19 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray18, intArray19);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray6, intArray19);
        double[] doubleArray25 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray29 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray33 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray37 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray38 = new double[][] { doubleArray25, doubleArray29, doubleArray33, doubleArray37 };
        double[] doubleArray40 = new double[] { 1 };
        double[] doubleArray42 = new double[] { 1 };
        double[] doubleArray44 = new double[] { 1 };
        double[] doubleArray46 = new double[] { 1 };
        double[] doubleArray48 = new double[] { 1 };
        double[][] doubleArray49 = new double[][] { doubleArray40, doubleArray42, doubleArray44, doubleArray46, doubleArray48 };
        int[] intArray50 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray49, intArray50);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray38, intArray50);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray6, intArray50);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray4, intArray50);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray1, intArray50);
        double[][] doubleArray56 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray57 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray58 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray57);
        double[] doubleArray60 = new double[] { 1 };
        double[] doubleArray62 = new double[] { 1 };
        double[] doubleArray64 = new double[] { 1 };
        double[] doubleArray66 = new double[] { 1 };
        double[] doubleArray68 = new double[] { 1 };
        double[][] doubleArray69 = new double[][] { doubleArray60, doubleArray62, doubleArray64, doubleArray66, doubleArray68 };
        int[] intArray70 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray69, intArray70);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray57, intArray70);
        double[][] doubleArray73 = new double[][] {};
        double[][] doubleArray74 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray73);
        double[][] doubleArray75 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray73);
        double[][] doubleArray76 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray75);
        double[][] doubleArray77 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray75);
        double[][] doubleArray78 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray77);
        double[][] doubleArray79 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray78);
        double[][] doubleArray80 = new double[][] {};
        double[][] doubleArray81 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray80);
        int[] intArray82 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray81, intArray82);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray79, intArray82);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray57, intArray82);
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[]");
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray66), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[]");
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertNotNull(doubleArray81);
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[]");
    }

    @Test
    public void test3765() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3765");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = new double[][] {};
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[] doubleArray8 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray12 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray16 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray20 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray21 = new double[][] { doubleArray8, doubleArray12, doubleArray16, doubleArray20 };
        double[] doubleArray23 = new double[] { 1 };
        double[] doubleArray25 = new double[] { 1 };
        double[] doubleArray27 = new double[] { 1 };
        double[] doubleArray29 = new double[] { 1 };
        double[] doubleArray31 = new double[] { 1 };
        double[][] doubleArray32 = new double[][] { doubleArray23, doubleArray25, doubleArray27, doubleArray29, doubleArray31 };
        int[] intArray33 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray32, intArray33);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray21, intArray33);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray3, intArray33);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray1, intArray33);
        double[][] doubleArray38 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray39 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray38);
        double[][] doubleArray40 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray39);
        double[][] doubleArray41 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray39);
        double[][] doubleArray42 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray41);
        double[][] doubleArray43 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray42);
        double[][] doubleArray44 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray42);
        java.lang.Class<?> wildcardClass45 = doubleArray44.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertNotNull(wildcardClass45);
    }

    @Test
    public void test3766() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3766");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray30 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray29);
        double[][] doubleArray31 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        double[][] doubleArray32 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray31);
        double[][] doubleArray33 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray31);
        double[][] doubleArray34 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray31);
        double[][] doubleArray35 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray34);
        double[][] doubleArray36 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray34);
        double[][] doubleArray37 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray34);
        double[][] doubleArray38 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray37);
        double[][] doubleArray39 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray38);
        double[][] doubleArray40 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray38);
        double[][] doubleArray41 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray40);
        java.lang.Class<?> wildcardClass42 = doubleArray41.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertNotNull(wildcardClass42);
    }

    @Test
    public void test3767() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3767");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = new double[][] {};
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[] doubleArray5 = new double[] { 1 };
        double[] doubleArray7 = new double[] { 1 };
        double[] doubleArray9 = new double[] { 1 };
        double[] doubleArray11 = new double[] { 1 };
        double[] doubleArray13 = new double[] { 1 };
        double[][] doubleArray14 = new double[][] { doubleArray5, doubleArray7, doubleArray9, doubleArray11, doubleArray13 };
        int[] intArray15 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray14, intArray15);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray2, intArray15);
        double[] doubleArray21 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray25 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray29 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray33 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray34 = new double[][] { doubleArray21, doubleArray25, doubleArray29, doubleArray33 };
        double[] doubleArray36 = new double[] { 1 };
        double[] doubleArray38 = new double[] { 1 };
        double[] doubleArray40 = new double[] { 1 };
        double[] doubleArray42 = new double[] { 1 };
        double[] doubleArray44 = new double[] { 1 };
        double[][] doubleArray45 = new double[][] { doubleArray36, doubleArray38, doubleArray40, doubleArray42, doubleArray44 };
        int[] intArray46 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray45, intArray46);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray34, intArray46);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray2, intArray46);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray1, intArray46);
        double[][] doubleArray51 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray52 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray51);
        double[][] doubleArray53 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray52);
        double[][] doubleArray54 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray52);
        double[][] doubleArray55 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray54);
        double[][] doubleArray56 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray54);
        double[][] doubleArray57 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray54);
        int[] intArray58 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray54, intArray58);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertNotNull(doubleArray57);
    }

    @Test
    public void test3768() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3768");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[] doubleArray6 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray10 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray14 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray18 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray19 = new double[][] { doubleArray6, doubleArray10, doubleArray14, doubleArray18 };
        double[] doubleArray21 = new double[] { 1 };
        double[] doubleArray23 = new double[] { 1 };
        double[] doubleArray25 = new double[] { 1 };
        double[] doubleArray27 = new double[] { 1 };
        double[] doubleArray29 = new double[] { 1 };
        double[][] doubleArray30 = new double[][] { doubleArray21, doubleArray23, doubleArray25, doubleArray27, doubleArray29 };
        int[] intArray31 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray30, intArray31);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray19, intArray31);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray1, intArray31);
        double[][] doubleArray35 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray36 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray37 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        java.lang.Class<?> wildcardClass38 = doubleArray1.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertNotNull(wildcardClass38);
    }

    @Test
    public void test3769() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3769");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray30 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray29);
        double[][] doubleArray31 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        double[][] doubleArray32 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray31);
        double[][] doubleArray33 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray31);
        double[][] doubleArray34 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray33);
        double[][] doubleArray35 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray34);
        double[][] doubleArray36 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray34);
        double[][] doubleArray37 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray34);
        double[][] doubleArray38 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray34);
        double[][] doubleArray39 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray34);
        double[][] doubleArray40 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray34);
        double[][] doubleArray41 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray34);
        double[][] doubleArray42 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray34);
        java.lang.Class<?> wildcardClass43 = doubleArray34.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertNotNull(wildcardClass43);
    }

    @Test
    public void test3770() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3770");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = new double[][] {};
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[][] doubleArray5 = new double[][] {};
        double[][] doubleArray6 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray5);
        double[][] doubleArray7 = new double[][] {};
        double[][] doubleArray8 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray7);
        double[] doubleArray10 = new double[] { 1 };
        double[] doubleArray12 = new double[] { 1 };
        double[] doubleArray14 = new double[] { 1 };
        double[] doubleArray16 = new double[] { 1 };
        double[] doubleArray18 = new double[] { 1 };
        double[][] doubleArray19 = new double[][] { doubleArray10, doubleArray12, doubleArray14, doubleArray16, doubleArray18 };
        int[] intArray20 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray19, intArray20);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray7, intArray20);
        double[] doubleArray26 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray30 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray34 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray38 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray39 = new double[][] { doubleArray26, doubleArray30, doubleArray34, doubleArray38 };
        double[] doubleArray41 = new double[] { 1 };
        double[] doubleArray43 = new double[] { 1 };
        double[] doubleArray45 = new double[] { 1 };
        double[] doubleArray47 = new double[] { 1 };
        double[] doubleArray49 = new double[] { 1 };
        double[][] doubleArray50 = new double[][] { doubleArray41, doubleArray43, doubleArray45, doubleArray47, doubleArray49 };
        int[] intArray51 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray50, intArray51);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray39, intArray51);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray7, intArray51);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray6, intArray51);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray4, intArray51);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray1, intArray51);
        double[][] doubleArray58 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray59 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray58);
        java.lang.Class<?> wildcardClass60 = doubleArray59.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[]");
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[]");
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertNotNull(wildcardClass60);
    }

    @Test
    public void test3771() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3771");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[][] doubleArray5 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray4);
        double[][] doubleArray6 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray5);
        double[][] doubleArray7 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray6);
        double[][] doubleArray8 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray6);
        double[][] doubleArray9 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray8);
        java.lang.Class<?> wildcardClass10 = doubleArray8.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertNotNull(wildcardClass10);
    }

    @Test
    public void test3772() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3772");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray30 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray29);
        double[][] doubleArray31 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray29);
        double[][] doubleArray32 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray29);
        double[][] doubleArray33 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray32);
        double[][] doubleArray34 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray33);
        java.lang.Class<?> wildcardClass35 = doubleArray34.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertNotNull(wildcardClass35);
    }

    @Test
    public void test3773() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3773");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray5 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray4);
        double[][] doubleArray6 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray4);
        double[][] doubleArray7 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray4);
        double[][] doubleArray8 = null;
        double[] doubleArray15 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray22 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray29 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray36 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray37 = new double[][] { doubleArray15, doubleArray22, doubleArray29, doubleArray36 };
        double[][] doubleArray38 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray37);
        double[][] doubleArray39 = new double[][] {};
        double[][] doubleArray40 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray39);
        double[][] doubleArray41 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray40);
        double[][] doubleArray42 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray41);
        double[][] doubleArray43 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray41);
        double[][] doubleArray44 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray41);
        double[][] doubleArray45 = new double[][] {};
        double[][] doubleArray46 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray45);
        double[][] doubleArray47 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray45);
        double[] doubleArray54 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray61 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray68 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray75 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray76 = new double[][] { doubleArray54, doubleArray61, doubleArray68, doubleArray75 };
        double[][] doubleArray77 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray76);
        double[][] doubleArray78 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray76);
        double[][] doubleArray79 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray76);
        double[][] doubleArray80 = new double[][] {};
        double[][] doubleArray81 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray80);
        int[] intArray82 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray81, intArray82);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray79, intArray82);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray47, intArray82);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray41, intArray82);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray38, intArray82);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray8, intArray82);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray7, intArray82);
        double[][] doubleArray90 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray7);
        double[][] doubleArray91 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray90);
        java.lang.Class<?> wildcardClass92 = doubleArray91.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray75), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertNotNull(doubleArray81);
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[]");
        org.junit.Assert.assertNotNull(doubleArray90);
        org.junit.Assert.assertNotNull(doubleArray91);
        org.junit.Assert.assertNotNull(wildcardClass92);
    }

    @Test
    public void test3774() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3774");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[] doubleArray10 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray17 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray24 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray31 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray32 = new double[][] { doubleArray10, doubleArray17, doubleArray24, doubleArray31 };
        double[][] doubleArray33 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray32);
        double[][] doubleArray34 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray32);
        double[][] doubleArray35 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray32);
        double[][] doubleArray36 = new double[][] {};
        double[][] doubleArray37 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray36);
        int[] intArray38 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray37, intArray38);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray35, intArray38);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray3, intArray38);
        double[][] doubleArray42 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[][] doubleArray43 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[][] doubleArray44 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        java.lang.Class<?> wildcardClass45 = doubleArray3.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertNotNull(wildcardClass45);
    }

    @Test
    public void test3775() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3775");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[][] doubleArray5 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[][] doubleArray6 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[][] doubleArray7 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray6);
        double[] doubleArray14 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray21 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray28 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray35 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray36 = new double[][] { doubleArray14, doubleArray21, doubleArray28, doubleArray35 };
        double[][] doubleArray37 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray36);
        double[][] doubleArray38 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray36);
        double[][] doubleArray39 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray38);
        double[][] doubleArray40 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray38);
        double[][] doubleArray41 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray40);
        double[][] doubleArray42 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray41);
        double[] doubleArray44 = new double[] { 1 };
        double[] doubleArray46 = new double[] { 1 };
        double[] doubleArray48 = new double[] { 1 };
        double[] doubleArray50 = new double[] { 1 };
        double[] doubleArray52 = new double[] { 1 };
        double[][] doubleArray53 = new double[][] { doubleArray44, doubleArray46, doubleArray48, doubleArray50, doubleArray52 };
        int[] intArray54 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray53, intArray54);
        double[][] doubleArray56 = new double[][] {};
        double[][] doubleArray57 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray56);
        int[] intArray58 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray57, intArray58);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray53, intArray58);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray42, intArray58);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray6, intArray58);
        java.lang.Class<?> wildcardClass63 = doubleArray6.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[]");
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[]");
        org.junit.Assert.assertNotNull(wildcardClass63);
    }

    @Test
    public void test3776() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3776");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray30 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray29);
        double[][] doubleArray31 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        double[][] doubleArray32 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        double[][] doubleArray33 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        double[][] doubleArray34 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray33);
        double[] doubleArray41 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray48 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray55 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray62 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray63 = new double[][] { doubleArray41, doubleArray48, doubleArray55, doubleArray62 };
        double[][] doubleArray64 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray63);
        double[] doubleArray66 = new double[] { 1 };
        double[] doubleArray68 = new double[] { 1 };
        double[] doubleArray70 = new double[] { 1 };
        double[] doubleArray72 = new double[] { 1 };
        double[] doubleArray74 = new double[] { 1 };
        double[][] doubleArray75 = new double[][] { doubleArray66, doubleArray68, doubleArray70, doubleArray72, doubleArray74 };
        int[] intArray76 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray75, intArray76);
        double[][] doubleArray78 = new double[][] {};
        double[][] doubleArray79 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray78);
        int[] intArray80 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray79, intArray80);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray75, intArray80);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray63, intArray80);
        double[][] doubleArray84 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray63);
        double[][] doubleArray85 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray63);
        double[][] doubleArray86 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray63);
        double[][] doubleArray87 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray63);
        double[][] doubleArray88 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray63);
        int[] intArray90 = new int[] { '4' };
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray63, intArray90);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray34, intArray90);
        double[][] doubleArray93 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray34);
        java.lang.Class<?> wildcardClass94 = doubleArray93.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray66), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray70), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray74), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[]");
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[]");
        org.junit.Assert.assertNotNull(doubleArray84);
        org.junit.Assert.assertNotNull(doubleArray85);
        org.junit.Assert.assertNotNull(doubleArray86);
        org.junit.Assert.assertNotNull(doubleArray87);
        org.junit.Assert.assertNotNull(doubleArray88);
        org.junit.Assert.assertNotNull(intArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray90), "[0]");
        org.junit.Assert.assertNotNull(doubleArray93);
        org.junit.Assert.assertNotNull(wildcardClass94);
    }

    @Test
    public void test3777() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3777");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray5 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray6 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray7 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray6);
        double[][] doubleArray8 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray7);
        double[][] doubleArray9 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray8);
        double[][] doubleArray10 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray8);
        double[][] doubleArray11 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray10);
        double[][] doubleArray12 = null;
        double[][] doubleArray13 = new double[][] {};
        double[][] doubleArray14 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray13);
        double[][] doubleArray15 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray13);
        double[][] doubleArray16 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray13);
        double[][] doubleArray17 = new double[][] {};
        double[][] doubleArray18 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray17);
        double[][] doubleArray19 = new double[][] {};
        double[][] doubleArray20 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray19);
        double[] doubleArray22 = new double[] { 1 };
        double[] doubleArray24 = new double[] { 1 };
        double[] doubleArray26 = new double[] { 1 };
        double[] doubleArray28 = new double[] { 1 };
        double[] doubleArray30 = new double[] { 1 };
        double[][] doubleArray31 = new double[][] { doubleArray22, doubleArray24, doubleArray26, doubleArray28, doubleArray30 };
        int[] intArray32 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray31, intArray32);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray19, intArray32);
        double[] doubleArray38 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray42 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray46 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray50 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray51 = new double[][] { doubleArray38, doubleArray42, doubleArray46, doubleArray50 };
        double[] doubleArray53 = new double[] { 1 };
        double[] doubleArray55 = new double[] { 1 };
        double[] doubleArray57 = new double[] { 1 };
        double[] doubleArray59 = new double[] { 1 };
        double[] doubleArray61 = new double[] { 1 };
        double[][] doubleArray62 = new double[][] { doubleArray53, doubleArray55, doubleArray57, doubleArray59, doubleArray61 };
        int[] intArray63 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray62, intArray63);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray51, intArray63);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray19, intArray63);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray17, intArray63);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray13, intArray63);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray12, intArray63);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray10, intArray63);
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[]");
    }

    @Test
    public void test3778() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3778");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[] doubleArray6 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray10 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray14 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray18 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray19 = new double[][] { doubleArray6, doubleArray10, doubleArray14, doubleArray18 };
        double[] doubleArray21 = new double[] { 1 };
        double[] doubleArray23 = new double[] { 1 };
        double[] doubleArray25 = new double[] { 1 };
        double[] doubleArray27 = new double[] { 1 };
        double[] doubleArray29 = new double[] { 1 };
        double[][] doubleArray30 = new double[][] { doubleArray21, doubleArray23, doubleArray25, doubleArray27, doubleArray29 };
        int[] intArray31 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray30, intArray31);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray19, intArray31);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray2, intArray31);
        double[][] doubleArray35 = null;
        double[] doubleArray37 = new double[] { 1 };
        double[] doubleArray39 = new double[] { 1 };
        double[] doubleArray41 = new double[] { 1 };
        double[] doubleArray43 = new double[] { 1 };
        double[] doubleArray45 = new double[] { 1 };
        double[][] doubleArray46 = new double[][] { doubleArray37, doubleArray39, doubleArray41, doubleArray43, doubleArray45 };
        int[] intArray47 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray46, intArray47);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray35, intArray47);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray2, intArray47);
        double[][] doubleArray51 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray52 = new double[][] {};
        double[][] doubleArray53 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray52);
        double[][] doubleArray54 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray52);
        double[][] doubleArray55 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray54);
        double[][] doubleArray56 = null;
        double[][] doubleArray57 = new double[][] {};
        double[][] doubleArray58 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray57);
        double[][] doubleArray59 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray58);
        double[] doubleArray63 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray67 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray71 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray75 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray76 = new double[][] { doubleArray63, doubleArray67, doubleArray71, doubleArray75 };
        double[] doubleArray78 = new double[] { 1 };
        double[] doubleArray80 = new double[] { 1 };
        double[] doubleArray82 = new double[] { 1 };
        double[] doubleArray84 = new double[] { 1 };
        double[] doubleArray86 = new double[] { 1 };
        double[][] doubleArray87 = new double[][] { doubleArray78, doubleArray80, doubleArray82, doubleArray84, doubleArray86 };
        int[] intArray88 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray87, intArray88);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray76, intArray88);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray59, intArray88);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray56, intArray88);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray55, intArray88);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray51, intArray88);
        double[][] doubleArray95 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray51);
        double[][] doubleArray96 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray95);
        double[][] doubleArray97 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray96);
        int[] intArray98 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray97, intArray98);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray71), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray75), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray78), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray80), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray82), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray84), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray86), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray87);
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray88), "[]");
        org.junit.Assert.assertNotNull(doubleArray95);
        org.junit.Assert.assertNotNull(doubleArray96);
        org.junit.Assert.assertNotNull(doubleArray97);
    }

    @Test
    public void test3779() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3779");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray30 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray31 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray32 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray31);
        double[][] doubleArray33 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray32);
        double[] doubleArray40 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray47 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray54 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray61 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray62 = new double[][] { doubleArray40, doubleArray47, doubleArray54, doubleArray61 };
        double[][] doubleArray63 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray62);
        double[][] doubleArray64 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray62);
        double[][] doubleArray65 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray62);
        double[][] doubleArray66 = new double[][] {};
        double[][] doubleArray67 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray66);
        int[] intArray68 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray67, intArray68);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray65, intArray68);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray33, intArray68);
        double[][] doubleArray72 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray33);
        double[][] doubleArray73 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray33);
        double[][] doubleArray74 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray73);
        double[][] doubleArray75 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray73);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[]");
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertNotNull(doubleArray75);
    }

    @Test
    public void test3780() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3780");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        int[] intArray2 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray1, intArray2);
        double[] doubleArray5 = new double[] { 1 };
        double[] doubleArray7 = new double[] { 1 };
        double[] doubleArray9 = new double[] { 1 };
        double[] doubleArray11 = new double[] { 1 };
        double[] doubleArray13 = new double[] { 1 };
        double[][] doubleArray14 = new double[][] { doubleArray5, doubleArray7, doubleArray9, doubleArray11, doubleArray13 };
        int[] intArray15 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray14, intArray15);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray1, intArray15);
        double[][] doubleArray18 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray19 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray20 = new double[][] {};
        double[][] doubleArray21 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray20);
        int[] intArray22 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray21, intArray22);
        double[][] doubleArray24 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray21);
        double[][] doubleArray25 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray21);
        double[][] doubleArray26 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray25);
        double[][] doubleArray27 = new double[][] {};
        double[][] doubleArray28 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray27);
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray27);
        double[][] doubleArray30 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray27);
        double[][] doubleArray31 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        double[] doubleArray33 = new double[] { 1 };
        double[] doubleArray35 = new double[] { 1 };
        double[] doubleArray37 = new double[] { 1 };
        double[] doubleArray39 = new double[] { 1 };
        double[] doubleArray41 = new double[] { 1 };
        double[][] doubleArray42 = new double[][] { doubleArray33, doubleArray35, doubleArray37, doubleArray39, doubleArray41 };
        int[] intArray43 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray42, intArray43);
        double[][] doubleArray45 = new double[][] {};
        double[][] doubleArray46 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray45);
        int[] intArray47 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray46, intArray47);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray42, intArray47);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray30, intArray47);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray25, intArray47);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray1, intArray47);
        double[][] doubleArray53 = null;
        double[] doubleArray57 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray61 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray65 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray69 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray70 = new double[][] { doubleArray57, doubleArray61, doubleArray65, doubleArray69 };
        double[] doubleArray72 = new double[] { 1 };
        double[] doubleArray74 = new double[] { 1 };
        double[] doubleArray76 = new double[] { 1 };
        double[] doubleArray78 = new double[] { 1 };
        double[] doubleArray80 = new double[] { 1 };
        double[][] doubleArray81 = new double[][] { doubleArray72, doubleArray74, doubleArray76, doubleArray78, doubleArray80 };
        int[] intArray82 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray81, intArray82);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray70, intArray82);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray53, intArray82);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray1, intArray82);
        double[][] doubleArray87 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        java.lang.Class<?> wildcardClass88 = doubleArray87.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[]");
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[]");
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[]");
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray74), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray78), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray80), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray81);
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[]");
        org.junit.Assert.assertNotNull(doubleArray87);
        org.junit.Assert.assertNotNull(wildcardClass88);
    }

    @Test
    public void test3781() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3781");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[][] doubleArray5 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[][] doubleArray6 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[][] doubleArray7 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[][] doubleArray8 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[][] doubleArray9 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[][] doubleArray10 = new double[][] {};
        double[][] doubleArray11 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray10);
        double[][] doubleArray12 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray10);
        double[][] doubleArray13 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray12);
        double[][] doubleArray14 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray13);
        double[][] doubleArray15 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray14);
        double[][] doubleArray16 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray15);
        double[][] doubleArray17 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray15);
        double[][] doubleArray18 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray17);
        double[][] doubleArray19 = new double[][] {};
        double[][] doubleArray20 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray19);
        double[][] doubleArray21 = new double[][] {};
        double[][] doubleArray22 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray21);
        double[][] doubleArray23 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray22);
        double[] doubleArray27 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray31 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray35 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray39 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray40 = new double[][] { doubleArray27, doubleArray31, doubleArray35, doubleArray39 };
        double[] doubleArray42 = new double[] { 1 };
        double[] doubleArray44 = new double[] { 1 };
        double[] doubleArray46 = new double[] { 1 };
        double[] doubleArray48 = new double[] { 1 };
        double[] doubleArray50 = new double[] { 1 };
        double[][] doubleArray51 = new double[][] { doubleArray42, doubleArray44, doubleArray46, doubleArray48, doubleArray50 };
        int[] intArray52 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray51, intArray52);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray40, intArray52);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray22, intArray52);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray20, intArray52);
        double[][] doubleArray57 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray20);
        double[][] doubleArray58 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray57);
        double[][] doubleArray59 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray57);
        double[][] doubleArray60 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray57);
        double[][] doubleArray61 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray57);
        double[][] doubleArray62 = new double[][] {};
        double[][] doubleArray63 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray62);
        int[] intArray64 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray63, intArray64);
        double[] doubleArray67 = new double[] { 1 };
        double[] doubleArray69 = new double[] { 1 };
        double[] doubleArray71 = new double[] { 1 };
        double[] doubleArray73 = new double[] { 1 };
        double[] doubleArray75 = new double[] { 1 };
        double[][] doubleArray76 = new double[][] { doubleArray67, doubleArray69, doubleArray71, doubleArray73, doubleArray75 };
        int[] intArray77 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray76, intArray77);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray63, intArray77);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray61, intArray77);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray18, intArray77);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray9, intArray77);
        double[][] doubleArray83 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray9);
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[]");
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[]");
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray71), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray73), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray75), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray77), "[]");
        org.junit.Assert.assertNotNull(doubleArray83);
    }

    @Test
    public void test3782() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3782");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray5 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray6 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray5);
        double[][] doubleArray7 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray6);
        java.lang.Class<?> wildcardClass8 = doubleArray7.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertNotNull(wildcardClass8);
    }

    @Test
    public void test3783() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3783");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[] doubleArray31 = new double[] { 1 };
        double[] doubleArray33 = new double[] { 1 };
        double[] doubleArray35 = new double[] { 1 };
        double[] doubleArray37 = new double[] { 1 };
        double[] doubleArray39 = new double[] { 1 };
        double[][] doubleArray40 = new double[][] { doubleArray31, doubleArray33, doubleArray35, doubleArray37, doubleArray39 };
        int[] intArray41 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray40, intArray41);
        double[][] doubleArray43 = new double[][] {};
        double[][] doubleArray44 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray43);
        int[] intArray45 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray44, intArray45);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray40, intArray45);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray28, intArray45);
        double[][] doubleArray49 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray50 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray51 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray52 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray51);
        double[][] doubleArray53 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray51);
        double[][] doubleArray54 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray51);
        double[][] doubleArray55 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray54);
        double[][] doubleArray56 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray54);
        double[][] doubleArray57 = null;
        double[] doubleArray59 = new double[] { 1 };
        double[] doubleArray61 = new double[] { 1 };
        double[] doubleArray63 = new double[] { 1 };
        double[] doubleArray65 = new double[] { 1 };
        double[] doubleArray67 = new double[] { 1 };
        double[][] doubleArray68 = new double[][] { doubleArray59, doubleArray61, doubleArray63, doubleArray65, doubleArray67 };
        int[] intArray69 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray68, intArray69);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray57, intArray69);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray54, intArray69);
        java.lang.Class<?> wildcardClass73 = doubleArray54.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[]");
        org.junit.Assert.assertNotNull(wildcardClass73);
    }

    @Test
    public void test3784() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3784");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray30 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray29);
        double[][] doubleArray31 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        double[][] doubleArray32 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        double[][] doubleArray33 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        double[][] doubleArray34 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        double[][] doubleArray35 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray34);
        double[][] doubleArray36 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray35);
        double[][] doubleArray37 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray35);
        double[][] doubleArray38 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray35);
        double[][] doubleArray39 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray38);
        double[][] doubleArray40 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray39);
        double[][] doubleArray41 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray39);
        double[][] doubleArray42 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray39);
        double[][] doubleArray43 = null;
        double[][] doubleArray44 = null;
        double[][] doubleArray45 = new double[][] {};
        double[][] doubleArray46 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray45);
        double[] doubleArray48 = new double[] { 1 };
        double[] doubleArray50 = new double[] { 1 };
        double[] doubleArray52 = new double[] { 1 };
        double[] doubleArray54 = new double[] { 1 };
        double[] doubleArray56 = new double[] { 1 };
        double[][] doubleArray57 = new double[][] { doubleArray48, doubleArray50, doubleArray52, doubleArray54, doubleArray56 };
        int[] intArray58 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray57, intArray58);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray45, intArray58);
        double[] doubleArray64 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray68 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray72 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray76 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray77 = new double[][] { doubleArray64, doubleArray68, doubleArray72, doubleArray76 };
        double[] doubleArray79 = new double[] { 1 };
        double[] doubleArray81 = new double[] { 1 };
        double[] doubleArray83 = new double[] { 1 };
        double[] doubleArray85 = new double[] { 1 };
        double[] doubleArray87 = new double[] { 1 };
        double[][] doubleArray88 = new double[][] { doubleArray79, doubleArray81, doubleArray83, doubleArray85, doubleArray87 };
        int[] intArray89 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray88, intArray89);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray77, intArray89);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray45, intArray89);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray44, intArray89);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray43, intArray89);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray42, intArray89);
        java.lang.Class<?> wildcardClass96 = doubleArray42.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[]");
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray79), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray81), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray83), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray85), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray87), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray88);
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray89), "[]");
        org.junit.Assert.assertNotNull(wildcardClass96);
    }

    @Test
    public void test3785() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3785");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[] doubleArray31 = new double[] { 1 };
        double[] doubleArray33 = new double[] { 1 };
        double[] doubleArray35 = new double[] { 1 };
        double[] doubleArray37 = new double[] { 1 };
        double[] doubleArray39 = new double[] { 1 };
        double[][] doubleArray40 = new double[][] { doubleArray31, doubleArray33, doubleArray35, doubleArray37, doubleArray39 };
        int[] intArray41 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray40, intArray41);
        double[][] doubleArray43 = new double[][] {};
        double[][] doubleArray44 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray43);
        int[] intArray45 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray44, intArray45);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray40, intArray45);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray28, intArray45);
        double[][] doubleArray49 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray50 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray51 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[] doubleArray58 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray65 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray72 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray79 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray80 = new double[][] { doubleArray58, doubleArray65, doubleArray72, doubleArray79 };
        double[][] doubleArray81 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray80);
        double[][] doubleArray82 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray80);
        double[][] doubleArray83 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray80);
        double[][] doubleArray84 = new double[][] {};
        double[][] doubleArray85 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray84);
        int[] intArray86 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray85, intArray86);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray83, intArray86);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray51, intArray86);
        double[][] doubleArray90 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray51);
        int[] intArray91 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray51, intArray91);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray79), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertNotNull(doubleArray81);
        org.junit.Assert.assertNotNull(doubleArray82);
        org.junit.Assert.assertNotNull(doubleArray83);
        org.junit.Assert.assertNotNull(doubleArray84);
        org.junit.Assert.assertNotNull(doubleArray85);
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray86), "[]");
        org.junit.Assert.assertNotNull(doubleArray90);
    }

    @Test
    public void test3786() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3786");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray30 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray29);
        double[][] doubleArray31 = new double[][] {};
        double[][] doubleArray32 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray31);
        double[] doubleArray34 = new double[] { 1 };
        double[] doubleArray36 = new double[] { 1 };
        double[] doubleArray38 = new double[] { 1 };
        double[] doubleArray40 = new double[] { 1 };
        double[] doubleArray42 = new double[] { 1 };
        double[][] doubleArray43 = new double[][] { doubleArray34, doubleArray36, doubleArray38, doubleArray40, doubleArray42 };
        int[] intArray44 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray43, intArray44);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray31, intArray44);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray30, intArray44);
        double[][] doubleArray48 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        double[][] doubleArray49 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray48);
        double[][] doubleArray50 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray49);
        java.lang.Class<?> wildcardClass51 = doubleArray49.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertNotNull(wildcardClass51);
    }

    @Test
    public void test3787() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3787");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[][] doubleArray5 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray4);
        double[][] doubleArray6 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray4);
        double[][] doubleArray7 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray4);
        double[][] doubleArray8 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray7);
        double[][] doubleArray9 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray8);
        double[][] doubleArray10 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray9);
        double[][] doubleArray11 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray9);
        double[][] doubleArray12 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray11);
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertNotNull(doubleArray12);
    }

    @Test
    public void test3788() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3788");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray30 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray29);
        double[][] doubleArray31 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        double[][] doubleArray32 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        double[][] doubleArray33 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        double[][] doubleArray34 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray33);
        double[][] doubleArray35 = new double[][] {};
        double[][] doubleArray36 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray35);
        double[] doubleArray38 = new double[] { 1 };
        double[] doubleArray40 = new double[] { 1 };
        double[] doubleArray42 = new double[] { 1 };
        double[] doubleArray44 = new double[] { 1 };
        double[] doubleArray46 = new double[] { 1 };
        double[][] doubleArray47 = new double[][] { doubleArray38, doubleArray40, doubleArray42, doubleArray44, doubleArray46 };
        int[] intArray48 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray47, intArray48);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray35, intArray48);
        double[] doubleArray54 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray58 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray62 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray66 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray67 = new double[][] { doubleArray54, doubleArray58, doubleArray62, doubleArray66 };
        double[] doubleArray69 = new double[] { 1 };
        double[] doubleArray71 = new double[] { 1 };
        double[] doubleArray73 = new double[] { 1 };
        double[] doubleArray75 = new double[] { 1 };
        double[] doubleArray77 = new double[] { 1 };
        double[][] doubleArray78 = new double[][] { doubleArray69, doubleArray71, doubleArray73, doubleArray75, doubleArray77 };
        int[] intArray79 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray78, intArray79);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray67, intArray79);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray35, intArray79);
        double[] doubleArray84 = new double[] { 1 };
        double[] doubleArray86 = new double[] { 1 };
        double[] doubleArray88 = new double[] { 1 };
        double[] doubleArray90 = new double[] { 1 };
        double[] doubleArray92 = new double[] { 1 };
        double[][] doubleArray93 = new double[][] { doubleArray84, doubleArray86, doubleArray88, doubleArray90, doubleArray92 };
        int[] intArray94 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray93, intArray94);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray35, intArray94);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray33, intArray94);
        double[][] doubleArray98 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray33);
        java.lang.Class<?> wildcardClass99 = doubleArray33.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[]");
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray66), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray71), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray73), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray75), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray77), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray79), "[]");
        org.junit.Assert.assertNotNull(doubleArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray84), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray86), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray88), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray90), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray92), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray93);
        org.junit.Assert.assertNotNull(intArray94);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray94), "[]");
        org.junit.Assert.assertNotNull(doubleArray98);
        org.junit.Assert.assertNotNull(wildcardClass99);
    }

    @Test
    public void test3789() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3789");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[] doubleArray6 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray10 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray14 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray18 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray19 = new double[][] { doubleArray6, doubleArray10, doubleArray14, doubleArray18 };
        double[] doubleArray21 = new double[] { 1 };
        double[] doubleArray23 = new double[] { 1 };
        double[] doubleArray25 = new double[] { 1 };
        double[] doubleArray27 = new double[] { 1 };
        double[] doubleArray29 = new double[] { 1 };
        double[][] doubleArray30 = new double[][] { doubleArray21, doubleArray23, doubleArray25, doubleArray27, doubleArray29 };
        int[] intArray31 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray30, intArray31);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray19, intArray31);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray2, intArray31);
        double[][] doubleArray35 = null;
        double[][] doubleArray36 = new double[][] {};
        double[][] doubleArray37 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray36);
        double[][] doubleArray38 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray37);
        double[] doubleArray42 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray46 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray50 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray54 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray55 = new double[][] { doubleArray42, doubleArray46, doubleArray50, doubleArray54 };
        double[] doubleArray57 = new double[] { 1 };
        double[] doubleArray59 = new double[] { 1 };
        double[] doubleArray61 = new double[] { 1 };
        double[] doubleArray63 = new double[] { 1 };
        double[] doubleArray65 = new double[] { 1 };
        double[][] doubleArray66 = new double[][] { doubleArray57, doubleArray59, doubleArray61, doubleArray63, doubleArray65 };
        int[] intArray67 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray66, intArray67);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray55, intArray67);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray38, intArray67);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray35, intArray67);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray2, intArray67);
        double[][] doubleArray73 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray74 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray75 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray74);
        double[][] doubleArray76 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray74);
        java.lang.Class<?> wildcardClass77 = doubleArray76.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[]");
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertNotNull(wildcardClass77);
    }

    @Test
    public void test3790() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3790");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        int[] intArray2 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray1, intArray2);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray5 = new double[][] {};
        double[][] doubleArray6 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray5);
        double[] doubleArray8 = new double[] { 1 };
        double[] doubleArray10 = new double[] { 1 };
        double[] doubleArray12 = new double[] { 1 };
        double[] doubleArray14 = new double[] { 1 };
        double[] doubleArray16 = new double[] { 1 };
        double[][] doubleArray17 = new double[][] { doubleArray8, doubleArray10, doubleArray12, doubleArray14, doubleArray16 };
        int[] intArray18 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray17, intArray18);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray5, intArray18);
        double[] doubleArray24 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray28 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray32 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray36 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray37 = new double[][] { doubleArray24, doubleArray28, doubleArray32, doubleArray36 };
        double[] doubleArray39 = new double[] { 1 };
        double[] doubleArray41 = new double[] { 1 };
        double[] doubleArray43 = new double[] { 1 };
        double[] doubleArray45 = new double[] { 1 };
        double[] doubleArray47 = new double[] { 1 };
        double[][] doubleArray48 = new double[][] { doubleArray39, doubleArray41, doubleArray43, doubleArray45, doubleArray47 };
        int[] intArray49 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray48, intArray49);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray37, intArray49);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray5, intArray49);
        double[][] doubleArray53 = new double[][] {};
        double[][] doubleArray54 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray53);
        double[] doubleArray56 = new double[] { 1 };
        double[] doubleArray58 = new double[] { 1 };
        double[] doubleArray60 = new double[] { 1 };
        double[] doubleArray62 = new double[] { 1 };
        double[] doubleArray64 = new double[] { 1 };
        double[][] doubleArray65 = new double[][] { doubleArray56, doubleArray58, doubleArray60, doubleArray62, doubleArray64 };
        int[] intArray66 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray65, intArray66);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray53, intArray66);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray5, intArray66);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray1, intArray66);
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[]");
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[]");
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[]");
    }

    @Test
    public void test3791() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3791");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray5 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray6 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray5);
        double[][] doubleArray7 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray5);
        double[][] doubleArray8 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray7);
        double[][] doubleArray9 = null;
        double[][] doubleArray10 = null;
        double[][] doubleArray11 = new double[][] {};
        double[][] doubleArray12 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray11);
        double[] doubleArray14 = new double[] { 1 };
        double[] doubleArray16 = new double[] { 1 };
        double[] doubleArray18 = new double[] { 1 };
        double[] doubleArray20 = new double[] { 1 };
        double[] doubleArray22 = new double[] { 1 };
        double[][] doubleArray23 = new double[][] { doubleArray14, doubleArray16, doubleArray18, doubleArray20, doubleArray22 };
        int[] intArray24 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray23, intArray24);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray11, intArray24);
        double[] doubleArray30 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray34 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray38 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray42 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray43 = new double[][] { doubleArray30, doubleArray34, doubleArray38, doubleArray42 };
        double[] doubleArray45 = new double[] { 1 };
        double[] doubleArray47 = new double[] { 1 };
        double[] doubleArray49 = new double[] { 1 };
        double[] doubleArray51 = new double[] { 1 };
        double[] doubleArray53 = new double[] { 1 };
        double[][] doubleArray54 = new double[][] { doubleArray45, doubleArray47, doubleArray49, doubleArray51, doubleArray53 };
        int[] intArray55 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray54, intArray55);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray43, intArray55);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray11, intArray55);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray10, intArray55);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray9, intArray55);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray7, intArray55);
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[]");
    }

    @Test
    public void test3792() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3792");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray3 = new double[][] {};
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[][] doubleArray5 = new double[][] {};
        double[][] doubleArray6 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray5);
        double[] doubleArray8 = new double[] { 1 };
        double[] doubleArray10 = new double[] { 1 };
        double[] doubleArray12 = new double[] { 1 };
        double[] doubleArray14 = new double[] { 1 };
        double[] doubleArray16 = new double[] { 1 };
        double[][] doubleArray17 = new double[][] { doubleArray8, doubleArray10, doubleArray12, doubleArray14, doubleArray16 };
        int[] intArray18 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray17, intArray18);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray5, intArray18);
        double[] doubleArray24 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray28 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray32 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray36 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray37 = new double[][] { doubleArray24, doubleArray28, doubleArray32, doubleArray36 };
        double[] doubleArray39 = new double[] { 1 };
        double[] doubleArray41 = new double[] { 1 };
        double[] doubleArray43 = new double[] { 1 };
        double[] doubleArray45 = new double[] { 1 };
        double[] doubleArray47 = new double[] { 1 };
        double[][] doubleArray48 = new double[][] { doubleArray39, doubleArray41, doubleArray43, doubleArray45, doubleArray47 };
        int[] intArray49 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray48, intArray49);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray37, intArray49);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray5, intArray49);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray4, intArray49);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray2, intArray49);
        double[][] doubleArray55 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray56 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray57 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[] doubleArray61 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray65 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray69 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray73 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray74 = new double[][] { doubleArray61, doubleArray65, doubleArray69, doubleArray73 };
        double[] doubleArray76 = new double[] { 1 };
        double[] doubleArray78 = new double[] { 1 };
        double[] doubleArray80 = new double[] { 1 };
        double[] doubleArray82 = new double[] { 1 };
        double[] doubleArray84 = new double[] { 1 };
        double[][] doubleArray85 = new double[][] { doubleArray76, doubleArray78, doubleArray80, doubleArray82, doubleArray84 };
        int[] intArray86 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray85, intArray86);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray74, intArray86);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray57, intArray86);
        java.lang.Class<?> wildcardClass90 = intArray86.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[]");
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[]");
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray73), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray78), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray80), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray82), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray84), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray85);
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray86), "[]");
        org.junit.Assert.assertNotNull(wildcardClass90);
    }

    @Test
    public void test3793() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3793");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray30 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray29);
        double[][] doubleArray31 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        double[][] doubleArray32 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray31);
        double[][] doubleArray33 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray32);
        double[][] doubleArray34 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray33);
        double[][] doubleArray35 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray34);
        double[][] doubleArray36 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray34);
        double[][] doubleArray37 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray36);
        double[][] doubleArray38 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray36);
        double[][] doubleArray39 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray36);
        java.lang.Class<?> wildcardClass40 = doubleArray39.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertNotNull(wildcardClass40);
    }

    @Test
    public void test3794() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3794");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray30 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray31 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray32 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray33 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray32);
        double[][] doubleArray34 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray32);
        double[][] doubleArray35 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray34);
        double[][] doubleArray36 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray35);
        double[][] doubleArray37 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray36);
        double[][] doubleArray38 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray36);
        double[][] doubleArray39 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray36);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertNotNull(doubleArray39);
    }

    @Test
    public void test3795() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3795");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        int[] intArray2 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray1, intArray2);
        double[] doubleArray5 = new double[] { 1 };
        double[] doubleArray7 = new double[] { 1 };
        double[] doubleArray9 = new double[] { 1 };
        double[] doubleArray11 = new double[] { 1 };
        double[] doubleArray13 = new double[] { 1 };
        double[][] doubleArray14 = new double[][] { doubleArray5, doubleArray7, doubleArray9, doubleArray11, doubleArray13 };
        int[] intArray15 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray14, intArray15);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray1, intArray15);
        double[][] doubleArray18 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray19 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray20 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray19);
        java.lang.Class<?> wildcardClass21 = doubleArray20.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertNotNull(wildcardClass21);
    }

    @Test
    public void test3796() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3796");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray5 = new double[][] {};
        double[][] doubleArray6 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray5);
        double[][] doubleArray7 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray6);
        double[] doubleArray11 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray15 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray19 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray23 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray24 = new double[][] { doubleArray11, doubleArray15, doubleArray19, doubleArray23 };
        double[] doubleArray26 = new double[] { 1 };
        double[] doubleArray28 = new double[] { 1 };
        double[] doubleArray30 = new double[] { 1 };
        double[] doubleArray32 = new double[] { 1 };
        double[] doubleArray34 = new double[] { 1 };
        double[][] doubleArray35 = new double[][] { doubleArray26, doubleArray28, doubleArray30, doubleArray32, doubleArray34 };
        int[] intArray36 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray35, intArray36);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray24, intArray36);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray7, intArray36);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray0, intArray36);
        double[][] doubleArray41 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray42 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[] doubleArray49 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray56 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray63 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray70 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray71 = new double[][] { doubleArray49, doubleArray56, doubleArray63, doubleArray70 };
        double[][] doubleArray72 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray71);
        double[][] doubleArray73 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray72);
        double[][] doubleArray74 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray73);
        double[][] doubleArray75 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray73);
        double[][] doubleArray76 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray73);
        double[][] doubleArray77 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray73);
        double[] doubleArray79 = new double[] { 1 };
        double[] doubleArray81 = new double[] { 1 };
        double[] doubleArray83 = new double[] { 1 };
        double[] doubleArray85 = new double[] { 1 };
        double[] doubleArray87 = new double[] { 1 };
        double[][] doubleArray88 = new double[][] { doubleArray79, doubleArray81, doubleArray83, doubleArray85, doubleArray87 };
        int[] intArray89 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray88, intArray89);
        double[][] doubleArray91 = new double[][] {};
        double[][] doubleArray92 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray91);
        int[] intArray93 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray92, intArray93);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray88, intArray93);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray77, intArray93);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray0, intArray93);
        double[][] doubleArray98 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray99 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray70), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray79), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray81), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray83), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray85), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray87), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray88);
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray89), "[]");
        org.junit.Assert.assertNotNull(doubleArray91);
        org.junit.Assert.assertNotNull(doubleArray92);
        org.junit.Assert.assertNotNull(intArray93);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray93), "[]");
        org.junit.Assert.assertNotNull(doubleArray98);
        org.junit.Assert.assertNotNull(doubleArray99);
    }

    @Test
    public void test3797() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3797");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[] doubleArray3 = new double[] { 1 };
        double[] doubleArray5 = new double[] { 1 };
        double[] doubleArray7 = new double[] { 1 };
        double[] doubleArray9 = new double[] { 1 };
        double[] doubleArray11 = new double[] { 1 };
        double[][] doubleArray12 = new double[][] { doubleArray3, doubleArray5, doubleArray7, doubleArray9, doubleArray11 };
        int[] intArray13 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray12, intArray13);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray0, intArray13);
        double[][] doubleArray16 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray17 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray16);
        double[][] doubleArray18 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray17);
        double[][] doubleArray19 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray18);
        double[][] doubleArray20 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray18);
        double[][] doubleArray21 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray20);
        double[][] doubleArray22 = new double[][] {};
        double[][] doubleArray23 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray22);
        double[][] doubleArray24 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray22);
        double[] doubleArray26 = new double[] { 1 };
        double[] doubleArray28 = new double[] { 1 };
        double[] doubleArray30 = new double[] { 1 };
        double[] doubleArray32 = new double[] { 1 };
        double[] doubleArray34 = new double[] { 1 };
        double[][] doubleArray35 = new double[][] { doubleArray26, doubleArray28, doubleArray30, doubleArray32, doubleArray34 };
        int[] intArray36 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray35, intArray36);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray24, intArray36);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray21, intArray36);
        double[][] doubleArray40 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray21);
        double[][] doubleArray41 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray21);
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertNotNull(doubleArray41);
    }

    @Test
    public void test3798() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3798");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[] doubleArray3 = new double[] { 1 };
        double[] doubleArray5 = new double[] { 1 };
        double[] doubleArray7 = new double[] { 1 };
        double[] doubleArray9 = new double[] { 1 };
        double[] doubleArray11 = new double[] { 1 };
        double[][] doubleArray12 = new double[][] { doubleArray3, doubleArray5, doubleArray7, doubleArray9, doubleArray11 };
        int[] intArray13 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray12, intArray13);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray0, intArray13);
        double[][] doubleArray16 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray17 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray16);
        double[][] doubleArray18 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray17);
        double[][] doubleArray19 = new double[][] {};
        double[][] doubleArray20 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray19);
        double[][] doubleArray21 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray19);
        double[][] doubleArray22 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray21);
        double[][] doubleArray23 = null;
        double[][] doubleArray24 = new double[][] {};
        double[][] doubleArray25 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray24);
        double[][] doubleArray26 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray25);
        double[] doubleArray30 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray34 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray38 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray42 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray43 = new double[][] { doubleArray30, doubleArray34, doubleArray38, doubleArray42 };
        double[] doubleArray45 = new double[] { 1 };
        double[] doubleArray47 = new double[] { 1 };
        double[] doubleArray49 = new double[] { 1 };
        double[] doubleArray51 = new double[] { 1 };
        double[] doubleArray53 = new double[] { 1 };
        double[][] doubleArray54 = new double[][] { doubleArray45, doubleArray47, doubleArray49, doubleArray51, doubleArray53 };
        int[] intArray55 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray54, intArray55);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray43, intArray55);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray26, intArray55);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray23, intArray55);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray22, intArray55);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray17, intArray55);
        double[][] doubleArray62 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray17);
        double[][] doubleArray63 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray62);
        double[][] doubleArray64 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray63);
        java.lang.Class<?> wildcardClass65 = doubleArray63.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[]");
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertNotNull(wildcardClass65);
    }

    @Test
    public void test3799() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3799");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[][] doubleArray5 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray4);
        double[][] doubleArray6 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray5);
        double[][] doubleArray7 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray6);
        double[][] doubleArray8 = new double[][] {};
        double[][] doubleArray9 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray8);
        double[][] doubleArray10 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray8);
        double[][] doubleArray11 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray10);
        double[][] doubleArray12 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray11);
        double[][] doubleArray13 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray11);
        double[][] doubleArray14 = new double[][] {};
        double[][] doubleArray15 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray14);
        double[][] doubleArray16 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray15);
        double[] doubleArray23 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray30 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray37 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray44 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray45 = new double[][] { doubleArray23, doubleArray30, doubleArray37, doubleArray44 };
        double[][] doubleArray46 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray45);
        double[] doubleArray48 = new double[] { 1 };
        double[] doubleArray50 = new double[] { 1 };
        double[] doubleArray52 = new double[] { 1 };
        double[] doubleArray54 = new double[] { 1 };
        double[] doubleArray56 = new double[] { 1 };
        double[][] doubleArray57 = new double[][] { doubleArray48, doubleArray50, doubleArray52, doubleArray54, doubleArray56 };
        int[] intArray58 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray57, intArray58);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray46, intArray58);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray15, intArray58);
        double[] doubleArray65 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray69 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray73 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray77 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray78 = new double[][] { doubleArray65, doubleArray69, doubleArray73, doubleArray77 };
        double[] doubleArray80 = new double[] { 1 };
        double[] doubleArray82 = new double[] { 1 };
        double[] doubleArray84 = new double[] { 1 };
        double[] doubleArray86 = new double[] { 1 };
        double[] doubleArray88 = new double[] { 1 };
        double[][] doubleArray89 = new double[][] { doubleArray80, doubleArray82, doubleArray84, doubleArray86, doubleArray88 };
        int[] intArray90 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray89, intArray90);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray78, intArray90);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray15, intArray90);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray11, intArray90);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray7, intArray90);
        java.lang.Class<?> wildcardClass96 = doubleArray7.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[]");
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray73), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray77), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray80), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray82), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray84), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray86), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray88), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray89);
        org.junit.Assert.assertNotNull(intArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray90), "[]");
        org.junit.Assert.assertNotNull(wildcardClass96);
    }

    @Test
    public void test3800() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3800");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray5 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray4);
        double[][] doubleArray6 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray4);
        double[][] doubleArray7 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray6);
        double[][] doubleArray8 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray7);
        double[][] doubleArray9 = new double[][] {};
        double[][] doubleArray10 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray9);
        double[][] doubleArray11 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray10);
        double[][] doubleArray12 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray11);
        double[][] doubleArray13 = new double[][] {};
        double[][] doubleArray14 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray13);
        int[] intArray15 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray14, intArray15);
        double[][] doubleArray17 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray14);
        double[][] doubleArray18 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray14);
        double[][] doubleArray19 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray18);
        double[][] doubleArray20 = new double[][] {};
        double[][] doubleArray21 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray20);
        double[][] doubleArray22 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray21);
        double[][] doubleArray23 = new double[][] {};
        double[][] doubleArray24 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray23);
        double[][] doubleArray25 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray23);
        double[][] doubleArray26 = new double[][] {};
        double[][] doubleArray27 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray26);
        double[][] doubleArray28 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray27);
        double[][] doubleArray29 = new double[][] {};
        double[][] doubleArray30 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray29);
        double[][] doubleArray31 = new double[][] {};
        double[][] doubleArray32 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray31);
        double[] doubleArray34 = new double[] { 1 };
        double[] doubleArray36 = new double[] { 1 };
        double[] doubleArray38 = new double[] { 1 };
        double[] doubleArray40 = new double[] { 1 };
        double[] doubleArray42 = new double[] { 1 };
        double[][] doubleArray43 = new double[][] { doubleArray34, doubleArray36, doubleArray38, doubleArray40, doubleArray42 };
        int[] intArray44 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray43, intArray44);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray31, intArray44);
        double[] doubleArray50 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray54 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray58 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray62 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray63 = new double[][] { doubleArray50, doubleArray54, doubleArray58, doubleArray62 };
        double[] doubleArray65 = new double[] { 1 };
        double[] doubleArray67 = new double[] { 1 };
        double[] doubleArray69 = new double[] { 1 };
        double[] doubleArray71 = new double[] { 1 };
        double[] doubleArray73 = new double[] { 1 };
        double[][] doubleArray74 = new double[][] { doubleArray65, doubleArray67, doubleArray69, doubleArray71, doubleArray73 };
        int[] intArray75 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray74, intArray75);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray63, intArray75);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray31, intArray75);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray30, intArray75);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray28, intArray75);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray23, intArray75);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray22, intArray75);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray19, intArray75);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray11, intArray75);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray7, intArray75);
        double[][] doubleArray86 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray7);
        java.lang.Class<?> wildcardClass87 = doubleArray7.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[]");
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray71), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray73), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[]");
        org.junit.Assert.assertNotNull(doubleArray86);
        org.junit.Assert.assertNotNull(wildcardClass87);
    }

    @Test
    public void test3801() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3801");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray5 = new double[][] {};
        double[][] doubleArray6 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray5);
        double[][] doubleArray7 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray6);
        double[] doubleArray11 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray15 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray19 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray23 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray24 = new double[][] { doubleArray11, doubleArray15, doubleArray19, doubleArray23 };
        double[] doubleArray26 = new double[] { 1 };
        double[] doubleArray28 = new double[] { 1 };
        double[] doubleArray30 = new double[] { 1 };
        double[] doubleArray32 = new double[] { 1 };
        double[] doubleArray34 = new double[] { 1 };
        double[][] doubleArray35 = new double[][] { doubleArray26, doubleArray28, doubleArray30, doubleArray32, doubleArray34 };
        int[] intArray36 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray35, intArray36);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray24, intArray36);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray7, intArray36);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray0, intArray36);
        double[][] doubleArray41 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray42 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray43 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray42);
        double[][] doubleArray44 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray43);
        double[][] doubleArray45 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray43);
        double[][] doubleArray46 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray43);
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertNotNull(doubleArray46);
    }

    @Test
    public void test3802() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3802");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray30 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray29);
        double[][] doubleArray31 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        double[][] doubleArray32 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        double[][] doubleArray33 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        double[][] doubleArray34 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        double[][] doubleArray35 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray34);
        double[][] doubleArray36 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray35);
        double[][] doubleArray37 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray35);
        double[][] doubleArray38 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray35);
        double[][] doubleArray39 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray38);
        double[][] doubleArray40 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray39);
        double[][] doubleArray41 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray40);
        double[][] doubleArray42 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray40);
        double[][] doubleArray43 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray42);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertNotNull(doubleArray43);
    }

    @Test
    public void test3803() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3803");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray3 = new double[][] {};
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[][] doubleArray5 = new double[][] {};
        double[][] doubleArray6 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray5);
        double[] doubleArray8 = new double[] { 1 };
        double[] doubleArray10 = new double[] { 1 };
        double[] doubleArray12 = new double[] { 1 };
        double[] doubleArray14 = new double[] { 1 };
        double[] doubleArray16 = new double[] { 1 };
        double[][] doubleArray17 = new double[][] { doubleArray8, doubleArray10, doubleArray12, doubleArray14, doubleArray16 };
        int[] intArray18 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray17, intArray18);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray5, intArray18);
        double[] doubleArray24 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray28 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray32 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray36 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray37 = new double[][] { doubleArray24, doubleArray28, doubleArray32, doubleArray36 };
        double[] doubleArray39 = new double[] { 1 };
        double[] doubleArray41 = new double[] { 1 };
        double[] doubleArray43 = new double[] { 1 };
        double[] doubleArray45 = new double[] { 1 };
        double[] doubleArray47 = new double[] { 1 };
        double[][] doubleArray48 = new double[][] { doubleArray39, doubleArray41, doubleArray43, doubleArray45, doubleArray47 };
        int[] intArray49 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray48, intArray49);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray37, intArray49);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray5, intArray49);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray4, intArray49);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray2, intArray49);
        double[][] doubleArray55 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray56 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray57 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray58 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray57);
        double[][] doubleArray59 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray57);
        double[][] doubleArray60 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray57);
        double[][] doubleArray61 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray57);
        java.lang.Class<?> wildcardClass62 = doubleArray57.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[]");
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[]");
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertNotNull(wildcardClass62);
    }

    @Test
    public void test3804() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3804");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray30 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray31 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        double[][] doubleArray32 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        double[][] doubleArray33 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray32);
        double[][] doubleArray34 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray33);
        double[][] doubleArray35 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray34);
        double[][] doubleArray36 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray35);
        double[][] doubleArray37 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray35);
        double[][] doubleArray38 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray37);
        double[][] doubleArray39 = new double[][] {};
        double[][] doubleArray40 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray39);
        double[][] doubleArray41 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray39);
        double[][] doubleArray42 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray39);
        double[][] doubleArray43 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray39);
        double[][] doubleArray44 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray43);
        double[][] doubleArray45 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray43);
        double[][] doubleArray46 = new double[][] {};
        double[][] doubleArray47 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray46);
        int[] intArray48 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray47, intArray48);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray45, intArray48);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray37, intArray48);
        double[][] doubleArray52 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray37);
        double[][] doubleArray53 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray52);
        java.lang.Class<?> wildcardClass54 = doubleArray53.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[]");
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertNotNull(wildcardClass54);
    }

    @Test
    public void test3805() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3805");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray5 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray4);
        double[][] doubleArray6 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray4);
        double[][] doubleArray7 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray6);
        double[][] doubleArray8 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray6);
        double[][] doubleArray9 = null;
        double[][] doubleArray10 = null;
        double[][] doubleArray11 = new double[][] {};
        double[][] doubleArray12 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray11);
        double[][] doubleArray13 = new double[][] {};
        double[][] doubleArray14 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray13);
        double[][] doubleArray15 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray14);
        double[] doubleArray19 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray23 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray27 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray31 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray32 = new double[][] { doubleArray19, doubleArray23, doubleArray27, doubleArray31 };
        double[] doubleArray34 = new double[] { 1 };
        double[] doubleArray36 = new double[] { 1 };
        double[] doubleArray38 = new double[] { 1 };
        double[] doubleArray40 = new double[] { 1 };
        double[] doubleArray42 = new double[] { 1 };
        double[][] doubleArray43 = new double[][] { doubleArray34, doubleArray36, doubleArray38, doubleArray40, doubleArray42 };
        int[] intArray44 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray43, intArray44);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray32, intArray44);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray14, intArray44);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray12, intArray44);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray10, intArray44);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray9, intArray44);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray8, intArray44);
        double[][] doubleArray52 = null;
        double[][] doubleArray53 = null;
        double[] doubleArray55 = new double[] { 1 };
        double[] doubleArray57 = new double[] { 1 };
        double[] doubleArray59 = new double[] { 1 };
        double[] doubleArray61 = new double[] { 1 };
        double[] doubleArray63 = new double[] { 1 };
        double[][] doubleArray64 = new double[][] { doubleArray55, doubleArray57, doubleArray59, doubleArray61, doubleArray63 };
        int[] intArray65 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray64, intArray65);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray53, intArray65);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray52, intArray65);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray8, intArray65);
        java.lang.Class<?> wildcardClass70 = doubleArray8.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[]");
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[]");
        org.junit.Assert.assertNotNull(wildcardClass70);
    }

    @Test
    public void test3806() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3806");
        double[][] doubleArray0 = null;
        double[][] doubleArray1 = null;
        double[][] doubleArray2 = new double[][] {};
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[] doubleArray8 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray12 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray16 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray20 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray21 = new double[][] { doubleArray8, doubleArray12, doubleArray16, doubleArray20 };
        double[] doubleArray23 = new double[] { 1 };
        double[] doubleArray25 = new double[] { 1 };
        double[] doubleArray27 = new double[] { 1 };
        double[] doubleArray29 = new double[] { 1 };
        double[] doubleArray31 = new double[] { 1 };
        double[][] doubleArray32 = new double[][] { doubleArray23, doubleArray25, doubleArray27, doubleArray29, doubleArray31 };
        int[] intArray33 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray32, intArray33);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray21, intArray33);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray3, intArray33);
        double[][] doubleArray37 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[][] doubleArray38 = null;
        double[] doubleArray45 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray52 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray59 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray66 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray67 = new double[][] { doubleArray45, doubleArray52, doubleArray59, doubleArray66 };
        double[][] doubleArray68 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray67);
        double[][] doubleArray69 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray67);
        double[][] doubleArray70 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray67);
        double[][] doubleArray71 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray70);
        double[][] doubleArray72 = new double[][] {};
        double[][] doubleArray73 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray72);
        int[] intArray74 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray73, intArray74);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray71, intArray74);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray38, intArray74);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray37, intArray74);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray1, intArray74);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray0, intArray74);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray66), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[]");
    }

    @Test
    public void test3807() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3807");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = new double[][] {};
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[] doubleArray5 = new double[] { 1 };
        double[] doubleArray7 = new double[] { 1 };
        double[] doubleArray9 = new double[] { 1 };
        double[] doubleArray11 = new double[] { 1 };
        double[] doubleArray13 = new double[] { 1 };
        double[][] doubleArray14 = new double[][] { doubleArray5, doubleArray7, doubleArray9, doubleArray11, doubleArray13 };
        int[] intArray15 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray14, intArray15);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray2, intArray15);
        double[] doubleArray21 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray25 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray29 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray33 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray34 = new double[][] { doubleArray21, doubleArray25, doubleArray29, doubleArray33 };
        double[] doubleArray36 = new double[] { 1 };
        double[] doubleArray38 = new double[] { 1 };
        double[] doubleArray40 = new double[] { 1 };
        double[] doubleArray42 = new double[] { 1 };
        double[] doubleArray44 = new double[] { 1 };
        double[][] doubleArray45 = new double[][] { doubleArray36, doubleArray38, doubleArray40, doubleArray42, doubleArray44 };
        int[] intArray46 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray45, intArray46);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray34, intArray46);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray2, intArray46);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray1, intArray46);
        double[][] doubleArray51 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray52 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray51);
        double[][] doubleArray53 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray52);
        double[][] doubleArray54 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray52);
        double[][] doubleArray55 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray52);
        double[][] doubleArray56 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray55);
        double[][] doubleArray57 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray56);
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertNotNull(doubleArray57);
    }

    @Test
    public void test3808() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3808");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray30 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray31 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray32 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray33 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray32);
        double[][] doubleArray34 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray32);
        double[][] doubleArray35 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray34);
        double[][] doubleArray36 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray35);
        java.lang.Class<?> wildcardClass37 = doubleArray35.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertNotNull(wildcardClass37);
    }

    @Test
    public void test3809() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3809");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[][] doubleArray5 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray4);
        double[][] doubleArray6 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray4);
        double[][] doubleArray7 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray4);
        double[][] doubleArray8 = new double[][] {};
        double[][] doubleArray9 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray8);
        double[][] doubleArray10 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray8);
        double[][] doubleArray11 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray10);
        double[][] doubleArray12 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray11);
        double[][] doubleArray13 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray11);
        double[][] doubleArray14 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray13);
        double[][] doubleArray15 = new double[][] {};
        double[][] doubleArray16 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray15);
        double[][] doubleArray17 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray16);
        double[][] doubleArray18 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray17);
        double[][] doubleArray19 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray17);
        double[][] doubleArray20 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray17);
        double[][] doubleArray21 = new double[][] {};
        double[][] doubleArray22 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray21);
        double[][] doubleArray23 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray21);
        double[] doubleArray30 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray37 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray44 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray51 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray52 = new double[][] { doubleArray30, doubleArray37, doubleArray44, doubleArray51 };
        double[][] doubleArray53 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray52);
        double[][] doubleArray54 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray52);
        double[][] doubleArray55 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray52);
        double[][] doubleArray56 = new double[][] {};
        double[][] doubleArray57 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray56);
        int[] intArray58 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray57, intArray58);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray55, intArray58);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray23, intArray58);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray17, intArray58);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray14, intArray58);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray7, intArray58);
        double[][] doubleArray65 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray7);
        double[][] doubleArray66 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray7);
        java.lang.Class<?> wildcardClass67 = doubleArray66.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[]");
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertNotNull(wildcardClass67);
    }

    @Test
    public void test3810() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3810");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[] doubleArray3 = new double[] { 1 };
        double[] doubleArray5 = new double[] { 1 };
        double[] doubleArray7 = new double[] { 1 };
        double[] doubleArray9 = new double[] { 1 };
        double[] doubleArray11 = new double[] { 1 };
        double[][] doubleArray12 = new double[][] { doubleArray3, doubleArray5, doubleArray7, doubleArray9, doubleArray11 };
        int[] intArray13 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray12, intArray13);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray0, intArray13);
        double[][] doubleArray16 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray17 = new double[][] {};
        double[][] doubleArray18 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray17);
        double[][] doubleArray19 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray17);
        double[][] doubleArray20 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray17);
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray34 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray41 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray48 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray49 = new double[][] { doubleArray27, doubleArray34, doubleArray41, doubleArray48 };
        double[][] doubleArray50 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray49);
        double[][] doubleArray51 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray50);
        double[][] doubleArray52 = new double[][] {};
        double[][] doubleArray53 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray52);
        double[] doubleArray55 = new double[] { 1 };
        double[] doubleArray57 = new double[] { 1 };
        double[] doubleArray59 = new double[] { 1 };
        double[] doubleArray61 = new double[] { 1 };
        double[] doubleArray63 = new double[] { 1 };
        double[][] doubleArray64 = new double[][] { doubleArray55, doubleArray57, doubleArray59, doubleArray61, doubleArray63 };
        int[] intArray65 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray64, intArray65);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray52, intArray65);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray51, intArray65);
        double[][] doubleArray69 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray51);
        double[] doubleArray71 = new double[] { 1 };
        double[] doubleArray73 = new double[] { 1 };
        double[] doubleArray75 = new double[] { 1 };
        double[] doubleArray77 = new double[] { 1 };
        double[] doubleArray79 = new double[] { 1 };
        double[][] doubleArray80 = new double[][] { doubleArray71, doubleArray73, doubleArray75, doubleArray77, doubleArray79 };
        int[] intArray81 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray80, intArray81);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray69, intArray81);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray17, intArray81);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray16, intArray81);
        double[][] doubleArray86 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray16);
        double[][] doubleArray87 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray16);
        java.lang.Class<?> wildcardClass88 = doubleArray87.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[]");
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray71), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray73), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray75), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray77), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray79), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray81), "[]");
        org.junit.Assert.assertNotNull(doubleArray86);
        org.junit.Assert.assertNotNull(doubleArray87);
        org.junit.Assert.assertNotNull(wildcardClass88);
    }

    @Test
    public void test3811() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3811");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray30 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray29);
        double[][] doubleArray31 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        double[][] doubleArray32 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray31);
        double[][] doubleArray33 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray31);
        double[][] doubleArray34 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray33);
        double[][] doubleArray35 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray34);
        double[][] doubleArray36 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray34);
        double[][] doubleArray37 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray34);
        double[][] doubleArray38 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray34);
        double[][] doubleArray39 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray34);
        int[] intArray40 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray39, intArray40);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertNotNull(doubleArray39);
    }

    @Test
    public void test3812() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3812");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[] doubleArray3 = new double[] { 1 };
        double[] doubleArray5 = new double[] { 1 };
        double[] doubleArray7 = new double[] { 1 };
        double[] doubleArray9 = new double[] { 1 };
        double[] doubleArray11 = new double[] { 1 };
        double[][] doubleArray12 = new double[][] { doubleArray3, doubleArray5, doubleArray7, doubleArray9, doubleArray11 };
        int[] intArray13 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray12, intArray13);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray0, intArray13);
        double[] doubleArray19 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray23 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray27 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray31 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray32 = new double[][] { doubleArray19, doubleArray23, doubleArray27, doubleArray31 };
        double[] doubleArray34 = new double[] { 1 };
        double[] doubleArray36 = new double[] { 1 };
        double[] doubleArray38 = new double[] { 1 };
        double[] doubleArray40 = new double[] { 1 };
        double[] doubleArray42 = new double[] { 1 };
        double[][] doubleArray43 = new double[][] { doubleArray34, doubleArray36, doubleArray38, doubleArray40, doubleArray42 };
        int[] intArray44 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray43, intArray44);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray32, intArray44);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray0, intArray44);
        double[] doubleArray49 = new double[] { 1 };
        double[] doubleArray51 = new double[] { 1 };
        double[] doubleArray53 = new double[] { 1 };
        double[] doubleArray55 = new double[] { 1 };
        double[] doubleArray57 = new double[] { 1 };
        double[][] doubleArray58 = new double[][] { doubleArray49, doubleArray51, doubleArray53, doubleArray55, doubleArray57 };
        int[] intArray59 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray58, intArray59);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray0, intArray59);
        double[][] doubleArray62 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray63 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray64 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray65 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray64);
        java.lang.Class<?> wildcardClass66 = doubleArray64.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[]");
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertNotNull(wildcardClass66);
    }

    @Test
    public void test3813() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3813");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray30 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray29);
        double[][] doubleArray31 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        double[][] doubleArray32 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray31);
        double[][] doubleArray33 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray32);
        double[][] doubleArray34 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray33);
        double[][] doubleArray35 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray34);
        double[][] doubleArray36 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray34);
        double[][] doubleArray37 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray34);
        java.lang.Class<?> wildcardClass38 = doubleArray34.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertNotNull(wildcardClass38);
    }

    @Test
    public void test3814() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3814");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[][] doubleArray5 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[][] doubleArray6 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[][] doubleArray7 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[][] doubleArray8 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray7);
        double[][] doubleArray9 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray7);
        double[][] doubleArray10 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray7);
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertNotNull(doubleArray10);
    }

    @Test
    public void test3815() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3815");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[][] doubleArray5 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[][] doubleArray6 = new double[][] {};
        double[][] doubleArray7 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray6);
        double[][] doubleArray8 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray7);
        double[] doubleArray15 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray22 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray29 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray36 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray37 = new double[][] { doubleArray15, doubleArray22, doubleArray29, doubleArray36 };
        double[][] doubleArray38 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray37);
        double[] doubleArray40 = new double[] { 1 };
        double[] doubleArray42 = new double[] { 1 };
        double[] doubleArray44 = new double[] { 1 };
        double[] doubleArray46 = new double[] { 1 };
        double[] doubleArray48 = new double[] { 1 };
        double[][] doubleArray49 = new double[][] { doubleArray40, doubleArray42, doubleArray44, doubleArray46, doubleArray48 };
        int[] intArray50 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray49, intArray50);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray38, intArray50);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray7, intArray50);
        double[] doubleArray57 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray61 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray65 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray69 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray70 = new double[][] { doubleArray57, doubleArray61, doubleArray65, doubleArray69 };
        double[] doubleArray72 = new double[] { 1 };
        double[] doubleArray74 = new double[] { 1 };
        double[] doubleArray76 = new double[] { 1 };
        double[] doubleArray78 = new double[] { 1 };
        double[] doubleArray80 = new double[] { 1 };
        double[][] doubleArray81 = new double[][] { doubleArray72, doubleArray74, doubleArray76, doubleArray78, doubleArray80 };
        int[] intArray82 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray81, intArray82);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray70, intArray82);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray7, intArray82);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray3, intArray82);
        double[][] doubleArray87 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[][] doubleArray88 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[][] doubleArray89 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray88);
        double[][] doubleArray90 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray88);
        double[][] doubleArray91 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray88);
        double[][] doubleArray92 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray88);
        double[][] doubleArray93 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray88);
        double[][] doubleArray94 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray93);
        double[][] doubleArray95 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray94);
        double[][] doubleArray96 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray94);
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[]");
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray74), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray78), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray80), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray81);
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[]");
        org.junit.Assert.assertNotNull(doubleArray87);
        org.junit.Assert.assertNotNull(doubleArray88);
        org.junit.Assert.assertNotNull(doubleArray89);
        org.junit.Assert.assertNotNull(doubleArray90);
        org.junit.Assert.assertNotNull(doubleArray91);
        org.junit.Assert.assertNotNull(doubleArray92);
        org.junit.Assert.assertNotNull(doubleArray93);
        org.junit.Assert.assertNotNull(doubleArray94);
        org.junit.Assert.assertNotNull(doubleArray95);
        org.junit.Assert.assertNotNull(doubleArray96);
    }

    @Test
    public void test3816() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3816");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray30 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray29);
        double[][] doubleArray31 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray29);
        double[][] doubleArray32 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray29);
        double[][] doubleArray33 = new double[][] {};
        double[][] doubleArray34 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray33);
        double[][] doubleArray35 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray33);
        double[][] doubleArray36 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray35);
        double[][] doubleArray37 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray35);
        double[][] doubleArray38 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray37);
        double[][] doubleArray39 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray38);
        double[][] doubleArray40 = new double[][] {};
        double[][] doubleArray41 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray40);
        int[] intArray42 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray41, intArray42);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray39, intArray42);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray29, intArray42);
        double[][] doubleArray46 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray29);
        double[][] doubleArray47 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray46);
        double[][] doubleArray48 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray46);
        double[][] doubleArray49 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray46);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[]");
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertNotNull(doubleArray49);
    }

    @Test
    public void test3817() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3817");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray5 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray6 = new double[][] {};
        double[][] doubleArray7 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray6);
        double[][] doubleArray8 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray6);
        double[][] doubleArray9 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray8);
        double[][] doubleArray10 = null;
        double[][] doubleArray11 = new double[][] {};
        double[][] doubleArray12 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray11);
        double[][] doubleArray13 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray12);
        double[] doubleArray17 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray21 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray25 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray29 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray30 = new double[][] { doubleArray17, doubleArray21, doubleArray25, doubleArray29 };
        double[] doubleArray32 = new double[] { 1 };
        double[] doubleArray34 = new double[] { 1 };
        double[] doubleArray36 = new double[] { 1 };
        double[] doubleArray38 = new double[] { 1 };
        double[] doubleArray40 = new double[] { 1 };
        double[][] doubleArray41 = new double[][] { doubleArray32, doubleArray34, doubleArray36, doubleArray38, doubleArray40 };
        int[] intArray42 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray41, intArray42);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray30, intArray42);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray13, intArray42);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray10, intArray42);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray9, intArray42);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray5, intArray42);
        double[][] doubleArray49 = new double[][] {};
        double[][] doubleArray50 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray49);
        double[][] doubleArray51 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray49);
        double[][] doubleArray52 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray49);
        double[][] doubleArray53 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray52);
        double[] doubleArray55 = new double[] { 1 };
        double[] doubleArray57 = new double[] { 1 };
        double[] doubleArray59 = new double[] { 1 };
        double[] doubleArray61 = new double[] { 1 };
        double[] doubleArray63 = new double[] { 1 };
        double[][] doubleArray64 = new double[][] { doubleArray55, doubleArray57, doubleArray59, doubleArray61, doubleArray63 };
        int[] intArray65 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray64, intArray65);
        double[][] doubleArray67 = new double[][] {};
        double[][] doubleArray68 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray67);
        int[] intArray69 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray68, intArray69);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray64, intArray69);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray52, intArray69);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray5, intArray69);
        double[][] doubleArray74 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray5);
        double[][] doubleArray75 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray5);
        java.lang.Class<?> wildcardClass76 = doubleArray75.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[]");
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[]");
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertNotNull(wildcardClass76);
    }

    @Test
    public void test3818() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3818");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[] doubleArray3 = new double[] { 1 };
        double[] doubleArray5 = new double[] { 1 };
        double[] doubleArray7 = new double[] { 1 };
        double[] doubleArray9 = new double[] { 1 };
        double[] doubleArray11 = new double[] { 1 };
        double[][] doubleArray12 = new double[][] { doubleArray3, doubleArray5, doubleArray7, doubleArray9, doubleArray11 };
        int[] intArray13 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray12, intArray13);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray0, intArray13);
        double[][] doubleArray16 = new double[][] {};
        double[][] doubleArray17 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray16);
        double[][] doubleArray18 = new double[][] {};
        double[][] doubleArray19 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray18);
        double[] doubleArray21 = new double[] { 1 };
        double[] doubleArray23 = new double[] { 1 };
        double[] doubleArray25 = new double[] { 1 };
        double[] doubleArray27 = new double[] { 1 };
        double[] doubleArray29 = new double[] { 1 };
        double[][] doubleArray30 = new double[][] { doubleArray21, doubleArray23, doubleArray25, doubleArray27, doubleArray29 };
        int[] intArray31 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray30, intArray31);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray18, intArray31);
        double[] doubleArray37 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray41 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray45 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray49 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray50 = new double[][] { doubleArray37, doubleArray41, doubleArray45, doubleArray49 };
        double[] doubleArray52 = new double[] { 1 };
        double[] doubleArray54 = new double[] { 1 };
        double[] doubleArray56 = new double[] { 1 };
        double[] doubleArray58 = new double[] { 1 };
        double[] doubleArray60 = new double[] { 1 };
        double[][] doubleArray61 = new double[][] { doubleArray52, doubleArray54, doubleArray56, doubleArray58, doubleArray60 };
        int[] intArray62 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray61, intArray62);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray50, intArray62);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray18, intArray62);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray17, intArray62);
        double[] doubleArray68 = new double[] { 1 };
        double[] doubleArray70 = new double[] { 1 };
        double[] doubleArray72 = new double[] { 1 };
        double[] doubleArray74 = new double[] { 1 };
        double[] doubleArray76 = new double[] { 1 };
        double[][] doubleArray77 = new double[][] { doubleArray68, doubleArray70, doubleArray72, doubleArray74, doubleArray76 };
        int[] intArray78 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray77, intArray78);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray17, intArray78);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray0, intArray78);
        double[][] doubleArray82 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray83 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray84 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray83);
        double[][] doubleArray85 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray83);
        double[][] doubleArray86 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray83);
        double[][] doubleArray87 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray83);
        double[][] doubleArray88 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray87);
        double[][] doubleArray89 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray88);
        double[][] doubleArray90 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray88);
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[]");
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray70), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray74), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[]");
        org.junit.Assert.assertNotNull(doubleArray82);
        org.junit.Assert.assertNotNull(doubleArray83);
        org.junit.Assert.assertNotNull(doubleArray84);
        org.junit.Assert.assertNotNull(doubleArray85);
        org.junit.Assert.assertNotNull(doubleArray86);
        org.junit.Assert.assertNotNull(doubleArray87);
        org.junit.Assert.assertNotNull(doubleArray88);
        org.junit.Assert.assertNotNull(doubleArray89);
        org.junit.Assert.assertNotNull(doubleArray90);
    }

    @Test
    public void test3819() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3819");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        int[] intArray2 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray1, intArray2);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray5 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray6 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray5);
        double[][] doubleArray7 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray5);
        double[][] doubleArray8 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray5);
        double[][] doubleArray9 = new double[][] {};
        double[][] doubleArray10 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray9);
        double[][] doubleArray11 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray10);
        double[][] doubleArray12 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray11);
        double[][] doubleArray13 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray11);
        double[][] doubleArray14 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray11);
        double[][] doubleArray15 = new double[][] {};
        double[][] doubleArray16 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray15);
        double[][] doubleArray17 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray15);
        double[] doubleArray24 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray31 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray38 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray45 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray46 = new double[][] { doubleArray24, doubleArray31, doubleArray38, doubleArray45 };
        double[][] doubleArray47 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray46);
        double[][] doubleArray48 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray46);
        double[][] doubleArray49 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray46);
        double[][] doubleArray50 = new double[][] {};
        double[][] doubleArray51 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray50);
        int[] intArray52 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray51, intArray52);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray49, intArray52);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray17, intArray52);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray11, intArray52);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray8, intArray52);
        double[][] doubleArray58 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray8);
        double[][] doubleArray59 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray58);
        java.lang.Class<?> wildcardClass60 = doubleArray58.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[]");
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertNotNull(wildcardClass60);
    }

    @Test
    public void test3820() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3820");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[] doubleArray6 = new double[] { 1 };
        double[] doubleArray8 = new double[] { 1 };
        double[] doubleArray10 = new double[] { 1 };
        double[] doubleArray12 = new double[] { 1 };
        double[] doubleArray14 = new double[] { 1 };
        double[][] doubleArray15 = new double[][] { doubleArray6, doubleArray8, doubleArray10, doubleArray12, doubleArray14 };
        int[] intArray16 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray15, intArray16);
        double[][] doubleArray18 = new double[][] {};
        double[][] doubleArray19 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray18);
        int[] intArray20 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray19, intArray20);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray15, intArray20);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray3, intArray20);
        double[][] doubleArray24 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[][] doubleArray25 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray24);
        double[][] doubleArray26 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray25);
        double[][] doubleArray27 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray25);
        double[][] doubleArray28 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray27);
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[]");
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
    }

    @Test
    public void test3821() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3821");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray30 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray31 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[] doubleArray33 = new double[] { 1 };
        double[] doubleArray35 = new double[] { 1 };
        double[] doubleArray37 = new double[] { 1 };
        double[] doubleArray39 = new double[] { 1 };
        double[] doubleArray41 = new double[] { 1 };
        double[][] doubleArray42 = new double[][] { doubleArray33, doubleArray35, doubleArray37, doubleArray39, doubleArray41 };
        int[] intArray43 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray42, intArray43);
        double[] doubleArray51 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray58 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray65 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray72 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray73 = new double[][] { doubleArray51, doubleArray58, doubleArray65, doubleArray72 };
        double[][] doubleArray74 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray73);
        double[] doubleArray76 = new double[] { 1 };
        double[] doubleArray78 = new double[] { 1 };
        double[] doubleArray80 = new double[] { 1 };
        double[] doubleArray82 = new double[] { 1 };
        double[] doubleArray84 = new double[] { 1 };
        double[][] doubleArray85 = new double[][] { doubleArray76, doubleArray78, doubleArray80, doubleArray82, doubleArray84 };
        int[] intArray86 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray85, intArray86);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray74, intArray86);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray42, intArray86);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray31, intArray86);
        double[][] doubleArray91 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray31);
        double[][] doubleArray92 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray91);
        double[][] doubleArray93 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray91);
        double[][] doubleArray94 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray91);
        double[][] doubleArray95 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray94);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray78), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray80), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray82), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray84), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray85);
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray86), "[]");
        org.junit.Assert.assertNotNull(doubleArray91);
        org.junit.Assert.assertNotNull(doubleArray92);
        org.junit.Assert.assertNotNull(doubleArray93);
        org.junit.Assert.assertNotNull(doubleArray94);
        org.junit.Assert.assertNotNull(doubleArray95);
    }

    @Test
    public void test3822() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3822");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[] doubleArray6 = new double[] { 1 };
        double[] doubleArray8 = new double[] { 1 };
        double[] doubleArray10 = new double[] { 1 };
        double[] doubleArray12 = new double[] { 1 };
        double[] doubleArray14 = new double[] { 1 };
        double[][] doubleArray15 = new double[][] { doubleArray6, doubleArray8, doubleArray10, doubleArray12, doubleArray14 };
        int[] intArray16 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray15, intArray16);
        double[][] doubleArray18 = new double[][] {};
        double[][] doubleArray19 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray18);
        int[] intArray20 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray19, intArray20);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray15, intArray20);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray3, intArray20);
        double[][] doubleArray24 = new double[][] {};
        double[][] doubleArray25 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray24);
        double[][] doubleArray26 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray25);
        double[] doubleArray30 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray34 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray38 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray42 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray43 = new double[][] { doubleArray30, doubleArray34, doubleArray38, doubleArray42 };
        double[] doubleArray45 = new double[] { 1 };
        double[] doubleArray47 = new double[] { 1 };
        double[] doubleArray49 = new double[] { 1 };
        double[] doubleArray51 = new double[] { 1 };
        double[] doubleArray53 = new double[] { 1 };
        double[][] doubleArray54 = new double[][] { doubleArray45, doubleArray47, doubleArray49, doubleArray51, doubleArray53 };
        int[] intArray55 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray54, intArray55);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray43, intArray55);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray25, intArray55);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray3, intArray55);
        double[][] doubleArray60 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[][] doubleArray61 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray60);
        double[][] doubleArray62 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray60);
        java.lang.Class<?> wildcardClass63 = doubleArray60.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[]");
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[]");
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertNotNull(wildcardClass63);
    }

    @Test
    public void test3823() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3823");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[] doubleArray9 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray16 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray23 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray30 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray31 = new double[][] { doubleArray9, doubleArray16, doubleArray23, doubleArray30 };
        double[][] doubleArray32 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray31);
        double[][] doubleArray33 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray31);
        double[][] doubleArray34 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray31);
        double[][] doubleArray35 = new double[][] {};
        double[][] doubleArray36 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray35);
        int[] intArray37 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray36, intArray37);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray34, intArray37);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray2, intArray37);
        double[][] doubleArray41 = null;
        double[][] doubleArray42 = new double[][] {};
        double[][] doubleArray43 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray42);
        double[][] doubleArray44 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray43);
        double[] doubleArray48 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray52 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray56 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray60 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray61 = new double[][] { doubleArray48, doubleArray52, doubleArray56, doubleArray60 };
        double[] doubleArray63 = new double[] { 1 };
        double[] doubleArray65 = new double[] { 1 };
        double[] doubleArray67 = new double[] { 1 };
        double[] doubleArray69 = new double[] { 1 };
        double[] doubleArray71 = new double[] { 1 };
        double[][] doubleArray72 = new double[][] { doubleArray63, doubleArray65, doubleArray67, doubleArray69, doubleArray71 };
        int[] intArray73 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray72, intArray73);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray61, intArray73);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray44, intArray73);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray41, intArray73);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray2, intArray73);
        double[][] doubleArray79 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray80 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray81 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray80);
        double[][] doubleArray82 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray81);
        java.lang.Class<?> wildcardClass83 = doubleArray81.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray71), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[]");
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertNotNull(doubleArray81);
        org.junit.Assert.assertNotNull(doubleArray82);
        org.junit.Assert.assertNotNull(wildcardClass83);
    }

    @Test
    public void test3824() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3824");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray30 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray29);
        double[][] doubleArray31 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        double[][] doubleArray32 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray31);
        double[][] doubleArray33 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray31);
        double[][] doubleArray34 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray31);
        double[][] doubleArray35 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray31);
        double[][] doubleArray36 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray35);
        double[][] doubleArray37 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray36);
        double[][] doubleArray38 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray36);
        double[][] doubleArray39 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray38);
        double[][] doubleArray40 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray38);
        java.lang.Class<?> wildcardClass41 = doubleArray40.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertNotNull(wildcardClass41);
    }

    @Test
    public void test3825() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3825");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = new double[][] {};
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[][] doubleArray5 = new double[][] {};
        double[][] doubleArray6 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray5);
        double[][] doubleArray7 = new double[][] {};
        double[][] doubleArray8 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray7);
        double[] doubleArray10 = new double[] { 1 };
        double[] doubleArray12 = new double[] { 1 };
        double[] doubleArray14 = new double[] { 1 };
        double[] doubleArray16 = new double[] { 1 };
        double[] doubleArray18 = new double[] { 1 };
        double[][] doubleArray19 = new double[][] { doubleArray10, doubleArray12, doubleArray14, doubleArray16, doubleArray18 };
        int[] intArray20 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray19, intArray20);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray7, intArray20);
        double[] doubleArray26 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray30 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray34 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray38 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray39 = new double[][] { doubleArray26, doubleArray30, doubleArray34, doubleArray38 };
        double[] doubleArray41 = new double[] { 1 };
        double[] doubleArray43 = new double[] { 1 };
        double[] doubleArray45 = new double[] { 1 };
        double[] doubleArray47 = new double[] { 1 };
        double[] doubleArray49 = new double[] { 1 };
        double[][] doubleArray50 = new double[][] { doubleArray41, doubleArray43, doubleArray45, doubleArray47, doubleArray49 };
        int[] intArray51 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray50, intArray51);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray39, intArray51);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray7, intArray51);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray6, intArray51);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray4, intArray51);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray1, intArray51);
        double[][] doubleArray58 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray59 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray58);
        double[][] doubleArray60 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray58);
        double[][] doubleArray61 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray58);
        double[][] doubleArray62 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray61);
        double[][] doubleArray63 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray62);
        java.lang.Class<?> wildcardClass64 = doubleArray63.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[]");
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[]");
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertNotNull(wildcardClass64);
    }

    @Test
    public void test3826() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3826");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[] doubleArray10 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray17 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray24 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray31 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray32 = new double[][] { doubleArray10, doubleArray17, doubleArray24, doubleArray31 };
        double[][] doubleArray33 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray32);
        double[][] doubleArray34 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray32);
        double[][] doubleArray35 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray32);
        double[] doubleArray37 = new double[] { 1 };
        double[] doubleArray39 = new double[] { 1 };
        double[] doubleArray41 = new double[] { 1 };
        double[] doubleArray43 = new double[] { 1 };
        double[] doubleArray45 = new double[] { 1 };
        double[][] doubleArray46 = new double[][] { doubleArray37, doubleArray39, doubleArray41, doubleArray43, doubleArray45 };
        int[] intArray47 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray46, intArray47);
        double[] doubleArray55 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray62 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray69 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray76 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray77 = new double[][] { doubleArray55, doubleArray62, doubleArray69, doubleArray76 };
        double[][] doubleArray78 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray77);
        double[] doubleArray80 = new double[] { 1 };
        double[] doubleArray82 = new double[] { 1 };
        double[] doubleArray84 = new double[] { 1 };
        double[] doubleArray86 = new double[] { 1 };
        double[] doubleArray88 = new double[] { 1 };
        double[][] doubleArray89 = new double[][] { doubleArray80, doubleArray82, doubleArray84, doubleArray86, doubleArray88 };
        int[] intArray90 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray89, intArray90);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray78, intArray90);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray46, intArray90);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray35, intArray90);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray3, intArray90);
        double[][] doubleArray96 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[][] doubleArray97 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray96);
        java.lang.Class<?> wildcardClass98 = doubleArray96.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[]");
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray80), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray82), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray84), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray86), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray88), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray89);
        org.junit.Assert.assertNotNull(intArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray90), "[]");
        org.junit.Assert.assertNotNull(doubleArray96);
        org.junit.Assert.assertNotNull(doubleArray97);
        org.junit.Assert.assertNotNull(wildcardClass98);
    }

    @Test
    public void test3827() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3827");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray3 = new double[][] {};
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[][] doubleArray5 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[][] doubleArray6 = new double[][] {};
        double[][] doubleArray7 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray6);
        double[][] doubleArray8 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray7);
        double[][] doubleArray9 = new double[][] {};
        double[][] doubleArray10 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray9);
        double[][] doubleArray11 = new double[][] {};
        double[][] doubleArray12 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray11);
        double[] doubleArray14 = new double[] { 1 };
        double[] doubleArray16 = new double[] { 1 };
        double[] doubleArray18 = new double[] { 1 };
        double[] doubleArray20 = new double[] { 1 };
        double[] doubleArray22 = new double[] { 1 };
        double[][] doubleArray23 = new double[][] { doubleArray14, doubleArray16, doubleArray18, doubleArray20, doubleArray22 };
        int[] intArray24 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray23, intArray24);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray11, intArray24);
        double[] doubleArray30 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray34 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray38 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray42 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray43 = new double[][] { doubleArray30, doubleArray34, doubleArray38, doubleArray42 };
        double[] doubleArray45 = new double[] { 1 };
        double[] doubleArray47 = new double[] { 1 };
        double[] doubleArray49 = new double[] { 1 };
        double[] doubleArray51 = new double[] { 1 };
        double[] doubleArray53 = new double[] { 1 };
        double[][] doubleArray54 = new double[][] { doubleArray45, doubleArray47, doubleArray49, doubleArray51, doubleArray53 };
        int[] intArray55 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray54, intArray55);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray43, intArray55);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray11, intArray55);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray10, intArray55);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray8, intArray55);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray3, intArray55);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray2, intArray55);
        double[][] doubleArray63 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray64 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray65 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray66 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray65);
        double[][] doubleArray67 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray66);
        java.lang.Class<?> wildcardClass68 = doubleArray66.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[]");
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertNotNull(wildcardClass68);
    }

    @Test
    public void test3828() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3828");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[][] doubleArray5 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray4);
        double[][] doubleArray6 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray5);
        double[][] doubleArray7 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray5);
        double[][] doubleArray8 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray7);
        double[][] doubleArray9 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray7);
        double[][] doubleArray10 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray7);
        java.lang.Class<?> wildcardClass11 = doubleArray10.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertNotNull(wildcardClass11);
    }

    @Test
    public void test3829() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3829");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray4 = new double[][] {};
        double[][] doubleArray5 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray4);
        int[] intArray6 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray5, intArray6);
        double[][] doubleArray8 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray5);
        double[][] doubleArray9 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray5);
        double[][] doubleArray10 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray9);
        double[][] doubleArray11 = new double[][] {};
        double[][] doubleArray12 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray11);
        double[][] doubleArray13 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray12);
        double[][] doubleArray14 = new double[][] {};
        double[][] doubleArray15 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray14);
        double[][] doubleArray16 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray14);
        double[][] doubleArray17 = new double[][] {};
        double[][] doubleArray18 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray17);
        double[][] doubleArray19 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray18);
        double[][] doubleArray20 = new double[][] {};
        double[][] doubleArray21 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray20);
        double[][] doubleArray22 = new double[][] {};
        double[][] doubleArray23 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray22);
        double[] doubleArray25 = new double[] { 1 };
        double[] doubleArray27 = new double[] { 1 };
        double[] doubleArray29 = new double[] { 1 };
        double[] doubleArray31 = new double[] { 1 };
        double[] doubleArray33 = new double[] { 1 };
        double[][] doubleArray34 = new double[][] { doubleArray25, doubleArray27, doubleArray29, doubleArray31, doubleArray33 };
        int[] intArray35 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray34, intArray35);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray22, intArray35);
        double[] doubleArray41 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray45 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray49 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray53 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray54 = new double[][] { doubleArray41, doubleArray45, doubleArray49, doubleArray53 };
        double[] doubleArray56 = new double[] { 1 };
        double[] doubleArray58 = new double[] { 1 };
        double[] doubleArray60 = new double[] { 1 };
        double[] doubleArray62 = new double[] { 1 };
        double[] doubleArray64 = new double[] { 1 };
        double[][] doubleArray65 = new double[][] { doubleArray56, doubleArray58, doubleArray60, doubleArray62, doubleArray64 };
        int[] intArray66 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray65, intArray66);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray54, intArray66);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray22, intArray66);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray21, intArray66);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray19, intArray66);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray14, intArray66);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray13, intArray66);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray10, intArray66);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray2, intArray66);
        java.lang.Class<?> wildcardClass76 = doubleArray2.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[]");
        org.junit.Assert.assertNotNull(wildcardClass76);
    }

    @Test
    public void test3830() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3830");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[][] doubleArray5 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray4);
        double[][] doubleArray6 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray4);
        double[][] doubleArray7 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray4);
        double[][] doubleArray8 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray7);
        double[][] doubleArray9 = new double[][] {};
        double[][] doubleArray10 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray9);
        double[][] doubleArray11 = new double[][] {};
        double[][] doubleArray12 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray11);
        double[] doubleArray14 = new double[] { 1 };
        double[] doubleArray16 = new double[] { 1 };
        double[] doubleArray18 = new double[] { 1 };
        double[] doubleArray20 = new double[] { 1 };
        double[] doubleArray22 = new double[] { 1 };
        double[][] doubleArray23 = new double[][] { doubleArray14, doubleArray16, doubleArray18, doubleArray20, doubleArray22 };
        int[] intArray24 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray23, intArray24);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray11, intArray24);
        double[] doubleArray30 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray34 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray38 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray42 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray43 = new double[][] { doubleArray30, doubleArray34, doubleArray38, doubleArray42 };
        double[] doubleArray45 = new double[] { 1 };
        double[] doubleArray47 = new double[] { 1 };
        double[] doubleArray49 = new double[] { 1 };
        double[] doubleArray51 = new double[] { 1 };
        double[] doubleArray53 = new double[] { 1 };
        double[][] doubleArray54 = new double[][] { doubleArray45, doubleArray47, doubleArray49, doubleArray51, doubleArray53 };
        int[] intArray55 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray54, intArray55);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray43, intArray55);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray11, intArray55);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray9, intArray55);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray7, intArray55);
        java.lang.Class<?> wildcardClass61 = intArray55.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[]");
        org.junit.Assert.assertNotNull(wildcardClass61);
    }

    @Test
    public void test3831() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3831");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray5 = new double[][] {};
        double[][] doubleArray6 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray5);
        double[][] doubleArray7 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray6);
        double[] doubleArray11 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray15 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray19 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray23 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray24 = new double[][] { doubleArray11, doubleArray15, doubleArray19, doubleArray23 };
        double[] doubleArray26 = new double[] { 1 };
        double[] doubleArray28 = new double[] { 1 };
        double[] doubleArray30 = new double[] { 1 };
        double[] doubleArray32 = new double[] { 1 };
        double[] doubleArray34 = new double[] { 1 };
        double[][] doubleArray35 = new double[][] { doubleArray26, doubleArray28, doubleArray30, doubleArray32, doubleArray34 };
        int[] intArray36 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray35, intArray36);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray24, intArray36);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray7, intArray36);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray0, intArray36);
        double[][] doubleArray41 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray42 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray43 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray44 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray43);
        double[][] doubleArray45 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray44);
        java.lang.Class<?> wildcardClass46 = doubleArray44.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertNotNull(wildcardClass46);
    }

    @Test
    public void test3832() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3832");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray30 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray31 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray32 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray31);
        double[][] doubleArray33 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray32);
        double[][] doubleArray34 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray33);
        double[][] doubleArray35 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray33);
        double[][] doubleArray36 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray35);
        double[][] doubleArray37 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray35);
        java.lang.Class<?> wildcardClass38 = doubleArray35.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertNotNull(wildcardClass38);
    }

    @Test
    public void test3833() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3833");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray30 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray31 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray32 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray31);
        double[][] doubleArray33 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray32);
        double[][] doubleArray34 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray32);
        double[][] doubleArray35 = new double[][] {};
        double[][] doubleArray36 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray35);
        double[][] doubleArray37 = new double[][] {};
        double[][] doubleArray38 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray37);
        double[][] doubleArray39 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray38);
        double[][] doubleArray40 = new double[][] {};
        double[][] doubleArray41 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray40);
        double[][] doubleArray42 = new double[][] {};
        double[][] doubleArray43 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray42);
        double[] doubleArray45 = new double[] { 1 };
        double[] doubleArray47 = new double[] { 1 };
        double[] doubleArray49 = new double[] { 1 };
        double[] doubleArray51 = new double[] { 1 };
        double[] doubleArray53 = new double[] { 1 };
        double[][] doubleArray54 = new double[][] { doubleArray45, doubleArray47, doubleArray49, doubleArray51, doubleArray53 };
        int[] intArray55 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray54, intArray55);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray42, intArray55);
        double[] doubleArray61 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray65 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray69 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray73 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray74 = new double[][] { doubleArray61, doubleArray65, doubleArray69, doubleArray73 };
        double[] doubleArray76 = new double[] { 1 };
        double[] doubleArray78 = new double[] { 1 };
        double[] doubleArray80 = new double[] { 1 };
        double[] doubleArray82 = new double[] { 1 };
        double[] doubleArray84 = new double[] { 1 };
        double[][] doubleArray85 = new double[][] { doubleArray76, doubleArray78, doubleArray80, doubleArray82, doubleArray84 };
        int[] intArray86 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray85, intArray86);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray74, intArray86);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray42, intArray86);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray41, intArray86);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray39, intArray86);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray36, intArray86);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray34, intArray86);
        double[][] doubleArray94 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray34);
        double[][] doubleArray95 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray34);
        java.lang.Class<?> wildcardClass96 = doubleArray34.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray73), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray78), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray80), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray82), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray84), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray85);
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray86), "[]");
        org.junit.Assert.assertNotNull(doubleArray94);
        org.junit.Assert.assertNotNull(doubleArray95);
        org.junit.Assert.assertNotNull(wildcardClass96);
    }

    @Test
    public void test3834() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3834");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[] doubleArray31 = new double[] { 1 };
        double[] doubleArray33 = new double[] { 1 };
        double[] doubleArray35 = new double[] { 1 };
        double[] doubleArray37 = new double[] { 1 };
        double[] doubleArray39 = new double[] { 1 };
        double[][] doubleArray40 = new double[][] { doubleArray31, doubleArray33, doubleArray35, doubleArray37, doubleArray39 };
        int[] intArray41 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray40, intArray41);
        double[][] doubleArray43 = new double[][] {};
        double[][] doubleArray44 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray43);
        int[] intArray45 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray44, intArray45);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray40, intArray45);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray28, intArray45);
        double[][] doubleArray49 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray50 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray49);
        double[][] doubleArray51 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray50);
        double[][] doubleArray52 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray50);
        double[][] doubleArray53 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray50);
        double[][] doubleArray54 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray50);
        double[][] doubleArray55 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray54);
        double[][] doubleArray56 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray55);
        double[][] doubleArray57 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray56);
        java.lang.Class<?> wildcardClass58 = doubleArray57.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertNotNull(wildcardClass58);
    }

    @Test
    public void test3835() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3835");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[] doubleArray8 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray12 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray16 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray20 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray21 = new double[][] { doubleArray8, doubleArray12, doubleArray16, doubleArray20 };
        double[] doubleArray23 = new double[] { 1 };
        double[] doubleArray25 = new double[] { 1 };
        double[] doubleArray27 = new double[] { 1 };
        double[] doubleArray29 = new double[] { 1 };
        double[] doubleArray31 = new double[] { 1 };
        double[][] doubleArray32 = new double[][] { doubleArray23, doubleArray25, doubleArray27, doubleArray29, doubleArray31 };
        int[] intArray33 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray32, intArray33);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray21, intArray33);
        double[][] doubleArray36 = new double[][] {};
        double[][] doubleArray37 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray36);
        double[][] doubleArray38 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray37);
        double[][] doubleArray39 = new double[][] {};
        double[][] doubleArray40 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray39);
        double[][] doubleArray41 = new double[][] {};
        double[][] doubleArray42 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray41);
        double[] doubleArray44 = new double[] { 1 };
        double[] doubleArray46 = new double[] { 1 };
        double[] doubleArray48 = new double[] { 1 };
        double[] doubleArray50 = new double[] { 1 };
        double[] doubleArray52 = new double[] { 1 };
        double[][] doubleArray53 = new double[][] { doubleArray44, doubleArray46, doubleArray48, doubleArray50, doubleArray52 };
        int[] intArray54 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray53, intArray54);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray41, intArray54);
        double[] doubleArray60 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray64 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray68 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray72 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray73 = new double[][] { doubleArray60, doubleArray64, doubleArray68, doubleArray72 };
        double[] doubleArray75 = new double[] { 1 };
        double[] doubleArray77 = new double[] { 1 };
        double[] doubleArray79 = new double[] { 1 };
        double[] doubleArray81 = new double[] { 1 };
        double[] doubleArray83 = new double[] { 1 };
        double[][] doubleArray84 = new double[][] { doubleArray75, doubleArray77, doubleArray79, doubleArray81, doubleArray83 };
        int[] intArray85 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray84, intArray85);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray73, intArray85);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray41, intArray85);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray40, intArray85);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray38, intArray85);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray21, intArray85);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray3, intArray85);
        double[][] doubleArray93 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[][] doubleArray94 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[][] doubleArray95 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[][] doubleArray96 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray95);
        double[][] doubleArray97 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray95);
        double[][] doubleArray98 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray95);
        double[][] doubleArray99 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray98);
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[]");
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray75), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray77), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray79), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray81), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray83), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray84);
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray85), "[]");
        org.junit.Assert.assertNotNull(doubleArray93);
        org.junit.Assert.assertNotNull(doubleArray94);
        org.junit.Assert.assertNotNull(doubleArray95);
        org.junit.Assert.assertNotNull(doubleArray96);
        org.junit.Assert.assertNotNull(doubleArray97);
        org.junit.Assert.assertNotNull(doubleArray98);
        org.junit.Assert.assertNotNull(doubleArray99);
    }

    @Test
    public void test3836() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3836");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[][] doubleArray5 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray4);
        double[][] doubleArray6 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray5);
        double[][] doubleArray7 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray5);
        double[][] doubleArray8 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray7);
        double[][] doubleArray9 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray8);
        java.lang.Class<?> wildcardClass10 = doubleArray9.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertNotNull(wildcardClass10);
    }

    @Test
    public void test3837() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3837");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = new double[][] {};
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[] doubleArray5 = new double[] { 1 };
        double[] doubleArray7 = new double[] { 1 };
        double[] doubleArray9 = new double[] { 1 };
        double[] doubleArray11 = new double[] { 1 };
        double[] doubleArray13 = new double[] { 1 };
        double[][] doubleArray14 = new double[][] { doubleArray5, doubleArray7, doubleArray9, doubleArray11, doubleArray13 };
        int[] intArray15 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray14, intArray15);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray2, intArray15);
        double[] doubleArray21 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray25 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray29 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray33 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray34 = new double[][] { doubleArray21, doubleArray25, doubleArray29, doubleArray33 };
        double[] doubleArray36 = new double[] { 1 };
        double[] doubleArray38 = new double[] { 1 };
        double[] doubleArray40 = new double[] { 1 };
        double[] doubleArray42 = new double[] { 1 };
        double[] doubleArray44 = new double[] { 1 };
        double[][] doubleArray45 = new double[][] { doubleArray36, doubleArray38, doubleArray40, doubleArray42, doubleArray44 };
        int[] intArray46 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray45, intArray46);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray34, intArray46);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray2, intArray46);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray1, intArray46);
        double[] doubleArray52 = new double[] { 1 };
        double[] doubleArray54 = new double[] { 1 };
        double[] doubleArray56 = new double[] { 1 };
        double[] doubleArray58 = new double[] { 1 };
        double[] doubleArray60 = new double[] { 1 };
        double[][] doubleArray61 = new double[][] { doubleArray52, doubleArray54, doubleArray56, doubleArray58, doubleArray60 };
        int[] intArray62 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray61, intArray62);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray1, intArray62);
        double[][] doubleArray65 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray66 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray67 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray66);
        double[][] doubleArray68 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray66);
        double[][] doubleArray69 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray68);
        java.lang.Class<?> wildcardClass70 = doubleArray69.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[]");
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[]");
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertNotNull(wildcardClass70);
    }

    @Test
    public void test3838() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3838");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray30 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray31 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray32 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray31);
        double[][] doubleArray33 = new double[][] {};
        double[][] doubleArray34 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray33);
        int[] intArray35 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray34, intArray35);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray32, intArray35);
        double[][] doubleArray38 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray32);
        double[][] doubleArray39 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray32);
        double[][] doubleArray40 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray39);
        java.lang.Class<?> wildcardClass41 = doubleArray39.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertNotNull(wildcardClass41);
    }

    @Test
    public void test3839() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3839");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[] doubleArray31 = new double[] { 1 };
        double[] doubleArray33 = new double[] { 1 };
        double[] doubleArray35 = new double[] { 1 };
        double[] doubleArray37 = new double[] { 1 };
        double[] doubleArray39 = new double[] { 1 };
        double[][] doubleArray40 = new double[][] { doubleArray31, doubleArray33, doubleArray35, doubleArray37, doubleArray39 };
        int[] intArray41 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray40, intArray41);
        double[][] doubleArray43 = new double[][] {};
        double[][] doubleArray44 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray43);
        int[] intArray45 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray44, intArray45);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray40, intArray45);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray28, intArray45);
        double[][] doubleArray49 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray50 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray51 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray52 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray51);
        double[][] doubleArray53 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray51);
        double[][] doubleArray54 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray51);
        double[][] doubleArray55 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray54);
        double[][] doubleArray56 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray55);
        double[][] doubleArray57 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray55);
        java.lang.Class<?> wildcardClass58 = doubleArray57.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertNotNull(wildcardClass58);
    }

    @Test
    public void test3840() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3840");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[][] doubleArray5 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray4);
        double[][] doubleArray6 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray5);
        double[][] doubleArray7 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray5);
        double[][] doubleArray8 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray7);
        double[][] doubleArray9 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray7);
        double[][] doubleArray10 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray7);
        double[][] doubleArray11 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray10);
        java.lang.Class<?> wildcardClass12 = doubleArray10.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertNotNull(wildcardClass12);
    }

    @Test
    public void test3841() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3841");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        int[] intArray2 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray1, intArray2);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray5 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray6 = null;
        double[][] doubleArray7 = new double[][] {};
        double[][] doubleArray8 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray7);
        double[][] doubleArray9 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray8);
        double[][] doubleArray10 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray8);
        double[][] doubleArray11 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray8);
        double[][] doubleArray12 = new double[][] {};
        double[][] doubleArray13 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray12);
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray34 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray41 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray42 = new double[][] { doubleArray20, doubleArray27, doubleArray34, doubleArray41 };
        double[][] doubleArray43 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray42);
        double[][] doubleArray44 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray43);
        double[][] doubleArray45 = new double[][] {};
        double[][] doubleArray46 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray45);
        double[] doubleArray48 = new double[] { 1 };
        double[] doubleArray50 = new double[] { 1 };
        double[] doubleArray52 = new double[] { 1 };
        double[] doubleArray54 = new double[] { 1 };
        double[] doubleArray56 = new double[] { 1 };
        double[][] doubleArray57 = new double[][] { doubleArray48, doubleArray50, doubleArray52, doubleArray54, doubleArray56 };
        int[] intArray58 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray57, intArray58);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray45, intArray58);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray44, intArray58);
        double[][] doubleArray62 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray44);
        double[][] doubleArray63 = new double[][] {};
        double[][] doubleArray64 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray63);
        int[] intArray65 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray64, intArray65);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray62, intArray65);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray13, intArray65);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray11, intArray65);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray6, intArray65);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray1, intArray65);
        java.lang.Class<?> wildcardClass72 = doubleArray1.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[]");
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[]");
        org.junit.Assert.assertNotNull(wildcardClass72);
    }

    @Test
    public void test3842() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3842");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray5 = new double[][] {};
        double[][] doubleArray6 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray5);
        double[][] doubleArray7 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray6);
        double[] doubleArray11 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray15 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray19 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray23 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray24 = new double[][] { doubleArray11, doubleArray15, doubleArray19, doubleArray23 };
        double[] doubleArray26 = new double[] { 1 };
        double[] doubleArray28 = new double[] { 1 };
        double[] doubleArray30 = new double[] { 1 };
        double[] doubleArray32 = new double[] { 1 };
        double[] doubleArray34 = new double[] { 1 };
        double[][] doubleArray35 = new double[][] { doubleArray26, doubleArray28, doubleArray30, doubleArray32, doubleArray34 };
        int[] intArray36 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray35, intArray36);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray24, intArray36);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray7, intArray36);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray0, intArray36);
        double[][] doubleArray41 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray42 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray43 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray44 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray43);
        double[][] doubleArray45 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray44);
        double[][] doubleArray46 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray45);
        double[][] doubleArray47 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray46);
        double[][] doubleArray48 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray46);
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertNotNull(doubleArray48);
    }

    @Test
    public void test3843() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3843");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[] doubleArray8 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray12 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray16 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray20 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray21 = new double[][] { doubleArray8, doubleArray12, doubleArray16, doubleArray20 };
        double[] doubleArray23 = new double[] { 1 };
        double[] doubleArray25 = new double[] { 1 };
        double[] doubleArray27 = new double[] { 1 };
        double[] doubleArray29 = new double[] { 1 };
        double[] doubleArray31 = new double[] { 1 };
        double[][] doubleArray32 = new double[][] { doubleArray23, doubleArray25, doubleArray27, doubleArray29, doubleArray31 };
        int[] intArray33 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray32, intArray33);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray21, intArray33);
        double[][] doubleArray36 = new double[][] {};
        double[][] doubleArray37 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray36);
        double[][] doubleArray38 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray37);
        double[][] doubleArray39 = new double[][] {};
        double[][] doubleArray40 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray39);
        double[][] doubleArray41 = new double[][] {};
        double[][] doubleArray42 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray41);
        double[] doubleArray44 = new double[] { 1 };
        double[] doubleArray46 = new double[] { 1 };
        double[] doubleArray48 = new double[] { 1 };
        double[] doubleArray50 = new double[] { 1 };
        double[] doubleArray52 = new double[] { 1 };
        double[][] doubleArray53 = new double[][] { doubleArray44, doubleArray46, doubleArray48, doubleArray50, doubleArray52 };
        int[] intArray54 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray53, intArray54);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray41, intArray54);
        double[] doubleArray60 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray64 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray68 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray72 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray73 = new double[][] { doubleArray60, doubleArray64, doubleArray68, doubleArray72 };
        double[] doubleArray75 = new double[] { 1 };
        double[] doubleArray77 = new double[] { 1 };
        double[] doubleArray79 = new double[] { 1 };
        double[] doubleArray81 = new double[] { 1 };
        double[] doubleArray83 = new double[] { 1 };
        double[][] doubleArray84 = new double[][] { doubleArray75, doubleArray77, doubleArray79, doubleArray81, doubleArray83 };
        int[] intArray85 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray84, intArray85);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray73, intArray85);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray41, intArray85);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray40, intArray85);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray38, intArray85);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray21, intArray85);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray3, intArray85);
        double[][] doubleArray93 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[][] doubleArray94 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[][] doubleArray95 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[][] doubleArray96 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[][] doubleArray97 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[][] doubleArray98 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[]");
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray75), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray77), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray79), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray81), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray83), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray84);
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray85), "[]");
        org.junit.Assert.assertNotNull(doubleArray93);
        org.junit.Assert.assertNotNull(doubleArray94);
        org.junit.Assert.assertNotNull(doubleArray95);
        org.junit.Assert.assertNotNull(doubleArray96);
        org.junit.Assert.assertNotNull(doubleArray97);
        org.junit.Assert.assertNotNull(doubleArray98);
    }

    @Test
    public void test3844() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3844");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray3 = new double[][] {};
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[][] doubleArray5 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[][] doubleArray6 = new double[][] {};
        double[][] doubleArray7 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray6);
        double[][] doubleArray8 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray7);
        double[][] doubleArray9 = new double[][] {};
        double[][] doubleArray10 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray9);
        double[][] doubleArray11 = new double[][] {};
        double[][] doubleArray12 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray11);
        double[] doubleArray14 = new double[] { 1 };
        double[] doubleArray16 = new double[] { 1 };
        double[] doubleArray18 = new double[] { 1 };
        double[] doubleArray20 = new double[] { 1 };
        double[] doubleArray22 = new double[] { 1 };
        double[][] doubleArray23 = new double[][] { doubleArray14, doubleArray16, doubleArray18, doubleArray20, doubleArray22 };
        int[] intArray24 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray23, intArray24);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray11, intArray24);
        double[] doubleArray30 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray34 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray38 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray42 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray43 = new double[][] { doubleArray30, doubleArray34, doubleArray38, doubleArray42 };
        double[] doubleArray45 = new double[] { 1 };
        double[] doubleArray47 = new double[] { 1 };
        double[] doubleArray49 = new double[] { 1 };
        double[] doubleArray51 = new double[] { 1 };
        double[] doubleArray53 = new double[] { 1 };
        double[][] doubleArray54 = new double[][] { doubleArray45, doubleArray47, doubleArray49, doubleArray51, doubleArray53 };
        int[] intArray55 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray54, intArray55);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray43, intArray55);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray11, intArray55);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray10, intArray55);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray8, intArray55);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray3, intArray55);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray2, intArray55);
        double[][] doubleArray63 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray64 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray65 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        java.lang.Class<?> wildcardClass66 = doubleArray2.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[]");
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertNotNull(wildcardClass66);
    }

    @Test
    public void test3845() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3845");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray30 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray29);
        double[][] doubleArray31 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        double[][] doubleArray32 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        double[][] doubleArray33 = new double[][] {};
        double[][] doubleArray34 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray33);
        double[] doubleArray36 = new double[] { 1 };
        double[] doubleArray38 = new double[] { 1 };
        double[] doubleArray40 = new double[] { 1 };
        double[] doubleArray42 = new double[] { 1 };
        double[] doubleArray44 = new double[] { 1 };
        double[][] doubleArray45 = new double[][] { doubleArray36, doubleArray38, doubleArray40, doubleArray42, doubleArray44 };
        int[] intArray46 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray45, intArray46);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray33, intArray46);
        double[] doubleArray52 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray56 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray60 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray64 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray65 = new double[][] { doubleArray52, doubleArray56, doubleArray60, doubleArray64 };
        double[] doubleArray67 = new double[] { 1 };
        double[] doubleArray69 = new double[] { 1 };
        double[] doubleArray71 = new double[] { 1 };
        double[] doubleArray73 = new double[] { 1 };
        double[] doubleArray75 = new double[] { 1 };
        double[][] doubleArray76 = new double[][] { doubleArray67, doubleArray69, doubleArray71, doubleArray73, doubleArray75 };
        int[] intArray77 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray76, intArray77);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray65, intArray77);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray33, intArray77);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray32, intArray77);
        double[][] doubleArray82 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray32);
        double[][] doubleArray83 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray32);
        double[][] doubleArray84 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray32);
        java.lang.Class<?> wildcardClass85 = doubleArray84.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[]");
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray71), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray73), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray75), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray77), "[]");
        org.junit.Assert.assertNotNull(doubleArray82);
        org.junit.Assert.assertNotNull(doubleArray83);
        org.junit.Assert.assertNotNull(doubleArray84);
        org.junit.Assert.assertNotNull(wildcardClass85);
    }

    @Test
    public void test3846() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3846");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = new double[][] {};
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[] doubleArray8 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray12 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray16 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray20 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray21 = new double[][] { doubleArray8, doubleArray12, doubleArray16, doubleArray20 };
        double[] doubleArray23 = new double[] { 1 };
        double[] doubleArray25 = new double[] { 1 };
        double[] doubleArray27 = new double[] { 1 };
        double[] doubleArray29 = new double[] { 1 };
        double[] doubleArray31 = new double[] { 1 };
        double[][] doubleArray32 = new double[][] { doubleArray23, doubleArray25, doubleArray27, doubleArray29, doubleArray31 };
        int[] intArray33 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray32, intArray33);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray21, intArray33);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray3, intArray33);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray1, intArray33);
        double[][] doubleArray38 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray39 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray38);
        double[][] doubleArray40 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray38);
        double[][] doubleArray41 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray40);
        double[][] doubleArray42 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray41);
        double[][] doubleArray43 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray42);
        java.lang.Class<?> wildcardClass44 = doubleArray42.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(wildcardClass44);
    }

    @Test
    public void test3847() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3847");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[] doubleArray3 = new double[] { 1 };
        double[] doubleArray5 = new double[] { 1 };
        double[] doubleArray7 = new double[] { 1 };
        double[] doubleArray9 = new double[] { 1 };
        double[] doubleArray11 = new double[] { 1 };
        double[][] doubleArray12 = new double[][] { doubleArray3, doubleArray5, doubleArray7, doubleArray9, doubleArray11 };
        int[] intArray13 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray12, intArray13);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray0, intArray13);
        double[] doubleArray19 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray23 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray27 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray31 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray32 = new double[][] { doubleArray19, doubleArray23, doubleArray27, doubleArray31 };
        double[] doubleArray34 = new double[] { 1 };
        double[] doubleArray36 = new double[] { 1 };
        double[] doubleArray38 = new double[] { 1 };
        double[] doubleArray40 = new double[] { 1 };
        double[] doubleArray42 = new double[] { 1 };
        double[][] doubleArray43 = new double[][] { doubleArray34, doubleArray36, doubleArray38, doubleArray40, doubleArray42 };
        int[] intArray44 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray43, intArray44);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray32, intArray44);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray0, intArray44);
        double[][] doubleArray48 = new double[][] {};
        double[][] doubleArray49 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray48);
        double[] doubleArray51 = new double[] { 1 };
        double[] doubleArray53 = new double[] { 1 };
        double[] doubleArray55 = new double[] { 1 };
        double[] doubleArray57 = new double[] { 1 };
        double[] doubleArray59 = new double[] { 1 };
        double[][] doubleArray60 = new double[][] { doubleArray51, doubleArray53, doubleArray55, doubleArray57, doubleArray59 };
        int[] intArray61 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray60, intArray61);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray48, intArray61);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray0, intArray61);
        double[][] doubleArray65 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray66 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray67 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray68 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray69 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray68);
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[]");
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertNotNull(doubleArray69);
    }

    @Test
    public void test3848() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3848");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray30 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray29);
        double[][] doubleArray31 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        double[][] doubleArray32 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        double[][] doubleArray33 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        double[][] doubleArray34 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        double[][] doubleArray35 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray34);
        double[][] doubleArray36 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray34);
        double[][] doubleArray37 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray36);
        double[][] doubleArray38 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray37);
        double[][] doubleArray39 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray37);
        java.lang.Class<?> wildcardClass40 = doubleArray39.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertNotNull(wildcardClass40);
    }

    @Test
    public void test3849() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3849");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray30 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray29);
        double[][] doubleArray31 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        double[][] doubleArray32 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray31);
        double[][] doubleArray33 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray31);
        double[][] doubleArray34 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray31);
        double[][] doubleArray35 = new double[][] {};
        double[][] doubleArray36 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray35);
        double[][] doubleArray37 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray35);
        double[][] doubleArray38 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray35);
        double[][] doubleArray39 = new double[][] {};
        double[][] doubleArray40 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray39);
        double[][] doubleArray41 = new double[][] {};
        double[][] doubleArray42 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray41);
        double[] doubleArray44 = new double[] { 1 };
        double[] doubleArray46 = new double[] { 1 };
        double[] doubleArray48 = new double[] { 1 };
        double[] doubleArray50 = new double[] { 1 };
        double[] doubleArray52 = new double[] { 1 };
        double[][] doubleArray53 = new double[][] { doubleArray44, doubleArray46, doubleArray48, doubleArray50, doubleArray52 };
        int[] intArray54 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray53, intArray54);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray41, intArray54);
        double[] doubleArray60 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray64 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray68 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray72 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray73 = new double[][] { doubleArray60, doubleArray64, doubleArray68, doubleArray72 };
        double[] doubleArray75 = new double[] { 1 };
        double[] doubleArray77 = new double[] { 1 };
        double[] doubleArray79 = new double[] { 1 };
        double[] doubleArray81 = new double[] { 1 };
        double[] doubleArray83 = new double[] { 1 };
        double[][] doubleArray84 = new double[][] { doubleArray75, doubleArray77, doubleArray79, doubleArray81, doubleArray83 };
        int[] intArray85 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray84, intArray85);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray73, intArray85);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray41, intArray85);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray39, intArray85);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray35, intArray85);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray31, intArray85);
        double[][] doubleArray92 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray31);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[]");
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray75), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray77), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray79), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray81), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray83), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray84);
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray85), "[]");
        org.junit.Assert.assertNotNull(doubleArray92);
    }

    @Test
    public void test3850() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3850");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray5 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray4);
        double[][] doubleArray6 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray4);
        double[][] doubleArray7 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray6);
        double[][] doubleArray8 = new double[][] {};
        double[][] doubleArray9 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray8);
        double[][] doubleArray10 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray9);
        double[] doubleArray14 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray18 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray22 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray26 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray27 = new double[][] { doubleArray14, doubleArray18, doubleArray22, doubleArray26 };
        double[] doubleArray29 = new double[] { 1 };
        double[] doubleArray31 = new double[] { 1 };
        double[] doubleArray33 = new double[] { 1 };
        double[] doubleArray35 = new double[] { 1 };
        double[] doubleArray37 = new double[] { 1 };
        double[][] doubleArray38 = new double[][] { doubleArray29, doubleArray31, doubleArray33, doubleArray35, doubleArray37 };
        int[] intArray39 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray38, intArray39);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray27, intArray39);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray10, intArray39);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray6, intArray39);
        double[][] doubleArray44 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray6);
        double[][] doubleArray45 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray6);
        double[][] doubleArray46 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray45);
        double[][] doubleArray47 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray46);
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertNotNull(doubleArray47);
    }

    @Test
    public void test3851() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3851");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[][] doubleArray5 = new double[][] {};
        double[][] doubleArray6 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray5);
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray34 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray35 = new double[][] { doubleArray13, doubleArray20, doubleArray27, doubleArray34 };
        double[][] doubleArray36 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray35);
        double[][] doubleArray37 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray35);
        double[][] doubleArray38 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray35);
        double[][] doubleArray39 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray38);
        double[] doubleArray46 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray53 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray60 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray67 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray68 = new double[][] { doubleArray46, doubleArray53, doubleArray60, doubleArray67 };
        double[][] doubleArray69 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray68);
        double[] doubleArray71 = new double[] { 1 };
        double[] doubleArray73 = new double[] { 1 };
        double[] doubleArray75 = new double[] { 1 };
        double[] doubleArray77 = new double[] { 1 };
        double[] doubleArray79 = new double[] { 1 };
        double[][] doubleArray80 = new double[][] { doubleArray71, doubleArray73, doubleArray75, doubleArray77, doubleArray79 };
        int[] intArray81 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray80, intArray81);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray69, intArray81);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray39, intArray81);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray6, intArray81);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray4, intArray81);
        double[][] doubleArray87 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray4);
        double[][] doubleArray88 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray4);
        double[][] doubleArray89 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray71), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray73), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray75), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray77), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray79), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray81), "[]");
        org.junit.Assert.assertNotNull(doubleArray87);
        org.junit.Assert.assertNotNull(doubleArray88);
        org.junit.Assert.assertNotNull(doubleArray89);
    }

    @Test
    public void test3852() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3852");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[] doubleArray9 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray16 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray23 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray30 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray31 = new double[][] { doubleArray9, doubleArray16, doubleArray23, doubleArray30 };
        double[][] doubleArray32 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray31);
        double[] doubleArray34 = new double[] { 1 };
        double[] doubleArray36 = new double[] { 1 };
        double[] doubleArray38 = new double[] { 1 };
        double[] doubleArray40 = new double[] { 1 };
        double[] doubleArray42 = new double[] { 1 };
        double[][] doubleArray43 = new double[][] { doubleArray34, doubleArray36, doubleArray38, doubleArray40, doubleArray42 };
        int[] intArray44 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray43, intArray44);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray32, intArray44);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray1, intArray44);
        double[][] doubleArray48 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray49 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray48);
        double[][] doubleArray50 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray49);
        java.lang.Class<?> wildcardClass51 = doubleArray50.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertNotNull(wildcardClass51);
    }

    @Test
    public void test3853() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3853");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray30 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray29);
        double[][] doubleArray31 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        double[][] doubleArray32 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray31);
        double[][] doubleArray33 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray31);
        double[][] doubleArray34 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray31);
        double[][] doubleArray35 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray34);
        double[][] doubleArray36 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray34);
        double[][] doubleArray37 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray36);
        double[][] doubleArray38 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray37);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertNotNull(doubleArray38);
    }

    @Test
    public void test3854() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3854");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray3 = new double[][] {};
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[][] doubleArray5 = new double[][] {};
        double[][] doubleArray6 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray5);
        double[] doubleArray8 = new double[] { 1 };
        double[] doubleArray10 = new double[] { 1 };
        double[] doubleArray12 = new double[] { 1 };
        double[] doubleArray14 = new double[] { 1 };
        double[] doubleArray16 = new double[] { 1 };
        double[][] doubleArray17 = new double[][] { doubleArray8, doubleArray10, doubleArray12, doubleArray14, doubleArray16 };
        int[] intArray18 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray17, intArray18);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray5, intArray18);
        double[] doubleArray24 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray28 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray32 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray36 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray37 = new double[][] { doubleArray24, doubleArray28, doubleArray32, doubleArray36 };
        double[] doubleArray39 = new double[] { 1 };
        double[] doubleArray41 = new double[] { 1 };
        double[] doubleArray43 = new double[] { 1 };
        double[] doubleArray45 = new double[] { 1 };
        double[] doubleArray47 = new double[] { 1 };
        double[][] doubleArray48 = new double[][] { doubleArray39, doubleArray41, doubleArray43, doubleArray45, doubleArray47 };
        int[] intArray49 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray48, intArray49);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray37, intArray49);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray5, intArray49);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray4, intArray49);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray2, intArray49);
        double[][] doubleArray55 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray56 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray57 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray58 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray59 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray58);
        java.lang.Class<?> wildcardClass60 = doubleArray58.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[]");
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[]");
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertNotNull(wildcardClass60);
    }

    @Test
    public void test3855() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3855");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[] doubleArray3 = new double[] { 1 };
        double[] doubleArray5 = new double[] { 1 };
        double[] doubleArray7 = new double[] { 1 };
        double[] doubleArray9 = new double[] { 1 };
        double[] doubleArray11 = new double[] { 1 };
        double[][] doubleArray12 = new double[][] { doubleArray3, doubleArray5, doubleArray7, doubleArray9, doubleArray11 };
        int[] intArray13 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray12, intArray13);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray0, intArray13);
        double[][] doubleArray16 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray17 = new double[][] {};
        double[][] doubleArray18 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray17);
        double[][] doubleArray19 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray17);
        double[][] doubleArray20 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray17);
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray34 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray41 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray48 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray49 = new double[][] { doubleArray27, doubleArray34, doubleArray41, doubleArray48 };
        double[][] doubleArray50 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray49);
        double[][] doubleArray51 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray50);
        double[][] doubleArray52 = new double[][] {};
        double[][] doubleArray53 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray52);
        double[] doubleArray55 = new double[] { 1 };
        double[] doubleArray57 = new double[] { 1 };
        double[] doubleArray59 = new double[] { 1 };
        double[] doubleArray61 = new double[] { 1 };
        double[] doubleArray63 = new double[] { 1 };
        double[][] doubleArray64 = new double[][] { doubleArray55, doubleArray57, doubleArray59, doubleArray61, doubleArray63 };
        int[] intArray65 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray64, intArray65);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray52, intArray65);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray51, intArray65);
        double[][] doubleArray69 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray51);
        double[] doubleArray71 = new double[] { 1 };
        double[] doubleArray73 = new double[] { 1 };
        double[] doubleArray75 = new double[] { 1 };
        double[] doubleArray77 = new double[] { 1 };
        double[] doubleArray79 = new double[] { 1 };
        double[][] doubleArray80 = new double[][] { doubleArray71, doubleArray73, doubleArray75, doubleArray77, doubleArray79 };
        int[] intArray81 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray80, intArray81);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray69, intArray81);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray17, intArray81);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray16, intArray81);
        double[][] doubleArray86 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray16);
        double[][] doubleArray87 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray16);
        double[][] doubleArray88 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray87);
        double[][] doubleArray89 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray88);
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[]");
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray71), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray73), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray75), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray77), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray79), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray81), "[]");
        org.junit.Assert.assertNotNull(doubleArray86);
        org.junit.Assert.assertNotNull(doubleArray87);
        org.junit.Assert.assertNotNull(doubleArray88);
        org.junit.Assert.assertNotNull(doubleArray89);
    }

    @Test
    public void test3856() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3856");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[] doubleArray31 = new double[] { 1 };
        double[] doubleArray33 = new double[] { 1 };
        double[] doubleArray35 = new double[] { 1 };
        double[] doubleArray37 = new double[] { 1 };
        double[] doubleArray39 = new double[] { 1 };
        double[][] doubleArray40 = new double[][] { doubleArray31, doubleArray33, doubleArray35, doubleArray37, doubleArray39 };
        int[] intArray41 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray40, intArray41);
        double[][] doubleArray43 = new double[][] {};
        double[][] doubleArray44 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray43);
        int[] intArray45 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray44, intArray45);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray40, intArray45);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray28, intArray45);
        double[][] doubleArray49 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray50 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray51 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray52 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray51);
        double[][] doubleArray53 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray51);
        double[][] doubleArray54 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray51);
        double[][] doubleArray55 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray54);
        double[][] doubleArray56 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray55);
        double[][] doubleArray57 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray55);
        double[][] doubleArray58 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray57);
        double[][] doubleArray59 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray58);
        java.lang.Class<?> wildcardClass60 = doubleArray59.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertNotNull(wildcardClass60);
    }

    @Test
    public void test3857() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3857");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        int[] intArray2 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray1, intArray2);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray5 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray6 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray5);
        double[][] doubleArray7 = new double[][] {};
        double[][] doubleArray8 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray7);
        double[][] doubleArray9 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray8);
        double[][] doubleArray10 = new double[][] {};
        double[][] doubleArray11 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray10);
        double[][] doubleArray12 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray10);
        double[][] doubleArray13 = new double[][] {};
        double[][] doubleArray14 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray13);
        double[][] doubleArray15 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray14);
        double[][] doubleArray16 = new double[][] {};
        double[][] doubleArray17 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray16);
        double[][] doubleArray18 = new double[][] {};
        double[][] doubleArray19 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray18);
        double[] doubleArray21 = new double[] { 1 };
        double[] doubleArray23 = new double[] { 1 };
        double[] doubleArray25 = new double[] { 1 };
        double[] doubleArray27 = new double[] { 1 };
        double[] doubleArray29 = new double[] { 1 };
        double[][] doubleArray30 = new double[][] { doubleArray21, doubleArray23, doubleArray25, doubleArray27, doubleArray29 };
        int[] intArray31 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray30, intArray31);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray18, intArray31);
        double[] doubleArray37 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray41 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray45 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray49 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray50 = new double[][] { doubleArray37, doubleArray41, doubleArray45, doubleArray49 };
        double[] doubleArray52 = new double[] { 1 };
        double[] doubleArray54 = new double[] { 1 };
        double[] doubleArray56 = new double[] { 1 };
        double[] doubleArray58 = new double[] { 1 };
        double[] doubleArray60 = new double[] { 1 };
        double[][] doubleArray61 = new double[][] { doubleArray52, doubleArray54, doubleArray56, doubleArray58, doubleArray60 };
        int[] intArray62 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray61, intArray62);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray50, intArray62);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray18, intArray62);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray17, intArray62);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray15, intArray62);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray10, intArray62);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray9, intArray62);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray6, intArray62);
        double[][] doubleArray71 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray6);
        double[][] doubleArray72 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray71);
        double[][] doubleArray73 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray72);
        double[][] doubleArray74 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray72);
        double[][] doubleArray75 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray74);
        java.lang.Class<?> wildcardClass76 = doubleArray75.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[]");
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertNotNull(wildcardClass76);
    }

    @Test
    public void test3858() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3858");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray30 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray31 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        double[][] doubleArray32 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        double[][] doubleArray33 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        double[][] doubleArray34 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray33);
        double[][] doubleArray35 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray34);
        double[][] doubleArray36 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray35);
        double[][] doubleArray37 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray36);
        double[][] doubleArray38 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray36);
        double[][] doubleArray39 = null;
        double[][] doubleArray40 = null;
        double[][] doubleArray41 = new double[][] {};
        double[][] doubleArray42 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray41);
        int[] intArray43 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray42, intArray43);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray40, intArray43);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray39, intArray43);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray36, intArray43);
        java.lang.Class<?> wildcardClass48 = intArray43.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[]");
        org.junit.Assert.assertNotNull(wildcardClass48);
    }

    @Test
    public void test3859() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3859");
        double[][] doubleArray0 = null;
        double[][] doubleArray1 = new double[][] {};
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray5 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray6 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray5);
        double[][] doubleArray7 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray5);
        double[][] doubleArray8 = new double[][] {};
        double[][] doubleArray9 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray8);
        double[][] doubleArray10 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray9);
        double[][] doubleArray11 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray10);
        double[][] doubleArray12 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray10);
        double[][] doubleArray13 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray10);
        double[][] doubleArray14 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray10);
        double[] doubleArray21 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray28 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray35 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray42 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray43 = new double[][] { doubleArray21, doubleArray28, doubleArray35, doubleArray42 };
        double[][] doubleArray44 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray43);
        double[][] doubleArray45 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray43);
        double[][] doubleArray46 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray43);
        double[][] doubleArray47 = new double[][] {};
        double[][] doubleArray48 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray47);
        int[] intArray49 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray48, intArray49);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray46, intArray49);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray14, intArray49);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray5, intArray49);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray0, intArray49);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[]");
    }

    @Test
    public void test3860() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3860");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[] doubleArray3 = new double[] { 1 };
        double[] doubleArray5 = new double[] { 1 };
        double[] doubleArray7 = new double[] { 1 };
        double[] doubleArray9 = new double[] { 1 };
        double[] doubleArray11 = new double[] { 1 };
        double[][] doubleArray12 = new double[][] { doubleArray3, doubleArray5, doubleArray7, doubleArray9, doubleArray11 };
        int[] intArray13 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray12, intArray13);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray0, intArray13);
        double[][] doubleArray16 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray17 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray16);
        double[][] doubleArray18 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray17);
        double[][] doubleArray19 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray18);
        double[][] doubleArray20 = new double[][] {};
        double[][] doubleArray21 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray20);
        double[] doubleArray23 = new double[] { 1 };
        double[] doubleArray25 = new double[] { 1 };
        double[] doubleArray27 = new double[] { 1 };
        double[] doubleArray29 = new double[] { 1 };
        double[] doubleArray31 = new double[] { 1 };
        double[][] doubleArray32 = new double[][] { doubleArray23, doubleArray25, doubleArray27, doubleArray29, doubleArray31 };
        int[] intArray33 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray32, intArray33);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray20, intArray33);
        double[][] doubleArray36 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray20);
        double[] doubleArray43 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray50 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray57 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray64 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray65 = new double[][] { doubleArray43, doubleArray50, doubleArray57, doubleArray64 };
        double[][] doubleArray66 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray65);
        double[] doubleArray68 = new double[] { 1 };
        double[] doubleArray70 = new double[] { 1 };
        double[] doubleArray72 = new double[] { 1 };
        double[] doubleArray74 = new double[] { 1 };
        double[] doubleArray76 = new double[] { 1 };
        double[][] doubleArray77 = new double[][] { doubleArray68, doubleArray70, doubleArray72, doubleArray74, doubleArray76 };
        int[] intArray78 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray77, intArray78);
        double[][] doubleArray80 = new double[][] {};
        double[][] doubleArray81 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray80);
        int[] intArray82 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray81, intArray82);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray77, intArray82);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray65, intArray82);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray36, intArray82);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray18, intArray82);
        java.lang.Class<?> wildcardClass88 = intArray82.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray70), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray74), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[]");
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertNotNull(doubleArray81);
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[]");
        org.junit.Assert.assertNotNull(wildcardClass88);
    }

    @Test
    public void test3861() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3861");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = new double[][] {};
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[] doubleArray8 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray12 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray16 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray20 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray21 = new double[][] { doubleArray8, doubleArray12, doubleArray16, doubleArray20 };
        double[] doubleArray23 = new double[] { 1 };
        double[] doubleArray25 = new double[] { 1 };
        double[] doubleArray27 = new double[] { 1 };
        double[] doubleArray29 = new double[] { 1 };
        double[] doubleArray31 = new double[] { 1 };
        double[][] doubleArray32 = new double[][] { doubleArray23, doubleArray25, doubleArray27, doubleArray29, doubleArray31 };
        int[] intArray33 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray32, intArray33);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray21, intArray33);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray3, intArray33);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray1, intArray33);
        double[][] doubleArray38 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray39 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray38);
        double[][] doubleArray40 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray38);
        double[][] doubleArray41 = new double[][] {};
        double[][] doubleArray42 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray41);
        double[][] doubleArray43 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray41);
        double[][] doubleArray44 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray41);
        double[] doubleArray51 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray58 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray65 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray72 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray73 = new double[][] { doubleArray51, doubleArray58, doubleArray65, doubleArray72 };
        double[][] doubleArray74 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray73);
        double[][] doubleArray75 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray73);
        double[][] doubleArray76 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray73);
        double[][] doubleArray77 = new double[][] {};
        double[][] doubleArray78 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray77);
        int[] intArray79 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray78, intArray79);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray76, intArray79);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray44, intArray79);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray38, intArray79);
        double[][] doubleArray84 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray38);
        double[][] doubleArray85 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray38);
        double[][] doubleArray86 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray38);
        double[][] doubleArray87 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray86);
        double[][] doubleArray88 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray87);
        double[][] doubleArray89 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray88);
        java.lang.Class<?> wildcardClass90 = doubleArray89.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray79), "[]");
        org.junit.Assert.assertNotNull(doubleArray84);
        org.junit.Assert.assertNotNull(doubleArray85);
        org.junit.Assert.assertNotNull(doubleArray86);
        org.junit.Assert.assertNotNull(doubleArray87);
        org.junit.Assert.assertNotNull(doubleArray88);
        org.junit.Assert.assertNotNull(doubleArray89);
        org.junit.Assert.assertNotNull(wildcardClass90);
    }

    @Test
    public void test3862() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3862");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray30 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray29);
        double[][] doubleArray31 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray29);
        double[] doubleArray38 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray45 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray52 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray59 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray60 = new double[][] { doubleArray38, doubleArray45, doubleArray52, doubleArray59 };
        double[][] doubleArray61 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray60);
        double[][] doubleArray62 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray61);
        double[][] doubleArray63 = new double[][] {};
        double[][] doubleArray64 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray63);
        double[] doubleArray66 = new double[] { 1 };
        double[] doubleArray68 = new double[] { 1 };
        double[] doubleArray70 = new double[] { 1 };
        double[] doubleArray72 = new double[] { 1 };
        double[] doubleArray74 = new double[] { 1 };
        double[][] doubleArray75 = new double[][] { doubleArray66, doubleArray68, doubleArray70, doubleArray72, doubleArray74 };
        int[] intArray76 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray75, intArray76);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray63, intArray76);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray62, intArray76);
        double[][] doubleArray80 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray62);
        double[][] doubleArray81 = new double[][] {};
        double[][] doubleArray82 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray81);
        int[] intArray83 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray82, intArray83);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray80, intArray83);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray31, intArray83);
        double[][] doubleArray87 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray31);
        double[][] doubleArray88 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray31);
        double[][] doubleArray89 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray88);
        double[][] doubleArray90 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray89);
        java.lang.Class<?> wildcardClass91 = doubleArray90.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray66), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray70), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray74), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[]");
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertNotNull(doubleArray81);
        org.junit.Assert.assertNotNull(doubleArray82);
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray83), "[]");
        org.junit.Assert.assertNotNull(doubleArray87);
        org.junit.Assert.assertNotNull(doubleArray88);
        org.junit.Assert.assertNotNull(doubleArray89);
        org.junit.Assert.assertNotNull(doubleArray90);
        org.junit.Assert.assertNotNull(wildcardClass91);
    }

    @Test
    public void test3863() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3863");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[] doubleArray31 = new double[] { 1 };
        double[] doubleArray33 = new double[] { 1 };
        double[] doubleArray35 = new double[] { 1 };
        double[] doubleArray37 = new double[] { 1 };
        double[] doubleArray39 = new double[] { 1 };
        double[][] doubleArray40 = new double[][] { doubleArray31, doubleArray33, doubleArray35, doubleArray37, doubleArray39 };
        int[] intArray41 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray40, intArray41);
        double[][] doubleArray43 = new double[][] {};
        double[][] doubleArray44 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray43);
        int[] intArray45 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray44, intArray45);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray40, intArray45);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray28, intArray45);
        double[][] doubleArray49 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray50 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray49);
        double[][] doubleArray51 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray50);
        double[][] doubleArray52 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray50);
        double[][] doubleArray53 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray50);
        double[][] doubleArray54 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray53);
        double[][] doubleArray55 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray53);
        double[][] doubleArray56 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray53);
        double[][] doubleArray57 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray56);
        double[][] doubleArray58 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray57);
        double[][] doubleArray59 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray57);
        double[][] doubleArray60 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray57);
        java.lang.Class<?> wildcardClass61 = doubleArray60.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertNotNull(wildcardClass61);
    }

    @Test
    public void test3864() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3864");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray30 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray29);
        double[][] doubleArray31 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        double[][] doubleArray32 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        double[][] doubleArray33 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        double[][] doubleArray34 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        double[][] doubleArray35 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray34);
        double[][] doubleArray36 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray35);
        double[][] doubleArray37 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray35);
        double[][] doubleArray38 = new double[][] {};
        double[][] doubleArray39 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray38);
        double[][] doubleArray40 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray39);
        double[] doubleArray44 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray48 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray52 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray56 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray57 = new double[][] { doubleArray44, doubleArray48, doubleArray52, doubleArray56 };
        double[] doubleArray59 = new double[] { 1 };
        double[] doubleArray61 = new double[] { 1 };
        double[] doubleArray63 = new double[] { 1 };
        double[] doubleArray65 = new double[] { 1 };
        double[] doubleArray67 = new double[] { 1 };
        double[][] doubleArray68 = new double[][] { doubleArray59, doubleArray61, doubleArray63, doubleArray65, doubleArray67 };
        int[] intArray69 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray68, intArray69);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray57, intArray69);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray39, intArray69);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray37, intArray69);
        double[][] doubleArray74 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray37);
        double[][] doubleArray75 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray74);
        java.lang.Class<?> wildcardClass76 = doubleArray75.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[]");
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertNotNull(wildcardClass76);
    }

    @Test
    public void test3865() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3865");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray5 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray4);
        double[][] doubleArray6 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray4);
        double[][] doubleArray7 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray6);
        double[][] doubleArray8 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray6);
        double[][] doubleArray9 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray6);
        double[][] doubleArray10 = new double[][] {};
        double[][] doubleArray11 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray10);
        int[] intArray12 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray11, intArray12);
        double[] doubleArray15 = new double[] { 1 };
        double[] doubleArray17 = new double[] { 1 };
        double[] doubleArray19 = new double[] { 1 };
        double[] doubleArray21 = new double[] { 1 };
        double[] doubleArray23 = new double[] { 1 };
        double[][] doubleArray24 = new double[][] { doubleArray15, doubleArray17, doubleArray19, doubleArray21, doubleArray23 };
        int[] intArray25 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray24, intArray25);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray11, intArray25);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray6, intArray25);
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray6);
        double[][] doubleArray30 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray29);
        double[][] doubleArray31 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(doubleArray31);
    }

    @Test
    public void test3866() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3866");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray30 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray29);
        double[][] doubleArray31 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        double[][] doubleArray32 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        double[][] doubleArray33 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        double[][] doubleArray34 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        double[][] doubleArray35 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray34);
        double[][] doubleArray36 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray35);
        double[][] doubleArray37 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray36);
        int[] intArray38 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray37, intArray38);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertNotNull(doubleArray37);
    }

    @Test
    public void test3867() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3867");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[] doubleArray6 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray10 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray14 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray18 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray19 = new double[][] { doubleArray6, doubleArray10, doubleArray14, doubleArray18 };
        double[] doubleArray21 = new double[] { 1 };
        double[] doubleArray23 = new double[] { 1 };
        double[] doubleArray25 = new double[] { 1 };
        double[] doubleArray27 = new double[] { 1 };
        double[] doubleArray29 = new double[] { 1 };
        double[][] doubleArray30 = new double[][] { doubleArray21, doubleArray23, doubleArray25, doubleArray27, doubleArray29 };
        int[] intArray31 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray30, intArray31);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray19, intArray31);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray2, intArray31);
        double[][] doubleArray35 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray36 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray37 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray36);
        double[][] doubleArray38 = new double[][] {};
        double[][] doubleArray39 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray38);
        double[][] doubleArray40 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray38);
        double[][] doubleArray41 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray40);
        double[][] doubleArray42 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray41);
        double[][] doubleArray43 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray41);
        double[][] doubleArray44 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray43);
        double[][] doubleArray45 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray43);
        double[][] doubleArray46 = null;
        double[][] doubleArray47 = new double[][] {};
        double[][] doubleArray48 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray47);
        double[][] doubleArray49 = new double[][] {};
        double[][] doubleArray50 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray49);
        double[][] doubleArray51 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray50);
        double[] doubleArray55 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray59 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray63 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray67 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray68 = new double[][] { doubleArray55, doubleArray59, doubleArray63, doubleArray67 };
        double[] doubleArray70 = new double[] { 1 };
        double[] doubleArray72 = new double[] { 1 };
        double[] doubleArray74 = new double[] { 1 };
        double[] doubleArray76 = new double[] { 1 };
        double[] doubleArray78 = new double[] { 1 };
        double[][] doubleArray79 = new double[][] { doubleArray70, doubleArray72, doubleArray74, doubleArray76, doubleArray78 };
        int[] intArray80 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray79, intArray80);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray68, intArray80);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray50, intArray80);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray48, intArray80);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray46, intArray80);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray45, intArray80);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray36, intArray80);
        double[][] doubleArray88 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray36);
        double[][] doubleArray89 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray36);
        double[][] doubleArray90 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray36);
        double[][] doubleArray91 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray36);
        double[][] doubleArray92 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray36);
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray70), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray74), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray78), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[]");
        org.junit.Assert.assertNotNull(doubleArray88);
        org.junit.Assert.assertNotNull(doubleArray89);
        org.junit.Assert.assertNotNull(doubleArray90);
        org.junit.Assert.assertNotNull(doubleArray91);
        org.junit.Assert.assertNotNull(doubleArray92);
    }

    @Test
    public void test3868() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3868");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray30 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray29);
        double[][] doubleArray31 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        double[][] doubleArray32 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray31);
        double[][] doubleArray33 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray32);
        double[][] doubleArray34 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray33);
        double[][] doubleArray35 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray33);
        double[][] doubleArray36 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray35);
        double[][] doubleArray37 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray35);
        double[][] doubleArray38 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray37);
        double[][] doubleArray39 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray38);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertNotNull(doubleArray39);
    }

    @Test
    public void test3869() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3869");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[] doubleArray31 = new double[] { 1 };
        double[] doubleArray33 = new double[] { 1 };
        double[] doubleArray35 = new double[] { 1 };
        double[] doubleArray37 = new double[] { 1 };
        double[] doubleArray39 = new double[] { 1 };
        double[][] doubleArray40 = new double[][] { doubleArray31, doubleArray33, doubleArray35, doubleArray37, doubleArray39 };
        int[] intArray41 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray40, intArray41);
        double[][] doubleArray43 = new double[][] {};
        double[][] doubleArray44 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray43);
        int[] intArray45 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray44, intArray45);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray40, intArray45);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray28, intArray45);
        double[][] doubleArray49 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray50 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray49);
        double[][] doubleArray51 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray49);
        double[][] doubleArray52 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray49);
        java.lang.Class<?> wildcardClass53 = doubleArray52.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertNotNull(wildcardClass53);
    }

    @Test
    public void test3870() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3870");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        int[] intArray2 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray1, intArray2);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray5 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray6 = new double[][] {};
        double[][] doubleArray7 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray6);
        double[][] doubleArray8 = new double[][] {};
        double[][] doubleArray9 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray8);
        double[][] doubleArray10 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray9);
        double[] doubleArray14 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray18 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray22 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray26 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray27 = new double[][] { doubleArray14, doubleArray18, doubleArray22, doubleArray26 };
        double[] doubleArray29 = new double[] { 1 };
        double[] doubleArray31 = new double[] { 1 };
        double[] doubleArray33 = new double[] { 1 };
        double[] doubleArray35 = new double[] { 1 };
        double[] doubleArray37 = new double[] { 1 };
        double[][] doubleArray38 = new double[][] { doubleArray29, doubleArray31, doubleArray33, doubleArray35, doubleArray37 };
        int[] intArray39 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray38, intArray39);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray27, intArray39);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray9, intArray39);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray7, intArray39);
        double[][] doubleArray44 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray7);
        double[][] doubleArray45 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray44);
        double[] doubleArray47 = new double[] { 1 };
        double[] doubleArray49 = new double[] { 1 };
        double[] doubleArray51 = new double[] { 1 };
        double[] doubleArray53 = new double[] { 1 };
        double[] doubleArray55 = new double[] { 1 };
        double[][] doubleArray56 = new double[][] { doubleArray47, doubleArray49, doubleArray51, doubleArray53, doubleArray55 };
        int[] intArray57 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray56, intArray57);
        double[][] doubleArray59 = new double[][] {};
        double[][] doubleArray60 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray59);
        int[] intArray61 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray60, intArray61);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray56, intArray61);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray44, intArray61);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray1, intArray61);
        double[][] doubleArray66 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray67 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        java.lang.Class<?> wildcardClass68 = doubleArray67.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[]");
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[]");
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertNotNull(wildcardClass68);
    }

    @Test
    public void test3871() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3871");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        int[] intArray2 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray1, intArray2);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray5 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray4);
        double[][] doubleArray6 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray4);
        double[][] doubleArray7 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray6);
        double[][] doubleArray8 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray6);
        double[][] doubleArray9 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray6);
        double[][] doubleArray10 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray6);
        double[][] doubleArray11 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray6);
        double[][] doubleArray12 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray6);
        double[][] doubleArray13 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray12);
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertNotNull(doubleArray13);
    }

    @Test
    public void test3872() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3872");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray30 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray29);
        double[][] doubleArray31 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        double[][] doubleArray32 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        double[][] doubleArray33 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        double[][] doubleArray34 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        double[][] doubleArray35 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray34);
        double[][] doubleArray36 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray35);
        double[][] doubleArray37 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray36);
        double[][] doubleArray38 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray36);
        double[][] doubleArray39 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray38);
        java.lang.Class<?> wildcardClass40 = doubleArray39.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertNotNull(wildcardClass40);
    }

    @Test
    public void test3873() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3873");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        int[] intArray2 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray1, intArray2);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray5 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray4);
        double[][] doubleArray6 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray4);
        double[][] doubleArray7 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray6);
        double[][] doubleArray8 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray6);
        double[][] doubleArray9 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray6);
        double[][] doubleArray10 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray9);
        double[][] doubleArray11 = new double[][] {};
        double[][] doubleArray12 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray11);
        double[][] doubleArray13 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray11);
        double[][] doubleArray14 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray13);
        double[][] doubleArray15 = null;
        double[][] doubleArray16 = new double[][] {};
        double[][] doubleArray17 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray16);
        double[][] doubleArray18 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray17);
        double[] doubleArray22 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray26 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray30 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray34 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray35 = new double[][] { doubleArray22, doubleArray26, doubleArray30, doubleArray34 };
        double[] doubleArray37 = new double[] { 1 };
        double[] doubleArray39 = new double[] { 1 };
        double[] doubleArray41 = new double[] { 1 };
        double[] doubleArray43 = new double[] { 1 };
        double[] doubleArray45 = new double[] { 1 };
        double[][] doubleArray46 = new double[][] { doubleArray37, doubleArray39, doubleArray41, doubleArray43, doubleArray45 };
        int[] intArray47 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray46, intArray47);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray35, intArray47);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray18, intArray47);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray15, intArray47);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray14, intArray47);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray10, intArray47);
        double[][] doubleArray54 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray10);
        java.lang.Class<?> wildcardClass55 = doubleArray54.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[]");
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertNotNull(wildcardClass55);
    }

    @Test
    public void test3874() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3874");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = new double[][] {};
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[] doubleArray5 = new double[] { 1 };
        double[] doubleArray7 = new double[] { 1 };
        double[] doubleArray9 = new double[] { 1 };
        double[] doubleArray11 = new double[] { 1 };
        double[] doubleArray13 = new double[] { 1 };
        double[][] doubleArray14 = new double[][] { doubleArray5, doubleArray7, doubleArray9, doubleArray11, doubleArray13 };
        int[] intArray15 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray14, intArray15);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray2, intArray15);
        double[] doubleArray21 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray25 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray29 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray33 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray34 = new double[][] { doubleArray21, doubleArray25, doubleArray29, doubleArray33 };
        double[] doubleArray36 = new double[] { 1 };
        double[] doubleArray38 = new double[] { 1 };
        double[] doubleArray40 = new double[] { 1 };
        double[] doubleArray42 = new double[] { 1 };
        double[] doubleArray44 = new double[] { 1 };
        double[][] doubleArray45 = new double[][] { doubleArray36, doubleArray38, doubleArray40, doubleArray42, doubleArray44 };
        int[] intArray46 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray45, intArray46);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray34, intArray46);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray2, intArray46);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray1, intArray46);
        double[][] doubleArray51 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray52 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray51);
        double[][] doubleArray53 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray52);
        double[][] doubleArray54 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray53);
        double[][] doubleArray55 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray53);
        double[][] doubleArray56 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray53);
        double[][] doubleArray57 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray53);
        double[][] doubleArray58 = new double[][] {};
        double[][] doubleArray59 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray58);
        double[][] doubleArray60 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray59);
        double[] doubleArray64 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray68 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray72 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray76 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray77 = new double[][] { doubleArray64, doubleArray68, doubleArray72, doubleArray76 };
        double[] doubleArray79 = new double[] { 1 };
        double[] doubleArray81 = new double[] { 1 };
        double[] doubleArray83 = new double[] { 1 };
        double[] doubleArray85 = new double[] { 1 };
        double[] doubleArray87 = new double[] { 1 };
        double[][] doubleArray88 = new double[][] { doubleArray79, doubleArray81, doubleArray83, doubleArray85, doubleArray87 };
        int[] intArray89 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray88, intArray89);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray77, intArray89);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray59, intArray89);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray57, intArray89);
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray79), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray81), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray83), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray85), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray87), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray88);
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray89), "[]");
    }

    @Test
    public void test3875() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3875");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[] doubleArray3 = new double[] { 1 };
        double[] doubleArray5 = new double[] { 1 };
        double[] doubleArray7 = new double[] { 1 };
        double[] doubleArray9 = new double[] { 1 };
        double[] doubleArray11 = new double[] { 1 };
        double[][] doubleArray12 = new double[][] { doubleArray3, doubleArray5, doubleArray7, doubleArray9, doubleArray11 };
        int[] intArray13 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray12, intArray13);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray0, intArray13);
        double[] doubleArray19 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray23 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray27 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray31 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray32 = new double[][] { doubleArray19, doubleArray23, doubleArray27, doubleArray31 };
        double[] doubleArray34 = new double[] { 1 };
        double[] doubleArray36 = new double[] { 1 };
        double[] doubleArray38 = new double[] { 1 };
        double[] doubleArray40 = new double[] { 1 };
        double[] doubleArray42 = new double[] { 1 };
        double[][] doubleArray43 = new double[][] { doubleArray34, doubleArray36, doubleArray38, doubleArray40, doubleArray42 };
        int[] intArray44 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray43, intArray44);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray32, intArray44);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray0, intArray44);
        double[] doubleArray49 = new double[] { 1 };
        double[] doubleArray51 = new double[] { 1 };
        double[] doubleArray53 = new double[] { 1 };
        double[] doubleArray55 = new double[] { 1 };
        double[] doubleArray57 = new double[] { 1 };
        double[][] doubleArray58 = new double[][] { doubleArray49, doubleArray51, doubleArray53, doubleArray55, doubleArray57 };
        int[] intArray59 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray58, intArray59);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray0, intArray59);
        double[][] doubleArray62 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray63 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray62);
        double[][] doubleArray64 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray62);
        double[][] doubleArray65 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray64);
        double[] doubleArray67 = new double[] { 1 };
        double[] doubleArray69 = new double[] { 1 };
        double[] doubleArray71 = new double[] { 1 };
        double[] doubleArray73 = new double[] { 1 };
        double[] doubleArray75 = new double[] { 1 };
        double[][] doubleArray76 = new double[][] { doubleArray67, doubleArray69, doubleArray71, doubleArray73, doubleArray75 };
        int[] intArray77 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray76, intArray77);
        double[][] doubleArray79 = new double[][] {};
        double[][] doubleArray80 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray79);
        int[] intArray81 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray80, intArray81);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray76, intArray81);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray65, intArray81);
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[]");
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray71), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray73), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray75), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray77), "[]");
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray81), "[]");
    }

    @Test
    public void test3876() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3876");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray30 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray31 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray32 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray31);
        double[][] doubleArray33 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray32);
        double[][] doubleArray34 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray32);
        double[][] doubleArray35 = new double[][] {};
        double[][] doubleArray36 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray35);
        double[][] doubleArray37 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray35);
        double[][] doubleArray38 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray35);
        double[][] doubleArray39 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray35);
        double[][] doubleArray40 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray35);
        double[][] doubleArray41 = new double[][] {};
        double[][] doubleArray42 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray41);
        double[][] doubleArray43 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray41);
        double[][] doubleArray44 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray43);
        double[][] doubleArray45 = null;
        double[][] doubleArray46 = new double[][] {};
        double[][] doubleArray47 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray46);
        double[][] doubleArray48 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray47);
        double[] doubleArray52 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray56 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray60 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray64 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray65 = new double[][] { doubleArray52, doubleArray56, doubleArray60, doubleArray64 };
        double[] doubleArray67 = new double[] { 1 };
        double[] doubleArray69 = new double[] { 1 };
        double[] doubleArray71 = new double[] { 1 };
        double[] doubleArray73 = new double[] { 1 };
        double[] doubleArray75 = new double[] { 1 };
        double[][] doubleArray76 = new double[][] { doubleArray67, doubleArray69, doubleArray71, doubleArray73, doubleArray75 };
        int[] intArray77 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray76, intArray77);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray65, intArray77);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray48, intArray77);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray45, intArray77);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray44, intArray77);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray40, intArray77);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray34, intArray77);
        double[][] doubleArray85 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray34);
        double[][] doubleArray86 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray34);
        double[][] doubleArray87 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray86);
        double[][] doubleArray88 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray87);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray71), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray73), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray75), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray77), "[]");
        org.junit.Assert.assertNotNull(doubleArray85);
        org.junit.Assert.assertNotNull(doubleArray86);
        org.junit.Assert.assertNotNull(doubleArray87);
        org.junit.Assert.assertNotNull(doubleArray88);
    }

    @Test
    public void test3877() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3877");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray30 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray29);
        double[][] doubleArray31 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        double[][] doubleArray32 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        double[][] doubleArray33 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        double[][] doubleArray34 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        double[][] doubleArray35 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        double[][] doubleArray36 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray35);
        double[][] doubleArray37 = null;
        double[][] doubleArray38 = new double[][] {};
        double[][] doubleArray39 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray38);
        int[] intArray40 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray39, intArray40);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray37, intArray40);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray35, intArray40);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[]");
    }

    @Test
    public void test3878() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3878");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[] doubleArray31 = new double[] { 1 };
        double[] doubleArray33 = new double[] { 1 };
        double[] doubleArray35 = new double[] { 1 };
        double[] doubleArray37 = new double[] { 1 };
        double[] doubleArray39 = new double[] { 1 };
        double[][] doubleArray40 = new double[][] { doubleArray31, doubleArray33, doubleArray35, doubleArray37, doubleArray39 };
        int[] intArray41 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray40, intArray41);
        double[][] doubleArray43 = new double[][] {};
        double[][] doubleArray44 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray43);
        int[] intArray45 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray44, intArray45);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray40, intArray45);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray28, intArray45);
        double[][] doubleArray49 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray50 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray49);
        double[] doubleArray57 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray64 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray71 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray78 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray79 = new double[][] { doubleArray57, doubleArray64, doubleArray71, doubleArray78 };
        double[][] doubleArray80 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray79);
        double[][] doubleArray81 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray79);
        double[][] doubleArray82 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray79);
        double[][] doubleArray83 = new double[][] {};
        double[][] doubleArray84 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray83);
        int[] intArray85 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray84, intArray85);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray82, intArray85);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray49, intArray85);
        double[][] doubleArray89 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray49);
        double[][] doubleArray90 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray49);
        java.lang.Class<?> wildcardClass91 = doubleArray90.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray71), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray78), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertNotNull(doubleArray81);
        org.junit.Assert.assertNotNull(doubleArray82);
        org.junit.Assert.assertNotNull(doubleArray83);
        org.junit.Assert.assertNotNull(doubleArray84);
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray85), "[]");
        org.junit.Assert.assertNotNull(doubleArray89);
        org.junit.Assert.assertNotNull(doubleArray90);
        org.junit.Assert.assertNotNull(wildcardClass91);
    }

    @Test
    public void test3879() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3879");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[][] doubleArray5 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray4);
        double[][] doubleArray6 = null;
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray34 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray35 = new double[][] { doubleArray13, doubleArray20, doubleArray27, doubleArray34 };
        double[][] doubleArray36 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray35);
        double[][] doubleArray37 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray36);
        double[][] doubleArray38 = new double[][] {};
        double[][] doubleArray39 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray38);
        double[] doubleArray41 = new double[] { 1 };
        double[] doubleArray43 = new double[] { 1 };
        double[] doubleArray45 = new double[] { 1 };
        double[] doubleArray47 = new double[] { 1 };
        double[] doubleArray49 = new double[] { 1 };
        double[][] doubleArray50 = new double[][] { doubleArray41, doubleArray43, doubleArray45, doubleArray47, doubleArray49 };
        int[] intArray51 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray50, intArray51);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray38, intArray51);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray37, intArray51);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray6, intArray51);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray4, intArray51);
        java.lang.Class<?> wildcardClass57 = intArray51.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[]");
        org.junit.Assert.assertNotNull(wildcardClass57);
    }

    @Test
    public void test3880() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3880");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray30 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray29);
        double[][] doubleArray31 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        double[][] doubleArray32 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray31);
        double[][] doubleArray33 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray31);
        double[][] doubleArray34 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray33);
        double[][] doubleArray35 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray33);
        double[][] doubleArray36 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray33);
        double[][] doubleArray37 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray33);
        double[][] doubleArray38 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray33);
        double[][] doubleArray39 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray33);
        double[][] doubleArray40 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray39);
        java.lang.Class<?> wildcardClass41 = doubleArray39.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertNotNull(wildcardClass41);
    }

    @Test
    public void test3881() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3881");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[][] doubleArray5 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[][] doubleArray6 = new double[][] {};
        double[][] doubleArray7 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray6);
        double[][] doubleArray8 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray7);
        double[] doubleArray15 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray22 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray29 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray36 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray37 = new double[][] { doubleArray15, doubleArray22, doubleArray29, doubleArray36 };
        double[][] doubleArray38 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray37);
        double[] doubleArray40 = new double[] { 1 };
        double[] doubleArray42 = new double[] { 1 };
        double[] doubleArray44 = new double[] { 1 };
        double[] doubleArray46 = new double[] { 1 };
        double[] doubleArray48 = new double[] { 1 };
        double[][] doubleArray49 = new double[][] { doubleArray40, doubleArray42, doubleArray44, doubleArray46, doubleArray48 };
        int[] intArray50 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray49, intArray50);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray38, intArray50);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray7, intArray50);
        double[] doubleArray57 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray61 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray65 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray69 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray70 = new double[][] { doubleArray57, doubleArray61, doubleArray65, doubleArray69 };
        double[] doubleArray72 = new double[] { 1 };
        double[] doubleArray74 = new double[] { 1 };
        double[] doubleArray76 = new double[] { 1 };
        double[] doubleArray78 = new double[] { 1 };
        double[] doubleArray80 = new double[] { 1 };
        double[][] doubleArray81 = new double[][] { doubleArray72, doubleArray74, doubleArray76, doubleArray78, doubleArray80 };
        int[] intArray82 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray81, intArray82);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray70, intArray82);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray7, intArray82);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray3, intArray82);
        double[][] doubleArray87 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[][] doubleArray88 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[][] doubleArray89 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray88);
        double[][] doubleArray90 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray88);
        double[][] doubleArray91 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray90);
        double[][] doubleArray92 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray90);
        double[][] doubleArray93 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray90);
        java.lang.Class<?> wildcardClass94 = doubleArray93.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[]");
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray74), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray78), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray80), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray81);
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[]");
        org.junit.Assert.assertNotNull(doubleArray87);
        org.junit.Assert.assertNotNull(doubleArray88);
        org.junit.Assert.assertNotNull(doubleArray89);
        org.junit.Assert.assertNotNull(doubleArray90);
        org.junit.Assert.assertNotNull(doubleArray91);
        org.junit.Assert.assertNotNull(doubleArray92);
        org.junit.Assert.assertNotNull(doubleArray93);
        org.junit.Assert.assertNotNull(wildcardClass94);
    }

    @Test
    public void test3882() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3882");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray5 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray4);
        double[][] doubleArray6 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray4);
        double[][] doubleArray7 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray4);
        double[][] doubleArray8 = new double[][] {};
        double[][] doubleArray9 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray8);
        double[][] doubleArray10 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray8);
        double[][] doubleArray11 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray8);
        double[][] doubleArray12 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray8);
        double[][] doubleArray13 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray12);
        double[][] doubleArray14 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray12);
        double[][] doubleArray15 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray14);
        double[][] doubleArray16 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray15);
        double[][] doubleArray17 = new double[][] {};
        double[][] doubleArray18 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray17);
        double[][] doubleArray19 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray17);
        double[][] doubleArray20 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray19);
        double[][] doubleArray21 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray20);
        double[][] doubleArray22 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray21);
        double[][] doubleArray23 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray22);
        double[][] doubleArray24 = new double[][] {};
        double[][] doubleArray25 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray24);
        double[][] doubleArray26 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray24);
        double[][] doubleArray27 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray24);
        double[][] doubleArray28 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray24);
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray30 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray31 = new double[][] {};
        double[][] doubleArray32 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray31);
        int[] intArray33 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray32, intArray33);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray30, intArray33);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray23, intArray33);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray15, intArray33);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray4, intArray33);
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[]");
    }

    @Test
    public void test3883() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3883");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray30 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray31 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray32 = new double[][] {};
        double[][] doubleArray33 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray32);
        int[] intArray34 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray33, intArray34);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray31, intArray34);
        double[][] doubleArray37 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray31);
        double[][] doubleArray38 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray37);
        double[][] doubleArray39 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray38);
        double[][] doubleArray40 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray39);
        java.lang.Class<?> wildcardClass41 = doubleArray40.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertNotNull(wildcardClass41);
    }

    @Test
    public void test3884() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3884");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = new double[][] {};
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[] doubleArray5 = new double[] { 1 };
        double[] doubleArray7 = new double[] { 1 };
        double[] doubleArray9 = new double[] { 1 };
        double[] doubleArray11 = new double[] { 1 };
        double[] doubleArray13 = new double[] { 1 };
        double[][] doubleArray14 = new double[][] { doubleArray5, doubleArray7, doubleArray9, doubleArray11, doubleArray13 };
        int[] intArray15 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray14, intArray15);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray2, intArray15);
        double[] doubleArray21 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray25 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray29 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray33 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray34 = new double[][] { doubleArray21, doubleArray25, doubleArray29, doubleArray33 };
        double[] doubleArray36 = new double[] { 1 };
        double[] doubleArray38 = new double[] { 1 };
        double[] doubleArray40 = new double[] { 1 };
        double[] doubleArray42 = new double[] { 1 };
        double[] doubleArray44 = new double[] { 1 };
        double[][] doubleArray45 = new double[][] { doubleArray36, doubleArray38, doubleArray40, doubleArray42, doubleArray44 };
        int[] intArray46 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray45, intArray46);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray34, intArray46);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray2, intArray46);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray1, intArray46);
        double[][] doubleArray51 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray52 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray51);
        double[][] doubleArray53 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray52);
        double[][] doubleArray54 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray53);
        double[][] doubleArray55 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray53);
        double[][] doubleArray56 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray55);
        double[][] doubleArray57 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray55);
        double[][] doubleArray58 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray55);
        double[][] doubleArray59 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray55);
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertNotNull(doubleArray59);
    }

    @Test
    public void test3885() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3885");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[][] doubleArray5 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray4);
        double[][] doubleArray6 = new double[][] {};
        double[][] doubleArray7 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray6);
        double[][] doubleArray8 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray7);
        double[][] doubleArray9 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray8);
        double[][] doubleArray10 = new double[][] {};
        double[][] doubleArray11 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray10);
        double[] doubleArray13 = new double[] { 1 };
        double[] doubleArray15 = new double[] { 1 };
        double[] doubleArray17 = new double[] { 1 };
        double[] doubleArray19 = new double[] { 1 };
        double[] doubleArray21 = new double[] { 1 };
        double[][] doubleArray22 = new double[][] { doubleArray13, doubleArray15, doubleArray17, doubleArray19, doubleArray21 };
        int[] intArray23 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray22, intArray23);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray10, intArray23);
        double[] doubleArray29 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray33 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray37 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray41 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray42 = new double[][] { doubleArray29, doubleArray33, doubleArray37, doubleArray41 };
        double[] doubleArray44 = new double[] { 1 };
        double[] doubleArray46 = new double[] { 1 };
        double[] doubleArray48 = new double[] { 1 };
        double[] doubleArray50 = new double[] { 1 };
        double[] doubleArray52 = new double[] { 1 };
        double[][] doubleArray53 = new double[][] { doubleArray44, doubleArray46, doubleArray48, doubleArray50, doubleArray52 };
        int[] intArray54 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray53, intArray54);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray42, intArray54);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray10, intArray54);
        double[] doubleArray59 = new double[] { 1 };
        double[] doubleArray61 = new double[] { 1 };
        double[] doubleArray63 = new double[] { 1 };
        double[] doubleArray65 = new double[] { 1 };
        double[] doubleArray67 = new double[] { 1 };
        double[][] doubleArray68 = new double[][] { doubleArray59, doubleArray61, doubleArray63, doubleArray65, doubleArray67 };
        int[] intArray69 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray68, intArray69);
        double[][] doubleArray71 = new double[][] {};
        double[][] doubleArray72 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray71);
        int[] intArray73 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray72, intArray73);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray68, intArray73);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray10, intArray73);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray9, intArray73);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray5, intArray73);
        double[][] doubleArray79 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray5);
        java.lang.Class<?> wildcardClass80 = doubleArray79.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[]");
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[]");
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[]");
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertNotNull(wildcardClass80);
    }

    @Test
    public void test3886() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3886");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray5 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray4);
        double[][] doubleArray6 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray4);
        double[][] doubleArray7 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray6);
        double[][] doubleArray8 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray6);
        double[][] doubleArray9 = null;
        double[] doubleArray11 = new double[] { 1 };
        double[] doubleArray13 = new double[] { 1 };
        double[] doubleArray15 = new double[] { 1 };
        double[] doubleArray17 = new double[] { 1 };
        double[] doubleArray19 = new double[] { 1 };
        double[][] doubleArray20 = new double[][] { doubleArray11, doubleArray13, doubleArray15, doubleArray17, doubleArray19 };
        int[] intArray21 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray20, intArray21);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray9, intArray21);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray8, intArray21);
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[]");
    }

    @Test
    public void test3887() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3887");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[][] doubleArray5 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[][] doubleArray6 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray5);
        double[][] doubleArray7 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray5);
        double[][] doubleArray8 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray5);
        double[][] doubleArray9 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray8);
        java.lang.Class<?> wildcardClass10 = doubleArray8.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertNotNull(wildcardClass10);
    }

    @Test
    public void test3888() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3888");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[][] doubleArray5 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray4);
        double[][] doubleArray6 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray4);
        double[][] doubleArray7 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray4);
        double[][] doubleArray8 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray7);
        double[][] doubleArray9 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray8);
        double[][] doubleArray10 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray9);
        double[][] doubleArray11 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray10);
        double[][] doubleArray12 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray10);
        int[] intArray13 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray12, intArray13);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertNotNull(doubleArray12);
    }

    @Test
    public void test3889() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3889");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[][] doubleArray5 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray4);
        double[][] doubleArray6 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray5);
        double[][] doubleArray7 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray6);
        double[][] doubleArray8 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray7);
        double[][] doubleArray9 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray7);
        double[] doubleArray16 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray23 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray30 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray37 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray38 = new double[][] { doubleArray16, doubleArray23, doubleArray30, doubleArray37 };
        double[][] doubleArray39 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray38);
        double[][] doubleArray40 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray38);
        double[][] doubleArray41 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray38);
        double[][] doubleArray42 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray41);
        double[][] doubleArray43 = new double[][] {};
        double[][] doubleArray44 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray43);
        int[] intArray45 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray44, intArray45);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray42, intArray45);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray9, intArray45);
        double[][] doubleArray49 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray9);
        java.lang.Class<?> wildcardClass50 = doubleArray49.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertNotNull(wildcardClass50);
    }

    @Test
    public void test3890() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3890");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray5 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray6 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray7 = new double[][] {};
        double[][] doubleArray8 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray7);
        double[][] doubleArray9 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray7);
        double[][] doubleArray10 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray9);
        double[][] doubleArray11 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray9);
        double[][] doubleArray12 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray11);
        double[][] doubleArray13 = new double[][] {};
        double[][] doubleArray14 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray13);
        double[][] doubleArray15 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray13);
        double[][] doubleArray16 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray13);
        double[][] doubleArray17 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray16);
        double[][] doubleArray18 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray16);
        double[][] doubleArray19 = new double[][] {};
        double[][] doubleArray20 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray19);
        double[][] doubleArray21 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray20);
        double[][] doubleArray22 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray21);
        double[][] doubleArray23 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray22);
        double[][] doubleArray24 = null;
        double[][] doubleArray25 = new double[][] {};
        double[][] doubleArray26 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray25);
        double[][] doubleArray27 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray26);
        double[] doubleArray31 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray35 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray39 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray43 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray44 = new double[][] { doubleArray31, doubleArray35, doubleArray39, doubleArray43 };
        double[] doubleArray46 = new double[] { 1 };
        double[] doubleArray48 = new double[] { 1 };
        double[] doubleArray50 = new double[] { 1 };
        double[] doubleArray52 = new double[] { 1 };
        double[] doubleArray54 = new double[] { 1 };
        double[][] doubleArray55 = new double[][] { doubleArray46, doubleArray48, doubleArray50, doubleArray52, doubleArray54 };
        int[] intArray56 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray55, intArray56);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray44, intArray56);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray27, intArray56);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray24, intArray56);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray22, intArray56);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray18, intArray56);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray12, intArray56);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray6, intArray56);
        java.lang.Class<?> wildcardClass65 = intArray56.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[]");
        org.junit.Assert.assertNotNull(wildcardClass65);
    }

    @Test
    public void test3891() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3891");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray3 = new double[][] {};
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[][] doubleArray5 = new double[][] {};
        double[][] doubleArray6 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray5);
        double[] doubleArray8 = new double[] { 1 };
        double[] doubleArray10 = new double[] { 1 };
        double[] doubleArray12 = new double[] { 1 };
        double[] doubleArray14 = new double[] { 1 };
        double[] doubleArray16 = new double[] { 1 };
        double[][] doubleArray17 = new double[][] { doubleArray8, doubleArray10, doubleArray12, doubleArray14, doubleArray16 };
        int[] intArray18 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray17, intArray18);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray5, intArray18);
        double[] doubleArray24 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray28 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray32 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray36 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray37 = new double[][] { doubleArray24, doubleArray28, doubleArray32, doubleArray36 };
        double[] doubleArray39 = new double[] { 1 };
        double[] doubleArray41 = new double[] { 1 };
        double[] doubleArray43 = new double[] { 1 };
        double[] doubleArray45 = new double[] { 1 };
        double[] doubleArray47 = new double[] { 1 };
        double[][] doubleArray48 = new double[][] { doubleArray39, doubleArray41, doubleArray43, doubleArray45, doubleArray47 };
        int[] intArray49 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray48, intArray49);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray37, intArray49);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray5, intArray49);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray4, intArray49);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray2, intArray49);
        double[][] doubleArray55 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray56 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray57 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray56);
        double[][] doubleArray58 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray56);
        java.lang.Class<?> wildcardClass59 = doubleArray58.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[]");
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[]");
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertNotNull(wildcardClass59);
    }

    @Test
    public void test3892() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3892");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[][] doubleArray5 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[][] doubleArray6 = new double[][] {};
        double[][] doubleArray7 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray6);
        double[][] doubleArray8 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray7);
        double[] doubleArray15 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray22 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray29 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray36 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray37 = new double[][] { doubleArray15, doubleArray22, doubleArray29, doubleArray36 };
        double[][] doubleArray38 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray37);
        double[] doubleArray40 = new double[] { 1 };
        double[] doubleArray42 = new double[] { 1 };
        double[] doubleArray44 = new double[] { 1 };
        double[] doubleArray46 = new double[] { 1 };
        double[] doubleArray48 = new double[] { 1 };
        double[][] doubleArray49 = new double[][] { doubleArray40, doubleArray42, doubleArray44, doubleArray46, doubleArray48 };
        int[] intArray50 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray49, intArray50);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray38, intArray50);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray7, intArray50);
        double[] doubleArray57 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray61 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray65 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray69 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray70 = new double[][] { doubleArray57, doubleArray61, doubleArray65, doubleArray69 };
        double[] doubleArray72 = new double[] { 1 };
        double[] doubleArray74 = new double[] { 1 };
        double[] doubleArray76 = new double[] { 1 };
        double[] doubleArray78 = new double[] { 1 };
        double[] doubleArray80 = new double[] { 1 };
        double[][] doubleArray81 = new double[][] { doubleArray72, doubleArray74, doubleArray76, doubleArray78, doubleArray80 };
        int[] intArray82 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray81, intArray82);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray70, intArray82);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray7, intArray82);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray3, intArray82);
        double[][] doubleArray87 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[][] doubleArray88 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray87);
        double[][] doubleArray89 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray88);
        double[][] doubleArray90 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray89);
        double[][] doubleArray91 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray89);
        java.lang.Class<?> wildcardClass92 = doubleArray89.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[]");
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray74), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray78), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray80), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray81);
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[]");
        org.junit.Assert.assertNotNull(doubleArray87);
        org.junit.Assert.assertNotNull(doubleArray88);
        org.junit.Assert.assertNotNull(doubleArray89);
        org.junit.Assert.assertNotNull(doubleArray90);
        org.junit.Assert.assertNotNull(doubleArray91);
        org.junit.Assert.assertNotNull(wildcardClass92);
    }

    @Test
    public void test3893() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3893");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray5 = new double[][] {};
        double[][] doubleArray6 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray5);
        double[][] doubleArray7 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray6);
        double[] doubleArray11 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray15 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray19 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray23 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray24 = new double[][] { doubleArray11, doubleArray15, doubleArray19, doubleArray23 };
        double[] doubleArray26 = new double[] { 1 };
        double[] doubleArray28 = new double[] { 1 };
        double[] doubleArray30 = new double[] { 1 };
        double[] doubleArray32 = new double[] { 1 };
        double[] doubleArray34 = new double[] { 1 };
        double[][] doubleArray35 = new double[][] { doubleArray26, doubleArray28, doubleArray30, doubleArray32, doubleArray34 };
        int[] intArray36 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray35, intArray36);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray24, intArray36);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray7, intArray36);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray0, intArray36);
        double[][] doubleArray41 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray42 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray43 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray44 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray45 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray46 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertNotNull(doubleArray46);
    }

    @Test
    public void test3894() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3894");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray4 = new double[][] {};
        double[][] doubleArray5 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray4);
        double[][] doubleArray6 = new double[][] {};
        double[][] doubleArray7 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray6);
        double[] doubleArray9 = new double[] { 1 };
        double[] doubleArray11 = new double[] { 1 };
        double[] doubleArray13 = new double[] { 1 };
        double[] doubleArray15 = new double[] { 1 };
        double[] doubleArray17 = new double[] { 1 };
        double[][] doubleArray18 = new double[][] { doubleArray9, doubleArray11, doubleArray13, doubleArray15, doubleArray17 };
        int[] intArray19 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray18, intArray19);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray6, intArray19);
        double[] doubleArray25 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray29 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray33 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray37 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray38 = new double[][] { doubleArray25, doubleArray29, doubleArray33, doubleArray37 };
        double[] doubleArray40 = new double[] { 1 };
        double[] doubleArray42 = new double[] { 1 };
        double[] doubleArray44 = new double[] { 1 };
        double[] doubleArray46 = new double[] { 1 };
        double[] doubleArray48 = new double[] { 1 };
        double[][] doubleArray49 = new double[][] { doubleArray40, doubleArray42, doubleArray44, doubleArray46, doubleArray48 };
        int[] intArray50 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray49, intArray50);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray38, intArray50);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray6, intArray50);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray4, intArray50);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray1, intArray50);
        double[][] doubleArray56 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        java.lang.Class<?> wildcardClass57 = doubleArray1.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[]");
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertNotNull(wildcardClass57);
    }

    @Test
    public void test3895() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3895");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray30 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray31 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray32 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray31);
        double[][] doubleArray33 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray32);
        double[] doubleArray40 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray47 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray54 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray61 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray62 = new double[][] { doubleArray40, doubleArray47, doubleArray54, doubleArray61 };
        double[][] doubleArray63 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray62);
        double[][] doubleArray64 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray62);
        double[][] doubleArray65 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray62);
        double[][] doubleArray66 = new double[][] {};
        double[][] doubleArray67 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray66);
        int[] intArray68 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray67, intArray68);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray65, intArray68);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray33, intArray68);
        double[][] doubleArray72 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray33);
        double[][] doubleArray73 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray72);
        double[][] doubleArray74 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray72);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[]");
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertNotNull(doubleArray74);
    }

    @Test
    public void test3896() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3896");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray30 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray29);
        double[][] doubleArray31 = new double[][] {};
        double[][] doubleArray32 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray31);
        double[] doubleArray34 = new double[] { 1 };
        double[] doubleArray36 = new double[] { 1 };
        double[] doubleArray38 = new double[] { 1 };
        double[] doubleArray40 = new double[] { 1 };
        double[] doubleArray42 = new double[] { 1 };
        double[][] doubleArray43 = new double[][] { doubleArray34, doubleArray36, doubleArray38, doubleArray40, doubleArray42 };
        int[] intArray44 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray43, intArray44);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray31, intArray44);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray30, intArray44);
        double[][] doubleArray48 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        double[][] doubleArray49 = new double[][] {};
        double[][] doubleArray50 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray49);
        int[] intArray51 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray50, intArray51);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray48, intArray51);
        double[][] doubleArray54 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray48);
        double[][] doubleArray55 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray54);
        double[][] doubleArray56 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray55);
        double[][] doubleArray57 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray56);
        double[][] doubleArray58 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray56);
        double[][] doubleArray59 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray56);
        double[][] doubleArray60 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray56);
        double[][] doubleArray61 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray60);
        double[][] doubleArray62 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray60);
        int[] intArray63 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray62, intArray63);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[]");
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertNotNull(doubleArray62);
    }

    @Test
    public void test3897() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3897");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[] doubleArray3 = new double[] { 1 };
        double[] doubleArray5 = new double[] { 1 };
        double[] doubleArray7 = new double[] { 1 };
        double[] doubleArray9 = new double[] { 1 };
        double[] doubleArray11 = new double[] { 1 };
        double[][] doubleArray12 = new double[][] { doubleArray3, doubleArray5, doubleArray7, doubleArray9, doubleArray11 };
        int[] intArray13 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray12, intArray13);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray0, intArray13);
        double[] doubleArray19 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray23 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray27 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray31 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray32 = new double[][] { doubleArray19, doubleArray23, doubleArray27, doubleArray31 };
        double[] doubleArray34 = new double[] { 1 };
        double[] doubleArray36 = new double[] { 1 };
        double[] doubleArray38 = new double[] { 1 };
        double[] doubleArray40 = new double[] { 1 };
        double[] doubleArray42 = new double[] { 1 };
        double[][] doubleArray43 = new double[][] { doubleArray34, doubleArray36, doubleArray38, doubleArray40, doubleArray42 };
        int[] intArray44 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray43, intArray44);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray32, intArray44);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray0, intArray44);
        double[][] doubleArray48 = new double[][] {};
        double[][] doubleArray49 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray48);
        double[] doubleArray51 = new double[] { 1 };
        double[] doubleArray53 = new double[] { 1 };
        double[] doubleArray55 = new double[] { 1 };
        double[] doubleArray57 = new double[] { 1 };
        double[] doubleArray59 = new double[] { 1 };
        double[][] doubleArray60 = new double[][] { doubleArray51, doubleArray53, doubleArray55, doubleArray57, doubleArray59 };
        int[] intArray61 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray60, intArray61);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray48, intArray61);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray0, intArray61);
        double[][] doubleArray65 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray66 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray65);
        double[][] doubleArray67 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray66);
        double[][] doubleArray68 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray66);
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[]");
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertNotNull(doubleArray68);
    }

    @Test
    public void test3898() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3898");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray30 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray29);
        double[][] doubleArray31 = new double[][] {};
        double[][] doubleArray32 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray31);
        double[] doubleArray34 = new double[] { 1 };
        double[] doubleArray36 = new double[] { 1 };
        double[] doubleArray38 = new double[] { 1 };
        double[] doubleArray40 = new double[] { 1 };
        double[] doubleArray42 = new double[] { 1 };
        double[][] doubleArray43 = new double[][] { doubleArray34, doubleArray36, doubleArray38, doubleArray40, doubleArray42 };
        int[] intArray44 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray43, intArray44);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray31, intArray44);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray30, intArray44);
        double[][] doubleArray48 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        double[][] doubleArray49 = new double[][] {};
        double[][] doubleArray50 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray49);
        int[] intArray51 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray50, intArray51);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray48, intArray51);
        double[][] doubleArray54 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray48);
        double[][] doubleArray55 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray54);
        double[][] doubleArray56 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray55);
        double[][] doubleArray57 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray56);
        double[][] doubleArray58 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray56);
        double[][] doubleArray59 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray58);
        double[][] doubleArray60 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray58);
        double[][] doubleArray61 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray60);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[]");
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertNotNull(doubleArray61);
    }

    @Test
    public void test3899() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3899");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray3 = new double[][] {};
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[][] doubleArray5 = new double[][] {};
        double[][] doubleArray6 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray5);
        double[] doubleArray8 = new double[] { 1 };
        double[] doubleArray10 = new double[] { 1 };
        double[] doubleArray12 = new double[] { 1 };
        double[] doubleArray14 = new double[] { 1 };
        double[] doubleArray16 = new double[] { 1 };
        double[][] doubleArray17 = new double[][] { doubleArray8, doubleArray10, doubleArray12, doubleArray14, doubleArray16 };
        int[] intArray18 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray17, intArray18);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray5, intArray18);
        double[] doubleArray24 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray28 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray32 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray36 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray37 = new double[][] { doubleArray24, doubleArray28, doubleArray32, doubleArray36 };
        double[] doubleArray39 = new double[] { 1 };
        double[] doubleArray41 = new double[] { 1 };
        double[] doubleArray43 = new double[] { 1 };
        double[] doubleArray45 = new double[] { 1 };
        double[] doubleArray47 = new double[] { 1 };
        double[][] doubleArray48 = new double[][] { doubleArray39, doubleArray41, doubleArray43, doubleArray45, doubleArray47 };
        int[] intArray49 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray48, intArray49);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray37, intArray49);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray5, intArray49);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray4, intArray49);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray2, intArray49);
        double[][] doubleArray55 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray56 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray55);
        double[][] doubleArray57 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray55);
        double[][] doubleArray58 = new double[][] {};
        double[][] doubleArray59 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray58);
        double[][] doubleArray60 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray59);
        double[] doubleArray64 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray68 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray72 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray76 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray77 = new double[][] { doubleArray64, doubleArray68, doubleArray72, doubleArray76 };
        double[] doubleArray79 = new double[] { 1 };
        double[] doubleArray81 = new double[] { 1 };
        double[] doubleArray83 = new double[] { 1 };
        double[] doubleArray85 = new double[] { 1 };
        double[] doubleArray87 = new double[] { 1 };
        double[][] doubleArray88 = new double[][] { doubleArray79, doubleArray81, doubleArray83, doubleArray85, doubleArray87 };
        int[] intArray89 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray88, intArray89);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray77, intArray89);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray59, intArray89);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray57, intArray89);
        double[][] doubleArray94 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray57);
        double[][] doubleArray95 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray94);
        double[][] doubleArray96 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray95);
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[]");
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[]");
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray79), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray81), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray83), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray85), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray87), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray88);
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray89), "[]");
        org.junit.Assert.assertNotNull(doubleArray94);
        org.junit.Assert.assertNotNull(doubleArray95);
        org.junit.Assert.assertNotNull(doubleArray96);
    }

    @Test
    public void test3900() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3900");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[][] doubleArray5 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[][] doubleArray6 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[][] doubleArray7 = new double[][] {};
        double[][] doubleArray8 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray7);
        int[] intArray9 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray8, intArray9);
        double[] doubleArray12 = new double[] { 1 };
        double[] doubleArray14 = new double[] { 1 };
        double[] doubleArray16 = new double[] { 1 };
        double[] doubleArray18 = new double[] { 1 };
        double[] doubleArray20 = new double[] { 1 };
        double[][] doubleArray21 = new double[][] { doubleArray12, doubleArray14, doubleArray16, doubleArray18, doubleArray20 };
        int[] intArray22 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray21, intArray22);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray8, intArray22);
        double[][] doubleArray25 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray8);
        double[][] doubleArray26 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray25);
        double[][] doubleArray27 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray26);
        double[][] doubleArray28 = null;
        double[][] doubleArray29 = new double[][] {};
        double[][] doubleArray30 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray29);
        double[][] doubleArray31 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray29);
        double[][] doubleArray32 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray31);
        double[][] doubleArray33 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray32);
        double[][] doubleArray34 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray32);
        double[][] doubleArray35 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray34);
        double[][] doubleArray36 = new double[][] {};
        double[][] doubleArray37 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray36);
        double[][] doubleArray38 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray37);
        double[][] doubleArray39 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray38);
        double[][] doubleArray40 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray38);
        double[][] doubleArray41 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray38);
        double[][] doubleArray42 = new double[][] {};
        double[][] doubleArray43 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray42);
        double[][] doubleArray44 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray42);
        double[] doubleArray51 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray58 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray65 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray72 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray73 = new double[][] { doubleArray51, doubleArray58, doubleArray65, doubleArray72 };
        double[][] doubleArray74 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray73);
        double[][] doubleArray75 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray73);
        double[][] doubleArray76 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray73);
        double[][] doubleArray77 = new double[][] {};
        double[][] doubleArray78 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray77);
        int[] intArray79 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray78, intArray79);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray76, intArray79);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray44, intArray79);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray38, intArray79);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray35, intArray79);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray28, intArray79);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray27, intArray79);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray3, intArray79);
        java.lang.Class<?> wildcardClass88 = intArray79.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray79), "[]");
        org.junit.Assert.assertNotNull(wildcardClass88);
    }

    @Test
    public void test3901() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3901");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray30 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray29);
        double[][] doubleArray31 = new double[][] {};
        double[][] doubleArray32 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray31);
        double[] doubleArray34 = new double[] { 1 };
        double[] doubleArray36 = new double[] { 1 };
        double[] doubleArray38 = new double[] { 1 };
        double[] doubleArray40 = new double[] { 1 };
        double[] doubleArray42 = new double[] { 1 };
        double[][] doubleArray43 = new double[][] { doubleArray34, doubleArray36, doubleArray38, doubleArray40, doubleArray42 };
        int[] intArray44 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray43, intArray44);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray31, intArray44);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray30, intArray44);
        double[][] doubleArray48 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        double[] doubleArray50 = new double[] { 1 };
        double[] doubleArray52 = new double[] { 1 };
        double[] doubleArray54 = new double[] { 1 };
        double[] doubleArray56 = new double[] { 1 };
        double[] doubleArray58 = new double[] { 1 };
        double[][] doubleArray59 = new double[][] { doubleArray50, doubleArray52, doubleArray54, doubleArray56, doubleArray58 };
        int[] intArray60 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray59, intArray60);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray48, intArray60);
        double[][] doubleArray63 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray48);
        double[][] doubleArray64 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray63);
        double[][] doubleArray65 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray63);
        double[][] doubleArray66 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray63);
        double[][] doubleArray67 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray66);
        java.lang.Class<?> wildcardClass68 = doubleArray67.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[]");
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertNotNull(wildcardClass68);
    }

    @Test
    public void test3902() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3902");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[] doubleArray10 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray17 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray24 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray31 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray32 = new double[][] { doubleArray10, doubleArray17, doubleArray24, doubleArray31 };
        double[][] doubleArray33 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray32);
        double[][] doubleArray34 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray32);
        double[][] doubleArray35 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray32);
        double[][] doubleArray36 = new double[][] {};
        double[][] doubleArray37 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray36);
        int[] intArray38 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray37, intArray38);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray35, intArray38);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray3, intArray38);
        double[][] doubleArray42 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[][] doubleArray43 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[][] doubleArray44 = null;
        double[][] doubleArray45 = new double[][] {};
        double[][] doubleArray46 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray45);
        int[] intArray47 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray46, intArray47);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray44, intArray47);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray3, intArray47);
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[]");
    }

    @Test
    public void test3903() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3903");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray5 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray4);
        double[][] doubleArray6 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray4);
        double[][] doubleArray7 = new double[][] {};
        double[][] doubleArray8 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray7);
        int[] intArray9 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray8, intArray9);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray6, intArray9);
        double[][] doubleArray12 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray6);
        double[][] doubleArray13 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray6);
        double[][] doubleArray14 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray13);
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertNotNull(doubleArray14);
    }

    @Test
    public void test3904() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3904");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[] doubleArray11 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray18 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray25 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray32 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray33 = new double[][] { doubleArray11, doubleArray18, doubleArray25, doubleArray32 };
        double[][] doubleArray34 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray33);
        double[][] doubleArray35 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray34);
        double[][] doubleArray36 = new double[][] {};
        double[][] doubleArray37 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray36);
        double[] doubleArray39 = new double[] { 1 };
        double[] doubleArray41 = new double[] { 1 };
        double[] doubleArray43 = new double[] { 1 };
        double[] doubleArray45 = new double[] { 1 };
        double[] doubleArray47 = new double[] { 1 };
        double[][] doubleArray48 = new double[][] { doubleArray39, doubleArray41, doubleArray43, doubleArray45, doubleArray47 };
        int[] intArray49 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray48, intArray49);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray36, intArray49);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray35, intArray49);
        double[][] doubleArray53 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray35);
        double[] doubleArray55 = new double[] { 1 };
        double[] doubleArray57 = new double[] { 1 };
        double[] doubleArray59 = new double[] { 1 };
        double[] doubleArray61 = new double[] { 1 };
        double[] doubleArray63 = new double[] { 1 };
        double[][] doubleArray64 = new double[][] { doubleArray55, doubleArray57, doubleArray59, doubleArray61, doubleArray63 };
        int[] intArray65 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray64, intArray65);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray53, intArray65);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray3, intArray65);
        double[][] doubleArray69 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[][] doubleArray70 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[][] doubleArray71 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[]");
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[]");
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertNotNull(doubleArray71);
    }

    @Test
    public void test3905() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3905");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray30 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray31 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray32 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray31);
        double[][] doubleArray33 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray32);
        double[][] doubleArray34 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray32);
        double[][] doubleArray35 = new double[][] {};
        double[][] doubleArray36 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray35);
        double[][] doubleArray37 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray35);
        double[][] doubleArray38 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray35);
        double[][] doubleArray39 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray35);
        double[][] doubleArray40 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray35);
        double[][] doubleArray41 = new double[][] {};
        double[][] doubleArray42 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray41);
        double[][] doubleArray43 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray41);
        double[][] doubleArray44 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray43);
        double[][] doubleArray45 = null;
        double[][] doubleArray46 = new double[][] {};
        double[][] doubleArray47 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray46);
        double[][] doubleArray48 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray47);
        double[] doubleArray52 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray56 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray60 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray64 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray65 = new double[][] { doubleArray52, doubleArray56, doubleArray60, doubleArray64 };
        double[] doubleArray67 = new double[] { 1 };
        double[] doubleArray69 = new double[] { 1 };
        double[] doubleArray71 = new double[] { 1 };
        double[] doubleArray73 = new double[] { 1 };
        double[] doubleArray75 = new double[] { 1 };
        double[][] doubleArray76 = new double[][] { doubleArray67, doubleArray69, doubleArray71, doubleArray73, doubleArray75 };
        int[] intArray77 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray76, intArray77);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray65, intArray77);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray48, intArray77);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray45, intArray77);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray44, intArray77);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray40, intArray77);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray34, intArray77);
        double[][] doubleArray85 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray34);
        double[][] doubleArray86 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray34);
        double[][] doubleArray87 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray34);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray71), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray73), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray75), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray77), "[]");
        org.junit.Assert.assertNotNull(doubleArray85);
        org.junit.Assert.assertNotNull(doubleArray86);
        org.junit.Assert.assertNotNull(doubleArray87);
    }

    @Test
    public void test3906() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3906");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[] doubleArray8 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray12 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray16 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray20 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray21 = new double[][] { doubleArray8, doubleArray12, doubleArray16, doubleArray20 };
        double[] doubleArray23 = new double[] { 1 };
        double[] doubleArray25 = new double[] { 1 };
        double[] doubleArray27 = new double[] { 1 };
        double[] doubleArray29 = new double[] { 1 };
        double[] doubleArray31 = new double[] { 1 };
        double[][] doubleArray32 = new double[][] { doubleArray23, doubleArray25, doubleArray27, doubleArray29, doubleArray31 };
        int[] intArray33 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray32, intArray33);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray21, intArray33);
        double[][] doubleArray36 = new double[][] {};
        double[][] doubleArray37 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray36);
        double[][] doubleArray38 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray37);
        double[][] doubleArray39 = new double[][] {};
        double[][] doubleArray40 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray39);
        double[][] doubleArray41 = new double[][] {};
        double[][] doubleArray42 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray41);
        double[] doubleArray44 = new double[] { 1 };
        double[] doubleArray46 = new double[] { 1 };
        double[] doubleArray48 = new double[] { 1 };
        double[] doubleArray50 = new double[] { 1 };
        double[] doubleArray52 = new double[] { 1 };
        double[][] doubleArray53 = new double[][] { doubleArray44, doubleArray46, doubleArray48, doubleArray50, doubleArray52 };
        int[] intArray54 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray53, intArray54);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray41, intArray54);
        double[] doubleArray60 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray64 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray68 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray72 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray73 = new double[][] { doubleArray60, doubleArray64, doubleArray68, doubleArray72 };
        double[] doubleArray75 = new double[] { 1 };
        double[] doubleArray77 = new double[] { 1 };
        double[] doubleArray79 = new double[] { 1 };
        double[] doubleArray81 = new double[] { 1 };
        double[] doubleArray83 = new double[] { 1 };
        double[][] doubleArray84 = new double[][] { doubleArray75, doubleArray77, doubleArray79, doubleArray81, doubleArray83 };
        int[] intArray85 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray84, intArray85);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray73, intArray85);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray41, intArray85);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray40, intArray85);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray38, intArray85);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray21, intArray85);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray3, intArray85);
        double[][] doubleArray93 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[][] doubleArray94 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray93);
        double[][] doubleArray95 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray94);
        double[][] doubleArray96 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray95);
        java.lang.Class<?> wildcardClass97 = doubleArray96.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[]");
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray75), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray77), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray79), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray81), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray83), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray84);
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray85), "[]");
        org.junit.Assert.assertNotNull(doubleArray93);
        org.junit.Assert.assertNotNull(doubleArray94);
        org.junit.Assert.assertNotNull(doubleArray95);
        org.junit.Assert.assertNotNull(doubleArray96);
        org.junit.Assert.assertNotNull(wildcardClass97);
    }

    @Test
    public void test3907() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3907");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray5 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray6 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray7 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray6);
        double[][] doubleArray8 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray7);
        double[][] doubleArray9 = new double[][] {};
        double[][] doubleArray10 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray9);
        double[] doubleArray12 = new double[] { 1 };
        double[] doubleArray14 = new double[] { 1 };
        double[] doubleArray16 = new double[] { 1 };
        double[] doubleArray18 = new double[] { 1 };
        double[] doubleArray20 = new double[] { 1 };
        double[][] doubleArray21 = new double[][] { doubleArray12, doubleArray14, doubleArray16, doubleArray18, doubleArray20 };
        int[] intArray22 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray21, intArray22);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray9, intArray22);
        double[] doubleArray28 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray32 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray36 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray40 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray41 = new double[][] { doubleArray28, doubleArray32, doubleArray36, doubleArray40 };
        double[] doubleArray43 = new double[] { 1 };
        double[] doubleArray45 = new double[] { 1 };
        double[] doubleArray47 = new double[] { 1 };
        double[] doubleArray49 = new double[] { 1 };
        double[] doubleArray51 = new double[] { 1 };
        double[][] doubleArray52 = new double[][] { doubleArray43, doubleArray45, doubleArray47, doubleArray49, doubleArray51 };
        int[] intArray53 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray52, intArray53);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray41, intArray53);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray9, intArray53);
        double[][] doubleArray57 = new double[][] {};
        double[][] doubleArray58 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray57);
        double[] doubleArray60 = new double[] { 1 };
        double[] doubleArray62 = new double[] { 1 };
        double[] doubleArray64 = new double[] { 1 };
        double[] doubleArray66 = new double[] { 1 };
        double[] doubleArray68 = new double[] { 1 };
        double[][] doubleArray69 = new double[][] { doubleArray60, doubleArray62, doubleArray64, doubleArray66, doubleArray68 };
        int[] intArray70 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray69, intArray70);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray57, intArray70);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray9, intArray70);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray8, intArray70);
        double[][] doubleArray75 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray8);
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[]");
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray66), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[]");
        org.junit.Assert.assertNotNull(doubleArray75);
    }

    @Test
    public void test3908() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3908");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[][] doubleArray5 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[][] doubleArray6 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[][] doubleArray7 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[][] doubleArray8 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray7);
        double[][] doubleArray9 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray7);
        double[] doubleArray16 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray23 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray30 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray37 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray38 = new double[][] { doubleArray16, doubleArray23, doubleArray30, doubleArray37 };
        double[][] doubleArray39 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray38);
        double[] doubleArray41 = new double[] { 1 };
        double[] doubleArray43 = new double[] { 1 };
        double[] doubleArray45 = new double[] { 1 };
        double[] doubleArray47 = new double[] { 1 };
        double[] doubleArray49 = new double[] { 1 };
        double[][] doubleArray50 = new double[][] { doubleArray41, doubleArray43, doubleArray45, doubleArray47, doubleArray49 };
        int[] intArray51 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray50, intArray51);
        double[][] doubleArray53 = new double[][] {};
        double[][] doubleArray54 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray53);
        int[] intArray55 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray54, intArray55);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray50, intArray55);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray38, intArray55);
        double[][] doubleArray59 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray38);
        double[][] doubleArray60 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray59);
        double[][] doubleArray61 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray60);
        double[][] doubleArray62 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray61);
        double[][] doubleArray63 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray62);
        double[][] doubleArray64 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray62);
        double[][] doubleArray65 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray62);
        double[][] doubleArray66 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray62);
        double[][] doubleArray67 = null;
        double[][] doubleArray68 = new double[][] {};
        double[][] doubleArray69 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray68);
        double[][] doubleArray70 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray68);
        double[][] doubleArray71 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray70);
        double[][] doubleArray72 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray70);
        double[][] doubleArray73 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray72);
        double[][] doubleArray74 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray73);
        double[][] doubleArray75 = new double[][] {};
        double[][] doubleArray76 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray75);
        int[] intArray77 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray76, intArray77);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray74, intArray77);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray67, intArray77);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray66, intArray77);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray9, intArray77);
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[]");
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[]");
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray77), "[]");
    }

    @Test
    public void test3909() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3909");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[] doubleArray31 = new double[] { 1 };
        double[] doubleArray33 = new double[] { 1 };
        double[] doubleArray35 = new double[] { 1 };
        double[] doubleArray37 = new double[] { 1 };
        double[] doubleArray39 = new double[] { 1 };
        double[][] doubleArray40 = new double[][] { doubleArray31, doubleArray33, doubleArray35, doubleArray37, doubleArray39 };
        int[] intArray41 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray40, intArray41);
        double[][] doubleArray43 = new double[][] {};
        double[][] doubleArray44 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray43);
        int[] intArray45 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray44, intArray45);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray40, intArray45);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray28, intArray45);
        double[][] doubleArray49 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray50 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray49);
        double[][] doubleArray51 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray50);
        double[][] doubleArray52 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray51);
        double[][] doubleArray53 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray52);
        double[][] doubleArray54 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray52);
        double[][] doubleArray55 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray52);
        double[][] doubleArray56 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray52);
        double[][] doubleArray57 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray52);
        double[][] doubleArray58 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray52);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertNotNull(doubleArray58);
    }

    @Test
    public void test3910() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3910");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray30 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray29);
        double[][] doubleArray31 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        double[][] doubleArray32 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        double[][] doubleArray33 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        double[][] doubleArray34 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        double[][] doubleArray35 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        double[][] doubleArray36 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray35);
        java.lang.Class<?> wildcardClass37 = doubleArray35.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertNotNull(wildcardClass37);
    }

    @Test
    public void test3911() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3911");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray30 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray29);
        double[][] doubleArray31 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        double[][] doubleArray32 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray31);
        double[][] doubleArray33 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray31);
        double[][] doubleArray34 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray31);
        double[][] doubleArray35 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray31);
        double[][] doubleArray36 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray35);
        double[][] doubleArray37 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray35);
        double[][] doubleArray38 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray35);
        double[][] doubleArray39 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray38);
        double[][] doubleArray40 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray39);
        java.lang.Class<?> wildcardClass41 = doubleArray40.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertNotNull(wildcardClass41);
    }

    @Test
    public void test3912() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3912");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[] doubleArray3 = new double[] { 1 };
        double[] doubleArray5 = new double[] { 1 };
        double[] doubleArray7 = new double[] { 1 };
        double[] doubleArray9 = new double[] { 1 };
        double[] doubleArray11 = new double[] { 1 };
        double[][] doubleArray12 = new double[][] { doubleArray3, doubleArray5, doubleArray7, doubleArray9, doubleArray11 };
        int[] intArray13 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray12, intArray13);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray0, intArray13);
        double[] doubleArray19 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray23 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray27 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray31 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray32 = new double[][] { doubleArray19, doubleArray23, doubleArray27, doubleArray31 };
        double[] doubleArray34 = new double[] { 1 };
        double[] doubleArray36 = new double[] { 1 };
        double[] doubleArray38 = new double[] { 1 };
        double[] doubleArray40 = new double[] { 1 };
        double[] doubleArray42 = new double[] { 1 };
        double[][] doubleArray43 = new double[][] { doubleArray34, doubleArray36, doubleArray38, doubleArray40, doubleArray42 };
        int[] intArray44 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray43, intArray44);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray32, intArray44);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray0, intArray44);
        double[] doubleArray49 = new double[] { 1 };
        double[] doubleArray51 = new double[] { 1 };
        double[] doubleArray53 = new double[] { 1 };
        double[] doubleArray55 = new double[] { 1 };
        double[] doubleArray57 = new double[] { 1 };
        double[][] doubleArray58 = new double[][] { doubleArray49, doubleArray51, doubleArray53, doubleArray55, doubleArray57 };
        int[] intArray59 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray58, intArray59);
        double[][] doubleArray61 = new double[][] {};
        double[][] doubleArray62 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray61);
        int[] intArray63 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray62, intArray63);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray58, intArray63);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray0, intArray63);
        double[][] doubleArray67 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray68 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray67);
        double[][] doubleArray69 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray67);
        double[][] doubleArray70 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray67);
        double[][] doubleArray71 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray70);
        double[][] doubleArray72 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray71);
        double[][] doubleArray73 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray72);
        double[][] doubleArray74 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray72);
        double[][] doubleArray75 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray72);
        java.lang.Class<?> wildcardClass76 = doubleArray72.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[]");
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertNotNull(wildcardClass76);
    }

    @Test
    public void test3913() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3913");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray5 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray4);
        double[][] doubleArray6 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray4);
        double[][] doubleArray7 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray4);
        double[] doubleArray14 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray21 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray28 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray35 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray36 = new double[][] { doubleArray14, doubleArray21, doubleArray28, doubleArray35 };
        double[][] doubleArray37 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray36);
        double[][] doubleArray38 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray37);
        double[][] doubleArray39 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray38);
        double[][] doubleArray40 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray38);
        double[][] doubleArray41 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray38);
        double[][] doubleArray42 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray38);
        double[][] doubleArray43 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray42);
        double[][] doubleArray44 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray42);
        double[][] doubleArray45 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray44);
        double[][] doubleArray46 = new double[][] {};
        double[][] doubleArray47 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray46);
        double[][] doubleArray48 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray47);
        double[][] doubleArray49 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray48);
        double[][] doubleArray50 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray48);
        double[][] doubleArray51 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray48);
        double[][] doubleArray52 = new double[][] {};
        double[][] doubleArray53 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray52);
        double[][] doubleArray54 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray52);
        double[] doubleArray61 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray68 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray75 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray82 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray83 = new double[][] { doubleArray61, doubleArray68, doubleArray75, doubleArray82 };
        double[][] doubleArray84 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray83);
        double[][] doubleArray85 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray83);
        double[][] doubleArray86 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray83);
        double[][] doubleArray87 = new double[][] {};
        double[][] doubleArray88 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray87);
        int[] intArray89 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray88, intArray89);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray86, intArray89);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray54, intArray89);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray48, intArray89);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray45, intArray89);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray4, intArray89);
        java.lang.Class<?> wildcardClass96 = intArray89.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray75), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray82), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray83);
        org.junit.Assert.assertNotNull(doubleArray84);
        org.junit.Assert.assertNotNull(doubleArray85);
        org.junit.Assert.assertNotNull(doubleArray86);
        org.junit.Assert.assertNotNull(doubleArray87);
        org.junit.Assert.assertNotNull(doubleArray88);
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray89), "[]");
        org.junit.Assert.assertNotNull(wildcardClass96);
    }

    @Test
    public void test3914() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3914");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[] doubleArray3 = new double[] { 1 };
        double[] doubleArray5 = new double[] { 1 };
        double[] doubleArray7 = new double[] { 1 };
        double[] doubleArray9 = new double[] { 1 };
        double[] doubleArray11 = new double[] { 1 };
        double[][] doubleArray12 = new double[][] { doubleArray3, doubleArray5, doubleArray7, doubleArray9, doubleArray11 };
        int[] intArray13 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray12, intArray13);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray0, intArray13);
        double[] doubleArray19 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray23 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray27 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray31 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray32 = new double[][] { doubleArray19, doubleArray23, doubleArray27, doubleArray31 };
        double[] doubleArray34 = new double[] { 1 };
        double[] doubleArray36 = new double[] { 1 };
        double[] doubleArray38 = new double[] { 1 };
        double[] doubleArray40 = new double[] { 1 };
        double[] doubleArray42 = new double[] { 1 };
        double[][] doubleArray43 = new double[][] { doubleArray34, doubleArray36, doubleArray38, doubleArray40, doubleArray42 };
        int[] intArray44 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray43, intArray44);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray32, intArray44);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray0, intArray44);
        double[] doubleArray49 = new double[] { 1 };
        double[] doubleArray51 = new double[] { 1 };
        double[] doubleArray53 = new double[] { 1 };
        double[] doubleArray55 = new double[] { 1 };
        double[] doubleArray57 = new double[] { 1 };
        double[][] doubleArray58 = new double[][] { doubleArray49, doubleArray51, doubleArray53, doubleArray55, doubleArray57 };
        int[] intArray59 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray58, intArray59);
        double[][] doubleArray61 = new double[][] {};
        double[][] doubleArray62 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray61);
        int[] intArray63 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray62, intArray63);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray58, intArray63);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray0, intArray63);
        double[][] doubleArray67 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray68 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray69 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray70 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray71 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray70);
        double[][] doubleArray72 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray71);
        double[][] doubleArray73 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray72);
        double[][] doubleArray74 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray73);
        double[][] doubleArray75 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray73);
        java.lang.Class<?> wildcardClass76 = doubleArray73.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[]");
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertNotNull(wildcardClass76);
    }

    @Test
    public void test3915() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3915");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray30 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray29);
        double[][] doubleArray31 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        double[][] doubleArray32 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        double[][] doubleArray33 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        double[][] doubleArray34 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        double[][] doubleArray35 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray34);
        double[][] doubleArray36 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray35);
        double[][] doubleArray37 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray35);
        double[][] doubleArray38 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray35);
        double[][] doubleArray39 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray38);
        double[][] doubleArray40 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray39);
        double[][] doubleArray41 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray39);
        double[][] doubleArray42 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray39);
        double[][] doubleArray43 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray42);
        double[][] doubleArray44 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray42);
        double[] doubleArray51 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray58 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray65 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray72 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray73 = new double[][] { doubleArray51, doubleArray58, doubleArray65, doubleArray72 };
        double[][] doubleArray74 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray73);
        double[][] doubleArray75 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray74);
        double[][] doubleArray76 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray74);
        double[][] doubleArray77 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray76);
        double[][] doubleArray78 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray76);
        double[][] doubleArray79 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray76);
        double[][] doubleArray80 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray76);
        double[][] doubleArray81 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray76);
        double[][] doubleArray82 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray76);
        double[][] doubleArray83 = null;
        double[][] doubleArray84 = null;
        double[][] doubleArray85 = new double[][] {};
        double[][] doubleArray86 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray85);
        int[] intArray87 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray86, intArray87);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray84, intArray87);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray83, intArray87);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray82, intArray87);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray42, intArray87);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertNotNull(doubleArray81);
        org.junit.Assert.assertNotNull(doubleArray82);
        org.junit.Assert.assertNotNull(doubleArray85);
        org.junit.Assert.assertNotNull(doubleArray86);
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray87), "[]");
    }

    @Test
    public void test3916() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3916");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[][] doubleArray5 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[][] doubleArray6 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[][] doubleArray7 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray6);
        double[][] doubleArray8 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray6);
        double[][] doubleArray9 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray6);
        double[] doubleArray16 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray23 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray30 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray37 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray38 = new double[][] { doubleArray16, doubleArray23, doubleArray30, doubleArray37 };
        double[][] doubleArray39 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray38);
        double[][] doubleArray40 = new double[][] {};
        double[][] doubleArray41 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray40);
        double[][] doubleArray42 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray41);
        double[][] doubleArray43 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray42);
        double[][] doubleArray44 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray42);
        double[][] doubleArray45 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray42);
        double[][] doubleArray46 = new double[][] {};
        double[][] doubleArray47 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray46);
        double[][] doubleArray48 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray46);
        double[] doubleArray55 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray62 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray69 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray76 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray77 = new double[][] { doubleArray55, doubleArray62, doubleArray69, doubleArray76 };
        double[][] doubleArray78 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray77);
        double[][] doubleArray79 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray77);
        double[][] doubleArray80 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray77);
        double[][] doubleArray81 = new double[][] {};
        double[][] doubleArray82 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray81);
        int[] intArray83 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray82, intArray83);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray80, intArray83);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray48, intArray83);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray42, intArray83);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray39, intArray83);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray9, intArray83);
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertNotNull(doubleArray81);
        org.junit.Assert.assertNotNull(doubleArray82);
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray83), "[]");
    }

    @Test
    public void test3917() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3917");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[] doubleArray31 = new double[] { 1 };
        double[] doubleArray33 = new double[] { 1 };
        double[] doubleArray35 = new double[] { 1 };
        double[] doubleArray37 = new double[] { 1 };
        double[] doubleArray39 = new double[] { 1 };
        double[][] doubleArray40 = new double[][] { doubleArray31, doubleArray33, doubleArray35, doubleArray37, doubleArray39 };
        int[] intArray41 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray40, intArray41);
        double[][] doubleArray43 = new double[][] {};
        double[][] doubleArray44 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray43);
        int[] intArray45 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray44, intArray45);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray40, intArray45);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray28, intArray45);
        double[][] doubleArray49 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray50 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray51 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray52 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray51);
        double[][] doubleArray53 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray52);
        double[][] doubleArray54 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray53);
        double[][] doubleArray55 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray54);
        double[][] doubleArray56 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray55);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertNotNull(doubleArray56);
    }

    @Test
    public void test3918() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3918");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[][] doubleArray5 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[][] doubleArray6 = new double[][] {};
        double[][] doubleArray7 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray6);
        int[] intArray8 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray7, intArray8);
        double[] doubleArray11 = new double[] { 1 };
        double[] doubleArray13 = new double[] { 1 };
        double[] doubleArray15 = new double[] { 1 };
        double[] doubleArray17 = new double[] { 1 };
        double[] doubleArray19 = new double[] { 1 };
        double[][] doubleArray20 = new double[][] { doubleArray11, doubleArray13, doubleArray15, doubleArray17, doubleArray19 };
        int[] intArray21 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray20, intArray21);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray7, intArray21);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray5, intArray21);
        double[][] doubleArray25 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray5);
        double[][] doubleArray26 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray25);
        double[][] doubleArray27 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray25);
        double[][] doubleArray28 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray27);
        java.lang.Class<?> wildcardClass29 = doubleArray28.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(wildcardClass29);
    }

    @Test
    public void test3919() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3919");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[] doubleArray11 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray18 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray25 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray32 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray33 = new double[][] { doubleArray11, doubleArray18, doubleArray25, doubleArray32 };
        double[][] doubleArray34 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray33);
        double[][] doubleArray35 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray34);
        double[][] doubleArray36 = new double[][] {};
        double[][] doubleArray37 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray36);
        double[] doubleArray39 = new double[] { 1 };
        double[] doubleArray41 = new double[] { 1 };
        double[] doubleArray43 = new double[] { 1 };
        double[] doubleArray45 = new double[] { 1 };
        double[] doubleArray47 = new double[] { 1 };
        double[][] doubleArray48 = new double[][] { doubleArray39, doubleArray41, doubleArray43, doubleArray45, doubleArray47 };
        int[] intArray49 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray48, intArray49);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray36, intArray49);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray35, intArray49);
        double[][] doubleArray53 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray35);
        double[] doubleArray55 = new double[] { 1 };
        double[] doubleArray57 = new double[] { 1 };
        double[] doubleArray59 = new double[] { 1 };
        double[] doubleArray61 = new double[] { 1 };
        double[] doubleArray63 = new double[] { 1 };
        double[][] doubleArray64 = new double[][] { doubleArray55, doubleArray57, doubleArray59, doubleArray61, doubleArray63 };
        int[] intArray65 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray64, intArray65);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray53, intArray65);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray3, intArray65);
        double[][] doubleArray69 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[][] doubleArray70 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray69);
        double[][] doubleArray71 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray69);
        double[][] doubleArray72 = null;
        double[][] doubleArray73 = new double[][] {};
        double[][] doubleArray74 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray73);
        int[] intArray75 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray74, intArray75);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray72, intArray75);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray69, intArray75);
        double[][] doubleArray79 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray69);
        double[][] doubleArray80 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray69);
        double[][] doubleArray81 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray80);
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[]");
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[]");
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[]");
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertNotNull(doubleArray81);
    }

    @Test
    public void test3920() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3920");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray5 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray6 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray7 = new double[][] {};
        double[][] doubleArray8 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray7);
        double[][] doubleArray9 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray8);
        double[][] doubleArray10 = new double[][] {};
        double[][] doubleArray11 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray10);
        double[][] doubleArray12 = new double[][] {};
        double[][] doubleArray13 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray12);
        double[] doubleArray15 = new double[] { 1 };
        double[] doubleArray17 = new double[] { 1 };
        double[] doubleArray19 = new double[] { 1 };
        double[] doubleArray21 = new double[] { 1 };
        double[] doubleArray23 = new double[] { 1 };
        double[][] doubleArray24 = new double[][] { doubleArray15, doubleArray17, doubleArray19, doubleArray21, doubleArray23 };
        int[] intArray25 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray24, intArray25);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray12, intArray25);
        double[] doubleArray31 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray35 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray39 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray43 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray44 = new double[][] { doubleArray31, doubleArray35, doubleArray39, doubleArray43 };
        double[] doubleArray46 = new double[] { 1 };
        double[] doubleArray48 = new double[] { 1 };
        double[] doubleArray50 = new double[] { 1 };
        double[] doubleArray52 = new double[] { 1 };
        double[] doubleArray54 = new double[] { 1 };
        double[][] doubleArray55 = new double[][] { doubleArray46, doubleArray48, doubleArray50, doubleArray52, doubleArray54 };
        int[] intArray56 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray55, intArray56);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray44, intArray56);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray12, intArray56);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray11, intArray56);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray9, intArray56);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray6, intArray56);
        double[][] doubleArray63 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray6);
        double[][] doubleArray64 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray6);
        double[][] doubleArray65 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray64);
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[]");
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertNotNull(doubleArray65);
    }

    @Test
    public void test3921() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3921");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray30 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray29);
        double[][] doubleArray31 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        double[][] doubleArray32 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        double[][] doubleArray33 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        double[][] doubleArray34 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray33);
        double[][] doubleArray35 = new double[][] {};
        double[][] doubleArray36 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray35);
        double[][] doubleArray37 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray35);
        double[][] doubleArray38 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray37);
        double[][] doubleArray39 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray38);
        double[][] doubleArray40 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray38);
        double[][] doubleArray41 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray40);
        double[][] doubleArray42 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray40);
        double[][] doubleArray43 = null;
        double[][] doubleArray44 = new double[][] {};
        double[][] doubleArray45 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray44);
        double[][] doubleArray46 = new double[][] {};
        double[][] doubleArray47 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray46);
        double[][] doubleArray48 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray47);
        double[] doubleArray52 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray56 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray60 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray64 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray65 = new double[][] { doubleArray52, doubleArray56, doubleArray60, doubleArray64 };
        double[] doubleArray67 = new double[] { 1 };
        double[] doubleArray69 = new double[] { 1 };
        double[] doubleArray71 = new double[] { 1 };
        double[] doubleArray73 = new double[] { 1 };
        double[] doubleArray75 = new double[] { 1 };
        double[][] doubleArray76 = new double[][] { doubleArray67, doubleArray69, doubleArray71, doubleArray73, doubleArray75 };
        int[] intArray77 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray76, intArray77);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray65, intArray77);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray47, intArray77);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray45, intArray77);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray43, intArray77);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray42, intArray77);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray33, intArray77);
        double[][] doubleArray85 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray33);
        double[][] doubleArray86 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray33);
        double[][] doubleArray87 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray33);
        double[][] doubleArray88 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray87);
        double[][] doubleArray89 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray87);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray71), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray73), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray75), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray77), "[]");
        org.junit.Assert.assertNotNull(doubleArray85);
        org.junit.Assert.assertNotNull(doubleArray86);
        org.junit.Assert.assertNotNull(doubleArray87);
        org.junit.Assert.assertNotNull(doubleArray88);
        org.junit.Assert.assertNotNull(doubleArray89);
    }

    @Test
    public void test3922() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3922");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = new double[][] {};
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[] doubleArray5 = new double[] { 1 };
        double[] doubleArray7 = new double[] { 1 };
        double[] doubleArray9 = new double[] { 1 };
        double[] doubleArray11 = new double[] { 1 };
        double[] doubleArray13 = new double[] { 1 };
        double[][] doubleArray14 = new double[][] { doubleArray5, doubleArray7, doubleArray9, doubleArray11, doubleArray13 };
        int[] intArray15 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray14, intArray15);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray2, intArray15);
        double[] doubleArray21 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray25 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray29 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray33 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray34 = new double[][] { doubleArray21, doubleArray25, doubleArray29, doubleArray33 };
        double[] doubleArray36 = new double[] { 1 };
        double[] doubleArray38 = new double[] { 1 };
        double[] doubleArray40 = new double[] { 1 };
        double[] doubleArray42 = new double[] { 1 };
        double[] doubleArray44 = new double[] { 1 };
        double[][] doubleArray45 = new double[][] { doubleArray36, doubleArray38, doubleArray40, doubleArray42, doubleArray44 };
        int[] intArray46 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray45, intArray46);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray34, intArray46);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray2, intArray46);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray1, intArray46);
        double[][] doubleArray51 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray52 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray51);
        double[][] doubleArray53 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray52);
        double[][] doubleArray54 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray52);
        double[][] doubleArray55 = new double[][] {};
        double[][] doubleArray56 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray55);
        double[][] doubleArray57 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray55);
        double[][] doubleArray58 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray55);
        double[] doubleArray65 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray72 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray79 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray86 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray87 = new double[][] { doubleArray65, doubleArray72, doubleArray79, doubleArray86 };
        double[][] doubleArray88 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray87);
        double[][] doubleArray89 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray87);
        double[][] doubleArray90 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray87);
        double[][] doubleArray91 = new double[][] {};
        double[][] doubleArray92 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray91);
        int[] intArray93 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray92, intArray93);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray90, intArray93);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray58, intArray93);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray54, intArray93);
        java.lang.Class<?> wildcardClass98 = doubleArray54.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray79), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray86), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray87);
        org.junit.Assert.assertNotNull(doubleArray88);
        org.junit.Assert.assertNotNull(doubleArray89);
        org.junit.Assert.assertNotNull(doubleArray90);
        org.junit.Assert.assertNotNull(doubleArray91);
        org.junit.Assert.assertNotNull(doubleArray92);
        org.junit.Assert.assertNotNull(intArray93);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray93), "[]");
        org.junit.Assert.assertNotNull(wildcardClass98);
    }

    @Test
    public void test3923() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3923");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[][] doubleArray5 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[][] doubleArray6 = new double[][] {};
        double[][] doubleArray7 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray6);
        double[][] doubleArray8 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray7);
        double[] doubleArray15 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray22 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray29 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray36 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray37 = new double[][] { doubleArray15, doubleArray22, doubleArray29, doubleArray36 };
        double[][] doubleArray38 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray37);
        double[] doubleArray40 = new double[] { 1 };
        double[] doubleArray42 = new double[] { 1 };
        double[] doubleArray44 = new double[] { 1 };
        double[] doubleArray46 = new double[] { 1 };
        double[] doubleArray48 = new double[] { 1 };
        double[][] doubleArray49 = new double[][] { doubleArray40, doubleArray42, doubleArray44, doubleArray46, doubleArray48 };
        int[] intArray50 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray49, intArray50);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray38, intArray50);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray7, intArray50);
        double[] doubleArray57 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray61 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray65 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray69 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray70 = new double[][] { doubleArray57, doubleArray61, doubleArray65, doubleArray69 };
        double[] doubleArray72 = new double[] { 1 };
        double[] doubleArray74 = new double[] { 1 };
        double[] doubleArray76 = new double[] { 1 };
        double[] doubleArray78 = new double[] { 1 };
        double[] doubleArray80 = new double[] { 1 };
        double[][] doubleArray81 = new double[][] { doubleArray72, doubleArray74, doubleArray76, doubleArray78, doubleArray80 };
        int[] intArray82 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray81, intArray82);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray70, intArray82);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray7, intArray82);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray3, intArray82);
        double[][] doubleArray87 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[][] doubleArray88 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray87);
        double[][] doubleArray89 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray88);
        double[][] doubleArray90 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray88);
        double[][] doubleArray91 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray90);
        java.lang.Class<?> wildcardClass92 = doubleArray90.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[]");
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray74), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray78), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray80), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray81);
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[]");
        org.junit.Assert.assertNotNull(doubleArray87);
        org.junit.Assert.assertNotNull(doubleArray88);
        org.junit.Assert.assertNotNull(doubleArray89);
        org.junit.Assert.assertNotNull(doubleArray90);
        org.junit.Assert.assertNotNull(doubleArray91);
        org.junit.Assert.assertNotNull(wildcardClass92);
    }

    @Test
    public void test3924() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3924");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[] doubleArray31 = new double[] { 1 };
        double[] doubleArray33 = new double[] { 1 };
        double[] doubleArray35 = new double[] { 1 };
        double[] doubleArray37 = new double[] { 1 };
        double[] doubleArray39 = new double[] { 1 };
        double[][] doubleArray40 = new double[][] { doubleArray31, doubleArray33, doubleArray35, doubleArray37, doubleArray39 };
        int[] intArray41 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray40, intArray41);
        double[][] doubleArray43 = new double[][] {};
        double[][] doubleArray44 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray43);
        int[] intArray45 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray44, intArray45);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray40, intArray45);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray28, intArray45);
        double[][] doubleArray49 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray50 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray51 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray52 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray53 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray54 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertNotNull(doubleArray54);
    }

    @Test
    public void test3925() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3925");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray4 = new double[][] {};
        double[][] doubleArray5 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray4);
        double[][] doubleArray6 = new double[][] {};
        double[][] doubleArray7 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray6);
        double[] doubleArray9 = new double[] { 1 };
        double[] doubleArray11 = new double[] { 1 };
        double[] doubleArray13 = new double[] { 1 };
        double[] doubleArray15 = new double[] { 1 };
        double[] doubleArray17 = new double[] { 1 };
        double[][] doubleArray18 = new double[][] { doubleArray9, doubleArray11, doubleArray13, doubleArray15, doubleArray17 };
        int[] intArray19 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray18, intArray19);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray6, intArray19);
        double[] doubleArray25 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray29 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray33 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray37 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray38 = new double[][] { doubleArray25, doubleArray29, doubleArray33, doubleArray37 };
        double[] doubleArray40 = new double[] { 1 };
        double[] doubleArray42 = new double[] { 1 };
        double[] doubleArray44 = new double[] { 1 };
        double[] doubleArray46 = new double[] { 1 };
        double[] doubleArray48 = new double[] { 1 };
        double[][] doubleArray49 = new double[][] { doubleArray40, doubleArray42, doubleArray44, doubleArray46, doubleArray48 };
        int[] intArray50 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray49, intArray50);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray38, intArray50);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray6, intArray50);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray4, intArray50);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray1, intArray50);
        double[][] doubleArray56 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray57 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray58 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray57);
        double[][] doubleArray59 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray57);
        double[][] doubleArray60 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray59);
        java.lang.Class<?> wildcardClass61 = doubleArray60.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[]");
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertNotNull(wildcardClass61);
    }

    @Test
    public void test3926() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3926");
        double[][] doubleArray0 = null;
        double[][] doubleArray1 = new double[][] {};
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray5 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray6 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray5);
        double[][] doubleArray7 = new double[][] {};
        double[][] doubleArray8 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray7);
        double[][] doubleArray9 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray7);
        double[] doubleArray16 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray23 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray30 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray37 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray38 = new double[][] { doubleArray16, doubleArray23, doubleArray30, doubleArray37 };
        double[][] doubleArray39 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray38);
        double[][] doubleArray40 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray38);
        double[][] doubleArray41 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray38);
        double[][] doubleArray42 = new double[][] {};
        double[][] doubleArray43 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray42);
        int[] intArray44 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray43, intArray44);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray41, intArray44);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray9, intArray44);
        double[][] doubleArray48 = null;
        double[][] doubleArray49 = new double[][] {};
        double[][] doubleArray50 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray49);
        double[][] doubleArray51 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray50);
        double[] doubleArray55 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray59 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray63 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray67 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray68 = new double[][] { doubleArray55, doubleArray59, doubleArray63, doubleArray67 };
        double[] doubleArray70 = new double[] { 1 };
        double[] doubleArray72 = new double[] { 1 };
        double[] doubleArray74 = new double[] { 1 };
        double[] doubleArray76 = new double[] { 1 };
        double[] doubleArray78 = new double[] { 1 };
        double[][] doubleArray79 = new double[][] { doubleArray70, doubleArray72, doubleArray74, doubleArray76, doubleArray78 };
        int[] intArray80 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray79, intArray80);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray68, intArray80);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray51, intArray80);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray48, intArray80);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray9, intArray80);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray5, intArray80);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray0, intArray80);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray70), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray74), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray78), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[]");
    }

    @Test
    public void test3927() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3927");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = new double[][] {};
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[] doubleArray5 = new double[] { 1 };
        double[] doubleArray7 = new double[] { 1 };
        double[] doubleArray9 = new double[] { 1 };
        double[] doubleArray11 = new double[] { 1 };
        double[] doubleArray13 = new double[] { 1 };
        double[][] doubleArray14 = new double[][] { doubleArray5, doubleArray7, doubleArray9, doubleArray11, doubleArray13 };
        int[] intArray15 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray14, intArray15);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray2, intArray15);
        double[] doubleArray21 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray25 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray29 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray33 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray34 = new double[][] { doubleArray21, doubleArray25, doubleArray29, doubleArray33 };
        double[] doubleArray36 = new double[] { 1 };
        double[] doubleArray38 = new double[] { 1 };
        double[] doubleArray40 = new double[] { 1 };
        double[] doubleArray42 = new double[] { 1 };
        double[] doubleArray44 = new double[] { 1 };
        double[][] doubleArray45 = new double[][] { doubleArray36, doubleArray38, doubleArray40, doubleArray42, doubleArray44 };
        int[] intArray46 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray45, intArray46);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray34, intArray46);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray2, intArray46);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray1, intArray46);
        double[] doubleArray52 = new double[] { 1 };
        double[] doubleArray54 = new double[] { 1 };
        double[] doubleArray56 = new double[] { 1 };
        double[] doubleArray58 = new double[] { 1 };
        double[] doubleArray60 = new double[] { 1 };
        double[][] doubleArray61 = new double[][] { doubleArray52, doubleArray54, doubleArray56, doubleArray58, doubleArray60 };
        int[] intArray62 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray61, intArray62);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray1, intArray62);
        double[][] doubleArray65 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray66 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray67 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray66);
        double[][] doubleArray68 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray66);
        double[][] doubleArray69 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray68);
        double[][] doubleArray70 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray69);
        double[][] doubleArray71 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray70);
        double[][] doubleArray72 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray71);
        double[][] doubleArray73 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray71);
        double[][] doubleArray74 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray71);
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[]");
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[]");
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertNotNull(doubleArray74);
    }

    @Test
    public void test3928() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3928");
        double[][] doubleArray0 = null;
        double[][] doubleArray1 = null;
        double[][] doubleArray2 = new double[][] {};
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        int[] intArray4 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray3, intArray4);
        double[][] doubleArray6 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[][] doubleArray7 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[][] doubleArray8 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray7);
        double[][] doubleArray9 = new double[][] {};
        double[][] doubleArray10 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray9);
        double[][] doubleArray11 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray10);
        double[][] doubleArray12 = new double[][] {};
        double[][] doubleArray13 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray12);
        double[][] doubleArray14 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray12);
        double[][] doubleArray15 = new double[][] {};
        double[][] doubleArray16 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray15);
        double[][] doubleArray17 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray16);
        double[][] doubleArray18 = new double[][] {};
        double[][] doubleArray19 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray18);
        double[][] doubleArray20 = new double[][] {};
        double[][] doubleArray21 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray20);
        double[] doubleArray23 = new double[] { 1 };
        double[] doubleArray25 = new double[] { 1 };
        double[] doubleArray27 = new double[] { 1 };
        double[] doubleArray29 = new double[] { 1 };
        double[] doubleArray31 = new double[] { 1 };
        double[][] doubleArray32 = new double[][] { doubleArray23, doubleArray25, doubleArray27, doubleArray29, doubleArray31 };
        int[] intArray33 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray32, intArray33);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray20, intArray33);
        double[] doubleArray39 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray43 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray47 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray51 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray52 = new double[][] { doubleArray39, doubleArray43, doubleArray47, doubleArray51 };
        double[] doubleArray54 = new double[] { 1 };
        double[] doubleArray56 = new double[] { 1 };
        double[] doubleArray58 = new double[] { 1 };
        double[] doubleArray60 = new double[] { 1 };
        double[] doubleArray62 = new double[] { 1 };
        double[][] doubleArray63 = new double[][] { doubleArray54, doubleArray56, doubleArray58, doubleArray60, doubleArray62 };
        int[] intArray64 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray63, intArray64);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray52, intArray64);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray20, intArray64);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray19, intArray64);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray17, intArray64);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray12, intArray64);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray11, intArray64);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray8, intArray64);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray1, intArray64);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray0, intArray64);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[]");
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[]");
    }

    @Test
    public void test3929() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3929");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray30 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray29);
        double[][] doubleArray31 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        double[][] doubleArray32 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray31);
        double[][] doubleArray33 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray32);
        double[][] doubleArray34 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray32);
        double[][] doubleArray35 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray32);
        double[][] doubleArray36 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray35);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertNotNull(doubleArray36);
    }

    @Test
    public void test3930() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3930");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[] doubleArray11 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray18 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray25 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray32 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray33 = new double[][] { doubleArray11, doubleArray18, doubleArray25, doubleArray32 };
        double[][] doubleArray34 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray33);
        double[][] doubleArray35 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray34);
        double[][] doubleArray36 = new double[][] {};
        double[][] doubleArray37 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray36);
        double[] doubleArray39 = new double[] { 1 };
        double[] doubleArray41 = new double[] { 1 };
        double[] doubleArray43 = new double[] { 1 };
        double[] doubleArray45 = new double[] { 1 };
        double[] doubleArray47 = new double[] { 1 };
        double[][] doubleArray48 = new double[][] { doubleArray39, doubleArray41, doubleArray43, doubleArray45, doubleArray47 };
        int[] intArray49 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray48, intArray49);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray36, intArray49);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray35, intArray49);
        double[][] doubleArray53 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray35);
        double[] doubleArray55 = new double[] { 1 };
        double[] doubleArray57 = new double[] { 1 };
        double[] doubleArray59 = new double[] { 1 };
        double[] doubleArray61 = new double[] { 1 };
        double[] doubleArray63 = new double[] { 1 };
        double[][] doubleArray64 = new double[][] { doubleArray55, doubleArray57, doubleArray59, doubleArray61, doubleArray63 };
        int[] intArray65 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray64, intArray65);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray53, intArray65);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray3, intArray65);
        double[][] doubleArray69 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[][] doubleArray70 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray69);
        double[][] doubleArray71 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray70);
        double[][] doubleArray72 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray71);
        double[][] doubleArray73 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray71);
        double[][] doubleArray74 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray73);
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[]");
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[]");
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertNotNull(doubleArray74);
    }

    @Test
    public void test3931() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3931");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[][] doubleArray5 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[][] doubleArray6 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[][] doubleArray7 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray6);
        double[] doubleArray9 = new double[] { 1 };
        double[] doubleArray11 = new double[] { 1 };
        double[] doubleArray13 = new double[] { 1 };
        double[] doubleArray15 = new double[] { 1 };
        double[] doubleArray17 = new double[] { 1 };
        double[][] doubleArray18 = new double[][] { doubleArray9, doubleArray11, doubleArray13, doubleArray15, doubleArray17 };
        int[] intArray19 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray18, intArray19);
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray34 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray41 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray48 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray49 = new double[][] { doubleArray27, doubleArray34, doubleArray41, doubleArray48 };
        double[][] doubleArray50 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray49);
        double[] doubleArray52 = new double[] { 1 };
        double[] doubleArray54 = new double[] { 1 };
        double[] doubleArray56 = new double[] { 1 };
        double[] doubleArray58 = new double[] { 1 };
        double[] doubleArray60 = new double[] { 1 };
        double[][] doubleArray61 = new double[][] { doubleArray52, doubleArray54, doubleArray56, doubleArray58, doubleArray60 };
        int[] intArray62 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray61, intArray62);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray50, intArray62);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray18, intArray62);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray7, intArray62);
        double[][] doubleArray67 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray7);
        double[][] doubleArray68 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray67);
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[]");
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertNotNull(doubleArray68);
    }

    @Test
    public void test3932() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3932");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = new double[][] {};
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[] doubleArray8 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray12 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray16 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray20 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray21 = new double[][] { doubleArray8, doubleArray12, doubleArray16, doubleArray20 };
        double[] doubleArray23 = new double[] { 1 };
        double[] doubleArray25 = new double[] { 1 };
        double[] doubleArray27 = new double[] { 1 };
        double[] doubleArray29 = new double[] { 1 };
        double[] doubleArray31 = new double[] { 1 };
        double[][] doubleArray32 = new double[][] { doubleArray23, doubleArray25, doubleArray27, doubleArray29, doubleArray31 };
        int[] intArray33 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray32, intArray33);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray21, intArray33);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray3, intArray33);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray1, intArray33);
        double[][] doubleArray38 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray39 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray38);
        double[][] doubleArray40 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray38);
        double[][] doubleArray41 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray38);
        double[][] doubleArray42 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray41);
        double[][] doubleArray43 = new double[][] {};
        double[][] doubleArray44 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray43);
        double[][] doubleArray45 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray44);
        double[][] doubleArray46 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray45);
        double[][] doubleArray47 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray46);
        double[][] doubleArray48 = null;
        double[][] doubleArray49 = new double[][] {};
        double[][] doubleArray50 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray49);
        double[][] doubleArray51 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray50);
        double[] doubleArray55 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray59 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray63 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray67 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray68 = new double[][] { doubleArray55, doubleArray59, doubleArray63, doubleArray67 };
        double[] doubleArray70 = new double[] { 1 };
        double[] doubleArray72 = new double[] { 1 };
        double[] doubleArray74 = new double[] { 1 };
        double[] doubleArray76 = new double[] { 1 };
        double[] doubleArray78 = new double[] { 1 };
        double[][] doubleArray79 = new double[][] { doubleArray70, doubleArray72, doubleArray74, doubleArray76, doubleArray78 };
        int[] intArray80 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray79, intArray80);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray68, intArray80);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray51, intArray80);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray48, intArray80);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray46, intArray80);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray41, intArray80);
        double[][] doubleArray87 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray41);
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray70), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray74), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray78), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[]");
        org.junit.Assert.assertNotNull(doubleArray87);
    }

    @Test
    public void test3933() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3933");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[][] doubleArray5 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[][] doubleArray6 = new double[][] {};
        double[][] doubleArray7 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray6);
        double[][] doubleArray8 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray7);
        double[] doubleArray15 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray22 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray29 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray36 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray37 = new double[][] { doubleArray15, doubleArray22, doubleArray29, doubleArray36 };
        double[][] doubleArray38 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray37);
        double[] doubleArray40 = new double[] { 1 };
        double[] doubleArray42 = new double[] { 1 };
        double[] doubleArray44 = new double[] { 1 };
        double[] doubleArray46 = new double[] { 1 };
        double[] doubleArray48 = new double[] { 1 };
        double[][] doubleArray49 = new double[][] { doubleArray40, doubleArray42, doubleArray44, doubleArray46, doubleArray48 };
        int[] intArray50 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray49, intArray50);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray38, intArray50);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray7, intArray50);
        double[] doubleArray57 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray61 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray65 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray69 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray70 = new double[][] { doubleArray57, doubleArray61, doubleArray65, doubleArray69 };
        double[] doubleArray72 = new double[] { 1 };
        double[] doubleArray74 = new double[] { 1 };
        double[] doubleArray76 = new double[] { 1 };
        double[] doubleArray78 = new double[] { 1 };
        double[] doubleArray80 = new double[] { 1 };
        double[][] doubleArray81 = new double[][] { doubleArray72, doubleArray74, doubleArray76, doubleArray78, doubleArray80 };
        int[] intArray82 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray81, intArray82);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray70, intArray82);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray7, intArray82);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray3, intArray82);
        double[][] doubleArray87 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[][] doubleArray88 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray87);
        double[][] doubleArray89 = null;
        double[][] doubleArray90 = new double[][] {};
        double[][] doubleArray91 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray90);
        int[] intArray92 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray91, intArray92);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray89, intArray92);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray87, intArray92);
        double[][] doubleArray96 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray87);
        double[][] doubleArray97 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray96);
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[]");
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray74), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray78), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray80), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray81);
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[]");
        org.junit.Assert.assertNotNull(doubleArray87);
        org.junit.Assert.assertNotNull(doubleArray88);
        org.junit.Assert.assertNotNull(doubleArray90);
        org.junit.Assert.assertNotNull(doubleArray91);
        org.junit.Assert.assertNotNull(intArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray92), "[]");
        org.junit.Assert.assertNotNull(doubleArray96);
        org.junit.Assert.assertNotNull(doubleArray97);
    }

    @Test
    public void test3934() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3934");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray30 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray31 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        double[][] doubleArray32 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        double[][] doubleArray33 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray32);
        double[][] doubleArray34 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray33);
        double[][] doubleArray35 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray34);
        double[][] doubleArray36 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray34);
        double[][] doubleArray37 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray34);
        java.lang.Class<?> wildcardClass38 = doubleArray37.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertNotNull(wildcardClass38);
    }

    @Test
    public void test3935() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3935");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[] doubleArray31 = new double[] { 1 };
        double[] doubleArray33 = new double[] { 1 };
        double[] doubleArray35 = new double[] { 1 };
        double[] doubleArray37 = new double[] { 1 };
        double[] doubleArray39 = new double[] { 1 };
        double[][] doubleArray40 = new double[][] { doubleArray31, doubleArray33, doubleArray35, doubleArray37, doubleArray39 };
        int[] intArray41 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray40, intArray41);
        double[][] doubleArray43 = new double[][] {};
        double[][] doubleArray44 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray43);
        int[] intArray45 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray44, intArray45);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray40, intArray45);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray28, intArray45);
        double[][] doubleArray49 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray50 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray49);
        double[][] doubleArray51 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray49);
        double[][] doubleArray52 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray49);
        double[][] doubleArray53 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray49);
        double[][] doubleArray54 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray53);
        double[][] doubleArray55 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray54);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertNotNull(doubleArray55);
    }

    @Test
    public void test3936() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3936");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[][] doubleArray5 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray4);
        double[][] doubleArray6 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray5);
        double[][] doubleArray7 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray6);
        double[][] doubleArray8 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray7);
        double[][] doubleArray9 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray7);
        double[][] doubleArray10 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray9);
        double[][] doubleArray11 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray9);
        double[][] doubleArray12 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray9);
        double[][] doubleArray13 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray12);
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertNotNull(doubleArray13);
    }

    @Test
    public void test3937() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3937");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[] doubleArray31 = new double[] { 1 };
        double[] doubleArray33 = new double[] { 1 };
        double[] doubleArray35 = new double[] { 1 };
        double[] doubleArray37 = new double[] { 1 };
        double[] doubleArray39 = new double[] { 1 };
        double[][] doubleArray40 = new double[][] { doubleArray31, doubleArray33, doubleArray35, doubleArray37, doubleArray39 };
        int[] intArray41 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray40, intArray41);
        double[][] doubleArray43 = new double[][] {};
        double[][] doubleArray44 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray43);
        int[] intArray45 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray44, intArray45);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray40, intArray45);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray28, intArray45);
        double[][] doubleArray49 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray50 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray49);
        double[][] doubleArray51 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray50);
        double[][] doubleArray52 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray51);
        double[][] doubleArray53 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray52);
        double[][] doubleArray54 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray52);
        double[][] doubleArray55 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray54);
        double[][] doubleArray56 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray54);
        double[][] doubleArray57 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray54);
        double[][] doubleArray58 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray57);
        double[][] doubleArray59 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray58);
        double[][] doubleArray60 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray59);
        double[][] doubleArray61 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray59);
        double[][] doubleArray62 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray61);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertNotNull(doubleArray62);
    }

    @Test
    public void test3938() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3938");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray30 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray29);
        double[][] doubleArray31 = new double[][] {};
        double[][] doubleArray32 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray31);
        double[] doubleArray34 = new double[] { 1 };
        double[] doubleArray36 = new double[] { 1 };
        double[] doubleArray38 = new double[] { 1 };
        double[] doubleArray40 = new double[] { 1 };
        double[] doubleArray42 = new double[] { 1 };
        double[][] doubleArray43 = new double[][] { doubleArray34, doubleArray36, doubleArray38, doubleArray40, doubleArray42 };
        int[] intArray44 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray43, intArray44);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray31, intArray44);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray30, intArray44);
        double[][] doubleArray48 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        double[] doubleArray50 = new double[] { 1 };
        double[] doubleArray52 = new double[] { 1 };
        double[] doubleArray54 = new double[] { 1 };
        double[] doubleArray56 = new double[] { 1 };
        double[] doubleArray58 = new double[] { 1 };
        double[][] doubleArray59 = new double[][] { doubleArray50, doubleArray52, doubleArray54, doubleArray56, doubleArray58 };
        int[] intArray60 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray59, intArray60);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray48, intArray60);
        double[][] doubleArray63 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray48);
        double[][] doubleArray64 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray63);
        double[][] doubleArray65 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray63);
        double[][] doubleArray66 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray65);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[]");
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertNotNull(doubleArray66);
    }

    @Test
    public void test3939() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3939");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray30 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray29);
        double[][] doubleArray31 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        double[][] doubleArray32 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        double[][] doubleArray33 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        double[][] doubleArray34 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray33);
        double[][] doubleArray35 = new double[][] {};
        double[][] doubleArray36 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray35);
        double[][] doubleArray37 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray35);
        double[][] doubleArray38 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray37);
        double[][] doubleArray39 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray38);
        double[][] doubleArray40 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray38);
        double[][] doubleArray41 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray40);
        double[][] doubleArray42 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray40);
        double[][] doubleArray43 = null;
        double[][] doubleArray44 = new double[][] {};
        double[][] doubleArray45 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray44);
        double[][] doubleArray46 = new double[][] {};
        double[][] doubleArray47 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray46);
        double[][] doubleArray48 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray47);
        double[] doubleArray52 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray56 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray60 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray64 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray65 = new double[][] { doubleArray52, doubleArray56, doubleArray60, doubleArray64 };
        double[] doubleArray67 = new double[] { 1 };
        double[] doubleArray69 = new double[] { 1 };
        double[] doubleArray71 = new double[] { 1 };
        double[] doubleArray73 = new double[] { 1 };
        double[] doubleArray75 = new double[] { 1 };
        double[][] doubleArray76 = new double[][] { doubleArray67, doubleArray69, doubleArray71, doubleArray73, doubleArray75 };
        int[] intArray77 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray76, intArray77);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray65, intArray77);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray47, intArray77);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray45, intArray77);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray43, intArray77);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray42, intArray77);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray33, intArray77);
        double[][] doubleArray85 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray33);
        double[][] doubleArray86 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray33);
        double[][] doubleArray87 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray33);
        java.lang.Class<?> wildcardClass88 = doubleArray33.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray71), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray73), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray75), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray77), "[]");
        org.junit.Assert.assertNotNull(doubleArray85);
        org.junit.Assert.assertNotNull(doubleArray86);
        org.junit.Assert.assertNotNull(doubleArray87);
        org.junit.Assert.assertNotNull(wildcardClass88);
    }

    @Test
    public void test3940() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3940");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = new double[][] {};
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[] doubleArray5 = new double[] { 1 };
        double[] doubleArray7 = new double[] { 1 };
        double[] doubleArray9 = new double[] { 1 };
        double[] doubleArray11 = new double[] { 1 };
        double[] doubleArray13 = new double[] { 1 };
        double[][] doubleArray14 = new double[][] { doubleArray5, doubleArray7, doubleArray9, doubleArray11, doubleArray13 };
        int[] intArray15 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray14, intArray15);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray2, intArray15);
        double[] doubleArray21 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray25 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray29 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray33 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray34 = new double[][] { doubleArray21, doubleArray25, doubleArray29, doubleArray33 };
        double[] doubleArray36 = new double[] { 1 };
        double[] doubleArray38 = new double[] { 1 };
        double[] doubleArray40 = new double[] { 1 };
        double[] doubleArray42 = new double[] { 1 };
        double[] doubleArray44 = new double[] { 1 };
        double[][] doubleArray45 = new double[][] { doubleArray36, doubleArray38, doubleArray40, doubleArray42, doubleArray44 };
        int[] intArray46 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray45, intArray46);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray34, intArray46);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray2, intArray46);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray1, intArray46);
        double[][] doubleArray51 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray52 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray53 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray54 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray53);
        double[][] doubleArray55 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray54);
        double[][] doubleArray56 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray54);
        double[][] doubleArray57 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray56);
        java.lang.Class<?> wildcardClass58 = doubleArray56.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertNotNull(wildcardClass58);
    }

    @Test
    public void test3941() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3941");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        int[] intArray2 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray1, intArray2);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray5 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray6 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray5);
        double[][] doubleArray7 = new double[][] {};
        double[][] doubleArray8 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray7);
        double[][] doubleArray9 = new double[][] {};
        double[][] doubleArray10 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray9);
        double[] doubleArray12 = new double[] { 1 };
        double[] doubleArray14 = new double[] { 1 };
        double[] doubleArray16 = new double[] { 1 };
        double[] doubleArray18 = new double[] { 1 };
        double[] doubleArray20 = new double[] { 1 };
        double[][] doubleArray21 = new double[][] { doubleArray12, doubleArray14, doubleArray16, doubleArray18, doubleArray20 };
        int[] intArray22 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray21, intArray22);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray9, intArray22);
        double[] doubleArray28 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray32 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray36 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray40 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray41 = new double[][] { doubleArray28, doubleArray32, doubleArray36, doubleArray40 };
        double[] doubleArray43 = new double[] { 1 };
        double[] doubleArray45 = new double[] { 1 };
        double[] doubleArray47 = new double[] { 1 };
        double[] doubleArray49 = new double[] { 1 };
        double[] doubleArray51 = new double[] { 1 };
        double[][] doubleArray52 = new double[][] { doubleArray43, doubleArray45, doubleArray47, doubleArray49, doubleArray51 };
        int[] intArray53 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray52, intArray53);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray41, intArray53);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray9, intArray53);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray8, intArray53);
        double[][] doubleArray58 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray8);
        double[][] doubleArray59 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray58);
        double[][] doubleArray60 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray58);
        double[][] doubleArray61 = new double[][] {};
        double[][] doubleArray62 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray61);
        double[][] doubleArray63 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray62);
        double[] doubleArray67 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray71 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray75 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray79 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray80 = new double[][] { doubleArray67, doubleArray71, doubleArray75, doubleArray79 };
        double[] doubleArray82 = new double[] { 1 };
        double[] doubleArray84 = new double[] { 1 };
        double[] doubleArray86 = new double[] { 1 };
        double[] doubleArray88 = new double[] { 1 };
        double[] doubleArray90 = new double[] { 1 };
        double[][] doubleArray91 = new double[][] { doubleArray82, doubleArray84, doubleArray86, doubleArray88, doubleArray90 };
        int[] intArray92 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray91, intArray92);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray80, intArray92);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray63, intArray92);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray60, intArray92);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray6, intArray92);
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[]");
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray71), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray75), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray79), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertNotNull(doubleArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray82), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray84), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray86), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray88), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray90), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray91);
        org.junit.Assert.assertNotNull(intArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray92), "[]");
    }

    @Test
    public void test3942() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3942");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray30 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray29);
        double[][] doubleArray31 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        double[][] doubleArray32 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        double[][] doubleArray33 = new double[][] {};
        double[][] doubleArray34 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray33);
        double[][] doubleArray35 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray33);
        double[][] doubleArray36 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray33);
        double[][] doubleArray37 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray36);
        double[] doubleArray39 = new double[] { 1 };
        double[] doubleArray41 = new double[] { 1 };
        double[] doubleArray43 = new double[] { 1 };
        double[] doubleArray45 = new double[] { 1 };
        double[] doubleArray47 = new double[] { 1 };
        double[][] doubleArray48 = new double[][] { doubleArray39, doubleArray41, doubleArray43, doubleArray45, doubleArray47 };
        int[] intArray49 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray48, intArray49);
        double[][] doubleArray51 = new double[][] {};
        double[][] doubleArray52 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray51);
        int[] intArray53 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray52, intArray53);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray48, intArray53);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray36, intArray53);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray32, intArray53);
        double[][] doubleArray58 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray32);
        double[][] doubleArray59 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray58);
        double[][] doubleArray60 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray58);
        double[][] doubleArray61 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray60);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[]");
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertNotNull(doubleArray61);
    }

    @Test
    public void test3943() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3943");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[] doubleArray8 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray12 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray16 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray20 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray21 = new double[][] { doubleArray8, doubleArray12, doubleArray16, doubleArray20 };
        double[] doubleArray23 = new double[] { 1 };
        double[] doubleArray25 = new double[] { 1 };
        double[] doubleArray27 = new double[] { 1 };
        double[] doubleArray29 = new double[] { 1 };
        double[] doubleArray31 = new double[] { 1 };
        double[][] doubleArray32 = new double[][] { doubleArray23, doubleArray25, doubleArray27, doubleArray29, doubleArray31 };
        int[] intArray33 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray32, intArray33);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray21, intArray33);
        double[][] doubleArray36 = new double[][] {};
        double[][] doubleArray37 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray36);
        double[][] doubleArray38 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray37);
        double[][] doubleArray39 = new double[][] {};
        double[][] doubleArray40 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray39);
        double[][] doubleArray41 = new double[][] {};
        double[][] doubleArray42 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray41);
        double[] doubleArray44 = new double[] { 1 };
        double[] doubleArray46 = new double[] { 1 };
        double[] doubleArray48 = new double[] { 1 };
        double[] doubleArray50 = new double[] { 1 };
        double[] doubleArray52 = new double[] { 1 };
        double[][] doubleArray53 = new double[][] { doubleArray44, doubleArray46, doubleArray48, doubleArray50, doubleArray52 };
        int[] intArray54 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray53, intArray54);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray41, intArray54);
        double[] doubleArray60 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray64 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray68 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray72 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray73 = new double[][] { doubleArray60, doubleArray64, doubleArray68, doubleArray72 };
        double[] doubleArray75 = new double[] { 1 };
        double[] doubleArray77 = new double[] { 1 };
        double[] doubleArray79 = new double[] { 1 };
        double[] doubleArray81 = new double[] { 1 };
        double[] doubleArray83 = new double[] { 1 };
        double[][] doubleArray84 = new double[][] { doubleArray75, doubleArray77, doubleArray79, doubleArray81, doubleArray83 };
        int[] intArray85 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray84, intArray85);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray73, intArray85);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray41, intArray85);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray40, intArray85);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray38, intArray85);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray21, intArray85);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray3, intArray85);
        double[][] doubleArray93 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[][] doubleArray94 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray93);
        java.lang.Class<?> wildcardClass95 = doubleArray94.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[]");
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray75), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray77), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray79), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray81), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray83), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray84);
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray85), "[]");
        org.junit.Assert.assertNotNull(doubleArray93);
        org.junit.Assert.assertNotNull(doubleArray94);
        org.junit.Assert.assertNotNull(wildcardClass95);
    }

    @Test
    public void test3944() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3944");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[] doubleArray31 = new double[] { 1 };
        double[] doubleArray33 = new double[] { 1 };
        double[] doubleArray35 = new double[] { 1 };
        double[] doubleArray37 = new double[] { 1 };
        double[] doubleArray39 = new double[] { 1 };
        double[][] doubleArray40 = new double[][] { doubleArray31, doubleArray33, doubleArray35, doubleArray37, doubleArray39 };
        int[] intArray41 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray40, intArray41);
        double[][] doubleArray43 = new double[][] {};
        double[][] doubleArray44 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray43);
        int[] intArray45 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray44, intArray45);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray40, intArray45);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray28, intArray45);
        double[][] doubleArray49 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray50 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray49);
        double[][] doubleArray51 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray50);
        double[][] doubleArray52 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray50);
        double[][] doubleArray53 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray50);
        double[][] doubleArray54 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray50);
        double[][] doubleArray55 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray54);
        double[][] doubleArray56 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray55);
        double[][] doubleArray57 = new double[][] {};
        double[][] doubleArray58 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray57);
        double[][] doubleArray59 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray57);
        double[][] doubleArray60 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray59);
        double[][] doubleArray61 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray60);
        double[][] doubleArray62 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray61);
        double[][] doubleArray63 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray62);
        double[][] doubleArray64 = new double[][] {};
        double[][] doubleArray65 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray64);
        double[][] doubleArray66 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray64);
        double[][] doubleArray67 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray64);
        double[][] doubleArray68 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray64);
        double[][] doubleArray69 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray68);
        double[][] doubleArray70 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray68);
        double[][] doubleArray71 = new double[][] {};
        double[][] doubleArray72 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray71);
        int[] intArray73 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray72, intArray73);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray70, intArray73);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray63, intArray73);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray55, intArray73);
        double[][] doubleArray78 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray55);
        double[][] doubleArray79 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray78);
        double[][] doubleArray80 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray79);
        double[][] doubleArray81 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray79);
        double[][] doubleArray82 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray81);
        double[][] doubleArray83 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray82);
        double[][] doubleArray84 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray83);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[]");
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertNotNull(doubleArray81);
        org.junit.Assert.assertNotNull(doubleArray82);
        org.junit.Assert.assertNotNull(doubleArray83);
        org.junit.Assert.assertNotNull(doubleArray84);
    }

    @Test
    public void test3945() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3945");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray30 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray31 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        double[][] doubleArray32 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        double[][] doubleArray33 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        double[][] doubleArray34 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray33);
        double[][] doubleArray35 = null;
        double[][] doubleArray36 = new double[][] {};
        double[][] doubleArray37 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray36);
        double[][] doubleArray38 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray36);
        double[][] doubleArray39 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray36);
        double[][] doubleArray40 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray36);
        double[][] doubleArray41 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray36);
        double[][] doubleArray42 = new double[][] {};
        double[][] doubleArray43 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray42);
        double[][] doubleArray44 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray42);
        double[][] doubleArray45 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray44);
        double[][] doubleArray46 = null;
        double[][] doubleArray47 = new double[][] {};
        double[][] doubleArray48 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray47);
        double[][] doubleArray49 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray48);
        double[] doubleArray53 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray57 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray61 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray65 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray66 = new double[][] { doubleArray53, doubleArray57, doubleArray61, doubleArray65 };
        double[] doubleArray68 = new double[] { 1 };
        double[] doubleArray70 = new double[] { 1 };
        double[] doubleArray72 = new double[] { 1 };
        double[] doubleArray74 = new double[] { 1 };
        double[] doubleArray76 = new double[] { 1 };
        double[][] doubleArray77 = new double[][] { doubleArray68, doubleArray70, doubleArray72, doubleArray74, doubleArray76 };
        int[] intArray78 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray77, intArray78);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray66, intArray78);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray49, intArray78);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray46, intArray78);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray45, intArray78);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray41, intArray78);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray35, intArray78);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray33, intArray78);
        double[][] doubleArray87 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray33);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray70), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray74), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[]");
        org.junit.Assert.assertNotNull(doubleArray87);
    }

    @Test
    public void test3946() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3946");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray30 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray31 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray32 = new double[][] {};
        double[][] doubleArray33 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray32);
        int[] intArray34 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray33, intArray34);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray31, intArray34);
        double[][] doubleArray37 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray31);
        double[][] doubleArray38 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray37);
        double[][] doubleArray39 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray38);
        double[][] doubleArray40 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray38);
        double[][] doubleArray41 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray38);
        double[][] doubleArray42 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray41);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertNotNull(doubleArray42);
    }

    @Test
    public void test3947() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3947");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[] doubleArray9 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray16 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray23 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray30 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray31 = new double[][] { doubleArray9, doubleArray16, doubleArray23, doubleArray30 };
        double[][] doubleArray32 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray31);
        double[] doubleArray34 = new double[] { 1 };
        double[] doubleArray36 = new double[] { 1 };
        double[] doubleArray38 = new double[] { 1 };
        double[] doubleArray40 = new double[] { 1 };
        double[] doubleArray42 = new double[] { 1 };
        double[][] doubleArray43 = new double[][] { doubleArray34, doubleArray36, doubleArray38, doubleArray40, doubleArray42 };
        int[] intArray44 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray43, intArray44);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray32, intArray44);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray1, intArray44);
        double[][] doubleArray48 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray49 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray48);
        double[][] doubleArray50 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray49);
        double[][] doubleArray51 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray49);
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertNotNull(doubleArray51);
    }

    @Test
    public void test3948() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3948");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray4 = new double[][] {};
        double[][] doubleArray5 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray4);
        double[][] doubleArray6 = new double[][] {};
        double[][] doubleArray7 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray6);
        double[] doubleArray9 = new double[] { 1 };
        double[] doubleArray11 = new double[] { 1 };
        double[] doubleArray13 = new double[] { 1 };
        double[] doubleArray15 = new double[] { 1 };
        double[] doubleArray17 = new double[] { 1 };
        double[][] doubleArray18 = new double[][] { doubleArray9, doubleArray11, doubleArray13, doubleArray15, doubleArray17 };
        int[] intArray19 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray18, intArray19);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray6, intArray19);
        double[] doubleArray25 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray29 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray33 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray37 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray38 = new double[][] { doubleArray25, doubleArray29, doubleArray33, doubleArray37 };
        double[] doubleArray40 = new double[] { 1 };
        double[] doubleArray42 = new double[] { 1 };
        double[] doubleArray44 = new double[] { 1 };
        double[] doubleArray46 = new double[] { 1 };
        double[] doubleArray48 = new double[] { 1 };
        double[][] doubleArray49 = new double[][] { doubleArray40, doubleArray42, doubleArray44, doubleArray46, doubleArray48 };
        int[] intArray50 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray49, intArray50);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray38, intArray50);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray6, intArray50);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray4, intArray50);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray1, intArray50);
        double[][] doubleArray56 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray57 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray58 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray57);
        double[][] doubleArray59 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray57);
        double[][] doubleArray60 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray59);
        double[][] doubleArray61 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray60);
        double[][] doubleArray62 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray60);
        double[][] doubleArray63 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray62);
        double[][] doubleArray64 = new double[][] {};
        double[][] doubleArray65 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray64);
        int[] intArray66 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray65, intArray66);
        double[][] doubleArray68 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray65);
        double[][] doubleArray69 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray68);
        double[][] doubleArray70 = new double[][] {};
        double[][] doubleArray71 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray70);
        int[] intArray72 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray71, intArray72);
        double[] doubleArray75 = new double[] { 1 };
        double[] doubleArray77 = new double[] { 1 };
        double[] doubleArray79 = new double[] { 1 };
        double[] doubleArray81 = new double[] { 1 };
        double[] doubleArray83 = new double[] { 1 };
        double[][] doubleArray84 = new double[][] { doubleArray75, doubleArray77, doubleArray79, doubleArray81, doubleArray83 };
        int[] intArray85 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray84, intArray85);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray71, intArray85);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray68, intArray85);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray63, intArray85);
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[]");
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[]");
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[]");
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray75), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray77), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray79), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray81), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray83), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray84);
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray85), "[]");
    }

    @Test
    public void test3949() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3949");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray3 = new double[][] {};
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[][] doubleArray5 = new double[][] {};
        double[][] doubleArray6 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray5);
        double[] doubleArray8 = new double[] { 1 };
        double[] doubleArray10 = new double[] { 1 };
        double[] doubleArray12 = new double[] { 1 };
        double[] doubleArray14 = new double[] { 1 };
        double[] doubleArray16 = new double[] { 1 };
        double[][] doubleArray17 = new double[][] { doubleArray8, doubleArray10, doubleArray12, doubleArray14, doubleArray16 };
        int[] intArray18 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray17, intArray18);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray5, intArray18);
        double[] doubleArray24 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray28 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray32 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray36 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray37 = new double[][] { doubleArray24, doubleArray28, doubleArray32, doubleArray36 };
        double[] doubleArray39 = new double[] { 1 };
        double[] doubleArray41 = new double[] { 1 };
        double[] doubleArray43 = new double[] { 1 };
        double[] doubleArray45 = new double[] { 1 };
        double[] doubleArray47 = new double[] { 1 };
        double[][] doubleArray48 = new double[][] { doubleArray39, doubleArray41, doubleArray43, doubleArray45, doubleArray47 };
        int[] intArray49 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray48, intArray49);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray37, intArray49);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray5, intArray49);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray3, intArray49);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray0, intArray49);
        double[][] doubleArray55 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray56 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray55);
        double[][] doubleArray57 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray56);
        double[][] doubleArray58 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray56);
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[]");
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[]");
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertNotNull(doubleArray58);
    }

    @Test
    public void test3950() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3950");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray4 = new double[][] {};
        double[][] doubleArray5 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray4);
        double[] doubleArray7 = new double[] { 1 };
        double[] doubleArray9 = new double[] { 1 };
        double[] doubleArray11 = new double[] { 1 };
        double[] doubleArray13 = new double[] { 1 };
        double[] doubleArray15 = new double[] { 1 };
        double[][] doubleArray16 = new double[][] { doubleArray7, doubleArray9, doubleArray11, doubleArray13, doubleArray15 };
        int[] intArray17 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray16, intArray17);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray4, intArray17);
        double[] doubleArray23 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray27 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray31 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray35 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray36 = new double[][] { doubleArray23, doubleArray27, doubleArray31, doubleArray35 };
        double[] doubleArray38 = new double[] { 1 };
        double[] doubleArray40 = new double[] { 1 };
        double[] doubleArray42 = new double[] { 1 };
        double[] doubleArray44 = new double[] { 1 };
        double[] doubleArray46 = new double[] { 1 };
        double[][] doubleArray47 = new double[][] { doubleArray38, doubleArray40, doubleArray42, doubleArray44, doubleArray46 };
        int[] intArray48 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray47, intArray48);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray36, intArray48);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray4, intArray48);
        double[] doubleArray53 = new double[] { 1 };
        double[] doubleArray55 = new double[] { 1 };
        double[] doubleArray57 = new double[] { 1 };
        double[] doubleArray59 = new double[] { 1 };
        double[] doubleArray61 = new double[] { 1 };
        double[][] doubleArray62 = new double[][] { doubleArray53, doubleArray55, doubleArray57, doubleArray59, doubleArray61 };
        int[] intArray63 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray62, intArray63);
        double[][] doubleArray65 = new double[][] {};
        double[][] doubleArray66 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray65);
        int[] intArray67 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray66, intArray67);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray62, intArray67);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray4, intArray67);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray3, intArray67);
        double[][] doubleArray72 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[][] doubleArray73 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray72);
        double[][] doubleArray74 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray73);
        double[][] doubleArray75 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray74);
        double[][] doubleArray76 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray74);
        double[][] doubleArray77 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray74);
        double[][] doubleArray78 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray77);
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[]");
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[]");
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[]");
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertNotNull(doubleArray78);
    }

    @Test
    public void test3951() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3951");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[][] doubleArray5 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray4);
        double[] doubleArray12 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray19 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray26 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray33 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray34 = new double[][] { doubleArray12, doubleArray19, doubleArray26, doubleArray33 };
        double[][] doubleArray35 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray34);
        double[][] doubleArray36 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray35);
        double[][] doubleArray37 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray36);
        double[][] doubleArray38 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray36);
        double[][] doubleArray39 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray36);
        double[][] doubleArray40 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray36);
        double[][] doubleArray41 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray40);
        double[][] doubleArray42 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray41);
        double[][] doubleArray43 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray42);
        double[][] doubleArray44 = null;
        double[][] doubleArray45 = new double[][] {};
        double[][] doubleArray46 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray45);
        double[][] doubleArray47 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray46);
        double[] doubleArray51 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray55 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray59 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray63 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray64 = new double[][] { doubleArray51, doubleArray55, doubleArray59, doubleArray63 };
        double[] doubleArray66 = new double[] { 1 };
        double[] doubleArray68 = new double[] { 1 };
        double[] doubleArray70 = new double[] { 1 };
        double[] doubleArray72 = new double[] { 1 };
        double[] doubleArray74 = new double[] { 1 };
        double[][] doubleArray75 = new double[][] { doubleArray66, doubleArray68, doubleArray70, doubleArray72, doubleArray74 };
        int[] intArray76 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray75, intArray76);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray64, intArray76);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray47, intArray76);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray44, intArray76);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray42, intArray76);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray4, intArray76);
        double[][] doubleArray83 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray4);
        double[][] doubleArray84 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray83);
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray66), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray70), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray74), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[]");
        org.junit.Assert.assertNotNull(doubleArray83);
        org.junit.Assert.assertNotNull(doubleArray84);
    }

    @Test
    public void test3952() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3952");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[][] doubleArray5 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray4);
        double[][] doubleArray6 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray5);
        double[][] doubleArray7 = null;
        double[][] doubleArray8 = null;
        double[][] doubleArray9 = new double[][] {};
        double[][] doubleArray10 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray9);
        double[][] doubleArray11 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray9);
        double[] doubleArray13 = new double[] { 1 };
        double[] doubleArray15 = new double[] { 1 };
        double[] doubleArray17 = new double[] { 1 };
        double[] doubleArray19 = new double[] { 1 };
        double[] doubleArray21 = new double[] { 1 };
        double[][] doubleArray22 = new double[][] { doubleArray13, doubleArray15, doubleArray17, doubleArray19, doubleArray21 };
        int[] intArray23 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray22, intArray23);
        double[] doubleArray31 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray38 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray45 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray52 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray53 = new double[][] { doubleArray31, doubleArray38, doubleArray45, doubleArray52 };
        double[][] doubleArray54 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray53);
        double[] doubleArray56 = new double[] { 1 };
        double[] doubleArray58 = new double[] { 1 };
        double[] doubleArray60 = new double[] { 1 };
        double[] doubleArray62 = new double[] { 1 };
        double[] doubleArray64 = new double[] { 1 };
        double[][] doubleArray65 = new double[][] { doubleArray56, doubleArray58, doubleArray60, doubleArray62, doubleArray64 };
        int[] intArray66 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray65, intArray66);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray54, intArray66);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray22, intArray66);
        double[] doubleArray71 = new double[] { 1 };
        double[] doubleArray73 = new double[] { 1 };
        double[] doubleArray75 = new double[] { 1 };
        double[] doubleArray77 = new double[] { 1 };
        double[] doubleArray79 = new double[] { 1 };
        double[][] doubleArray80 = new double[][] { doubleArray71, doubleArray73, doubleArray75, doubleArray77, doubleArray79 };
        int[] intArray81 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray80, intArray81);
        double[][] doubleArray83 = new double[][] {};
        double[][] doubleArray84 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray83);
        int[] intArray85 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray84, intArray85);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray80, intArray85);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray22, intArray85);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray11, intArray85);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray8, intArray85);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray7, intArray85);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray6, intArray85);
        double[][] doubleArray93 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[]");
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray71), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray73), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray75), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray77), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray79), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray81), "[]");
        org.junit.Assert.assertNotNull(doubleArray83);
        org.junit.Assert.assertNotNull(doubleArray84);
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray85), "[]");
        org.junit.Assert.assertNotNull(doubleArray93);
    }

    @Test
    public void test3953() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3953");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[][] doubleArray5 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray4);
        double[][] doubleArray6 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray5);
        double[][] doubleArray7 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray6);
        double[][] doubleArray8 = new double[][] {};
        double[][] doubleArray9 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray8);
        double[][] doubleArray10 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray8);
        double[][] doubleArray11 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray10);
        double[][] doubleArray12 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray11);
        double[][] doubleArray13 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray11);
        double[][] doubleArray14 = new double[][] {};
        double[][] doubleArray15 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray14);
        double[][] doubleArray16 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray15);
        double[] doubleArray23 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray30 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray37 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray44 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray45 = new double[][] { doubleArray23, doubleArray30, doubleArray37, doubleArray44 };
        double[][] doubleArray46 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray45);
        double[] doubleArray48 = new double[] { 1 };
        double[] doubleArray50 = new double[] { 1 };
        double[] doubleArray52 = new double[] { 1 };
        double[] doubleArray54 = new double[] { 1 };
        double[] doubleArray56 = new double[] { 1 };
        double[][] doubleArray57 = new double[][] { doubleArray48, doubleArray50, doubleArray52, doubleArray54, doubleArray56 };
        int[] intArray58 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray57, intArray58);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray46, intArray58);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray15, intArray58);
        double[] doubleArray65 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray69 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray73 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray77 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray78 = new double[][] { doubleArray65, doubleArray69, doubleArray73, doubleArray77 };
        double[] doubleArray80 = new double[] { 1 };
        double[] doubleArray82 = new double[] { 1 };
        double[] doubleArray84 = new double[] { 1 };
        double[] doubleArray86 = new double[] { 1 };
        double[] doubleArray88 = new double[] { 1 };
        double[][] doubleArray89 = new double[][] { doubleArray80, doubleArray82, doubleArray84, doubleArray86, doubleArray88 };
        int[] intArray90 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray89, intArray90);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray78, intArray90);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray15, intArray90);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray11, intArray90);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray7, intArray90);
        double[][] doubleArray96 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray7);
        double[][] doubleArray97 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray7);
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[]");
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray73), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray77), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray80), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray82), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray84), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray86), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray88), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray89);
        org.junit.Assert.assertNotNull(intArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray90), "[]");
        org.junit.Assert.assertNotNull(doubleArray96);
        org.junit.Assert.assertNotNull(doubleArray97);
    }

    @Test
    public void test3954() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3954");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray30 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray29);
        double[][] doubleArray31 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        double[][] doubleArray32 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray31);
        double[][] doubleArray33 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray32);
        double[][] doubleArray34 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray33);
        double[][] doubleArray35 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray33);
        double[][] doubleArray36 = null;
        double[][] doubleArray37 = null;
        double[][] doubleArray38 = new double[][] {};
        double[][] doubleArray39 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray38);
        double[] doubleArray41 = new double[] { 1 };
        double[] doubleArray43 = new double[] { 1 };
        double[] doubleArray45 = new double[] { 1 };
        double[] doubleArray47 = new double[] { 1 };
        double[] doubleArray49 = new double[] { 1 };
        double[][] doubleArray50 = new double[][] { doubleArray41, doubleArray43, doubleArray45, doubleArray47, doubleArray49 };
        int[] intArray51 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray50, intArray51);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray38, intArray51);
        double[] doubleArray57 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray61 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray65 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray69 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray70 = new double[][] { doubleArray57, doubleArray61, doubleArray65, doubleArray69 };
        double[] doubleArray72 = new double[] { 1 };
        double[] doubleArray74 = new double[] { 1 };
        double[] doubleArray76 = new double[] { 1 };
        double[] doubleArray78 = new double[] { 1 };
        double[] doubleArray80 = new double[] { 1 };
        double[][] doubleArray81 = new double[][] { doubleArray72, doubleArray74, doubleArray76, doubleArray78, doubleArray80 };
        int[] intArray82 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray81, intArray82);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray70, intArray82);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray38, intArray82);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray37, intArray82);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray36, intArray82);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray35, intArray82);
        java.lang.Class<?> wildcardClass89 = doubleArray35.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[]");
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray74), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray78), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray80), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray81);
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[]");
        org.junit.Assert.assertNotNull(wildcardClass89);
    }

    @Test
    public void test3955() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3955");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[][] doubleArray5 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[][] doubleArray6 = new double[][] {};
        double[][] doubleArray7 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray6);
        double[][] doubleArray8 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray7);
        double[] doubleArray15 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray22 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray29 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray36 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray37 = new double[][] { doubleArray15, doubleArray22, doubleArray29, doubleArray36 };
        double[][] doubleArray38 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray37);
        double[] doubleArray40 = new double[] { 1 };
        double[] doubleArray42 = new double[] { 1 };
        double[] doubleArray44 = new double[] { 1 };
        double[] doubleArray46 = new double[] { 1 };
        double[] doubleArray48 = new double[] { 1 };
        double[][] doubleArray49 = new double[][] { doubleArray40, doubleArray42, doubleArray44, doubleArray46, doubleArray48 };
        int[] intArray50 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray49, intArray50);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray38, intArray50);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray7, intArray50);
        double[] doubleArray57 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray61 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray65 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray69 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray70 = new double[][] { doubleArray57, doubleArray61, doubleArray65, doubleArray69 };
        double[] doubleArray72 = new double[] { 1 };
        double[] doubleArray74 = new double[] { 1 };
        double[] doubleArray76 = new double[] { 1 };
        double[] doubleArray78 = new double[] { 1 };
        double[] doubleArray80 = new double[] { 1 };
        double[][] doubleArray81 = new double[][] { doubleArray72, doubleArray74, doubleArray76, doubleArray78, doubleArray80 };
        int[] intArray82 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray81, intArray82);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray70, intArray82);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray7, intArray82);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray3, intArray82);
        double[][] doubleArray87 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[][] doubleArray88 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray87);
        double[][] doubleArray89 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray88);
        double[][] doubleArray90 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray88);
        double[][] doubleArray91 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray88);
        double[][] doubleArray92 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray91);
        double[][] doubleArray93 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray91);
        double[][] doubleArray94 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray91);
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[]");
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray74), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray78), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray80), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray81);
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[]");
        org.junit.Assert.assertNotNull(doubleArray87);
        org.junit.Assert.assertNotNull(doubleArray88);
        org.junit.Assert.assertNotNull(doubleArray89);
        org.junit.Assert.assertNotNull(doubleArray90);
        org.junit.Assert.assertNotNull(doubleArray91);
        org.junit.Assert.assertNotNull(doubleArray92);
        org.junit.Assert.assertNotNull(doubleArray93);
        org.junit.Assert.assertNotNull(doubleArray94);
    }

    @Test
    public void test3956() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3956");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray30 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray31 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        double[][] doubleArray32 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        double[][] doubleArray33 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray32);
        double[][] doubleArray34 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray33);
        double[][] doubleArray35 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray34);
        double[][] doubleArray36 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray35);
        double[][] doubleArray37 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray35);
        double[][] doubleArray38 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray37);
        double[][] doubleArray39 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray38);
        double[][] doubleArray40 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray38);
        double[][] doubleArray41 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray40);
        java.lang.Class<?> wildcardClass42 = doubleArray41.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertNotNull(wildcardClass42);
    }

    @Test
    public void test3957() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3957");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        int[] intArray2 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray1, intArray2);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray5 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray4);
        double[][] doubleArray6 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray5);
        double[][] doubleArray7 = new double[][] {};
        double[][] doubleArray8 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray7);
        double[] doubleArray10 = new double[] { 1 };
        double[] doubleArray12 = new double[] { 1 };
        double[] doubleArray14 = new double[] { 1 };
        double[] doubleArray16 = new double[] { 1 };
        double[] doubleArray18 = new double[] { 1 };
        double[][] doubleArray19 = new double[][] { doubleArray10, doubleArray12, doubleArray14, doubleArray16, doubleArray18 };
        int[] intArray20 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray19, intArray20);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray7, intArray20);
        double[][] doubleArray23 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray7);
        double[][] doubleArray24 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray23);
        double[][] doubleArray25 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray24);
        double[][] doubleArray26 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray25);
        double[][] doubleArray27 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray25);
        double[][] doubleArray28 = new double[][] {};
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray30 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray29);
        double[][] doubleArray31 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        double[][] doubleArray32 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        double[][] doubleArray33 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray32);
        double[][] doubleArray34 = new double[][] {};
        double[][] doubleArray35 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray34);
        double[][] doubleArray36 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray35);
        double[] doubleArray40 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray44 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray48 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray52 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray53 = new double[][] { doubleArray40, doubleArray44, doubleArray48, doubleArray52 };
        double[] doubleArray55 = new double[] { 1 };
        double[] doubleArray57 = new double[] { 1 };
        double[] doubleArray59 = new double[] { 1 };
        double[] doubleArray61 = new double[] { 1 };
        double[] doubleArray63 = new double[] { 1 };
        double[][] doubleArray64 = new double[][] { doubleArray55, doubleArray57, doubleArray59, doubleArray61, doubleArray63 };
        int[] intArray65 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray64, intArray65);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray53, intArray65);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray36, intArray65);
        double[][] doubleArray69 = null;
        double[] doubleArray71 = new double[] { 1 };
        double[] doubleArray73 = new double[] { 1 };
        double[] doubleArray75 = new double[] { 1 };
        double[] doubleArray77 = new double[] { 1 };
        double[] doubleArray79 = new double[] { 1 };
        double[][] doubleArray80 = new double[][] { doubleArray71, doubleArray73, doubleArray75, doubleArray77, doubleArray79 };
        int[] intArray81 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray80, intArray81);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray69, intArray81);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray36, intArray81);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray32, intArray81);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray27, intArray81);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray6, intArray81);
        double[][] doubleArray88 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray6);
        double[][] doubleArray89 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[]");
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray71), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray73), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray75), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray77), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray79), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray81), "[]");
        org.junit.Assert.assertNotNull(doubleArray88);
        org.junit.Assert.assertNotNull(doubleArray89);
    }

    @Test
    public void test3958() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3958");
        double[][] doubleArray0 = null;
        double[] doubleArray7 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray14 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray21 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray28 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray29 = new double[][] { doubleArray7, doubleArray14, doubleArray21, doubleArray28 };
        double[][] doubleArray30 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray29);
        double[][] doubleArray31 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray29);
        double[][] doubleArray32 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray31);
        double[][] doubleArray33 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray31);
        double[][] doubleArray34 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray33);
        double[][] doubleArray35 = new double[][] {};
        double[][] doubleArray36 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray35);
        double[][] doubleArray37 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray35);
        double[][] doubleArray38 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray35);
        double[][] doubleArray39 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray35);
        double[][] doubleArray40 = new double[][] {};
        double[][] doubleArray41 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray40);
        double[][] doubleArray42 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray41);
        double[] doubleArray46 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray50 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray54 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray58 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray59 = new double[][] { doubleArray46, doubleArray50, doubleArray54, doubleArray58 };
        double[] doubleArray61 = new double[] { 1 };
        double[] doubleArray63 = new double[] { 1 };
        double[] doubleArray65 = new double[] { 1 };
        double[] doubleArray67 = new double[] { 1 };
        double[] doubleArray69 = new double[] { 1 };
        double[][] doubleArray70 = new double[][] { doubleArray61, doubleArray63, doubleArray65, doubleArray67, doubleArray69 };
        int[] intArray71 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray70, intArray71);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray59, intArray71);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray42, intArray71);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray35, intArray71);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray34, intArray71);
        double[][] doubleArray77 = null;
        double[] doubleArray79 = new double[] { 1 };
        double[] doubleArray81 = new double[] { 1 };
        double[] doubleArray83 = new double[] { 1 };
        double[] doubleArray85 = new double[] { 1 };
        double[] doubleArray87 = new double[] { 1 };
        double[][] doubleArray88 = new double[][] { doubleArray79, doubleArray81, doubleArray83, doubleArray85, doubleArray87 };
        int[] intArray89 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray88, intArray89);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray77, intArray89);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray34, intArray89);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray0, intArray89);
        java.lang.Class<?> wildcardClass94 = intArray89.getClass();
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[]");
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray79), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray81), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray83), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray85), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray87), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray88);
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray89), "[]");
        org.junit.Assert.assertNotNull(wildcardClass94);
    }

    @Test
    public void test3959() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3959");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = new double[][] {};
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[][] doubleArray5 = new double[][] {};
        double[][] doubleArray6 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray5);
        double[][] doubleArray7 = new double[][] {};
        double[][] doubleArray8 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray7);
        double[] doubleArray10 = new double[] { 1 };
        double[] doubleArray12 = new double[] { 1 };
        double[] doubleArray14 = new double[] { 1 };
        double[] doubleArray16 = new double[] { 1 };
        double[] doubleArray18 = new double[] { 1 };
        double[][] doubleArray19 = new double[][] { doubleArray10, doubleArray12, doubleArray14, doubleArray16, doubleArray18 };
        int[] intArray20 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray19, intArray20);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray7, intArray20);
        double[] doubleArray26 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray30 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray34 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray38 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray39 = new double[][] { doubleArray26, doubleArray30, doubleArray34, doubleArray38 };
        double[] doubleArray41 = new double[] { 1 };
        double[] doubleArray43 = new double[] { 1 };
        double[] doubleArray45 = new double[] { 1 };
        double[] doubleArray47 = new double[] { 1 };
        double[] doubleArray49 = new double[] { 1 };
        double[][] doubleArray50 = new double[][] { doubleArray41, doubleArray43, doubleArray45, doubleArray47, doubleArray49 };
        int[] intArray51 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray50, intArray51);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray39, intArray51);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray7, intArray51);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray6, intArray51);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray4, intArray51);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray1, intArray51);
        double[][] doubleArray58 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray59 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray58);
        double[][] doubleArray60 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray59);
        double[][] doubleArray61 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray60);
        double[][] doubleArray62 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray61);
        double[][] doubleArray63 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray62);
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[]");
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[]");
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertNotNull(doubleArray63);
    }

    @Test
    public void test3960() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3960");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[] doubleArray6 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray10 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray14 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray18 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray19 = new double[][] { doubleArray6, doubleArray10, doubleArray14, doubleArray18 };
        double[] doubleArray21 = new double[] { 1 };
        double[] doubleArray23 = new double[] { 1 };
        double[] doubleArray25 = new double[] { 1 };
        double[] doubleArray27 = new double[] { 1 };
        double[] doubleArray29 = new double[] { 1 };
        double[][] doubleArray30 = new double[][] { doubleArray21, doubleArray23, doubleArray25, doubleArray27, doubleArray29 };
        int[] intArray31 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray30, intArray31);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray19, intArray31);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray2, intArray31);
        double[][] doubleArray35 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray36 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray37 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray36);
        double[][] doubleArray38 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray37);
        double[][] doubleArray39 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray38);
        double[][] doubleArray40 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray38);
        java.lang.Class<?> wildcardClass41 = doubleArray38.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertNotNull(wildcardClass41);
    }

    @Test
    public void test3961() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3961");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray5 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray6 = new double[][] {};
        double[][] doubleArray7 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray6);
        double[][] doubleArray8 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray6);
        double[] doubleArray15 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray22 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray29 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray36 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray37 = new double[][] { doubleArray15, doubleArray22, doubleArray29, doubleArray36 };
        double[][] doubleArray38 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray37);
        double[][] doubleArray39 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray37);
        double[][] doubleArray40 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray37);
        double[][] doubleArray41 = new double[][] {};
        double[][] doubleArray42 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray41);
        int[] intArray43 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray42, intArray43);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray40, intArray43);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray8, intArray43);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray2, intArray43);
        double[][] doubleArray48 = null;
        double[] doubleArray55 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray62 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray69 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray76 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray77 = new double[][] { doubleArray55, doubleArray62, doubleArray69, doubleArray76 };
        double[][] doubleArray78 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray77);
        double[][] doubleArray79 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray77);
        double[][] doubleArray80 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray77);
        double[][] doubleArray81 = new double[][] {};
        double[][] doubleArray82 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray81);
        int[] intArray83 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray82, intArray83);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray80, intArray83);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray48, intArray83);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray2, intArray83);
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[]");
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertNotNull(doubleArray81);
        org.junit.Assert.assertNotNull(doubleArray82);
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray83), "[]");
    }

    @Test
    public void test3962() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3962");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[] doubleArray3 = new double[] { 1 };
        double[] doubleArray5 = new double[] { 1 };
        double[] doubleArray7 = new double[] { 1 };
        double[] doubleArray9 = new double[] { 1 };
        double[] doubleArray11 = new double[] { 1 };
        double[][] doubleArray12 = new double[][] { doubleArray3, doubleArray5, doubleArray7, doubleArray9, doubleArray11 };
        int[] intArray13 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray12, intArray13);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray0, intArray13);
        double[] doubleArray22 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray29 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray36 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray43 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray44 = new double[][] { doubleArray22, doubleArray29, doubleArray36, doubleArray43 };
        double[][] doubleArray45 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray44);
        double[][] doubleArray46 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray45);
        double[][] doubleArray47 = new double[][] {};
        double[][] doubleArray48 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray47);
        double[] doubleArray50 = new double[] { 1 };
        double[] doubleArray52 = new double[] { 1 };
        double[] doubleArray54 = new double[] { 1 };
        double[] doubleArray56 = new double[] { 1 };
        double[] doubleArray58 = new double[] { 1 };
        double[][] doubleArray59 = new double[][] { doubleArray50, doubleArray52, doubleArray54, doubleArray56, doubleArray58 };
        int[] intArray60 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray59, intArray60);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray47, intArray60);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray46, intArray60);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray0, intArray60);
        double[][] doubleArray65 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray66 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray65);
        double[][] doubleArray67 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray65);
        java.lang.Class<?> wildcardClass68 = doubleArray65.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[]");
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[]");
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertNotNull(wildcardClass68);
    }

    @Test
    public void test3963() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3963");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[][] doubleArray5 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray4);
        double[][] doubleArray6 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray4);
        double[][] doubleArray7 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray4);
        double[][] doubleArray8 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray7);
        double[][] doubleArray9 = new double[][] {};
        double[][] doubleArray10 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray9);
        double[] doubleArray12 = new double[] { 1 };
        double[] doubleArray14 = new double[] { 1 };
        double[] doubleArray16 = new double[] { 1 };
        double[] doubleArray18 = new double[] { 1 };
        double[] doubleArray20 = new double[] { 1 };
        double[][] doubleArray21 = new double[][] { doubleArray12, doubleArray14, doubleArray16, doubleArray18, doubleArray20 };
        int[] intArray22 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray21, intArray22);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray9, intArray22);
        double[][] doubleArray25 = new double[][] {};
        double[][] doubleArray26 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray25);
        double[][] doubleArray27 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray25);
        double[][] doubleArray28 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray25);
        double[] doubleArray35 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray42 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray49 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray56 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray57 = new double[][] { doubleArray35, doubleArray42, doubleArray49, doubleArray56 };
        double[][] doubleArray58 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray57);
        double[][] doubleArray59 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray58);
        double[][] doubleArray60 = new double[][] {};
        double[][] doubleArray61 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray60);
        double[] doubleArray63 = new double[] { 1 };
        double[] doubleArray65 = new double[] { 1 };
        double[] doubleArray67 = new double[] { 1 };
        double[] doubleArray69 = new double[] { 1 };
        double[] doubleArray71 = new double[] { 1 };
        double[][] doubleArray72 = new double[][] { doubleArray63, doubleArray65, doubleArray67, doubleArray69, doubleArray71 };
        int[] intArray73 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray72, intArray73);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray60, intArray73);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray59, intArray73);
        double[][] doubleArray77 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray59);
        double[] doubleArray79 = new double[] { 1 };
        double[] doubleArray81 = new double[] { 1 };
        double[] doubleArray83 = new double[] { 1 };
        double[] doubleArray85 = new double[] { 1 };
        double[] doubleArray87 = new double[] { 1 };
        double[][] doubleArray88 = new double[][] { doubleArray79, doubleArray81, doubleArray83, doubleArray85, doubleArray87 };
        int[] intArray89 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray88, intArray89);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray77, intArray89);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray25, intArray89);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray9, intArray89);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray8, intArray89);
        double[][] doubleArray95 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray8);
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray71), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[]");
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray79), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray81), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray83), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray85), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray87), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray88);
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray89), "[]");
        org.junit.Assert.assertNotNull(doubleArray95);
    }

    @Test
    public void test3964() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3964");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[][] doubleArray5 = new double[][] {};
        double[][] doubleArray6 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray5);
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray34 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray35 = new double[][] { doubleArray13, doubleArray20, doubleArray27, doubleArray34 };
        double[][] doubleArray36 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray35);
        double[][] doubleArray37 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray35);
        double[][] doubleArray38 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray35);
        double[][] doubleArray39 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray38);
        double[] doubleArray46 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray53 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray60 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray67 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray68 = new double[][] { doubleArray46, doubleArray53, doubleArray60, doubleArray67 };
        double[][] doubleArray69 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray68);
        double[] doubleArray71 = new double[] { 1 };
        double[] doubleArray73 = new double[] { 1 };
        double[] doubleArray75 = new double[] { 1 };
        double[] doubleArray77 = new double[] { 1 };
        double[] doubleArray79 = new double[] { 1 };
        double[][] doubleArray80 = new double[][] { doubleArray71, doubleArray73, doubleArray75, doubleArray77, doubleArray79 };
        int[] intArray81 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray80, intArray81);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray69, intArray81);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray39, intArray81);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray6, intArray81);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray4, intArray81);
        double[][] doubleArray87 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray4);
        double[][] doubleArray88 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray4);
        java.lang.Class<?> wildcardClass89 = doubleArray4.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray71), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray73), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray75), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray77), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray79), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray81), "[]");
        org.junit.Assert.assertNotNull(doubleArray87);
        org.junit.Assert.assertNotNull(doubleArray88);
        org.junit.Assert.assertNotNull(wildcardClass89);
    }

    @Test
    public void test3965() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3965");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[][] doubleArray5 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[][] doubleArray6 = new double[][] {};
        double[][] doubleArray7 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray6);
        int[] intArray8 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray7, intArray8);
        double[] doubleArray11 = new double[] { 1 };
        double[] doubleArray13 = new double[] { 1 };
        double[] doubleArray15 = new double[] { 1 };
        double[] doubleArray17 = new double[] { 1 };
        double[] doubleArray19 = new double[] { 1 };
        double[][] doubleArray20 = new double[][] { doubleArray11, doubleArray13, doubleArray15, doubleArray17, doubleArray19 };
        int[] intArray21 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray20, intArray21);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray7, intArray21);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray5, intArray21);
        java.lang.Class<?> wildcardClass25 = intArray21.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[]");
        org.junit.Assert.assertNotNull(wildcardClass25);
    }

    @Test
    public void test3966() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3966");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray30 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray29);
        double[][] doubleArray31 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray29);
        double[][] doubleArray32 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray31);
        double[][] doubleArray33 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray31);
        double[][] doubleArray34 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray31);
        double[][] doubleArray35 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray31);
        double[][] doubleArray36 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray31);
        java.lang.Class<?> wildcardClass37 = doubleArray36.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertNotNull(wildcardClass37);
    }

    @Test
    public void test3967() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3967");
        double[][] doubleArray0 = null;
        double[][] doubleArray1 = new double[][] {};
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[] doubleArray5 = new double[] { 1 };
        double[] doubleArray7 = new double[] { 1 };
        double[] doubleArray9 = new double[] { 1 };
        double[] doubleArray11 = new double[] { 1 };
        double[] doubleArray13 = new double[] { 1 };
        double[][] doubleArray14 = new double[][] { doubleArray5, doubleArray7, doubleArray9, doubleArray11, doubleArray13 };
        int[] intArray15 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray14, intArray15);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray3, intArray15);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray0, intArray15);
        java.lang.Class<?> wildcardClass19 = intArray15.getClass();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[]");
        org.junit.Assert.assertNotNull(wildcardClass19);
    }

    @Test
    public void test3968() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3968");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[] doubleArray31 = new double[] { 1 };
        double[] doubleArray33 = new double[] { 1 };
        double[] doubleArray35 = new double[] { 1 };
        double[] doubleArray37 = new double[] { 1 };
        double[] doubleArray39 = new double[] { 1 };
        double[][] doubleArray40 = new double[][] { doubleArray31, doubleArray33, doubleArray35, doubleArray37, doubleArray39 };
        int[] intArray41 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray40, intArray41);
        double[][] doubleArray43 = new double[][] {};
        double[][] doubleArray44 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray43);
        int[] intArray45 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray44, intArray45);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray40, intArray45);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray28, intArray45);
        double[][] doubleArray49 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray50 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray49);
        double[][] doubleArray51 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray50);
        double[][] doubleArray52 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray50);
        double[][] doubleArray53 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray50);
        double[][] doubleArray54 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray53);
        double[][] doubleArray55 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray54);
        double[][] doubleArray56 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray55);
        double[][] doubleArray57 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray56);
        double[][] doubleArray58 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray56);
        double[][] doubleArray59 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray58);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertNotNull(doubleArray59);
    }

    @Test
    public void test3969() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3969");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray30 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray29);
        double[][] doubleArray31 = new double[][] {};
        double[][] doubleArray32 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray31);
        double[] doubleArray34 = new double[] { 1 };
        double[] doubleArray36 = new double[] { 1 };
        double[] doubleArray38 = new double[] { 1 };
        double[] doubleArray40 = new double[] { 1 };
        double[] doubleArray42 = new double[] { 1 };
        double[][] doubleArray43 = new double[][] { doubleArray34, doubleArray36, doubleArray38, doubleArray40, doubleArray42 };
        int[] intArray44 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray43, intArray44);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray31, intArray44);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray30, intArray44);
        double[][] doubleArray48 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        double[][] doubleArray49 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        double[][] doubleArray50 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        double[][] doubleArray51 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray50);
        double[] doubleArray58 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray65 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray72 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray79 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray80 = new double[][] { doubleArray58, doubleArray65, doubleArray72, doubleArray79 };
        double[][] doubleArray81 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray80);
        double[][] doubleArray82 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray81);
        double[][] doubleArray83 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray81);
        double[][] doubleArray84 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray81);
        double[][] doubleArray85 = new double[][] {};
        double[][] doubleArray86 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray85);
        double[][] doubleArray87 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray85);
        double[][] doubleArray88 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray87);
        double[][] doubleArray89 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray87);
        double[][] doubleArray90 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray89);
        double[][] doubleArray91 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray90);
        double[][] doubleArray92 = new double[][] {};
        double[][] doubleArray93 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray92);
        int[] intArray94 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray93, intArray94);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray91, intArray94);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray81, intArray94);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray50, intArray94);
        java.lang.Class<?> wildcardClass99 = intArray94.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray79), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertNotNull(doubleArray81);
        org.junit.Assert.assertNotNull(doubleArray82);
        org.junit.Assert.assertNotNull(doubleArray83);
        org.junit.Assert.assertNotNull(doubleArray84);
        org.junit.Assert.assertNotNull(doubleArray85);
        org.junit.Assert.assertNotNull(doubleArray86);
        org.junit.Assert.assertNotNull(doubleArray87);
        org.junit.Assert.assertNotNull(doubleArray88);
        org.junit.Assert.assertNotNull(doubleArray89);
        org.junit.Assert.assertNotNull(doubleArray90);
        org.junit.Assert.assertNotNull(doubleArray91);
        org.junit.Assert.assertNotNull(doubleArray92);
        org.junit.Assert.assertNotNull(doubleArray93);
        org.junit.Assert.assertNotNull(intArray94);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray94), "[]");
        org.junit.Assert.assertNotNull(wildcardClass99);
    }

    @Test
    public void test3970() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3970");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray30 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray29);
        double[][] doubleArray31 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        double[][] doubleArray32 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        double[][] doubleArray33 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        double[][] doubleArray34 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        double[][] doubleArray35 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray34);
        double[][] doubleArray36 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray35);
        double[][] doubleArray37 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray35);
        double[][] doubleArray38 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray35);
        double[][] doubleArray39 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray35);
        double[][] doubleArray40 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray35);
        double[][] doubleArray41 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray35);
        double[][] doubleArray42 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray41);
        double[][] doubleArray43 = new double[][] {};
        double[][] doubleArray44 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray43);
        double[][] doubleArray45 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray43);
        double[][] doubleArray46 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray43);
        double[][] doubleArray47 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray43);
        double[][] doubleArray48 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray47);
        double[][] doubleArray49 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray47);
        double[][] doubleArray50 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray49);
        double[][] doubleArray51 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray50);
        double[][] doubleArray52 = new double[][] {};
        double[][] doubleArray53 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray52);
        double[][] doubleArray54 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray52);
        double[][] doubleArray55 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray54);
        double[][] doubleArray56 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray55);
        double[][] doubleArray57 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray56);
        double[][] doubleArray58 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray57);
        double[][] doubleArray59 = new double[][] {};
        double[][] doubleArray60 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray59);
        double[][] doubleArray61 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray59);
        double[][] doubleArray62 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray59);
        double[][] doubleArray63 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray59);
        double[][] doubleArray64 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray63);
        double[][] doubleArray65 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray63);
        double[][] doubleArray66 = new double[][] {};
        double[][] doubleArray67 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray66);
        int[] intArray68 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray67, intArray68);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray65, intArray68);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray58, intArray68);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray50, intArray68);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray42, intArray68);
        java.lang.Class<?> wildcardClass74 = doubleArray42.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[]");
        org.junit.Assert.assertNotNull(wildcardClass74);
    }

    @Test
    public void test3971() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3971");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[] doubleArray11 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray18 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray25 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray32 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray33 = new double[][] { doubleArray11, doubleArray18, doubleArray25, doubleArray32 };
        double[][] doubleArray34 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray33);
        double[][] doubleArray35 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray33);
        double[][] doubleArray36 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray33);
        double[][] doubleArray37 = new double[][] {};
        double[][] doubleArray38 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray37);
        int[] intArray39 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray38, intArray39);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray36, intArray39);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray4, intArray39);
        double[][] doubleArray43 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray4);
        double[][] doubleArray44 = null;
        double[][] doubleArray45 = new double[][] {};
        double[][] doubleArray46 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray45);
        double[][] doubleArray47 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray45);
        double[][] doubleArray48 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray45);
        double[] doubleArray55 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray62 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray69 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray76 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray77 = new double[][] { doubleArray55, doubleArray62, doubleArray69, doubleArray76 };
        double[][] doubleArray78 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray77);
        double[][] doubleArray79 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray77);
        double[][] doubleArray80 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray77);
        double[][] doubleArray81 = new double[][] {};
        double[][] doubleArray82 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray81);
        int[] intArray83 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray82, intArray83);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray80, intArray83);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray48, intArray83);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray44, intArray83);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray4, intArray83);
        double[][] doubleArray89 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray4);
        double[][] doubleArray90 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray4);
        double[][] doubleArray91 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray90);
        java.lang.Class<?> wildcardClass92 = doubleArray90.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertNotNull(doubleArray81);
        org.junit.Assert.assertNotNull(doubleArray82);
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray83), "[]");
        org.junit.Assert.assertNotNull(doubleArray89);
        org.junit.Assert.assertNotNull(doubleArray90);
        org.junit.Assert.assertNotNull(doubleArray91);
        org.junit.Assert.assertNotNull(wildcardClass92);
    }

    @Test
    public void test3972() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3972");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[] doubleArray36 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray43 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray50 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray57 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray58 = new double[][] { doubleArray36, doubleArray43, doubleArray50, doubleArray57 };
        double[][] doubleArray59 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray58);
        double[][] doubleArray60 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray58);
        double[][] doubleArray61 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray58);
        double[][] doubleArray62 = new double[][] {};
        double[][] doubleArray63 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray62);
        int[] intArray64 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray63, intArray64);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray61, intArray64);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray29, intArray64);
        java.lang.Class<?> wildcardClass68 = doubleArray29.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[]");
        org.junit.Assert.assertNotNull(wildcardClass68);
    }

    @Test
    public void test3973() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3973");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray30 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray31 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        double[][] doubleArray32 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        double[][] doubleArray33 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray32);
        double[][] doubleArray34 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray33);
        double[][] doubleArray35 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray34);
        double[][] doubleArray36 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray35);
        double[][] doubleArray37 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray35);
        double[][] doubleArray38 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray37);
        double[] doubleArray45 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray52 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray59 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray66 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray67 = new double[][] { doubleArray45, doubleArray52, doubleArray59, doubleArray66 };
        double[][] doubleArray68 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray67);
        double[][] doubleArray69 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray68);
        double[][] doubleArray70 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray68);
        double[][] doubleArray71 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray68);
        double[][] doubleArray72 = new double[][] {};
        double[][] doubleArray73 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray72);
        double[][] doubleArray74 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray72);
        double[][] doubleArray75 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray72);
        double[][] doubleArray76 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray75);
        double[] doubleArray78 = new double[] { 1 };
        double[] doubleArray80 = new double[] { 1 };
        double[] doubleArray82 = new double[] { 1 };
        double[] doubleArray84 = new double[] { 1 };
        double[] doubleArray86 = new double[] { 1 };
        double[][] doubleArray87 = new double[][] { doubleArray78, doubleArray80, doubleArray82, doubleArray84, doubleArray86 };
        int[] intArray88 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray87, intArray88);
        double[][] doubleArray90 = new double[][] {};
        double[][] doubleArray91 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray90);
        int[] intArray92 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray91, intArray92);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray87, intArray92);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray75, intArray92);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray71, intArray92);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray38, intArray92);
        java.lang.Class<?> wildcardClass98 = doubleArray38.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray66), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray78), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray80), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray82), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray84), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray86), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray87);
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray88), "[]");
        org.junit.Assert.assertNotNull(doubleArray90);
        org.junit.Assert.assertNotNull(doubleArray91);
        org.junit.Assert.assertNotNull(intArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray92), "[]");
        org.junit.Assert.assertNotNull(wildcardClass98);
    }

    @Test
    public void test3974() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3974");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray5 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray4);
        double[][] doubleArray6 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray5);
        double[][] doubleArray7 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray5);
        double[][] doubleArray8 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray7);
        double[][] doubleArray9 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray7);
        double[][] doubleArray10 = new double[][] {};
        double[][] doubleArray11 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray10);
        double[][] doubleArray12 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray10);
        double[][] doubleArray13 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray10);
        double[][] doubleArray14 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray10);
        double[][] doubleArray15 = new double[][] {};
        double[][] doubleArray16 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray15);
        double[][] doubleArray17 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray16);
        double[] doubleArray21 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray25 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray29 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray33 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray34 = new double[][] { doubleArray21, doubleArray25, doubleArray29, doubleArray33 };
        double[] doubleArray36 = new double[] { 1 };
        double[] doubleArray38 = new double[] { 1 };
        double[] doubleArray40 = new double[] { 1 };
        double[] doubleArray42 = new double[] { 1 };
        double[] doubleArray44 = new double[] { 1 };
        double[][] doubleArray45 = new double[][] { doubleArray36, doubleArray38, doubleArray40, doubleArray42, doubleArray44 };
        int[] intArray46 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray45, intArray46);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray34, intArray46);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray17, intArray46);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray10, intArray46);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray7, intArray46);
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[]");
    }

    @Test
    public void test3975() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3975");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[] doubleArray9 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray16 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray23 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray30 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray31 = new double[][] { doubleArray9, doubleArray16, doubleArray23, doubleArray30 };
        double[][] doubleArray32 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray31);
        double[] doubleArray34 = new double[] { 1 };
        double[] doubleArray36 = new double[] { 1 };
        double[] doubleArray38 = new double[] { 1 };
        double[] doubleArray40 = new double[] { 1 };
        double[] doubleArray42 = new double[] { 1 };
        double[][] doubleArray43 = new double[][] { doubleArray34, doubleArray36, doubleArray38, doubleArray40, doubleArray42 };
        int[] intArray44 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray43, intArray44);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray32, intArray44);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray1, intArray44);
        double[][] doubleArray48 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray49 = new double[][] {};
        double[][] doubleArray50 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray49);
        double[][] doubleArray51 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray49);
        double[][] doubleArray52 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray49);
        double[][] doubleArray53 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray49);
        double[][] doubleArray54 = new double[][] {};
        double[][] doubleArray55 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray54);
        double[][] doubleArray56 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray55);
        double[] doubleArray60 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray64 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray68 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray72 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray73 = new double[][] { doubleArray60, doubleArray64, doubleArray68, doubleArray72 };
        double[] doubleArray75 = new double[] { 1 };
        double[] doubleArray77 = new double[] { 1 };
        double[] doubleArray79 = new double[] { 1 };
        double[] doubleArray81 = new double[] { 1 };
        double[] doubleArray83 = new double[] { 1 };
        double[][] doubleArray84 = new double[][] { doubleArray75, doubleArray77, doubleArray79, doubleArray81, doubleArray83 };
        int[] intArray85 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray84, intArray85);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray73, intArray85);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray56, intArray85);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray49, intArray85);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray48, intArray85);
        double[][] doubleArray91 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray48);
        double[][] doubleArray92 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray91);
        double[][] doubleArray93 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray92);
        double[][] doubleArray94 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray93);
        int[] intArray95 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray94, intArray95);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray75), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray77), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray79), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray81), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray83), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray84);
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray85), "[]");
        org.junit.Assert.assertNotNull(doubleArray91);
        org.junit.Assert.assertNotNull(doubleArray92);
        org.junit.Assert.assertNotNull(doubleArray93);
        org.junit.Assert.assertNotNull(doubleArray94);
    }

    @Test
    public void test3976() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3976");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = new double[][] {};
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[] doubleArray5 = new double[] { 1 };
        double[] doubleArray7 = new double[] { 1 };
        double[] doubleArray9 = new double[] { 1 };
        double[] doubleArray11 = new double[] { 1 };
        double[] doubleArray13 = new double[] { 1 };
        double[][] doubleArray14 = new double[][] { doubleArray5, doubleArray7, doubleArray9, doubleArray11, doubleArray13 };
        int[] intArray15 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray14, intArray15);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray2, intArray15);
        double[] doubleArray21 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray25 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray29 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray33 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray34 = new double[][] { doubleArray21, doubleArray25, doubleArray29, doubleArray33 };
        double[] doubleArray36 = new double[] { 1 };
        double[] doubleArray38 = new double[] { 1 };
        double[] doubleArray40 = new double[] { 1 };
        double[] doubleArray42 = new double[] { 1 };
        double[] doubleArray44 = new double[] { 1 };
        double[][] doubleArray45 = new double[][] { doubleArray36, doubleArray38, doubleArray40, doubleArray42, doubleArray44 };
        int[] intArray46 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray45, intArray46);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray34, intArray46);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray2, intArray46);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray1, intArray46);
        double[][] doubleArray51 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray52 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray51);
        double[][] doubleArray53 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray52);
        double[][] doubleArray54 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray52);
        double[][] doubleArray55 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray54);
        double[][] doubleArray56 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray55);
        double[][] doubleArray57 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray56);
        double[][] doubleArray58 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray56);
        double[][] doubleArray59 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray56);
        java.lang.Class<?> wildcardClass60 = doubleArray56.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertNotNull(wildcardClass60);
    }

    @Test
    public void test3977() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3977");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray30 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray29);
        double[][] doubleArray31 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        double[][] doubleArray32 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        double[][] doubleArray33 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        double[][] doubleArray34 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        double[][] doubleArray35 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        double[][] doubleArray36 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        double[] doubleArray38 = new double[] { 1 };
        double[] doubleArray40 = new double[] { 1 };
        double[] doubleArray42 = new double[] { 1 };
        double[] doubleArray44 = new double[] { 1 };
        double[] doubleArray46 = new double[] { 1 };
        double[][] doubleArray47 = new double[][] { doubleArray38, doubleArray40, doubleArray42, doubleArray44, doubleArray46 };
        int[] intArray48 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray47, intArray48);
        double[][] doubleArray50 = new double[][] {};
        double[][] doubleArray51 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray50);
        int[] intArray52 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray51, intArray52);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray47, intArray52);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray30, intArray52);
        java.lang.Class<?> wildcardClass56 = doubleArray30.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[]");
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[]");
        org.junit.Assert.assertNotNull(wildcardClass56);
    }

    @Test
    public void test3978() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3978");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[][] doubleArray5 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[][] doubleArray6 = new double[][] {};
        double[][] doubleArray7 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray6);
        double[][] doubleArray8 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray7);
        double[] doubleArray15 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray22 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray29 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray36 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray37 = new double[][] { doubleArray15, doubleArray22, doubleArray29, doubleArray36 };
        double[][] doubleArray38 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray37);
        double[] doubleArray40 = new double[] { 1 };
        double[] doubleArray42 = new double[] { 1 };
        double[] doubleArray44 = new double[] { 1 };
        double[] doubleArray46 = new double[] { 1 };
        double[] doubleArray48 = new double[] { 1 };
        double[][] doubleArray49 = new double[][] { doubleArray40, doubleArray42, doubleArray44, doubleArray46, doubleArray48 };
        int[] intArray50 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray49, intArray50);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray38, intArray50);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray7, intArray50);
        double[] doubleArray57 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray61 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray65 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray69 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray70 = new double[][] { doubleArray57, doubleArray61, doubleArray65, doubleArray69 };
        double[] doubleArray72 = new double[] { 1 };
        double[] doubleArray74 = new double[] { 1 };
        double[] doubleArray76 = new double[] { 1 };
        double[] doubleArray78 = new double[] { 1 };
        double[] doubleArray80 = new double[] { 1 };
        double[][] doubleArray81 = new double[][] { doubleArray72, doubleArray74, doubleArray76, doubleArray78, doubleArray80 };
        int[] intArray82 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray81, intArray82);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray70, intArray82);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray7, intArray82);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray3, intArray82);
        double[][] doubleArray87 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[][] doubleArray88 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[][] doubleArray89 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray88);
        double[][] doubleArray90 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray88);
        double[][] doubleArray91 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray88);
        double[][] doubleArray92 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray88);
        double[][] doubleArray93 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray92);
        java.lang.Class<?> wildcardClass94 = doubleArray92.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[]");
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray74), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray78), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray80), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray81);
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[]");
        org.junit.Assert.assertNotNull(doubleArray87);
        org.junit.Assert.assertNotNull(doubleArray88);
        org.junit.Assert.assertNotNull(doubleArray89);
        org.junit.Assert.assertNotNull(doubleArray90);
        org.junit.Assert.assertNotNull(doubleArray91);
        org.junit.Assert.assertNotNull(doubleArray92);
        org.junit.Assert.assertNotNull(doubleArray93);
        org.junit.Assert.assertNotNull(wildcardClass94);
    }

    @Test
    public void test3979() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3979");
        double[][] doubleArray0 = null;
        double[][] doubleArray1 = new double[][] {};
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[][] doubleArray5 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[][] doubleArray6 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray5);
        double[][] doubleArray7 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray6);
        double[][] doubleArray8 = new double[][] {};
        double[][] doubleArray9 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray8);
        double[][] doubleArray10 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray9);
        double[][] doubleArray11 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray9);
        double[][] doubleArray12 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray9);
        double[][] doubleArray13 = new double[][] {};
        double[][] doubleArray14 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray13);
        double[][] doubleArray15 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray13);
        double[][] doubleArray16 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray13);
        double[][] doubleArray17 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray13);
        double[][] doubleArray18 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray17);
        double[][] doubleArray19 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray17);
        double[][] doubleArray20 = new double[][] {};
        double[][] doubleArray21 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray20);
        int[] intArray22 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray21, intArray22);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray19, intArray22);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray9, intArray22);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray7, intArray22);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray0, intArray22);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[]");
    }

    @Test
    public void test3980() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3980");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[] doubleArray3 = new double[] { 1 };
        double[] doubleArray5 = new double[] { 1 };
        double[] doubleArray7 = new double[] { 1 };
        double[] doubleArray9 = new double[] { 1 };
        double[] doubleArray11 = new double[] { 1 };
        double[][] doubleArray12 = new double[][] { doubleArray3, doubleArray5, doubleArray7, doubleArray9, doubleArray11 };
        int[] intArray13 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray12, intArray13);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray0, intArray13);
        double[] doubleArray19 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray23 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray27 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray31 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray32 = new double[][] { doubleArray19, doubleArray23, doubleArray27, doubleArray31 };
        double[] doubleArray34 = new double[] { 1 };
        double[] doubleArray36 = new double[] { 1 };
        double[] doubleArray38 = new double[] { 1 };
        double[] doubleArray40 = new double[] { 1 };
        double[] doubleArray42 = new double[] { 1 };
        double[][] doubleArray43 = new double[][] { doubleArray34, doubleArray36, doubleArray38, doubleArray40, doubleArray42 };
        int[] intArray44 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray43, intArray44);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray32, intArray44);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray0, intArray44);
        double[] doubleArray49 = new double[] { 1 };
        double[] doubleArray51 = new double[] { 1 };
        double[] doubleArray53 = new double[] { 1 };
        double[] doubleArray55 = new double[] { 1 };
        double[] doubleArray57 = new double[] { 1 };
        double[][] doubleArray58 = new double[][] { doubleArray49, doubleArray51, doubleArray53, doubleArray55, doubleArray57 };
        int[] intArray59 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray58, intArray59);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray0, intArray59);
        double[][] doubleArray62 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray63 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray64 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray65 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray64);
        double[][] doubleArray66 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray65);
        double[][] doubleArray67 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray66);
        double[][] doubleArray68 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray66);
        double[][] doubleArray69 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray66);
        java.lang.Class<?> wildcardClass70 = doubleArray66.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[]");
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertNotNull(wildcardClass70);
    }

    @Test
    public void test3981() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3981");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray30 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray29);
        double[][] doubleArray31 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        double[][] doubleArray32 = new double[][] {};
        double[][] doubleArray33 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray32);
        double[][] doubleArray34 = new double[][] {};
        double[][] doubleArray35 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray34);
        double[] doubleArray37 = new double[] { 1 };
        double[] doubleArray39 = new double[] { 1 };
        double[] doubleArray41 = new double[] { 1 };
        double[] doubleArray43 = new double[] { 1 };
        double[] doubleArray45 = new double[] { 1 };
        double[][] doubleArray46 = new double[][] { doubleArray37, doubleArray39, doubleArray41, doubleArray43, doubleArray45 };
        int[] intArray47 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray46, intArray47);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray34, intArray47);
        double[] doubleArray53 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray57 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray61 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray65 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray66 = new double[][] { doubleArray53, doubleArray57, doubleArray61, doubleArray65 };
        double[] doubleArray68 = new double[] { 1 };
        double[] doubleArray70 = new double[] { 1 };
        double[] doubleArray72 = new double[] { 1 };
        double[] doubleArray74 = new double[] { 1 };
        double[] doubleArray76 = new double[] { 1 };
        double[][] doubleArray77 = new double[][] { doubleArray68, doubleArray70, doubleArray72, doubleArray74, doubleArray76 };
        int[] intArray78 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray77, intArray78);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray66, intArray78);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray34, intArray78);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray33, intArray78);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray30, intArray78);
        double[][] doubleArray84 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        double[][] doubleArray85 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        double[][] doubleArray86 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray85);
        double[][] doubleArray87 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray86);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[]");
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray70), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray74), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[]");
        org.junit.Assert.assertNotNull(doubleArray84);
        org.junit.Assert.assertNotNull(doubleArray85);
        org.junit.Assert.assertNotNull(doubleArray86);
        org.junit.Assert.assertNotNull(doubleArray87);
    }

    @Test
    public void test3982() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3982");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[] doubleArray11 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray18 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray25 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray32 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray33 = new double[][] { doubleArray11, doubleArray18, doubleArray25, doubleArray32 };
        double[][] doubleArray34 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray33);
        double[][] doubleArray35 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray34);
        double[][] doubleArray36 = new double[][] {};
        double[][] doubleArray37 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray36);
        double[] doubleArray39 = new double[] { 1 };
        double[] doubleArray41 = new double[] { 1 };
        double[] doubleArray43 = new double[] { 1 };
        double[] doubleArray45 = new double[] { 1 };
        double[] doubleArray47 = new double[] { 1 };
        double[][] doubleArray48 = new double[][] { doubleArray39, doubleArray41, doubleArray43, doubleArray45, doubleArray47 };
        int[] intArray49 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray48, intArray49);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray36, intArray49);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray35, intArray49);
        double[][] doubleArray53 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray35);
        double[] doubleArray55 = new double[] { 1 };
        double[] doubleArray57 = new double[] { 1 };
        double[] doubleArray59 = new double[] { 1 };
        double[] doubleArray61 = new double[] { 1 };
        double[] doubleArray63 = new double[] { 1 };
        double[][] doubleArray64 = new double[][] { doubleArray55, doubleArray57, doubleArray59, doubleArray61, doubleArray63 };
        int[] intArray65 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray64, intArray65);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray53, intArray65);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray3, intArray65);
        double[][] doubleArray69 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[][] doubleArray70 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray69);
        double[][] doubleArray71 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray70);
        double[][] doubleArray72 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray70);
        double[][] doubleArray73 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray70);
        double[][] doubleArray74 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray73);
        double[][] doubleArray75 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray73);
        java.lang.Class<?> wildcardClass76 = doubleArray75.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[]");
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[]");
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertNotNull(wildcardClass76);
    }

    @Test
    public void test3983() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3983");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[] doubleArray11 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray18 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray25 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray32 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray33 = new double[][] { doubleArray11, doubleArray18, doubleArray25, doubleArray32 };
        double[][] doubleArray34 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray33);
        double[][] doubleArray35 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray34);
        double[][] doubleArray36 = new double[][] {};
        double[][] doubleArray37 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray36);
        double[] doubleArray39 = new double[] { 1 };
        double[] doubleArray41 = new double[] { 1 };
        double[] doubleArray43 = new double[] { 1 };
        double[] doubleArray45 = new double[] { 1 };
        double[] doubleArray47 = new double[] { 1 };
        double[][] doubleArray48 = new double[][] { doubleArray39, doubleArray41, doubleArray43, doubleArray45, doubleArray47 };
        int[] intArray49 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray48, intArray49);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray36, intArray49);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray35, intArray49);
        double[][] doubleArray53 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray35);
        double[] doubleArray55 = new double[] { 1 };
        double[] doubleArray57 = new double[] { 1 };
        double[] doubleArray59 = new double[] { 1 };
        double[] doubleArray61 = new double[] { 1 };
        double[] doubleArray63 = new double[] { 1 };
        double[][] doubleArray64 = new double[][] { doubleArray55, doubleArray57, doubleArray59, doubleArray61, doubleArray63 };
        int[] intArray65 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray64, intArray65);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray53, intArray65);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray3, intArray65);
        double[][] doubleArray69 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[][] doubleArray70 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[][] doubleArray71 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray70);
        double[][] doubleArray72 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray70);
        java.lang.Class<?> wildcardClass73 = doubleArray72.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[]");
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[]");
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertNotNull(wildcardClass73);
    }

    @Test
    public void test3984() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3984");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray4 = new double[][] {};
        double[][] doubleArray5 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray4);
        double[] doubleArray7 = new double[] { 1 };
        double[] doubleArray9 = new double[] { 1 };
        double[] doubleArray11 = new double[] { 1 };
        double[] doubleArray13 = new double[] { 1 };
        double[] doubleArray15 = new double[] { 1 };
        double[][] doubleArray16 = new double[][] { doubleArray7, doubleArray9, doubleArray11, doubleArray13, doubleArray15 };
        int[] intArray17 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray16, intArray17);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray4, intArray17);
        double[] doubleArray23 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray27 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray31 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray35 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray36 = new double[][] { doubleArray23, doubleArray27, doubleArray31, doubleArray35 };
        double[] doubleArray38 = new double[] { 1 };
        double[] doubleArray40 = new double[] { 1 };
        double[] doubleArray42 = new double[] { 1 };
        double[] doubleArray44 = new double[] { 1 };
        double[] doubleArray46 = new double[] { 1 };
        double[][] doubleArray47 = new double[][] { doubleArray38, doubleArray40, doubleArray42, doubleArray44, doubleArray46 };
        int[] intArray48 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray47, intArray48);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray36, intArray48);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray4, intArray48);
        double[] doubleArray53 = new double[] { 1 };
        double[] doubleArray55 = new double[] { 1 };
        double[] doubleArray57 = new double[] { 1 };
        double[] doubleArray59 = new double[] { 1 };
        double[] doubleArray61 = new double[] { 1 };
        double[][] doubleArray62 = new double[][] { doubleArray53, doubleArray55, doubleArray57, doubleArray59, doubleArray61 };
        int[] intArray63 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray62, intArray63);
        double[][] doubleArray65 = new double[][] {};
        double[][] doubleArray66 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray65);
        int[] intArray67 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray66, intArray67);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray62, intArray67);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray4, intArray67);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray3, intArray67);
        double[][] doubleArray72 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[][] doubleArray73 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[][] doubleArray74 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray73);
        double[][] doubleArray75 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray73);
        double[][] doubleArray76 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray75);
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[]");
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[]");
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[]");
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertNotNull(doubleArray76);
    }

    @Test
    public void test3985() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3985");
        double[][] doubleArray0 = null;
        double[][] doubleArray1 = null;
        double[][] doubleArray2 = new double[][] {};
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[][] doubleArray5 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray4);
        double[][] doubleArray6 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray4);
        double[][] doubleArray7 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray4);
        double[][] doubleArray8 = new double[][] {};
        double[][] doubleArray9 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray8);
        double[][] doubleArray10 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray8);
        double[] doubleArray17 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray24 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray31 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray38 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray39 = new double[][] { doubleArray17, doubleArray24, doubleArray31, doubleArray38 };
        double[][] doubleArray40 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray39);
        double[][] doubleArray41 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray39);
        double[][] doubleArray42 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray39);
        double[][] doubleArray43 = new double[][] {};
        double[][] doubleArray44 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray43);
        int[] intArray45 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray44, intArray45);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray42, intArray45);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray10, intArray45);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray4, intArray45);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray1, intArray45);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray0, intArray45);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[]");
    }

    @Test
    public void test3986() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3986");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray5 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray4);
        double[][] doubleArray6 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray4);
        double[][] doubleArray7 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray6);
        double[][] doubleArray8 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray6);
        double[][] doubleArray9 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray6);
        double[][] doubleArray10 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray6);
        double[][] doubleArray11 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray6);
        double[][] doubleArray12 = new double[][] {};
        double[][] doubleArray13 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray12);
        double[][] doubleArray14 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray12);
        double[][] doubleArray15 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray14);
        double[][] doubleArray16 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray15);
        double[][] doubleArray17 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray16);
        double[][] doubleArray18 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray17);
        double[][] doubleArray19 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray17);
        double[][] doubleArray20 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray19);
        double[][] doubleArray21 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray19);
        double[][] doubleArray22 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray19);
        double[][] doubleArray23 = new double[][] {};
        double[][] doubleArray24 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray23);
        double[][] doubleArray25 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray24);
        double[] doubleArray29 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray33 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray37 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray41 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray42 = new double[][] { doubleArray29, doubleArray33, doubleArray37, doubleArray41 };
        double[] doubleArray44 = new double[] { 1 };
        double[] doubleArray46 = new double[] { 1 };
        double[] doubleArray48 = new double[] { 1 };
        double[] doubleArray50 = new double[] { 1 };
        double[] doubleArray52 = new double[] { 1 };
        double[][] doubleArray53 = new double[][] { doubleArray44, doubleArray46, doubleArray48, doubleArray50, doubleArray52 };
        int[] intArray54 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray53, intArray54);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray42, intArray54);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray25, intArray54);
        double[][] doubleArray58 = null;
        double[][] doubleArray59 = new double[][] {};
        double[][] doubleArray60 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray59);
        double[][] doubleArray61 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray60);
        double[] doubleArray65 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray69 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray73 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray77 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray78 = new double[][] { doubleArray65, doubleArray69, doubleArray73, doubleArray77 };
        double[] doubleArray80 = new double[] { 1 };
        double[] doubleArray82 = new double[] { 1 };
        double[] doubleArray84 = new double[] { 1 };
        double[] doubleArray86 = new double[] { 1 };
        double[] doubleArray88 = new double[] { 1 };
        double[][] doubleArray89 = new double[][] { doubleArray80, doubleArray82, doubleArray84, doubleArray86, doubleArray88 };
        int[] intArray90 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray89, intArray90);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray78, intArray90);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray61, intArray90);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray58, intArray90);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray25, intArray90);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray22, intArray90);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray11, intArray90);
        double[][] doubleArray98 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray11);
        double[][] doubleArray99 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray11);
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[]");
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray73), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray77), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray80), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray82), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray84), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray86), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray88), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray89);
        org.junit.Assert.assertNotNull(intArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray90), "[]");
        org.junit.Assert.assertNotNull(doubleArray98);
        org.junit.Assert.assertNotNull(doubleArray99);
    }

    @Test
    public void test3987() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3987");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[] doubleArray31 = new double[] { 1 };
        double[] doubleArray33 = new double[] { 1 };
        double[] doubleArray35 = new double[] { 1 };
        double[] doubleArray37 = new double[] { 1 };
        double[] doubleArray39 = new double[] { 1 };
        double[][] doubleArray40 = new double[][] { doubleArray31, doubleArray33, doubleArray35, doubleArray37, doubleArray39 };
        int[] intArray41 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray40, intArray41);
        double[][] doubleArray43 = new double[][] {};
        double[][] doubleArray44 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray43);
        int[] intArray45 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray44, intArray45);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray40, intArray45);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray28, intArray45);
        double[][] doubleArray49 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray50 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray51 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray50);
        double[][] doubleArray52 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray51);
        double[][] doubleArray53 = new double[][] {};
        double[][] doubleArray54 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray53);
        double[][] doubleArray55 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray53);
        double[][] doubleArray56 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray55);
        double[][] doubleArray57 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray56);
        double[][] doubleArray58 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray57);
        double[][] doubleArray59 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray58);
        double[][] doubleArray60 = new double[][] {};
        double[][] doubleArray61 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray60);
        double[][] doubleArray62 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray60);
        double[][] doubleArray63 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray60);
        double[][] doubleArray64 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray60);
        double[][] doubleArray65 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray64);
        double[][] doubleArray66 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray64);
        double[][] doubleArray67 = new double[][] {};
        double[][] doubleArray68 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray67);
        int[] intArray69 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray68, intArray69);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray66, intArray69);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray59, intArray69);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray52, intArray69);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[]");
    }

    @Test
    public void test3988() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3988");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[] doubleArray3 = new double[] { 1 };
        double[] doubleArray5 = new double[] { 1 };
        double[] doubleArray7 = new double[] { 1 };
        double[] doubleArray9 = new double[] { 1 };
        double[] doubleArray11 = new double[] { 1 };
        double[][] doubleArray12 = new double[][] { doubleArray3, doubleArray5, doubleArray7, doubleArray9, doubleArray11 };
        int[] intArray13 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray12, intArray13);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray0, intArray13);
        double[] doubleArray19 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray23 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray27 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray31 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray32 = new double[][] { doubleArray19, doubleArray23, doubleArray27, doubleArray31 };
        double[] doubleArray34 = new double[] { 1 };
        double[] doubleArray36 = new double[] { 1 };
        double[] doubleArray38 = new double[] { 1 };
        double[] doubleArray40 = new double[] { 1 };
        double[] doubleArray42 = new double[] { 1 };
        double[][] doubleArray43 = new double[][] { doubleArray34, doubleArray36, doubleArray38, doubleArray40, doubleArray42 };
        int[] intArray44 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray43, intArray44);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray32, intArray44);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray0, intArray44);
        double[] doubleArray49 = new double[] { 1 };
        double[] doubleArray51 = new double[] { 1 };
        double[] doubleArray53 = new double[] { 1 };
        double[] doubleArray55 = new double[] { 1 };
        double[] doubleArray57 = new double[] { 1 };
        double[][] doubleArray58 = new double[][] { doubleArray49, doubleArray51, doubleArray53, doubleArray55, doubleArray57 };
        int[] intArray59 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray58, intArray59);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray0, intArray59);
        double[][] doubleArray62 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray63 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray62);
        double[][] doubleArray64 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray62);
        double[][] doubleArray65 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray62);
        double[][] doubleArray66 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray65);
        java.lang.Class<?> wildcardClass67 = doubleArray65.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[]");
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertNotNull(wildcardClass67);
    }

    @Test
    public void test3989() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3989");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray5 = new double[][] {};
        double[][] doubleArray6 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray5);
        double[][] doubleArray7 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray6);
        double[] doubleArray11 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray15 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray19 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray23 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray24 = new double[][] { doubleArray11, doubleArray15, doubleArray19, doubleArray23 };
        double[] doubleArray26 = new double[] { 1 };
        double[] doubleArray28 = new double[] { 1 };
        double[] doubleArray30 = new double[] { 1 };
        double[] doubleArray32 = new double[] { 1 };
        double[] doubleArray34 = new double[] { 1 };
        double[][] doubleArray35 = new double[][] { doubleArray26, doubleArray28, doubleArray30, doubleArray32, doubleArray34 };
        int[] intArray36 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray35, intArray36);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray24, intArray36);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray7, intArray36);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray0, intArray36);
        double[][] doubleArray41 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray42 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray41);
        double[][] doubleArray43 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray41);
        double[][] doubleArray44 = new double[][] {};
        double[][] doubleArray45 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray44);
        double[][] doubleArray46 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray44);
        double[][] doubleArray47 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray46);
        double[][] doubleArray48 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray47);
        double[][] doubleArray49 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray48);
        double[][] doubleArray50 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray48);
        double[][] doubleArray51 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray50);
        double[] doubleArray58 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray65 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray72 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray79 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray80 = new double[][] { doubleArray58, doubleArray65, doubleArray72, doubleArray79 };
        double[][] doubleArray81 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray80);
        double[][] doubleArray82 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray80);
        double[][] doubleArray83 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray80);
        double[][] doubleArray84 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray83);
        double[][] doubleArray85 = new double[][] {};
        double[][] doubleArray86 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray85);
        int[] intArray87 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray86, intArray87);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray84, intArray87);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray50, intArray87);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray43, intArray87);
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray79), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertNotNull(doubleArray81);
        org.junit.Assert.assertNotNull(doubleArray82);
        org.junit.Assert.assertNotNull(doubleArray83);
        org.junit.Assert.assertNotNull(doubleArray84);
        org.junit.Assert.assertNotNull(doubleArray85);
        org.junit.Assert.assertNotNull(doubleArray86);
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray87), "[]");
    }

    @Test
    public void test3990() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3990");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[] doubleArray3 = new double[] { 1 };
        double[] doubleArray5 = new double[] { 1 };
        double[] doubleArray7 = new double[] { 1 };
        double[] doubleArray9 = new double[] { 1 };
        double[] doubleArray11 = new double[] { 1 };
        double[][] doubleArray12 = new double[][] { doubleArray3, doubleArray5, doubleArray7, doubleArray9, doubleArray11 };
        int[] intArray13 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray12, intArray13);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray0, intArray13);
        double[] doubleArray19 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray23 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray27 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray31 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray32 = new double[][] { doubleArray19, doubleArray23, doubleArray27, doubleArray31 };
        double[] doubleArray34 = new double[] { 1 };
        double[] doubleArray36 = new double[] { 1 };
        double[] doubleArray38 = new double[] { 1 };
        double[] doubleArray40 = new double[] { 1 };
        double[] doubleArray42 = new double[] { 1 };
        double[][] doubleArray43 = new double[][] { doubleArray34, doubleArray36, doubleArray38, doubleArray40, doubleArray42 };
        int[] intArray44 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray43, intArray44);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray32, intArray44);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray0, intArray44);
        double[] doubleArray49 = new double[] { 1 };
        double[] doubleArray51 = new double[] { 1 };
        double[] doubleArray53 = new double[] { 1 };
        double[] doubleArray55 = new double[] { 1 };
        double[] doubleArray57 = new double[] { 1 };
        double[][] doubleArray58 = new double[][] { doubleArray49, doubleArray51, doubleArray53, doubleArray55, doubleArray57 };
        int[] intArray59 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray58, intArray59);
        double[][] doubleArray61 = new double[][] {};
        double[][] doubleArray62 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray61);
        int[] intArray63 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray62, intArray63);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray58, intArray63);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray0, intArray63);
        double[][] doubleArray67 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray68 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray69 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray70 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray69);
        double[][] doubleArray71 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray69);
        double[][] doubleArray72 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray71);
        java.lang.Class<?> wildcardClass73 = doubleArray71.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[]");
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertNotNull(wildcardClass73);
    }

    @Test
    public void test3991() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3991");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[] doubleArray6 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray10 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray14 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray18 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray19 = new double[][] { doubleArray6, doubleArray10, doubleArray14, doubleArray18 };
        double[] doubleArray21 = new double[] { 1 };
        double[] doubleArray23 = new double[] { 1 };
        double[] doubleArray25 = new double[] { 1 };
        double[] doubleArray27 = new double[] { 1 };
        double[] doubleArray29 = new double[] { 1 };
        double[][] doubleArray30 = new double[][] { doubleArray21, doubleArray23, doubleArray25, doubleArray27, doubleArray29 };
        int[] intArray31 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray30, intArray31);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray19, intArray31);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray1, intArray31);
        double[][] doubleArray35 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray36 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray35);
        java.lang.Class<?> wildcardClass37 = doubleArray36.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertNotNull(wildcardClass37);
    }

    @Test
    public void test3992() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3992");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[] doubleArray31 = new double[] { 1 };
        double[] doubleArray33 = new double[] { 1 };
        double[] doubleArray35 = new double[] { 1 };
        double[] doubleArray37 = new double[] { 1 };
        double[] doubleArray39 = new double[] { 1 };
        double[][] doubleArray40 = new double[][] { doubleArray31, doubleArray33, doubleArray35, doubleArray37, doubleArray39 };
        int[] intArray41 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray40, intArray41);
        double[][] doubleArray43 = new double[][] {};
        double[][] doubleArray44 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray43);
        int[] intArray45 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray44, intArray45);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray40, intArray45);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray28, intArray45);
        double[][] doubleArray49 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray50 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray49);
        double[][] doubleArray51 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray50);
        double[][] doubleArray52 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray51);
        double[][] doubleArray53 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray52);
        double[][] doubleArray54 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray52);
        double[][] doubleArray55 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray54);
        double[][] doubleArray56 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray54);
        double[][] doubleArray57 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray54);
        double[][] doubleArray58 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray57);
        double[][] doubleArray59 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray58);
        double[][] doubleArray60 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray59);
        double[][] doubleArray61 = null;
        double[] doubleArray63 = new double[] { 1 };
        double[] doubleArray65 = new double[] { 1 };
        double[] doubleArray67 = new double[] { 1 };
        double[] doubleArray69 = new double[] { 1 };
        double[] doubleArray71 = new double[] { 1 };
        double[][] doubleArray72 = new double[][] { doubleArray63, doubleArray65, doubleArray67, doubleArray69, doubleArray71 };
        int[] intArray73 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray72, intArray73);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray61, intArray73);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray59, intArray73);
        java.lang.Class<?> wildcardClass77 = doubleArray59.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray71), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[]");
        org.junit.Assert.assertNotNull(wildcardClass77);
    }

    @Test
    public void test3993() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3993");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[] doubleArray31 = new double[] { 1 };
        double[] doubleArray33 = new double[] { 1 };
        double[] doubleArray35 = new double[] { 1 };
        double[] doubleArray37 = new double[] { 1 };
        double[] doubleArray39 = new double[] { 1 };
        double[][] doubleArray40 = new double[][] { doubleArray31, doubleArray33, doubleArray35, doubleArray37, doubleArray39 };
        int[] intArray41 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray40, intArray41);
        double[][] doubleArray43 = new double[][] {};
        double[][] doubleArray44 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray43);
        int[] intArray45 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray44, intArray45);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray40, intArray45);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray28, intArray45);
        double[][] doubleArray49 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray50 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray51 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray50);
        double[][] doubleArray52 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray50);
        double[][] doubleArray53 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray52);
        double[][] doubleArray54 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray53);
        double[][] doubleArray55 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray53);
        double[][] doubleArray56 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray53);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertNotNull(doubleArray56);
    }

    @Test
    public void test3994() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3994");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray30 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray29);
        double[][] doubleArray31 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        double[][] doubleArray32 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        double[][] doubleArray33 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        double[][] doubleArray34 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray33);
        double[][] doubleArray35 = new double[][] {};
        double[][] doubleArray36 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray35);
        double[][] doubleArray37 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray36);
        double[][] doubleArray38 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray37);
        double[][] doubleArray39 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray37);
        double[] doubleArray46 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray53 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray60 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray67 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray68 = new double[][] { doubleArray46, doubleArray53, doubleArray60, doubleArray67 };
        double[][] doubleArray69 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray68);
        double[][] doubleArray70 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray68);
        double[][] doubleArray71 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray68);
        double[][] doubleArray72 = new double[][] {};
        double[][] doubleArray73 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray72);
        int[] intArray74 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray73, intArray74);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray71, intArray74);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray39, intArray74);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray33, intArray74);
        double[][] doubleArray79 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray33);
        double[][] doubleArray80 = new double[][] {};
        double[][] doubleArray81 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray80);
        int[] intArray82 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray81, intArray82);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray79, intArray82);
        java.lang.Class<?> wildcardClass85 = doubleArray79.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[]");
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertNotNull(doubleArray81);
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[]");
        org.junit.Assert.assertNotNull(wildcardClass85);
    }

    @Test
    public void test3995() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3995");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[][] doubleArray5 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray4);
        double[][] doubleArray6 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray5);
        double[][] doubleArray7 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray6);
        double[][] doubleArray8 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray7);
        double[][] doubleArray9 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray7);
        double[][] doubleArray10 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray9);
        double[][] doubleArray11 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray10);
        java.lang.Class<?> wildcardClass12 = doubleArray11.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertNotNull(wildcardClass12);
    }

    @Test
    public void test3996() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3996");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray3 = new double[][] {};
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[][] doubleArray5 = new double[][] {};
        double[][] doubleArray6 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray5);
        double[] doubleArray8 = new double[] { 1 };
        double[] doubleArray10 = new double[] { 1 };
        double[] doubleArray12 = new double[] { 1 };
        double[] doubleArray14 = new double[] { 1 };
        double[] doubleArray16 = new double[] { 1 };
        double[][] doubleArray17 = new double[][] { doubleArray8, doubleArray10, doubleArray12, doubleArray14, doubleArray16 };
        int[] intArray18 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray17, intArray18);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray5, intArray18);
        double[] doubleArray24 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray28 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray32 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray36 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray37 = new double[][] { doubleArray24, doubleArray28, doubleArray32, doubleArray36 };
        double[] doubleArray39 = new double[] { 1 };
        double[] doubleArray41 = new double[] { 1 };
        double[] doubleArray43 = new double[] { 1 };
        double[] doubleArray45 = new double[] { 1 };
        double[] doubleArray47 = new double[] { 1 };
        double[][] doubleArray48 = new double[][] { doubleArray39, doubleArray41, doubleArray43, doubleArray45, doubleArray47 };
        int[] intArray49 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray48, intArray49);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray37, intArray49);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray5, intArray49);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray4, intArray49);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray2, intArray49);
        double[][] doubleArray55 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray56 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray55);
        double[][] doubleArray57 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray55);
        double[][] doubleArray58 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray57);
        double[][] doubleArray59 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray58);
        double[][] doubleArray60 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray59);
        double[][] doubleArray61 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray59);
        double[][] doubleArray62 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray61);
        double[][] doubleArray63 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray61);
        double[][] doubleArray64 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray61);
        double[][] doubleArray65 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray61);
        java.lang.Class<?> wildcardClass66 = doubleArray65.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[]");
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[]");
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertNotNull(wildcardClass66);
    }

    @Test
    public void test3997() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3997");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[] doubleArray4 = new double[] { 1 };
        double[] doubleArray6 = new double[] { 1 };
        double[] doubleArray8 = new double[] { 1 };
        double[] doubleArray10 = new double[] { 1 };
        double[] doubleArray12 = new double[] { 1 };
        double[][] doubleArray13 = new double[][] { doubleArray4, doubleArray6, doubleArray8, doubleArray10, doubleArray12 };
        int[] intArray14 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray13, intArray14);
        double[] doubleArray22 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray29 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray36 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray43 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray44 = new double[][] { doubleArray22, doubleArray29, doubleArray36, doubleArray43 };
        double[][] doubleArray45 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray44);
        double[] doubleArray47 = new double[] { 1 };
        double[] doubleArray49 = new double[] { 1 };
        double[] doubleArray51 = new double[] { 1 };
        double[] doubleArray53 = new double[] { 1 };
        double[] doubleArray55 = new double[] { 1 };
        double[][] doubleArray56 = new double[][] { doubleArray47, doubleArray49, doubleArray51, doubleArray53, doubleArray55 };
        int[] intArray57 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray56, intArray57);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray45, intArray57);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray13, intArray57);
        double[] doubleArray62 = new double[] { 1 };
        double[] doubleArray64 = new double[] { 1 };
        double[] doubleArray66 = new double[] { 1 };
        double[] doubleArray68 = new double[] { 1 };
        double[] doubleArray70 = new double[] { 1 };
        double[][] doubleArray71 = new double[][] { doubleArray62, doubleArray64, doubleArray66, doubleArray68, doubleArray70 };
        int[] intArray72 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray71, intArray72);
        double[][] doubleArray74 = new double[][] {};
        double[][] doubleArray75 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray74);
        int[] intArray76 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray75, intArray76);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray71, intArray76);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray13, intArray76);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray2, intArray76);
        double[][] doubleArray81 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray82 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        int[] intArray83 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray2, intArray83);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[]");
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[]");
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray66), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray70), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[]");
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[]");
        org.junit.Assert.assertNotNull(doubleArray81);
        org.junit.Assert.assertNotNull(doubleArray82);
    }

    @Test
    public void test3998() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3998");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray30 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray29);
        double[][] doubleArray31 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        double[][] doubleArray32 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        double[][] doubleArray33 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        double[][] doubleArray34 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        double[][] doubleArray35 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray34);
        double[][] doubleArray36 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray34);
        double[][] doubleArray37 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray36);
        double[][] doubleArray38 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray36);
        double[][] doubleArray39 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray36);
        double[][] doubleArray40 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray39);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertNotNull(doubleArray40);
    }

    @Test
    public void test3999() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3999");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray30 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray31 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[] doubleArray33 = new double[] { 1 };
        double[] doubleArray35 = new double[] { 1 };
        double[] doubleArray37 = new double[] { 1 };
        double[] doubleArray39 = new double[] { 1 };
        double[] doubleArray41 = new double[] { 1 };
        double[][] doubleArray42 = new double[][] { doubleArray33, doubleArray35, doubleArray37, doubleArray39, doubleArray41 };
        int[] intArray43 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray42, intArray43);
        double[] doubleArray51 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray58 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray65 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray72 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray73 = new double[][] { doubleArray51, doubleArray58, doubleArray65, doubleArray72 };
        double[][] doubleArray74 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray73);
        double[] doubleArray76 = new double[] { 1 };
        double[] doubleArray78 = new double[] { 1 };
        double[] doubleArray80 = new double[] { 1 };
        double[] doubleArray82 = new double[] { 1 };
        double[] doubleArray84 = new double[] { 1 };
        double[][] doubleArray85 = new double[][] { doubleArray76, doubleArray78, doubleArray80, doubleArray82, doubleArray84 };
        int[] intArray86 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray85, intArray86);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray74, intArray86);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray42, intArray86);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray31, intArray86);
        double[][] doubleArray91 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray31);
        double[][] doubleArray92 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray31);
        double[][] doubleArray93 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray92);
        double[][] doubleArray94 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray92);
        java.lang.Class<?> wildcardClass95 = doubleArray94.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray78), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray80), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray82), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray84), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray85);
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray86), "[]");
        org.junit.Assert.assertNotNull(doubleArray91);
        org.junit.Assert.assertNotNull(doubleArray92);
        org.junit.Assert.assertNotNull(doubleArray93);
        org.junit.Assert.assertNotNull(doubleArray94);
        org.junit.Assert.assertNotNull(wildcardClass95);
    }

    @Test
    public void test4000() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test4000");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[] doubleArray3 = new double[] { 1 };
        double[] doubleArray5 = new double[] { 1 };
        double[] doubleArray7 = new double[] { 1 };
        double[] doubleArray9 = new double[] { 1 };
        double[] doubleArray11 = new double[] { 1 };
        double[][] doubleArray12 = new double[][] { doubleArray3, doubleArray5, doubleArray7, doubleArray9, doubleArray11 };
        int[] intArray13 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray12, intArray13);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray0, intArray13);
        double[] doubleArray19 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray23 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray27 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray31 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray32 = new double[][] { doubleArray19, doubleArray23, doubleArray27, doubleArray31 };
        double[] doubleArray34 = new double[] { 1 };
        double[] doubleArray36 = new double[] { 1 };
        double[] doubleArray38 = new double[] { 1 };
        double[] doubleArray40 = new double[] { 1 };
        double[] doubleArray42 = new double[] { 1 };
        double[][] doubleArray43 = new double[][] { doubleArray34, doubleArray36, doubleArray38, doubleArray40, doubleArray42 };
        int[] intArray44 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray43, intArray44);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray32, intArray44);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray0, intArray44);
        double[][] doubleArray48 = new double[][] {};
        double[][] doubleArray49 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray48);
        double[] doubleArray51 = new double[] { 1 };
        double[] doubleArray53 = new double[] { 1 };
        double[] doubleArray55 = new double[] { 1 };
        double[] doubleArray57 = new double[] { 1 };
        double[] doubleArray59 = new double[] { 1 };
        double[][] doubleArray60 = new double[][] { doubleArray51, doubleArray53, doubleArray55, doubleArray57, doubleArray59 };
        int[] intArray61 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray60, intArray61);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray48, intArray61);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray0, intArray61);
        double[][] doubleArray65 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray66 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray67 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray68 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray67);
        double[][] doubleArray69 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray68);
        java.lang.Class<?> wildcardClass70 = doubleArray68.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[]");
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertNotNull(wildcardClass70);
    }
}


package InverseOfMatrix;

import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class RegressionTest1 {

    public static boolean debug = false;

    @Test
    public void test0501() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0501");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray30 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray31 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[] doubleArray33 = new double[] { 1 };
        double[] doubleArray35 = new double[] { 1 };
        double[] doubleArray37 = new double[] { 1 };
        double[] doubleArray39 = new double[] { 1 };
        double[] doubleArray41 = new double[] { 1 };
        double[][] doubleArray42 = new double[][] { doubleArray33, doubleArray35, doubleArray37, doubleArray39, doubleArray41 };
        int[] intArray43 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray42, intArray43);
        double[] doubleArray51 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray58 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray65 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray72 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray73 = new double[][] { doubleArray51, doubleArray58, doubleArray65, doubleArray72 };
        double[][] doubleArray74 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray73);
        double[] doubleArray76 = new double[] { 1 };
        double[] doubleArray78 = new double[] { 1 };
        double[] doubleArray80 = new double[] { 1 };
        double[] doubleArray82 = new double[] { 1 };
        double[] doubleArray84 = new double[] { 1 };
        double[][] doubleArray85 = new double[][] { doubleArray76, doubleArray78, doubleArray80, doubleArray82, doubleArray84 };
        int[] intArray86 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray85, intArray86);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray74, intArray86);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray42, intArray86);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray31, intArray86);
        double[][] doubleArray91 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray31);
        double[][] doubleArray92 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray31);
        double[][] doubleArray93 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray31);
        java.lang.Class<?> wildcardClass94 = doubleArray31.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray78), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray80), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray82), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray84), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray85);
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray86), "[]");
        org.junit.Assert.assertNotNull(doubleArray91);
        org.junit.Assert.assertNotNull(doubleArray92);
        org.junit.Assert.assertNotNull(doubleArray93);
        org.junit.Assert.assertNotNull(wildcardClass94);
    }

    @Test
    public void test0502() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0502");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        int[] intArray2 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray1, intArray2);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray5 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray6 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray5);
        double[][] doubleArray7 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray5);
        double[][] doubleArray8 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray5);
        java.lang.Class<?> wildcardClass9 = doubleArray5.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void test0503() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0503");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        int[] intArray2 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray1, intArray2);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray5 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray6 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray5);
        double[][] doubleArray7 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray5);
        double[][] doubleArray8 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray5);
        java.lang.Class<?> wildcardClass9 = doubleArray8.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void test0504() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0504");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[] doubleArray9 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray16 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray23 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray30 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray31 = new double[][] { doubleArray9, doubleArray16, doubleArray23, doubleArray30 };
        double[][] doubleArray32 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray31);
        double[][] doubleArray33 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray31);
        double[][] doubleArray34 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray31);
        double[][] doubleArray35 = new double[][] {};
        double[][] doubleArray36 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray35);
        int[] intArray37 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray36, intArray37);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray34, intArray37);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray2, intArray37);
        double[][] doubleArray41 = null;
        double[][] doubleArray42 = new double[][] {};
        double[][] doubleArray43 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray42);
        double[][] doubleArray44 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray43);
        double[] doubleArray48 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray52 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray56 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray60 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray61 = new double[][] { doubleArray48, doubleArray52, doubleArray56, doubleArray60 };
        double[] doubleArray63 = new double[] { 1 };
        double[] doubleArray65 = new double[] { 1 };
        double[] doubleArray67 = new double[] { 1 };
        double[] doubleArray69 = new double[] { 1 };
        double[] doubleArray71 = new double[] { 1 };
        double[][] doubleArray72 = new double[][] { doubleArray63, doubleArray65, doubleArray67, doubleArray69, doubleArray71 };
        int[] intArray73 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray72, intArray73);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray61, intArray73);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray44, intArray73);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray41, intArray73);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray2, intArray73);
        double[][] doubleArray79 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray80 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray79);
        java.lang.Class<?> wildcardClass81 = doubleArray79.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray71), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[]");
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertNotNull(wildcardClass81);
    }

    @Test
    public void test0505() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0505");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[][] doubleArray5 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray4);
        double[][] doubleArray6 = new double[][] {};
        double[][] doubleArray7 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray6);
        double[][] doubleArray8 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray6);
        double[][] doubleArray9 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray8);
        double[][] doubleArray10 = null;
        double[][] doubleArray11 = new double[][] {};
        double[][] doubleArray12 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray11);
        double[][] doubleArray13 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray12);
        double[] doubleArray17 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray21 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray25 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray29 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray30 = new double[][] { doubleArray17, doubleArray21, doubleArray25, doubleArray29 };
        double[] doubleArray32 = new double[] { 1 };
        double[] doubleArray34 = new double[] { 1 };
        double[] doubleArray36 = new double[] { 1 };
        double[] doubleArray38 = new double[] { 1 };
        double[] doubleArray40 = new double[] { 1 };
        double[][] doubleArray41 = new double[][] { doubleArray32, doubleArray34, doubleArray36, doubleArray38, doubleArray40 };
        int[] intArray42 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray41, intArray42);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray30, intArray42);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray13, intArray42);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray10, intArray42);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray9, intArray42);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray4, intArray42);
        java.lang.Class<?> wildcardClass49 = intArray42.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[]");
        org.junit.Assert.assertNotNull(wildcardClass49);
    }

    @Test
    public void test0506() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0506");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray3 = new double[][] {};
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[][] doubleArray5 = new double[][] {};
        double[][] doubleArray6 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray5);
        double[] doubleArray8 = new double[] { 1 };
        double[] doubleArray10 = new double[] { 1 };
        double[] doubleArray12 = new double[] { 1 };
        double[] doubleArray14 = new double[] { 1 };
        double[] doubleArray16 = new double[] { 1 };
        double[][] doubleArray17 = new double[][] { doubleArray8, doubleArray10, doubleArray12, doubleArray14, doubleArray16 };
        int[] intArray18 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray17, intArray18);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray5, intArray18);
        double[] doubleArray24 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray28 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray32 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray36 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray37 = new double[][] { doubleArray24, doubleArray28, doubleArray32, doubleArray36 };
        double[] doubleArray39 = new double[] { 1 };
        double[] doubleArray41 = new double[] { 1 };
        double[] doubleArray43 = new double[] { 1 };
        double[] doubleArray45 = new double[] { 1 };
        double[] doubleArray47 = new double[] { 1 };
        double[][] doubleArray48 = new double[][] { doubleArray39, doubleArray41, doubleArray43, doubleArray45, doubleArray47 };
        int[] intArray49 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray48, intArray49);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray37, intArray49);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray5, intArray49);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray4, intArray49);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray2, intArray49);
        double[][] doubleArray55 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray56 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray55);
        double[][] doubleArray57 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray55);
        double[][] doubleArray58 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray57);
        double[][] doubleArray59 = new double[][] {};
        double[][] doubleArray60 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray59);
        double[][] doubleArray61 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray60);
        double[] doubleArray65 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray69 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray73 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray77 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray78 = new double[][] { doubleArray65, doubleArray69, doubleArray73, doubleArray77 };
        double[] doubleArray80 = new double[] { 1 };
        double[] doubleArray82 = new double[] { 1 };
        double[] doubleArray84 = new double[] { 1 };
        double[] doubleArray86 = new double[] { 1 };
        double[] doubleArray88 = new double[] { 1 };
        double[][] doubleArray89 = new double[][] { doubleArray80, doubleArray82, doubleArray84, doubleArray86, doubleArray88 };
        int[] intArray90 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray89, intArray90);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray78, intArray90);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray61, intArray90);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray57, intArray90);
        double[][] doubleArray95 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray57);
        double[][] doubleArray96 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray95);
        java.lang.Class<?> wildcardClass97 = doubleArray96.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[]");
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[]");
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray73), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray77), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray80), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray82), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray84), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray86), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray88), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray89);
        org.junit.Assert.assertNotNull(intArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray90), "[]");
        org.junit.Assert.assertNotNull(doubleArray95);
        org.junit.Assert.assertNotNull(doubleArray96);
        org.junit.Assert.assertNotNull(wildcardClass97);
    }

    @Test
    public void test0507() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0507");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[] doubleArray6 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray10 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray14 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray18 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray19 = new double[][] { doubleArray6, doubleArray10, doubleArray14, doubleArray18 };
        double[] doubleArray21 = new double[] { 1 };
        double[] doubleArray23 = new double[] { 1 };
        double[] doubleArray25 = new double[] { 1 };
        double[] doubleArray27 = new double[] { 1 };
        double[] doubleArray29 = new double[] { 1 };
        double[][] doubleArray30 = new double[][] { doubleArray21, doubleArray23, doubleArray25, doubleArray27, doubleArray29 };
        int[] intArray31 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray30, intArray31);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray19, intArray31);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray2, intArray31);
        double[][] doubleArray35 = null;
        double[][] doubleArray36 = new double[][] {};
        double[][] doubleArray37 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray36);
        double[][] doubleArray38 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray37);
        double[] doubleArray42 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray46 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray50 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray54 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray55 = new double[][] { doubleArray42, doubleArray46, doubleArray50, doubleArray54 };
        double[] doubleArray57 = new double[] { 1 };
        double[] doubleArray59 = new double[] { 1 };
        double[] doubleArray61 = new double[] { 1 };
        double[] doubleArray63 = new double[] { 1 };
        double[] doubleArray65 = new double[] { 1 };
        double[][] doubleArray66 = new double[][] { doubleArray57, doubleArray59, doubleArray61, doubleArray63, doubleArray65 };
        int[] intArray67 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray66, intArray67);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray55, intArray67);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray38, intArray67);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray35, intArray67);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray2, intArray67);
        double[][] doubleArray73 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        java.lang.Class<?> wildcardClass74 = doubleArray73.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[]");
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertNotNull(wildcardClass74);
    }

    @Test
    public void test0508() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0508");
        double[][] doubleArray0 = null;
        double[][] doubleArray1 = new double[][] {};
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[][] doubleArray5 = null;
        double[][] doubleArray6 = new double[][] {};
        double[][] doubleArray7 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray6);
        double[][] doubleArray8 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray7);
        double[] doubleArray12 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray16 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray20 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray24 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray25 = new double[][] { doubleArray12, doubleArray16, doubleArray20, doubleArray24 };
        double[] doubleArray27 = new double[] { 1 };
        double[] doubleArray29 = new double[] { 1 };
        double[] doubleArray31 = new double[] { 1 };
        double[] doubleArray33 = new double[] { 1 };
        double[] doubleArray35 = new double[] { 1 };
        double[][] doubleArray36 = new double[][] { doubleArray27, doubleArray29, doubleArray31, doubleArray33, doubleArray35 };
        int[] intArray37 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray36, intArray37);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray25, intArray37);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray8, intArray37);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray5, intArray37);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray4, intArray37);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray0, intArray37);
        java.lang.Class<?> wildcardClass44 = intArray37.getClass();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[]");
        org.junit.Assert.assertNotNull(wildcardClass44);
    }

    @Test
    public void test0509() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0509");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[] doubleArray3 = new double[] { 1 };
        double[] doubleArray5 = new double[] { 1 };
        double[] doubleArray7 = new double[] { 1 };
        double[] doubleArray9 = new double[] { 1 };
        double[] doubleArray11 = new double[] { 1 };
        double[][] doubleArray12 = new double[][] { doubleArray3, doubleArray5, doubleArray7, doubleArray9, doubleArray11 };
        int[] intArray13 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray12, intArray13);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray0, intArray13);
        double[] doubleArray19 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray23 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray27 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray31 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray32 = new double[][] { doubleArray19, doubleArray23, doubleArray27, doubleArray31 };
        double[] doubleArray34 = new double[] { 1 };
        double[] doubleArray36 = new double[] { 1 };
        double[] doubleArray38 = new double[] { 1 };
        double[] doubleArray40 = new double[] { 1 };
        double[] doubleArray42 = new double[] { 1 };
        double[][] doubleArray43 = new double[][] { doubleArray34, doubleArray36, doubleArray38, doubleArray40, doubleArray42 };
        int[] intArray44 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray43, intArray44);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray32, intArray44);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray0, intArray44);
        double[][] doubleArray48 = new double[][] {};
        double[][] doubleArray49 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray48);
        double[] doubleArray51 = new double[] { 1 };
        double[] doubleArray53 = new double[] { 1 };
        double[] doubleArray55 = new double[] { 1 };
        double[] doubleArray57 = new double[] { 1 };
        double[] doubleArray59 = new double[] { 1 };
        double[][] doubleArray60 = new double[][] { doubleArray51, doubleArray53, doubleArray55, doubleArray57, doubleArray59 };
        int[] intArray61 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray60, intArray61);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray48, intArray61);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray0, intArray61);
        double[][] doubleArray65 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray66 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray67 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray66);
        int[] intArray68 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray66, intArray68);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[]");
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertNotNull(doubleArray67);
    }

    @Test
    public void test0510() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0510");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray5 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray6 = new double[][] {};
        double[][] doubleArray7 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray6);
        double[][] doubleArray8 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray6);
        double[][] doubleArray9 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray6);
        double[][] doubleArray10 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray9);
        double[] doubleArray17 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray24 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray31 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray38 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray39 = new double[][] { doubleArray17, doubleArray24, doubleArray31, doubleArray38 };
        double[][] doubleArray40 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray39);
        double[][] doubleArray41 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray40);
        double[][] doubleArray42 = new double[][] {};
        double[][] doubleArray43 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray42);
        double[] doubleArray45 = new double[] { 1 };
        double[] doubleArray47 = new double[] { 1 };
        double[] doubleArray49 = new double[] { 1 };
        double[] doubleArray51 = new double[] { 1 };
        double[] doubleArray53 = new double[] { 1 };
        double[][] doubleArray54 = new double[][] { doubleArray45, doubleArray47, doubleArray49, doubleArray51, doubleArray53 };
        int[] intArray55 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray54, intArray55);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray42, intArray55);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray41, intArray55);
        double[][] doubleArray59 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray41);
        double[] doubleArray61 = new double[] { 1 };
        double[] doubleArray63 = new double[] { 1 };
        double[] doubleArray65 = new double[] { 1 };
        double[] doubleArray67 = new double[] { 1 };
        double[] doubleArray69 = new double[] { 1 };
        double[][] doubleArray70 = new double[][] { doubleArray61, doubleArray63, doubleArray65, doubleArray67, doubleArray69 };
        int[] intArray71 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray70, intArray71);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray59, intArray71);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray9, intArray71);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray5, intArray71);
        java.lang.Class<?> wildcardClass76 = doubleArray5.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[]");
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[]");
        org.junit.Assert.assertNotNull(wildcardClass76);
    }

    @Test
    public void test0511() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0511");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[] doubleArray3 = new double[] { 1 };
        double[] doubleArray5 = new double[] { 1 };
        double[] doubleArray7 = new double[] { 1 };
        double[] doubleArray9 = new double[] { 1 };
        double[] doubleArray11 = new double[] { 1 };
        double[][] doubleArray12 = new double[][] { doubleArray3, doubleArray5, doubleArray7, doubleArray9, doubleArray11 };
        int[] intArray13 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray12, intArray13);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray0, intArray13);
        double[] doubleArray19 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray23 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray27 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray31 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray32 = new double[][] { doubleArray19, doubleArray23, doubleArray27, doubleArray31 };
        double[] doubleArray34 = new double[] { 1 };
        double[] doubleArray36 = new double[] { 1 };
        double[] doubleArray38 = new double[] { 1 };
        double[] doubleArray40 = new double[] { 1 };
        double[] doubleArray42 = new double[] { 1 };
        double[][] doubleArray43 = new double[][] { doubleArray34, doubleArray36, doubleArray38, doubleArray40, doubleArray42 };
        int[] intArray44 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray43, intArray44);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray32, intArray44);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray0, intArray44);
        double[][] doubleArray48 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray49 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray48);
        java.lang.Class<?> wildcardClass50 = doubleArray49.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertNotNull(wildcardClass50);
    }

    @Test
    public void test0512() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0512");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[] doubleArray6 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray10 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray14 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray18 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray19 = new double[][] { doubleArray6, doubleArray10, doubleArray14, doubleArray18 };
        double[] doubleArray21 = new double[] { 1 };
        double[] doubleArray23 = new double[] { 1 };
        double[] doubleArray25 = new double[] { 1 };
        double[] doubleArray27 = new double[] { 1 };
        double[] doubleArray29 = new double[] { 1 };
        double[][] doubleArray30 = new double[][] { doubleArray21, doubleArray23, doubleArray25, doubleArray27, doubleArray29 };
        int[] intArray31 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray30, intArray31);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray19, intArray31);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray2, intArray31);
        double[][] doubleArray35 = null;
        double[] doubleArray37 = new double[] { 1 };
        double[] doubleArray39 = new double[] { 1 };
        double[] doubleArray41 = new double[] { 1 };
        double[] doubleArray43 = new double[] { 1 };
        double[] doubleArray45 = new double[] { 1 };
        double[][] doubleArray46 = new double[][] { doubleArray37, doubleArray39, doubleArray41, doubleArray43, doubleArray45 };
        int[] intArray47 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray46, intArray47);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray35, intArray47);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray2, intArray47);
        java.lang.Class<?> wildcardClass51 = doubleArray2.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[]");
        org.junit.Assert.assertNotNull(wildcardClass51);
    }

    @Test
    public void test0513() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0513");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[][] doubleArray5 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray4);
        double[][] doubleArray6 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray5);
        double[][] doubleArray7 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray5);
        double[] doubleArray14 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray21 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray28 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray35 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray36 = new double[][] { doubleArray14, doubleArray21, doubleArray28, doubleArray35 };
        double[][] doubleArray37 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray36);
        double[][] doubleArray38 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray37);
        double[][] doubleArray39 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray37);
        double[] doubleArray46 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray53 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray60 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray67 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray68 = new double[][] { doubleArray46, doubleArray53, doubleArray60, doubleArray67 };
        double[][] doubleArray69 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray68);
        double[][] doubleArray70 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray69);
        double[][] doubleArray71 = new double[][] {};
        double[][] doubleArray72 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray71);
        double[] doubleArray74 = new double[] { 1 };
        double[] doubleArray76 = new double[] { 1 };
        double[] doubleArray78 = new double[] { 1 };
        double[] doubleArray80 = new double[] { 1 };
        double[] doubleArray82 = new double[] { 1 };
        double[][] doubleArray83 = new double[][] { doubleArray74, doubleArray76, doubleArray78, doubleArray80, doubleArray82 };
        int[] intArray84 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray83, intArray84);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray71, intArray84);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray70, intArray84);
        double[][] doubleArray88 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray70);
        double[][] doubleArray89 = new double[][] {};
        double[][] doubleArray90 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray89);
        int[] intArray91 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray90, intArray91);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray88, intArray91);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray39, intArray91);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray7, intArray91);
        java.lang.Class<?> wildcardClass96 = doubleArray7.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray74), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray78), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray80), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray82), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray83);
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray84), "[]");
        org.junit.Assert.assertNotNull(doubleArray88);
        org.junit.Assert.assertNotNull(doubleArray89);
        org.junit.Assert.assertNotNull(doubleArray90);
        org.junit.Assert.assertNotNull(intArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray91), "[]");
        org.junit.Assert.assertNotNull(wildcardClass96);
    }

    @Test
    public void test0514() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0514");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray5 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray4);
        java.lang.Class<?> wildcardClass6 = doubleArray4.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(wildcardClass6);
    }

    @Test
    public void test0515() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0515");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        int[] intArray2 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray1, intArray2);
        double[] doubleArray5 = new double[] { 1 };
        double[] doubleArray7 = new double[] { 1 };
        double[] doubleArray9 = new double[] { 1 };
        double[] doubleArray11 = new double[] { 1 };
        double[] doubleArray13 = new double[] { 1 };
        double[][] doubleArray14 = new double[][] { doubleArray5, doubleArray7, doubleArray9, doubleArray11, doubleArray13 };
        int[] intArray15 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray14, intArray15);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray1, intArray15);
        double[][] doubleArray18 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray19 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray20 = new double[][] {};
        double[][] doubleArray21 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray20);
        double[][] doubleArray22 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray20);
        double[][] doubleArray23 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray20);
        double[] doubleArray30 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray37 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray44 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray51 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray52 = new double[][] { doubleArray30, doubleArray37, doubleArray44, doubleArray51 };
        double[][] doubleArray53 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray52);
        double[][] doubleArray54 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray53);
        double[][] doubleArray55 = new double[][] {};
        double[][] doubleArray56 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray55);
        double[] doubleArray58 = new double[] { 1 };
        double[] doubleArray60 = new double[] { 1 };
        double[] doubleArray62 = new double[] { 1 };
        double[] doubleArray64 = new double[] { 1 };
        double[] doubleArray66 = new double[] { 1 };
        double[][] doubleArray67 = new double[][] { doubleArray58, doubleArray60, doubleArray62, doubleArray64, doubleArray66 };
        int[] intArray68 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray67, intArray68);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray55, intArray68);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray54, intArray68);
        double[][] doubleArray72 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray54);
        double[] doubleArray74 = new double[] { 1 };
        double[] doubleArray76 = new double[] { 1 };
        double[] doubleArray78 = new double[] { 1 };
        double[] doubleArray80 = new double[] { 1 };
        double[] doubleArray82 = new double[] { 1 };
        double[][] doubleArray83 = new double[][] { doubleArray74, doubleArray76, doubleArray78, doubleArray80, doubleArray82 };
        int[] intArray84 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray83, intArray84);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray72, intArray84);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray20, intArray84);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray1, intArray84);
        double[][] doubleArray89 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        java.lang.Class<?> wildcardClass90 = doubleArray89.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray66), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[]");
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray74), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray78), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray80), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray82), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray83);
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray84), "[]");
        org.junit.Assert.assertNotNull(doubleArray89);
        org.junit.Assert.assertNotNull(wildcardClass90);
    }

    @Test
    public void test0516() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0516");
        double[][] doubleArray0 = null;
        double[][] doubleArray1 = new double[][] {};
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray3 = new double[][] {};
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[][] doubleArray5 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray4);
        double[][] doubleArray6 = new double[][] {};
        double[][] doubleArray7 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray6);
        double[][] doubleArray8 = new double[][] {};
        double[][] doubleArray9 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray8);
        double[] doubleArray11 = new double[] { 1 };
        double[] doubleArray13 = new double[] { 1 };
        double[] doubleArray15 = new double[] { 1 };
        double[] doubleArray17 = new double[] { 1 };
        double[] doubleArray19 = new double[] { 1 };
        double[][] doubleArray20 = new double[][] { doubleArray11, doubleArray13, doubleArray15, doubleArray17, doubleArray19 };
        int[] intArray21 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray20, intArray21);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray8, intArray21);
        double[] doubleArray27 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray31 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray35 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray39 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray40 = new double[][] { doubleArray27, doubleArray31, doubleArray35, doubleArray39 };
        double[] doubleArray42 = new double[] { 1 };
        double[] doubleArray44 = new double[] { 1 };
        double[] doubleArray46 = new double[] { 1 };
        double[] doubleArray48 = new double[] { 1 };
        double[] doubleArray50 = new double[] { 1 };
        double[][] doubleArray51 = new double[][] { doubleArray42, doubleArray44, doubleArray46, doubleArray48, doubleArray50 };
        int[] intArray52 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray51, intArray52);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray40, intArray52);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray8, intArray52);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray7, intArray52);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray5, intArray52);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray2, intArray52);
        double[][] doubleArray59 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[] doubleArray66 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray73 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray80 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray87 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray88 = new double[][] { doubleArray66, doubleArray73, doubleArray80, doubleArray87 };
        double[][] doubleArray89 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray88);
        double[][] doubleArray90 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray88);
        double[][] doubleArray91 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray88);
        double[][] doubleArray92 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray91);
        double[][] doubleArray93 = new double[][] {};
        double[][] doubleArray94 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray93);
        int[] intArray95 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray94, intArray95);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray92, intArray95);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray59, intArray95);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray0, intArray95);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[]");
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray66), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray73), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray80), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray87), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray88);
        org.junit.Assert.assertNotNull(doubleArray89);
        org.junit.Assert.assertNotNull(doubleArray90);
        org.junit.Assert.assertNotNull(doubleArray91);
        org.junit.Assert.assertNotNull(doubleArray92);
        org.junit.Assert.assertNotNull(doubleArray93);
        org.junit.Assert.assertNotNull(doubleArray94);
        org.junit.Assert.assertNotNull(intArray95);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray95), "[]");
    }

    @Test
    public void test0517() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0517");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray30 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray29);
        double[][] doubleArray31 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        double[][] doubleArray32 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray31);
        java.lang.Class<?> wildcardClass33 = doubleArray32.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(wildcardClass33);
    }

    @Test
    public void test0518() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0518");
        double[][] doubleArray0 = null;
        int[] intArray1 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray0, intArray1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0519() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0519");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[] doubleArray31 = new double[] { 1 };
        double[] doubleArray33 = new double[] { 1 };
        double[] doubleArray35 = new double[] { 1 };
        double[] doubleArray37 = new double[] { 1 };
        double[] doubleArray39 = new double[] { 1 };
        double[][] doubleArray40 = new double[][] { doubleArray31, doubleArray33, doubleArray35, doubleArray37, doubleArray39 };
        int[] intArray41 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray40, intArray41);
        double[][] doubleArray43 = new double[][] {};
        double[][] doubleArray44 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray43);
        int[] intArray45 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray44, intArray45);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray40, intArray45);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray28, intArray45);
        double[][] doubleArray49 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray50 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray51 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray52 = new double[][] {};
        double[][] doubleArray53 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray52);
        double[][] doubleArray54 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray52);
        double[][] doubleArray55 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray52);
        double[] doubleArray62 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray69 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray76 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray83 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray84 = new double[][] { doubleArray62, doubleArray69, doubleArray76, doubleArray83 };
        double[][] doubleArray85 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray84);
        double[][] doubleArray86 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray84);
        double[][] doubleArray87 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray84);
        double[][] doubleArray88 = new double[][] {};
        double[][] doubleArray89 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray88);
        int[] intArray90 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray89, intArray90);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray87, intArray90);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray55, intArray90);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray28, intArray90);
        java.lang.Class<?> wildcardClass95 = doubleArray28.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray83), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray84);
        org.junit.Assert.assertNotNull(doubleArray85);
        org.junit.Assert.assertNotNull(doubleArray86);
        org.junit.Assert.assertNotNull(doubleArray87);
        org.junit.Assert.assertNotNull(doubleArray88);
        org.junit.Assert.assertNotNull(doubleArray89);
        org.junit.Assert.assertNotNull(intArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray90), "[]");
        org.junit.Assert.assertNotNull(wildcardClass95);
    }

    @Test
    public void test0520() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0520");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[] doubleArray3 = new double[] { 1 };
        double[] doubleArray5 = new double[] { 1 };
        double[] doubleArray7 = new double[] { 1 };
        double[] doubleArray9 = new double[] { 1 };
        double[] doubleArray11 = new double[] { 1 };
        double[][] doubleArray12 = new double[][] { doubleArray3, doubleArray5, doubleArray7, doubleArray9, doubleArray11 };
        int[] intArray13 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray12, intArray13);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray0, intArray13);
        double[][] doubleArray16 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[] doubleArray23 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray30 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray37 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray44 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray45 = new double[][] { doubleArray23, doubleArray30, doubleArray37, doubleArray44 };
        double[][] doubleArray46 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray45);
        double[] doubleArray48 = new double[] { 1 };
        double[] doubleArray50 = new double[] { 1 };
        double[] doubleArray52 = new double[] { 1 };
        double[] doubleArray54 = new double[] { 1 };
        double[] doubleArray56 = new double[] { 1 };
        double[][] doubleArray57 = new double[][] { doubleArray48, doubleArray50, doubleArray52, doubleArray54, doubleArray56 };
        int[] intArray58 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray57, intArray58);
        double[][] doubleArray60 = new double[][] {};
        double[][] doubleArray61 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray60);
        int[] intArray62 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray61, intArray62);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray57, intArray62);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray45, intArray62);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray16, intArray62);
        double[][] doubleArray67 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray16);
        java.lang.Class<?> wildcardClass68 = doubleArray16.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[]");
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[]");
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertNotNull(wildcardClass68);
    }

    @Test
    public void test0521() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0521");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[] doubleArray8 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray15 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray22 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray29 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray30 = new double[][] { doubleArray8, doubleArray15, doubleArray22, doubleArray29 };
        double[][] doubleArray31 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        double[][] doubleArray32 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        double[][] doubleArray33 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        double[][] doubleArray34 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray33);
        double[] doubleArray41 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray48 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray55 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray62 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray63 = new double[][] { doubleArray41, doubleArray48, doubleArray55, doubleArray62 };
        double[][] doubleArray64 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray63);
        double[] doubleArray66 = new double[] { 1 };
        double[] doubleArray68 = new double[] { 1 };
        double[] doubleArray70 = new double[] { 1 };
        double[] doubleArray72 = new double[] { 1 };
        double[] doubleArray74 = new double[] { 1 };
        double[][] doubleArray75 = new double[][] { doubleArray66, doubleArray68, doubleArray70, doubleArray72, doubleArray74 };
        int[] intArray76 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray75, intArray76);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray64, intArray76);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray34, intArray76);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray1, intArray76);
        double[][] doubleArray81 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray82 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray81);
        java.lang.Class<?> wildcardClass83 = doubleArray82.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray66), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray70), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray74), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[]");
        org.junit.Assert.assertNotNull(doubleArray81);
        org.junit.Assert.assertNotNull(doubleArray82);
        org.junit.Assert.assertNotNull(wildcardClass83);
    }

    @Test
    public void test0522() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0522");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray5 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray4);
        double[][] doubleArray6 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray4);
        double[][] doubleArray7 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray6);
        java.lang.Class<?> wildcardClass8 = doubleArray7.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertNotNull(wildcardClass8);
    }

    @Test
    public void test0523() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0523");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[] doubleArray11 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray18 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray25 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray32 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray33 = new double[][] { doubleArray11, doubleArray18, doubleArray25, doubleArray32 };
        double[][] doubleArray34 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray33);
        double[][] doubleArray35 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray33);
        double[][] doubleArray36 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray33);
        double[][] doubleArray37 = new double[][] {};
        double[][] doubleArray38 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray37);
        int[] intArray39 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray38, intArray39);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray36, intArray39);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray4, intArray39);
        double[][] doubleArray43 = new double[][] {};
        double[][] doubleArray44 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray43);
        double[][] doubleArray45 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray44);
        double[] doubleArray52 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray59 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray66 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray73 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray74 = new double[][] { doubleArray52, doubleArray59, doubleArray66, doubleArray73 };
        double[][] doubleArray75 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray74);
        double[] doubleArray77 = new double[] { 1 };
        double[] doubleArray79 = new double[] { 1 };
        double[] doubleArray81 = new double[] { 1 };
        double[] doubleArray83 = new double[] { 1 };
        double[] doubleArray85 = new double[] { 1 };
        double[][] doubleArray86 = new double[][] { doubleArray77, doubleArray79, doubleArray81, doubleArray83, doubleArray85 };
        int[] intArray87 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray86, intArray87);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray75, intArray87);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray44, intArray87);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray4, intArray87);
        java.lang.Class<?> wildcardClass92 = intArray87.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray66), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray73), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray77), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray79), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray81), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray83), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray85), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray86);
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray87), "[]");
        org.junit.Assert.assertNotNull(wildcardClass92);
    }

    @Test
    public void test0524() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0524");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray30 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray31 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[] doubleArray33 = new double[] { 1 };
        double[] doubleArray35 = new double[] { 1 };
        double[] doubleArray37 = new double[] { 1 };
        double[] doubleArray39 = new double[] { 1 };
        double[] doubleArray41 = new double[] { 1 };
        double[][] doubleArray42 = new double[][] { doubleArray33, doubleArray35, doubleArray37, doubleArray39, doubleArray41 };
        int[] intArray43 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray42, intArray43);
        double[] doubleArray51 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray58 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray65 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray72 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray73 = new double[][] { doubleArray51, doubleArray58, doubleArray65, doubleArray72 };
        double[][] doubleArray74 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray73);
        double[] doubleArray76 = new double[] { 1 };
        double[] doubleArray78 = new double[] { 1 };
        double[] doubleArray80 = new double[] { 1 };
        double[] doubleArray82 = new double[] { 1 };
        double[] doubleArray84 = new double[] { 1 };
        double[][] doubleArray85 = new double[][] { doubleArray76, doubleArray78, doubleArray80, doubleArray82, doubleArray84 };
        int[] intArray86 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray85, intArray86);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray74, intArray86);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray42, intArray86);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray31, intArray86);
        double[][] doubleArray91 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray31);
        double[][] doubleArray92 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray31);
        double[][] doubleArray93 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray31);
        double[][] doubleArray94 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray31);
        double[][] doubleArray95 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray31);
        double[][] doubleArray96 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray31);
        java.lang.Class<?> wildcardClass97 = doubleArray96.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray78), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray80), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray82), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray84), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray85);
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray86), "[]");
        org.junit.Assert.assertNotNull(doubleArray91);
        org.junit.Assert.assertNotNull(doubleArray92);
        org.junit.Assert.assertNotNull(doubleArray93);
        org.junit.Assert.assertNotNull(doubleArray94);
        org.junit.Assert.assertNotNull(doubleArray95);
        org.junit.Assert.assertNotNull(doubleArray96);
        org.junit.Assert.assertNotNull(wildcardClass97);
    }

    @Test
    public void test0525() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0525");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[] doubleArray31 = new double[] { 1 };
        double[] doubleArray33 = new double[] { 1 };
        double[] doubleArray35 = new double[] { 1 };
        double[] doubleArray37 = new double[] { 1 };
        double[] doubleArray39 = new double[] { 1 };
        double[][] doubleArray40 = new double[][] { doubleArray31, doubleArray33, doubleArray35, doubleArray37, doubleArray39 };
        int[] intArray41 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray40, intArray41);
        double[][] doubleArray43 = new double[][] {};
        double[][] doubleArray44 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray43);
        int[] intArray45 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray44, intArray45);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray40, intArray45);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray28, intArray45);
        double[][] doubleArray49 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray50 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray49);
        double[][] doubleArray51 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray50);
        double[][] doubleArray52 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray51);
        double[][] doubleArray53 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray52);
        java.lang.Class<?> wildcardClass54 = doubleArray53.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertNotNull(wildcardClass54);
    }

    @Test
    public void test0526() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0526");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray5 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray6 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray7 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray6);
        java.lang.Class<?> wildcardClass8 = doubleArray7.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertNotNull(wildcardClass8);
    }

    @Test
    public void test0527() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0527");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray30 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray29);
        double[][] doubleArray31 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        double[][] doubleArray32 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray31);
        double[] doubleArray36 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray40 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray44 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray48 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray49 = new double[][] { doubleArray36, doubleArray40, doubleArray44, doubleArray48 };
        double[] doubleArray51 = new double[] { 1 };
        double[] doubleArray53 = new double[] { 1 };
        double[] doubleArray55 = new double[] { 1 };
        double[] doubleArray57 = new double[] { 1 };
        double[] doubleArray59 = new double[] { 1 };
        double[][] doubleArray60 = new double[][] { doubleArray51, doubleArray53, doubleArray55, doubleArray57, doubleArray59 };
        int[] intArray61 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray60, intArray61);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray49, intArray61);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray32, intArray61);
        java.lang.Class<?> wildcardClass65 = intArray61.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[]");
        org.junit.Assert.assertNotNull(wildcardClass65);
    }

    @Test
    public void test0528() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0528");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray4 = new double[][] {};
        double[][] doubleArray5 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray4);
        double[][] doubleArray6 = new double[][] {};
        double[][] doubleArray7 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray6);
        double[] doubleArray9 = new double[] { 1 };
        double[] doubleArray11 = new double[] { 1 };
        double[] doubleArray13 = new double[] { 1 };
        double[] doubleArray15 = new double[] { 1 };
        double[] doubleArray17 = new double[] { 1 };
        double[][] doubleArray18 = new double[][] { doubleArray9, doubleArray11, doubleArray13, doubleArray15, doubleArray17 };
        int[] intArray19 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray18, intArray19);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray6, intArray19);
        double[] doubleArray25 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray29 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray33 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray37 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray38 = new double[][] { doubleArray25, doubleArray29, doubleArray33, doubleArray37 };
        double[] doubleArray40 = new double[] { 1 };
        double[] doubleArray42 = new double[] { 1 };
        double[] doubleArray44 = new double[] { 1 };
        double[] doubleArray46 = new double[] { 1 };
        double[] doubleArray48 = new double[] { 1 };
        double[][] doubleArray49 = new double[][] { doubleArray40, doubleArray42, doubleArray44, doubleArray46, doubleArray48 };
        int[] intArray50 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray49, intArray50);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray38, intArray50);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray6, intArray50);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray5, intArray50);
        double[][] doubleArray55 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray5);
        double[][] doubleArray56 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray55);
        double[][] doubleArray57 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray56);
        double[][] doubleArray58 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray56);
        double[][] doubleArray59 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray58);
        double[] doubleArray61 = new double[] { 1 };
        double[] doubleArray63 = new double[] { 1 };
        double[] doubleArray65 = new double[] { 1 };
        double[] doubleArray67 = new double[] { 1 };
        double[] doubleArray69 = new double[] { 1 };
        double[][] doubleArray70 = new double[][] { doubleArray61, doubleArray63, doubleArray65, doubleArray67, doubleArray69 };
        int[] intArray71 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray70, intArray71);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray58, intArray71);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray2, intArray71);
        java.lang.Class<?> wildcardClass75 = intArray71.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[]");
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[]");
        org.junit.Assert.assertNotNull(wildcardClass75);
    }

    @Test
    public void test0529() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0529");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[] doubleArray3 = new double[] { 1 };
        double[] doubleArray5 = new double[] { 1 };
        double[] doubleArray7 = new double[] { 1 };
        double[] doubleArray9 = new double[] { 1 };
        double[] doubleArray11 = new double[] { 1 };
        double[][] doubleArray12 = new double[][] { doubleArray3, doubleArray5, doubleArray7, doubleArray9, doubleArray11 };
        int[] intArray13 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray12, intArray13);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray0, intArray13);
        double[] doubleArray19 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray23 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray27 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray31 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray32 = new double[][] { doubleArray19, doubleArray23, doubleArray27, doubleArray31 };
        double[] doubleArray34 = new double[] { 1 };
        double[] doubleArray36 = new double[] { 1 };
        double[] doubleArray38 = new double[] { 1 };
        double[] doubleArray40 = new double[] { 1 };
        double[] doubleArray42 = new double[] { 1 };
        double[][] doubleArray43 = new double[][] { doubleArray34, doubleArray36, doubleArray38, doubleArray40, doubleArray42 };
        int[] intArray44 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray43, intArray44);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray32, intArray44);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray0, intArray44);
        double[][] doubleArray48 = new double[][] {};
        double[][] doubleArray49 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray48);
        double[] doubleArray51 = new double[] { 1 };
        double[] doubleArray53 = new double[] { 1 };
        double[] doubleArray55 = new double[] { 1 };
        double[] doubleArray57 = new double[] { 1 };
        double[] doubleArray59 = new double[] { 1 };
        double[][] doubleArray60 = new double[][] { doubleArray51, doubleArray53, doubleArray55, doubleArray57, doubleArray59 };
        int[] intArray61 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray60, intArray61);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray48, intArray61);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray0, intArray61);
        double[][] doubleArray65 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray66 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        java.lang.Class<?> wildcardClass67 = doubleArray66.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[]");
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertNotNull(wildcardClass67);
    }

    @Test
    public void test0530() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0530");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[] doubleArray3 = new double[] { 1 };
        double[] doubleArray5 = new double[] { 1 };
        double[] doubleArray7 = new double[] { 1 };
        double[] doubleArray9 = new double[] { 1 };
        double[] doubleArray11 = new double[] { 1 };
        double[][] doubleArray12 = new double[][] { doubleArray3, doubleArray5, doubleArray7, doubleArray9, doubleArray11 };
        int[] intArray13 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray12, intArray13);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray0, intArray13);
        double[] doubleArray19 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray23 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray27 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray31 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray32 = new double[][] { doubleArray19, doubleArray23, doubleArray27, doubleArray31 };
        double[] doubleArray34 = new double[] { 1 };
        double[] doubleArray36 = new double[] { 1 };
        double[] doubleArray38 = new double[] { 1 };
        double[] doubleArray40 = new double[] { 1 };
        double[] doubleArray42 = new double[] { 1 };
        double[][] doubleArray43 = new double[][] { doubleArray34, doubleArray36, doubleArray38, doubleArray40, doubleArray42 };
        int[] intArray44 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray43, intArray44);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray32, intArray44);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray0, intArray44);
        double[] doubleArray49 = new double[] { 1 };
        double[] doubleArray51 = new double[] { 1 };
        double[] doubleArray53 = new double[] { 1 };
        double[] doubleArray55 = new double[] { 1 };
        double[] doubleArray57 = new double[] { 1 };
        double[][] doubleArray58 = new double[][] { doubleArray49, doubleArray51, doubleArray53, doubleArray55, doubleArray57 };
        int[] intArray59 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray58, intArray59);
        double[][] doubleArray61 = new double[][] {};
        double[][] doubleArray62 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray61);
        int[] intArray63 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray62, intArray63);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray58, intArray63);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray0, intArray63);
        double[] doubleArray70 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray74 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray78 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray82 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray83 = new double[][] { doubleArray70, doubleArray74, doubleArray78, doubleArray82 };
        double[] doubleArray85 = new double[] { 1 };
        double[] doubleArray87 = new double[] { 1 };
        double[] doubleArray89 = new double[] { 1 };
        double[] doubleArray91 = new double[] { 1 };
        double[] doubleArray93 = new double[] { 1 };
        double[][] doubleArray94 = new double[][] { doubleArray85, doubleArray87, doubleArray89, doubleArray91, doubleArray93 };
        int[] intArray95 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray94, intArray95);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray83, intArray95);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray0, intArray95);
        java.lang.Class<?> wildcardClass99 = doubleArray0.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[]");
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray70), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray74), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray78), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray82), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray83);
        org.junit.Assert.assertNotNull(doubleArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray85), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray87), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray89), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray91), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray93);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray93), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray94);
        org.junit.Assert.assertNotNull(intArray95);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray95), "[]");
        org.junit.Assert.assertNotNull(wildcardClass99);
    }

    @Test
    public void test0531() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0531");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[] doubleArray31 = new double[] { 1 };
        double[] doubleArray33 = new double[] { 1 };
        double[] doubleArray35 = new double[] { 1 };
        double[] doubleArray37 = new double[] { 1 };
        double[] doubleArray39 = new double[] { 1 };
        double[][] doubleArray40 = new double[][] { doubleArray31, doubleArray33, doubleArray35, doubleArray37, doubleArray39 };
        int[] intArray41 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray40, intArray41);
        double[][] doubleArray43 = new double[][] {};
        double[][] doubleArray44 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray43);
        int[] intArray45 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray44, intArray45);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray40, intArray45);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray28, intArray45);
        double[][] doubleArray49 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray50 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray49);
        double[][] doubleArray51 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray50);
        double[][] doubleArray52 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray51);
        double[][] doubleArray53 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray52);
        double[][] doubleArray54 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray52);
        double[][] doubleArray55 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray54);
        double[] doubleArray57 = new double[] { 1 };
        double[] doubleArray59 = new double[] { 1 };
        double[] doubleArray61 = new double[] { 1 };
        double[] doubleArray63 = new double[] { 1 };
        double[] doubleArray65 = new double[] { 1 };
        double[][] doubleArray66 = new double[][] { doubleArray57, doubleArray59, doubleArray61, doubleArray63, doubleArray65 };
        int[] intArray67 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray66, intArray67);
        double[][] doubleArray69 = new double[][] {};
        double[][] doubleArray70 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray69);
        int[] intArray71 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray70, intArray71);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray66, intArray71);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray55, intArray71);
        java.lang.Class<?> wildcardClass75 = doubleArray55.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[]");
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[]");
        org.junit.Assert.assertNotNull(wildcardClass75);
    }

    @Test
    public void test0532() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0532");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray30 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray31 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[] doubleArray33 = new double[] { 1 };
        double[] doubleArray35 = new double[] { 1 };
        double[] doubleArray37 = new double[] { 1 };
        double[] doubleArray39 = new double[] { 1 };
        double[] doubleArray41 = new double[] { 1 };
        double[][] doubleArray42 = new double[][] { doubleArray33, doubleArray35, doubleArray37, doubleArray39, doubleArray41 };
        int[] intArray43 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray42, intArray43);
        double[] doubleArray51 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray58 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray65 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray72 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray73 = new double[][] { doubleArray51, doubleArray58, doubleArray65, doubleArray72 };
        double[][] doubleArray74 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray73);
        double[] doubleArray76 = new double[] { 1 };
        double[] doubleArray78 = new double[] { 1 };
        double[] doubleArray80 = new double[] { 1 };
        double[] doubleArray82 = new double[] { 1 };
        double[] doubleArray84 = new double[] { 1 };
        double[][] doubleArray85 = new double[][] { doubleArray76, doubleArray78, doubleArray80, doubleArray82, doubleArray84 };
        int[] intArray86 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray85, intArray86);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray74, intArray86);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray42, intArray86);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray31, intArray86);
        double[][] doubleArray91 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray31);
        double[][] doubleArray92 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray31);
        double[][] doubleArray93 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray31);
        double[][] doubleArray94 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray31);
        double[][] doubleArray95 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray31);
        double[][] doubleArray96 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray31);
        java.lang.Class<?> wildcardClass97 = doubleArray31.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray78), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray80), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray82), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray84), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray85);
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray86), "[]");
        org.junit.Assert.assertNotNull(doubleArray91);
        org.junit.Assert.assertNotNull(doubleArray92);
        org.junit.Assert.assertNotNull(doubleArray93);
        org.junit.Assert.assertNotNull(doubleArray94);
        org.junit.Assert.assertNotNull(doubleArray95);
        org.junit.Assert.assertNotNull(doubleArray96);
        org.junit.Assert.assertNotNull(wildcardClass97);
    }

    @Test
    public void test0533() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0533");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray4 = new double[][] {};
        double[][] doubleArray5 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray4);
        double[][] doubleArray6 = new double[][] {};
        double[][] doubleArray7 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray6);
        double[] doubleArray9 = new double[] { 1 };
        double[] doubleArray11 = new double[] { 1 };
        double[] doubleArray13 = new double[] { 1 };
        double[] doubleArray15 = new double[] { 1 };
        double[] doubleArray17 = new double[] { 1 };
        double[][] doubleArray18 = new double[][] { doubleArray9, doubleArray11, doubleArray13, doubleArray15, doubleArray17 };
        int[] intArray19 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray18, intArray19);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray6, intArray19);
        double[] doubleArray25 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray29 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray33 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray37 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray38 = new double[][] { doubleArray25, doubleArray29, doubleArray33, doubleArray37 };
        double[] doubleArray40 = new double[] { 1 };
        double[] doubleArray42 = new double[] { 1 };
        double[] doubleArray44 = new double[] { 1 };
        double[] doubleArray46 = new double[] { 1 };
        double[] doubleArray48 = new double[] { 1 };
        double[][] doubleArray49 = new double[][] { doubleArray40, doubleArray42, doubleArray44, doubleArray46, doubleArray48 };
        int[] intArray50 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray49, intArray50);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray38, intArray50);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray6, intArray50);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray4, intArray50);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray1, intArray50);
        double[][] doubleArray56 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray57 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray58 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray57);
        java.lang.Class<?> wildcardClass59 = doubleArray57.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[]");
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertNotNull(wildcardClass59);
    }

    @Test
    public void test0534() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0534");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[] doubleArray8 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray12 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray16 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray20 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray21 = new double[][] { doubleArray8, doubleArray12, doubleArray16, doubleArray20 };
        double[] doubleArray23 = new double[] { 1 };
        double[] doubleArray25 = new double[] { 1 };
        double[] doubleArray27 = new double[] { 1 };
        double[] doubleArray29 = new double[] { 1 };
        double[] doubleArray31 = new double[] { 1 };
        double[][] doubleArray32 = new double[][] { doubleArray23, doubleArray25, doubleArray27, doubleArray29, doubleArray31 };
        int[] intArray33 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray32, intArray33);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray21, intArray33);
        double[][] doubleArray36 = new double[][] {};
        double[][] doubleArray37 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray36);
        double[][] doubleArray38 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray37);
        double[][] doubleArray39 = new double[][] {};
        double[][] doubleArray40 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray39);
        double[][] doubleArray41 = new double[][] {};
        double[][] doubleArray42 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray41);
        double[] doubleArray44 = new double[] { 1 };
        double[] doubleArray46 = new double[] { 1 };
        double[] doubleArray48 = new double[] { 1 };
        double[] doubleArray50 = new double[] { 1 };
        double[] doubleArray52 = new double[] { 1 };
        double[][] doubleArray53 = new double[][] { doubleArray44, doubleArray46, doubleArray48, doubleArray50, doubleArray52 };
        int[] intArray54 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray53, intArray54);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray41, intArray54);
        double[] doubleArray60 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray64 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray68 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray72 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray73 = new double[][] { doubleArray60, doubleArray64, doubleArray68, doubleArray72 };
        double[] doubleArray75 = new double[] { 1 };
        double[] doubleArray77 = new double[] { 1 };
        double[] doubleArray79 = new double[] { 1 };
        double[] doubleArray81 = new double[] { 1 };
        double[] doubleArray83 = new double[] { 1 };
        double[][] doubleArray84 = new double[][] { doubleArray75, doubleArray77, doubleArray79, doubleArray81, doubleArray83 };
        int[] intArray85 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray84, intArray85);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray73, intArray85);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray41, intArray85);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray40, intArray85);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray38, intArray85);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray21, intArray85);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray3, intArray85);
        java.lang.Class<?> wildcardClass93 = intArray85.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[]");
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray75), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray77), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray79), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray81), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray83), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray84);
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray85), "[]");
        org.junit.Assert.assertNotNull(wildcardClass93);
    }

    @Test
    public void test0535() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0535");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = new double[][] {};
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[] doubleArray5 = new double[] { 1 };
        double[] doubleArray7 = new double[] { 1 };
        double[] doubleArray9 = new double[] { 1 };
        double[] doubleArray11 = new double[] { 1 };
        double[] doubleArray13 = new double[] { 1 };
        double[][] doubleArray14 = new double[][] { doubleArray5, doubleArray7, doubleArray9, doubleArray11, doubleArray13 };
        int[] intArray15 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray14, intArray15);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray2, intArray15);
        double[] doubleArray21 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray25 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray29 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray33 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray34 = new double[][] { doubleArray21, doubleArray25, doubleArray29, doubleArray33 };
        double[] doubleArray36 = new double[] { 1 };
        double[] doubleArray38 = new double[] { 1 };
        double[] doubleArray40 = new double[] { 1 };
        double[] doubleArray42 = new double[] { 1 };
        double[] doubleArray44 = new double[] { 1 };
        double[][] doubleArray45 = new double[][] { doubleArray36, doubleArray38, doubleArray40, doubleArray42, doubleArray44 };
        int[] intArray46 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray45, intArray46);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray34, intArray46);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray2, intArray46);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray1, intArray46);
        double[][] doubleArray51 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray52 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray51);
        double[][] doubleArray53 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray52);
        double[][] doubleArray54 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray52);
        double[][] doubleArray55 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray54);
        double[][] doubleArray56 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray55);
        double[][] doubleArray57 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray55);
        double[][] doubleArray58 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray57);
        int[] intArray59 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray58, intArray59);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertNotNull(doubleArray58);
    }

    @Test
    public void test0536() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0536");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = new double[][] {};
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[] doubleArray8 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray12 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray16 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray20 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray21 = new double[][] { doubleArray8, doubleArray12, doubleArray16, doubleArray20 };
        double[] doubleArray23 = new double[] { 1 };
        double[] doubleArray25 = new double[] { 1 };
        double[] doubleArray27 = new double[] { 1 };
        double[] doubleArray29 = new double[] { 1 };
        double[] doubleArray31 = new double[] { 1 };
        double[][] doubleArray32 = new double[][] { doubleArray23, doubleArray25, doubleArray27, doubleArray29, doubleArray31 };
        int[] intArray33 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray32, intArray33);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray21, intArray33);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray3, intArray33);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray1, intArray33);
        double[][] doubleArray38 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray39 = new double[][] {};
        double[][] doubleArray40 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray39);
        double[] doubleArray42 = new double[] { 1 };
        double[] doubleArray44 = new double[] { 1 };
        double[] doubleArray46 = new double[] { 1 };
        double[] doubleArray48 = new double[] { 1 };
        double[] doubleArray50 = new double[] { 1 };
        double[][] doubleArray51 = new double[][] { doubleArray42, doubleArray44, doubleArray46, doubleArray48, doubleArray50 };
        int[] intArray52 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray51, intArray52);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray39, intArray52);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray1, intArray52);
        java.lang.Class<?> wildcardClass56 = intArray52.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[]");
        org.junit.Assert.assertNotNull(wildcardClass56);
    }

    @Test
    public void test0537() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0537");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray5 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray6 = new double[][] {};
        double[][] doubleArray7 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray6);
        double[][] doubleArray8 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray6);
        double[][] doubleArray9 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray6);
        double[][] doubleArray10 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray9);
        double[] doubleArray17 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray24 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray31 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray38 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray39 = new double[][] { doubleArray17, doubleArray24, doubleArray31, doubleArray38 };
        double[][] doubleArray40 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray39);
        double[][] doubleArray41 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray40);
        double[][] doubleArray42 = new double[][] {};
        double[][] doubleArray43 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray42);
        double[] doubleArray45 = new double[] { 1 };
        double[] doubleArray47 = new double[] { 1 };
        double[] doubleArray49 = new double[] { 1 };
        double[] doubleArray51 = new double[] { 1 };
        double[] doubleArray53 = new double[] { 1 };
        double[][] doubleArray54 = new double[][] { doubleArray45, doubleArray47, doubleArray49, doubleArray51, doubleArray53 };
        int[] intArray55 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray54, intArray55);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray42, intArray55);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray41, intArray55);
        double[][] doubleArray59 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray41);
        double[] doubleArray61 = new double[] { 1 };
        double[] doubleArray63 = new double[] { 1 };
        double[] doubleArray65 = new double[] { 1 };
        double[] doubleArray67 = new double[] { 1 };
        double[] doubleArray69 = new double[] { 1 };
        double[][] doubleArray70 = new double[][] { doubleArray61, doubleArray63, doubleArray65, doubleArray67, doubleArray69 };
        int[] intArray71 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray70, intArray71);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray59, intArray71);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray9, intArray71);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray5, intArray71);
        double[][] doubleArray76 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray5);
        double[][] doubleArray77 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray5);
        java.lang.Class<?> wildcardClass78 = doubleArray5.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[]");
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[]");
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertNotNull(wildcardClass78);
    }

    @Test
    public void test0538() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0538");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[] doubleArray8 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray15 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray22 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray29 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray30 = new double[][] { doubleArray8, doubleArray15, doubleArray22, doubleArray29 };
        double[][] doubleArray31 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        double[][] doubleArray32 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        double[][] doubleArray33 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        double[][] doubleArray34 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray33);
        double[] doubleArray41 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray48 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray55 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray62 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray63 = new double[][] { doubleArray41, doubleArray48, doubleArray55, doubleArray62 };
        double[][] doubleArray64 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray63);
        double[] doubleArray66 = new double[] { 1 };
        double[] doubleArray68 = new double[] { 1 };
        double[] doubleArray70 = new double[] { 1 };
        double[] doubleArray72 = new double[] { 1 };
        double[] doubleArray74 = new double[] { 1 };
        double[][] doubleArray75 = new double[][] { doubleArray66, doubleArray68, doubleArray70, doubleArray72, doubleArray74 };
        int[] intArray76 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray75, intArray76);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray64, intArray76);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray34, intArray76);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray1, intArray76);
        double[][] doubleArray81 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        java.lang.Class<?> wildcardClass82 = doubleArray81.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray66), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray70), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray74), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[]");
        org.junit.Assert.assertNotNull(doubleArray81);
        org.junit.Assert.assertNotNull(wildcardClass82);
    }

    @Test
    public void test0539() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0539");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[][] doubleArray5 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[][] doubleArray6 = new double[][] {};
        double[][] doubleArray7 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray6);
        double[][] doubleArray8 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray7);
        double[] doubleArray15 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray22 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray29 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray36 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray37 = new double[][] { doubleArray15, doubleArray22, doubleArray29, doubleArray36 };
        double[][] doubleArray38 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray37);
        double[] doubleArray40 = new double[] { 1 };
        double[] doubleArray42 = new double[] { 1 };
        double[] doubleArray44 = new double[] { 1 };
        double[] doubleArray46 = new double[] { 1 };
        double[] doubleArray48 = new double[] { 1 };
        double[][] doubleArray49 = new double[][] { doubleArray40, doubleArray42, doubleArray44, doubleArray46, doubleArray48 };
        int[] intArray50 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray49, intArray50);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray38, intArray50);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray7, intArray50);
        double[] doubleArray57 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray61 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray65 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray69 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray70 = new double[][] { doubleArray57, doubleArray61, doubleArray65, doubleArray69 };
        double[] doubleArray72 = new double[] { 1 };
        double[] doubleArray74 = new double[] { 1 };
        double[] doubleArray76 = new double[] { 1 };
        double[] doubleArray78 = new double[] { 1 };
        double[] doubleArray80 = new double[] { 1 };
        double[][] doubleArray81 = new double[][] { doubleArray72, doubleArray74, doubleArray76, doubleArray78, doubleArray80 };
        int[] intArray82 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray81, intArray82);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray70, intArray82);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray7, intArray82);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray3, intArray82);
        double[][] doubleArray87 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[][] doubleArray88 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[][] doubleArray89 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        java.lang.Class<?> wildcardClass90 = doubleArray89.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[]");
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray74), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray78), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray80), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray81);
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[]");
        org.junit.Assert.assertNotNull(doubleArray87);
        org.junit.Assert.assertNotNull(doubleArray88);
        org.junit.Assert.assertNotNull(doubleArray89);
        org.junit.Assert.assertNotNull(wildcardClass90);
    }

    @Test
    public void test0540() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0540");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray30 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray29);
        double[][] doubleArray31 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        double[][] doubleArray32 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray31);
        double[] doubleArray39 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray46 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray53 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray60 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray61 = new double[][] { doubleArray39, doubleArray46, doubleArray53, doubleArray60 };
        double[][] doubleArray62 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray61);
        double[][] doubleArray63 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray62);
        double[][] doubleArray64 = new double[][] {};
        double[][] doubleArray65 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray64);
        double[] doubleArray67 = new double[] { 1 };
        double[] doubleArray69 = new double[] { 1 };
        double[] doubleArray71 = new double[] { 1 };
        double[] doubleArray73 = new double[] { 1 };
        double[] doubleArray75 = new double[] { 1 };
        double[][] doubleArray76 = new double[][] { doubleArray67, doubleArray69, doubleArray71, doubleArray73, doubleArray75 };
        int[] intArray77 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray76, intArray77);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray64, intArray77);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray63, intArray77);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray31, intArray77);
        java.lang.Class<?> wildcardClass82 = intArray77.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray71), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray73), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray75), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray77), "[]");
        org.junit.Assert.assertNotNull(wildcardClass82);
    }

    @Test
    public void test0541() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0541");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[] doubleArray31 = new double[] { 1 };
        double[] doubleArray33 = new double[] { 1 };
        double[] doubleArray35 = new double[] { 1 };
        double[] doubleArray37 = new double[] { 1 };
        double[] doubleArray39 = new double[] { 1 };
        double[][] doubleArray40 = new double[][] { doubleArray31, doubleArray33, doubleArray35, doubleArray37, doubleArray39 };
        int[] intArray41 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray40, intArray41);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray29, intArray41);
        double[] doubleArray50 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray57 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray64 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray71 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray72 = new double[][] { doubleArray50, doubleArray57, doubleArray64, doubleArray71 };
        double[][] doubleArray73 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray72);
        double[] doubleArray75 = new double[] { 1 };
        double[] doubleArray77 = new double[] { 1 };
        double[] doubleArray79 = new double[] { 1 };
        double[] doubleArray81 = new double[] { 1 };
        double[] doubleArray83 = new double[] { 1 };
        double[][] doubleArray84 = new double[][] { doubleArray75, doubleArray77, doubleArray79, doubleArray81, doubleArray83 };
        int[] intArray85 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray84, intArray85);
        double[][] doubleArray87 = new double[][] {};
        double[][] doubleArray88 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray87);
        int[] intArray89 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray88, intArray89);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray84, intArray89);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray72, intArray89);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray29, intArray89);
        double[][] doubleArray94 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray29);
        double[][] doubleArray95 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray29);
        double[][] doubleArray96 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray95);
        java.lang.Class<?> wildcardClass97 = doubleArray96.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[]");
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray71), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray75), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray77), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray79), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray81), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray83), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray84);
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray85), "[]");
        org.junit.Assert.assertNotNull(doubleArray87);
        org.junit.Assert.assertNotNull(doubleArray88);
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray89), "[]");
        org.junit.Assert.assertNotNull(doubleArray94);
        org.junit.Assert.assertNotNull(doubleArray95);
        org.junit.Assert.assertNotNull(doubleArray96);
        org.junit.Assert.assertNotNull(wildcardClass97);
    }

    @Test
    public void test0542() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0542");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray4 = new double[][] {};
        double[][] doubleArray5 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray4);
        double[] doubleArray7 = new double[] { 1 };
        double[] doubleArray9 = new double[] { 1 };
        double[] doubleArray11 = new double[] { 1 };
        double[] doubleArray13 = new double[] { 1 };
        double[] doubleArray15 = new double[] { 1 };
        double[][] doubleArray16 = new double[][] { doubleArray7, doubleArray9, doubleArray11, doubleArray13, doubleArray15 };
        int[] intArray17 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray16, intArray17);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray4, intArray17);
        double[] doubleArray23 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray27 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray31 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray35 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray36 = new double[][] { doubleArray23, doubleArray27, doubleArray31, doubleArray35 };
        double[] doubleArray38 = new double[] { 1 };
        double[] doubleArray40 = new double[] { 1 };
        double[] doubleArray42 = new double[] { 1 };
        double[] doubleArray44 = new double[] { 1 };
        double[] doubleArray46 = new double[] { 1 };
        double[][] doubleArray47 = new double[][] { doubleArray38, doubleArray40, doubleArray42, doubleArray44, doubleArray46 };
        int[] intArray48 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray47, intArray48);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray36, intArray48);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray4, intArray48);
        double[] doubleArray53 = new double[] { 1 };
        double[] doubleArray55 = new double[] { 1 };
        double[] doubleArray57 = new double[] { 1 };
        double[] doubleArray59 = new double[] { 1 };
        double[] doubleArray61 = new double[] { 1 };
        double[][] doubleArray62 = new double[][] { doubleArray53, doubleArray55, doubleArray57, doubleArray59, doubleArray61 };
        int[] intArray63 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray62, intArray63);
        double[][] doubleArray65 = new double[][] {};
        double[][] doubleArray66 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray65);
        int[] intArray67 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray66, intArray67);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray62, intArray67);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray4, intArray67);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray3, intArray67);
        java.lang.Class<?> wildcardClass72 = doubleArray3.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[]");
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[]");
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[]");
        org.junit.Assert.assertNotNull(wildcardClass72);
    }

    @Test
    public void test0543() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0543");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray3 = new double[][] {};
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[][] doubleArray5 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray4);
        double[][] doubleArray6 = new double[][] {};
        double[][] doubleArray7 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray6);
        double[][] doubleArray8 = new double[][] {};
        double[][] doubleArray9 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray8);
        double[] doubleArray11 = new double[] { 1 };
        double[] doubleArray13 = new double[] { 1 };
        double[] doubleArray15 = new double[] { 1 };
        double[] doubleArray17 = new double[] { 1 };
        double[] doubleArray19 = new double[] { 1 };
        double[][] doubleArray20 = new double[][] { doubleArray11, doubleArray13, doubleArray15, doubleArray17, doubleArray19 };
        int[] intArray21 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray20, intArray21);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray8, intArray21);
        double[] doubleArray27 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray31 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray35 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray39 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray40 = new double[][] { doubleArray27, doubleArray31, doubleArray35, doubleArray39 };
        double[] doubleArray42 = new double[] { 1 };
        double[] doubleArray44 = new double[] { 1 };
        double[] doubleArray46 = new double[] { 1 };
        double[] doubleArray48 = new double[] { 1 };
        double[] doubleArray50 = new double[] { 1 };
        double[][] doubleArray51 = new double[][] { doubleArray42, doubleArray44, doubleArray46, doubleArray48, doubleArray50 };
        int[] intArray52 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray51, intArray52);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray40, intArray52);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray8, intArray52);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray7, intArray52);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray5, intArray52);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray0, intArray52);
        double[][] doubleArray59 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        int[] intArray60 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray0, intArray60);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[]");
        org.junit.Assert.assertNotNull(doubleArray59);
    }

    @Test
    public void test0544() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0544");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = new double[][] {};
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[] doubleArray5 = new double[] { 1 };
        double[] doubleArray7 = new double[] { 1 };
        double[] doubleArray9 = new double[] { 1 };
        double[] doubleArray11 = new double[] { 1 };
        double[] doubleArray13 = new double[] { 1 };
        double[][] doubleArray14 = new double[][] { doubleArray5, doubleArray7, doubleArray9, doubleArray11, doubleArray13 };
        int[] intArray15 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray14, intArray15);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray2, intArray15);
        double[] doubleArray21 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray25 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray29 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray33 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray34 = new double[][] { doubleArray21, doubleArray25, doubleArray29, doubleArray33 };
        double[] doubleArray36 = new double[] { 1 };
        double[] doubleArray38 = new double[] { 1 };
        double[] doubleArray40 = new double[] { 1 };
        double[] doubleArray42 = new double[] { 1 };
        double[] doubleArray44 = new double[] { 1 };
        double[][] doubleArray45 = new double[][] { doubleArray36, doubleArray38, doubleArray40, doubleArray42, doubleArray44 };
        int[] intArray46 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray45, intArray46);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray34, intArray46);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray2, intArray46);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray1, intArray46);
        double[] doubleArray52 = new double[] { 1 };
        double[] doubleArray54 = new double[] { 1 };
        double[] doubleArray56 = new double[] { 1 };
        double[] doubleArray58 = new double[] { 1 };
        double[] doubleArray60 = new double[] { 1 };
        double[][] doubleArray61 = new double[][] { doubleArray52, doubleArray54, doubleArray56, doubleArray58, doubleArray60 };
        int[] intArray62 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray61, intArray62);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray1, intArray62);
        java.lang.Class<?> wildcardClass65 = intArray62.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[]");
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[]");
        org.junit.Assert.assertNotNull(wildcardClass65);
    }

    @Test
    public void test0545() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0545");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[] doubleArray11 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray18 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray25 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray32 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray33 = new double[][] { doubleArray11, doubleArray18, doubleArray25, doubleArray32 };
        double[][] doubleArray34 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray33);
        double[][] doubleArray35 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray33);
        double[][] doubleArray36 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray33);
        double[][] doubleArray37 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray36);
        double[][] doubleArray38 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray37);
        double[] doubleArray45 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray52 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray59 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray66 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray67 = new double[][] { doubleArray45, doubleArray52, doubleArray59, doubleArray66 };
        double[][] doubleArray68 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray67);
        double[][] doubleArray69 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray67);
        double[][] doubleArray70 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray67);
        double[][] doubleArray71 = new double[][] {};
        double[][] doubleArray72 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray71);
        int[] intArray73 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray72, intArray73);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray70, intArray73);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray38, intArray73);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray0, intArray73);
        java.lang.Class<?> wildcardClass78 = intArray73.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray66), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[]");
        org.junit.Assert.assertNotNull(wildcardClass78);
    }

    @Test
    public void test0546() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0546");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[] doubleArray9 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray16 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray23 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray30 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray31 = new double[][] { doubleArray9, doubleArray16, doubleArray23, doubleArray30 };
        double[][] doubleArray32 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray31);
        double[] doubleArray34 = new double[] { 1 };
        double[] doubleArray36 = new double[] { 1 };
        double[] doubleArray38 = new double[] { 1 };
        double[] doubleArray40 = new double[] { 1 };
        double[] doubleArray42 = new double[] { 1 };
        double[][] doubleArray43 = new double[][] { doubleArray34, doubleArray36, doubleArray38, doubleArray40, doubleArray42 };
        int[] intArray44 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray43, intArray44);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray32, intArray44);
        double[] doubleArray53 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray60 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray67 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray74 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray75 = new double[][] { doubleArray53, doubleArray60, doubleArray67, doubleArray74 };
        double[][] doubleArray76 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray75);
        double[] doubleArray78 = new double[] { 1 };
        double[] doubleArray80 = new double[] { 1 };
        double[] doubleArray82 = new double[] { 1 };
        double[] doubleArray84 = new double[] { 1 };
        double[] doubleArray86 = new double[] { 1 };
        double[][] doubleArray87 = new double[][] { doubleArray78, doubleArray80, doubleArray82, doubleArray84, doubleArray86 };
        int[] intArray88 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray87, intArray88);
        double[][] doubleArray90 = new double[][] {};
        double[][] doubleArray91 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray90);
        int[] intArray92 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray91, intArray92);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray87, intArray92);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray75, intArray92);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray32, intArray92);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray1, intArray92);
        double[][] doubleArray98 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        java.lang.Class<?> wildcardClass99 = doubleArray98.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[]");
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray74), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray78), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray80), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray82), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray84), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray86), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray87);
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray88), "[]");
        org.junit.Assert.assertNotNull(doubleArray90);
        org.junit.Assert.assertNotNull(doubleArray91);
        org.junit.Assert.assertNotNull(intArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray92), "[]");
        org.junit.Assert.assertNotNull(doubleArray98);
        org.junit.Assert.assertNotNull(wildcardClass99);
    }

    @Test
    public void test0547() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0547");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = new double[][] {};
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[] doubleArray5 = new double[] { 1 };
        double[] doubleArray7 = new double[] { 1 };
        double[] doubleArray9 = new double[] { 1 };
        double[] doubleArray11 = new double[] { 1 };
        double[] doubleArray13 = new double[] { 1 };
        double[][] doubleArray14 = new double[][] { doubleArray5, doubleArray7, doubleArray9, doubleArray11, doubleArray13 };
        int[] intArray15 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray14, intArray15);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray2, intArray15);
        double[] doubleArray21 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray25 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray29 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray33 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray34 = new double[][] { doubleArray21, doubleArray25, doubleArray29, doubleArray33 };
        double[] doubleArray36 = new double[] { 1 };
        double[] doubleArray38 = new double[] { 1 };
        double[] doubleArray40 = new double[] { 1 };
        double[] doubleArray42 = new double[] { 1 };
        double[] doubleArray44 = new double[] { 1 };
        double[][] doubleArray45 = new double[][] { doubleArray36, doubleArray38, doubleArray40, doubleArray42, doubleArray44 };
        int[] intArray46 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray45, intArray46);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray34, intArray46);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray2, intArray46);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray1, intArray46);
        java.lang.Class<?> wildcardClass51 = intArray46.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[]");
        org.junit.Assert.assertNotNull(wildcardClass51);
    }

    @Test
    public void test0548() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0548");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[][] doubleArray5 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray4);
        double[][] doubleArray6 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray5);
        double[][] doubleArray7 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray5);
        double[] doubleArray14 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray21 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray28 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray35 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray36 = new double[][] { doubleArray14, doubleArray21, doubleArray28, doubleArray35 };
        double[][] doubleArray37 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray36);
        double[][] doubleArray38 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray37);
        double[][] doubleArray39 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray37);
        double[] doubleArray46 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray53 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray60 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray67 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray68 = new double[][] { doubleArray46, doubleArray53, doubleArray60, doubleArray67 };
        double[][] doubleArray69 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray68);
        double[][] doubleArray70 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray69);
        double[][] doubleArray71 = new double[][] {};
        double[][] doubleArray72 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray71);
        double[] doubleArray74 = new double[] { 1 };
        double[] doubleArray76 = new double[] { 1 };
        double[] doubleArray78 = new double[] { 1 };
        double[] doubleArray80 = new double[] { 1 };
        double[] doubleArray82 = new double[] { 1 };
        double[][] doubleArray83 = new double[][] { doubleArray74, doubleArray76, doubleArray78, doubleArray80, doubleArray82 };
        int[] intArray84 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray83, intArray84);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray71, intArray84);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray70, intArray84);
        double[][] doubleArray88 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray70);
        double[][] doubleArray89 = new double[][] {};
        double[][] doubleArray90 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray89);
        int[] intArray91 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray90, intArray91);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray88, intArray91);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray39, intArray91);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray7, intArray91);
        double[][] doubleArray96 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray7);
        java.lang.Class<?> wildcardClass97 = doubleArray7.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray74), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray78), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray80), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray82), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray83);
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray84), "[]");
        org.junit.Assert.assertNotNull(doubleArray88);
        org.junit.Assert.assertNotNull(doubleArray89);
        org.junit.Assert.assertNotNull(doubleArray90);
        org.junit.Assert.assertNotNull(intArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray91), "[]");
        org.junit.Assert.assertNotNull(doubleArray96);
        org.junit.Assert.assertNotNull(wildcardClass97);
    }

    @Test
    public void test0549() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0549");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray30 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray29);
        double[][] doubleArray31 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray29);
        double[][] doubleArray32 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray31);
        double[][] doubleArray33 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray32);
        double[][] doubleArray34 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray33);
        java.lang.Class<?> wildcardClass35 = doubleArray33.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertNotNull(wildcardClass35);
    }

    @Test
    public void test0550() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0550");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray5 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray6 = new double[][] {};
        double[][] doubleArray7 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray6);
        double[][] doubleArray8 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray6);
        double[][] doubleArray9 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray8);
        double[][] doubleArray10 = null;
        double[][] doubleArray11 = new double[][] {};
        double[][] doubleArray12 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray11);
        double[][] doubleArray13 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray12);
        double[] doubleArray17 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray21 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray25 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray29 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray30 = new double[][] { doubleArray17, doubleArray21, doubleArray25, doubleArray29 };
        double[] doubleArray32 = new double[] { 1 };
        double[] doubleArray34 = new double[] { 1 };
        double[] doubleArray36 = new double[] { 1 };
        double[] doubleArray38 = new double[] { 1 };
        double[] doubleArray40 = new double[] { 1 };
        double[][] doubleArray41 = new double[][] { doubleArray32, doubleArray34, doubleArray36, doubleArray38, doubleArray40 };
        int[] intArray42 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray41, intArray42);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray30, intArray42);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray13, intArray42);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray10, intArray42);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray9, intArray42);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray5, intArray42);
        double[][] doubleArray49 = new double[][] {};
        double[][] doubleArray50 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray49);
        double[][] doubleArray51 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray49);
        double[][] doubleArray52 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray49);
        double[][] doubleArray53 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray52);
        double[] doubleArray55 = new double[] { 1 };
        double[] doubleArray57 = new double[] { 1 };
        double[] doubleArray59 = new double[] { 1 };
        double[] doubleArray61 = new double[] { 1 };
        double[] doubleArray63 = new double[] { 1 };
        double[][] doubleArray64 = new double[][] { doubleArray55, doubleArray57, doubleArray59, doubleArray61, doubleArray63 };
        int[] intArray65 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray64, intArray65);
        double[][] doubleArray67 = new double[][] {};
        double[][] doubleArray68 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray67);
        int[] intArray69 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray68, intArray69);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray64, intArray69);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray52, intArray69);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray5, intArray69);
        java.lang.Class<?> wildcardClass74 = doubleArray5.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[]");
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[]");
        org.junit.Assert.assertNotNull(wildcardClass74);
    }

    @Test
    public void test0551() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0551");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = new double[][] {};
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[] doubleArray8 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray12 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray16 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray20 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray21 = new double[][] { doubleArray8, doubleArray12, doubleArray16, doubleArray20 };
        double[] doubleArray23 = new double[] { 1 };
        double[] doubleArray25 = new double[] { 1 };
        double[] doubleArray27 = new double[] { 1 };
        double[] doubleArray29 = new double[] { 1 };
        double[] doubleArray31 = new double[] { 1 };
        double[][] doubleArray32 = new double[][] { doubleArray23, doubleArray25, doubleArray27, doubleArray29, doubleArray31 };
        int[] intArray33 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray32, intArray33);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray21, intArray33);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray3, intArray33);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray1, intArray33);
        double[][] doubleArray38 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray39 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray38);
        double[][] doubleArray40 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray38);
        double[][] doubleArray41 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray38);
        double[][] doubleArray42 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray38);
        java.lang.Class<?> wildcardClass43 = doubleArray38.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertNotNull(wildcardClass43);
    }

    @Test
    public void test0552() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0552");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[][] doubleArray5 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray4);
        double[][] doubleArray6 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray4);
        double[][] doubleArray7 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray4);
        double[][] doubleArray8 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray7);
        int[] intArray9 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray8, intArray9);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertNotNull(doubleArray8);
    }

    @Test
    public void test0553() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0553");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[] doubleArray3 = new double[] { 1 };
        double[] doubleArray5 = new double[] { 1 };
        double[] doubleArray7 = new double[] { 1 };
        double[] doubleArray9 = new double[] { 1 };
        double[] doubleArray11 = new double[] { 1 };
        double[][] doubleArray12 = new double[][] { doubleArray3, doubleArray5, doubleArray7, doubleArray9, doubleArray11 };
        int[] intArray13 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray12, intArray13);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray0, intArray13);
        double[] doubleArray19 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray23 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray27 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray31 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray32 = new double[][] { doubleArray19, doubleArray23, doubleArray27, doubleArray31 };
        double[] doubleArray34 = new double[] { 1 };
        double[] doubleArray36 = new double[] { 1 };
        double[] doubleArray38 = new double[] { 1 };
        double[] doubleArray40 = new double[] { 1 };
        double[] doubleArray42 = new double[] { 1 };
        double[][] doubleArray43 = new double[][] { doubleArray34, doubleArray36, doubleArray38, doubleArray40, doubleArray42 };
        int[] intArray44 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray43, intArray44);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray32, intArray44);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray0, intArray44);
        double[] doubleArray49 = new double[] { 1 };
        double[] doubleArray51 = new double[] { 1 };
        double[] doubleArray53 = new double[] { 1 };
        double[] doubleArray55 = new double[] { 1 };
        double[] doubleArray57 = new double[] { 1 };
        double[][] doubleArray58 = new double[][] { doubleArray49, doubleArray51, doubleArray53, doubleArray55, doubleArray57 };
        int[] intArray59 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray58, intArray59);
        double[][] doubleArray61 = new double[][] {};
        double[][] doubleArray62 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray61);
        int[] intArray63 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray62, intArray63);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray58, intArray63);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray0, intArray63);
        double[][] doubleArray67 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray68 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray67);
        double[][] doubleArray69 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray68);
        double[][] doubleArray70 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray68);
        double[][] doubleArray71 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray68);
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[]");
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertNotNull(doubleArray71);
    }

    @Test
    public void test0554() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0554");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[] doubleArray3 = new double[] { 1 };
        double[] doubleArray5 = new double[] { 1 };
        double[] doubleArray7 = new double[] { 1 };
        double[] doubleArray9 = new double[] { 1 };
        double[] doubleArray11 = new double[] { 1 };
        double[][] doubleArray12 = new double[][] { doubleArray3, doubleArray5, doubleArray7, doubleArray9, doubleArray11 };
        int[] intArray13 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray12, intArray13);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray0, intArray13);
        double[] doubleArray19 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray23 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray27 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray31 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray32 = new double[][] { doubleArray19, doubleArray23, doubleArray27, doubleArray31 };
        double[] doubleArray34 = new double[] { 1 };
        double[] doubleArray36 = new double[] { 1 };
        double[] doubleArray38 = new double[] { 1 };
        double[] doubleArray40 = new double[] { 1 };
        double[] doubleArray42 = new double[] { 1 };
        double[][] doubleArray43 = new double[][] { doubleArray34, doubleArray36, doubleArray38, doubleArray40, doubleArray42 };
        int[] intArray44 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray43, intArray44);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray32, intArray44);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray0, intArray44);
        double[] doubleArray49 = new double[] { 1 };
        double[] doubleArray51 = new double[] { 1 };
        double[] doubleArray53 = new double[] { 1 };
        double[] doubleArray55 = new double[] { 1 };
        double[] doubleArray57 = new double[] { 1 };
        double[][] doubleArray58 = new double[][] { doubleArray49, doubleArray51, doubleArray53, doubleArray55, doubleArray57 };
        int[] intArray59 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray58, intArray59);
        double[][] doubleArray61 = new double[][] {};
        double[][] doubleArray62 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray61);
        int[] intArray63 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray62, intArray63);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray58, intArray63);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray0, intArray63);
        double[][] doubleArray67 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray68 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray69 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray70 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray71 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray72 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray71);
        java.lang.Class<?> wildcardClass73 = doubleArray72.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[]");
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertNotNull(wildcardClass73);
    }

    @Test
    public void test0555() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0555");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[][] doubleArray5 = null;
        double[][] doubleArray6 = new double[][] {};
        double[][] doubleArray7 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray6);
        double[][] doubleArray8 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray7);
        double[] doubleArray12 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray16 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray20 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray24 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray25 = new double[][] { doubleArray12, doubleArray16, doubleArray20, doubleArray24 };
        double[] doubleArray27 = new double[] { 1 };
        double[] doubleArray29 = new double[] { 1 };
        double[] doubleArray31 = new double[] { 1 };
        double[] doubleArray33 = new double[] { 1 };
        double[] doubleArray35 = new double[] { 1 };
        double[][] doubleArray36 = new double[][] { doubleArray27, doubleArray29, doubleArray31, doubleArray33, doubleArray35 };
        int[] intArray37 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray36, intArray37);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray25, intArray37);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray8, intArray37);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray5, intArray37);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray3, intArray37);
        double[][] doubleArray43 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[][] doubleArray44 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray43);
        java.lang.Class<?> wildcardClass45 = doubleArray44.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertNotNull(wildcardClass45);
    }

    @Test
    public void test0556() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0556");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray30 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray29);
        double[][] doubleArray31 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        double[][] doubleArray32 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray31);
        double[][] doubleArray33 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray31);
        double[][] doubleArray34 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray33);
        double[][] doubleArray35 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray34);
        java.lang.Class<?> wildcardClass36 = doubleArray35.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertNotNull(wildcardClass36);
    }

    @Test
    public void test0557() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0557");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray30 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray31 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray32 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[] doubleArray39 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray46 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray53 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray60 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray61 = new double[][] { doubleArray39, doubleArray46, doubleArray53, doubleArray60 };
        double[][] doubleArray62 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray61);
        double[][] doubleArray63 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray61);
        double[][] doubleArray64 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray61);
        double[][] doubleArray65 = new double[][] {};
        double[][] doubleArray66 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray65);
        int[] intArray67 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray66, intArray67);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray64, intArray67);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray28, intArray67);
        double[][] doubleArray71 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        java.lang.Class<?> wildcardClass72 = doubleArray71.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[]");
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertNotNull(wildcardClass72);
    }

    @Test
    public void test0558() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0558");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[] doubleArray31 = new double[] { 1 };
        double[] doubleArray33 = new double[] { 1 };
        double[] doubleArray35 = new double[] { 1 };
        double[] doubleArray37 = new double[] { 1 };
        double[] doubleArray39 = new double[] { 1 };
        double[][] doubleArray40 = new double[][] { doubleArray31, doubleArray33, doubleArray35, doubleArray37, doubleArray39 };
        int[] intArray41 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray40, intArray41);
        double[][] doubleArray43 = new double[][] {};
        double[][] doubleArray44 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray43);
        int[] intArray45 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray44, intArray45);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray40, intArray45);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray28, intArray45);
        double[][] doubleArray49 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray50 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray51 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray52 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray51);
        double[][] doubleArray53 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray51);
        double[][] doubleArray54 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray53);
        double[][] doubleArray55 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray54);
        java.lang.Class<?> wildcardClass56 = doubleArray54.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertNotNull(wildcardClass56);
    }

    @Test
    public void test0559() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0559");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[] doubleArray9 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray16 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray23 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray30 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray31 = new double[][] { doubleArray9, doubleArray16, doubleArray23, doubleArray30 };
        double[][] doubleArray32 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray31);
        double[] doubleArray34 = new double[] { 1 };
        double[] doubleArray36 = new double[] { 1 };
        double[] doubleArray38 = new double[] { 1 };
        double[] doubleArray40 = new double[] { 1 };
        double[] doubleArray42 = new double[] { 1 };
        double[][] doubleArray43 = new double[][] { doubleArray34, doubleArray36, doubleArray38, doubleArray40, doubleArray42 };
        int[] intArray44 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray43, intArray44);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray32, intArray44);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray1, intArray44);
        double[][] doubleArray48 = new double[][] {};
        double[][] doubleArray49 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray48);
        double[][] doubleArray50 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray49);
        double[] doubleArray57 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray64 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray71 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray78 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray79 = new double[][] { doubleArray57, doubleArray64, doubleArray71, doubleArray78 };
        double[][] doubleArray80 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray79);
        double[] doubleArray82 = new double[] { 1 };
        double[] doubleArray84 = new double[] { 1 };
        double[] doubleArray86 = new double[] { 1 };
        double[] doubleArray88 = new double[] { 1 };
        double[] doubleArray90 = new double[] { 1 };
        double[][] doubleArray91 = new double[][] { doubleArray82, doubleArray84, doubleArray86, doubleArray88, doubleArray90 };
        int[] intArray92 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray91, intArray92);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray80, intArray92);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray49, intArray92);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray1, intArray92);
        double[][] doubleArray97 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray98 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray99 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray98);
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray71), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray78), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertNotNull(doubleArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray82), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray84), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray86), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray88), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray90), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray91);
        org.junit.Assert.assertNotNull(intArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray92), "[]");
        org.junit.Assert.assertNotNull(doubleArray97);
        org.junit.Assert.assertNotNull(doubleArray98);
        org.junit.Assert.assertNotNull(doubleArray99);
    }

    @Test
    public void test0560() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0560");
        double[] doubleArray3 = new double[] { 0, 1, 10L };
        double[][] doubleArray4 = new double[][] { doubleArray3 };
        double[][] doubleArray5 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray4);
        java.lang.Class<?> wildcardClass6 = doubleArray5.getClass();
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[0.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(wildcardClass6);
    }

    @Test
    public void test0561() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0561");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray30 = new double[][] {};
        double[][] doubleArray31 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        double[] doubleArray33 = new double[] { 1 };
        double[] doubleArray35 = new double[] { 1 };
        double[] doubleArray37 = new double[] { 1 };
        double[] doubleArray39 = new double[] { 1 };
        double[] doubleArray41 = new double[] { 1 };
        double[][] doubleArray42 = new double[][] { doubleArray33, doubleArray35, doubleArray37, doubleArray39, doubleArray41 };
        int[] intArray43 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray42, intArray43);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray30, intArray43);
        double[] doubleArray49 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray53 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray57 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray61 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray62 = new double[][] { doubleArray49, doubleArray53, doubleArray57, doubleArray61 };
        double[] doubleArray64 = new double[] { 1 };
        double[] doubleArray66 = new double[] { 1 };
        double[] doubleArray68 = new double[] { 1 };
        double[] doubleArray70 = new double[] { 1 };
        double[] doubleArray72 = new double[] { 1 };
        double[][] doubleArray73 = new double[][] { doubleArray64, doubleArray66, doubleArray68, doubleArray70, doubleArray72 };
        int[] intArray74 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray73, intArray74);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray62, intArray74);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray30, intArray74);
        double[][] doubleArray78 = new double[][] {};
        double[][] doubleArray79 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray78);
        double[] doubleArray81 = new double[] { 1 };
        double[] doubleArray83 = new double[] { 1 };
        double[] doubleArray85 = new double[] { 1 };
        double[] doubleArray87 = new double[] { 1 };
        double[] doubleArray89 = new double[] { 1 };
        double[][] doubleArray90 = new double[][] { doubleArray81, doubleArray83, doubleArray85, doubleArray87, doubleArray89 };
        int[] intArray91 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray90, intArray91);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray78, intArray91);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray30, intArray91);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray28, intArray91);
        java.lang.Class<?> wildcardClass96 = doubleArray28.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray66), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray70), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[]");
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertNotNull(doubleArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray81), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray83), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray85), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray87), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray89), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray90);
        org.junit.Assert.assertNotNull(intArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray91), "[]");
        org.junit.Assert.assertNotNull(wildcardClass96);
    }

    @Test
    public void test0562() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0562");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray30 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray29);
        double[][] doubleArray31 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        double[][] doubleArray32 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray31);
        double[][] doubleArray33 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray31);
        double[][] doubleArray34 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray31);
        double[][] doubleArray35 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray31);
        double[][] doubleArray36 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray35);
        java.lang.Class<?> wildcardClass37 = doubleArray36.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertNotNull(wildcardClass37);
    }

    @Test
    public void test0563() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0563");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray3 = new double[][] {};
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[][] doubleArray5 = new double[][] {};
        double[][] doubleArray6 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray5);
        double[] doubleArray8 = new double[] { 1 };
        double[] doubleArray10 = new double[] { 1 };
        double[] doubleArray12 = new double[] { 1 };
        double[] doubleArray14 = new double[] { 1 };
        double[] doubleArray16 = new double[] { 1 };
        double[][] doubleArray17 = new double[][] { doubleArray8, doubleArray10, doubleArray12, doubleArray14, doubleArray16 };
        int[] intArray18 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray17, intArray18);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray5, intArray18);
        double[] doubleArray24 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray28 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray32 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray36 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray37 = new double[][] { doubleArray24, doubleArray28, doubleArray32, doubleArray36 };
        double[] doubleArray39 = new double[] { 1 };
        double[] doubleArray41 = new double[] { 1 };
        double[] doubleArray43 = new double[] { 1 };
        double[] doubleArray45 = new double[] { 1 };
        double[] doubleArray47 = new double[] { 1 };
        double[][] doubleArray48 = new double[][] { doubleArray39, doubleArray41, doubleArray43, doubleArray45, doubleArray47 };
        int[] intArray49 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray48, intArray49);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray37, intArray49);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray5, intArray49);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray4, intArray49);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray2, intArray49);
        double[][] doubleArray55 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray56 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray55);
        java.lang.Class<?> wildcardClass57 = doubleArray55.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[]");
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[]");
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertNotNull(wildcardClass57);
    }

    @Test
    public void test0564() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0564");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray30 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray29);
        double[][] doubleArray31 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        double[][] doubleArray32 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        double[][] doubleArray33 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        double[][] doubleArray34 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray33);
        double[][] doubleArray35 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray33);
        double[][] doubleArray36 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray33);
        java.lang.Class<?> wildcardClass37 = doubleArray36.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertNotNull(wildcardClass37);
    }

    @Test
    public void test0565() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0565");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[] doubleArray3 = new double[] { 1 };
        double[] doubleArray5 = new double[] { 1 };
        double[] doubleArray7 = new double[] { 1 };
        double[] doubleArray9 = new double[] { 1 };
        double[] doubleArray11 = new double[] { 1 };
        double[][] doubleArray12 = new double[][] { doubleArray3, doubleArray5, doubleArray7, doubleArray9, doubleArray11 };
        int[] intArray13 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray12, intArray13);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray0, intArray13);
        double[] doubleArray19 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray23 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray27 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray31 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray32 = new double[][] { doubleArray19, doubleArray23, doubleArray27, doubleArray31 };
        double[] doubleArray34 = new double[] { 1 };
        double[] doubleArray36 = new double[] { 1 };
        double[] doubleArray38 = new double[] { 1 };
        double[] doubleArray40 = new double[] { 1 };
        double[] doubleArray42 = new double[] { 1 };
        double[][] doubleArray43 = new double[][] { doubleArray34, doubleArray36, doubleArray38, doubleArray40, doubleArray42 };
        int[] intArray44 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray43, intArray44);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray32, intArray44);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray0, intArray44);
        double[] doubleArray49 = new double[] { 1 };
        double[] doubleArray51 = new double[] { 1 };
        double[] doubleArray53 = new double[] { 1 };
        double[] doubleArray55 = new double[] { 1 };
        double[] doubleArray57 = new double[] { 1 };
        double[][] doubleArray58 = new double[][] { doubleArray49, doubleArray51, doubleArray53, doubleArray55, doubleArray57 };
        int[] intArray59 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray58, intArray59);
        double[][] doubleArray61 = new double[][] {};
        double[][] doubleArray62 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray61);
        int[] intArray63 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray62, intArray63);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray58, intArray63);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray0, intArray63);
        double[][] doubleArray67 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray68 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray67);
        double[][] doubleArray69 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray68);
        double[][] doubleArray70 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray68);
        java.lang.Class<?> wildcardClass71 = doubleArray70.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[]");
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertNotNull(wildcardClass71);
    }

    @Test
    public void test0566() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0566");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray30 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray29);
        double[][] doubleArray31 = new double[][] {};
        double[][] doubleArray32 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray31);
        double[] doubleArray34 = new double[] { 1 };
        double[] doubleArray36 = new double[] { 1 };
        double[] doubleArray38 = new double[] { 1 };
        double[] doubleArray40 = new double[] { 1 };
        double[] doubleArray42 = new double[] { 1 };
        double[][] doubleArray43 = new double[][] { doubleArray34, doubleArray36, doubleArray38, doubleArray40, doubleArray42 };
        int[] intArray44 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray43, intArray44);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray31, intArray44);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray30, intArray44);
        double[][] doubleArray48 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        double[][] doubleArray49 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        int[] intArray50 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray30, intArray50);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertNotNull(doubleArray49);
    }

    @Test
    public void test0567() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0567");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray30 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray31 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[] doubleArray33 = new double[] { 1 };
        double[] doubleArray35 = new double[] { 1 };
        double[] doubleArray37 = new double[] { 1 };
        double[] doubleArray39 = new double[] { 1 };
        double[] doubleArray41 = new double[] { 1 };
        double[][] doubleArray42 = new double[][] { doubleArray33, doubleArray35, doubleArray37, doubleArray39, doubleArray41 };
        int[] intArray43 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray42, intArray43);
        double[] doubleArray51 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray58 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray65 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray72 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray73 = new double[][] { doubleArray51, doubleArray58, doubleArray65, doubleArray72 };
        double[][] doubleArray74 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray73);
        double[] doubleArray76 = new double[] { 1 };
        double[] doubleArray78 = new double[] { 1 };
        double[] doubleArray80 = new double[] { 1 };
        double[] doubleArray82 = new double[] { 1 };
        double[] doubleArray84 = new double[] { 1 };
        double[][] doubleArray85 = new double[][] { doubleArray76, doubleArray78, doubleArray80, doubleArray82, doubleArray84 };
        int[] intArray86 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray85, intArray86);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray74, intArray86);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray42, intArray86);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray31, intArray86);
        double[][] doubleArray91 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray31);
        double[][] doubleArray92 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray31);
        double[][] doubleArray93 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray31);
        double[][] doubleArray94 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray31);
        java.lang.Class<?> wildcardClass95 = doubleArray94.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray78), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray80), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray82), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray84), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray85);
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray86), "[]");
        org.junit.Assert.assertNotNull(doubleArray91);
        org.junit.Assert.assertNotNull(doubleArray92);
        org.junit.Assert.assertNotNull(doubleArray93);
        org.junit.Assert.assertNotNull(doubleArray94);
        org.junit.Assert.assertNotNull(wildcardClass95);
    }

    @Test
    public void test0568() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0568");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[] doubleArray9 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray16 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray23 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray30 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray31 = new double[][] { doubleArray9, doubleArray16, doubleArray23, doubleArray30 };
        double[][] doubleArray32 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray31);
        double[][] doubleArray33 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray31);
        double[][] doubleArray34 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray31);
        double[][] doubleArray35 = new double[][] {};
        double[][] doubleArray36 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray35);
        int[] intArray37 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray36, intArray37);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray34, intArray37);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray2, intArray37);
        double[][] doubleArray41 = null;
        double[][] doubleArray42 = new double[][] {};
        double[][] doubleArray43 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray42);
        double[][] doubleArray44 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray43);
        double[] doubleArray48 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray52 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray56 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray60 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray61 = new double[][] { doubleArray48, doubleArray52, doubleArray56, doubleArray60 };
        double[] doubleArray63 = new double[] { 1 };
        double[] doubleArray65 = new double[] { 1 };
        double[] doubleArray67 = new double[] { 1 };
        double[] doubleArray69 = new double[] { 1 };
        double[] doubleArray71 = new double[] { 1 };
        double[][] doubleArray72 = new double[][] { doubleArray63, doubleArray65, doubleArray67, doubleArray69, doubleArray71 };
        int[] intArray73 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray72, intArray73);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray61, intArray73);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray44, intArray73);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray41, intArray73);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray2, intArray73);
        double[][] doubleArray79 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray80 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray81 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray82 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray81);
        java.lang.Class<?> wildcardClass83 = doubleArray82.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray71), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[]");
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertNotNull(doubleArray81);
        org.junit.Assert.assertNotNull(doubleArray82);
        org.junit.Assert.assertNotNull(wildcardClass83);
    }

    @Test
    public void test0569() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0569");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray30 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray29);
        double[][] doubleArray31 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray29);
        double[][] doubleArray32 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray29);
        java.lang.Class<?> wildcardClass33 = doubleArray32.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(wildcardClass33);
    }

    @Test
    public void test0570() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0570");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray30 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray31 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        double[][] doubleArray32 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        double[][] doubleArray33 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray32);
        double[][] doubleArray34 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray33);
        double[][] doubleArray35 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray34);
        double[][] doubleArray36 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray34);
        java.lang.Class<?> wildcardClass37 = doubleArray34.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertNotNull(wildcardClass37);
    }

    @Test
    public void test0571() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0571");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray30 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray31 = new double[][] {};
        double[][] doubleArray32 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray31);
        double[][] doubleArray33 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray31);
        double[][] doubleArray34 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray31);
        double[] doubleArray41 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray48 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray55 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray62 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray63 = new double[][] { doubleArray41, doubleArray48, doubleArray55, doubleArray62 };
        double[][] doubleArray64 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray63);
        double[][] doubleArray65 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray64);
        double[][] doubleArray66 = new double[][] {};
        double[][] doubleArray67 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray66);
        double[] doubleArray69 = new double[] { 1 };
        double[] doubleArray71 = new double[] { 1 };
        double[] doubleArray73 = new double[] { 1 };
        double[] doubleArray75 = new double[] { 1 };
        double[] doubleArray77 = new double[] { 1 };
        double[][] doubleArray78 = new double[][] { doubleArray69, doubleArray71, doubleArray73, doubleArray75, doubleArray77 };
        int[] intArray79 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray78, intArray79);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray66, intArray79);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray65, intArray79);
        double[][] doubleArray83 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray65);
        double[] doubleArray85 = new double[] { 1 };
        double[] doubleArray87 = new double[] { 1 };
        double[] doubleArray89 = new double[] { 1 };
        double[] doubleArray91 = new double[] { 1 };
        double[] doubleArray93 = new double[] { 1 };
        double[][] doubleArray94 = new double[][] { doubleArray85, doubleArray87, doubleArray89, doubleArray91, doubleArray93 };
        int[] intArray95 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray94, intArray95);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray83, intArray95);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray31, intArray95);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray30, intArray95);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray71), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray73), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray75), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray77), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray79), "[]");
        org.junit.Assert.assertNotNull(doubleArray83);
        org.junit.Assert.assertNotNull(doubleArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray85), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray87), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray89), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray91), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray93);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray93), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray94);
        org.junit.Assert.assertNotNull(intArray95);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray95), "[]");
    }

    @Test
    public void test0572() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0572");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[] doubleArray31 = new double[] { 1 };
        double[] doubleArray33 = new double[] { 1 };
        double[] doubleArray35 = new double[] { 1 };
        double[] doubleArray37 = new double[] { 1 };
        double[] doubleArray39 = new double[] { 1 };
        double[][] doubleArray40 = new double[][] { doubleArray31, doubleArray33, doubleArray35, doubleArray37, doubleArray39 };
        int[] intArray41 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray40, intArray41);
        double[][] doubleArray43 = new double[][] {};
        double[][] doubleArray44 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray43);
        int[] intArray45 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray44, intArray45);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray40, intArray45);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray28, intArray45);
        double[][] doubleArray49 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray50 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray49);
        double[][] doubleArray51 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray50);
        double[][] doubleArray52 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray50);
        double[][] doubleArray53 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray50);
        double[][] doubleArray54 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray50);
        double[][] doubleArray55 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray54);
        java.lang.Class<?> wildcardClass56 = doubleArray55.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertNotNull(wildcardClass56);
    }

    @Test
    public void test0573() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0573");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[] doubleArray10 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray17 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray24 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray31 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray32 = new double[][] { doubleArray10, doubleArray17, doubleArray24, doubleArray31 };
        double[][] doubleArray33 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray32);
        double[][] doubleArray34 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray32);
        double[][] doubleArray35 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray32);
        double[][] doubleArray36 = new double[][] {};
        double[][] doubleArray37 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray36);
        int[] intArray38 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray37, intArray38);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray35, intArray38);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray3, intArray38);
        double[][] doubleArray42 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        java.lang.Class<?> wildcardClass43 = doubleArray42.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertNotNull(wildcardClass43);
    }

    @Test
    public void test0574() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0574");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = new double[][] {};
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[] doubleArray8 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray12 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray16 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray20 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray21 = new double[][] { doubleArray8, doubleArray12, doubleArray16, doubleArray20 };
        double[] doubleArray23 = new double[] { 1 };
        double[] doubleArray25 = new double[] { 1 };
        double[] doubleArray27 = new double[] { 1 };
        double[] doubleArray29 = new double[] { 1 };
        double[] doubleArray31 = new double[] { 1 };
        double[][] doubleArray32 = new double[][] { doubleArray23, doubleArray25, doubleArray27, doubleArray29, doubleArray31 };
        int[] intArray33 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray32, intArray33);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray21, intArray33);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray3, intArray33);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray1, intArray33);
        double[][] doubleArray38 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray39 = new double[][] {};
        double[][] doubleArray40 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray39);
        double[][] doubleArray41 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray39);
        double[][] doubleArray42 = new double[][] {};
        double[][] doubleArray43 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray42);
        double[][] doubleArray44 = new double[][] {};
        double[][] doubleArray45 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray44);
        double[] doubleArray47 = new double[] { 1 };
        double[] doubleArray49 = new double[] { 1 };
        double[] doubleArray51 = new double[] { 1 };
        double[] doubleArray53 = new double[] { 1 };
        double[] doubleArray55 = new double[] { 1 };
        double[][] doubleArray56 = new double[][] { doubleArray47, doubleArray49, doubleArray51, doubleArray53, doubleArray55 };
        int[] intArray57 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray56, intArray57);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray44, intArray57);
        double[] doubleArray63 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray67 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray71 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray75 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray76 = new double[][] { doubleArray63, doubleArray67, doubleArray71, doubleArray75 };
        double[] doubleArray78 = new double[] { 1 };
        double[] doubleArray80 = new double[] { 1 };
        double[] doubleArray82 = new double[] { 1 };
        double[] doubleArray84 = new double[] { 1 };
        double[] doubleArray86 = new double[] { 1 };
        double[][] doubleArray87 = new double[][] { doubleArray78, doubleArray80, doubleArray82, doubleArray84, doubleArray86 };
        int[] intArray88 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray87, intArray88);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray76, intArray88);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray44, intArray88);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray42, intArray88);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray39, intArray88);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray38, intArray88);
        java.lang.Class<?> wildcardClass95 = doubleArray38.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[]");
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray71), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray75), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray78), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray80), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray82), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray84), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray86), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray87);
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray88), "[]");
        org.junit.Assert.assertNotNull(wildcardClass95);
    }

    @Test
    public void test0575() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0575");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray5 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray6 = new double[][] {};
        double[][] doubleArray7 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray6);
        double[][] doubleArray8 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray6);
        double[] doubleArray15 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray22 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray29 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray36 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray37 = new double[][] { doubleArray15, doubleArray22, doubleArray29, doubleArray36 };
        double[][] doubleArray38 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray37);
        double[][] doubleArray39 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray37);
        double[][] doubleArray40 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray37);
        double[][] doubleArray41 = new double[][] {};
        double[][] doubleArray42 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray41);
        int[] intArray43 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray42, intArray43);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray40, intArray43);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray8, intArray43);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray2, intArray43);
        java.lang.Class<?> wildcardClass48 = doubleArray2.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[]");
        org.junit.Assert.assertNotNull(wildcardClass48);
    }

    @Test
    public void test0576() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0576");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[][] doubleArray5 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray4);
        double[][] doubleArray6 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray5);
        double[][] doubleArray7 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray5);
        java.lang.Class<?> wildcardClass8 = doubleArray5.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertNotNull(wildcardClass8);
    }

    @Test
    public void test0577() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0577");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[] doubleArray31 = new double[] { 1 };
        double[] doubleArray33 = new double[] { 1 };
        double[] doubleArray35 = new double[] { 1 };
        double[] doubleArray37 = new double[] { 1 };
        double[] doubleArray39 = new double[] { 1 };
        double[][] doubleArray40 = new double[][] { doubleArray31, doubleArray33, doubleArray35, doubleArray37, doubleArray39 };
        int[] intArray41 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray40, intArray41);
        double[][] doubleArray43 = new double[][] {};
        double[][] doubleArray44 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray43);
        int[] intArray45 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray44, intArray45);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray40, intArray45);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray28, intArray45);
        double[][] doubleArray49 = null;
        double[][] doubleArray50 = new double[][] {};
        double[][] doubleArray51 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray50);
        double[][] doubleArray52 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray51);
        double[] doubleArray56 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray60 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray64 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray68 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray69 = new double[][] { doubleArray56, doubleArray60, doubleArray64, doubleArray68 };
        double[] doubleArray71 = new double[] { 1 };
        double[] doubleArray73 = new double[] { 1 };
        double[] doubleArray75 = new double[] { 1 };
        double[] doubleArray77 = new double[] { 1 };
        double[] doubleArray79 = new double[] { 1 };
        double[][] doubleArray80 = new double[][] { doubleArray71, doubleArray73, doubleArray75, doubleArray77, doubleArray79 };
        int[] intArray81 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray80, intArray81);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray69, intArray81);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray52, intArray81);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray49, intArray81);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray28, intArray81);
        double[][] doubleArray87 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray88 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray87);
        java.lang.Class<?> wildcardClass89 = doubleArray87.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[]");
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray71), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray73), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray75), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray77), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray79), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray81), "[]");
        org.junit.Assert.assertNotNull(doubleArray87);
        org.junit.Assert.assertNotNull(doubleArray88);
        org.junit.Assert.assertNotNull(wildcardClass89);
    }

    @Test
    public void test0578() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0578");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray5 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray6 = new double[][] {};
        double[][] doubleArray7 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray6);
        double[][] doubleArray8 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray6);
        double[][] doubleArray9 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray6);
        double[][] doubleArray10 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray9);
        double[] doubleArray17 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray24 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray31 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray38 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray39 = new double[][] { doubleArray17, doubleArray24, doubleArray31, doubleArray38 };
        double[][] doubleArray40 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray39);
        double[][] doubleArray41 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray40);
        double[][] doubleArray42 = new double[][] {};
        double[][] doubleArray43 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray42);
        double[] doubleArray45 = new double[] { 1 };
        double[] doubleArray47 = new double[] { 1 };
        double[] doubleArray49 = new double[] { 1 };
        double[] doubleArray51 = new double[] { 1 };
        double[] doubleArray53 = new double[] { 1 };
        double[][] doubleArray54 = new double[][] { doubleArray45, doubleArray47, doubleArray49, doubleArray51, doubleArray53 };
        int[] intArray55 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray54, intArray55);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray42, intArray55);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray41, intArray55);
        double[][] doubleArray59 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray41);
        double[] doubleArray61 = new double[] { 1 };
        double[] doubleArray63 = new double[] { 1 };
        double[] doubleArray65 = new double[] { 1 };
        double[] doubleArray67 = new double[] { 1 };
        double[] doubleArray69 = new double[] { 1 };
        double[][] doubleArray70 = new double[][] { doubleArray61, doubleArray63, doubleArray65, doubleArray67, doubleArray69 };
        int[] intArray71 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray70, intArray71);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray59, intArray71);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray9, intArray71);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray5, intArray71);
        double[][] doubleArray76 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray5);
        java.lang.Class<?> wildcardClass77 = doubleArray5.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[]");
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[]");
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertNotNull(wildcardClass77);
    }

    @Test
    public void test0579() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0579");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[] doubleArray3 = new double[] { 1 };
        double[] doubleArray5 = new double[] { 1 };
        double[] doubleArray7 = new double[] { 1 };
        double[] doubleArray9 = new double[] { 1 };
        double[] doubleArray11 = new double[] { 1 };
        double[][] doubleArray12 = new double[][] { doubleArray3, doubleArray5, doubleArray7, doubleArray9, doubleArray11 };
        int[] intArray13 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray12, intArray13);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray0, intArray13);
        double[] doubleArray19 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray23 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray27 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray31 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray32 = new double[][] { doubleArray19, doubleArray23, doubleArray27, doubleArray31 };
        double[] doubleArray34 = new double[] { 1 };
        double[] doubleArray36 = new double[] { 1 };
        double[] doubleArray38 = new double[] { 1 };
        double[] doubleArray40 = new double[] { 1 };
        double[] doubleArray42 = new double[] { 1 };
        double[][] doubleArray43 = new double[][] { doubleArray34, doubleArray36, doubleArray38, doubleArray40, doubleArray42 };
        int[] intArray44 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray43, intArray44);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray32, intArray44);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray0, intArray44);
        double[][] doubleArray48 = new double[][] {};
        double[][] doubleArray49 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray48);
        double[] doubleArray51 = new double[] { 1 };
        double[] doubleArray53 = new double[] { 1 };
        double[] doubleArray55 = new double[] { 1 };
        double[] doubleArray57 = new double[] { 1 };
        double[] doubleArray59 = new double[] { 1 };
        double[][] doubleArray60 = new double[][] { doubleArray51, doubleArray53, doubleArray55, doubleArray57, doubleArray59 };
        int[] intArray61 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray60, intArray61);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray48, intArray61);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray0, intArray61);
        double[][] doubleArray65 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        java.lang.Class<?> wildcardClass66 = doubleArray0.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[]");
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertNotNull(wildcardClass66);
    }

    @Test
    public void test0580() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0580");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray30 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray29);
        double[][] doubleArray31 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        double[][] doubleArray32 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray31);
        double[][] doubleArray33 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray31);
        double[][] doubleArray34 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray33);
        double[][] doubleArray35 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray34);
        double[][] doubleArray36 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray34);
        java.lang.Class<?> wildcardClass37 = doubleArray34.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertNotNull(wildcardClass37);
    }

    @Test
    public void test0581() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0581");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        int[] intArray2 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray1, intArray2);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray5 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray4);
        double[] doubleArray12 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray19 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray26 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray33 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray34 = new double[][] { doubleArray12, doubleArray19, doubleArray26, doubleArray33 };
        double[][] doubleArray35 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray34);
        double[][] doubleArray36 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray35);
        double[][] doubleArray37 = new double[][] {};
        double[][] doubleArray38 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray37);
        double[] doubleArray40 = new double[] { 1 };
        double[] doubleArray42 = new double[] { 1 };
        double[] doubleArray44 = new double[] { 1 };
        double[] doubleArray46 = new double[] { 1 };
        double[] doubleArray48 = new double[] { 1 };
        double[][] doubleArray49 = new double[][] { doubleArray40, doubleArray42, doubleArray44, doubleArray46, doubleArray48 };
        int[] intArray50 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray49, intArray50);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray37, intArray50);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray36, intArray50);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray5, intArray50);
        java.lang.Class<?> wildcardClass55 = doubleArray5.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[]");
        org.junit.Assert.assertNotNull(wildcardClass55);
    }

    @Test
    public void test0582() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0582");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[][] doubleArray5 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[][] doubleArray6 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray5);
        double[][] doubleArray7 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray5);
        java.lang.Class<?> wildcardClass8 = doubleArray7.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertNotNull(wildcardClass8);
    }

    @Test
    public void test0583() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0583");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray30 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray29);
        double[][] doubleArray31 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        double[][] doubleArray32 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        double[][] doubleArray33 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        java.lang.Class<?> wildcardClass34 = doubleArray30.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertNotNull(wildcardClass34);
    }

    @Test
    public void test0584() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0584");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        int[] intArray2 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray1, intArray2);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray5 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray4);
        double[] doubleArray12 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray19 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray26 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray33 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray34 = new double[][] { doubleArray12, doubleArray19, doubleArray26, doubleArray33 };
        double[][] doubleArray35 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray34);
        double[][] doubleArray36 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray35);
        double[][] doubleArray37 = new double[][] {};
        double[][] doubleArray38 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray37);
        double[] doubleArray40 = new double[] { 1 };
        double[] doubleArray42 = new double[] { 1 };
        double[] doubleArray44 = new double[] { 1 };
        double[] doubleArray46 = new double[] { 1 };
        double[] doubleArray48 = new double[] { 1 };
        double[][] doubleArray49 = new double[][] { doubleArray40, doubleArray42, doubleArray44, doubleArray46, doubleArray48 };
        int[] intArray50 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray49, intArray50);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray37, intArray50);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray36, intArray50);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray5, intArray50);
        java.lang.Class<?> wildcardClass55 = intArray50.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[]");
        org.junit.Assert.assertNotNull(wildcardClass55);
    }

    @Test
    public void test0585() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0585");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[] doubleArray31 = new double[] { 1 };
        double[] doubleArray33 = new double[] { 1 };
        double[] doubleArray35 = new double[] { 1 };
        double[] doubleArray37 = new double[] { 1 };
        double[] doubleArray39 = new double[] { 1 };
        double[][] doubleArray40 = new double[][] { doubleArray31, doubleArray33, doubleArray35, doubleArray37, doubleArray39 };
        int[] intArray41 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray40, intArray41);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray29, intArray41);
        double[] doubleArray50 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray57 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray64 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray71 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray72 = new double[][] { doubleArray50, doubleArray57, doubleArray64, doubleArray71 };
        double[][] doubleArray73 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray72);
        double[] doubleArray75 = new double[] { 1 };
        double[] doubleArray77 = new double[] { 1 };
        double[] doubleArray79 = new double[] { 1 };
        double[] doubleArray81 = new double[] { 1 };
        double[] doubleArray83 = new double[] { 1 };
        double[][] doubleArray84 = new double[][] { doubleArray75, doubleArray77, doubleArray79, doubleArray81, doubleArray83 };
        int[] intArray85 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray84, intArray85);
        double[][] doubleArray87 = new double[][] {};
        double[][] doubleArray88 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray87);
        int[] intArray89 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray88, intArray89);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray84, intArray89);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray72, intArray89);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray29, intArray89);
        double[][] doubleArray94 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray29);
        double[][] doubleArray95 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray29);
        double[][] doubleArray96 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray29);
        double[][] doubleArray97 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray96);
        double[][] doubleArray98 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray96);
        java.lang.Class<?> wildcardClass99 = doubleArray96.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[]");
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray71), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray75), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray77), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray79), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray81), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray83), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray84);
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray85), "[]");
        org.junit.Assert.assertNotNull(doubleArray87);
        org.junit.Assert.assertNotNull(doubleArray88);
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray89), "[]");
        org.junit.Assert.assertNotNull(doubleArray94);
        org.junit.Assert.assertNotNull(doubleArray95);
        org.junit.Assert.assertNotNull(doubleArray96);
        org.junit.Assert.assertNotNull(doubleArray97);
        org.junit.Assert.assertNotNull(doubleArray98);
        org.junit.Assert.assertNotNull(wildcardClass99);
    }

    @Test
    public void test0586() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0586");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray30 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray29);
        double[][] doubleArray31 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        double[][] doubleArray32 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray31);
        double[][] doubleArray33 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray31);
        double[][] doubleArray34 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray33);
        double[][] doubleArray35 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray34);
        double[][] doubleArray36 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray34);
        double[][] doubleArray37 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray34);
        java.lang.Class<?> wildcardClass38 = doubleArray37.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertNotNull(wildcardClass38);
    }

    @Test
    public void test0587() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0587");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[] doubleArray11 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray18 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray25 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray32 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray33 = new double[][] { doubleArray11, doubleArray18, doubleArray25, doubleArray32 };
        double[][] doubleArray34 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray33);
        double[][] doubleArray35 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray33);
        double[][] doubleArray36 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray33);
        double[][] doubleArray37 = new double[][] {};
        double[][] doubleArray38 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray37);
        int[] intArray39 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray38, intArray39);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray36, intArray39);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray4, intArray39);
        double[][] doubleArray43 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray4);
        double[][] doubleArray44 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray4);
        java.lang.Class<?> wildcardClass45 = doubleArray44.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertNotNull(wildcardClass45);
    }

    @Test
    public void test0588() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0588");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = new double[][] {};
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[] doubleArray5 = new double[] { 1 };
        double[] doubleArray7 = new double[] { 1 };
        double[] doubleArray9 = new double[] { 1 };
        double[] doubleArray11 = new double[] { 1 };
        double[] doubleArray13 = new double[] { 1 };
        double[][] doubleArray14 = new double[][] { doubleArray5, doubleArray7, doubleArray9, doubleArray11, doubleArray13 };
        int[] intArray15 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray14, intArray15);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray2, intArray15);
        double[] doubleArray21 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray25 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray29 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray33 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray34 = new double[][] { doubleArray21, doubleArray25, doubleArray29, doubleArray33 };
        double[] doubleArray36 = new double[] { 1 };
        double[] doubleArray38 = new double[] { 1 };
        double[] doubleArray40 = new double[] { 1 };
        double[] doubleArray42 = new double[] { 1 };
        double[] doubleArray44 = new double[] { 1 };
        double[][] doubleArray45 = new double[][] { doubleArray36, doubleArray38, doubleArray40, doubleArray42, doubleArray44 };
        int[] intArray46 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray45, intArray46);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray34, intArray46);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray2, intArray46);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray1, intArray46);
        double[][] doubleArray51 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray52 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray51);
        double[][] doubleArray53 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray52);
        double[][] doubleArray54 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray53);
        double[][] doubleArray55 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray53);
        java.lang.Class<?> wildcardClass56 = doubleArray55.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertNotNull(wildcardClass56);
    }

    @Test
    public void test0589() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0589");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[] doubleArray31 = new double[] { 1 };
        double[] doubleArray33 = new double[] { 1 };
        double[] doubleArray35 = new double[] { 1 };
        double[] doubleArray37 = new double[] { 1 };
        double[] doubleArray39 = new double[] { 1 };
        double[][] doubleArray40 = new double[][] { doubleArray31, doubleArray33, doubleArray35, doubleArray37, doubleArray39 };
        int[] intArray41 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray40, intArray41);
        double[][] doubleArray43 = new double[][] {};
        double[][] doubleArray44 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray43);
        int[] intArray45 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray44, intArray45);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray40, intArray45);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray28, intArray45);
        double[][] doubleArray49 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray50 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray51 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[] doubleArray58 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray65 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray72 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray79 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray80 = new double[][] { doubleArray58, doubleArray65, doubleArray72, doubleArray79 };
        double[][] doubleArray81 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray80);
        double[][] doubleArray82 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray80);
        double[][] doubleArray83 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray80);
        double[][] doubleArray84 = new double[][] {};
        double[][] doubleArray85 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray84);
        int[] intArray86 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray85, intArray86);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray83, intArray86);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray51, intArray86);
        java.lang.Class<?> wildcardClass90 = intArray86.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray79), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertNotNull(doubleArray81);
        org.junit.Assert.assertNotNull(doubleArray82);
        org.junit.Assert.assertNotNull(doubleArray83);
        org.junit.Assert.assertNotNull(doubleArray84);
        org.junit.Assert.assertNotNull(doubleArray85);
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray86), "[]");
        org.junit.Assert.assertNotNull(wildcardClass90);
    }

    @Test
    public void test0590() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0590");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[] doubleArray31 = new double[] { 1 };
        double[] doubleArray33 = new double[] { 1 };
        double[] doubleArray35 = new double[] { 1 };
        double[] doubleArray37 = new double[] { 1 };
        double[] doubleArray39 = new double[] { 1 };
        double[][] doubleArray40 = new double[][] { doubleArray31, doubleArray33, doubleArray35, doubleArray37, doubleArray39 };
        int[] intArray41 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray40, intArray41);
        double[][] doubleArray43 = new double[][] {};
        double[][] doubleArray44 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray43);
        int[] intArray45 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray44, intArray45);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray40, intArray45);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray28, intArray45);
        double[][] doubleArray49 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray50 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray51 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray52 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        java.lang.Class<?> wildcardClass53 = doubleArray52.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertNotNull(wildcardClass53);
    }

    @Test
    public void test0591() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0591");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[] doubleArray9 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray16 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray23 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray30 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray31 = new double[][] { doubleArray9, doubleArray16, doubleArray23, doubleArray30 };
        double[][] doubleArray32 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray31);
        double[] doubleArray34 = new double[] { 1 };
        double[] doubleArray36 = new double[] { 1 };
        double[] doubleArray38 = new double[] { 1 };
        double[] doubleArray40 = new double[] { 1 };
        double[] doubleArray42 = new double[] { 1 };
        double[][] doubleArray43 = new double[][] { doubleArray34, doubleArray36, doubleArray38, doubleArray40, doubleArray42 };
        int[] intArray44 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray43, intArray44);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray32, intArray44);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray1, intArray44);
        double[][] doubleArray48 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray49 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        java.lang.Class<?> wildcardClass50 = doubleArray49.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertNotNull(wildcardClass50);
    }

    @Test
    public void test0592() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0592");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = new double[][] {};
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[] doubleArray5 = new double[] { 1 };
        double[] doubleArray7 = new double[] { 1 };
        double[] doubleArray9 = new double[] { 1 };
        double[] doubleArray11 = new double[] { 1 };
        double[] doubleArray13 = new double[] { 1 };
        double[][] doubleArray14 = new double[][] { doubleArray5, doubleArray7, doubleArray9, doubleArray11, doubleArray13 };
        int[] intArray15 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray14, intArray15);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray2, intArray15);
        double[] doubleArray21 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray25 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray29 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray33 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray34 = new double[][] { doubleArray21, doubleArray25, doubleArray29, doubleArray33 };
        double[] doubleArray36 = new double[] { 1 };
        double[] doubleArray38 = new double[] { 1 };
        double[] doubleArray40 = new double[] { 1 };
        double[] doubleArray42 = new double[] { 1 };
        double[] doubleArray44 = new double[] { 1 };
        double[][] doubleArray45 = new double[][] { doubleArray36, doubleArray38, doubleArray40, doubleArray42, doubleArray44 };
        int[] intArray46 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray45, intArray46);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray34, intArray46);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray2, intArray46);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray0, intArray46);
        double[][] doubleArray51 = new double[][] {};
        double[][] doubleArray52 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray51);
        int[] intArray53 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray52, intArray53);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray0, intArray53);
        double[][] doubleArray56 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        java.lang.Class<?> wildcardClass57 = doubleArray56.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[]");
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertNotNull(wildcardClass57);
    }

    @Test
    public void test0593() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0593");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[] doubleArray31 = new double[] { 1 };
        double[] doubleArray33 = new double[] { 1 };
        double[] doubleArray35 = new double[] { 1 };
        double[] doubleArray37 = new double[] { 1 };
        double[] doubleArray39 = new double[] { 1 };
        double[][] doubleArray40 = new double[][] { doubleArray31, doubleArray33, doubleArray35, doubleArray37, doubleArray39 };
        int[] intArray41 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray40, intArray41);
        double[][] doubleArray43 = new double[][] {};
        double[][] doubleArray44 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray43);
        int[] intArray45 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray44, intArray45);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray40, intArray45);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray28, intArray45);
        double[][] doubleArray49 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray50 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray51 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray52 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray53 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        int[] intArray55 = new int[] { '4' };
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray28, intArray55);
        java.lang.Class<?> wildcardClass57 = doubleArray28.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[0]");
        org.junit.Assert.assertNotNull(wildcardClass57);
    }

    @Test
    public void test0594() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0594");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[] doubleArray3 = new double[] { 1 };
        double[] doubleArray5 = new double[] { 1 };
        double[] doubleArray7 = new double[] { 1 };
        double[] doubleArray9 = new double[] { 1 };
        double[] doubleArray11 = new double[] { 1 };
        double[][] doubleArray12 = new double[][] { doubleArray3, doubleArray5, doubleArray7, doubleArray9, doubleArray11 };
        int[] intArray13 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray12, intArray13);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray0, intArray13);
        double[][] doubleArray16 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray17 = new double[][] {};
        double[][] doubleArray18 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray17);
        double[][] doubleArray19 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray17);
        double[][] doubleArray20 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray17);
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray34 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray41 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray48 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray49 = new double[][] { doubleArray27, doubleArray34, doubleArray41, doubleArray48 };
        double[][] doubleArray50 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray49);
        double[][] doubleArray51 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray50);
        double[][] doubleArray52 = new double[][] {};
        double[][] doubleArray53 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray52);
        double[] doubleArray55 = new double[] { 1 };
        double[] doubleArray57 = new double[] { 1 };
        double[] doubleArray59 = new double[] { 1 };
        double[] doubleArray61 = new double[] { 1 };
        double[] doubleArray63 = new double[] { 1 };
        double[][] doubleArray64 = new double[][] { doubleArray55, doubleArray57, doubleArray59, doubleArray61, doubleArray63 };
        int[] intArray65 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray64, intArray65);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray52, intArray65);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray51, intArray65);
        double[][] doubleArray69 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray51);
        double[] doubleArray71 = new double[] { 1 };
        double[] doubleArray73 = new double[] { 1 };
        double[] doubleArray75 = new double[] { 1 };
        double[] doubleArray77 = new double[] { 1 };
        double[] doubleArray79 = new double[] { 1 };
        double[][] doubleArray80 = new double[][] { doubleArray71, doubleArray73, doubleArray75, doubleArray77, doubleArray79 };
        int[] intArray81 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray80, intArray81);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray69, intArray81);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray17, intArray81);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray16, intArray81);
        java.lang.Class<?> wildcardClass86 = intArray81.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[]");
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray71), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray73), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray75), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray77), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray79), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray81), "[]");
        org.junit.Assert.assertNotNull(wildcardClass86);
    }

    @Test
    public void test0595() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0595");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[] doubleArray31 = new double[] { 1 };
        double[] doubleArray33 = new double[] { 1 };
        double[] doubleArray35 = new double[] { 1 };
        double[] doubleArray37 = new double[] { 1 };
        double[] doubleArray39 = new double[] { 1 };
        double[][] doubleArray40 = new double[][] { doubleArray31, doubleArray33, doubleArray35, doubleArray37, doubleArray39 };
        int[] intArray41 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray40, intArray41);
        double[][] doubleArray43 = new double[][] {};
        double[][] doubleArray44 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray43);
        int[] intArray45 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray44, intArray45);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray40, intArray45);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray28, intArray45);
        double[][] doubleArray49 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray50 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray51 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray52 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray51);
        double[][] doubleArray53 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray51);
        double[][] doubleArray54 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray51);
        java.lang.Class<?> wildcardClass55 = doubleArray51.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertNotNull(wildcardClass55);
    }

    @Test
    public void test0596() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0596");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray3 = new double[][] {};
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[][] doubleArray5 = new double[][] {};
        double[][] doubleArray6 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray5);
        double[] doubleArray8 = new double[] { 1 };
        double[] doubleArray10 = new double[] { 1 };
        double[] doubleArray12 = new double[] { 1 };
        double[] doubleArray14 = new double[] { 1 };
        double[] doubleArray16 = new double[] { 1 };
        double[][] doubleArray17 = new double[][] { doubleArray8, doubleArray10, doubleArray12, doubleArray14, doubleArray16 };
        int[] intArray18 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray17, intArray18);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray5, intArray18);
        double[] doubleArray24 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray28 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray32 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray36 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray37 = new double[][] { doubleArray24, doubleArray28, doubleArray32, doubleArray36 };
        double[] doubleArray39 = new double[] { 1 };
        double[] doubleArray41 = new double[] { 1 };
        double[] doubleArray43 = new double[] { 1 };
        double[] doubleArray45 = new double[] { 1 };
        double[] doubleArray47 = new double[] { 1 };
        double[][] doubleArray48 = new double[][] { doubleArray39, doubleArray41, doubleArray43, doubleArray45, doubleArray47 };
        int[] intArray49 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray48, intArray49);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray37, intArray49);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray5, intArray49);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray4, intArray49);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray2, intArray49);
        double[][] doubleArray55 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray56 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray55);
        double[][] doubleArray57 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray55);
        double[][] doubleArray58 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray57);
        java.lang.Class<?> wildcardClass59 = doubleArray58.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[]");
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[]");
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertNotNull(wildcardClass59);
    }

    @Test
    public void test0597() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0597");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[] doubleArray11 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray18 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray25 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray32 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray33 = new double[][] { doubleArray11, doubleArray18, doubleArray25, doubleArray32 };
        double[][] doubleArray34 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray33);
        double[][] doubleArray35 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray33);
        double[][] doubleArray36 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray33);
        double[][] doubleArray37 = new double[][] {};
        double[][] doubleArray38 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray37);
        int[] intArray39 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray38, intArray39);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray36, intArray39);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray4, intArray39);
        double[][] doubleArray43 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray4);
        java.lang.Class<?> wildcardClass44 = doubleArray43.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(wildcardClass44);
    }

    @Test
    public void test0598() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0598");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray5 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray4);
        java.lang.Class<?> wildcardClass6 = doubleArray5.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(wildcardClass6);
    }

    @Test
    public void test0599() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0599");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray30 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray29);
        double[][] doubleArray31 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        double[][] doubleArray32 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        double[][] doubleArray33 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray32);
        java.lang.Class<?> wildcardClass34 = doubleArray32.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertNotNull(wildcardClass34);
    }

    @Test
    public void test0600() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0600");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray5 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray6 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray7 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        java.lang.Class<?> wildcardClass8 = doubleArray2.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertNotNull(wildcardClass8);
    }

    @Test
    public void test0601() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0601");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[] doubleArray3 = new double[] { 1 };
        double[] doubleArray5 = new double[] { 1 };
        double[] doubleArray7 = new double[] { 1 };
        double[] doubleArray9 = new double[] { 1 };
        double[] doubleArray11 = new double[] { 1 };
        double[][] doubleArray12 = new double[][] { doubleArray3, doubleArray5, doubleArray7, doubleArray9, doubleArray11 };
        int[] intArray13 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray12, intArray13);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray0, intArray13);
        double[] doubleArray19 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray23 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray27 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray31 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray32 = new double[][] { doubleArray19, doubleArray23, doubleArray27, doubleArray31 };
        double[] doubleArray34 = new double[] { 1 };
        double[] doubleArray36 = new double[] { 1 };
        double[] doubleArray38 = new double[] { 1 };
        double[] doubleArray40 = new double[] { 1 };
        double[] doubleArray42 = new double[] { 1 };
        double[][] doubleArray43 = new double[][] { doubleArray34, doubleArray36, doubleArray38, doubleArray40, doubleArray42 };
        int[] intArray44 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray43, intArray44);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray32, intArray44);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray0, intArray44);
        double[] doubleArray49 = new double[] { 1 };
        double[] doubleArray51 = new double[] { 1 };
        double[] doubleArray53 = new double[] { 1 };
        double[] doubleArray55 = new double[] { 1 };
        double[] doubleArray57 = new double[] { 1 };
        double[][] doubleArray58 = new double[][] { doubleArray49, doubleArray51, doubleArray53, doubleArray55, doubleArray57 };
        int[] intArray59 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray58, intArray59);
        double[][] doubleArray61 = new double[][] {};
        double[][] doubleArray62 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray61);
        int[] intArray63 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray62, intArray63);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray58, intArray63);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray0, intArray63);
        double[][] doubleArray67 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray68 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray69 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray70 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        java.lang.Class<?> wildcardClass71 = doubleArray70.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[]");
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertNotNull(wildcardClass71);
    }

    @Test
    public void test0602() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0602");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[] doubleArray3 = new double[] { 1 };
        double[] doubleArray5 = new double[] { 1 };
        double[] doubleArray7 = new double[] { 1 };
        double[] doubleArray9 = new double[] { 1 };
        double[] doubleArray11 = new double[] { 1 };
        double[][] doubleArray12 = new double[][] { doubleArray3, doubleArray5, doubleArray7, doubleArray9, doubleArray11 };
        int[] intArray13 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray12, intArray13);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray0, intArray13);
        double[][] doubleArray16 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[] doubleArray23 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray30 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray37 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray44 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray45 = new double[][] { doubleArray23, doubleArray30, doubleArray37, doubleArray44 };
        double[][] doubleArray46 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray45);
        double[] doubleArray48 = new double[] { 1 };
        double[] doubleArray50 = new double[] { 1 };
        double[] doubleArray52 = new double[] { 1 };
        double[] doubleArray54 = new double[] { 1 };
        double[] doubleArray56 = new double[] { 1 };
        double[][] doubleArray57 = new double[][] { doubleArray48, doubleArray50, doubleArray52, doubleArray54, doubleArray56 };
        int[] intArray58 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray57, intArray58);
        double[][] doubleArray60 = new double[][] {};
        double[][] doubleArray61 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray60);
        int[] intArray62 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray61, intArray62);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray57, intArray62);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray45, intArray62);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray16, intArray62);
        java.lang.Class<?> wildcardClass67 = doubleArray16.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[]");
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[]");
        org.junit.Assert.assertNotNull(wildcardClass67);
    }

    @Test
    public void test0603() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0603");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[] doubleArray6 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray10 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray14 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray18 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray19 = new double[][] { doubleArray6, doubleArray10, doubleArray14, doubleArray18 };
        double[] doubleArray21 = new double[] { 1 };
        double[] doubleArray23 = new double[] { 1 };
        double[] doubleArray25 = new double[] { 1 };
        double[] doubleArray27 = new double[] { 1 };
        double[] doubleArray29 = new double[] { 1 };
        double[][] doubleArray30 = new double[][] { doubleArray21, doubleArray23, doubleArray25, doubleArray27, doubleArray29 };
        int[] intArray31 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray30, intArray31);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray19, intArray31);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray2, intArray31);
        double[][] doubleArray35 = null;
        double[][] doubleArray36 = new double[][] {};
        double[][] doubleArray37 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray36);
        double[][] doubleArray38 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray37);
        double[] doubleArray42 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray46 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray50 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray54 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray55 = new double[][] { doubleArray42, doubleArray46, doubleArray50, doubleArray54 };
        double[] doubleArray57 = new double[] { 1 };
        double[] doubleArray59 = new double[] { 1 };
        double[] doubleArray61 = new double[] { 1 };
        double[] doubleArray63 = new double[] { 1 };
        double[] doubleArray65 = new double[] { 1 };
        double[][] doubleArray66 = new double[][] { doubleArray57, doubleArray59, doubleArray61, doubleArray63, doubleArray65 };
        int[] intArray67 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray66, intArray67);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray55, intArray67);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray38, intArray67);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray35, intArray67);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray2, intArray67);
        java.lang.Class<?> wildcardClass73 = intArray67.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[]");
        org.junit.Assert.assertNotNull(wildcardClass73);
    }

    @Test
    public void test0604() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0604");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[] doubleArray9 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray16 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray23 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray30 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray31 = new double[][] { doubleArray9, doubleArray16, doubleArray23, doubleArray30 };
        double[][] doubleArray32 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray31);
        double[][] doubleArray33 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray31);
        double[][] doubleArray34 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray31);
        double[][] doubleArray35 = new double[][] {};
        double[][] doubleArray36 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray35);
        int[] intArray37 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray36, intArray37);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray34, intArray37);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray2, intArray37);
        java.lang.Class<?> wildcardClass41 = intArray37.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[]");
        org.junit.Assert.assertNotNull(wildcardClass41);
    }

    @Test
    public void test0605() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0605");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray30 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray31 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray32 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray33 = new double[][] {};
        double[][] doubleArray34 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray33);
        double[][] doubleArray35 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray34);
        double[] doubleArray39 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray43 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray47 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray51 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray52 = new double[][] { doubleArray39, doubleArray43, doubleArray47, doubleArray51 };
        double[] doubleArray54 = new double[] { 1 };
        double[] doubleArray56 = new double[] { 1 };
        double[] doubleArray58 = new double[] { 1 };
        double[] doubleArray60 = new double[] { 1 };
        double[] doubleArray62 = new double[] { 1 };
        double[][] doubleArray63 = new double[][] { doubleArray54, doubleArray56, doubleArray58, doubleArray60, doubleArray62 };
        int[] intArray64 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray63, intArray64);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray52, intArray64);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray35, intArray64);
        double[][] doubleArray68 = null;
        double[] doubleArray70 = new double[] { 1 };
        double[] doubleArray72 = new double[] { 1 };
        double[] doubleArray74 = new double[] { 1 };
        double[] doubleArray76 = new double[] { 1 };
        double[] doubleArray78 = new double[] { 1 };
        double[][] doubleArray79 = new double[][] { doubleArray70, doubleArray72, doubleArray74, doubleArray76, doubleArray78 };
        int[] intArray80 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray79, intArray80);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray68, intArray80);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray35, intArray80);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray28, intArray80);
        double[][] doubleArray85 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        java.lang.Class<?> wildcardClass86 = doubleArray28.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[]");
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray70), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray74), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray78), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[]");
        org.junit.Assert.assertNotNull(doubleArray85);
        org.junit.Assert.assertNotNull(wildcardClass86);
    }

    @Test
    public void test0606() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0606");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = new double[][] {};
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[] doubleArray8 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray12 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray16 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray20 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray21 = new double[][] { doubleArray8, doubleArray12, doubleArray16, doubleArray20 };
        double[] doubleArray23 = new double[] { 1 };
        double[] doubleArray25 = new double[] { 1 };
        double[] doubleArray27 = new double[] { 1 };
        double[] doubleArray29 = new double[] { 1 };
        double[] doubleArray31 = new double[] { 1 };
        double[][] doubleArray32 = new double[][] { doubleArray23, doubleArray25, doubleArray27, doubleArray29, doubleArray31 };
        int[] intArray33 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray32, intArray33);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray21, intArray33);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray3, intArray33);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray1, intArray33);
        double[][] doubleArray38 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        java.lang.Class<?> wildcardClass39 = doubleArray38.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertNotNull(wildcardClass39);
    }

    @Test
    public void test0607() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0607");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[] doubleArray3 = new double[] { 1 };
        double[] doubleArray5 = new double[] { 1 };
        double[] doubleArray7 = new double[] { 1 };
        double[] doubleArray9 = new double[] { 1 };
        double[] doubleArray11 = new double[] { 1 };
        double[][] doubleArray12 = new double[][] { doubleArray3, doubleArray5, doubleArray7, doubleArray9, doubleArray11 };
        int[] intArray13 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray12, intArray13);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray0, intArray13);
        double[][] doubleArray16 = new double[][] {};
        double[][] doubleArray17 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray16);
        double[][] doubleArray18 = new double[][] {};
        double[][] doubleArray19 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray18);
        double[] doubleArray21 = new double[] { 1 };
        double[] doubleArray23 = new double[] { 1 };
        double[] doubleArray25 = new double[] { 1 };
        double[] doubleArray27 = new double[] { 1 };
        double[] doubleArray29 = new double[] { 1 };
        double[][] doubleArray30 = new double[][] { doubleArray21, doubleArray23, doubleArray25, doubleArray27, doubleArray29 };
        int[] intArray31 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray30, intArray31);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray18, intArray31);
        double[] doubleArray37 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray41 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray45 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray49 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray50 = new double[][] { doubleArray37, doubleArray41, doubleArray45, doubleArray49 };
        double[] doubleArray52 = new double[] { 1 };
        double[] doubleArray54 = new double[] { 1 };
        double[] doubleArray56 = new double[] { 1 };
        double[] doubleArray58 = new double[] { 1 };
        double[] doubleArray60 = new double[] { 1 };
        double[][] doubleArray61 = new double[][] { doubleArray52, doubleArray54, doubleArray56, doubleArray58, doubleArray60 };
        int[] intArray62 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray61, intArray62);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray50, intArray62);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray18, intArray62);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray17, intArray62);
        double[] doubleArray68 = new double[] { 1 };
        double[] doubleArray70 = new double[] { 1 };
        double[] doubleArray72 = new double[] { 1 };
        double[] doubleArray74 = new double[] { 1 };
        double[] doubleArray76 = new double[] { 1 };
        double[][] doubleArray77 = new double[][] { doubleArray68, doubleArray70, doubleArray72, doubleArray74, doubleArray76 };
        int[] intArray78 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray77, intArray78);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray17, intArray78);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray0, intArray78);
        double[][] doubleArray82 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray83 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        java.lang.Class<?> wildcardClass84 = doubleArray0.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[]");
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray70), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray74), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[]");
        org.junit.Assert.assertNotNull(doubleArray82);
        org.junit.Assert.assertNotNull(doubleArray83);
        org.junit.Assert.assertNotNull(wildcardClass84);
    }

    @Test
    public void test0608() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0608");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[] doubleArray6 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray10 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray14 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray18 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray19 = new double[][] { doubleArray6, doubleArray10, doubleArray14, doubleArray18 };
        double[] doubleArray21 = new double[] { 1 };
        double[] doubleArray23 = new double[] { 1 };
        double[] doubleArray25 = new double[] { 1 };
        double[] doubleArray27 = new double[] { 1 };
        double[] doubleArray29 = new double[] { 1 };
        double[][] doubleArray30 = new double[][] { doubleArray21, doubleArray23, doubleArray25, doubleArray27, doubleArray29 };
        int[] intArray31 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray30, intArray31);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray19, intArray31);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray2, intArray31);
        double[][] doubleArray35 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray36 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        int[] intArray40 = new int[] { (short) -1, '4', (byte) 10 };
        // The following exception was thrown during execution in test generation
        try {
            com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray2, intArray40);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[0, 1, 2]");
    }

    @Test
    public void test0609() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0609");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray4 = new double[][] {};
        double[][] doubleArray5 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray4);
        double[][] doubleArray6 = new double[][] {};
        double[][] doubleArray7 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray6);
        double[] doubleArray9 = new double[] { 1 };
        double[] doubleArray11 = new double[] { 1 };
        double[] doubleArray13 = new double[] { 1 };
        double[] doubleArray15 = new double[] { 1 };
        double[] doubleArray17 = new double[] { 1 };
        double[][] doubleArray18 = new double[][] { doubleArray9, doubleArray11, doubleArray13, doubleArray15, doubleArray17 };
        int[] intArray19 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray18, intArray19);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray6, intArray19);
        double[] doubleArray25 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray29 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray33 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray37 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray38 = new double[][] { doubleArray25, doubleArray29, doubleArray33, doubleArray37 };
        double[] doubleArray40 = new double[] { 1 };
        double[] doubleArray42 = new double[] { 1 };
        double[] doubleArray44 = new double[] { 1 };
        double[] doubleArray46 = new double[] { 1 };
        double[] doubleArray48 = new double[] { 1 };
        double[][] doubleArray49 = new double[][] { doubleArray40, doubleArray42, doubleArray44, doubleArray46, doubleArray48 };
        int[] intArray50 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray49, intArray50);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray38, intArray50);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray6, intArray50);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray4, intArray50);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray1, intArray50);
        double[][] doubleArray56 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray57 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray58 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray57);
        double[][] doubleArray59 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray57);
        java.lang.Class<?> wildcardClass60 = doubleArray57.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[]");
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertNotNull(wildcardClass60);
    }

    @Test
    public void test0610() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0610");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = new double[][] {};
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[] doubleArray5 = new double[] { 1 };
        double[] doubleArray7 = new double[] { 1 };
        double[] doubleArray9 = new double[] { 1 };
        double[] doubleArray11 = new double[] { 1 };
        double[] doubleArray13 = new double[] { 1 };
        double[][] doubleArray14 = new double[][] { doubleArray5, doubleArray7, doubleArray9, doubleArray11, doubleArray13 };
        int[] intArray15 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray14, intArray15);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray2, intArray15);
        double[] doubleArray21 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray25 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray29 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray33 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray34 = new double[][] { doubleArray21, doubleArray25, doubleArray29, doubleArray33 };
        double[] doubleArray36 = new double[] { 1 };
        double[] doubleArray38 = new double[] { 1 };
        double[] doubleArray40 = new double[] { 1 };
        double[] doubleArray42 = new double[] { 1 };
        double[] doubleArray44 = new double[] { 1 };
        double[][] doubleArray45 = new double[][] { doubleArray36, doubleArray38, doubleArray40, doubleArray42, doubleArray44 };
        int[] intArray46 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray45, intArray46);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray34, intArray46);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray2, intArray46);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray1, intArray46);
        double[][] doubleArray51 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray52 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray51);
        double[][] doubleArray53 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray52);
        double[][] doubleArray54 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray52);
        double[][] doubleArray55 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray54);
        double[][] doubleArray56 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray55);
        java.lang.Class<?> wildcardClass57 = doubleArray56.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertNotNull(wildcardClass57);
    }

    @Test
    public void test0611() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0611");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray3 = new double[][] {};
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[][] doubleArray5 = new double[][] {};
        double[][] doubleArray6 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray5);
        double[] doubleArray8 = new double[] { 1 };
        double[] doubleArray10 = new double[] { 1 };
        double[] doubleArray12 = new double[] { 1 };
        double[] doubleArray14 = new double[] { 1 };
        double[] doubleArray16 = new double[] { 1 };
        double[][] doubleArray17 = new double[][] { doubleArray8, doubleArray10, doubleArray12, doubleArray14, doubleArray16 };
        int[] intArray18 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray17, intArray18);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray5, intArray18);
        double[] doubleArray24 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray28 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray32 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray36 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray37 = new double[][] { doubleArray24, doubleArray28, doubleArray32, doubleArray36 };
        double[] doubleArray39 = new double[] { 1 };
        double[] doubleArray41 = new double[] { 1 };
        double[] doubleArray43 = new double[] { 1 };
        double[] doubleArray45 = new double[] { 1 };
        double[] doubleArray47 = new double[] { 1 };
        double[][] doubleArray48 = new double[][] { doubleArray39, doubleArray41, doubleArray43, doubleArray45, doubleArray47 };
        int[] intArray49 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray48, intArray49);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray37, intArray49);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray5, intArray49);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray4, intArray49);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray2, intArray49);
        double[][] doubleArray55 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray56 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray55);
        double[][] doubleArray57 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray55);
        double[][] doubleArray58 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray57);
        double[][] doubleArray59 = new double[][] {};
        double[][] doubleArray60 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray59);
        double[][] doubleArray61 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray60);
        double[] doubleArray65 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray69 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray73 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray77 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray78 = new double[][] { doubleArray65, doubleArray69, doubleArray73, doubleArray77 };
        double[] doubleArray80 = new double[] { 1 };
        double[] doubleArray82 = new double[] { 1 };
        double[] doubleArray84 = new double[] { 1 };
        double[] doubleArray86 = new double[] { 1 };
        double[] doubleArray88 = new double[] { 1 };
        double[][] doubleArray89 = new double[][] { doubleArray80, doubleArray82, doubleArray84, doubleArray86, doubleArray88 };
        int[] intArray90 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray89, intArray90);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray78, intArray90);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray61, intArray90);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray57, intArray90);
        java.lang.Class<?> wildcardClass95 = doubleArray57.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[]");
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[]");
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray73), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray77), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray80), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray82), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray84), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray86), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray88), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray89);
        org.junit.Assert.assertNotNull(intArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray90), "[]");
        org.junit.Assert.assertNotNull(wildcardClass95);
    }

    @Test
    public void test0612() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0612");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray3 = new double[][] {};
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[][] doubleArray5 = new double[][] {};
        double[][] doubleArray6 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray5);
        double[] doubleArray8 = new double[] { 1 };
        double[] doubleArray10 = new double[] { 1 };
        double[] doubleArray12 = new double[] { 1 };
        double[] doubleArray14 = new double[] { 1 };
        double[] doubleArray16 = new double[] { 1 };
        double[][] doubleArray17 = new double[][] { doubleArray8, doubleArray10, doubleArray12, doubleArray14, doubleArray16 };
        int[] intArray18 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray17, intArray18);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray5, intArray18);
        double[] doubleArray24 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray28 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray32 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray36 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray37 = new double[][] { doubleArray24, doubleArray28, doubleArray32, doubleArray36 };
        double[] doubleArray39 = new double[] { 1 };
        double[] doubleArray41 = new double[] { 1 };
        double[] doubleArray43 = new double[] { 1 };
        double[] doubleArray45 = new double[] { 1 };
        double[] doubleArray47 = new double[] { 1 };
        double[][] doubleArray48 = new double[][] { doubleArray39, doubleArray41, doubleArray43, doubleArray45, doubleArray47 };
        int[] intArray49 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray48, intArray49);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray37, intArray49);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray5, intArray49);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray4, intArray49);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray2, intArray49);
        double[][] doubleArray55 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray56 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray55);
        double[][] doubleArray57 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray55);
        double[][] doubleArray58 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray57);
        double[][] doubleArray59 = new double[][] {};
        double[][] doubleArray60 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray59);
        double[][] doubleArray61 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray60);
        double[] doubleArray65 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray69 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray73 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray77 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray78 = new double[][] { doubleArray65, doubleArray69, doubleArray73, doubleArray77 };
        double[] doubleArray80 = new double[] { 1 };
        double[] doubleArray82 = new double[] { 1 };
        double[] doubleArray84 = new double[] { 1 };
        double[] doubleArray86 = new double[] { 1 };
        double[] doubleArray88 = new double[] { 1 };
        double[][] doubleArray89 = new double[][] { doubleArray80, doubleArray82, doubleArray84, doubleArray86, doubleArray88 };
        int[] intArray90 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray89, intArray90);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray78, intArray90);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray61, intArray90);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray57, intArray90);
        double[][] doubleArray95 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray57);
        double[][] doubleArray96 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray57);
        java.lang.Class<?> wildcardClass97 = doubleArray96.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[]");
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[]");
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray73), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray77), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray80), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray82), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray84), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray86), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray88), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray89);
        org.junit.Assert.assertNotNull(intArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray90), "[]");
        org.junit.Assert.assertNotNull(doubleArray95);
        org.junit.Assert.assertNotNull(doubleArray96);
        org.junit.Assert.assertNotNull(wildcardClass97);
    }

    @Test
    public void test0613() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0613");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray30 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray31 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray32 = new double[][] {};
        double[][] doubleArray33 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray32);
        double[][] doubleArray34 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray33);
        double[][] doubleArray35 = new double[][] {};
        double[][] doubleArray36 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray35);
        double[][] doubleArray37 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray35);
        double[][] doubleArray38 = new double[][] {};
        double[][] doubleArray39 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray38);
        double[][] doubleArray40 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray39);
        double[][] doubleArray41 = new double[][] {};
        double[][] doubleArray42 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray41);
        double[][] doubleArray43 = new double[][] {};
        double[][] doubleArray44 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray43);
        double[] doubleArray46 = new double[] { 1 };
        double[] doubleArray48 = new double[] { 1 };
        double[] doubleArray50 = new double[] { 1 };
        double[] doubleArray52 = new double[] { 1 };
        double[] doubleArray54 = new double[] { 1 };
        double[][] doubleArray55 = new double[][] { doubleArray46, doubleArray48, doubleArray50, doubleArray52, doubleArray54 };
        int[] intArray56 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray55, intArray56);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray43, intArray56);
        double[] doubleArray62 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray66 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray70 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray74 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray75 = new double[][] { doubleArray62, doubleArray66, doubleArray70, doubleArray74 };
        double[] doubleArray77 = new double[] { 1 };
        double[] doubleArray79 = new double[] { 1 };
        double[] doubleArray81 = new double[] { 1 };
        double[] doubleArray83 = new double[] { 1 };
        double[] doubleArray85 = new double[] { 1 };
        double[][] doubleArray86 = new double[][] { doubleArray77, doubleArray79, doubleArray81, doubleArray83, doubleArray85 };
        int[] intArray87 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray86, intArray87);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray75, intArray87);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray43, intArray87);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray42, intArray87);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray40, intArray87);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray35, intArray87);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray34, intArray87);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray31, intArray87);
        double[][] doubleArray96 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray31);
        double[][] doubleArray97 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray31);
        double[][] doubleArray98 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray31);
        double[][] doubleArray99 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray31);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[]");
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray66), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray70), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray74), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray77), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray79), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray81), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray83), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray85), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray86);
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray87), "[]");
        org.junit.Assert.assertNotNull(doubleArray96);
        org.junit.Assert.assertNotNull(doubleArray97);
        org.junit.Assert.assertNotNull(doubleArray98);
        org.junit.Assert.assertNotNull(doubleArray99);
    }

    @Test
    public void test0614() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0614");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[] doubleArray3 = new double[] { 1 };
        double[] doubleArray5 = new double[] { 1 };
        double[] doubleArray7 = new double[] { 1 };
        double[] doubleArray9 = new double[] { 1 };
        double[] doubleArray11 = new double[] { 1 };
        double[][] doubleArray12 = new double[][] { doubleArray3, doubleArray5, doubleArray7, doubleArray9, doubleArray11 };
        int[] intArray13 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray12, intArray13);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray0, intArray13);
        double[] doubleArray19 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray23 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray27 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray31 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray32 = new double[][] { doubleArray19, doubleArray23, doubleArray27, doubleArray31 };
        double[] doubleArray34 = new double[] { 1 };
        double[] doubleArray36 = new double[] { 1 };
        double[] doubleArray38 = new double[] { 1 };
        double[] doubleArray40 = new double[] { 1 };
        double[] doubleArray42 = new double[] { 1 };
        double[][] doubleArray43 = new double[][] { doubleArray34, doubleArray36, doubleArray38, doubleArray40, doubleArray42 };
        int[] intArray44 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray43, intArray44);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray32, intArray44);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray0, intArray44);
        double[] doubleArray49 = new double[] { 1 };
        double[] doubleArray51 = new double[] { 1 };
        double[] doubleArray53 = new double[] { 1 };
        double[] doubleArray55 = new double[] { 1 };
        double[] doubleArray57 = new double[] { 1 };
        double[][] doubleArray58 = new double[][] { doubleArray49, doubleArray51, doubleArray53, doubleArray55, doubleArray57 };
        int[] intArray59 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray58, intArray59);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray0, intArray59);
        double[][] doubleArray62 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray63 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray62);
        java.lang.Class<?> wildcardClass64 = doubleArray62.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[]");
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertNotNull(wildcardClass64);
    }

    @Test
    public void test0615() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0615");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray30 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray29);
        double[][] doubleArray31 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        double[][] doubleArray32 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray31);
        double[][] doubleArray33 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray31);
        java.lang.Class<?> wildcardClass34 = doubleArray33.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertNotNull(wildcardClass34);
    }

    @Test
    public void test0616() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0616");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = new double[][] {};
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[] doubleArray5 = new double[] { 1 };
        double[] doubleArray7 = new double[] { 1 };
        double[] doubleArray9 = new double[] { 1 };
        double[] doubleArray11 = new double[] { 1 };
        double[] doubleArray13 = new double[] { 1 };
        double[][] doubleArray14 = new double[][] { doubleArray5, doubleArray7, doubleArray9, doubleArray11, doubleArray13 };
        int[] intArray15 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray14, intArray15);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray2, intArray15);
        double[] doubleArray21 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray25 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray29 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray33 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray34 = new double[][] { doubleArray21, doubleArray25, doubleArray29, doubleArray33 };
        double[] doubleArray36 = new double[] { 1 };
        double[] doubleArray38 = new double[] { 1 };
        double[] doubleArray40 = new double[] { 1 };
        double[] doubleArray42 = new double[] { 1 };
        double[] doubleArray44 = new double[] { 1 };
        double[][] doubleArray45 = new double[][] { doubleArray36, doubleArray38, doubleArray40, doubleArray42, doubleArray44 };
        int[] intArray46 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray45, intArray46);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray34, intArray46);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray2, intArray46);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray0, intArray46);
        double[][] doubleArray51 = new double[][] {};
        double[][] doubleArray52 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray51);
        int[] intArray53 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray52, intArray53);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray0, intArray53);
        double[][] doubleArray56 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        java.lang.Class<?> wildcardClass57 = doubleArray0.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[]");
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertNotNull(wildcardClass57);
    }

    @Test
    public void test0617() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0617");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray30 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray31 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray32 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray31);
        double[][] doubleArray33 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray32);
        double[][] doubleArray34 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray33);
        double[][] doubleArray35 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray34);
        java.lang.Class<?> wildcardClass36 = doubleArray34.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertNotNull(wildcardClass36);
    }

    @Test
    public void test0618() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0618");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray30 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray29);
        double[][] doubleArray31 = new double[][] {};
        double[][] doubleArray32 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray31);
        double[] doubleArray34 = new double[] { 1 };
        double[] doubleArray36 = new double[] { 1 };
        double[] doubleArray38 = new double[] { 1 };
        double[] doubleArray40 = new double[] { 1 };
        double[] doubleArray42 = new double[] { 1 };
        double[][] doubleArray43 = new double[][] { doubleArray34, doubleArray36, doubleArray38, doubleArray40, doubleArray42 };
        int[] intArray44 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray43, intArray44);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray31, intArray44);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray30, intArray44);
        double[][] doubleArray48 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        double[][] doubleArray49 = new double[][] {};
        double[][] doubleArray50 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray49);
        int[] intArray51 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray50, intArray51);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray48, intArray51);
        double[][] doubleArray54 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray48);
        double[][] doubleArray55 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray54);
        double[][] doubleArray56 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray55);
        double[][] doubleArray57 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray55);
        java.lang.Class<?> wildcardClass58 = doubleArray55.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[]");
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertNotNull(wildcardClass58);
    }

    @Test
    public void test0619() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0619");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[] doubleArray3 = new double[] { 1 };
        double[] doubleArray5 = new double[] { 1 };
        double[] doubleArray7 = new double[] { 1 };
        double[] doubleArray9 = new double[] { 1 };
        double[] doubleArray11 = new double[] { 1 };
        double[][] doubleArray12 = new double[][] { doubleArray3, doubleArray5, doubleArray7, doubleArray9, doubleArray11 };
        int[] intArray13 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray12, intArray13);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray0, intArray13);
        double[] doubleArray19 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray23 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray27 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray31 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray32 = new double[][] { doubleArray19, doubleArray23, doubleArray27, doubleArray31 };
        double[] doubleArray34 = new double[] { 1 };
        double[] doubleArray36 = new double[] { 1 };
        double[] doubleArray38 = new double[] { 1 };
        double[] doubleArray40 = new double[] { 1 };
        double[] doubleArray42 = new double[] { 1 };
        double[][] doubleArray43 = new double[][] { doubleArray34, doubleArray36, doubleArray38, doubleArray40, doubleArray42 };
        int[] intArray44 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray43, intArray44);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray32, intArray44);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray0, intArray44);
        double[] doubleArray49 = new double[] { 1 };
        double[] doubleArray51 = new double[] { 1 };
        double[] doubleArray53 = new double[] { 1 };
        double[] doubleArray55 = new double[] { 1 };
        double[] doubleArray57 = new double[] { 1 };
        double[][] doubleArray58 = new double[][] { doubleArray49, doubleArray51, doubleArray53, doubleArray55, doubleArray57 };
        int[] intArray59 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray58, intArray59);
        double[][] doubleArray61 = new double[][] {};
        double[][] doubleArray62 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray61);
        int[] intArray63 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray62, intArray63);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray58, intArray63);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray0, intArray63);
        double[][] doubleArray67 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray68 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray67);
        double[][] doubleArray69 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray68);
        double[][] doubleArray70 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray68);
        java.lang.Class<?> wildcardClass71 = doubleArray68.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[]");
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertNotNull(wildcardClass71);
    }

    @Test
    public void test0620() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0620");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray30 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray29);
        double[][] doubleArray31 = new double[][] {};
        double[][] doubleArray32 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray31);
        double[] doubleArray34 = new double[] { 1 };
        double[] doubleArray36 = new double[] { 1 };
        double[] doubleArray38 = new double[] { 1 };
        double[] doubleArray40 = new double[] { 1 };
        double[] doubleArray42 = new double[] { 1 };
        double[][] doubleArray43 = new double[][] { doubleArray34, doubleArray36, doubleArray38, doubleArray40, doubleArray42 };
        int[] intArray44 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray43, intArray44);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray31, intArray44);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray30, intArray44);
        double[][] doubleArray48 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        double[][] doubleArray49 = new double[][] {};
        double[][] doubleArray50 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray49);
        int[] intArray51 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray50, intArray51);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray48, intArray51);
        double[][] doubleArray54 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray48);
        double[][] doubleArray55 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray54);
        double[][] doubleArray56 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray55);
        java.lang.Class<?> wildcardClass57 = doubleArray55.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[]");
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertNotNull(wildcardClass57);
    }

    @Test
    public void test0621() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0621");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray5 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray6 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray34 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray35 = new double[][] { doubleArray13, doubleArray20, doubleArray27, doubleArray34 };
        double[][] doubleArray36 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray35);
        double[][] doubleArray37 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray35);
        double[][] doubleArray38 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray35);
        double[][] doubleArray39 = new double[][] {};
        double[][] doubleArray40 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray39);
        int[] intArray41 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray40, intArray41);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray38, intArray41);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray6, intArray41);
        java.lang.Class<?> wildcardClass45 = intArray41.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[]");
        org.junit.Assert.assertNotNull(wildcardClass45);
    }

    @Test
    public void test0622() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0622");
        double[] doubleArray0 = new double[] {};
        double[][] doubleArray1 = new double[][] { doubleArray0 };
        double[][] doubleArray2 = new double[][] {};
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray4 = new double[][] {};
        double[][] doubleArray5 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray4);
        double[] doubleArray7 = new double[] { 1 };
        double[] doubleArray9 = new double[] { 1 };
        double[] doubleArray11 = new double[] { 1 };
        double[] doubleArray13 = new double[] { 1 };
        double[] doubleArray15 = new double[] { 1 };
        double[][] doubleArray16 = new double[][] { doubleArray7, doubleArray9, doubleArray11, doubleArray13, doubleArray15 };
        int[] intArray17 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray16, intArray17);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray4, intArray17);
        double[] doubleArray23 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray27 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray31 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray35 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray36 = new double[][] { doubleArray23, doubleArray27, doubleArray31, doubleArray35 };
        double[] doubleArray38 = new double[] { 1 };
        double[] doubleArray40 = new double[] { 1 };
        double[] doubleArray42 = new double[] { 1 };
        double[] doubleArray44 = new double[] { 1 };
        double[] doubleArray46 = new double[] { 1 };
        double[][] doubleArray47 = new double[][] { doubleArray38, doubleArray40, doubleArray42, doubleArray44, doubleArray46 };
        int[] intArray48 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray47, intArray48);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray36, intArray48);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray4, intArray48);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray3, intArray48);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray1, intArray48);
        java.lang.Class<?> wildcardClass54 = doubleArray1.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray0), "[]");
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[]");
        org.junit.Assert.assertNotNull(wildcardClass54);
    }

    @Test
    public void test0623() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0623");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = new double[][] {};
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[] doubleArray8 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray12 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray16 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray20 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray21 = new double[][] { doubleArray8, doubleArray12, doubleArray16, doubleArray20 };
        double[] doubleArray23 = new double[] { 1 };
        double[] doubleArray25 = new double[] { 1 };
        double[] doubleArray27 = new double[] { 1 };
        double[] doubleArray29 = new double[] { 1 };
        double[] doubleArray31 = new double[] { 1 };
        double[][] doubleArray32 = new double[][] { doubleArray23, doubleArray25, doubleArray27, doubleArray29, doubleArray31 };
        int[] intArray33 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray32, intArray33);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray21, intArray33);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray3, intArray33);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray1, intArray33);
        double[][] doubleArray38 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray39 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray38);
        double[][] doubleArray40 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray39);
        double[][] doubleArray41 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray39);
        double[][] doubleArray42 = new double[][] {};
        double[][] doubleArray43 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray42);
        double[][] doubleArray44 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray43);
        double[] doubleArray48 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray52 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray56 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray60 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray61 = new double[][] { doubleArray48, doubleArray52, doubleArray56, doubleArray60 };
        double[] doubleArray63 = new double[] { 1 };
        double[] doubleArray65 = new double[] { 1 };
        double[] doubleArray67 = new double[] { 1 };
        double[] doubleArray69 = new double[] { 1 };
        double[] doubleArray71 = new double[] { 1 };
        double[][] doubleArray72 = new double[][] { doubleArray63, doubleArray65, doubleArray67, doubleArray69, doubleArray71 };
        int[] intArray73 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray72, intArray73);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray61, intArray73);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray44, intArray73);
        double[][] doubleArray77 = null;
        double[] doubleArray79 = new double[] { 1 };
        double[] doubleArray81 = new double[] { 1 };
        double[] doubleArray83 = new double[] { 1 };
        double[] doubleArray85 = new double[] { 1 };
        double[] doubleArray87 = new double[] { 1 };
        double[][] doubleArray88 = new double[][] { doubleArray79, doubleArray81, doubleArray83, doubleArray85, doubleArray87 };
        int[] intArray89 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray88, intArray89);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray77, intArray89);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray44, intArray89);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray41, intArray89);
        java.lang.Class<?> wildcardClass94 = doubleArray41.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray71), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[]");
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray79), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray81), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray83), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray85), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray87), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray88);
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray89), "[]");
        org.junit.Assert.assertNotNull(wildcardClass94);
    }

    @Test
    public void test0624() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0624");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray5 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray4);
        double[][] doubleArray6 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray4);
        double[][] doubleArray7 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray6);
        double[][] doubleArray8 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray6);
        java.lang.Class<?> wildcardClass9 = doubleArray8.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void test0625() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0625");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[] doubleArray31 = new double[] { 1 };
        double[] doubleArray33 = new double[] { 1 };
        double[] doubleArray35 = new double[] { 1 };
        double[] doubleArray37 = new double[] { 1 };
        double[] doubleArray39 = new double[] { 1 };
        double[][] doubleArray40 = new double[][] { doubleArray31, doubleArray33, doubleArray35, doubleArray37, doubleArray39 };
        int[] intArray41 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray40, intArray41);
        double[][] doubleArray43 = new double[][] {};
        double[][] doubleArray44 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray43);
        int[] intArray45 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray44, intArray45);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray40, intArray45);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray28, intArray45);
        double[][] doubleArray49 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray50 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray49);
        double[][] doubleArray51 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray50);
        double[][] doubleArray52 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray51);
        double[][] doubleArray53 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray51);
        java.lang.Class<?> wildcardClass54 = doubleArray53.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertNotNull(wildcardClass54);
    }

    @Test
    public void test0626() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0626");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray5 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray6 = new double[][] {};
        double[][] doubleArray7 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray6);
        double[][] doubleArray8 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray6);
        double[][] doubleArray9 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray8);
        double[][] doubleArray10 = null;
        double[][] doubleArray11 = new double[][] {};
        double[][] doubleArray12 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray11);
        double[][] doubleArray13 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray12);
        double[] doubleArray17 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray21 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray25 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray29 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray30 = new double[][] { doubleArray17, doubleArray21, doubleArray25, doubleArray29 };
        double[] doubleArray32 = new double[] { 1 };
        double[] doubleArray34 = new double[] { 1 };
        double[] doubleArray36 = new double[] { 1 };
        double[] doubleArray38 = new double[] { 1 };
        double[] doubleArray40 = new double[] { 1 };
        double[][] doubleArray41 = new double[][] { doubleArray32, doubleArray34, doubleArray36, doubleArray38, doubleArray40 };
        int[] intArray42 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray41, intArray42);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray30, intArray42);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray13, intArray42);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray10, intArray42);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray9, intArray42);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray5, intArray42);
        double[][] doubleArray49 = new double[][] {};
        double[][] doubleArray50 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray49);
        double[][] doubleArray51 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray49);
        double[][] doubleArray52 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray49);
        double[][] doubleArray53 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray52);
        double[] doubleArray55 = new double[] { 1 };
        double[] doubleArray57 = new double[] { 1 };
        double[] doubleArray59 = new double[] { 1 };
        double[] doubleArray61 = new double[] { 1 };
        double[] doubleArray63 = new double[] { 1 };
        double[][] doubleArray64 = new double[][] { doubleArray55, doubleArray57, doubleArray59, doubleArray61, doubleArray63 };
        int[] intArray65 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray64, intArray65);
        double[][] doubleArray67 = new double[][] {};
        double[][] doubleArray68 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray67);
        int[] intArray69 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray68, intArray69);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray64, intArray69);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray52, intArray69);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray5, intArray69);
        double[] doubleArray75 = new double[] { 1 };
        double[] doubleArray77 = new double[] { 1 };
        double[] doubleArray79 = new double[] { 1 };
        double[] doubleArray81 = new double[] { 1 };
        double[] doubleArray83 = new double[] { 1 };
        double[][] doubleArray84 = new double[][] { doubleArray75, doubleArray77, doubleArray79, doubleArray81, doubleArray83 };
        int[] intArray85 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray84, intArray85);
        double[][] doubleArray87 = new double[][] {};
        double[][] doubleArray88 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray87);
        int[] intArray89 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray88, intArray89);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray84, intArray89);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray5, intArray89);
        java.lang.Class<?> wildcardClass93 = intArray89.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[]");
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[]");
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray75), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray77), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray79), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray81), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray83), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray84);
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray85), "[]");
        org.junit.Assert.assertNotNull(doubleArray87);
        org.junit.Assert.assertNotNull(doubleArray88);
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray89), "[]");
        org.junit.Assert.assertNotNull(wildcardClass93);
    }

    @Test
    public void test0627() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0627");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[][] doubleArray5 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[][] doubleArray6 = new double[][] {};
        double[][] doubleArray7 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray6);
        double[][] doubleArray8 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray7);
        double[] doubleArray15 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray22 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray29 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray36 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray37 = new double[][] { doubleArray15, doubleArray22, doubleArray29, doubleArray36 };
        double[][] doubleArray38 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray37);
        double[] doubleArray40 = new double[] { 1 };
        double[] doubleArray42 = new double[] { 1 };
        double[] doubleArray44 = new double[] { 1 };
        double[] doubleArray46 = new double[] { 1 };
        double[] doubleArray48 = new double[] { 1 };
        double[][] doubleArray49 = new double[][] { doubleArray40, doubleArray42, doubleArray44, doubleArray46, doubleArray48 };
        int[] intArray50 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray49, intArray50);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray38, intArray50);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray7, intArray50);
        double[] doubleArray57 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray61 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray65 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray69 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray70 = new double[][] { doubleArray57, doubleArray61, doubleArray65, doubleArray69 };
        double[] doubleArray72 = new double[] { 1 };
        double[] doubleArray74 = new double[] { 1 };
        double[] doubleArray76 = new double[] { 1 };
        double[] doubleArray78 = new double[] { 1 };
        double[] doubleArray80 = new double[] { 1 };
        double[][] doubleArray81 = new double[][] { doubleArray72, doubleArray74, doubleArray76, doubleArray78, doubleArray80 };
        int[] intArray82 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray81, intArray82);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray70, intArray82);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray7, intArray82);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray3, intArray82);
        double[][] doubleArray87 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[][] doubleArray88 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[][] doubleArray89 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray88);
        double[][] doubleArray90 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray88);
        double[][] doubleArray91 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray90);
        double[][] doubleArray92 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray91);
        java.lang.Class<?> wildcardClass93 = doubleArray92.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[]");
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray74), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray78), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray80), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray81);
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[]");
        org.junit.Assert.assertNotNull(doubleArray87);
        org.junit.Assert.assertNotNull(doubleArray88);
        org.junit.Assert.assertNotNull(doubleArray89);
        org.junit.Assert.assertNotNull(doubleArray90);
        org.junit.Assert.assertNotNull(doubleArray91);
        org.junit.Assert.assertNotNull(doubleArray92);
        org.junit.Assert.assertNotNull(wildcardClass93);
    }

    @Test
    public void test0628() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0628");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray30 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray31 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray32 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray33 = new double[][] {};
        double[][] doubleArray34 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray33);
        double[][] doubleArray35 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray34);
        double[] doubleArray39 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray43 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray47 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray51 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray52 = new double[][] { doubleArray39, doubleArray43, doubleArray47, doubleArray51 };
        double[] doubleArray54 = new double[] { 1 };
        double[] doubleArray56 = new double[] { 1 };
        double[] doubleArray58 = new double[] { 1 };
        double[] doubleArray60 = new double[] { 1 };
        double[] doubleArray62 = new double[] { 1 };
        double[][] doubleArray63 = new double[][] { doubleArray54, doubleArray56, doubleArray58, doubleArray60, doubleArray62 };
        int[] intArray64 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray63, intArray64);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray52, intArray64);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray35, intArray64);
        double[][] doubleArray68 = null;
        double[] doubleArray70 = new double[] { 1 };
        double[] doubleArray72 = new double[] { 1 };
        double[] doubleArray74 = new double[] { 1 };
        double[] doubleArray76 = new double[] { 1 };
        double[] doubleArray78 = new double[] { 1 };
        double[][] doubleArray79 = new double[][] { doubleArray70, doubleArray72, doubleArray74, doubleArray76, doubleArray78 };
        int[] intArray80 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray79, intArray80);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray68, intArray80);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray35, intArray80);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray28, intArray80);
        double[][] doubleArray85 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray86 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray85);
        java.lang.Class<?> wildcardClass87 = doubleArray86.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[]");
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray70), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray74), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray78), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[]");
        org.junit.Assert.assertNotNull(doubleArray85);
        org.junit.Assert.assertNotNull(doubleArray86);
        org.junit.Assert.assertNotNull(wildcardClass87);
    }

    @Test
    public void test0629() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0629");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray30 = new double[][] {};
        double[][] doubleArray31 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        double[][] doubleArray32 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray31);
        double[][] doubleArray33 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray32);
        double[][] doubleArray34 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray32);
        double[][] doubleArray35 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray32);
        double[][] doubleArray36 = new double[][] {};
        double[][] doubleArray37 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray36);
        double[][] doubleArray38 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray36);
        double[] doubleArray45 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray52 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray59 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray66 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray67 = new double[][] { doubleArray45, doubleArray52, doubleArray59, doubleArray66 };
        double[][] doubleArray68 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray67);
        double[][] doubleArray69 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray67);
        double[][] doubleArray70 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray67);
        double[][] doubleArray71 = new double[][] {};
        double[][] doubleArray72 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray71);
        int[] intArray73 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray72, intArray73);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray70, intArray73);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray38, intArray73);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray32, intArray73);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray29, intArray73);
        double[][] doubleArray79 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray29);
        java.lang.Class<?> wildcardClass80 = doubleArray29.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray66), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[]");
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertNotNull(wildcardClass80);
    }

    @Test
    public void test0630() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0630");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = new double[][] {};
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[] doubleArray5 = new double[] { 1 };
        double[] doubleArray7 = new double[] { 1 };
        double[] doubleArray9 = new double[] { 1 };
        double[] doubleArray11 = new double[] { 1 };
        double[] doubleArray13 = new double[] { 1 };
        double[][] doubleArray14 = new double[][] { doubleArray5, doubleArray7, doubleArray9, doubleArray11, doubleArray13 };
        int[] intArray15 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray14, intArray15);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray2, intArray15);
        double[] doubleArray21 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray25 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray29 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray33 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray34 = new double[][] { doubleArray21, doubleArray25, doubleArray29, doubleArray33 };
        double[] doubleArray36 = new double[] { 1 };
        double[] doubleArray38 = new double[] { 1 };
        double[] doubleArray40 = new double[] { 1 };
        double[] doubleArray42 = new double[] { 1 };
        double[] doubleArray44 = new double[] { 1 };
        double[][] doubleArray45 = new double[][] { doubleArray36, doubleArray38, doubleArray40, doubleArray42, doubleArray44 };
        int[] intArray46 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray45, intArray46);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray34, intArray46);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray2, intArray46);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray1, intArray46);
        double[][] doubleArray51 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray52 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray51);
        double[][] doubleArray53 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray52);
        double[][] doubleArray54 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray52);
        double[][] doubleArray55 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray54);
        double[][] doubleArray56 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray55);
        double[][] doubleArray57 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray56);
        java.lang.Class<?> wildcardClass58 = doubleArray57.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertNotNull(wildcardClass58);
    }

    @Test
    public void test0631() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0631");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray30 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray29);
        double[][] doubleArray31 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        double[][] doubleArray32 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        double[][] doubleArray33 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        double[][] doubleArray34 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        double[][] doubleArray35 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray34);
        double[][] doubleArray36 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray35);
        double[][] doubleArray37 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray35);
        double[][] doubleArray38 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray35);
        java.lang.Class<?> wildcardClass39 = doubleArray35.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertNotNull(wildcardClass39);
    }

    @Test
    public void test0632() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0632");
        double[][] doubleArray0 = null;
        double[][] doubleArray1 = new double[][] {};
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray3 = new double[][] {};
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[] doubleArray6 = new double[] { 1 };
        double[] doubleArray8 = new double[] { 1 };
        double[] doubleArray10 = new double[] { 1 };
        double[] doubleArray12 = new double[] { 1 };
        double[] doubleArray14 = new double[] { 1 };
        double[][] doubleArray15 = new double[][] { doubleArray6, doubleArray8, doubleArray10, doubleArray12, doubleArray14 };
        int[] intArray16 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray15, intArray16);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray3, intArray16);
        double[] doubleArray22 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray26 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray30 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray34 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray35 = new double[][] { doubleArray22, doubleArray26, doubleArray30, doubleArray34 };
        double[] doubleArray37 = new double[] { 1 };
        double[] doubleArray39 = new double[] { 1 };
        double[] doubleArray41 = new double[] { 1 };
        double[] doubleArray43 = new double[] { 1 };
        double[] doubleArray45 = new double[] { 1 };
        double[][] doubleArray46 = new double[][] { doubleArray37, doubleArray39, doubleArray41, doubleArray43, doubleArray45 };
        int[] intArray47 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray46, intArray47);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray35, intArray47);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray3, intArray47);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray2, intArray47);
        double[] doubleArray53 = new double[] { 1 };
        double[] doubleArray55 = new double[] { 1 };
        double[] doubleArray57 = new double[] { 1 };
        double[] doubleArray59 = new double[] { 1 };
        double[] doubleArray61 = new double[] { 1 };
        double[][] doubleArray62 = new double[][] { doubleArray53, doubleArray55, doubleArray57, doubleArray59, doubleArray61 };
        int[] intArray63 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray62, intArray63);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray2, intArray63);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray0, intArray63);
        java.lang.Class<?> wildcardClass67 = intArray63.getClass();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[]");
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[]");
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[]");
        org.junit.Assert.assertNotNull(wildcardClass67);
    }

    @Test
    public void test0633() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0633");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray30 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray29);
        double[][] doubleArray31 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        double[][] doubleArray32 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        double[][] doubleArray33 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        double[][] doubleArray34 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        double[][] doubleArray35 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray34);
        double[][] doubleArray36 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray35);
        double[][] doubleArray37 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray36);
        double[][] doubleArray38 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray36);
        double[][] doubleArray39 = new double[][] {};
        double[][] doubleArray40 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray39);
        double[][] doubleArray41 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray40);
        double[] doubleArray45 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray49 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray53 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray57 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray58 = new double[][] { doubleArray45, doubleArray49, doubleArray53, doubleArray57 };
        double[] doubleArray60 = new double[] { 1 };
        double[] doubleArray62 = new double[] { 1 };
        double[] doubleArray64 = new double[] { 1 };
        double[] doubleArray66 = new double[] { 1 };
        double[] doubleArray68 = new double[] { 1 };
        double[][] doubleArray69 = new double[][] { doubleArray60, doubleArray62, doubleArray64, doubleArray66, doubleArray68 };
        int[] intArray70 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray69, intArray70);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray58, intArray70);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray41, intArray70);
        double[][] doubleArray74 = null;
        double[] doubleArray76 = new double[] { 1 };
        double[] doubleArray78 = new double[] { 1 };
        double[] doubleArray80 = new double[] { 1 };
        double[] doubleArray82 = new double[] { 1 };
        double[] doubleArray84 = new double[] { 1 };
        double[][] doubleArray85 = new double[][] { doubleArray76, doubleArray78, doubleArray80, doubleArray82, doubleArray84 };
        int[] intArray86 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray85, intArray86);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray74, intArray86);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray41, intArray86);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray36, intArray86);
        java.lang.Class<?> wildcardClass91 = doubleArray36.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray66), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[]");
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray78), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray80), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray82), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray84), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray85);
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray86), "[]");
        org.junit.Assert.assertNotNull(wildcardClass91);
    }

    @Test
    public void test0634() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0634");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray30 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray29);
        double[][] doubleArray31 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        double[][] doubleArray32 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        double[][] doubleArray33 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        double[][] doubleArray34 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        double[] doubleArray36 = new double[] { 1 };
        double[] doubleArray38 = new double[] { 1 };
        double[] doubleArray40 = new double[] { 1 };
        double[] doubleArray42 = new double[] { 1 };
        double[] doubleArray44 = new double[] { 1 };
        double[][] doubleArray45 = new double[][] { doubleArray36, doubleArray38, doubleArray40, doubleArray42, doubleArray44 };
        int[] intArray46 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray45, intArray46);
        double[][] doubleArray48 = new double[][] {};
        double[][] doubleArray49 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray48);
        int[] intArray50 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray49, intArray50);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray45, intArray50);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray34, intArray50);
        java.lang.Class<?> wildcardClass54 = doubleArray34.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[]");
        org.junit.Assert.assertNotNull(wildcardClass54);
    }

    @Test
    public void test0635() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0635");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray5 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray4);
        double[][] doubleArray6 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray4);
        double[][] doubleArray7 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray6);
        double[][] doubleArray8 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray6);
        double[][] doubleArray9 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray8);
        java.lang.Class<?> wildcardClass10 = doubleArray8.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertNotNull(wildcardClass10);
    }

    @Test
    public void test0636() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0636");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[] doubleArray31 = new double[] { 1 };
        double[] doubleArray33 = new double[] { 1 };
        double[] doubleArray35 = new double[] { 1 };
        double[] doubleArray37 = new double[] { 1 };
        double[] doubleArray39 = new double[] { 1 };
        double[][] doubleArray40 = new double[][] { doubleArray31, doubleArray33, doubleArray35, doubleArray37, doubleArray39 };
        int[] intArray41 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray40, intArray41);
        double[][] doubleArray43 = new double[][] {};
        double[][] doubleArray44 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray43);
        int[] intArray45 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray44, intArray45);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray40, intArray45);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray28, intArray45);
        double[][] doubleArray49 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray50 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray51 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray52 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray53 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        int[] intArray55 = new int[] { '4' };
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray28, intArray55);
        java.lang.Class<?> wildcardClass57 = intArray55.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[0]");
        org.junit.Assert.assertNotNull(wildcardClass57);
    }

    @Test
    public void test0637() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0637");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = new double[][] {};
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[] doubleArray8 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray12 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray16 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray20 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray21 = new double[][] { doubleArray8, doubleArray12, doubleArray16, doubleArray20 };
        double[] doubleArray23 = new double[] { 1 };
        double[] doubleArray25 = new double[] { 1 };
        double[] doubleArray27 = new double[] { 1 };
        double[] doubleArray29 = new double[] { 1 };
        double[] doubleArray31 = new double[] { 1 };
        double[][] doubleArray32 = new double[][] { doubleArray23, doubleArray25, doubleArray27, doubleArray29, doubleArray31 };
        int[] intArray33 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray32, intArray33);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray21, intArray33);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray3, intArray33);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray1, intArray33);
        double[][] doubleArray38 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray39 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray38);
        double[][] doubleArray40 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray39);
        double[][] doubleArray41 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray39);
        double[][] doubleArray42 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray41);
        double[][] doubleArray43 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray41);
        double[][] doubleArray44 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray43);
        double[][] doubleArray45 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray44);
        java.lang.Class<?> wildcardClass46 = doubleArray44.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertNotNull(wildcardClass46);
    }

    @Test
    public void test0638() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0638");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray5 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray4);
        double[][] doubleArray6 = new double[][] {};
        double[][] doubleArray7 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray6);
        double[][] doubleArray8 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray6);
        double[][] doubleArray9 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray6);
        double[][] doubleArray10 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray9);
        double[][] doubleArray11 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray10);
        double[][] doubleArray12 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray11);
        double[][] doubleArray13 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray11);
        double[][] doubleArray14 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray11);
        double[][] doubleArray15 = new double[][] {};
        double[][] doubleArray16 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray15);
        double[][] doubleArray17 = new double[][] {};
        double[][] doubleArray18 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray17);
        double[][] doubleArray19 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray18);
        double[] doubleArray26 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray33 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray40 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray47 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray48 = new double[][] { doubleArray26, doubleArray33, doubleArray40, doubleArray47 };
        double[][] doubleArray49 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray48);
        double[] doubleArray51 = new double[] { 1 };
        double[] doubleArray53 = new double[] { 1 };
        double[] doubleArray55 = new double[] { 1 };
        double[] doubleArray57 = new double[] { 1 };
        double[] doubleArray59 = new double[] { 1 };
        double[][] doubleArray60 = new double[][] { doubleArray51, doubleArray53, doubleArray55, doubleArray57, doubleArray59 };
        int[] intArray61 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray60, intArray61);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray49, intArray61);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray18, intArray61);
        double[] doubleArray68 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray72 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray76 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray80 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray81 = new double[][] { doubleArray68, doubleArray72, doubleArray76, doubleArray80 };
        double[] doubleArray83 = new double[] { 1 };
        double[] doubleArray85 = new double[] { 1 };
        double[] doubleArray87 = new double[] { 1 };
        double[] doubleArray89 = new double[] { 1 };
        double[] doubleArray91 = new double[] { 1 };
        double[][] doubleArray92 = new double[][] { doubleArray83, doubleArray85, doubleArray87, doubleArray89, doubleArray91 };
        int[] intArray93 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray92, intArray93);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray81, intArray93);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray18, intArray93);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray15, intArray93);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray11, intArray93);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray5, intArray93);
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[]");
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray80), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray81);
        org.junit.Assert.assertNotNull(doubleArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray83), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray85), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray87), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray89), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray91), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray92);
        org.junit.Assert.assertNotNull(intArray93);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray93), "[]");
    }

    @Test
    public void test0639() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0639");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[] doubleArray10 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray17 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray24 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray31 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray32 = new double[][] { doubleArray10, doubleArray17, doubleArray24, doubleArray31 };
        double[][] doubleArray33 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray32);
        double[][] doubleArray34 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray32);
        double[][] doubleArray35 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray32);
        double[] doubleArray37 = new double[] { 1 };
        double[] doubleArray39 = new double[] { 1 };
        double[] doubleArray41 = new double[] { 1 };
        double[] doubleArray43 = new double[] { 1 };
        double[] doubleArray45 = new double[] { 1 };
        double[][] doubleArray46 = new double[][] { doubleArray37, doubleArray39, doubleArray41, doubleArray43, doubleArray45 };
        int[] intArray47 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray46, intArray47);
        double[] doubleArray55 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray62 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray69 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray76 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray77 = new double[][] { doubleArray55, doubleArray62, doubleArray69, doubleArray76 };
        double[][] doubleArray78 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray77);
        double[] doubleArray80 = new double[] { 1 };
        double[] doubleArray82 = new double[] { 1 };
        double[] doubleArray84 = new double[] { 1 };
        double[] doubleArray86 = new double[] { 1 };
        double[] doubleArray88 = new double[] { 1 };
        double[][] doubleArray89 = new double[][] { doubleArray80, doubleArray82, doubleArray84, doubleArray86, doubleArray88 };
        int[] intArray90 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray89, intArray90);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray78, intArray90);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray46, intArray90);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray35, intArray90);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray3, intArray90);
        double[][] doubleArray96 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        int[] intArray97 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray96, intArray97);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[]");
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray80), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray82), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray84), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray86), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray88), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray89);
        org.junit.Assert.assertNotNull(intArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray90), "[]");
        org.junit.Assert.assertNotNull(doubleArray96);
    }

    @Test
    public void test0640() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0640");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray30 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray31 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray32 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray31);
        double[] doubleArray39 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray46 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray53 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray60 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray61 = new double[][] { doubleArray39, doubleArray46, doubleArray53, doubleArray60 };
        double[][] doubleArray62 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray61);
        double[] doubleArray64 = new double[] { 1 };
        double[] doubleArray66 = new double[] { 1 };
        double[] doubleArray68 = new double[] { 1 };
        double[] doubleArray70 = new double[] { 1 };
        double[] doubleArray72 = new double[] { 1 };
        double[][] doubleArray73 = new double[][] { doubleArray64, doubleArray66, doubleArray68, doubleArray70, doubleArray72 };
        int[] intArray74 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray73, intArray74);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray62, intArray74);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray32, intArray74);
        int[] intArray78 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray32, intArray78);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray66), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray70), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[]");
    }

    @Test
    public void test0641() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0641");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[][] doubleArray5 = new double[][] {};
        double[][] doubleArray6 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray5);
        double[][] doubleArray7 = new double[][] {};
        double[][] doubleArray8 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray7);
        double[][] doubleArray9 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray8);
        double[] doubleArray16 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray23 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray30 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray37 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray38 = new double[][] { doubleArray16, doubleArray23, doubleArray30, doubleArray37 };
        double[][] doubleArray39 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray38);
        double[] doubleArray41 = new double[] { 1 };
        double[] doubleArray43 = new double[] { 1 };
        double[] doubleArray45 = new double[] { 1 };
        double[] doubleArray47 = new double[] { 1 };
        double[] doubleArray49 = new double[] { 1 };
        double[][] doubleArray50 = new double[][] { doubleArray41, doubleArray43, doubleArray45, doubleArray47, doubleArray49 };
        int[] intArray51 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray50, intArray51);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray39, intArray51);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray8, intArray51);
        double[] doubleArray58 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray62 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray66 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray70 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray71 = new double[][] { doubleArray58, doubleArray62, doubleArray66, doubleArray70 };
        double[] doubleArray73 = new double[] { 1 };
        double[] doubleArray75 = new double[] { 1 };
        double[] doubleArray77 = new double[] { 1 };
        double[] doubleArray79 = new double[] { 1 };
        double[] doubleArray81 = new double[] { 1 };
        double[][] doubleArray82 = new double[][] { doubleArray73, doubleArray75, doubleArray77, doubleArray79, doubleArray81 };
        int[] intArray83 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray82, intArray83);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray71, intArray83);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray8, intArray83);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray5, intArray83);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray4, intArray83);
        java.lang.Class<?> wildcardClass89 = doubleArray4.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[]");
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray66), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray70), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray73), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray75), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray77), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray79), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray81), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray82);
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray83), "[]");
        org.junit.Assert.assertNotNull(wildcardClass89);
    }

    @Test
    public void test0642() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0642");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = new double[][] {};
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[] doubleArray11 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray18 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray25 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray32 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray33 = new double[][] { doubleArray11, doubleArray18, doubleArray25, doubleArray32 };
        double[][] doubleArray34 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray33);
        double[] doubleArray36 = new double[] { 1 };
        double[] doubleArray38 = new double[] { 1 };
        double[] doubleArray40 = new double[] { 1 };
        double[] doubleArray42 = new double[] { 1 };
        double[] doubleArray44 = new double[] { 1 };
        double[][] doubleArray45 = new double[][] { doubleArray36, doubleArray38, doubleArray40, doubleArray42, doubleArray44 };
        int[] intArray46 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray45, intArray46);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray34, intArray46);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray3, intArray46);
        double[] doubleArray53 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray57 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray61 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray65 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray66 = new double[][] { doubleArray53, doubleArray57, doubleArray61, doubleArray65 };
        double[] doubleArray68 = new double[] { 1 };
        double[] doubleArray70 = new double[] { 1 };
        double[] doubleArray72 = new double[] { 1 };
        double[] doubleArray74 = new double[] { 1 };
        double[] doubleArray76 = new double[] { 1 };
        double[][] doubleArray77 = new double[][] { doubleArray68, doubleArray70, doubleArray72, doubleArray74, doubleArray76 };
        int[] intArray78 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray77, intArray78);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray66, intArray78);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray3, intArray78);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray0, intArray78);
        double[][] doubleArray83 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray84 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        int[] intArray85 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray84, intArray85);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[]");
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray70), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray74), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[]");
        org.junit.Assert.assertNotNull(doubleArray83);
        org.junit.Assert.assertNotNull(doubleArray84);
    }

    @Test
    public void test0643() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0643");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[] doubleArray3 = new double[] { 1 };
        double[] doubleArray5 = new double[] { 1 };
        double[] doubleArray7 = new double[] { 1 };
        double[] doubleArray9 = new double[] { 1 };
        double[] doubleArray11 = new double[] { 1 };
        double[][] doubleArray12 = new double[][] { doubleArray3, doubleArray5, doubleArray7, doubleArray9, doubleArray11 };
        int[] intArray13 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray12, intArray13);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray0, intArray13);
        double[] doubleArray19 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray23 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray27 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray31 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray32 = new double[][] { doubleArray19, doubleArray23, doubleArray27, doubleArray31 };
        double[] doubleArray34 = new double[] { 1 };
        double[] doubleArray36 = new double[] { 1 };
        double[] doubleArray38 = new double[] { 1 };
        double[] doubleArray40 = new double[] { 1 };
        double[] doubleArray42 = new double[] { 1 };
        double[][] doubleArray43 = new double[][] { doubleArray34, doubleArray36, doubleArray38, doubleArray40, doubleArray42 };
        int[] intArray44 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray43, intArray44);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray32, intArray44);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray0, intArray44);
        double[][] doubleArray48 = new double[][] {};
        double[][] doubleArray49 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray48);
        double[] doubleArray51 = new double[] { 1 };
        double[] doubleArray53 = new double[] { 1 };
        double[] doubleArray55 = new double[] { 1 };
        double[] doubleArray57 = new double[] { 1 };
        double[] doubleArray59 = new double[] { 1 };
        double[][] doubleArray60 = new double[][] { doubleArray51, doubleArray53, doubleArray55, doubleArray57, doubleArray59 };
        int[] intArray61 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray60, intArray61);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray48, intArray61);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray0, intArray61);
        double[][] doubleArray65 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray66 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        java.lang.Class<?> wildcardClass67 = doubleArray0.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[]");
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertNotNull(wildcardClass67);
    }

    @Test
    public void test0644() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0644");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray30 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray29);
        double[][] doubleArray31 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        double[][] doubleArray32 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        double[][] doubleArray33 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        double[][] doubleArray34 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        double[][] doubleArray35 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray34);
        double[][] doubleArray36 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray35);
        double[][] doubleArray37 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray35);
        java.lang.Class<?> wildcardClass38 = doubleArray35.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertNotNull(wildcardClass38);
    }

    @Test
    public void test0645() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0645");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[][] doubleArray5 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray4);
        double[][] doubleArray6 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray5);
        double[][] doubleArray7 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray5);
        double[] doubleArray11 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray15 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray19 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray23 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray24 = new double[][] { doubleArray11, doubleArray15, doubleArray19, doubleArray23 };
        double[] doubleArray26 = new double[] { 1 };
        double[] doubleArray28 = new double[] { 1 };
        double[] doubleArray30 = new double[] { 1 };
        double[] doubleArray32 = new double[] { 1 };
        double[] doubleArray34 = new double[] { 1 };
        double[][] doubleArray35 = new double[][] { doubleArray26, doubleArray28, doubleArray30, doubleArray32, doubleArray34 };
        int[] intArray36 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray35, intArray36);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray24, intArray36);
        double[][] doubleArray39 = new double[][] {};
        double[][] doubleArray40 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray39);
        double[][] doubleArray41 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray40);
        double[][] doubleArray42 = new double[][] {};
        double[][] doubleArray43 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray42);
        double[][] doubleArray44 = new double[][] {};
        double[][] doubleArray45 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray44);
        double[] doubleArray47 = new double[] { 1 };
        double[] doubleArray49 = new double[] { 1 };
        double[] doubleArray51 = new double[] { 1 };
        double[] doubleArray53 = new double[] { 1 };
        double[] doubleArray55 = new double[] { 1 };
        double[][] doubleArray56 = new double[][] { doubleArray47, doubleArray49, doubleArray51, doubleArray53, doubleArray55 };
        int[] intArray57 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray56, intArray57);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray44, intArray57);
        double[] doubleArray63 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray67 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray71 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray75 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray76 = new double[][] { doubleArray63, doubleArray67, doubleArray71, doubleArray75 };
        double[] doubleArray78 = new double[] { 1 };
        double[] doubleArray80 = new double[] { 1 };
        double[] doubleArray82 = new double[] { 1 };
        double[] doubleArray84 = new double[] { 1 };
        double[] doubleArray86 = new double[] { 1 };
        double[][] doubleArray87 = new double[][] { doubleArray78, doubleArray80, doubleArray82, doubleArray84, doubleArray86 };
        int[] intArray88 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray87, intArray88);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray76, intArray88);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray44, intArray88);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray43, intArray88);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray41, intArray88);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray24, intArray88);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray5, intArray88);
        java.lang.Class<?> wildcardClass96 = intArray88.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[]");
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray71), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray75), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray78), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray80), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray82), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray84), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray86), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray87);
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray88), "[]");
        org.junit.Assert.assertNotNull(wildcardClass96);
    }

    @Test
    public void test0646() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0646");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[] doubleArray9 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray16 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray23 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray30 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray31 = new double[][] { doubleArray9, doubleArray16, doubleArray23, doubleArray30 };
        double[][] doubleArray32 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray31);
        double[][] doubleArray33 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray31);
        double[][] doubleArray34 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray31);
        double[][] doubleArray35 = new double[][] {};
        double[][] doubleArray36 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray35);
        int[] intArray37 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray36, intArray37);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray34, intArray37);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray2, intArray37);
        double[][] doubleArray41 = null;
        double[][] doubleArray42 = new double[][] {};
        double[][] doubleArray43 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray42);
        double[][] doubleArray44 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray43);
        double[] doubleArray48 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray52 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray56 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray60 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray61 = new double[][] { doubleArray48, doubleArray52, doubleArray56, doubleArray60 };
        double[] doubleArray63 = new double[] { 1 };
        double[] doubleArray65 = new double[] { 1 };
        double[] doubleArray67 = new double[] { 1 };
        double[] doubleArray69 = new double[] { 1 };
        double[] doubleArray71 = new double[] { 1 };
        double[][] doubleArray72 = new double[][] { doubleArray63, doubleArray65, doubleArray67, doubleArray69, doubleArray71 };
        int[] intArray73 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray72, intArray73);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray61, intArray73);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray44, intArray73);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray41, intArray73);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray2, intArray73);
        double[][] doubleArray79 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray80 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray79);
        double[][] doubleArray81 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray80);
        java.lang.Class<?> wildcardClass82 = doubleArray80.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray71), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[]");
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertNotNull(doubleArray81);
        org.junit.Assert.assertNotNull(wildcardClass82);
    }

    @Test
    public void test0647() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0647");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray30 = new double[][] {};
        double[][] doubleArray31 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        double[][] doubleArray32 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray31);
        double[][] doubleArray33 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray32);
        double[][] doubleArray34 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray32);
        double[][] doubleArray35 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray32);
        double[][] doubleArray36 = new double[][] {};
        double[][] doubleArray37 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray36);
        double[][] doubleArray38 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray36);
        double[] doubleArray45 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray52 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray59 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray66 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray67 = new double[][] { doubleArray45, doubleArray52, doubleArray59, doubleArray66 };
        double[][] doubleArray68 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray67);
        double[][] doubleArray69 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray67);
        double[][] doubleArray70 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray67);
        double[][] doubleArray71 = new double[][] {};
        double[][] doubleArray72 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray71);
        int[] intArray73 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray72, intArray73);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray70, intArray73);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray38, intArray73);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray32, intArray73);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray29, intArray73);
        double[][] doubleArray79 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray29);
        java.lang.Class<?> wildcardClass80 = doubleArray79.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray66), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[]");
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertNotNull(wildcardClass80);
    }

    @Test
    public void test0648() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0648");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[] doubleArray11 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray18 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray25 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray32 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray33 = new double[][] { doubleArray11, doubleArray18, doubleArray25, doubleArray32 };
        double[][] doubleArray34 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray33);
        double[][] doubleArray35 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray34);
        double[][] doubleArray36 = new double[][] {};
        double[][] doubleArray37 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray36);
        double[] doubleArray39 = new double[] { 1 };
        double[] doubleArray41 = new double[] { 1 };
        double[] doubleArray43 = new double[] { 1 };
        double[] doubleArray45 = new double[] { 1 };
        double[] doubleArray47 = new double[] { 1 };
        double[][] doubleArray48 = new double[][] { doubleArray39, doubleArray41, doubleArray43, doubleArray45, doubleArray47 };
        int[] intArray49 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray48, intArray49);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray36, intArray49);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray35, intArray49);
        double[][] doubleArray53 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray35);
        double[] doubleArray55 = new double[] { 1 };
        double[] doubleArray57 = new double[] { 1 };
        double[] doubleArray59 = new double[] { 1 };
        double[] doubleArray61 = new double[] { 1 };
        double[] doubleArray63 = new double[] { 1 };
        double[][] doubleArray64 = new double[][] { doubleArray55, doubleArray57, doubleArray59, doubleArray61, doubleArray63 };
        int[] intArray65 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray64, intArray65);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray53, intArray65);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray3, intArray65);
        double[][] doubleArray69 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[][] doubleArray70 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray69);
        java.lang.Class<?> wildcardClass71 = doubleArray69.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[]");
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[]");
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertNotNull(wildcardClass71);
    }

    @Test
    public void test0649() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0649");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray30 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray31 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray32 = new double[][] {};
        double[][] doubleArray33 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray32);
        double[][] doubleArray34 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray33);
        double[][] doubleArray35 = new double[][] {};
        double[][] doubleArray36 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray35);
        double[][] doubleArray37 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray35);
        double[][] doubleArray38 = new double[][] {};
        double[][] doubleArray39 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray38);
        double[][] doubleArray40 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray39);
        double[][] doubleArray41 = new double[][] {};
        double[][] doubleArray42 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray41);
        double[][] doubleArray43 = new double[][] {};
        double[][] doubleArray44 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray43);
        double[] doubleArray46 = new double[] { 1 };
        double[] doubleArray48 = new double[] { 1 };
        double[] doubleArray50 = new double[] { 1 };
        double[] doubleArray52 = new double[] { 1 };
        double[] doubleArray54 = new double[] { 1 };
        double[][] doubleArray55 = new double[][] { doubleArray46, doubleArray48, doubleArray50, doubleArray52, doubleArray54 };
        int[] intArray56 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray55, intArray56);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray43, intArray56);
        double[] doubleArray62 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray66 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray70 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray74 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray75 = new double[][] { doubleArray62, doubleArray66, doubleArray70, doubleArray74 };
        double[] doubleArray77 = new double[] { 1 };
        double[] doubleArray79 = new double[] { 1 };
        double[] doubleArray81 = new double[] { 1 };
        double[] doubleArray83 = new double[] { 1 };
        double[] doubleArray85 = new double[] { 1 };
        double[][] doubleArray86 = new double[][] { doubleArray77, doubleArray79, doubleArray81, doubleArray83, doubleArray85 };
        int[] intArray87 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray86, intArray87);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray75, intArray87);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray43, intArray87);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray42, intArray87);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray40, intArray87);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray35, intArray87);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray34, intArray87);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray31, intArray87);
        double[][] doubleArray96 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray31);
        double[][] doubleArray97 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray96);
        java.lang.Class<?> wildcardClass98 = doubleArray97.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[]");
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray66), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray70), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray74), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray77), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray79), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray81), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray83), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray85), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray86);
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray87), "[]");
        org.junit.Assert.assertNotNull(doubleArray96);
        org.junit.Assert.assertNotNull(doubleArray97);
        org.junit.Assert.assertNotNull(wildcardClass98);
    }

    @Test
    public void test0650() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0650");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray30 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray29);
        double[][] doubleArray31 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        double[][] doubleArray32 = new double[][] {};
        double[][] doubleArray33 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray32);
        int[] intArray34 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray33, intArray34);
        double[][] doubleArray36 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray33);
        double[][] doubleArray37 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray36);
        double[][] doubleArray38 = new double[][] {};
        double[][] doubleArray39 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray38);
        int[] intArray40 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray39, intArray40);
        double[] doubleArray43 = new double[] { 1 };
        double[] doubleArray45 = new double[] { 1 };
        double[] doubleArray47 = new double[] { 1 };
        double[] doubleArray49 = new double[] { 1 };
        double[] doubleArray51 = new double[] { 1 };
        double[][] doubleArray52 = new double[][] { doubleArray43, doubleArray45, doubleArray47, doubleArray49, doubleArray51 };
        int[] intArray53 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray52, intArray53);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray39, intArray53);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray36, intArray53);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray31, intArray53);
        java.lang.Class<?> wildcardClass58 = doubleArray31.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[]");
        org.junit.Assert.assertNotNull(wildcardClass58);
    }

    @Test
    public void test0651() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0651");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[] doubleArray3 = new double[] { 1 };
        double[] doubleArray5 = new double[] { 1 };
        double[] doubleArray7 = new double[] { 1 };
        double[] doubleArray9 = new double[] { 1 };
        double[] doubleArray11 = new double[] { 1 };
        double[][] doubleArray12 = new double[][] { doubleArray3, doubleArray5, doubleArray7, doubleArray9, doubleArray11 };
        int[] intArray13 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray12, intArray13);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray0, intArray13);
        double[][] doubleArray16 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray17 = new double[][] {};
        double[][] doubleArray18 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray17);
        double[][] doubleArray19 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray17);
        double[][] doubleArray20 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray17);
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray34 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray41 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray48 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray49 = new double[][] { doubleArray27, doubleArray34, doubleArray41, doubleArray48 };
        double[][] doubleArray50 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray49);
        double[][] doubleArray51 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray50);
        double[][] doubleArray52 = new double[][] {};
        double[][] doubleArray53 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray52);
        double[] doubleArray55 = new double[] { 1 };
        double[] doubleArray57 = new double[] { 1 };
        double[] doubleArray59 = new double[] { 1 };
        double[] doubleArray61 = new double[] { 1 };
        double[] doubleArray63 = new double[] { 1 };
        double[][] doubleArray64 = new double[][] { doubleArray55, doubleArray57, doubleArray59, doubleArray61, doubleArray63 };
        int[] intArray65 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray64, intArray65);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray52, intArray65);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray51, intArray65);
        double[][] doubleArray69 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray51);
        double[] doubleArray71 = new double[] { 1 };
        double[] doubleArray73 = new double[] { 1 };
        double[] doubleArray75 = new double[] { 1 };
        double[] doubleArray77 = new double[] { 1 };
        double[] doubleArray79 = new double[] { 1 };
        double[][] doubleArray80 = new double[][] { doubleArray71, doubleArray73, doubleArray75, doubleArray77, doubleArray79 };
        int[] intArray81 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray80, intArray81);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray69, intArray81);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray17, intArray81);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray16, intArray81);
        java.lang.Class<?> wildcardClass86 = doubleArray16.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[]");
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray71), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray73), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray75), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray77), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray79), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray81), "[]");
        org.junit.Assert.assertNotNull(wildcardClass86);
    }

    @Test
    public void test0652() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0652");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        int[] intArray2 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray1, intArray2);
        double[] doubleArray5 = new double[] { 1 };
        double[] doubleArray7 = new double[] { 1 };
        double[] doubleArray9 = new double[] { 1 };
        double[] doubleArray11 = new double[] { 1 };
        double[] doubleArray13 = new double[] { 1 };
        double[][] doubleArray14 = new double[][] { doubleArray5, doubleArray7, doubleArray9, doubleArray11, doubleArray13 };
        int[] intArray15 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray14, intArray15);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray1, intArray15);
        double[][] doubleArray18 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray19 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray18);
        java.lang.Class<?> wildcardClass20 = doubleArray18.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertNotNull(wildcardClass20);
    }

    @Test
    public void test0653() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0653");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[] doubleArray31 = new double[] { 1 };
        double[] doubleArray33 = new double[] { 1 };
        double[] doubleArray35 = new double[] { 1 };
        double[] doubleArray37 = new double[] { 1 };
        double[] doubleArray39 = new double[] { 1 };
        double[][] doubleArray40 = new double[][] { doubleArray31, doubleArray33, doubleArray35, doubleArray37, doubleArray39 };
        int[] intArray41 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray40, intArray41);
        double[][] doubleArray43 = new double[][] {};
        double[][] doubleArray44 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray43);
        int[] intArray45 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray44, intArray45);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray40, intArray45);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray28, intArray45);
        double[][] doubleArray49 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray50 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray51 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray52 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray51);
        double[][] doubleArray53 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray51);
        double[][] doubleArray54 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray53);
        double[][] doubleArray55 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray54);
        java.lang.Class<?> wildcardClass56 = doubleArray55.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertNotNull(wildcardClass56);
    }

    @Test
    public void test0654() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0654");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[] doubleArray6 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray10 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray14 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray18 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray19 = new double[][] { doubleArray6, doubleArray10, doubleArray14, doubleArray18 };
        double[] doubleArray21 = new double[] { 1 };
        double[] doubleArray23 = new double[] { 1 };
        double[] doubleArray25 = new double[] { 1 };
        double[] doubleArray27 = new double[] { 1 };
        double[] doubleArray29 = new double[] { 1 };
        double[][] doubleArray30 = new double[][] { doubleArray21, doubleArray23, doubleArray25, doubleArray27, doubleArray29 };
        int[] intArray31 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray30, intArray31);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray19, intArray31);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray2, intArray31);
        double[][] doubleArray35 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray36 = new double[][] {};
        double[][] doubleArray37 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray36);
        double[][] doubleArray38 = new double[][] {};
        double[][] doubleArray39 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray38);
        double[] doubleArray41 = new double[] { 1 };
        double[] doubleArray43 = new double[] { 1 };
        double[] doubleArray45 = new double[] { 1 };
        double[] doubleArray47 = new double[] { 1 };
        double[] doubleArray49 = new double[] { 1 };
        double[][] doubleArray50 = new double[][] { doubleArray41, doubleArray43, doubleArray45, doubleArray47, doubleArray49 };
        int[] intArray51 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray50, intArray51);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray38, intArray51);
        double[] doubleArray57 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray61 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray65 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray69 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray70 = new double[][] { doubleArray57, doubleArray61, doubleArray65, doubleArray69 };
        double[] doubleArray72 = new double[] { 1 };
        double[] doubleArray74 = new double[] { 1 };
        double[] doubleArray76 = new double[] { 1 };
        double[] doubleArray78 = new double[] { 1 };
        double[] doubleArray80 = new double[] { 1 };
        double[][] doubleArray81 = new double[][] { doubleArray72, doubleArray74, doubleArray76, doubleArray78, doubleArray80 };
        int[] intArray82 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray81, intArray82);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray70, intArray82);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray38, intArray82);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray37, intArray82);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray35, intArray82);
        int[] intArray88 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray35, intArray88);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[]");
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray74), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray78), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray80), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray81);
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[]");
    }

    @Test
    public void test0655() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0655");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray30 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray31 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray32 = new double[][] {};
        double[][] doubleArray33 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray32);
        double[][] doubleArray34 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray33);
        double[][] doubleArray35 = new double[][] {};
        double[][] doubleArray36 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray35);
        double[][] doubleArray37 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray35);
        double[][] doubleArray38 = new double[][] {};
        double[][] doubleArray39 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray38);
        double[][] doubleArray40 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray39);
        double[][] doubleArray41 = new double[][] {};
        double[][] doubleArray42 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray41);
        double[][] doubleArray43 = new double[][] {};
        double[][] doubleArray44 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray43);
        double[] doubleArray46 = new double[] { 1 };
        double[] doubleArray48 = new double[] { 1 };
        double[] doubleArray50 = new double[] { 1 };
        double[] doubleArray52 = new double[] { 1 };
        double[] doubleArray54 = new double[] { 1 };
        double[][] doubleArray55 = new double[][] { doubleArray46, doubleArray48, doubleArray50, doubleArray52, doubleArray54 };
        int[] intArray56 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray55, intArray56);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray43, intArray56);
        double[] doubleArray62 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray66 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray70 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray74 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray75 = new double[][] { doubleArray62, doubleArray66, doubleArray70, doubleArray74 };
        double[] doubleArray77 = new double[] { 1 };
        double[] doubleArray79 = new double[] { 1 };
        double[] doubleArray81 = new double[] { 1 };
        double[] doubleArray83 = new double[] { 1 };
        double[] doubleArray85 = new double[] { 1 };
        double[][] doubleArray86 = new double[][] { doubleArray77, doubleArray79, doubleArray81, doubleArray83, doubleArray85 };
        int[] intArray87 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray86, intArray87);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray75, intArray87);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray43, intArray87);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray42, intArray87);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray40, intArray87);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray35, intArray87);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray34, intArray87);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray31, intArray87);
        double[][] doubleArray96 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray31);
        double[][] doubleArray97 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray31);
        double[][] doubleArray98 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray31);
        double[][] doubleArray99 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray98);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[]");
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray66), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray70), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray74), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray77), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray79), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray81), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray83), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray85), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray86);
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray87), "[]");
        org.junit.Assert.assertNotNull(doubleArray96);
        org.junit.Assert.assertNotNull(doubleArray97);
        org.junit.Assert.assertNotNull(doubleArray98);
        org.junit.Assert.assertNotNull(doubleArray99);
    }

    @Test
    public void test0656() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0656");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = new double[][] {};
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[] doubleArray8 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray12 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray16 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray20 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray21 = new double[][] { doubleArray8, doubleArray12, doubleArray16, doubleArray20 };
        double[] doubleArray23 = new double[] { 1 };
        double[] doubleArray25 = new double[] { 1 };
        double[] doubleArray27 = new double[] { 1 };
        double[] doubleArray29 = new double[] { 1 };
        double[] doubleArray31 = new double[] { 1 };
        double[][] doubleArray32 = new double[][] { doubleArray23, doubleArray25, doubleArray27, doubleArray29, doubleArray31 };
        int[] intArray33 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray32, intArray33);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray21, intArray33);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray3, intArray33);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray1, intArray33);
        double[][] doubleArray38 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray39 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray38);
        double[][] doubleArray40 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray39);
        double[][] doubleArray41 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray39);
        java.lang.Class<?> wildcardClass42 = doubleArray41.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertNotNull(wildcardClass42);
    }

    @Test
    public void test0657() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0657");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[][] doubleArray5 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray4);
        double[][] doubleArray6 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray5);
        double[][] doubleArray7 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray5);
        double[][] doubleArray8 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray5);
        double[][] doubleArray9 = new double[][] {};
        double[][] doubleArray10 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray9);
        double[] doubleArray12 = new double[] { 1 };
        double[] doubleArray14 = new double[] { 1 };
        double[] doubleArray16 = new double[] { 1 };
        double[] doubleArray18 = new double[] { 1 };
        double[] doubleArray20 = new double[] { 1 };
        double[][] doubleArray21 = new double[][] { doubleArray12, doubleArray14, doubleArray16, doubleArray18, doubleArray20 };
        int[] intArray22 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray21, intArray22);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray9, intArray22);
        double[] doubleArray31 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray38 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray45 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray52 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray53 = new double[][] { doubleArray31, doubleArray38, doubleArray45, doubleArray52 };
        double[][] doubleArray54 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray53);
        double[][] doubleArray55 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray54);
        double[][] doubleArray56 = new double[][] {};
        double[][] doubleArray57 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray56);
        double[] doubleArray59 = new double[] { 1 };
        double[] doubleArray61 = new double[] { 1 };
        double[] doubleArray63 = new double[] { 1 };
        double[] doubleArray65 = new double[] { 1 };
        double[] doubleArray67 = new double[] { 1 };
        double[][] doubleArray68 = new double[][] { doubleArray59, doubleArray61, doubleArray63, doubleArray65, doubleArray67 };
        int[] intArray69 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray68, intArray69);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray56, intArray69);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray55, intArray69);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray9, intArray69);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray8, intArray69);
        java.lang.Class<?> wildcardClass75 = intArray69.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[]");
        org.junit.Assert.assertNotNull(wildcardClass75);
    }

    @Test
    public void test0658() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0658");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray5 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray6 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[] doubleArray8 = new double[] { 1 };
        double[] doubleArray10 = new double[] { 1 };
        double[] doubleArray12 = new double[] { 1 };
        double[] doubleArray14 = new double[] { 1 };
        double[] doubleArray16 = new double[] { 1 };
        double[][] doubleArray17 = new double[][] { doubleArray8, doubleArray10, doubleArray12, doubleArray14, doubleArray16 };
        int[] intArray18 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray17, intArray18);
        double[] doubleArray26 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray33 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray40 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray47 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray48 = new double[][] { doubleArray26, doubleArray33, doubleArray40, doubleArray47 };
        double[][] doubleArray49 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray48);
        double[] doubleArray51 = new double[] { 1 };
        double[] doubleArray53 = new double[] { 1 };
        double[] doubleArray55 = new double[] { 1 };
        double[] doubleArray57 = new double[] { 1 };
        double[] doubleArray59 = new double[] { 1 };
        double[][] doubleArray60 = new double[][] { doubleArray51, doubleArray53, doubleArray55, doubleArray57, doubleArray59 };
        int[] intArray61 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray60, intArray61);
        double[][] doubleArray63 = new double[][] {};
        double[][] doubleArray64 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray63);
        int[] intArray65 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray64, intArray65);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray60, intArray65);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray48, intArray65);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray17, intArray65);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray6, intArray65);
        java.lang.Class<?> wildcardClass71 = intArray65.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[]");
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[]");
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[]");
        org.junit.Assert.assertNotNull(wildcardClass71);
    }

    @Test
    public void test0659() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0659");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        int[] intArray2 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray1, intArray2);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray5 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray6 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray5);
        double[][] doubleArray7 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray6);
        java.lang.Class<?> wildcardClass8 = doubleArray6.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertNotNull(wildcardClass8);
    }

    @Test
    public void test0660() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0660");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = new double[][] {};
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[] doubleArray8 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray12 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray16 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray20 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray21 = new double[][] { doubleArray8, doubleArray12, doubleArray16, doubleArray20 };
        double[] doubleArray23 = new double[] { 1 };
        double[] doubleArray25 = new double[] { 1 };
        double[] doubleArray27 = new double[] { 1 };
        double[] doubleArray29 = new double[] { 1 };
        double[] doubleArray31 = new double[] { 1 };
        double[][] doubleArray32 = new double[][] { doubleArray23, doubleArray25, doubleArray27, doubleArray29, doubleArray31 };
        int[] intArray33 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray32, intArray33);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray21, intArray33);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray3, intArray33);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray1, intArray33);
        double[][] doubleArray38 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray39 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray38);
        double[][] doubleArray40 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray39);
        java.lang.Class<?> wildcardClass41 = doubleArray40.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertNotNull(wildcardClass41);
    }

    @Test
    public void test0661() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0661");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray30 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray29);
        double[][] doubleArray31 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        double[][] doubleArray32 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        double[][] doubleArray33 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        double[][] doubleArray34 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        double[][] doubleArray35 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray34);
        double[][] doubleArray36 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray35);
        double[][] doubleArray37 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray35);
        double[][] doubleArray38 = new double[][] {};
        double[][] doubleArray39 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray38);
        double[][] doubleArray40 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray38);
        double[][] doubleArray41 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray40);
        double[][] doubleArray42 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray41);
        double[][] doubleArray43 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray42);
        double[][] doubleArray44 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray42);
        double[][] doubleArray45 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray42);
        double[][] doubleArray46 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray45);
        double[][] doubleArray47 = new double[][] {};
        double[][] doubleArray48 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray47);
        double[][] doubleArray49 = new double[][] {};
        double[][] doubleArray50 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray49);
        double[] doubleArray52 = new double[] { 1 };
        double[] doubleArray54 = new double[] { 1 };
        double[] doubleArray56 = new double[] { 1 };
        double[] doubleArray58 = new double[] { 1 };
        double[] doubleArray60 = new double[] { 1 };
        double[][] doubleArray61 = new double[][] { doubleArray52, doubleArray54, doubleArray56, doubleArray58, doubleArray60 };
        int[] intArray62 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray61, intArray62);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray49, intArray62);
        double[] doubleArray68 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray72 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray76 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray80 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray81 = new double[][] { doubleArray68, doubleArray72, doubleArray76, doubleArray80 };
        double[] doubleArray83 = new double[] { 1 };
        double[] doubleArray85 = new double[] { 1 };
        double[] doubleArray87 = new double[] { 1 };
        double[] doubleArray89 = new double[] { 1 };
        double[] doubleArray91 = new double[] { 1 };
        double[][] doubleArray92 = new double[][] { doubleArray83, doubleArray85, doubleArray87, doubleArray89, doubleArray91 };
        int[] intArray93 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray92, intArray93);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray81, intArray93);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray49, intArray93);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray47, intArray93);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray45, intArray93);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray37, intArray93);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[]");
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray80), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray81);
        org.junit.Assert.assertNotNull(doubleArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray83), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray85), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray87), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray89), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray91), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray92);
        org.junit.Assert.assertNotNull(intArray93);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray93), "[]");
    }

    @Test
    public void test0662() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0662");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray30 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray29);
        double[][] doubleArray31 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray29);
        double[] doubleArray38 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray45 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray52 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray59 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray60 = new double[][] { doubleArray38, doubleArray45, doubleArray52, doubleArray59 };
        double[][] doubleArray61 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray60);
        double[][] doubleArray62 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray61);
        double[][] doubleArray63 = new double[][] {};
        double[][] doubleArray64 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray63);
        double[] doubleArray66 = new double[] { 1 };
        double[] doubleArray68 = new double[] { 1 };
        double[] doubleArray70 = new double[] { 1 };
        double[] doubleArray72 = new double[] { 1 };
        double[] doubleArray74 = new double[] { 1 };
        double[][] doubleArray75 = new double[][] { doubleArray66, doubleArray68, doubleArray70, doubleArray72, doubleArray74 };
        int[] intArray76 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray75, intArray76);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray63, intArray76);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray62, intArray76);
        double[][] doubleArray80 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray62);
        double[][] doubleArray81 = new double[][] {};
        double[][] doubleArray82 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray81);
        int[] intArray83 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray82, intArray83);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray80, intArray83);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray31, intArray83);
        double[][] doubleArray87 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray31);
        java.lang.Class<?> wildcardClass88 = doubleArray31.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray66), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray70), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray74), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[]");
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertNotNull(doubleArray81);
        org.junit.Assert.assertNotNull(doubleArray82);
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray83), "[]");
        org.junit.Assert.assertNotNull(doubleArray87);
        org.junit.Assert.assertNotNull(wildcardClass88);
    }

    @Test
    public void test0663() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0663");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray30 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray29);
        double[][] doubleArray31 = null;
        double[][] doubleArray32 = new double[][] {};
        double[][] doubleArray33 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray32);
        double[][] doubleArray34 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray33);
        double[][] doubleArray35 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray33);
        double[][] doubleArray36 = new double[][] {};
        double[][] doubleArray37 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray36);
        double[][] doubleArray38 = new double[][] {};
        double[][] doubleArray39 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray38);
        double[] doubleArray41 = new double[] { 1 };
        double[] doubleArray43 = new double[] { 1 };
        double[] doubleArray45 = new double[] { 1 };
        double[] doubleArray47 = new double[] { 1 };
        double[] doubleArray49 = new double[] { 1 };
        double[][] doubleArray50 = new double[][] { doubleArray41, doubleArray43, doubleArray45, doubleArray47, doubleArray49 };
        int[] intArray51 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray50, intArray51);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray38, intArray51);
        double[] doubleArray57 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray61 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray65 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray69 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray70 = new double[][] { doubleArray57, doubleArray61, doubleArray65, doubleArray69 };
        double[] doubleArray72 = new double[] { 1 };
        double[] doubleArray74 = new double[] { 1 };
        double[] doubleArray76 = new double[] { 1 };
        double[] doubleArray78 = new double[] { 1 };
        double[] doubleArray80 = new double[] { 1 };
        double[][] doubleArray81 = new double[][] { doubleArray72, doubleArray74, doubleArray76, doubleArray78, doubleArray80 };
        int[] intArray82 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray81, intArray82);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray70, intArray82);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray38, intArray82);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray36, intArray82);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray33, intArray82);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray31, intArray82);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray30, intArray82);
        double[][] doubleArray90 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        double[][] doubleArray91 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray90);
        java.lang.Class<?> wildcardClass92 = doubleArray90.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[]");
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray74), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray78), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray80), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray81);
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[]");
        org.junit.Assert.assertNotNull(doubleArray90);
        org.junit.Assert.assertNotNull(doubleArray91);
        org.junit.Assert.assertNotNull(wildcardClass92);
    }

    @Test
    public void test0664() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0664");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[] doubleArray8 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray12 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray16 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray20 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray21 = new double[][] { doubleArray8, doubleArray12, doubleArray16, doubleArray20 };
        double[] doubleArray23 = new double[] { 1 };
        double[] doubleArray25 = new double[] { 1 };
        double[] doubleArray27 = new double[] { 1 };
        double[] doubleArray29 = new double[] { 1 };
        double[] doubleArray31 = new double[] { 1 };
        double[][] doubleArray32 = new double[][] { doubleArray23, doubleArray25, doubleArray27, doubleArray29, doubleArray31 };
        int[] intArray33 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray32, intArray33);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray21, intArray33);
        double[][] doubleArray36 = new double[][] {};
        double[][] doubleArray37 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray36);
        double[][] doubleArray38 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray37);
        double[][] doubleArray39 = new double[][] {};
        double[][] doubleArray40 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray39);
        double[][] doubleArray41 = new double[][] {};
        double[][] doubleArray42 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray41);
        double[] doubleArray44 = new double[] { 1 };
        double[] doubleArray46 = new double[] { 1 };
        double[] doubleArray48 = new double[] { 1 };
        double[] doubleArray50 = new double[] { 1 };
        double[] doubleArray52 = new double[] { 1 };
        double[][] doubleArray53 = new double[][] { doubleArray44, doubleArray46, doubleArray48, doubleArray50, doubleArray52 };
        int[] intArray54 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray53, intArray54);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray41, intArray54);
        double[] doubleArray60 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray64 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray68 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray72 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray73 = new double[][] { doubleArray60, doubleArray64, doubleArray68, doubleArray72 };
        double[] doubleArray75 = new double[] { 1 };
        double[] doubleArray77 = new double[] { 1 };
        double[] doubleArray79 = new double[] { 1 };
        double[] doubleArray81 = new double[] { 1 };
        double[] doubleArray83 = new double[] { 1 };
        double[][] doubleArray84 = new double[][] { doubleArray75, doubleArray77, doubleArray79, doubleArray81, doubleArray83 };
        int[] intArray85 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray84, intArray85);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray73, intArray85);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray41, intArray85);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray40, intArray85);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray38, intArray85);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray21, intArray85);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray3, intArray85);
        double[][] doubleArray93 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[][] doubleArray94 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray93);
        double[][] doubleArray95 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray94);
        java.lang.Class<?> wildcardClass96 = doubleArray94.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[]");
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray75), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray77), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray79), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray81), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray83), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray84);
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray85), "[]");
        org.junit.Assert.assertNotNull(doubleArray93);
        org.junit.Assert.assertNotNull(doubleArray94);
        org.junit.Assert.assertNotNull(doubleArray95);
        org.junit.Assert.assertNotNull(wildcardClass96);
    }

    @Test
    public void test0665() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0665");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray3 = new double[][] {};
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[][] doubleArray5 = new double[][] {};
        double[][] doubleArray6 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray5);
        double[] doubleArray8 = new double[] { 1 };
        double[] doubleArray10 = new double[] { 1 };
        double[] doubleArray12 = new double[] { 1 };
        double[] doubleArray14 = new double[] { 1 };
        double[] doubleArray16 = new double[] { 1 };
        double[][] doubleArray17 = new double[][] { doubleArray8, doubleArray10, doubleArray12, doubleArray14, doubleArray16 };
        int[] intArray18 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray17, intArray18);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray5, intArray18);
        double[] doubleArray24 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray28 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray32 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray36 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray37 = new double[][] { doubleArray24, doubleArray28, doubleArray32, doubleArray36 };
        double[] doubleArray39 = new double[] { 1 };
        double[] doubleArray41 = new double[] { 1 };
        double[] doubleArray43 = new double[] { 1 };
        double[] doubleArray45 = new double[] { 1 };
        double[] doubleArray47 = new double[] { 1 };
        double[][] doubleArray48 = new double[][] { doubleArray39, doubleArray41, doubleArray43, doubleArray45, doubleArray47 };
        int[] intArray49 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray48, intArray49);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray37, intArray49);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray5, intArray49);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray3, intArray49);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray0, intArray49);
        double[][] doubleArray55 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray56 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray57 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray58 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        java.lang.Class<?> wildcardClass59 = doubleArray58.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[]");
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[]");
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertNotNull(wildcardClass59);
    }

    @Test
    public void test0666() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0666");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = new double[][] {};
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[] doubleArray5 = new double[] { 1 };
        double[] doubleArray7 = new double[] { 1 };
        double[] doubleArray9 = new double[] { 1 };
        double[] doubleArray11 = new double[] { 1 };
        double[] doubleArray13 = new double[] { 1 };
        double[][] doubleArray14 = new double[][] { doubleArray5, doubleArray7, doubleArray9, doubleArray11, doubleArray13 };
        int[] intArray15 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray14, intArray15);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray2, intArray15);
        double[] doubleArray21 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray25 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray29 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray33 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray34 = new double[][] { doubleArray21, doubleArray25, doubleArray29, doubleArray33 };
        double[] doubleArray36 = new double[] { 1 };
        double[] doubleArray38 = new double[] { 1 };
        double[] doubleArray40 = new double[] { 1 };
        double[] doubleArray42 = new double[] { 1 };
        double[] doubleArray44 = new double[] { 1 };
        double[][] doubleArray45 = new double[][] { doubleArray36, doubleArray38, doubleArray40, doubleArray42, doubleArray44 };
        int[] intArray46 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray45, intArray46);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray34, intArray46);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray2, intArray46);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray1, intArray46);
        double[][] doubleArray51 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray52 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray51);
        double[][] doubleArray53 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray52);
        double[][] doubleArray54 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray52);
        double[][] doubleArray55 = new double[][] {};
        double[][] doubleArray56 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray55);
        double[] doubleArray58 = new double[] { 1 };
        double[] doubleArray60 = new double[] { 1 };
        double[] doubleArray62 = new double[] { 1 };
        double[] doubleArray64 = new double[] { 1 };
        double[] doubleArray66 = new double[] { 1 };
        double[][] doubleArray67 = new double[][] { doubleArray58, doubleArray60, doubleArray62, doubleArray64, doubleArray66 };
        int[] intArray68 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray67, intArray68);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray55, intArray68);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray52, intArray68);
        java.lang.Class<?> wildcardClass72 = doubleArray52.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray66), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[]");
        org.junit.Assert.assertNotNull(wildcardClass72);
    }

    @Test
    public void test0667() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0667");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray3 = new double[][] {};
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[][] doubleArray5 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[][] doubleArray6 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[][] doubleArray7 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray6);
        double[][] doubleArray8 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray7);
        double[][] doubleArray9 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray8);
        double[][] doubleArray10 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray8);
        double[] doubleArray17 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray24 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray31 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray38 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray39 = new double[][] { doubleArray17, doubleArray24, doubleArray31, doubleArray38 };
        double[][] doubleArray40 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray39);
        double[][] doubleArray41 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray40);
        double[][] doubleArray42 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray40);
        double[] doubleArray49 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray56 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray63 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray70 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray71 = new double[][] { doubleArray49, doubleArray56, doubleArray63, doubleArray70 };
        double[][] doubleArray72 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray71);
        double[][] doubleArray73 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray72);
        double[][] doubleArray74 = new double[][] {};
        double[][] doubleArray75 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray74);
        double[] doubleArray77 = new double[] { 1 };
        double[] doubleArray79 = new double[] { 1 };
        double[] doubleArray81 = new double[] { 1 };
        double[] doubleArray83 = new double[] { 1 };
        double[] doubleArray85 = new double[] { 1 };
        double[][] doubleArray86 = new double[][] { doubleArray77, doubleArray79, doubleArray81, doubleArray83, doubleArray85 };
        int[] intArray87 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray86, intArray87);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray74, intArray87);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray73, intArray87);
        double[][] doubleArray91 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray73);
        double[][] doubleArray92 = new double[][] {};
        double[][] doubleArray93 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray92);
        int[] intArray94 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray93, intArray94);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray91, intArray94);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray42, intArray94);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray10, intArray94);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray1, intArray94);
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray70), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray77), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray79), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray81), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray83), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray85), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray86);
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray87), "[]");
        org.junit.Assert.assertNotNull(doubleArray91);
        org.junit.Assert.assertNotNull(doubleArray92);
        org.junit.Assert.assertNotNull(doubleArray93);
        org.junit.Assert.assertNotNull(intArray94);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray94), "[]");
    }

    @Test
    public void test0668() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0668");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[] doubleArray8 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray12 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray16 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray20 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray21 = new double[][] { doubleArray8, doubleArray12, doubleArray16, doubleArray20 };
        double[] doubleArray23 = new double[] { 1 };
        double[] doubleArray25 = new double[] { 1 };
        double[] doubleArray27 = new double[] { 1 };
        double[] doubleArray29 = new double[] { 1 };
        double[] doubleArray31 = new double[] { 1 };
        double[][] doubleArray32 = new double[][] { doubleArray23, doubleArray25, doubleArray27, doubleArray29, doubleArray31 };
        int[] intArray33 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray32, intArray33);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray21, intArray33);
        double[][] doubleArray36 = new double[][] {};
        double[][] doubleArray37 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray36);
        double[][] doubleArray38 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray37);
        double[][] doubleArray39 = new double[][] {};
        double[][] doubleArray40 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray39);
        double[][] doubleArray41 = new double[][] {};
        double[][] doubleArray42 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray41);
        double[] doubleArray44 = new double[] { 1 };
        double[] doubleArray46 = new double[] { 1 };
        double[] doubleArray48 = new double[] { 1 };
        double[] doubleArray50 = new double[] { 1 };
        double[] doubleArray52 = new double[] { 1 };
        double[][] doubleArray53 = new double[][] { doubleArray44, doubleArray46, doubleArray48, doubleArray50, doubleArray52 };
        int[] intArray54 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray53, intArray54);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray41, intArray54);
        double[] doubleArray60 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray64 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray68 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray72 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray73 = new double[][] { doubleArray60, doubleArray64, doubleArray68, doubleArray72 };
        double[] doubleArray75 = new double[] { 1 };
        double[] doubleArray77 = new double[] { 1 };
        double[] doubleArray79 = new double[] { 1 };
        double[] doubleArray81 = new double[] { 1 };
        double[] doubleArray83 = new double[] { 1 };
        double[][] doubleArray84 = new double[][] { doubleArray75, doubleArray77, doubleArray79, doubleArray81, doubleArray83 };
        int[] intArray85 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray84, intArray85);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray73, intArray85);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray41, intArray85);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray40, intArray85);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray38, intArray85);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray21, intArray85);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray3, intArray85);
        double[][] doubleArray93 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[][] doubleArray94 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        java.lang.Class<?> wildcardClass95 = doubleArray3.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[]");
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray75), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray77), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray79), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray81), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray83), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray84);
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray85), "[]");
        org.junit.Assert.assertNotNull(doubleArray93);
        org.junit.Assert.assertNotNull(doubleArray94);
        org.junit.Assert.assertNotNull(wildcardClass95);
    }

    @Test
    public void test0669() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0669");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = new double[][] {};
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[] doubleArray5 = new double[] { 1 };
        double[] doubleArray7 = new double[] { 1 };
        double[] doubleArray9 = new double[] { 1 };
        double[] doubleArray11 = new double[] { 1 };
        double[] doubleArray13 = new double[] { 1 };
        double[][] doubleArray14 = new double[][] { doubleArray5, doubleArray7, doubleArray9, doubleArray11, doubleArray13 };
        int[] intArray15 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray14, intArray15);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray2, intArray15);
        double[] doubleArray21 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray25 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray29 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray33 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray34 = new double[][] { doubleArray21, doubleArray25, doubleArray29, doubleArray33 };
        double[] doubleArray36 = new double[] { 1 };
        double[] doubleArray38 = new double[] { 1 };
        double[] doubleArray40 = new double[] { 1 };
        double[] doubleArray42 = new double[] { 1 };
        double[] doubleArray44 = new double[] { 1 };
        double[][] doubleArray45 = new double[][] { doubleArray36, doubleArray38, doubleArray40, doubleArray42, doubleArray44 };
        int[] intArray46 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray45, intArray46);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray34, intArray46);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray2, intArray46);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray1, intArray46);
        double[][] doubleArray51 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray52 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray51);
        double[][] doubleArray53 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray51);
        double[][] doubleArray54 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray53);
        java.lang.Class<?> wildcardClass55 = doubleArray53.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertNotNull(wildcardClass55);
    }

    @Test
    public void test0670() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0670");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray30 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray29);
        double[][] doubleArray31 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        double[][] doubleArray32 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        double[][] doubleArray33 = new double[][] {};
        double[][] doubleArray34 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray33);
        double[] doubleArray36 = new double[] { 1 };
        double[] doubleArray38 = new double[] { 1 };
        double[] doubleArray40 = new double[] { 1 };
        double[] doubleArray42 = new double[] { 1 };
        double[] doubleArray44 = new double[] { 1 };
        double[][] doubleArray45 = new double[][] { doubleArray36, doubleArray38, doubleArray40, doubleArray42, doubleArray44 };
        int[] intArray46 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray45, intArray46);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray33, intArray46);
        double[] doubleArray52 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray56 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray60 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray64 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray65 = new double[][] { doubleArray52, doubleArray56, doubleArray60, doubleArray64 };
        double[] doubleArray67 = new double[] { 1 };
        double[] doubleArray69 = new double[] { 1 };
        double[] doubleArray71 = new double[] { 1 };
        double[] doubleArray73 = new double[] { 1 };
        double[] doubleArray75 = new double[] { 1 };
        double[][] doubleArray76 = new double[][] { doubleArray67, doubleArray69, doubleArray71, doubleArray73, doubleArray75 };
        int[] intArray77 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray76, intArray77);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray65, intArray77);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray33, intArray77);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray32, intArray77);
        double[][] doubleArray82 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray32);
        double[][] doubleArray83 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray32);
        double[][] doubleArray84 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray32);
        java.lang.Class<?> wildcardClass85 = doubleArray32.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[]");
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray71), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray73), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray75), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray77), "[]");
        org.junit.Assert.assertNotNull(doubleArray82);
        org.junit.Assert.assertNotNull(doubleArray83);
        org.junit.Assert.assertNotNull(doubleArray84);
        org.junit.Assert.assertNotNull(wildcardClass85);
    }

    @Test
    public void test0671() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0671");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray30 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray31 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[] doubleArray33 = new double[] { 1 };
        double[] doubleArray35 = new double[] { 1 };
        double[] doubleArray37 = new double[] { 1 };
        double[] doubleArray39 = new double[] { 1 };
        double[] doubleArray41 = new double[] { 1 };
        double[][] doubleArray42 = new double[][] { doubleArray33, doubleArray35, doubleArray37, doubleArray39, doubleArray41 };
        int[] intArray43 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray42, intArray43);
        double[] doubleArray51 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray58 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray65 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray72 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray73 = new double[][] { doubleArray51, doubleArray58, doubleArray65, doubleArray72 };
        double[][] doubleArray74 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray73);
        double[] doubleArray76 = new double[] { 1 };
        double[] doubleArray78 = new double[] { 1 };
        double[] doubleArray80 = new double[] { 1 };
        double[] doubleArray82 = new double[] { 1 };
        double[] doubleArray84 = new double[] { 1 };
        double[][] doubleArray85 = new double[][] { doubleArray76, doubleArray78, doubleArray80, doubleArray82, doubleArray84 };
        int[] intArray86 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray85, intArray86);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray74, intArray86);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray42, intArray86);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray31, intArray86);
        double[][] doubleArray91 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray31);
        double[][] doubleArray92 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray31);
        double[][] doubleArray93 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray31);
        double[][] doubleArray94 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray31);
        double[][] doubleArray95 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray31);
        int[] intArray96 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray31, intArray96);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray78), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray80), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray82), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray84), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray85);
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray86), "[]");
        org.junit.Assert.assertNotNull(doubleArray91);
        org.junit.Assert.assertNotNull(doubleArray92);
        org.junit.Assert.assertNotNull(doubleArray93);
        org.junit.Assert.assertNotNull(doubleArray94);
        org.junit.Assert.assertNotNull(doubleArray95);
    }

    @Test
    public void test0672() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0672");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray30 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray29);
        double[][] doubleArray31 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        double[][] doubleArray32 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray31);
        double[] doubleArray39 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray46 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray53 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray60 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray61 = new double[][] { doubleArray39, doubleArray46, doubleArray53, doubleArray60 };
        double[][] doubleArray62 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray61);
        double[][] doubleArray63 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray62);
        double[][] doubleArray64 = new double[][] {};
        double[][] doubleArray65 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray64);
        double[] doubleArray67 = new double[] { 1 };
        double[] doubleArray69 = new double[] { 1 };
        double[] doubleArray71 = new double[] { 1 };
        double[] doubleArray73 = new double[] { 1 };
        double[] doubleArray75 = new double[] { 1 };
        double[][] doubleArray76 = new double[][] { doubleArray67, doubleArray69, doubleArray71, doubleArray73, doubleArray75 };
        int[] intArray77 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray76, intArray77);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray64, intArray77);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray63, intArray77);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray31, intArray77);
        java.lang.Class<?> wildcardClass82 = doubleArray31.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray71), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray73), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray75), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray77), "[]");
        org.junit.Assert.assertNotNull(wildcardClass82);
    }

    @Test
    public void test0673() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0673");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        int[] intArray2 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray1, intArray2);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray5 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray6 = new double[][] {};
        double[][] doubleArray7 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray6);
        double[][] doubleArray8 = new double[][] {};
        double[][] doubleArray9 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray8);
        double[] doubleArray11 = new double[] { 1 };
        double[] doubleArray13 = new double[] { 1 };
        double[] doubleArray15 = new double[] { 1 };
        double[] doubleArray17 = new double[] { 1 };
        double[] doubleArray19 = new double[] { 1 };
        double[][] doubleArray20 = new double[][] { doubleArray11, doubleArray13, doubleArray15, doubleArray17, doubleArray19 };
        int[] intArray21 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray20, intArray21);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray8, intArray21);
        double[] doubleArray27 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray31 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray35 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray39 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray40 = new double[][] { doubleArray27, doubleArray31, doubleArray35, doubleArray39 };
        double[] doubleArray42 = new double[] { 1 };
        double[] doubleArray44 = new double[] { 1 };
        double[] doubleArray46 = new double[] { 1 };
        double[] doubleArray48 = new double[] { 1 };
        double[] doubleArray50 = new double[] { 1 };
        double[][] doubleArray51 = new double[][] { doubleArray42, doubleArray44, doubleArray46, doubleArray48, doubleArray50 };
        int[] intArray52 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray51, intArray52);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray40, intArray52);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray8, intArray52);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray7, intArray52);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray1, intArray52);
        double[][] doubleArray58 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        java.lang.Class<?> wildcardClass59 = doubleArray58.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[]");
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertNotNull(wildcardClass59);
    }

    @Test
    public void test0674() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0674");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[] doubleArray3 = new double[] { 1 };
        double[] doubleArray5 = new double[] { 1 };
        double[] doubleArray7 = new double[] { 1 };
        double[] doubleArray9 = new double[] { 1 };
        double[] doubleArray11 = new double[] { 1 };
        double[][] doubleArray12 = new double[][] { doubleArray3, doubleArray5, doubleArray7, doubleArray9, doubleArray11 };
        int[] intArray13 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray12, intArray13);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray0, intArray13);
        double[] doubleArray19 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray23 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray27 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray31 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray32 = new double[][] { doubleArray19, doubleArray23, doubleArray27, doubleArray31 };
        double[] doubleArray34 = new double[] { 1 };
        double[] doubleArray36 = new double[] { 1 };
        double[] doubleArray38 = new double[] { 1 };
        double[] doubleArray40 = new double[] { 1 };
        double[] doubleArray42 = new double[] { 1 };
        double[][] doubleArray43 = new double[][] { doubleArray34, doubleArray36, doubleArray38, doubleArray40, doubleArray42 };
        int[] intArray44 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray43, intArray44);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray32, intArray44);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray0, intArray44);
        double[] doubleArray49 = new double[] { 1 };
        double[] doubleArray51 = new double[] { 1 };
        double[] doubleArray53 = new double[] { 1 };
        double[] doubleArray55 = new double[] { 1 };
        double[] doubleArray57 = new double[] { 1 };
        double[][] doubleArray58 = new double[][] { doubleArray49, doubleArray51, doubleArray53, doubleArray55, doubleArray57 };
        int[] intArray59 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray58, intArray59);
        double[][] doubleArray61 = new double[][] {};
        double[][] doubleArray62 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray61);
        int[] intArray63 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray62, intArray63);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray58, intArray63);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray0, intArray63);
        double[] doubleArray70 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray74 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray78 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray82 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray83 = new double[][] { doubleArray70, doubleArray74, doubleArray78, doubleArray82 };
        double[] doubleArray85 = new double[] { 1 };
        double[] doubleArray87 = new double[] { 1 };
        double[] doubleArray89 = new double[] { 1 };
        double[] doubleArray91 = new double[] { 1 };
        double[] doubleArray93 = new double[] { 1 };
        double[][] doubleArray94 = new double[][] { doubleArray85, doubleArray87, doubleArray89, doubleArray91, doubleArray93 };
        int[] intArray95 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray94, intArray95);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray83, intArray95);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray0, intArray95);
        double[][] doubleArray99 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[]");
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray70), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray74), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray78), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray82), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray83);
        org.junit.Assert.assertNotNull(doubleArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray85), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray87), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray89), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray91), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray93);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray93), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray94);
        org.junit.Assert.assertNotNull(intArray95);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray95), "[]");
        org.junit.Assert.assertNotNull(doubleArray99);
    }

    @Test
    public void test0675() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0675");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[] doubleArray3 = new double[] { 1 };
        double[] doubleArray5 = new double[] { 1 };
        double[] doubleArray7 = new double[] { 1 };
        double[] doubleArray9 = new double[] { 1 };
        double[] doubleArray11 = new double[] { 1 };
        double[][] doubleArray12 = new double[][] { doubleArray3, doubleArray5, doubleArray7, doubleArray9, doubleArray11 };
        int[] intArray13 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray12, intArray13);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray0, intArray13);
        double[][] doubleArray16 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray17 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray16);
        double[][] doubleArray18 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray17);
        double[][] doubleArray19 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray18);
        java.lang.Class<?> wildcardClass20 = doubleArray18.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertNotNull(wildcardClass20);
    }

    @Test
    public void test0676() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0676");
        double[][] doubleArray0 = null;
        double[] doubleArray7 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray14 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray21 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray28 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray29 = new double[][] { doubleArray7, doubleArray14, doubleArray21, doubleArray28 };
        double[][] doubleArray30 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray29);
        double[][] doubleArray31 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray29);
        double[][] doubleArray32 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray29);
        double[] doubleArray34 = new double[] { 1 };
        double[] doubleArray36 = new double[] { 1 };
        double[] doubleArray38 = new double[] { 1 };
        double[] doubleArray40 = new double[] { 1 };
        double[] doubleArray42 = new double[] { 1 };
        double[][] doubleArray43 = new double[][] { doubleArray34, doubleArray36, doubleArray38, doubleArray40, doubleArray42 };
        int[] intArray44 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray43, intArray44);
        double[] doubleArray52 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray59 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray66 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray73 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray74 = new double[][] { doubleArray52, doubleArray59, doubleArray66, doubleArray73 };
        double[][] doubleArray75 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray74);
        double[] doubleArray77 = new double[] { 1 };
        double[] doubleArray79 = new double[] { 1 };
        double[] doubleArray81 = new double[] { 1 };
        double[] doubleArray83 = new double[] { 1 };
        double[] doubleArray85 = new double[] { 1 };
        double[][] doubleArray86 = new double[][] { doubleArray77, doubleArray79, doubleArray81, doubleArray83, doubleArray85 };
        int[] intArray87 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray86, intArray87);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray75, intArray87);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray43, intArray87);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray32, intArray87);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray0, intArray87);
        java.lang.Class<?> wildcardClass93 = intArray87.getClass();
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[]");
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray66), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray73), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray77), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray79), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray81), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray83), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray85), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray86);
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray87), "[]");
        org.junit.Assert.assertNotNull(wildcardClass93);
    }

    @Test
    public void test0677() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0677");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray30 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray29);
        double[][] doubleArray31 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        double[][] doubleArray32 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        double[][] doubleArray33 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        double[] doubleArray40 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray47 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray54 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray61 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray62 = new double[][] { doubleArray40, doubleArray47, doubleArray54, doubleArray61 };
        double[][] doubleArray63 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray62);
        double[][] doubleArray64 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray63);
        double[][] doubleArray65 = new double[][] {};
        double[][] doubleArray66 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray65);
        double[] doubleArray68 = new double[] { 1 };
        double[] doubleArray70 = new double[] { 1 };
        double[] doubleArray72 = new double[] { 1 };
        double[] doubleArray74 = new double[] { 1 };
        double[] doubleArray76 = new double[] { 1 };
        double[][] doubleArray77 = new double[][] { doubleArray68, doubleArray70, doubleArray72, doubleArray74, doubleArray76 };
        int[] intArray78 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray77, intArray78);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray65, intArray78);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray64, intArray78);
        double[][] doubleArray82 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray64);
        double[] doubleArray84 = new double[] { 1 };
        double[] doubleArray86 = new double[] { 1 };
        double[] doubleArray88 = new double[] { 1 };
        double[] doubleArray90 = new double[] { 1 };
        double[] doubleArray92 = new double[] { 1 };
        double[][] doubleArray93 = new double[][] { doubleArray84, doubleArray86, doubleArray88, doubleArray90, doubleArray92 };
        int[] intArray94 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray93, intArray94);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray82, intArray94);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray30, intArray94);
        java.lang.Class<?> wildcardClass98 = doubleArray30.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray70), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray74), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[]");
        org.junit.Assert.assertNotNull(doubleArray82);
        org.junit.Assert.assertNotNull(doubleArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray84), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray86), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray88), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray90), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray92), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray93);
        org.junit.Assert.assertNotNull(intArray94);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray94), "[]");
        org.junit.Assert.assertNotNull(wildcardClass98);
    }

    @Test
    public void test0678() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0678");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray5 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray4);
        double[][] doubleArray6 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray4);
        double[][] doubleArray7 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray6);
        double[][] doubleArray8 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray6);
        double[][] doubleArray9 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray8);
        java.lang.Class<?> wildcardClass10 = doubleArray9.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertNotNull(wildcardClass10);
    }

    @Test
    public void test0679() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0679");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        int[] intArray2 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray1, intArray2);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray5 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray4);
        java.lang.Class<?> wildcardClass6 = doubleArray4.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(wildcardClass6);
    }

    @Test
    public void test0680() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0680");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray30 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray31 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray32 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray31);
        double[] doubleArray39 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray46 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray53 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray60 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray61 = new double[][] { doubleArray39, doubleArray46, doubleArray53, doubleArray60 };
        double[][] doubleArray62 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray61);
        double[] doubleArray64 = new double[] { 1 };
        double[] doubleArray66 = new double[] { 1 };
        double[] doubleArray68 = new double[] { 1 };
        double[] doubleArray70 = new double[] { 1 };
        double[] doubleArray72 = new double[] { 1 };
        double[][] doubleArray73 = new double[][] { doubleArray64, doubleArray66, doubleArray68, doubleArray70, doubleArray72 };
        int[] intArray74 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray73, intArray74);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray62, intArray74);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray32, intArray74);
        double[][] doubleArray78 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray32);
        double[][] doubleArray79 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray78);
        java.lang.Class<?> wildcardClass80 = doubleArray79.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray66), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray70), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[]");
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertNotNull(wildcardClass80);
    }

    @Test
    public void test0681() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0681");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[] doubleArray8 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray15 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray22 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray29 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray30 = new double[][] { doubleArray8, doubleArray15, doubleArray22, doubleArray29 };
        double[][] doubleArray31 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        double[][] doubleArray32 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        double[][] doubleArray33 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        double[][] doubleArray34 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray33);
        double[] doubleArray41 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray48 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray55 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray62 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray63 = new double[][] { doubleArray41, doubleArray48, doubleArray55, doubleArray62 };
        double[][] doubleArray64 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray63);
        double[] doubleArray66 = new double[] { 1 };
        double[] doubleArray68 = new double[] { 1 };
        double[] doubleArray70 = new double[] { 1 };
        double[] doubleArray72 = new double[] { 1 };
        double[] doubleArray74 = new double[] { 1 };
        double[][] doubleArray75 = new double[][] { doubleArray66, doubleArray68, doubleArray70, doubleArray72, doubleArray74 };
        int[] intArray76 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray75, intArray76);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray64, intArray76);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray34, intArray76);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray1, intArray76);
        double[][] doubleArray81 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray82 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray81);
        double[][] doubleArray83 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray81);
        java.lang.Class<?> wildcardClass84 = doubleArray81.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray66), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray70), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray74), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[]");
        org.junit.Assert.assertNotNull(doubleArray81);
        org.junit.Assert.assertNotNull(doubleArray82);
        org.junit.Assert.assertNotNull(doubleArray83);
        org.junit.Assert.assertNotNull(wildcardClass84);
    }

    @Test
    public void test0682() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0682");
        double[][] doubleArray0 = null;
        double[][] doubleArray1 = new double[][] {};
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray3 = new double[][] {};
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[] doubleArray6 = new double[] { 1 };
        double[] doubleArray8 = new double[] { 1 };
        double[] doubleArray10 = new double[] { 1 };
        double[] doubleArray12 = new double[] { 1 };
        double[] doubleArray14 = new double[] { 1 };
        double[][] doubleArray15 = new double[][] { doubleArray6, doubleArray8, doubleArray10, doubleArray12, doubleArray14 };
        int[] intArray16 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray15, intArray16);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray3, intArray16);
        double[] doubleArray22 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray26 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray30 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray34 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray35 = new double[][] { doubleArray22, doubleArray26, doubleArray30, doubleArray34 };
        double[] doubleArray37 = new double[] { 1 };
        double[] doubleArray39 = new double[] { 1 };
        double[] doubleArray41 = new double[] { 1 };
        double[] doubleArray43 = new double[] { 1 };
        double[] doubleArray45 = new double[] { 1 };
        double[][] doubleArray46 = new double[][] { doubleArray37, doubleArray39, doubleArray41, doubleArray43, doubleArray45 };
        int[] intArray47 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray46, intArray47);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray35, intArray47);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray3, intArray47);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray2, intArray47);
        double[] doubleArray53 = new double[] { 1 };
        double[] doubleArray55 = new double[] { 1 };
        double[] doubleArray57 = new double[] { 1 };
        double[] doubleArray59 = new double[] { 1 };
        double[] doubleArray61 = new double[] { 1 };
        double[][] doubleArray62 = new double[][] { doubleArray53, doubleArray55, doubleArray57, doubleArray59, doubleArray61 };
        int[] intArray63 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray62, intArray63);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray2, intArray63);
        double[][] doubleArray66 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray67 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray68 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray67);
        double[][] doubleArray69 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray68);
        double[][] doubleArray70 = null;
        double[] doubleArray72 = new double[] { 1 };
        double[] doubleArray74 = new double[] { 1 };
        double[] doubleArray76 = new double[] { 1 };
        double[] doubleArray78 = new double[] { 1 };
        double[] doubleArray80 = new double[] { 1 };
        double[][] doubleArray81 = new double[][] { doubleArray72, doubleArray74, doubleArray76, doubleArray78, doubleArray80 };
        int[] intArray82 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray81, intArray82);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray70, intArray82);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray69, intArray82);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray0, intArray82);
        java.lang.Class<?> wildcardClass87 = intArray82.getClass();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[]");
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[]");
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[]");
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray74), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray78), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray80), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray81);
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[]");
        org.junit.Assert.assertNotNull(wildcardClass87);
    }

    @Test
    public void test0683() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0683");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[][] doubleArray5 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray4);
        double[][] doubleArray6 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray5);
        double[][] doubleArray7 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray5);
        double[] doubleArray14 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray21 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray28 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray35 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray36 = new double[][] { doubleArray14, doubleArray21, doubleArray28, doubleArray35 };
        double[][] doubleArray37 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray36);
        double[][] doubleArray38 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray37);
        double[][] doubleArray39 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray37);
        double[] doubleArray46 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray53 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray60 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray67 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray68 = new double[][] { doubleArray46, doubleArray53, doubleArray60, doubleArray67 };
        double[][] doubleArray69 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray68);
        double[][] doubleArray70 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray69);
        double[][] doubleArray71 = new double[][] {};
        double[][] doubleArray72 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray71);
        double[] doubleArray74 = new double[] { 1 };
        double[] doubleArray76 = new double[] { 1 };
        double[] doubleArray78 = new double[] { 1 };
        double[] doubleArray80 = new double[] { 1 };
        double[] doubleArray82 = new double[] { 1 };
        double[][] doubleArray83 = new double[][] { doubleArray74, doubleArray76, doubleArray78, doubleArray80, doubleArray82 };
        int[] intArray84 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray83, intArray84);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray71, intArray84);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray70, intArray84);
        double[][] doubleArray88 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray70);
        double[][] doubleArray89 = new double[][] {};
        double[][] doubleArray90 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray89);
        int[] intArray91 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray90, intArray91);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray88, intArray91);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray39, intArray91);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray7, intArray91);
        double[][] doubleArray96 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray7);
        java.lang.Class<?> wildcardClass97 = doubleArray96.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray74), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray78), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray80), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray82), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray83);
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray84), "[]");
        org.junit.Assert.assertNotNull(doubleArray88);
        org.junit.Assert.assertNotNull(doubleArray89);
        org.junit.Assert.assertNotNull(doubleArray90);
        org.junit.Assert.assertNotNull(intArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray91), "[]");
        org.junit.Assert.assertNotNull(doubleArray96);
        org.junit.Assert.assertNotNull(wildcardClass97);
    }

    @Test
    public void test0684() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0684");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray30 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray31 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray32 = new double[][] {};
        double[][] doubleArray33 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray32);
        double[][] doubleArray34 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray33);
        double[][] doubleArray35 = new double[][] {};
        double[][] doubleArray36 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray35);
        double[][] doubleArray37 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray35);
        double[][] doubleArray38 = new double[][] {};
        double[][] doubleArray39 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray38);
        double[][] doubleArray40 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray39);
        double[][] doubleArray41 = new double[][] {};
        double[][] doubleArray42 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray41);
        double[][] doubleArray43 = new double[][] {};
        double[][] doubleArray44 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray43);
        double[] doubleArray46 = new double[] { 1 };
        double[] doubleArray48 = new double[] { 1 };
        double[] doubleArray50 = new double[] { 1 };
        double[] doubleArray52 = new double[] { 1 };
        double[] doubleArray54 = new double[] { 1 };
        double[][] doubleArray55 = new double[][] { doubleArray46, doubleArray48, doubleArray50, doubleArray52, doubleArray54 };
        int[] intArray56 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray55, intArray56);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray43, intArray56);
        double[] doubleArray62 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray66 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray70 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray74 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray75 = new double[][] { doubleArray62, doubleArray66, doubleArray70, doubleArray74 };
        double[] doubleArray77 = new double[] { 1 };
        double[] doubleArray79 = new double[] { 1 };
        double[] doubleArray81 = new double[] { 1 };
        double[] doubleArray83 = new double[] { 1 };
        double[] doubleArray85 = new double[] { 1 };
        double[][] doubleArray86 = new double[][] { doubleArray77, doubleArray79, doubleArray81, doubleArray83, doubleArray85 };
        int[] intArray87 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray86, intArray87);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray75, intArray87);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray43, intArray87);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray42, intArray87);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray40, intArray87);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray35, intArray87);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray34, intArray87);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray31, intArray87);
        java.lang.Class<?> wildcardClass96 = intArray87.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[]");
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray66), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray70), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray74), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray77), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray79), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray81), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray83), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray85), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray86);
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray87), "[]");
        org.junit.Assert.assertNotNull(wildcardClass96);
    }

    @Test
    public void test0685() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0685");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[] doubleArray9 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray16 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray23 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray30 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray31 = new double[][] { doubleArray9, doubleArray16, doubleArray23, doubleArray30 };
        double[][] doubleArray32 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray31);
        double[][] doubleArray33 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray31);
        double[][] doubleArray34 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray31);
        double[][] doubleArray35 = new double[][] {};
        double[][] doubleArray36 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray35);
        int[] intArray37 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray36, intArray37);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray34, intArray37);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray2, intArray37);
        java.lang.Class<?> wildcardClass41 = doubleArray2.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[]");
        org.junit.Assert.assertNotNull(wildcardClass41);
    }

    @Test
    public void test0686() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0686");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[][] doubleArray5 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray4);
        double[][] doubleArray6 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray5);
        double[][] doubleArray7 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray5);
        double[][] doubleArray8 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray7);
        java.lang.Class<?> wildcardClass9 = doubleArray8.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void test0687() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0687");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray30 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray29);
        double[][] doubleArray31 = new double[][] {};
        double[][] doubleArray32 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray31);
        double[] doubleArray34 = new double[] { 1 };
        double[] doubleArray36 = new double[] { 1 };
        double[] doubleArray38 = new double[] { 1 };
        double[] doubleArray40 = new double[] { 1 };
        double[] doubleArray42 = new double[] { 1 };
        double[][] doubleArray43 = new double[][] { doubleArray34, doubleArray36, doubleArray38, doubleArray40, doubleArray42 };
        int[] intArray44 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray43, intArray44);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray31, intArray44);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray30, intArray44);
        double[][] doubleArray48 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        double[][] doubleArray49 = new double[][] {};
        double[][] doubleArray50 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray49);
        int[] intArray51 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray50, intArray51);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray48, intArray51);
        double[][] doubleArray54 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray48);
        double[][] doubleArray55 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray54);
        double[][] doubleArray56 = new double[][] {};
        double[][] doubleArray57 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray56);
        double[][] doubleArray58 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray57);
        double[][] doubleArray59 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray58);
        double[][] doubleArray60 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray58);
        double[] doubleArray67 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray74 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray81 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray88 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray89 = new double[][] { doubleArray67, doubleArray74, doubleArray81, doubleArray88 };
        double[][] doubleArray90 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray89);
        double[][] doubleArray91 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray89);
        double[][] doubleArray92 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray89);
        double[][] doubleArray93 = new double[][] {};
        double[][] doubleArray94 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray93);
        int[] intArray95 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray94, intArray95);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray92, intArray95);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray60, intArray95);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray54, intArray95);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[]");
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray74), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray81), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray88), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray89);
        org.junit.Assert.assertNotNull(doubleArray90);
        org.junit.Assert.assertNotNull(doubleArray91);
        org.junit.Assert.assertNotNull(doubleArray92);
        org.junit.Assert.assertNotNull(doubleArray93);
        org.junit.Assert.assertNotNull(doubleArray94);
        org.junit.Assert.assertNotNull(intArray95);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray95), "[]");
    }

    @Test
    public void test0688() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0688");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        int[] intArray2 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray1, intArray2);
        double[] doubleArray5 = new double[] { 1 };
        double[] doubleArray7 = new double[] { 1 };
        double[] doubleArray9 = new double[] { 1 };
        double[] doubleArray11 = new double[] { 1 };
        double[] doubleArray13 = new double[] { 1 };
        double[][] doubleArray14 = new double[][] { doubleArray5, doubleArray7, doubleArray9, doubleArray11, doubleArray13 };
        int[] intArray15 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray14, intArray15);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray1, intArray15);
        double[][] doubleArray18 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray19 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray20 = new double[][] {};
        double[][] doubleArray21 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray20);
        double[][] doubleArray22 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray20);
        double[][] doubleArray23 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray20);
        double[] doubleArray30 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray37 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray44 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray51 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray52 = new double[][] { doubleArray30, doubleArray37, doubleArray44, doubleArray51 };
        double[][] doubleArray53 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray52);
        double[][] doubleArray54 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray53);
        double[][] doubleArray55 = new double[][] {};
        double[][] doubleArray56 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray55);
        double[] doubleArray58 = new double[] { 1 };
        double[] doubleArray60 = new double[] { 1 };
        double[] doubleArray62 = new double[] { 1 };
        double[] doubleArray64 = new double[] { 1 };
        double[] doubleArray66 = new double[] { 1 };
        double[][] doubleArray67 = new double[][] { doubleArray58, doubleArray60, doubleArray62, doubleArray64, doubleArray66 };
        int[] intArray68 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray67, intArray68);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray55, intArray68);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray54, intArray68);
        double[][] doubleArray72 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray54);
        double[] doubleArray74 = new double[] { 1 };
        double[] doubleArray76 = new double[] { 1 };
        double[] doubleArray78 = new double[] { 1 };
        double[] doubleArray80 = new double[] { 1 };
        double[] doubleArray82 = new double[] { 1 };
        double[][] doubleArray83 = new double[][] { doubleArray74, doubleArray76, doubleArray78, doubleArray80, doubleArray82 };
        int[] intArray84 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray83, intArray84);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray72, intArray84);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray20, intArray84);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray1, intArray84);
        java.lang.Class<?> wildcardClass89 = intArray84.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray66), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[]");
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray74), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray78), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray80), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray82), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray83);
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray84), "[]");
        org.junit.Assert.assertNotNull(wildcardClass89);
    }

    @Test
    public void test0689() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0689");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[][] doubleArray5 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray4);
        double[][] doubleArray6 = new double[][] {};
        double[][] doubleArray7 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray6);
        double[][] doubleArray8 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray7);
        double[][] doubleArray9 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray8);
        double[][] doubleArray10 = new double[][] {};
        double[][] doubleArray11 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray10);
        double[] doubleArray13 = new double[] { 1 };
        double[] doubleArray15 = new double[] { 1 };
        double[] doubleArray17 = new double[] { 1 };
        double[] doubleArray19 = new double[] { 1 };
        double[] doubleArray21 = new double[] { 1 };
        double[][] doubleArray22 = new double[][] { doubleArray13, doubleArray15, doubleArray17, doubleArray19, doubleArray21 };
        int[] intArray23 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray22, intArray23);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray10, intArray23);
        double[] doubleArray29 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray33 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray37 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray41 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray42 = new double[][] { doubleArray29, doubleArray33, doubleArray37, doubleArray41 };
        double[] doubleArray44 = new double[] { 1 };
        double[] doubleArray46 = new double[] { 1 };
        double[] doubleArray48 = new double[] { 1 };
        double[] doubleArray50 = new double[] { 1 };
        double[] doubleArray52 = new double[] { 1 };
        double[][] doubleArray53 = new double[][] { doubleArray44, doubleArray46, doubleArray48, doubleArray50, doubleArray52 };
        int[] intArray54 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray53, intArray54);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray42, intArray54);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray10, intArray54);
        double[] doubleArray59 = new double[] { 1 };
        double[] doubleArray61 = new double[] { 1 };
        double[] doubleArray63 = new double[] { 1 };
        double[] doubleArray65 = new double[] { 1 };
        double[] doubleArray67 = new double[] { 1 };
        double[][] doubleArray68 = new double[][] { doubleArray59, doubleArray61, doubleArray63, doubleArray65, doubleArray67 };
        int[] intArray69 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray68, intArray69);
        double[][] doubleArray71 = new double[][] {};
        double[][] doubleArray72 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray71);
        int[] intArray73 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray72, intArray73);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray68, intArray73);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray10, intArray73);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray9, intArray73);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray5, intArray73);
        java.lang.Class<?> wildcardClass79 = intArray73.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[]");
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[]");
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[]");
        org.junit.Assert.assertNotNull(wildcardClass79);
    }

    @Test
    public void test0690() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0690");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = new double[][] {};
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[] doubleArray5 = new double[] { 1 };
        double[] doubleArray7 = new double[] { 1 };
        double[] doubleArray9 = new double[] { 1 };
        double[] doubleArray11 = new double[] { 1 };
        double[] doubleArray13 = new double[] { 1 };
        double[][] doubleArray14 = new double[][] { doubleArray5, doubleArray7, doubleArray9, doubleArray11, doubleArray13 };
        int[] intArray15 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray14, intArray15);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray2, intArray15);
        double[] doubleArray21 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray25 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray29 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray33 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray34 = new double[][] { doubleArray21, doubleArray25, doubleArray29, doubleArray33 };
        double[] doubleArray36 = new double[] { 1 };
        double[] doubleArray38 = new double[] { 1 };
        double[] doubleArray40 = new double[] { 1 };
        double[] doubleArray42 = new double[] { 1 };
        double[] doubleArray44 = new double[] { 1 };
        double[][] doubleArray45 = new double[][] { doubleArray36, doubleArray38, doubleArray40, doubleArray42, doubleArray44 };
        int[] intArray46 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray45, intArray46);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray34, intArray46);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray2, intArray46);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray1, intArray46);
        double[][] doubleArray51 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray52 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray51);
        double[][] doubleArray53 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray52);
        double[][] doubleArray54 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray53);
        double[][] doubleArray55 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray54);
        java.lang.Class<?> wildcardClass56 = doubleArray54.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertNotNull(wildcardClass56);
    }

    @Test
    public void test0691() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0691");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = new double[][] {};
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[] doubleArray11 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray18 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray25 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray32 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray33 = new double[][] { doubleArray11, doubleArray18, doubleArray25, doubleArray32 };
        double[][] doubleArray34 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray33);
        double[] doubleArray36 = new double[] { 1 };
        double[] doubleArray38 = new double[] { 1 };
        double[] doubleArray40 = new double[] { 1 };
        double[] doubleArray42 = new double[] { 1 };
        double[] doubleArray44 = new double[] { 1 };
        double[][] doubleArray45 = new double[][] { doubleArray36, doubleArray38, doubleArray40, doubleArray42, doubleArray44 };
        int[] intArray46 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray45, intArray46);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray34, intArray46);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray3, intArray46);
        double[] doubleArray53 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray57 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray61 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray65 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray66 = new double[][] { doubleArray53, doubleArray57, doubleArray61, doubleArray65 };
        double[] doubleArray68 = new double[] { 1 };
        double[] doubleArray70 = new double[] { 1 };
        double[] doubleArray72 = new double[] { 1 };
        double[] doubleArray74 = new double[] { 1 };
        double[] doubleArray76 = new double[] { 1 };
        double[][] doubleArray77 = new double[][] { doubleArray68, doubleArray70, doubleArray72, doubleArray74, doubleArray76 };
        int[] intArray78 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray77, intArray78);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray66, intArray78);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray3, intArray78);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray0, intArray78);
        double[][] doubleArray83 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray84 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray85 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray84);
        java.lang.Class<?> wildcardClass86 = doubleArray84.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[]");
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray70), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray74), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[]");
        org.junit.Assert.assertNotNull(doubleArray83);
        org.junit.Assert.assertNotNull(doubleArray84);
        org.junit.Assert.assertNotNull(doubleArray85);
        org.junit.Assert.assertNotNull(wildcardClass86);
    }

    @Test
    public void test0692() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0692");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[] doubleArray3 = new double[] { 1 };
        double[] doubleArray5 = new double[] { 1 };
        double[] doubleArray7 = new double[] { 1 };
        double[] doubleArray9 = new double[] { 1 };
        double[] doubleArray11 = new double[] { 1 };
        double[][] doubleArray12 = new double[][] { doubleArray3, doubleArray5, doubleArray7, doubleArray9, doubleArray11 };
        int[] intArray13 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray12, intArray13);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray0, intArray13);
        double[] doubleArray19 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray23 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray27 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray31 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray32 = new double[][] { doubleArray19, doubleArray23, doubleArray27, doubleArray31 };
        double[] doubleArray34 = new double[] { 1 };
        double[] doubleArray36 = new double[] { 1 };
        double[] doubleArray38 = new double[] { 1 };
        double[] doubleArray40 = new double[] { 1 };
        double[] doubleArray42 = new double[] { 1 };
        double[][] doubleArray43 = new double[][] { doubleArray34, doubleArray36, doubleArray38, doubleArray40, doubleArray42 };
        int[] intArray44 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray43, intArray44);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray32, intArray44);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray0, intArray44);
        double[][] doubleArray48 = new double[][] {};
        double[][] doubleArray49 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray48);
        double[] doubleArray51 = new double[] { 1 };
        double[] doubleArray53 = new double[] { 1 };
        double[] doubleArray55 = new double[] { 1 };
        double[] doubleArray57 = new double[] { 1 };
        double[] doubleArray59 = new double[] { 1 };
        double[][] doubleArray60 = new double[][] { doubleArray51, doubleArray53, doubleArray55, doubleArray57, doubleArray59 };
        int[] intArray61 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray60, intArray61);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray48, intArray61);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray0, intArray61);
        double[][] doubleArray65 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray66 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray67 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray66);
        double[][] doubleArray68 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray66);
        java.lang.Class<?> wildcardClass69 = doubleArray68.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[]");
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertNotNull(wildcardClass69);
    }

    @Test
    public void test0693() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0693");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[] doubleArray3 = new double[] { 1 };
        double[] doubleArray5 = new double[] { 1 };
        double[] doubleArray7 = new double[] { 1 };
        double[] doubleArray9 = new double[] { 1 };
        double[] doubleArray11 = new double[] { 1 };
        double[][] doubleArray12 = new double[][] { doubleArray3, doubleArray5, doubleArray7, doubleArray9, doubleArray11 };
        int[] intArray13 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray12, intArray13);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray0, intArray13);
        double[][] doubleArray16 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray17 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray16);
        double[][] doubleArray18 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray17);
        double[][] doubleArray19 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray17);
        double[][] doubleArray20 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray19);
        java.lang.Class<?> wildcardClass21 = doubleArray20.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertNotNull(wildcardClass21);
    }

    @Test
    public void test0694() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0694");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        int[] intArray2 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray1, intArray2);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray5 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray4);
        double[][] doubleArray6 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray4);
        double[][] doubleArray7 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray6);
        java.lang.Class<?> wildcardClass8 = doubleArray7.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertNotNull(wildcardClass8);
    }

    @Test
    public void test0695() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0695");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray3 = new double[][] {};
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[][] doubleArray5 = new double[][] {};
        double[][] doubleArray6 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray5);
        double[] doubleArray8 = new double[] { 1 };
        double[] doubleArray10 = new double[] { 1 };
        double[] doubleArray12 = new double[] { 1 };
        double[] doubleArray14 = new double[] { 1 };
        double[] doubleArray16 = new double[] { 1 };
        double[][] doubleArray17 = new double[][] { doubleArray8, doubleArray10, doubleArray12, doubleArray14, doubleArray16 };
        int[] intArray18 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray17, intArray18);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray5, intArray18);
        double[] doubleArray24 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray28 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray32 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray36 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray37 = new double[][] { doubleArray24, doubleArray28, doubleArray32, doubleArray36 };
        double[] doubleArray39 = new double[] { 1 };
        double[] doubleArray41 = new double[] { 1 };
        double[] doubleArray43 = new double[] { 1 };
        double[] doubleArray45 = new double[] { 1 };
        double[] doubleArray47 = new double[] { 1 };
        double[][] doubleArray48 = new double[][] { doubleArray39, doubleArray41, doubleArray43, doubleArray45, doubleArray47 };
        int[] intArray49 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray48, intArray49);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray37, intArray49);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray5, intArray49);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray3, intArray49);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray0, intArray49);
        double[][] doubleArray55 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray56 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray57 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray56);
        java.lang.Class<?> wildcardClass58 = doubleArray57.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[]");
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[]");
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertNotNull(wildcardClass58);
    }

    @Test
    public void test0696() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0696");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[] doubleArray31 = new double[] { 1 };
        double[] doubleArray33 = new double[] { 1 };
        double[] doubleArray35 = new double[] { 1 };
        double[] doubleArray37 = new double[] { 1 };
        double[] doubleArray39 = new double[] { 1 };
        double[][] doubleArray40 = new double[][] { doubleArray31, doubleArray33, doubleArray35, doubleArray37, doubleArray39 };
        int[] intArray41 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray40, intArray41);
        double[][] doubleArray43 = new double[][] {};
        double[][] doubleArray44 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray43);
        int[] intArray45 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray44, intArray45);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray40, intArray45);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray28, intArray45);
        double[][] doubleArray49 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray50 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray51 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray52 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray51);
        double[][] doubleArray53 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray52);
        java.lang.Class<?> wildcardClass54 = doubleArray53.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertNotNull(wildcardClass54);
    }

    @Test
    public void test0697() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0697");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray30 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray31 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray32 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray31);
        double[][] doubleArray33 = new double[][] {};
        double[][] doubleArray34 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray33);
        int[] intArray35 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray34, intArray35);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray32, intArray35);
        double[][] doubleArray38 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray32);
        double[][] doubleArray39 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray32);
        java.lang.Class<?> wildcardClass40 = doubleArray32.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertNotNull(wildcardClass40);
    }

    @Test
    public void test0698() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0698");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = new double[][] {};
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[][] doubleArray5 = new double[][] {};
        double[][] doubleArray6 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray5);
        double[][] doubleArray7 = new double[][] {};
        double[][] doubleArray8 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray7);
        double[] doubleArray10 = new double[] { 1 };
        double[] doubleArray12 = new double[] { 1 };
        double[] doubleArray14 = new double[] { 1 };
        double[] doubleArray16 = new double[] { 1 };
        double[] doubleArray18 = new double[] { 1 };
        double[][] doubleArray19 = new double[][] { doubleArray10, doubleArray12, doubleArray14, doubleArray16, doubleArray18 };
        int[] intArray20 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray19, intArray20);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray7, intArray20);
        double[] doubleArray26 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray30 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray34 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray38 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray39 = new double[][] { doubleArray26, doubleArray30, doubleArray34, doubleArray38 };
        double[] doubleArray41 = new double[] { 1 };
        double[] doubleArray43 = new double[] { 1 };
        double[] doubleArray45 = new double[] { 1 };
        double[] doubleArray47 = new double[] { 1 };
        double[] doubleArray49 = new double[] { 1 };
        double[][] doubleArray50 = new double[][] { doubleArray41, doubleArray43, doubleArray45, doubleArray47, doubleArray49 };
        int[] intArray51 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray50, intArray51);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray39, intArray51);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray7, intArray51);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray6, intArray51);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray4, intArray51);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray1, intArray51);
        double[][] doubleArray58 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[] doubleArray65 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray72 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray79 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray86 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray87 = new double[][] { doubleArray65, doubleArray72, doubleArray79, doubleArray86 };
        double[][] doubleArray88 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray87);
        double[][] doubleArray89 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray87);
        double[][] doubleArray90 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray87);
        double[][] doubleArray91 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray90);
        double[][] doubleArray92 = new double[][] {};
        double[][] doubleArray93 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray92);
        int[] intArray94 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray93, intArray94);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray91, intArray94);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray58, intArray94);
        double[][] doubleArray98 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray58);
        double[][] doubleArray99 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray58);
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[]");
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[]");
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray79), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray86), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray87);
        org.junit.Assert.assertNotNull(doubleArray88);
        org.junit.Assert.assertNotNull(doubleArray89);
        org.junit.Assert.assertNotNull(doubleArray90);
        org.junit.Assert.assertNotNull(doubleArray91);
        org.junit.Assert.assertNotNull(doubleArray92);
        org.junit.Assert.assertNotNull(doubleArray93);
        org.junit.Assert.assertNotNull(intArray94);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray94), "[]");
        org.junit.Assert.assertNotNull(doubleArray98);
        org.junit.Assert.assertNotNull(doubleArray99);
    }

    @Test
    public void test0699() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0699");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray30 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray29);
        double[][] doubleArray31 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        double[][] doubleArray32 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        double[][] doubleArray33 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        double[][] doubleArray34 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        double[][] doubleArray35 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray34);
        double[][] doubleArray36 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray35);
        double[][] doubleArray37 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray35);
        double[][] doubleArray38 = null;
        double[][] doubleArray39 = new double[][] {};
        double[][] doubleArray40 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray39);
        double[][] doubleArray41 = new double[][] {};
        double[][] doubleArray42 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray41);
        double[][] doubleArray43 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray42);
        double[] doubleArray47 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray51 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray55 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray59 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray60 = new double[][] { doubleArray47, doubleArray51, doubleArray55, doubleArray59 };
        double[] doubleArray62 = new double[] { 1 };
        double[] doubleArray64 = new double[] { 1 };
        double[] doubleArray66 = new double[] { 1 };
        double[] doubleArray68 = new double[] { 1 };
        double[] doubleArray70 = new double[] { 1 };
        double[][] doubleArray71 = new double[][] { doubleArray62, doubleArray64, doubleArray66, doubleArray68, doubleArray70 };
        int[] intArray72 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray71, intArray72);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray60, intArray72);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray42, intArray72);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray40, intArray72);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray38, intArray72);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray35, intArray72);
        java.lang.Class<?> wildcardClass79 = intArray72.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray66), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray70), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[]");
        org.junit.Assert.assertNotNull(wildcardClass79);
    }

    @Test
    public void test0700() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0700");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray4 = new double[][] {};
        double[][] doubleArray5 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray4);
        double[][] doubleArray6 = new double[][] {};
        double[][] doubleArray7 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray6);
        double[] doubleArray9 = new double[] { 1 };
        double[] doubleArray11 = new double[] { 1 };
        double[] doubleArray13 = new double[] { 1 };
        double[] doubleArray15 = new double[] { 1 };
        double[] doubleArray17 = new double[] { 1 };
        double[][] doubleArray18 = new double[][] { doubleArray9, doubleArray11, doubleArray13, doubleArray15, doubleArray17 };
        int[] intArray19 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray18, intArray19);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray6, intArray19);
        double[] doubleArray25 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray29 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray33 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray37 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray38 = new double[][] { doubleArray25, doubleArray29, doubleArray33, doubleArray37 };
        double[] doubleArray40 = new double[] { 1 };
        double[] doubleArray42 = new double[] { 1 };
        double[] doubleArray44 = new double[] { 1 };
        double[] doubleArray46 = new double[] { 1 };
        double[] doubleArray48 = new double[] { 1 };
        double[][] doubleArray49 = new double[][] { doubleArray40, doubleArray42, doubleArray44, doubleArray46, doubleArray48 };
        int[] intArray50 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray49, intArray50);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray38, intArray50);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray6, intArray50);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray4, intArray50);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray1, intArray50);
        double[][] doubleArray56 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray57 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray58 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray57);
        double[][] doubleArray59 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray57);
        double[][] doubleArray60 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray59);
        java.lang.Class<?> wildcardClass61 = doubleArray59.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[]");
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertNotNull(wildcardClass61);
    }

    @Test
    public void test0701() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0701");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[] doubleArray10 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray17 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray24 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray31 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray32 = new double[][] { doubleArray10, doubleArray17, doubleArray24, doubleArray31 };
        double[][] doubleArray33 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray32);
        double[][] doubleArray34 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray32);
        double[][] doubleArray35 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray32);
        double[] doubleArray37 = new double[] { 1 };
        double[] doubleArray39 = new double[] { 1 };
        double[] doubleArray41 = new double[] { 1 };
        double[] doubleArray43 = new double[] { 1 };
        double[] doubleArray45 = new double[] { 1 };
        double[][] doubleArray46 = new double[][] { doubleArray37, doubleArray39, doubleArray41, doubleArray43, doubleArray45 };
        int[] intArray47 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray46, intArray47);
        double[] doubleArray55 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray62 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray69 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray76 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray77 = new double[][] { doubleArray55, doubleArray62, doubleArray69, doubleArray76 };
        double[][] doubleArray78 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray77);
        double[] doubleArray80 = new double[] { 1 };
        double[] doubleArray82 = new double[] { 1 };
        double[] doubleArray84 = new double[] { 1 };
        double[] doubleArray86 = new double[] { 1 };
        double[] doubleArray88 = new double[] { 1 };
        double[][] doubleArray89 = new double[][] { doubleArray80, doubleArray82, doubleArray84, doubleArray86, doubleArray88 };
        int[] intArray90 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray89, intArray90);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray78, intArray90);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray46, intArray90);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray35, intArray90);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray3, intArray90);
        double[][] doubleArray96 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[][] doubleArray97 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray96);
        double[][] doubleArray98 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray97);
        java.lang.Class<?> wildcardClass99 = doubleArray98.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[]");
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray80), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray82), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray84), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray86), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray88), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray89);
        org.junit.Assert.assertNotNull(intArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray90), "[]");
        org.junit.Assert.assertNotNull(doubleArray96);
        org.junit.Assert.assertNotNull(doubleArray97);
        org.junit.Assert.assertNotNull(doubleArray98);
        org.junit.Assert.assertNotNull(wildcardClass99);
    }

    @Test
    public void test0702() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0702");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        int[] intArray2 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray1, intArray2);
        double[] doubleArray5 = new double[] { 1 };
        double[] doubleArray7 = new double[] { 1 };
        double[] doubleArray9 = new double[] { 1 };
        double[] doubleArray11 = new double[] { 1 };
        double[] doubleArray13 = new double[] { 1 };
        double[][] doubleArray14 = new double[][] { doubleArray5, doubleArray7, doubleArray9, doubleArray11, doubleArray13 };
        int[] intArray15 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray14, intArray15);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray1, intArray15);
        double[][] doubleArray18 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray19 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray18);
        int[] intArray20 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray18, intArray20);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertNotNull(doubleArray19);
    }

    @Test
    public void test0703() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0703");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray30 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray31 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        double[][] doubleArray32 = new double[][] {};
        double[][] doubleArray33 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray32);
        double[][] doubleArray34 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray33);
        double[] doubleArray38 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray42 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray46 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray50 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray51 = new double[][] { doubleArray38, doubleArray42, doubleArray46, doubleArray50 };
        double[] doubleArray53 = new double[] { 1 };
        double[] doubleArray55 = new double[] { 1 };
        double[] doubleArray57 = new double[] { 1 };
        double[] doubleArray59 = new double[] { 1 };
        double[] doubleArray61 = new double[] { 1 };
        double[][] doubleArray62 = new double[][] { doubleArray53, doubleArray55, doubleArray57, doubleArray59, doubleArray61 };
        int[] intArray63 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray62, intArray63);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray51, intArray63);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray33, intArray63);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray31, intArray63);
        java.lang.Class<?> wildcardClass68 = doubleArray31.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[]");
        org.junit.Assert.assertNotNull(wildcardClass68);
    }

    @Test
    public void test0704() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0704");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[] doubleArray31 = new double[] { 1 };
        double[] doubleArray33 = new double[] { 1 };
        double[] doubleArray35 = new double[] { 1 };
        double[] doubleArray37 = new double[] { 1 };
        double[] doubleArray39 = new double[] { 1 };
        double[][] doubleArray40 = new double[][] { doubleArray31, doubleArray33, doubleArray35, doubleArray37, doubleArray39 };
        int[] intArray41 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray40, intArray41);
        double[][] doubleArray43 = new double[][] {};
        double[][] doubleArray44 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray43);
        int[] intArray45 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray44, intArray45);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray40, intArray45);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray28, intArray45);
        double[][] doubleArray49 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray50 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray49);
        double[] doubleArray57 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray64 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray71 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray78 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray79 = new double[][] { doubleArray57, doubleArray64, doubleArray71, doubleArray78 };
        double[][] doubleArray80 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray79);
        double[][] doubleArray81 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray79);
        double[][] doubleArray82 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray79);
        double[][] doubleArray83 = new double[][] {};
        double[][] doubleArray84 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray83);
        int[] intArray85 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray84, intArray85);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray82, intArray85);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray49, intArray85);
        java.lang.Class<?> wildcardClass89 = doubleArray49.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray71), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray78), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertNotNull(doubleArray81);
        org.junit.Assert.assertNotNull(doubleArray82);
        org.junit.Assert.assertNotNull(doubleArray83);
        org.junit.Assert.assertNotNull(doubleArray84);
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray85), "[]");
        org.junit.Assert.assertNotNull(wildcardClass89);
    }

    @Test
    public void test0705() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0705");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray30 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray31 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        double[][] doubleArray32 = new double[][] {};
        double[][] doubleArray33 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray32);
        double[][] doubleArray34 = new double[][] {};
        double[][] doubleArray35 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray34);
        double[] doubleArray37 = new double[] { 1 };
        double[] doubleArray39 = new double[] { 1 };
        double[] doubleArray41 = new double[] { 1 };
        double[] doubleArray43 = new double[] { 1 };
        double[] doubleArray45 = new double[] { 1 };
        double[][] doubleArray46 = new double[][] { doubleArray37, doubleArray39, doubleArray41, doubleArray43, doubleArray45 };
        int[] intArray47 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray46, intArray47);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray34, intArray47);
        double[] doubleArray53 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray57 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray61 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray65 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray66 = new double[][] { doubleArray53, doubleArray57, doubleArray61, doubleArray65 };
        double[] doubleArray68 = new double[] { 1 };
        double[] doubleArray70 = new double[] { 1 };
        double[] doubleArray72 = new double[] { 1 };
        double[] doubleArray74 = new double[] { 1 };
        double[] doubleArray76 = new double[] { 1 };
        double[][] doubleArray77 = new double[][] { doubleArray68, doubleArray70, doubleArray72, doubleArray74, doubleArray76 };
        int[] intArray78 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray77, intArray78);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray66, intArray78);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray34, intArray78);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray32, intArray78);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray31, intArray78);
        double[][] doubleArray84 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray31);
        double[][] doubleArray85 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray84);
        java.lang.Class<?> wildcardClass86 = doubleArray84.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[]");
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray70), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray74), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[]");
        org.junit.Assert.assertNotNull(doubleArray84);
        org.junit.Assert.assertNotNull(doubleArray85);
        org.junit.Assert.assertNotNull(wildcardClass86);
    }

    @Test
    public void test0706() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0706");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        int[] intArray2 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray1, intArray2);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray5 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray6 = new double[][] {};
        double[][] doubleArray7 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray6);
        double[][] doubleArray8 = new double[][] {};
        double[][] doubleArray9 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray8);
        double[] doubleArray11 = new double[] { 1 };
        double[] doubleArray13 = new double[] { 1 };
        double[] doubleArray15 = new double[] { 1 };
        double[] doubleArray17 = new double[] { 1 };
        double[] doubleArray19 = new double[] { 1 };
        double[][] doubleArray20 = new double[][] { doubleArray11, doubleArray13, doubleArray15, doubleArray17, doubleArray19 };
        int[] intArray21 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray20, intArray21);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray8, intArray21);
        double[] doubleArray27 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray31 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray35 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray39 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray40 = new double[][] { doubleArray27, doubleArray31, doubleArray35, doubleArray39 };
        double[] doubleArray42 = new double[] { 1 };
        double[] doubleArray44 = new double[] { 1 };
        double[] doubleArray46 = new double[] { 1 };
        double[] doubleArray48 = new double[] { 1 };
        double[] doubleArray50 = new double[] { 1 };
        double[][] doubleArray51 = new double[][] { doubleArray42, doubleArray44, doubleArray46, doubleArray48, doubleArray50 };
        int[] intArray52 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray51, intArray52);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray40, intArray52);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray8, intArray52);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray7, intArray52);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray1, intArray52);
        double[][] doubleArray58 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray59 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray58);
        int[] intArray60 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray59, intArray60);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[]");
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertNotNull(doubleArray59);
    }

    @Test
    public void test0707() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0707");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        int[] intArray2 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray1, intArray2);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray5 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray4);
        double[] doubleArray12 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray19 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray26 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray33 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray34 = new double[][] { doubleArray12, doubleArray19, doubleArray26, doubleArray33 };
        double[][] doubleArray35 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray34);
        double[][] doubleArray36 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray34);
        double[][] doubleArray37 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray34);
        double[] doubleArray39 = new double[] { 1 };
        double[] doubleArray41 = new double[] { 1 };
        double[] doubleArray43 = new double[] { 1 };
        double[] doubleArray45 = new double[] { 1 };
        double[] doubleArray47 = new double[] { 1 };
        double[][] doubleArray48 = new double[][] { doubleArray39, doubleArray41, doubleArray43, doubleArray45, doubleArray47 };
        int[] intArray49 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray48, intArray49);
        double[] doubleArray57 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray64 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray71 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray78 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray79 = new double[][] { doubleArray57, doubleArray64, doubleArray71, doubleArray78 };
        double[][] doubleArray80 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray79);
        double[] doubleArray82 = new double[] { 1 };
        double[] doubleArray84 = new double[] { 1 };
        double[] doubleArray86 = new double[] { 1 };
        double[] doubleArray88 = new double[] { 1 };
        double[] doubleArray90 = new double[] { 1 };
        double[][] doubleArray91 = new double[][] { doubleArray82, doubleArray84, doubleArray86, doubleArray88, doubleArray90 };
        int[] intArray92 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray91, intArray92);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray80, intArray92);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray48, intArray92);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray37, intArray92);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray4, intArray92);
        java.lang.Class<?> wildcardClass98 = doubleArray4.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[]");
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray71), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray78), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertNotNull(doubleArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray82), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray84), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray86), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray88), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray90), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray91);
        org.junit.Assert.assertNotNull(intArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray92), "[]");
        org.junit.Assert.assertNotNull(wildcardClass98);
    }

    @Test
    public void test0708() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0708");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[] doubleArray3 = new double[] { 1 };
        double[] doubleArray5 = new double[] { 1 };
        double[] doubleArray7 = new double[] { 1 };
        double[] doubleArray9 = new double[] { 1 };
        double[] doubleArray11 = new double[] { 1 };
        double[][] doubleArray12 = new double[][] { doubleArray3, doubleArray5, doubleArray7, doubleArray9, doubleArray11 };
        int[] intArray13 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray12, intArray13);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray0, intArray13);
        double[] doubleArray19 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray23 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray27 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray31 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray32 = new double[][] { doubleArray19, doubleArray23, doubleArray27, doubleArray31 };
        double[] doubleArray34 = new double[] { 1 };
        double[] doubleArray36 = new double[] { 1 };
        double[] doubleArray38 = new double[] { 1 };
        double[] doubleArray40 = new double[] { 1 };
        double[] doubleArray42 = new double[] { 1 };
        double[][] doubleArray43 = new double[][] { doubleArray34, doubleArray36, doubleArray38, doubleArray40, doubleArray42 };
        int[] intArray44 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray43, intArray44);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray32, intArray44);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray0, intArray44);
        double[][] doubleArray48 = new double[][] {};
        double[][] doubleArray49 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray48);
        double[] doubleArray51 = new double[] { 1 };
        double[] doubleArray53 = new double[] { 1 };
        double[] doubleArray55 = new double[] { 1 };
        double[] doubleArray57 = new double[] { 1 };
        double[] doubleArray59 = new double[] { 1 };
        double[][] doubleArray60 = new double[][] { doubleArray51, doubleArray53, doubleArray55, doubleArray57, doubleArray59 };
        int[] intArray61 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray60, intArray61);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray48, intArray61);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray0, intArray61);
        double[][] doubleArray65 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray66 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray67 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray68 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray67);
        java.lang.Class<?> wildcardClass69 = doubleArray67.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[]");
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertNotNull(wildcardClass69);
    }

    @Test
    public void test0709() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0709");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray30 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray29);
        double[][] doubleArray31 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        double[][] doubleArray32 = new double[][] {};
        double[][] doubleArray33 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray32);
        double[][] doubleArray34 = new double[][] {};
        double[][] doubleArray35 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray34);
        double[] doubleArray37 = new double[] { 1 };
        double[] doubleArray39 = new double[] { 1 };
        double[] doubleArray41 = new double[] { 1 };
        double[] doubleArray43 = new double[] { 1 };
        double[] doubleArray45 = new double[] { 1 };
        double[][] doubleArray46 = new double[][] { doubleArray37, doubleArray39, doubleArray41, doubleArray43, doubleArray45 };
        int[] intArray47 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray46, intArray47);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray34, intArray47);
        double[] doubleArray53 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray57 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray61 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray65 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray66 = new double[][] { doubleArray53, doubleArray57, doubleArray61, doubleArray65 };
        double[] doubleArray68 = new double[] { 1 };
        double[] doubleArray70 = new double[] { 1 };
        double[] doubleArray72 = new double[] { 1 };
        double[] doubleArray74 = new double[] { 1 };
        double[] doubleArray76 = new double[] { 1 };
        double[][] doubleArray77 = new double[][] { doubleArray68, doubleArray70, doubleArray72, doubleArray74, doubleArray76 };
        int[] intArray78 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray77, intArray78);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray66, intArray78);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray34, intArray78);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray33, intArray78);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray30, intArray78);
        java.lang.Class<?> wildcardClass84 = doubleArray30.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[]");
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray70), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray74), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[]");
        org.junit.Assert.assertNotNull(wildcardClass84);
    }

    @Test
    public void test0710() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0710");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[] doubleArray3 = new double[] { 1 };
        double[] doubleArray5 = new double[] { 1 };
        double[] doubleArray7 = new double[] { 1 };
        double[] doubleArray9 = new double[] { 1 };
        double[] doubleArray11 = new double[] { 1 };
        double[][] doubleArray12 = new double[][] { doubleArray3, doubleArray5, doubleArray7, doubleArray9, doubleArray11 };
        int[] intArray13 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray12, intArray13);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray0, intArray13);
        double[] doubleArray19 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray23 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray27 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray31 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray32 = new double[][] { doubleArray19, doubleArray23, doubleArray27, doubleArray31 };
        double[] doubleArray34 = new double[] { 1 };
        double[] doubleArray36 = new double[] { 1 };
        double[] doubleArray38 = new double[] { 1 };
        double[] doubleArray40 = new double[] { 1 };
        double[] doubleArray42 = new double[] { 1 };
        double[][] doubleArray43 = new double[][] { doubleArray34, doubleArray36, doubleArray38, doubleArray40, doubleArray42 };
        int[] intArray44 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray43, intArray44);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray32, intArray44);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray0, intArray44);
        double[] doubleArray49 = new double[] { 1 };
        double[] doubleArray51 = new double[] { 1 };
        double[] doubleArray53 = new double[] { 1 };
        double[] doubleArray55 = new double[] { 1 };
        double[] doubleArray57 = new double[] { 1 };
        double[][] doubleArray58 = new double[][] { doubleArray49, doubleArray51, doubleArray53, doubleArray55, doubleArray57 };
        int[] intArray59 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray58, intArray59);
        double[][] doubleArray61 = new double[][] {};
        double[][] doubleArray62 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray61);
        int[] intArray63 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray62, intArray63);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray58, intArray63);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray0, intArray63);
        double[][] doubleArray67 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray68 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray69 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        java.lang.Class<?> wildcardClass70 = doubleArray0.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[]");
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertNotNull(wildcardClass70);
    }

    @Test
    public void test0711() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0711");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[] doubleArray6 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray10 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray14 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray18 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray19 = new double[][] { doubleArray6, doubleArray10, doubleArray14, doubleArray18 };
        double[] doubleArray21 = new double[] { 1 };
        double[] doubleArray23 = new double[] { 1 };
        double[] doubleArray25 = new double[] { 1 };
        double[] doubleArray27 = new double[] { 1 };
        double[] doubleArray29 = new double[] { 1 };
        double[][] doubleArray30 = new double[][] { doubleArray21, doubleArray23, doubleArray25, doubleArray27, doubleArray29 };
        int[] intArray31 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray30, intArray31);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray19, intArray31);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray1, intArray31);
        double[][] doubleArray35 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray36 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        java.lang.Class<?> wildcardClass37 = doubleArray36.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertNotNull(wildcardClass37);
    }

    @Test
    public void test0712() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0712");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[] doubleArray31 = new double[] { 1 };
        double[] doubleArray33 = new double[] { 1 };
        double[] doubleArray35 = new double[] { 1 };
        double[] doubleArray37 = new double[] { 1 };
        double[] doubleArray39 = new double[] { 1 };
        double[][] doubleArray40 = new double[][] { doubleArray31, doubleArray33, doubleArray35, doubleArray37, doubleArray39 };
        int[] intArray41 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray40, intArray41);
        double[][] doubleArray43 = new double[][] {};
        double[][] doubleArray44 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray43);
        int[] intArray45 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray44, intArray45);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray40, intArray45);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray28, intArray45);
        double[][] doubleArray49 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray50 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray49);
        double[][] doubleArray51 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray49);
        java.lang.Class<?> wildcardClass52 = doubleArray49.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertNotNull(wildcardClass52);
    }

    @Test
    public void test0713() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0713");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray30 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray31 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[] doubleArray33 = new double[] { 1 };
        double[] doubleArray35 = new double[] { 1 };
        double[] doubleArray37 = new double[] { 1 };
        double[] doubleArray39 = new double[] { 1 };
        double[] doubleArray41 = new double[] { 1 };
        double[][] doubleArray42 = new double[][] { doubleArray33, doubleArray35, doubleArray37, doubleArray39, doubleArray41 };
        int[] intArray43 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray42, intArray43);
        double[] doubleArray51 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray58 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray65 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray72 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray73 = new double[][] { doubleArray51, doubleArray58, doubleArray65, doubleArray72 };
        double[][] doubleArray74 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray73);
        double[] doubleArray76 = new double[] { 1 };
        double[] doubleArray78 = new double[] { 1 };
        double[] doubleArray80 = new double[] { 1 };
        double[] doubleArray82 = new double[] { 1 };
        double[] doubleArray84 = new double[] { 1 };
        double[][] doubleArray85 = new double[][] { doubleArray76, doubleArray78, doubleArray80, doubleArray82, doubleArray84 };
        int[] intArray86 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray85, intArray86);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray74, intArray86);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray42, intArray86);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray31, intArray86);
        double[][] doubleArray91 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray31);
        java.lang.Class<?> wildcardClass92 = doubleArray91.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray78), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray80), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray82), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray84), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray85);
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray86), "[]");
        org.junit.Assert.assertNotNull(doubleArray91);
        org.junit.Assert.assertNotNull(wildcardClass92);
    }

    @Test
    public void test0714() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0714");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[] doubleArray3 = new double[] { 1 };
        double[] doubleArray5 = new double[] { 1 };
        double[] doubleArray7 = new double[] { 1 };
        double[] doubleArray9 = new double[] { 1 };
        double[] doubleArray11 = new double[] { 1 };
        double[][] doubleArray12 = new double[][] { doubleArray3, doubleArray5, doubleArray7, doubleArray9, doubleArray11 };
        int[] intArray13 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray12, intArray13);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray0, intArray13);
        double[] doubleArray19 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray23 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray27 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray31 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray32 = new double[][] { doubleArray19, doubleArray23, doubleArray27, doubleArray31 };
        double[] doubleArray34 = new double[] { 1 };
        double[] doubleArray36 = new double[] { 1 };
        double[] doubleArray38 = new double[] { 1 };
        double[] doubleArray40 = new double[] { 1 };
        double[] doubleArray42 = new double[] { 1 };
        double[][] doubleArray43 = new double[][] { doubleArray34, doubleArray36, doubleArray38, doubleArray40, doubleArray42 };
        int[] intArray44 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray43, intArray44);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray32, intArray44);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray0, intArray44);
        double[][] doubleArray48 = new double[][] {};
        double[][] doubleArray49 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray48);
        double[][] doubleArray50 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray49);
        double[] doubleArray57 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray64 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray71 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray78 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray79 = new double[][] { doubleArray57, doubleArray64, doubleArray71, doubleArray78 };
        double[][] doubleArray80 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray79);
        double[] doubleArray82 = new double[] { 1 };
        double[] doubleArray84 = new double[] { 1 };
        double[] doubleArray86 = new double[] { 1 };
        double[] doubleArray88 = new double[] { 1 };
        double[] doubleArray90 = new double[] { 1 };
        double[][] doubleArray91 = new double[][] { doubleArray82, doubleArray84, doubleArray86, doubleArray88, doubleArray90 };
        int[] intArray92 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray91, intArray92);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray80, intArray92);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray49, intArray92);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray0, intArray92);
        double[][] doubleArray97 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        java.lang.Class<?> wildcardClass98 = doubleArray0.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray71), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray78), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertNotNull(doubleArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray82), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray84), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray86), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray88), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray90), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray91);
        org.junit.Assert.assertNotNull(intArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray92), "[]");
        org.junit.Assert.assertNotNull(doubleArray97);
        org.junit.Assert.assertNotNull(wildcardClass98);
    }

    @Test
    public void test0715() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0715");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray30 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray31 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray32 = new double[][] {};
        double[][] doubleArray33 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray32);
        double[][] doubleArray34 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray33);
        double[][] doubleArray35 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray33);
        double[][] doubleArray36 = new double[][] {};
        double[][] doubleArray37 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray36);
        double[][] doubleArray38 = new double[][] {};
        double[][] doubleArray39 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray38);
        double[] doubleArray41 = new double[] { 1 };
        double[] doubleArray43 = new double[] { 1 };
        double[] doubleArray45 = new double[] { 1 };
        double[] doubleArray47 = new double[] { 1 };
        double[] doubleArray49 = new double[] { 1 };
        double[][] doubleArray50 = new double[][] { doubleArray41, doubleArray43, doubleArray45, doubleArray47, doubleArray49 };
        int[] intArray51 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray50, intArray51);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray38, intArray51);
        double[] doubleArray57 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray61 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray65 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray69 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray70 = new double[][] { doubleArray57, doubleArray61, doubleArray65, doubleArray69 };
        double[] doubleArray72 = new double[] { 1 };
        double[] doubleArray74 = new double[] { 1 };
        double[] doubleArray76 = new double[] { 1 };
        double[] doubleArray78 = new double[] { 1 };
        double[] doubleArray80 = new double[] { 1 };
        double[][] doubleArray81 = new double[][] { doubleArray72, doubleArray74, doubleArray76, doubleArray78, doubleArray80 };
        int[] intArray82 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray81, intArray82);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray70, intArray82);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray38, intArray82);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray36, intArray82);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray33, intArray82);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray31, intArray82);
        double[][] doubleArray89 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray31);
        double[][] doubleArray90 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray89);
        double[][] doubleArray91 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray89);
        java.lang.Class<?> wildcardClass92 = doubleArray89.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[]");
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray74), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray78), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray80), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray81);
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[]");
        org.junit.Assert.assertNotNull(doubleArray89);
        org.junit.Assert.assertNotNull(doubleArray90);
        org.junit.Assert.assertNotNull(doubleArray91);
        org.junit.Assert.assertNotNull(wildcardClass92);
    }

    @Test
    public void test0716() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0716");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray5 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray4);
        double[][] doubleArray6 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray5);
        java.lang.Class<?> wildcardClass7 = doubleArray6.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(wildcardClass7);
    }

    @Test
    public void test0717() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0717");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[] doubleArray6 = new double[] { 1 };
        double[] doubleArray8 = new double[] { 1 };
        double[] doubleArray10 = new double[] { 1 };
        double[] doubleArray12 = new double[] { 1 };
        double[] doubleArray14 = new double[] { 1 };
        double[][] doubleArray15 = new double[][] { doubleArray6, doubleArray8, doubleArray10, doubleArray12, doubleArray14 };
        int[] intArray16 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray15, intArray16);
        double[][] doubleArray18 = new double[][] {};
        double[][] doubleArray19 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray18);
        int[] intArray20 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray19, intArray20);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray15, intArray20);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray3, intArray20);
        double[][] doubleArray24 = new double[][] {};
        double[][] doubleArray25 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray24);
        double[] doubleArray27 = new double[] { 1 };
        double[] doubleArray29 = new double[] { 1 };
        double[] doubleArray31 = new double[] { 1 };
        double[] doubleArray33 = new double[] { 1 };
        double[] doubleArray35 = new double[] { 1 };
        double[][] doubleArray36 = new double[][] { doubleArray27, doubleArray29, doubleArray31, doubleArray33, doubleArray35 };
        int[] intArray37 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray36, intArray37);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray24, intArray37);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray3, intArray37);
        java.lang.Class<?> wildcardClass41 = intArray37.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[]");
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[]");
        org.junit.Assert.assertNotNull(wildcardClass41);
    }

    @Test
    public void test0718() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0718");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray30 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray29);
        double[][] doubleArray31 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        double[][] doubleArray32 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray31);
        double[][] doubleArray33 = new double[][] {};
        double[][] doubleArray34 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray33);
        double[][] doubleArray35 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray34);
        double[][] doubleArray36 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray34);
        double[][] doubleArray37 = new double[][] {};
        double[][] doubleArray38 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray37);
        double[][] doubleArray39 = new double[][] {};
        double[][] doubleArray40 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray39);
        double[] doubleArray42 = new double[] { 1 };
        double[] doubleArray44 = new double[] { 1 };
        double[] doubleArray46 = new double[] { 1 };
        double[] doubleArray48 = new double[] { 1 };
        double[] doubleArray50 = new double[] { 1 };
        double[][] doubleArray51 = new double[][] { doubleArray42, doubleArray44, doubleArray46, doubleArray48, doubleArray50 };
        int[] intArray52 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray51, intArray52);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray39, intArray52);
        double[] doubleArray58 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray62 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray66 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray70 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray71 = new double[][] { doubleArray58, doubleArray62, doubleArray66, doubleArray70 };
        double[] doubleArray73 = new double[] { 1 };
        double[] doubleArray75 = new double[] { 1 };
        double[] doubleArray77 = new double[] { 1 };
        double[] doubleArray79 = new double[] { 1 };
        double[] doubleArray81 = new double[] { 1 };
        double[][] doubleArray82 = new double[][] { doubleArray73, doubleArray75, doubleArray77, doubleArray79, doubleArray81 };
        int[] intArray83 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray82, intArray83);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray71, intArray83);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray39, intArray83);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray37, intArray83);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray34, intArray83);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray32, intArray83);
        java.lang.Class<?> wildcardClass90 = doubleArray32.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[]");
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray66), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray70), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray73), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray75), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray77), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray79), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray81), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray82);
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray83), "[]");
        org.junit.Assert.assertNotNull(wildcardClass90);
    }

    @Test
    public void test0719() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0719");
        double[] doubleArray3 = new double[] { 0, 1, 10L };
        double[][] doubleArray4 = new double[][] { doubleArray3 };
        double[][] doubleArray5 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray4);
        double[][] doubleArray6 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray5);
        java.lang.Class<?> wildcardClass7 = doubleArray5.getClass();
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[0.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(wildcardClass7);
    }

    @Test
    public void test0720() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0720");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray30 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray29);
        double[][] doubleArray31 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray29);
        java.lang.Class<?> wildcardClass32 = doubleArray31.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(wildcardClass32);
    }

    @Test
    public void test0721() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0721");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = new double[][] {};
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[] doubleArray5 = new double[] { 1 };
        double[] doubleArray7 = new double[] { 1 };
        double[] doubleArray9 = new double[] { 1 };
        double[] doubleArray11 = new double[] { 1 };
        double[] doubleArray13 = new double[] { 1 };
        double[][] doubleArray14 = new double[][] { doubleArray5, doubleArray7, doubleArray9, doubleArray11, doubleArray13 };
        int[] intArray15 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray14, intArray15);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray2, intArray15);
        double[] doubleArray21 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray25 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray29 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray33 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray34 = new double[][] { doubleArray21, doubleArray25, doubleArray29, doubleArray33 };
        double[] doubleArray36 = new double[] { 1 };
        double[] doubleArray38 = new double[] { 1 };
        double[] doubleArray40 = new double[] { 1 };
        double[] doubleArray42 = new double[] { 1 };
        double[] doubleArray44 = new double[] { 1 };
        double[][] doubleArray45 = new double[][] { doubleArray36, doubleArray38, doubleArray40, doubleArray42, doubleArray44 };
        int[] intArray46 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray45, intArray46);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray34, intArray46);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray2, intArray46);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray1, intArray46);
        double[][] doubleArray51 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray52 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray51);
        double[][] doubleArray53 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray52);
        double[][] doubleArray54 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray52);
        double[][] doubleArray55 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray54);
        double[][] doubleArray56 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray55);
        double[][] doubleArray57 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray56);
        java.lang.Class<?> wildcardClass58 = doubleArray56.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertNotNull(wildcardClass58);
    }

    @Test
    public void test0722() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0722");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[] doubleArray6 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray10 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray14 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray18 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray19 = new double[][] { doubleArray6, doubleArray10, doubleArray14, doubleArray18 };
        double[] doubleArray21 = new double[] { 1 };
        double[] doubleArray23 = new double[] { 1 };
        double[] doubleArray25 = new double[] { 1 };
        double[] doubleArray27 = new double[] { 1 };
        double[] doubleArray29 = new double[] { 1 };
        double[][] doubleArray30 = new double[][] { doubleArray21, doubleArray23, doubleArray25, doubleArray27, doubleArray29 };
        int[] intArray31 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray30, intArray31);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray19, intArray31);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray1, intArray31);
        java.lang.Class<?> wildcardClass35 = doubleArray1.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[]");
        org.junit.Assert.assertNotNull(wildcardClass35);
    }

    @Test
    public void test0723() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0723");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[][] doubleArray5 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray4);
        double[][] doubleArray6 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray5);
        java.lang.Class<?> wildcardClass7 = doubleArray5.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(wildcardClass7);
    }

    @Test
    public void test0724() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0724");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[] doubleArray8 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray12 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray16 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray20 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray21 = new double[][] { doubleArray8, doubleArray12, doubleArray16, doubleArray20 };
        double[] doubleArray23 = new double[] { 1 };
        double[] doubleArray25 = new double[] { 1 };
        double[] doubleArray27 = new double[] { 1 };
        double[] doubleArray29 = new double[] { 1 };
        double[] doubleArray31 = new double[] { 1 };
        double[][] doubleArray32 = new double[][] { doubleArray23, doubleArray25, doubleArray27, doubleArray29, doubleArray31 };
        int[] intArray33 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray32, intArray33);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray21, intArray33);
        double[][] doubleArray36 = new double[][] {};
        double[][] doubleArray37 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray36);
        double[][] doubleArray38 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray37);
        double[][] doubleArray39 = new double[][] {};
        double[][] doubleArray40 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray39);
        double[][] doubleArray41 = new double[][] {};
        double[][] doubleArray42 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray41);
        double[] doubleArray44 = new double[] { 1 };
        double[] doubleArray46 = new double[] { 1 };
        double[] doubleArray48 = new double[] { 1 };
        double[] doubleArray50 = new double[] { 1 };
        double[] doubleArray52 = new double[] { 1 };
        double[][] doubleArray53 = new double[][] { doubleArray44, doubleArray46, doubleArray48, doubleArray50, doubleArray52 };
        int[] intArray54 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray53, intArray54);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray41, intArray54);
        double[] doubleArray60 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray64 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray68 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray72 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray73 = new double[][] { doubleArray60, doubleArray64, doubleArray68, doubleArray72 };
        double[] doubleArray75 = new double[] { 1 };
        double[] doubleArray77 = new double[] { 1 };
        double[] doubleArray79 = new double[] { 1 };
        double[] doubleArray81 = new double[] { 1 };
        double[] doubleArray83 = new double[] { 1 };
        double[][] doubleArray84 = new double[][] { doubleArray75, doubleArray77, doubleArray79, doubleArray81, doubleArray83 };
        int[] intArray85 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray84, intArray85);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray73, intArray85);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray41, intArray85);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray40, intArray85);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray38, intArray85);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray21, intArray85);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray3, intArray85);
        java.lang.Class<?> wildcardClass93 = doubleArray3.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[]");
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray75), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray77), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray79), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray81), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray83), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray84);
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray85), "[]");
        org.junit.Assert.assertNotNull(wildcardClass93);
    }

    @Test
    public void test0725() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0725");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray30 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray31 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray32 = new double[][] {};
        double[][] doubleArray33 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray32);
        int[] intArray34 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray33, intArray34);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray31, intArray34);
        double[][] doubleArray37 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray31);
        double[][] doubleArray38 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray31);
        java.lang.Class<?> wildcardClass39 = doubleArray31.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertNotNull(wildcardClass39);
    }

    @Test
    public void test0726() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0726");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray30 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray31 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray32 = new double[][] {};
        double[][] doubleArray33 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray32);
        int[] intArray34 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray33, intArray34);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray31, intArray34);
        double[][] doubleArray37 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray31);
        double[][] doubleArray38 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray37);
        double[][] doubleArray39 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray38);
        java.lang.Class<?> wildcardClass40 = doubleArray38.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertNotNull(wildcardClass40);
    }

    @Test
    public void test0727() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0727");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[][] doubleArray5 = new double[][] {};
        double[][] doubleArray6 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray5);
        double[][] doubleArray7 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray6);
        double[][] doubleArray8 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray7);
        double[][] doubleArray9 = new double[][] {};
        double[][] doubleArray10 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray9);
        double[] doubleArray12 = new double[] { 1 };
        double[] doubleArray14 = new double[] { 1 };
        double[] doubleArray16 = new double[] { 1 };
        double[] doubleArray18 = new double[] { 1 };
        double[] doubleArray20 = new double[] { 1 };
        double[][] doubleArray21 = new double[][] { doubleArray12, doubleArray14, doubleArray16, doubleArray18, doubleArray20 };
        int[] intArray22 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray21, intArray22);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray9, intArray22);
        double[] doubleArray28 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray32 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray36 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray40 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray41 = new double[][] { doubleArray28, doubleArray32, doubleArray36, doubleArray40 };
        double[] doubleArray43 = new double[] { 1 };
        double[] doubleArray45 = new double[] { 1 };
        double[] doubleArray47 = new double[] { 1 };
        double[] doubleArray49 = new double[] { 1 };
        double[] doubleArray51 = new double[] { 1 };
        double[][] doubleArray52 = new double[][] { doubleArray43, doubleArray45, doubleArray47, doubleArray49, doubleArray51 };
        int[] intArray53 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray52, intArray53);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray41, intArray53);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray9, intArray53);
        double[] doubleArray58 = new double[] { 1 };
        double[] doubleArray60 = new double[] { 1 };
        double[] doubleArray62 = new double[] { 1 };
        double[] doubleArray64 = new double[] { 1 };
        double[] doubleArray66 = new double[] { 1 };
        double[][] doubleArray67 = new double[][] { doubleArray58, doubleArray60, doubleArray62, doubleArray64, doubleArray66 };
        int[] intArray68 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray67, intArray68);
        double[][] doubleArray70 = new double[][] {};
        double[][] doubleArray71 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray70);
        int[] intArray72 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray71, intArray72);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray67, intArray72);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray9, intArray72);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray8, intArray72);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray3, intArray72);
        java.lang.Class<?> wildcardClass78 = intArray72.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[]");
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray66), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[]");
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[]");
        org.junit.Assert.assertNotNull(wildcardClass78);
    }

    @Test
    public void test0728() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0728");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray5 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray4);
        double[][] doubleArray6 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray4);
        double[][] doubleArray7 = new double[][] {};
        double[][] doubleArray8 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray7);
        int[] intArray9 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray8, intArray9);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray6, intArray9);
        double[][] doubleArray12 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray6);
        java.lang.Class<?> wildcardClass13 = doubleArray12.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertNotNull(wildcardClass13);
    }

    @Test
    public void test0729() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0729");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[] doubleArray31 = new double[] { 1 };
        double[] doubleArray33 = new double[] { 1 };
        double[] doubleArray35 = new double[] { 1 };
        double[] doubleArray37 = new double[] { 1 };
        double[] doubleArray39 = new double[] { 1 };
        double[][] doubleArray40 = new double[][] { doubleArray31, doubleArray33, doubleArray35, doubleArray37, doubleArray39 };
        int[] intArray41 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray40, intArray41);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray29, intArray41);
        double[] doubleArray50 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray57 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray64 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray71 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray72 = new double[][] { doubleArray50, doubleArray57, doubleArray64, doubleArray71 };
        double[][] doubleArray73 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray72);
        double[] doubleArray75 = new double[] { 1 };
        double[] doubleArray77 = new double[] { 1 };
        double[] doubleArray79 = new double[] { 1 };
        double[] doubleArray81 = new double[] { 1 };
        double[] doubleArray83 = new double[] { 1 };
        double[][] doubleArray84 = new double[][] { doubleArray75, doubleArray77, doubleArray79, doubleArray81, doubleArray83 };
        int[] intArray85 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray84, intArray85);
        double[][] doubleArray87 = new double[][] {};
        double[][] doubleArray88 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray87);
        int[] intArray89 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray88, intArray89);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray84, intArray89);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray72, intArray89);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray29, intArray89);
        double[][] doubleArray94 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray29);
        double[][] doubleArray95 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray29);
        double[][] doubleArray96 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray29);
        double[][] doubleArray97 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray96);
        double[][] doubleArray98 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray96);
        java.lang.Class<?> wildcardClass99 = doubleArray98.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[]");
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray71), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray75), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray77), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray79), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray81), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray83), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray84);
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray85), "[]");
        org.junit.Assert.assertNotNull(doubleArray87);
        org.junit.Assert.assertNotNull(doubleArray88);
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray89), "[]");
        org.junit.Assert.assertNotNull(doubleArray94);
        org.junit.Assert.assertNotNull(doubleArray95);
        org.junit.Assert.assertNotNull(doubleArray96);
        org.junit.Assert.assertNotNull(doubleArray97);
        org.junit.Assert.assertNotNull(doubleArray98);
        org.junit.Assert.assertNotNull(wildcardClass99);
    }

    @Test
    public void test0730() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0730");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = new double[][] {};
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[] doubleArray8 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray12 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray16 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray20 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray21 = new double[][] { doubleArray8, doubleArray12, doubleArray16, doubleArray20 };
        double[] doubleArray23 = new double[] { 1 };
        double[] doubleArray25 = new double[] { 1 };
        double[] doubleArray27 = new double[] { 1 };
        double[] doubleArray29 = new double[] { 1 };
        double[] doubleArray31 = new double[] { 1 };
        double[][] doubleArray32 = new double[][] { doubleArray23, doubleArray25, doubleArray27, doubleArray29, doubleArray31 };
        int[] intArray33 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray32, intArray33);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray21, intArray33);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray3, intArray33);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray1, intArray33);
        double[][] doubleArray38 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray39 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray38);
        double[][] doubleArray40 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray39);
        double[][] doubleArray41 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray39);
        double[][] doubleArray42 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray41);
        double[][] doubleArray43 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray41);
        double[][] doubleArray44 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray43);
        double[][] doubleArray45 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray44);
        double[][] doubleArray46 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray45);
        java.lang.Class<?> wildcardClass47 = doubleArray45.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertNotNull(wildcardClass47);
    }

    @Test
    public void test0731() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0731");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[][] doubleArray5 = null;
        double[][] doubleArray6 = new double[][] {};
        double[][] doubleArray7 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray6);
        double[][] doubleArray8 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray7);
        double[] doubleArray12 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray16 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray20 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray24 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray25 = new double[][] { doubleArray12, doubleArray16, doubleArray20, doubleArray24 };
        double[] doubleArray27 = new double[] { 1 };
        double[] doubleArray29 = new double[] { 1 };
        double[] doubleArray31 = new double[] { 1 };
        double[] doubleArray33 = new double[] { 1 };
        double[] doubleArray35 = new double[] { 1 };
        double[][] doubleArray36 = new double[][] { doubleArray27, doubleArray29, doubleArray31, doubleArray33, doubleArray35 };
        int[] intArray37 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray36, intArray37);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray25, intArray37);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray8, intArray37);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray5, intArray37);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray3, intArray37);
        double[][] doubleArray43 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[][] doubleArray44 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray43);
        double[][] doubleArray45 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray44);
        double[][] doubleArray46 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray45);
        java.lang.Class<?> wildcardClass47 = doubleArray46.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertNotNull(wildcardClass47);
    }

    @Test
    public void test0732() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0732");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray5 = new double[][] {};
        double[][] doubleArray6 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray5);
        double[] doubleArray8 = new double[] { 1 };
        double[] doubleArray10 = new double[] { 1 };
        double[] doubleArray12 = new double[] { 1 };
        double[] doubleArray14 = new double[] { 1 };
        double[] doubleArray16 = new double[] { 1 };
        double[][] doubleArray17 = new double[][] { doubleArray8, doubleArray10, doubleArray12, doubleArray14, doubleArray16 };
        int[] intArray18 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray17, intArray18);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray5, intArray18);
        double[] doubleArray24 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray28 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray32 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray36 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray37 = new double[][] { doubleArray24, doubleArray28, doubleArray32, doubleArray36 };
        double[] doubleArray39 = new double[] { 1 };
        double[] doubleArray41 = new double[] { 1 };
        double[] doubleArray43 = new double[] { 1 };
        double[] doubleArray45 = new double[] { 1 };
        double[] doubleArray47 = new double[] { 1 };
        double[][] doubleArray48 = new double[][] { doubleArray39, doubleArray41, doubleArray43, doubleArray45, doubleArray47 };
        int[] intArray49 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray48, intArray49);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray37, intArray49);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray5, intArray49);
        double[] doubleArray54 = new double[] { 1 };
        double[] doubleArray56 = new double[] { 1 };
        double[] doubleArray58 = new double[] { 1 };
        double[] doubleArray60 = new double[] { 1 };
        double[] doubleArray62 = new double[] { 1 };
        double[][] doubleArray63 = new double[][] { doubleArray54, doubleArray56, doubleArray58, doubleArray60, doubleArray62 };
        int[] intArray64 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray63, intArray64);
        double[][] doubleArray66 = new double[][] {};
        double[][] doubleArray67 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray66);
        int[] intArray68 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray67, intArray68);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray63, intArray68);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray5, intArray68);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray0, intArray68);
        double[][] doubleArray73 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        java.lang.Class<?> wildcardClass74 = doubleArray73.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[]");
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[]");
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[]");
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[]");
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertNotNull(wildcardClass74);
    }

    @Test
    public void test0733() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0733");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray5 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray4);
        double[][] doubleArray6 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray4);
        double[][] doubleArray7 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray6);
        double[][] doubleArray8 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray7);
        java.lang.Class<?> wildcardClass9 = doubleArray8.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void test0734() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0734");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray30 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray31 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray32 = new double[][] {};
        double[][] doubleArray33 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray32);
        int[] intArray34 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray33, intArray34);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray31, intArray34);
        double[][] doubleArray37 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray31);
        double[][] doubleArray38 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray37);
        double[][] doubleArray39 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray38);
        double[][] doubleArray40 = new double[][] {};
        double[][] doubleArray41 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray40);
        double[][] doubleArray42 = new double[][] {};
        double[][] doubleArray43 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray42);
        double[][] doubleArray44 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray43);
        double[] doubleArray48 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray52 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray56 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray60 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray61 = new double[][] { doubleArray48, doubleArray52, doubleArray56, doubleArray60 };
        double[] doubleArray63 = new double[] { 1 };
        double[] doubleArray65 = new double[] { 1 };
        double[] doubleArray67 = new double[] { 1 };
        double[] doubleArray69 = new double[] { 1 };
        double[] doubleArray71 = new double[] { 1 };
        double[][] doubleArray72 = new double[][] { doubleArray63, doubleArray65, doubleArray67, doubleArray69, doubleArray71 };
        int[] intArray73 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray72, intArray73);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray61, intArray73);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray43, intArray73);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray41, intArray73);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray39, intArray73);
        java.lang.Class<?> wildcardClass79 = intArray73.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray71), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[]");
        org.junit.Assert.assertNotNull(wildcardClass79);
    }

    @Test
    public void test0735() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0735");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = new double[][] {};
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[][] doubleArray5 = new double[][] {};
        double[][] doubleArray6 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray5);
        double[][] doubleArray7 = new double[][] {};
        double[][] doubleArray8 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray7);
        double[] doubleArray10 = new double[] { 1 };
        double[] doubleArray12 = new double[] { 1 };
        double[] doubleArray14 = new double[] { 1 };
        double[] doubleArray16 = new double[] { 1 };
        double[] doubleArray18 = new double[] { 1 };
        double[][] doubleArray19 = new double[][] { doubleArray10, doubleArray12, doubleArray14, doubleArray16, doubleArray18 };
        int[] intArray20 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray19, intArray20);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray7, intArray20);
        double[] doubleArray26 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray30 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray34 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray38 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray39 = new double[][] { doubleArray26, doubleArray30, doubleArray34, doubleArray38 };
        double[] doubleArray41 = new double[] { 1 };
        double[] doubleArray43 = new double[] { 1 };
        double[] doubleArray45 = new double[] { 1 };
        double[] doubleArray47 = new double[] { 1 };
        double[] doubleArray49 = new double[] { 1 };
        double[][] doubleArray50 = new double[][] { doubleArray41, doubleArray43, doubleArray45, doubleArray47, doubleArray49 };
        int[] intArray51 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray50, intArray51);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray39, intArray51);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray7, intArray51);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray6, intArray51);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray4, intArray51);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray1, intArray51);
        double[][] doubleArray58 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray59 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray58);
        java.lang.Class<?> wildcardClass60 = doubleArray58.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[]");
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[]");
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertNotNull(wildcardClass60);
    }

    @Test
    public void test0736() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0736");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray30 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray29);
        double[][] doubleArray31 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        double[][] doubleArray32 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        double[][] doubleArray33 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        double[][] doubleArray34 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        double[][] doubleArray35 = new double[][] {};
        double[][] doubleArray36 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray35);
        int[] intArray37 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray36, intArray37);
        double[][] doubleArray39 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray36);
        double[][] doubleArray40 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray36);
        double[][] doubleArray41 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray40);
        double[][] doubleArray42 = new double[][] {};
        double[][] doubleArray43 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray42);
        double[][] doubleArray44 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray42);
        double[][] doubleArray45 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray42);
        double[][] doubleArray46 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray45);
        double[] doubleArray48 = new double[] { 1 };
        double[] doubleArray50 = new double[] { 1 };
        double[] doubleArray52 = new double[] { 1 };
        double[] doubleArray54 = new double[] { 1 };
        double[] doubleArray56 = new double[] { 1 };
        double[][] doubleArray57 = new double[][] { doubleArray48, doubleArray50, doubleArray52, doubleArray54, doubleArray56 };
        int[] intArray58 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray57, intArray58);
        double[][] doubleArray60 = new double[][] {};
        double[][] doubleArray61 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray60);
        int[] intArray62 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray61, intArray62);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray57, intArray62);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray45, intArray62);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray40, intArray62);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray34, intArray62);
        java.lang.Class<?> wildcardClass68 = intArray62.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[]");
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[]");
        org.junit.Assert.assertNotNull(wildcardClass68);
    }

    @Test
    public void test0737() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0737");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray30 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray29);
        double[][] doubleArray31 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray29);
        double[][] doubleArray32 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray31);
        double[][] doubleArray33 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray32);
        double[][] doubleArray34 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray32);
        java.lang.Class<?> wildcardClass35 = doubleArray32.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertNotNull(wildcardClass35);
    }

    @Test
    public void test0738() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0738");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray5 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray4);
        double[][] doubleArray6 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray5);
        java.lang.Class<?> wildcardClass7 = doubleArray5.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(wildcardClass7);
    }

    @Test
    public void test0739() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0739");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = new double[][] {};
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[] doubleArray8 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray12 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray16 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray20 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray21 = new double[][] { doubleArray8, doubleArray12, doubleArray16, doubleArray20 };
        double[] doubleArray23 = new double[] { 1 };
        double[] doubleArray25 = new double[] { 1 };
        double[] doubleArray27 = new double[] { 1 };
        double[] doubleArray29 = new double[] { 1 };
        double[] doubleArray31 = new double[] { 1 };
        double[][] doubleArray32 = new double[][] { doubleArray23, doubleArray25, doubleArray27, doubleArray29, doubleArray31 };
        int[] intArray33 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray32, intArray33);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray21, intArray33);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray3, intArray33);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray1, intArray33);
        double[][] doubleArray38 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray39 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray38);
        double[] doubleArray41 = new double[] { 1 };
        double[] doubleArray43 = new double[] { 1 };
        double[] doubleArray45 = new double[] { 1 };
        double[] doubleArray47 = new double[] { 1 };
        double[] doubleArray49 = new double[] { 1 };
        double[][] doubleArray50 = new double[][] { doubleArray41, doubleArray43, doubleArray45, doubleArray47, doubleArray49 };
        int[] intArray51 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray50, intArray51);
        double[][] doubleArray53 = new double[][] {};
        double[][] doubleArray54 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray53);
        int[] intArray55 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray54, intArray55);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray50, intArray55);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray38, intArray55);
        double[][] doubleArray59 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray38);
        double[][] doubleArray60 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray38);
        double[][] doubleArray61 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray38);
        java.lang.Class<?> wildcardClass62 = doubleArray61.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[]");
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[]");
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertNotNull(wildcardClass62);
    }

    @Test
    public void test0740() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0740");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = new double[][] {};
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[] doubleArray5 = new double[] { 1 };
        double[] doubleArray7 = new double[] { 1 };
        double[] doubleArray9 = new double[] { 1 };
        double[] doubleArray11 = new double[] { 1 };
        double[] doubleArray13 = new double[] { 1 };
        double[][] doubleArray14 = new double[][] { doubleArray5, doubleArray7, doubleArray9, doubleArray11, doubleArray13 };
        int[] intArray15 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray14, intArray15);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray2, intArray15);
        double[] doubleArray21 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray25 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray29 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray33 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray34 = new double[][] { doubleArray21, doubleArray25, doubleArray29, doubleArray33 };
        double[] doubleArray36 = new double[] { 1 };
        double[] doubleArray38 = new double[] { 1 };
        double[] doubleArray40 = new double[] { 1 };
        double[] doubleArray42 = new double[] { 1 };
        double[] doubleArray44 = new double[] { 1 };
        double[][] doubleArray45 = new double[][] { doubleArray36, doubleArray38, doubleArray40, doubleArray42, doubleArray44 };
        int[] intArray46 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray45, intArray46);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray34, intArray46);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray2, intArray46);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray1, intArray46);
        double[][] doubleArray51 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray52 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray51);
        double[][] doubleArray53 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray52);
        double[][] doubleArray54 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray52);
        double[][] doubleArray55 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray54);
        double[][] doubleArray56 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray54);
        double[][] doubleArray57 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray56);
        java.lang.Class<?> wildcardClass58 = doubleArray57.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertNotNull(wildcardClass58);
    }

    @Test
    public void test0741() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0741");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray30 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray31 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[] doubleArray33 = new double[] { 1 };
        double[] doubleArray35 = new double[] { 1 };
        double[] doubleArray37 = new double[] { 1 };
        double[] doubleArray39 = new double[] { 1 };
        double[] doubleArray41 = new double[] { 1 };
        double[][] doubleArray42 = new double[][] { doubleArray33, doubleArray35, doubleArray37, doubleArray39, doubleArray41 };
        int[] intArray43 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray42, intArray43);
        double[] doubleArray51 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray58 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray65 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray72 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray73 = new double[][] { doubleArray51, doubleArray58, doubleArray65, doubleArray72 };
        double[][] doubleArray74 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray73);
        double[] doubleArray76 = new double[] { 1 };
        double[] doubleArray78 = new double[] { 1 };
        double[] doubleArray80 = new double[] { 1 };
        double[] doubleArray82 = new double[] { 1 };
        double[] doubleArray84 = new double[] { 1 };
        double[][] doubleArray85 = new double[][] { doubleArray76, doubleArray78, doubleArray80, doubleArray82, doubleArray84 };
        int[] intArray86 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray85, intArray86);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray74, intArray86);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray42, intArray86);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray31, intArray86);
        double[][] doubleArray91 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray31);
        double[][] doubleArray92 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray91);
        java.lang.Class<?> wildcardClass93 = doubleArray91.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray78), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray80), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray82), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray84), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray85);
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray86), "[]");
        org.junit.Assert.assertNotNull(doubleArray91);
        org.junit.Assert.assertNotNull(doubleArray92);
        org.junit.Assert.assertNotNull(wildcardClass93);
    }

    @Test
    public void test0742() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0742");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray30 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray31 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray32 = new double[][] {};
        double[][] doubleArray33 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray32);
        double[][] doubleArray34 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray33);
        double[][] doubleArray35 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray33);
        double[][] doubleArray36 = new double[][] {};
        double[][] doubleArray37 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray36);
        double[][] doubleArray38 = new double[][] {};
        double[][] doubleArray39 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray38);
        double[] doubleArray41 = new double[] { 1 };
        double[] doubleArray43 = new double[] { 1 };
        double[] doubleArray45 = new double[] { 1 };
        double[] doubleArray47 = new double[] { 1 };
        double[] doubleArray49 = new double[] { 1 };
        double[][] doubleArray50 = new double[][] { doubleArray41, doubleArray43, doubleArray45, doubleArray47, doubleArray49 };
        int[] intArray51 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray50, intArray51);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray38, intArray51);
        double[] doubleArray57 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray61 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray65 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray69 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray70 = new double[][] { doubleArray57, doubleArray61, doubleArray65, doubleArray69 };
        double[] doubleArray72 = new double[] { 1 };
        double[] doubleArray74 = new double[] { 1 };
        double[] doubleArray76 = new double[] { 1 };
        double[] doubleArray78 = new double[] { 1 };
        double[] doubleArray80 = new double[] { 1 };
        double[][] doubleArray81 = new double[][] { doubleArray72, doubleArray74, doubleArray76, doubleArray78, doubleArray80 };
        int[] intArray82 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray81, intArray82);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray70, intArray82);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray38, intArray82);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray36, intArray82);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray33, intArray82);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray31, intArray82);
        double[][] doubleArray89 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray31);
        java.lang.Class<?> wildcardClass90 = doubleArray31.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[]");
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray74), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray78), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray80), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray81);
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[]");
        org.junit.Assert.assertNotNull(doubleArray89);
        org.junit.Assert.assertNotNull(wildcardClass90);
    }

    @Test
    public void test0743() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0743");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray30 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray31 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray32 = new double[][] {};
        double[][] doubleArray33 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray32);
        double[][] doubleArray34 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray33);
        double[][] doubleArray35 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray33);
        double[][] doubleArray36 = new double[][] {};
        double[][] doubleArray37 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray36);
        double[][] doubleArray38 = new double[][] {};
        double[][] doubleArray39 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray38);
        double[] doubleArray41 = new double[] { 1 };
        double[] doubleArray43 = new double[] { 1 };
        double[] doubleArray45 = new double[] { 1 };
        double[] doubleArray47 = new double[] { 1 };
        double[] doubleArray49 = new double[] { 1 };
        double[][] doubleArray50 = new double[][] { doubleArray41, doubleArray43, doubleArray45, doubleArray47, doubleArray49 };
        int[] intArray51 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray50, intArray51);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray38, intArray51);
        double[] doubleArray57 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray61 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray65 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray69 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray70 = new double[][] { doubleArray57, doubleArray61, doubleArray65, doubleArray69 };
        double[] doubleArray72 = new double[] { 1 };
        double[] doubleArray74 = new double[] { 1 };
        double[] doubleArray76 = new double[] { 1 };
        double[] doubleArray78 = new double[] { 1 };
        double[] doubleArray80 = new double[] { 1 };
        double[][] doubleArray81 = new double[][] { doubleArray72, doubleArray74, doubleArray76, doubleArray78, doubleArray80 };
        int[] intArray82 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray81, intArray82);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray70, intArray82);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray38, intArray82);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray36, intArray82);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray33, intArray82);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray31, intArray82);
        double[][] doubleArray89 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray31);
        double[][] doubleArray90 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray89);
        double[][] doubleArray91 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray89);
        java.lang.Class<?> wildcardClass92 = doubleArray91.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[]");
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray74), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray78), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray80), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray81);
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[]");
        org.junit.Assert.assertNotNull(doubleArray89);
        org.junit.Assert.assertNotNull(doubleArray90);
        org.junit.Assert.assertNotNull(doubleArray91);
        org.junit.Assert.assertNotNull(wildcardClass92);
    }

    @Test
    public void test0744() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0744");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[] doubleArray3 = new double[] { 1 };
        double[] doubleArray5 = new double[] { 1 };
        double[] doubleArray7 = new double[] { 1 };
        double[] doubleArray9 = new double[] { 1 };
        double[] doubleArray11 = new double[] { 1 };
        double[][] doubleArray12 = new double[][] { doubleArray3, doubleArray5, doubleArray7, doubleArray9, doubleArray11 };
        int[] intArray13 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray12, intArray13);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray0, intArray13);
        double[][] doubleArray16 = new double[][] {};
        double[][] doubleArray17 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray16);
        double[][] doubleArray18 = new double[][] {};
        double[][] doubleArray19 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray18);
        double[] doubleArray21 = new double[] { 1 };
        double[] doubleArray23 = new double[] { 1 };
        double[] doubleArray25 = new double[] { 1 };
        double[] doubleArray27 = new double[] { 1 };
        double[] doubleArray29 = new double[] { 1 };
        double[][] doubleArray30 = new double[][] { doubleArray21, doubleArray23, doubleArray25, doubleArray27, doubleArray29 };
        int[] intArray31 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray30, intArray31);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray18, intArray31);
        double[] doubleArray37 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray41 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray45 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray49 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray50 = new double[][] { doubleArray37, doubleArray41, doubleArray45, doubleArray49 };
        double[] doubleArray52 = new double[] { 1 };
        double[] doubleArray54 = new double[] { 1 };
        double[] doubleArray56 = new double[] { 1 };
        double[] doubleArray58 = new double[] { 1 };
        double[] doubleArray60 = new double[] { 1 };
        double[][] doubleArray61 = new double[][] { doubleArray52, doubleArray54, doubleArray56, doubleArray58, doubleArray60 };
        int[] intArray62 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray61, intArray62);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray50, intArray62);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray18, intArray62);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray17, intArray62);
        double[] doubleArray68 = new double[] { 1 };
        double[] doubleArray70 = new double[] { 1 };
        double[] doubleArray72 = new double[] { 1 };
        double[] doubleArray74 = new double[] { 1 };
        double[] doubleArray76 = new double[] { 1 };
        double[][] doubleArray77 = new double[][] { doubleArray68, doubleArray70, doubleArray72, doubleArray74, doubleArray76 };
        int[] intArray78 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray77, intArray78);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray17, intArray78);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray0, intArray78);
        double[][] doubleArray82 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray83 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        java.lang.Class<?> wildcardClass84 = doubleArray83.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[]");
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray70), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray74), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[]");
        org.junit.Assert.assertNotNull(doubleArray82);
        org.junit.Assert.assertNotNull(doubleArray83);
        org.junit.Assert.assertNotNull(wildcardClass84);
    }

    @Test
    public void test0745() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0745");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[] doubleArray3 = new double[] { 1 };
        double[] doubleArray5 = new double[] { 1 };
        double[] doubleArray7 = new double[] { 1 };
        double[] doubleArray9 = new double[] { 1 };
        double[] doubleArray11 = new double[] { 1 };
        double[][] doubleArray12 = new double[][] { doubleArray3, doubleArray5, doubleArray7, doubleArray9, doubleArray11 };
        int[] intArray13 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray12, intArray13);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray0, intArray13);
        double[][] doubleArray16 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray17 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray16);
        double[][] doubleArray18 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray17);
        double[][] doubleArray19 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray18);
        double[][] doubleArray20 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray18);
        java.lang.Class<?> wildcardClass21 = doubleArray20.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertNotNull(wildcardClass21);
    }

    @Test
    public void test0746() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0746");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[] doubleArray6 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray10 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray14 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray18 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray19 = new double[][] { doubleArray6, doubleArray10, doubleArray14, doubleArray18 };
        double[] doubleArray21 = new double[] { 1 };
        double[] doubleArray23 = new double[] { 1 };
        double[] doubleArray25 = new double[] { 1 };
        double[] doubleArray27 = new double[] { 1 };
        double[] doubleArray29 = new double[] { 1 };
        double[][] doubleArray30 = new double[][] { doubleArray21, doubleArray23, doubleArray25, doubleArray27, doubleArray29 };
        int[] intArray31 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray30, intArray31);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray19, intArray31);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray2, intArray31);
        double[][] doubleArray35 = null;
        double[] doubleArray37 = new double[] { 1 };
        double[] doubleArray39 = new double[] { 1 };
        double[] doubleArray41 = new double[] { 1 };
        double[] doubleArray43 = new double[] { 1 };
        double[] doubleArray45 = new double[] { 1 };
        double[][] doubleArray46 = new double[][] { doubleArray37, doubleArray39, doubleArray41, doubleArray43, doubleArray45 };
        int[] intArray47 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray46, intArray47);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray35, intArray47);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray2, intArray47);
        double[][] doubleArray51 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray52 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        java.lang.Class<?> wildcardClass53 = doubleArray2.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertNotNull(wildcardClass53);
    }

    @Test
    public void test0747() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0747");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[] doubleArray8 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray15 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray22 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray29 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray30 = new double[][] { doubleArray8, doubleArray15, doubleArray22, doubleArray29 };
        double[][] doubleArray31 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        double[][] doubleArray32 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        double[][] doubleArray33 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        double[][] doubleArray34 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray33);
        double[] doubleArray41 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray48 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray55 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray62 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray63 = new double[][] { doubleArray41, doubleArray48, doubleArray55, doubleArray62 };
        double[][] doubleArray64 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray63);
        double[] doubleArray66 = new double[] { 1 };
        double[] doubleArray68 = new double[] { 1 };
        double[] doubleArray70 = new double[] { 1 };
        double[] doubleArray72 = new double[] { 1 };
        double[] doubleArray74 = new double[] { 1 };
        double[][] doubleArray75 = new double[][] { doubleArray66, doubleArray68, doubleArray70, doubleArray72, doubleArray74 };
        int[] intArray76 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray75, intArray76);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray64, intArray76);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray34, intArray76);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray1, intArray76);
        double[][] doubleArray81 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        int[] intArray82 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray1, intArray82);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray66), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray70), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray74), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[]");
        org.junit.Assert.assertNotNull(doubleArray81);
    }

    @Test
    public void test0748() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0748");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray3 = new double[][] {};
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[][] doubleArray5 = new double[][] {};
        double[][] doubleArray6 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray5);
        double[] doubleArray8 = new double[] { 1 };
        double[] doubleArray10 = new double[] { 1 };
        double[] doubleArray12 = new double[] { 1 };
        double[] doubleArray14 = new double[] { 1 };
        double[] doubleArray16 = new double[] { 1 };
        double[][] doubleArray17 = new double[][] { doubleArray8, doubleArray10, doubleArray12, doubleArray14, doubleArray16 };
        int[] intArray18 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray17, intArray18);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray5, intArray18);
        double[] doubleArray24 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray28 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray32 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray36 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray37 = new double[][] { doubleArray24, doubleArray28, doubleArray32, doubleArray36 };
        double[] doubleArray39 = new double[] { 1 };
        double[] doubleArray41 = new double[] { 1 };
        double[] doubleArray43 = new double[] { 1 };
        double[] doubleArray45 = new double[] { 1 };
        double[] doubleArray47 = new double[] { 1 };
        double[][] doubleArray48 = new double[][] { doubleArray39, doubleArray41, doubleArray43, doubleArray45, doubleArray47 };
        int[] intArray49 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray48, intArray49);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray37, intArray49);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray5, intArray49);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray4, intArray49);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray2, intArray49);
        double[][] doubleArray55 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray56 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray55);
        double[][] doubleArray57 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray55);
        double[][] doubleArray58 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray57);
        double[][] doubleArray59 = new double[][] {};
        double[][] doubleArray60 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray59);
        double[][] doubleArray61 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray60);
        double[] doubleArray65 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray69 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray73 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray77 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray78 = new double[][] { doubleArray65, doubleArray69, doubleArray73, doubleArray77 };
        double[] doubleArray80 = new double[] { 1 };
        double[] doubleArray82 = new double[] { 1 };
        double[] doubleArray84 = new double[] { 1 };
        double[] doubleArray86 = new double[] { 1 };
        double[] doubleArray88 = new double[] { 1 };
        double[][] doubleArray89 = new double[][] { doubleArray80, doubleArray82, doubleArray84, doubleArray86, doubleArray88 };
        int[] intArray90 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray89, intArray90);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray78, intArray90);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray61, intArray90);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray57, intArray90);
        double[][] doubleArray95 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray57);
        double[][] doubleArray96 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray57);
        int[] intArray97 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray96, intArray97);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[]");
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[]");
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray73), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray77), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray80), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray82), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray84), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray86), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray88), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray89);
        org.junit.Assert.assertNotNull(intArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray90), "[]");
        org.junit.Assert.assertNotNull(doubleArray95);
        org.junit.Assert.assertNotNull(doubleArray96);
    }

    @Test
    public void test0749() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0749");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[][] doubleArray5 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[][] doubleArray6 = new double[][] {};
        double[][] doubleArray7 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray6);
        double[][] doubleArray8 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray7);
        double[] doubleArray15 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray22 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray29 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray36 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray37 = new double[][] { doubleArray15, doubleArray22, doubleArray29, doubleArray36 };
        double[][] doubleArray38 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray37);
        double[] doubleArray40 = new double[] { 1 };
        double[] doubleArray42 = new double[] { 1 };
        double[] doubleArray44 = new double[] { 1 };
        double[] doubleArray46 = new double[] { 1 };
        double[] doubleArray48 = new double[] { 1 };
        double[][] doubleArray49 = new double[][] { doubleArray40, doubleArray42, doubleArray44, doubleArray46, doubleArray48 };
        int[] intArray50 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray49, intArray50);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray38, intArray50);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray7, intArray50);
        double[] doubleArray57 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray61 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray65 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray69 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray70 = new double[][] { doubleArray57, doubleArray61, doubleArray65, doubleArray69 };
        double[] doubleArray72 = new double[] { 1 };
        double[] doubleArray74 = new double[] { 1 };
        double[] doubleArray76 = new double[] { 1 };
        double[] doubleArray78 = new double[] { 1 };
        double[] doubleArray80 = new double[] { 1 };
        double[][] doubleArray81 = new double[][] { doubleArray72, doubleArray74, doubleArray76, doubleArray78, doubleArray80 };
        int[] intArray82 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray81, intArray82);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray70, intArray82);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray7, intArray82);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray3, intArray82);
        double[][] doubleArray87 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[][] doubleArray88 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray87);
        double[][] doubleArray89 = null;
        double[][] doubleArray90 = new double[][] {};
        double[][] doubleArray91 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray90);
        int[] intArray92 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray91, intArray92);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray89, intArray92);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray87, intArray92);
        java.lang.Class<?> wildcardClass96 = doubleArray87.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[]");
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray74), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray78), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray80), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray81);
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[]");
        org.junit.Assert.assertNotNull(doubleArray87);
        org.junit.Assert.assertNotNull(doubleArray88);
        org.junit.Assert.assertNotNull(doubleArray90);
        org.junit.Assert.assertNotNull(doubleArray91);
        org.junit.Assert.assertNotNull(intArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray92), "[]");
        org.junit.Assert.assertNotNull(wildcardClass96);
    }

    @Test
    public void test0750() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0750");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray3 = new double[][] {};
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[][] doubleArray5 = new double[][] {};
        double[][] doubleArray6 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray5);
        double[] doubleArray8 = new double[] { 1 };
        double[] doubleArray10 = new double[] { 1 };
        double[] doubleArray12 = new double[] { 1 };
        double[] doubleArray14 = new double[] { 1 };
        double[] doubleArray16 = new double[] { 1 };
        double[][] doubleArray17 = new double[][] { doubleArray8, doubleArray10, doubleArray12, doubleArray14, doubleArray16 };
        int[] intArray18 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray17, intArray18);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray5, intArray18);
        double[] doubleArray24 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray28 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray32 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray36 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray37 = new double[][] { doubleArray24, doubleArray28, doubleArray32, doubleArray36 };
        double[] doubleArray39 = new double[] { 1 };
        double[] doubleArray41 = new double[] { 1 };
        double[] doubleArray43 = new double[] { 1 };
        double[] doubleArray45 = new double[] { 1 };
        double[] doubleArray47 = new double[] { 1 };
        double[][] doubleArray48 = new double[][] { doubleArray39, doubleArray41, doubleArray43, doubleArray45, doubleArray47 };
        int[] intArray49 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray48, intArray49);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray37, intArray49);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray5, intArray49);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray4, intArray49);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray2, intArray49);
        double[][] doubleArray55 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray56 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray55);
        double[][] doubleArray57 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray55);
        double[][] doubleArray58 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray57);
        double[][] doubleArray59 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray58);
        double[][] doubleArray60 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray59);
        double[][] doubleArray61 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray59);
        double[][] doubleArray62 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray61);
        java.lang.Class<?> wildcardClass63 = doubleArray62.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[]");
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[]");
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertNotNull(wildcardClass63);
    }

    @Test
    public void test0751() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0751");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray30 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray29);
        double[][] doubleArray31 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        double[][] doubleArray32 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        double[][] doubleArray33 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        double[][] doubleArray34 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        double[] doubleArray36 = new double[] { 1 };
        double[] doubleArray38 = new double[] { 1 };
        double[] doubleArray40 = new double[] { 1 };
        double[] doubleArray42 = new double[] { 1 };
        double[] doubleArray44 = new double[] { 1 };
        double[][] doubleArray45 = new double[][] { doubleArray36, doubleArray38, doubleArray40, doubleArray42, doubleArray44 };
        int[] intArray46 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray45, intArray46);
        double[][] doubleArray48 = new double[][] {};
        double[][] doubleArray49 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray48);
        int[] intArray50 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray49, intArray50);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray45, intArray50);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray34, intArray50);
        double[][] doubleArray54 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray34);
        java.lang.Class<?> wildcardClass55 = doubleArray54.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[]");
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertNotNull(wildcardClass55);
    }

    @Test
    public void test0752() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0752");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[] doubleArray3 = new double[] { 1 };
        double[] doubleArray5 = new double[] { 1 };
        double[] doubleArray7 = new double[] { 1 };
        double[] doubleArray9 = new double[] { 1 };
        double[] doubleArray11 = new double[] { 1 };
        double[][] doubleArray12 = new double[][] { doubleArray3, doubleArray5, doubleArray7, doubleArray9, doubleArray11 };
        int[] intArray13 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray12, intArray13);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray0, intArray13);
        double[] doubleArray19 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray23 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray27 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray31 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray32 = new double[][] { doubleArray19, doubleArray23, doubleArray27, doubleArray31 };
        double[] doubleArray34 = new double[] { 1 };
        double[] doubleArray36 = new double[] { 1 };
        double[] doubleArray38 = new double[] { 1 };
        double[] doubleArray40 = new double[] { 1 };
        double[] doubleArray42 = new double[] { 1 };
        double[][] doubleArray43 = new double[][] { doubleArray34, doubleArray36, doubleArray38, doubleArray40, doubleArray42 };
        int[] intArray44 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray43, intArray44);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray32, intArray44);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray0, intArray44);
        double[][] doubleArray48 = new double[][] {};
        double[][] doubleArray49 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray48);
        double[] doubleArray51 = new double[] { 1 };
        double[] doubleArray53 = new double[] { 1 };
        double[] doubleArray55 = new double[] { 1 };
        double[] doubleArray57 = new double[] { 1 };
        double[] doubleArray59 = new double[] { 1 };
        double[][] doubleArray60 = new double[][] { doubleArray51, doubleArray53, doubleArray55, doubleArray57, doubleArray59 };
        int[] intArray61 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray60, intArray61);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray48, intArray61);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray0, intArray61);
        double[][] doubleArray65 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray66 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray67 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray66);
        double[][] doubleArray68 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray66);
        java.lang.Class<?> wildcardClass69 = doubleArray66.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[]");
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertNotNull(wildcardClass69);
    }

    @Test
    public void test0753() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0753");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[] doubleArray31 = new double[] { 1 };
        double[] doubleArray33 = new double[] { 1 };
        double[] doubleArray35 = new double[] { 1 };
        double[] doubleArray37 = new double[] { 1 };
        double[] doubleArray39 = new double[] { 1 };
        double[][] doubleArray40 = new double[][] { doubleArray31, doubleArray33, doubleArray35, doubleArray37, doubleArray39 };
        int[] intArray41 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray40, intArray41);
        double[][] doubleArray43 = new double[][] {};
        double[][] doubleArray44 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray43);
        int[] intArray45 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray44, intArray45);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray40, intArray45);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray28, intArray45);
        double[][] doubleArray49 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray50 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray51 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray50);
        double[][] doubleArray52 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray50);
        double[][] doubleArray53 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray52);
        double[][] doubleArray54 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray52);
        double[][] doubleArray55 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray54);
        java.lang.Class<?> wildcardClass56 = doubleArray55.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertNotNull(wildcardClass56);
    }

    @Test
    public void test0754() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0754");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[] doubleArray9 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray16 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray23 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray30 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray31 = new double[][] { doubleArray9, doubleArray16, doubleArray23, doubleArray30 };
        double[][] doubleArray32 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray31);
        double[][] doubleArray33 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray31);
        double[][] doubleArray34 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray31);
        double[][] doubleArray35 = new double[][] {};
        double[][] doubleArray36 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray35);
        int[] intArray37 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray36, intArray37);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray34, intArray37);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray2, intArray37);
        double[][] doubleArray41 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        java.lang.Class<?> wildcardClass42 = doubleArray41.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertNotNull(wildcardClass42);
    }

    @Test
    public void test0755() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0755");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[][] doubleArray5 = null;
        double[][] doubleArray6 = new double[][] {};
        double[][] doubleArray7 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray6);
        double[][] doubleArray8 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray7);
        double[] doubleArray12 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray16 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray20 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray24 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray25 = new double[][] { doubleArray12, doubleArray16, doubleArray20, doubleArray24 };
        double[] doubleArray27 = new double[] { 1 };
        double[] doubleArray29 = new double[] { 1 };
        double[] doubleArray31 = new double[] { 1 };
        double[] doubleArray33 = new double[] { 1 };
        double[] doubleArray35 = new double[] { 1 };
        double[][] doubleArray36 = new double[][] { doubleArray27, doubleArray29, doubleArray31, doubleArray33, doubleArray35 };
        int[] intArray37 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray36, intArray37);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray25, intArray37);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray8, intArray37);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray5, intArray37);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray3, intArray37);
        double[][] doubleArray43 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[][] doubleArray44 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray43);
        double[][] doubleArray45 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray44);
        double[][] doubleArray46 = new double[][] {};
        double[][] doubleArray47 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray46);
        double[][] doubleArray48 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray46);
        double[][] doubleArray49 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray46);
        double[][] doubleArray50 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray46);
        double[][] doubleArray51 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray50);
        double[][] doubleArray52 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray50);
        double[][] doubleArray53 = new double[][] {};
        double[][] doubleArray54 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray53);
        int[] intArray55 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray54, intArray55);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray52, intArray55);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray45, intArray55);
        double[][] doubleArray59 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray45);
        java.lang.Class<?> wildcardClass60 = doubleArray59.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[]");
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertNotNull(wildcardClass60);
    }

    @Test
    public void test0756() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0756");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray30 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray29);
        double[][] doubleArray31 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        double[][] doubleArray32 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray31);
        double[][] doubleArray33 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray32);
        java.lang.Class<?> wildcardClass34 = doubleArray32.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertNotNull(wildcardClass34);
    }

    @Test
    public void test0757() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0757");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[] doubleArray31 = new double[] { 1 };
        double[] doubleArray33 = new double[] { 1 };
        double[] doubleArray35 = new double[] { 1 };
        double[] doubleArray37 = new double[] { 1 };
        double[] doubleArray39 = new double[] { 1 };
        double[][] doubleArray40 = new double[][] { doubleArray31, doubleArray33, doubleArray35, doubleArray37, doubleArray39 };
        int[] intArray41 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray40, intArray41);
        double[][] doubleArray43 = new double[][] {};
        double[][] doubleArray44 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray43);
        int[] intArray45 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray44, intArray45);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray40, intArray45);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray28, intArray45);
        double[][] doubleArray49 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray50 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray51 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray52 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray51);
        java.lang.Class<?> wildcardClass53 = doubleArray51.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertNotNull(wildcardClass53);
    }

    @Test
    public void test0758() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0758");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray3 = new double[][] {};
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[][] doubleArray5 = new double[][] {};
        double[][] doubleArray6 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray5);
        double[] doubleArray8 = new double[] { 1 };
        double[] doubleArray10 = new double[] { 1 };
        double[] doubleArray12 = new double[] { 1 };
        double[] doubleArray14 = new double[] { 1 };
        double[] doubleArray16 = new double[] { 1 };
        double[][] doubleArray17 = new double[][] { doubleArray8, doubleArray10, doubleArray12, doubleArray14, doubleArray16 };
        int[] intArray18 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray17, intArray18);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray5, intArray18);
        double[] doubleArray24 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray28 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray32 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray36 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray37 = new double[][] { doubleArray24, doubleArray28, doubleArray32, doubleArray36 };
        double[] doubleArray39 = new double[] { 1 };
        double[] doubleArray41 = new double[] { 1 };
        double[] doubleArray43 = new double[] { 1 };
        double[] doubleArray45 = new double[] { 1 };
        double[] doubleArray47 = new double[] { 1 };
        double[][] doubleArray48 = new double[][] { doubleArray39, doubleArray41, doubleArray43, doubleArray45, doubleArray47 };
        int[] intArray49 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray48, intArray49);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray37, intArray49);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray5, intArray49);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray4, intArray49);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray2, intArray49);
        double[][] doubleArray55 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray56 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray55);
        double[][] doubleArray57 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray55);
        double[][] doubleArray58 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray57);
        double[][] doubleArray59 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray58);
        double[][] doubleArray60 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray59);
        double[][] doubleArray61 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray59);
        java.lang.Class<?> wildcardClass62 = doubleArray59.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[]");
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[]");
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertNotNull(wildcardClass62);
    }

    @Test
    public void test0759() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0759");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray30 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray29);
        double[][] doubleArray31 = null;
        double[][] doubleArray32 = new double[][] {};
        double[][] doubleArray33 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray32);
        double[][] doubleArray34 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray33);
        double[][] doubleArray35 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray33);
        double[][] doubleArray36 = new double[][] {};
        double[][] doubleArray37 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray36);
        double[][] doubleArray38 = new double[][] {};
        double[][] doubleArray39 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray38);
        double[] doubleArray41 = new double[] { 1 };
        double[] doubleArray43 = new double[] { 1 };
        double[] doubleArray45 = new double[] { 1 };
        double[] doubleArray47 = new double[] { 1 };
        double[] doubleArray49 = new double[] { 1 };
        double[][] doubleArray50 = new double[][] { doubleArray41, doubleArray43, doubleArray45, doubleArray47, doubleArray49 };
        int[] intArray51 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray50, intArray51);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray38, intArray51);
        double[] doubleArray57 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray61 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray65 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray69 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray70 = new double[][] { doubleArray57, doubleArray61, doubleArray65, doubleArray69 };
        double[] doubleArray72 = new double[] { 1 };
        double[] doubleArray74 = new double[] { 1 };
        double[] doubleArray76 = new double[] { 1 };
        double[] doubleArray78 = new double[] { 1 };
        double[] doubleArray80 = new double[] { 1 };
        double[][] doubleArray81 = new double[][] { doubleArray72, doubleArray74, doubleArray76, doubleArray78, doubleArray80 };
        int[] intArray82 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray81, intArray82);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray70, intArray82);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray38, intArray82);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray36, intArray82);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray33, intArray82);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray31, intArray82);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray30, intArray82);
        double[][] doubleArray90 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        double[][] doubleArray91 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray90);
        java.lang.Class<?> wildcardClass92 = doubleArray91.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[]");
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray74), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray78), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray80), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray81);
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[]");
        org.junit.Assert.assertNotNull(doubleArray90);
        org.junit.Assert.assertNotNull(doubleArray91);
        org.junit.Assert.assertNotNull(wildcardClass92);
    }

    @Test
    public void test0760() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0760");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[] doubleArray3 = new double[] { 1 };
        double[] doubleArray5 = new double[] { 1 };
        double[] doubleArray7 = new double[] { 1 };
        double[] doubleArray9 = new double[] { 1 };
        double[] doubleArray11 = new double[] { 1 };
        double[][] doubleArray12 = new double[][] { doubleArray3, doubleArray5, doubleArray7, doubleArray9, doubleArray11 };
        int[] intArray13 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray12, intArray13);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray0, intArray13);
        double[][] doubleArray16 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray17 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray16);
        double[][] doubleArray18 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray17);
        double[][] doubleArray19 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray18);
        int[] intArray20 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray19, intArray20);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertNotNull(doubleArray19);
    }

    @Test
    public void test0761() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0761");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[][] doubleArray5 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[][] doubleArray6 = new double[][] {};
        double[][] doubleArray7 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray6);
        double[][] doubleArray8 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray7);
        double[] doubleArray15 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray22 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray29 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray36 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray37 = new double[][] { doubleArray15, doubleArray22, doubleArray29, doubleArray36 };
        double[][] doubleArray38 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray37);
        double[] doubleArray40 = new double[] { 1 };
        double[] doubleArray42 = new double[] { 1 };
        double[] doubleArray44 = new double[] { 1 };
        double[] doubleArray46 = new double[] { 1 };
        double[] doubleArray48 = new double[] { 1 };
        double[][] doubleArray49 = new double[][] { doubleArray40, doubleArray42, doubleArray44, doubleArray46, doubleArray48 };
        int[] intArray50 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray49, intArray50);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray38, intArray50);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray7, intArray50);
        double[] doubleArray57 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray61 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray65 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray69 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray70 = new double[][] { doubleArray57, doubleArray61, doubleArray65, doubleArray69 };
        double[] doubleArray72 = new double[] { 1 };
        double[] doubleArray74 = new double[] { 1 };
        double[] doubleArray76 = new double[] { 1 };
        double[] doubleArray78 = new double[] { 1 };
        double[] doubleArray80 = new double[] { 1 };
        double[][] doubleArray81 = new double[][] { doubleArray72, doubleArray74, doubleArray76, doubleArray78, doubleArray80 };
        int[] intArray82 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray81, intArray82);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray70, intArray82);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray7, intArray82);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray3, intArray82);
        double[][] doubleArray87 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[][] doubleArray88 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray87);
        double[][] doubleArray89 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray88);
        double[][] doubleArray90 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray89);
        java.lang.Class<?> wildcardClass91 = doubleArray90.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[]");
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray74), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray78), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray80), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray81);
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[]");
        org.junit.Assert.assertNotNull(doubleArray87);
        org.junit.Assert.assertNotNull(doubleArray88);
        org.junit.Assert.assertNotNull(doubleArray89);
        org.junit.Assert.assertNotNull(doubleArray90);
        org.junit.Assert.assertNotNull(wildcardClass91);
    }

    @Test
    public void test0762() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0762");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[] doubleArray3 = new double[] { 1 };
        double[] doubleArray5 = new double[] { 1 };
        double[] doubleArray7 = new double[] { 1 };
        double[] doubleArray9 = new double[] { 1 };
        double[] doubleArray11 = new double[] { 1 };
        double[][] doubleArray12 = new double[][] { doubleArray3, doubleArray5, doubleArray7, doubleArray9, doubleArray11 };
        int[] intArray13 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray12, intArray13);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray0, intArray13);
        double[][] doubleArray16 = new double[][] {};
        double[][] doubleArray17 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray16);
        double[][] doubleArray18 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray16);
        double[][] doubleArray19 = new double[][] {};
        double[][] doubleArray20 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray19);
        double[][] doubleArray21 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray20);
        double[][] doubleArray22 = new double[][] {};
        double[][] doubleArray23 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray22);
        double[][] doubleArray24 = new double[][] {};
        double[][] doubleArray25 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray24);
        double[] doubleArray27 = new double[] { 1 };
        double[] doubleArray29 = new double[] { 1 };
        double[] doubleArray31 = new double[] { 1 };
        double[] doubleArray33 = new double[] { 1 };
        double[] doubleArray35 = new double[] { 1 };
        double[][] doubleArray36 = new double[][] { doubleArray27, doubleArray29, doubleArray31, doubleArray33, doubleArray35 };
        int[] intArray37 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray36, intArray37);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray24, intArray37);
        double[] doubleArray43 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray47 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray51 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray55 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray56 = new double[][] { doubleArray43, doubleArray47, doubleArray51, doubleArray55 };
        double[] doubleArray58 = new double[] { 1 };
        double[] doubleArray60 = new double[] { 1 };
        double[] doubleArray62 = new double[] { 1 };
        double[] doubleArray64 = new double[] { 1 };
        double[] doubleArray66 = new double[] { 1 };
        double[][] doubleArray67 = new double[][] { doubleArray58, doubleArray60, doubleArray62, doubleArray64, doubleArray66 };
        int[] intArray68 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray67, intArray68);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray56, intArray68);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray24, intArray68);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray23, intArray68);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray21, intArray68);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray16, intArray68);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray0, intArray68);
        java.lang.Class<?> wildcardClass76 = doubleArray0.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray66), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[]");
        org.junit.Assert.assertNotNull(wildcardClass76);
    }

    @Test
    public void test0763() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0763");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray30 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray31 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        double[][] doubleArray32 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        double[][] doubleArray33 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray32);
        double[][] doubleArray34 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray32);
        double[][] doubleArray35 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray32);
        int[] intArray36 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray35, intArray36);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertNotNull(doubleArray35);
    }

    @Test
    public void test0764() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0764");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = new double[][] {};
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[] doubleArray5 = new double[] { 1 };
        double[] doubleArray7 = new double[] { 1 };
        double[] doubleArray9 = new double[] { 1 };
        double[] doubleArray11 = new double[] { 1 };
        double[] doubleArray13 = new double[] { 1 };
        double[][] doubleArray14 = new double[][] { doubleArray5, doubleArray7, doubleArray9, doubleArray11, doubleArray13 };
        int[] intArray15 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray14, intArray15);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray2, intArray15);
        double[] doubleArray21 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray25 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray29 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray33 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray34 = new double[][] { doubleArray21, doubleArray25, doubleArray29, doubleArray33 };
        double[] doubleArray36 = new double[] { 1 };
        double[] doubleArray38 = new double[] { 1 };
        double[] doubleArray40 = new double[] { 1 };
        double[] doubleArray42 = new double[] { 1 };
        double[] doubleArray44 = new double[] { 1 };
        double[][] doubleArray45 = new double[][] { doubleArray36, doubleArray38, doubleArray40, doubleArray42, doubleArray44 };
        int[] intArray46 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray45, intArray46);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray34, intArray46);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray2, intArray46);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray1, intArray46);
        double[][] doubleArray51 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray52 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray51);
        double[][] doubleArray53 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray51);
        java.lang.Class<?> wildcardClass54 = doubleArray51.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertNotNull(wildcardClass54);
    }

    @Test
    public void test0765() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0765");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        int[] intArray2 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray1, intArray2);
        double[] doubleArray5 = new double[] { 1 };
        double[] doubleArray7 = new double[] { 1 };
        double[] doubleArray9 = new double[] { 1 };
        double[] doubleArray11 = new double[] { 1 };
        double[] doubleArray13 = new double[] { 1 };
        double[][] doubleArray14 = new double[][] { doubleArray5, doubleArray7, doubleArray9, doubleArray11, doubleArray13 };
        int[] intArray15 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray14, intArray15);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray1, intArray15);
        double[][] doubleArray18 = new double[][] {};
        double[][] doubleArray19 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray18);
        int[] intArray20 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray19, intArray20);
        double[][] doubleArray22 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray19);
        double[][] doubleArray23 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray19);
        double[][] doubleArray24 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray23);
        double[][] doubleArray25 = new double[][] {};
        double[][] doubleArray26 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray25);
        double[][] doubleArray27 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray25);
        double[][] doubleArray28 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray25);
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[] doubleArray31 = new double[] { 1 };
        double[] doubleArray33 = new double[] { 1 };
        double[] doubleArray35 = new double[] { 1 };
        double[] doubleArray37 = new double[] { 1 };
        double[] doubleArray39 = new double[] { 1 };
        double[][] doubleArray40 = new double[][] { doubleArray31, doubleArray33, doubleArray35, doubleArray37, doubleArray39 };
        int[] intArray41 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray40, intArray41);
        double[][] doubleArray43 = new double[][] {};
        double[][] doubleArray44 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray43);
        int[] intArray45 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray44, intArray45);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray40, intArray45);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray28, intArray45);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray23, intArray45);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray1, intArray45);
        java.lang.Class<?> wildcardClass51 = doubleArray1.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[]");
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[]");
        org.junit.Assert.assertNotNull(wildcardClass51);
    }

    @Test
    public void test0766() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0766");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray30 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray29);
        double[][] doubleArray31 = new double[][] {};
        double[][] doubleArray32 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray31);
        double[] doubleArray34 = new double[] { 1 };
        double[] doubleArray36 = new double[] { 1 };
        double[] doubleArray38 = new double[] { 1 };
        double[] doubleArray40 = new double[] { 1 };
        double[] doubleArray42 = new double[] { 1 };
        double[][] doubleArray43 = new double[][] { doubleArray34, doubleArray36, doubleArray38, doubleArray40, doubleArray42 };
        int[] intArray44 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray43, intArray44);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray31, intArray44);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray30, intArray44);
        double[][] doubleArray48 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        double[][] doubleArray49 = new double[][] {};
        double[][] doubleArray50 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray49);
        int[] intArray51 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray50, intArray51);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray48, intArray51);
        double[][] doubleArray54 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray48);
        double[][] doubleArray55 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray54);
        double[][] doubleArray56 = new double[][] {};
        double[][] doubleArray57 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray56);
        double[][] doubleArray58 = new double[][] {};
        double[][] doubleArray59 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray58);
        double[][] doubleArray60 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray59);
        double[] doubleArray64 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray68 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray72 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray76 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray77 = new double[][] { doubleArray64, doubleArray68, doubleArray72, doubleArray76 };
        double[] doubleArray79 = new double[] { 1 };
        double[] doubleArray81 = new double[] { 1 };
        double[] doubleArray83 = new double[] { 1 };
        double[] doubleArray85 = new double[] { 1 };
        double[] doubleArray87 = new double[] { 1 };
        double[][] doubleArray88 = new double[][] { doubleArray79, doubleArray81, doubleArray83, doubleArray85, doubleArray87 };
        int[] intArray89 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray88, intArray89);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray77, intArray89);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray59, intArray89);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray57, intArray89);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray54, intArray89);
        java.lang.Class<?> wildcardClass95 = intArray89.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[]");
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray79), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray81), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray83), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray85), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray87), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray88);
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray89), "[]");
        org.junit.Assert.assertNotNull(wildcardClass95);
    }

    @Test
    public void test0767() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0767");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray30 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray29);
        double[][] doubleArray31 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        double[][] doubleArray32 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray31);
        double[][] doubleArray33 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray32);
        double[][] doubleArray34 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray33);
        double[][] doubleArray35 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray33);
        java.lang.Class<?> wildcardClass36 = doubleArray35.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertNotNull(wildcardClass36);
    }

    @Test
    public void test0768() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0768");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[] doubleArray3 = new double[] { 1 };
        double[] doubleArray5 = new double[] { 1 };
        double[] doubleArray7 = new double[] { 1 };
        double[] doubleArray9 = new double[] { 1 };
        double[] doubleArray11 = new double[] { 1 };
        double[][] doubleArray12 = new double[][] { doubleArray3, doubleArray5, doubleArray7, doubleArray9, doubleArray11 };
        int[] intArray13 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray12, intArray13);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray0, intArray13);
        double[] doubleArray19 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray23 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray27 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray31 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray32 = new double[][] { doubleArray19, doubleArray23, doubleArray27, doubleArray31 };
        double[] doubleArray34 = new double[] { 1 };
        double[] doubleArray36 = new double[] { 1 };
        double[] doubleArray38 = new double[] { 1 };
        double[] doubleArray40 = new double[] { 1 };
        double[] doubleArray42 = new double[] { 1 };
        double[][] doubleArray43 = new double[][] { doubleArray34, doubleArray36, doubleArray38, doubleArray40, doubleArray42 };
        int[] intArray44 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray43, intArray44);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray32, intArray44);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray0, intArray44);
        double[] doubleArray49 = new double[] { 1 };
        double[] doubleArray51 = new double[] { 1 };
        double[] doubleArray53 = new double[] { 1 };
        double[] doubleArray55 = new double[] { 1 };
        double[] doubleArray57 = new double[] { 1 };
        double[][] doubleArray58 = new double[][] { doubleArray49, doubleArray51, doubleArray53, doubleArray55, doubleArray57 };
        int[] intArray59 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray58, intArray59);
        double[][] doubleArray61 = new double[][] {};
        double[][] doubleArray62 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray61);
        int[] intArray63 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray62, intArray63);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray58, intArray63);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray0, intArray63);
        double[][] doubleArray67 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray68 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray67);
        java.lang.Class<?> wildcardClass69 = doubleArray67.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[]");
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertNotNull(wildcardClass69);
    }

    @Test
    public void test0769() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0769");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray30 = new double[][] {};
        double[][] doubleArray31 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        double[][] doubleArray32 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray31);
        double[][] doubleArray33 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray32);
        double[][] doubleArray34 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray32);
        double[][] doubleArray35 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray32);
        double[][] doubleArray36 = new double[][] {};
        double[][] doubleArray37 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray36);
        double[][] doubleArray38 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray36);
        double[] doubleArray45 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray52 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray59 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray66 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray67 = new double[][] { doubleArray45, doubleArray52, doubleArray59, doubleArray66 };
        double[][] doubleArray68 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray67);
        double[][] doubleArray69 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray67);
        double[][] doubleArray70 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray67);
        double[][] doubleArray71 = new double[][] {};
        double[][] doubleArray72 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray71);
        int[] intArray73 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray72, intArray73);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray70, intArray73);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray38, intArray73);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray32, intArray73);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray29, intArray73);
        java.lang.Class<?> wildcardClass79 = doubleArray29.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray66), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[]");
        org.junit.Assert.assertNotNull(wildcardClass79);
    }

    @Test
    public void test0770() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0770");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[][] doubleArray5 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray4);
        double[][] doubleArray6 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray4);
        java.lang.Class<?> wildcardClass7 = doubleArray4.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(wildcardClass7);
    }

    @Test
    public void test0771() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0771");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        int[] intArray2 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray1, intArray2);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray5 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray4);
        double[][] doubleArray6 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray4);
        double[][] doubleArray7 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray6);
        double[][] doubleArray8 = new double[][] {};
        double[][] doubleArray9 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray8);
        double[][] doubleArray10 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray8);
        double[][] doubleArray11 = new double[][] {};
        double[][] doubleArray12 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray11);
        double[][] doubleArray13 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray12);
        double[][] doubleArray14 = new double[][] {};
        double[][] doubleArray15 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray14);
        double[][] doubleArray16 = new double[][] {};
        double[][] doubleArray17 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray16);
        double[] doubleArray19 = new double[] { 1 };
        double[] doubleArray21 = new double[] { 1 };
        double[] doubleArray23 = new double[] { 1 };
        double[] doubleArray25 = new double[] { 1 };
        double[] doubleArray27 = new double[] { 1 };
        double[][] doubleArray28 = new double[][] { doubleArray19, doubleArray21, doubleArray23, doubleArray25, doubleArray27 };
        int[] intArray29 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray28, intArray29);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray16, intArray29);
        double[] doubleArray35 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray39 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray43 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray47 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray48 = new double[][] { doubleArray35, doubleArray39, doubleArray43, doubleArray47 };
        double[] doubleArray50 = new double[] { 1 };
        double[] doubleArray52 = new double[] { 1 };
        double[] doubleArray54 = new double[] { 1 };
        double[] doubleArray56 = new double[] { 1 };
        double[] doubleArray58 = new double[] { 1 };
        double[][] doubleArray59 = new double[][] { doubleArray50, doubleArray52, doubleArray54, doubleArray56, doubleArray58 };
        int[] intArray60 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray59, intArray60);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray48, intArray60);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray16, intArray60);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray15, intArray60);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray13, intArray60);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray8, intArray60);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray7, intArray60);
        java.lang.Class<?> wildcardClass68 = intArray60.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[]");
        org.junit.Assert.assertNotNull(wildcardClass68);
    }

    @Test
    public void test0772() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0772");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray30 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray31 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray32 = new double[][] {};
        double[][] doubleArray33 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray32);
        double[][] doubleArray34 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray33);
        double[][] doubleArray35 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray33);
        double[][] doubleArray36 = new double[][] {};
        double[][] doubleArray37 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray36);
        double[][] doubleArray38 = new double[][] {};
        double[][] doubleArray39 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray38);
        double[] doubleArray41 = new double[] { 1 };
        double[] doubleArray43 = new double[] { 1 };
        double[] doubleArray45 = new double[] { 1 };
        double[] doubleArray47 = new double[] { 1 };
        double[] doubleArray49 = new double[] { 1 };
        double[][] doubleArray50 = new double[][] { doubleArray41, doubleArray43, doubleArray45, doubleArray47, doubleArray49 };
        int[] intArray51 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray50, intArray51);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray38, intArray51);
        double[] doubleArray57 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray61 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray65 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray69 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray70 = new double[][] { doubleArray57, doubleArray61, doubleArray65, doubleArray69 };
        double[] doubleArray72 = new double[] { 1 };
        double[] doubleArray74 = new double[] { 1 };
        double[] doubleArray76 = new double[] { 1 };
        double[] doubleArray78 = new double[] { 1 };
        double[] doubleArray80 = new double[] { 1 };
        double[][] doubleArray81 = new double[][] { doubleArray72, doubleArray74, doubleArray76, doubleArray78, doubleArray80 };
        int[] intArray82 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray81, intArray82);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray70, intArray82);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray38, intArray82);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray36, intArray82);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray33, intArray82);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray31, intArray82);
        double[][] doubleArray89 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray31);
        double[][] doubleArray90 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray89);
        double[][] doubleArray91 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray90);
        java.lang.Class<?> wildcardClass92 = doubleArray91.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[]");
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray74), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray78), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray80), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray81);
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[]");
        org.junit.Assert.assertNotNull(doubleArray89);
        org.junit.Assert.assertNotNull(doubleArray90);
        org.junit.Assert.assertNotNull(doubleArray91);
        org.junit.Assert.assertNotNull(wildcardClass92);
    }

    @Test
    public void test0773() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0773");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        java.lang.Class<?> wildcardClass5 = doubleArray4.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(wildcardClass5);
    }

    @Test
    public void test0774() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0774");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[][] doubleArray5 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray4);
        double[][] doubleArray6 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray5);
        double[][] doubleArray7 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray5);
        double[][] doubleArray8 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray5);
        double[][] doubleArray9 = new double[][] {};
        double[][] doubleArray10 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray9);
        double[] doubleArray12 = new double[] { 1 };
        double[] doubleArray14 = new double[] { 1 };
        double[] doubleArray16 = new double[] { 1 };
        double[] doubleArray18 = new double[] { 1 };
        double[] doubleArray20 = new double[] { 1 };
        double[][] doubleArray21 = new double[][] { doubleArray12, doubleArray14, doubleArray16, doubleArray18, doubleArray20 };
        int[] intArray22 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray21, intArray22);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray9, intArray22);
        double[] doubleArray31 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray38 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray45 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray52 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray53 = new double[][] { doubleArray31, doubleArray38, doubleArray45, doubleArray52 };
        double[][] doubleArray54 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray53);
        double[][] doubleArray55 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray54);
        double[][] doubleArray56 = new double[][] {};
        double[][] doubleArray57 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray56);
        double[] doubleArray59 = new double[] { 1 };
        double[] doubleArray61 = new double[] { 1 };
        double[] doubleArray63 = new double[] { 1 };
        double[] doubleArray65 = new double[] { 1 };
        double[] doubleArray67 = new double[] { 1 };
        double[][] doubleArray68 = new double[][] { doubleArray59, doubleArray61, doubleArray63, doubleArray65, doubleArray67 };
        int[] intArray69 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray68, intArray69);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray56, intArray69);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray55, intArray69);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray9, intArray69);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray8, intArray69);
        int[] intArray75 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray8, intArray75);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[]");
    }

    @Test
    public void test0775() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0775");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray30 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray29);
        double[][] doubleArray31 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        double[][] doubleArray32 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray31);
        double[][] doubleArray33 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray31);
        double[][] doubleArray34 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray33);
        double[][] doubleArray35 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray33);
        double[][] doubleArray36 = new double[][] {};
        double[][] doubleArray37 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray36);
        double[][] doubleArray38 = new double[][] {};
        double[][] doubleArray39 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray38);
        double[][] doubleArray40 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray39);
        double[] doubleArray44 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray48 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray52 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray56 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray57 = new double[][] { doubleArray44, doubleArray48, doubleArray52, doubleArray56 };
        double[] doubleArray59 = new double[] { 1 };
        double[] doubleArray61 = new double[] { 1 };
        double[] doubleArray63 = new double[] { 1 };
        double[] doubleArray65 = new double[] { 1 };
        double[] doubleArray67 = new double[] { 1 };
        double[][] doubleArray68 = new double[][] { doubleArray59, doubleArray61, doubleArray63, doubleArray65, doubleArray67 };
        int[] intArray69 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray68, intArray69);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray57, intArray69);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray39, intArray69);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray37, intArray69);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray33, intArray69);
        java.lang.Class<?> wildcardClass75 = intArray69.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[]");
        org.junit.Assert.assertNotNull(wildcardClass75);
    }

    @Test
    public void test0776() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0776");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray5 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray6 = null;
        double[][] doubleArray7 = new double[][] {};
        double[][] doubleArray8 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray7);
        double[][] doubleArray9 = new double[][] {};
        double[][] doubleArray10 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray9);
        double[] doubleArray12 = new double[] { 1 };
        double[] doubleArray14 = new double[] { 1 };
        double[] doubleArray16 = new double[] { 1 };
        double[] doubleArray18 = new double[] { 1 };
        double[] doubleArray20 = new double[] { 1 };
        double[][] doubleArray21 = new double[][] { doubleArray12, doubleArray14, doubleArray16, doubleArray18, doubleArray20 };
        int[] intArray22 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray21, intArray22);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray9, intArray22);
        double[] doubleArray28 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray32 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray36 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray40 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray41 = new double[][] { doubleArray28, doubleArray32, doubleArray36, doubleArray40 };
        double[] doubleArray43 = new double[] { 1 };
        double[] doubleArray45 = new double[] { 1 };
        double[] doubleArray47 = new double[] { 1 };
        double[] doubleArray49 = new double[] { 1 };
        double[] doubleArray51 = new double[] { 1 };
        double[][] doubleArray52 = new double[][] { doubleArray43, doubleArray45, doubleArray47, doubleArray49, doubleArray51 };
        int[] intArray53 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray52, intArray53);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray41, intArray53);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray9, intArray53);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray8, intArray53);
        double[] doubleArray59 = new double[] { 1 };
        double[] doubleArray61 = new double[] { 1 };
        double[] doubleArray63 = new double[] { 1 };
        double[] doubleArray65 = new double[] { 1 };
        double[] doubleArray67 = new double[] { 1 };
        double[][] doubleArray68 = new double[][] { doubleArray59, doubleArray61, doubleArray63, doubleArray65, doubleArray67 };
        int[] intArray69 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray68, intArray69);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray8, intArray69);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray6, intArray69);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray5, intArray69);
        java.lang.Class<?> wildcardClass74 = intArray69.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[]");
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[]");
        org.junit.Assert.assertNotNull(wildcardClass74);
    }

    @Test
    public void test0777() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0777");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray30 = new double[][] {};
        double[][] doubleArray31 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        double[][] doubleArray32 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray31);
        double[][] doubleArray33 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray32);
        double[][] doubleArray34 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray32);
        double[][] doubleArray35 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray32);
        double[][] doubleArray36 = new double[][] {};
        double[][] doubleArray37 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray36);
        double[][] doubleArray38 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray36);
        double[] doubleArray45 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray52 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray59 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray66 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray67 = new double[][] { doubleArray45, doubleArray52, doubleArray59, doubleArray66 };
        double[][] doubleArray68 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray67);
        double[][] doubleArray69 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray67);
        double[][] doubleArray70 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray67);
        double[][] doubleArray71 = new double[][] {};
        double[][] doubleArray72 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray71);
        int[] intArray73 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray72, intArray73);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray70, intArray73);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray38, intArray73);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray32, intArray73);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray29, intArray73);
        double[][] doubleArray79 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray29);
        double[][] doubleArray80 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray29);
        int[] intArray81 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray80, intArray81);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray66), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[]");
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertNotNull(doubleArray80);
    }

    @Test
    public void test0778() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0778");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray5 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray6 = new double[][] {};
        double[][] doubleArray7 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray6);
        double[][] doubleArray8 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray6);
        double[][] doubleArray9 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray6);
        double[][] doubleArray10 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray9);
        double[] doubleArray17 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray24 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray31 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray38 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray39 = new double[][] { doubleArray17, doubleArray24, doubleArray31, doubleArray38 };
        double[][] doubleArray40 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray39);
        double[][] doubleArray41 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray40);
        double[][] doubleArray42 = new double[][] {};
        double[][] doubleArray43 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray42);
        double[] doubleArray45 = new double[] { 1 };
        double[] doubleArray47 = new double[] { 1 };
        double[] doubleArray49 = new double[] { 1 };
        double[] doubleArray51 = new double[] { 1 };
        double[] doubleArray53 = new double[] { 1 };
        double[][] doubleArray54 = new double[][] { doubleArray45, doubleArray47, doubleArray49, doubleArray51, doubleArray53 };
        int[] intArray55 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray54, intArray55);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray42, intArray55);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray41, intArray55);
        double[][] doubleArray59 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray41);
        double[] doubleArray61 = new double[] { 1 };
        double[] doubleArray63 = new double[] { 1 };
        double[] doubleArray65 = new double[] { 1 };
        double[] doubleArray67 = new double[] { 1 };
        double[] doubleArray69 = new double[] { 1 };
        double[][] doubleArray70 = new double[][] { doubleArray61, doubleArray63, doubleArray65, doubleArray67, doubleArray69 };
        int[] intArray71 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray70, intArray71);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray59, intArray71);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray9, intArray71);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray5, intArray71);
        double[][] doubleArray76 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray5);
        double[][] doubleArray77 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray76);
        java.lang.Class<?> wildcardClass78 = doubleArray76.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[]");
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[]");
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertNotNull(wildcardClass78);
    }

    @Test
    public void test0779() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0779");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray30 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray29);
        double[][] doubleArray31 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        double[][] doubleArray32 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        double[][] doubleArray33 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        double[][] doubleArray34 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        double[][] doubleArray35 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray34);
        double[][] doubleArray36 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray35);
        double[][] doubleArray37 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray36);
        double[][] doubleArray38 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray36);
        java.lang.Class<?> wildcardClass39 = doubleArray38.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertNotNull(wildcardClass39);
    }

    @Test
    public void test0780() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0780");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray30 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray29);
        double[][] doubleArray31 = new double[][] {};
        double[][] doubleArray32 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray31);
        double[] doubleArray34 = new double[] { 1 };
        double[] doubleArray36 = new double[] { 1 };
        double[] doubleArray38 = new double[] { 1 };
        double[] doubleArray40 = new double[] { 1 };
        double[] doubleArray42 = new double[] { 1 };
        double[][] doubleArray43 = new double[][] { doubleArray34, doubleArray36, doubleArray38, doubleArray40, doubleArray42 };
        int[] intArray44 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray43, intArray44);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray31, intArray44);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray30, intArray44);
        double[][] doubleArray48 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        double[][] doubleArray49 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        double[][] doubleArray50 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        java.lang.Class<?> wildcardClass51 = doubleArray50.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertNotNull(wildcardClass51);
    }

    @Test
    public void test0781() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0781");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = new double[][] {};
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[] doubleArray5 = new double[] { 1 };
        double[] doubleArray7 = new double[] { 1 };
        double[] doubleArray9 = new double[] { 1 };
        double[] doubleArray11 = new double[] { 1 };
        double[] doubleArray13 = new double[] { 1 };
        double[][] doubleArray14 = new double[][] { doubleArray5, doubleArray7, doubleArray9, doubleArray11, doubleArray13 };
        int[] intArray15 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray14, intArray15);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray2, intArray15);
        double[] doubleArray21 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray25 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray29 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray33 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray34 = new double[][] { doubleArray21, doubleArray25, doubleArray29, doubleArray33 };
        double[] doubleArray36 = new double[] { 1 };
        double[] doubleArray38 = new double[] { 1 };
        double[] doubleArray40 = new double[] { 1 };
        double[] doubleArray42 = new double[] { 1 };
        double[] doubleArray44 = new double[] { 1 };
        double[][] doubleArray45 = new double[][] { doubleArray36, doubleArray38, doubleArray40, doubleArray42, doubleArray44 };
        int[] intArray46 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray45, intArray46);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray34, intArray46);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray2, intArray46);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray1, intArray46);
        double[][] doubleArray51 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray52 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        java.lang.Class<?> wildcardClass53 = doubleArray1.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertNotNull(wildcardClass53);
    }

    @Test
    public void test0782() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0782");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray3 = new double[][] {};
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[][] doubleArray5 = new double[][] {};
        double[][] doubleArray6 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray5);
        double[] doubleArray8 = new double[] { 1 };
        double[] doubleArray10 = new double[] { 1 };
        double[] doubleArray12 = new double[] { 1 };
        double[] doubleArray14 = new double[] { 1 };
        double[] doubleArray16 = new double[] { 1 };
        double[][] doubleArray17 = new double[][] { doubleArray8, doubleArray10, doubleArray12, doubleArray14, doubleArray16 };
        int[] intArray18 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray17, intArray18);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray5, intArray18);
        double[] doubleArray24 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray28 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray32 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray36 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray37 = new double[][] { doubleArray24, doubleArray28, doubleArray32, doubleArray36 };
        double[] doubleArray39 = new double[] { 1 };
        double[] doubleArray41 = new double[] { 1 };
        double[] doubleArray43 = new double[] { 1 };
        double[] doubleArray45 = new double[] { 1 };
        double[] doubleArray47 = new double[] { 1 };
        double[][] doubleArray48 = new double[][] { doubleArray39, doubleArray41, doubleArray43, doubleArray45, doubleArray47 };
        int[] intArray49 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray48, intArray49);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray37, intArray49);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray5, intArray49);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray4, intArray49);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray2, intArray49);
        double[][] doubleArray55 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray56 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray55);
        double[][] doubleArray57 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray55);
        double[][] doubleArray58 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray57);
        double[][] doubleArray59 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray58);
        double[][] doubleArray60 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray59);
        double[][] doubleArray61 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray59);
        double[][] doubleArray62 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray61);
        java.lang.Class<?> wildcardClass63 = doubleArray61.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[]");
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[]");
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertNotNull(wildcardClass63);
    }

    @Test
    public void test0783() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0783");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[] doubleArray31 = new double[] { 1 };
        double[] doubleArray33 = new double[] { 1 };
        double[] doubleArray35 = new double[] { 1 };
        double[] doubleArray37 = new double[] { 1 };
        double[] doubleArray39 = new double[] { 1 };
        double[][] doubleArray40 = new double[][] { doubleArray31, doubleArray33, doubleArray35, doubleArray37, doubleArray39 };
        int[] intArray41 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray40, intArray41);
        double[][] doubleArray43 = new double[][] {};
        double[][] doubleArray44 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray43);
        int[] intArray45 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray44, intArray45);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray40, intArray45);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray28, intArray45);
        double[][] doubleArray49 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray50 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray51 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray50);
        double[][] doubleArray52 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray50);
        double[][] doubleArray53 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray52);
        int[] intArray54 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray52, intArray54);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertNotNull(doubleArray53);
    }

    @Test
    public void test0784() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0784");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[][] doubleArray5 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[][] doubleArray6 = new double[][] {};
        double[][] doubleArray7 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray6);
        double[][] doubleArray8 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray7);
        double[] doubleArray15 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray22 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray29 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray36 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray37 = new double[][] { doubleArray15, doubleArray22, doubleArray29, doubleArray36 };
        double[][] doubleArray38 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray37);
        double[] doubleArray40 = new double[] { 1 };
        double[] doubleArray42 = new double[] { 1 };
        double[] doubleArray44 = new double[] { 1 };
        double[] doubleArray46 = new double[] { 1 };
        double[] doubleArray48 = new double[] { 1 };
        double[][] doubleArray49 = new double[][] { doubleArray40, doubleArray42, doubleArray44, doubleArray46, doubleArray48 };
        int[] intArray50 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray49, intArray50);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray38, intArray50);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray7, intArray50);
        double[] doubleArray57 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray61 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray65 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray69 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray70 = new double[][] { doubleArray57, doubleArray61, doubleArray65, doubleArray69 };
        double[] doubleArray72 = new double[] { 1 };
        double[] doubleArray74 = new double[] { 1 };
        double[] doubleArray76 = new double[] { 1 };
        double[] doubleArray78 = new double[] { 1 };
        double[] doubleArray80 = new double[] { 1 };
        double[][] doubleArray81 = new double[][] { doubleArray72, doubleArray74, doubleArray76, doubleArray78, doubleArray80 };
        int[] intArray82 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray81, intArray82);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray70, intArray82);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray7, intArray82);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray3, intArray82);
        double[][] doubleArray87 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[][] doubleArray88 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        java.lang.Class<?> wildcardClass89 = doubleArray3.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[]");
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray74), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray78), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray80), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray81);
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[]");
        org.junit.Assert.assertNotNull(doubleArray87);
        org.junit.Assert.assertNotNull(doubleArray88);
        org.junit.Assert.assertNotNull(wildcardClass89);
    }

    @Test
    public void test0785() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0785");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray5 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray4);
        double[][] doubleArray6 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray5);
        double[][] doubleArray7 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray5);
        java.lang.Class<?> wildcardClass8 = doubleArray7.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertNotNull(wildcardClass8);
    }

    @Test
    public void test0786() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0786");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[][] doubleArray5 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray4);
        double[][] doubleArray6 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray5);
        double[][] doubleArray7 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray6);
        java.lang.Class<?> wildcardClass8 = doubleArray6.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertNotNull(wildcardClass8);
    }

    @Test
    public void test0787() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0787");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        int[] intArray2 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray1, intArray2);
        double[] doubleArray5 = new double[] { 1 };
        double[] doubleArray7 = new double[] { 1 };
        double[] doubleArray9 = new double[] { 1 };
        double[] doubleArray11 = new double[] { 1 };
        double[] doubleArray13 = new double[] { 1 };
        double[][] doubleArray14 = new double[][] { doubleArray5, doubleArray7, doubleArray9, doubleArray11, doubleArray13 };
        int[] intArray15 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray14, intArray15);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray1, intArray15);
        double[][] doubleArray18 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray19 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray20 = null;
        double[] doubleArray22 = new double[] { 1 };
        double[] doubleArray24 = new double[] { 1 };
        double[] doubleArray26 = new double[] { 1 };
        double[] doubleArray28 = new double[] { 1 };
        double[] doubleArray30 = new double[] { 1 };
        double[][] doubleArray31 = new double[][] { doubleArray22, doubleArray24, doubleArray26, doubleArray28, doubleArray30 };
        int[] intArray32 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray31, intArray32);
        double[] doubleArray40 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray47 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray54 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray61 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray62 = new double[][] { doubleArray40, doubleArray47, doubleArray54, doubleArray61 };
        double[][] doubleArray63 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray62);
        double[] doubleArray65 = new double[] { 1 };
        double[] doubleArray67 = new double[] { 1 };
        double[] doubleArray69 = new double[] { 1 };
        double[] doubleArray71 = new double[] { 1 };
        double[] doubleArray73 = new double[] { 1 };
        double[][] doubleArray74 = new double[][] { doubleArray65, doubleArray67, doubleArray69, doubleArray71, doubleArray73 };
        int[] intArray75 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray74, intArray75);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray63, intArray75);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray31, intArray75);
        double[] doubleArray80 = new double[] { 1 };
        double[] doubleArray82 = new double[] { 1 };
        double[] doubleArray84 = new double[] { 1 };
        double[] doubleArray86 = new double[] { 1 };
        double[] doubleArray88 = new double[] { 1 };
        double[][] doubleArray89 = new double[][] { doubleArray80, doubleArray82, doubleArray84, doubleArray86, doubleArray88 };
        int[] intArray90 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray89, intArray90);
        double[][] doubleArray92 = new double[][] {};
        double[][] doubleArray93 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray92);
        int[] intArray94 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray93, intArray94);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray89, intArray94);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray31, intArray94);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray20, intArray94);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray1, intArray94);
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray71), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray73), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[]");
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray80), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray82), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray84), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray86), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray88), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray89);
        org.junit.Assert.assertNotNull(intArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray90), "[]");
        org.junit.Assert.assertNotNull(doubleArray92);
        org.junit.Assert.assertNotNull(doubleArray93);
        org.junit.Assert.assertNotNull(intArray94);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray94), "[]");
    }

    @Test
    public void test0788() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0788");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray5 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray4);
        double[][] doubleArray6 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray4);
        double[][] doubleArray7 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray6);
        double[][] doubleArray8 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray6);
        double[][] doubleArray9 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray6);
        java.lang.Class<?> wildcardClass10 = doubleArray6.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertNotNull(wildcardClass10);
    }

    @Test
    public void test0789() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0789");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[] doubleArray10 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray17 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray24 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray31 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray32 = new double[][] { doubleArray10, doubleArray17, doubleArray24, doubleArray31 };
        double[][] doubleArray33 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray32);
        double[][] doubleArray34 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray32);
        double[][] doubleArray35 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray32);
        double[] doubleArray37 = new double[] { 1 };
        double[] doubleArray39 = new double[] { 1 };
        double[] doubleArray41 = new double[] { 1 };
        double[] doubleArray43 = new double[] { 1 };
        double[] doubleArray45 = new double[] { 1 };
        double[][] doubleArray46 = new double[][] { doubleArray37, doubleArray39, doubleArray41, doubleArray43, doubleArray45 };
        int[] intArray47 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray46, intArray47);
        double[] doubleArray55 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray62 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray69 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray76 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray77 = new double[][] { doubleArray55, doubleArray62, doubleArray69, doubleArray76 };
        double[][] doubleArray78 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray77);
        double[] doubleArray80 = new double[] { 1 };
        double[] doubleArray82 = new double[] { 1 };
        double[] doubleArray84 = new double[] { 1 };
        double[] doubleArray86 = new double[] { 1 };
        double[] doubleArray88 = new double[] { 1 };
        double[][] doubleArray89 = new double[][] { doubleArray80, doubleArray82, doubleArray84, doubleArray86, doubleArray88 };
        int[] intArray90 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray89, intArray90);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray78, intArray90);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray46, intArray90);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray35, intArray90);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray3, intArray90);
        double[][] doubleArray96 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[][] doubleArray97 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray96);
        java.lang.Class<?> wildcardClass98 = doubleArray97.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[]");
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray80), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray82), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray84), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray86), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray88), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray89);
        org.junit.Assert.assertNotNull(intArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray90), "[]");
        org.junit.Assert.assertNotNull(doubleArray96);
        org.junit.Assert.assertNotNull(doubleArray97);
        org.junit.Assert.assertNotNull(wildcardClass98);
    }

    @Test
    public void test0790() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0790");
        double[][] doubleArray0 = null;
        double[][] doubleArray1 = new double[][] {};
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[] doubleArray4 = new double[] { 1 };
        double[] doubleArray6 = new double[] { 1 };
        double[] doubleArray8 = new double[] { 1 };
        double[] doubleArray10 = new double[] { 1 };
        double[] doubleArray12 = new double[] { 1 };
        double[][] doubleArray13 = new double[][] { doubleArray4, doubleArray6, doubleArray8, doubleArray10, doubleArray12 };
        int[] intArray14 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray13, intArray14);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray1, intArray14);
        double[] doubleArray20 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray24 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray28 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray32 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray33 = new double[][] { doubleArray20, doubleArray24, doubleArray28, doubleArray32 };
        double[] doubleArray35 = new double[] { 1 };
        double[] doubleArray37 = new double[] { 1 };
        double[] doubleArray39 = new double[] { 1 };
        double[] doubleArray41 = new double[] { 1 };
        double[] doubleArray43 = new double[] { 1 };
        double[][] doubleArray44 = new double[][] { doubleArray35, doubleArray37, doubleArray39, doubleArray41, doubleArray43 };
        int[] intArray45 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray44, intArray45);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray33, intArray45);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray1, intArray45);
        double[][] doubleArray49 = new double[][] {};
        double[][] doubleArray50 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray49);
        double[][] doubleArray51 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray50);
        double[] doubleArray58 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray65 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray72 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray79 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray80 = new double[][] { doubleArray58, doubleArray65, doubleArray72, doubleArray79 };
        double[][] doubleArray81 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray80);
        double[] doubleArray83 = new double[] { 1 };
        double[] doubleArray85 = new double[] { 1 };
        double[] doubleArray87 = new double[] { 1 };
        double[] doubleArray89 = new double[] { 1 };
        double[] doubleArray91 = new double[] { 1 };
        double[][] doubleArray92 = new double[][] { doubleArray83, doubleArray85, doubleArray87, doubleArray89, doubleArray91 };
        int[] intArray93 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray92, intArray93);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray81, intArray93);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray50, intArray93);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray1, intArray93);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray0, intArray93);
        java.lang.Class<?> wildcardClass99 = intArray93.getClass();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray79), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertNotNull(doubleArray81);
        org.junit.Assert.assertNotNull(doubleArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray83), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray85), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray87), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray89), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray91), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray92);
        org.junit.Assert.assertNotNull(intArray93);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray93), "[]");
        org.junit.Assert.assertNotNull(wildcardClass99);
    }

    @Test
    public void test0791() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0791");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[] doubleArray3 = new double[] { 1 };
        double[] doubleArray5 = new double[] { 1 };
        double[] doubleArray7 = new double[] { 1 };
        double[] doubleArray9 = new double[] { 1 };
        double[] doubleArray11 = new double[] { 1 };
        double[][] doubleArray12 = new double[][] { doubleArray3, doubleArray5, doubleArray7, doubleArray9, doubleArray11 };
        int[] intArray13 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray12, intArray13);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray0, intArray13);
        double[][] doubleArray16 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray17 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray16);
        double[][] doubleArray18 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray17);
        double[][] doubleArray19 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray17);
        double[][] doubleArray20 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray19);
        double[][] doubleArray21 = new double[][] {};
        double[][] doubleArray22 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray21);
        double[] doubleArray24 = new double[] { 1 };
        double[] doubleArray26 = new double[] { 1 };
        double[] doubleArray28 = new double[] { 1 };
        double[] doubleArray30 = new double[] { 1 };
        double[] doubleArray32 = new double[] { 1 };
        double[][] doubleArray33 = new double[][] { doubleArray24, doubleArray26, doubleArray28, doubleArray30, doubleArray32 };
        int[] intArray34 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray33, intArray34);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray21, intArray34);
        double[][] doubleArray37 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray21);
        double[][] doubleArray38 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray37);
        double[][] doubleArray39 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray38);
        double[][] doubleArray40 = new double[][] {};
        double[][] doubleArray41 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray40);
        double[][] doubleArray42 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray40);
        double[][] doubleArray43 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray42);
        double[][] doubleArray44 = null;
        double[][] doubleArray45 = new double[][] {};
        double[][] doubleArray46 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray45);
        double[][] doubleArray47 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray46);
        double[] doubleArray51 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray55 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray59 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray63 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray64 = new double[][] { doubleArray51, doubleArray55, doubleArray59, doubleArray63 };
        double[] doubleArray66 = new double[] { 1 };
        double[] doubleArray68 = new double[] { 1 };
        double[] doubleArray70 = new double[] { 1 };
        double[] doubleArray72 = new double[] { 1 };
        double[] doubleArray74 = new double[] { 1 };
        double[][] doubleArray75 = new double[][] { doubleArray66, doubleArray68, doubleArray70, doubleArray72, doubleArray74 };
        int[] intArray76 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray75, intArray76);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray64, intArray76);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray47, intArray76);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray44, intArray76);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray43, intArray76);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray38, intArray76);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray20, intArray76);
        java.lang.Class<?> wildcardClass84 = intArray76.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray66), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray70), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray74), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[]");
        org.junit.Assert.assertNotNull(wildcardClass84);
    }

    @Test
    public void test0792() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0792");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[] doubleArray31 = new double[] { 1 };
        double[] doubleArray33 = new double[] { 1 };
        double[] doubleArray35 = new double[] { 1 };
        double[] doubleArray37 = new double[] { 1 };
        double[] doubleArray39 = new double[] { 1 };
        double[][] doubleArray40 = new double[][] { doubleArray31, doubleArray33, doubleArray35, doubleArray37, doubleArray39 };
        int[] intArray41 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray40, intArray41);
        double[][] doubleArray43 = new double[][] {};
        double[][] doubleArray44 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray43);
        int[] intArray45 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray44, intArray45);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray40, intArray45);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray28, intArray45);
        double[][] doubleArray49 = null;
        double[][] doubleArray50 = new double[][] {};
        double[][] doubleArray51 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray50);
        double[][] doubleArray52 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray51);
        double[] doubleArray56 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray60 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray64 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray68 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray69 = new double[][] { doubleArray56, doubleArray60, doubleArray64, doubleArray68 };
        double[] doubleArray71 = new double[] { 1 };
        double[] doubleArray73 = new double[] { 1 };
        double[] doubleArray75 = new double[] { 1 };
        double[] doubleArray77 = new double[] { 1 };
        double[] doubleArray79 = new double[] { 1 };
        double[][] doubleArray80 = new double[][] { doubleArray71, doubleArray73, doubleArray75, doubleArray77, doubleArray79 };
        int[] intArray81 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray80, intArray81);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray69, intArray81);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray52, intArray81);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray49, intArray81);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray28, intArray81);
        java.lang.Class<?> wildcardClass87 = doubleArray28.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[]");
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray71), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray73), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray75), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray77), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray79), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray81), "[]");
        org.junit.Assert.assertNotNull(wildcardClass87);
    }

    @Test
    public void test0793() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0793");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[] doubleArray6 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray10 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray14 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray18 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray19 = new double[][] { doubleArray6, doubleArray10, doubleArray14, doubleArray18 };
        double[] doubleArray21 = new double[] { 1 };
        double[] doubleArray23 = new double[] { 1 };
        double[] doubleArray25 = new double[] { 1 };
        double[] doubleArray27 = new double[] { 1 };
        double[] doubleArray29 = new double[] { 1 };
        double[][] doubleArray30 = new double[][] { doubleArray21, doubleArray23, doubleArray25, doubleArray27, doubleArray29 };
        int[] intArray31 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray30, intArray31);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray19, intArray31);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray2, intArray31);
        double[][] doubleArray35 = null;
        double[] doubleArray37 = new double[] { 1 };
        double[] doubleArray39 = new double[] { 1 };
        double[] doubleArray41 = new double[] { 1 };
        double[] doubleArray43 = new double[] { 1 };
        double[] doubleArray45 = new double[] { 1 };
        double[][] doubleArray46 = new double[][] { doubleArray37, doubleArray39, doubleArray41, doubleArray43, doubleArray45 };
        int[] intArray47 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray46, intArray47);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray35, intArray47);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray2, intArray47);
        double[][] doubleArray51 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray52 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        int[] intArray53 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray2, intArray53);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertNotNull(doubleArray52);
    }

    @Test
    public void test0794() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0794");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[] doubleArray3 = new double[] { 1 };
        double[] doubleArray5 = new double[] { 1 };
        double[] doubleArray7 = new double[] { 1 };
        double[] doubleArray9 = new double[] { 1 };
        double[] doubleArray11 = new double[] { 1 };
        double[][] doubleArray12 = new double[][] { doubleArray3, doubleArray5, doubleArray7, doubleArray9, doubleArray11 };
        int[] intArray13 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray12, intArray13);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray0, intArray13);
        double[] doubleArray22 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray29 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray36 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray43 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray44 = new double[][] { doubleArray22, doubleArray29, doubleArray36, doubleArray43 };
        double[][] doubleArray45 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray44);
        double[][] doubleArray46 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray45);
        double[][] doubleArray47 = new double[][] {};
        double[][] doubleArray48 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray47);
        double[] doubleArray50 = new double[] { 1 };
        double[] doubleArray52 = new double[] { 1 };
        double[] doubleArray54 = new double[] { 1 };
        double[] doubleArray56 = new double[] { 1 };
        double[] doubleArray58 = new double[] { 1 };
        double[][] doubleArray59 = new double[][] { doubleArray50, doubleArray52, doubleArray54, doubleArray56, doubleArray58 };
        int[] intArray60 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray59, intArray60);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray47, intArray60);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray46, intArray60);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray0, intArray60);
        java.lang.Class<?> wildcardClass65 = doubleArray0.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[]");
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[]");
        org.junit.Assert.assertNotNull(wildcardClass65);
    }

    @Test
    public void test0795() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0795");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray30 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray29);
        double[][] doubleArray31 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        double[][] doubleArray32 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray31);
        double[][] doubleArray33 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray31);
        double[][] doubleArray34 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray31);
        double[][] doubleArray35 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray34);
        double[][] doubleArray36 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray35);
        java.lang.Class<?> wildcardClass37 = doubleArray36.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertNotNull(wildcardClass37);
    }

    @Test
    public void test0796() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0796");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray30 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray29);
        double[][] doubleArray31 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        double[][] doubleArray32 = new double[][] {};
        double[][] doubleArray33 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray32);
        double[][] doubleArray34 = new double[][] {};
        double[][] doubleArray35 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray34);
        double[] doubleArray37 = new double[] { 1 };
        double[] doubleArray39 = new double[] { 1 };
        double[] doubleArray41 = new double[] { 1 };
        double[] doubleArray43 = new double[] { 1 };
        double[] doubleArray45 = new double[] { 1 };
        double[][] doubleArray46 = new double[][] { doubleArray37, doubleArray39, doubleArray41, doubleArray43, doubleArray45 };
        int[] intArray47 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray46, intArray47);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray34, intArray47);
        double[] doubleArray53 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray57 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray61 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray65 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray66 = new double[][] { doubleArray53, doubleArray57, doubleArray61, doubleArray65 };
        double[] doubleArray68 = new double[] { 1 };
        double[] doubleArray70 = new double[] { 1 };
        double[] doubleArray72 = new double[] { 1 };
        double[] doubleArray74 = new double[] { 1 };
        double[] doubleArray76 = new double[] { 1 };
        double[][] doubleArray77 = new double[][] { doubleArray68, doubleArray70, doubleArray72, doubleArray74, doubleArray76 };
        int[] intArray78 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray77, intArray78);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray66, intArray78);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray34, intArray78);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray33, intArray78);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray30, intArray78);
        double[][] doubleArray84 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        double[][] doubleArray85 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray84);
        java.lang.Class<?> wildcardClass86 = doubleArray84.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[]");
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray70), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray74), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[]");
        org.junit.Assert.assertNotNull(doubleArray84);
        org.junit.Assert.assertNotNull(doubleArray85);
        org.junit.Assert.assertNotNull(wildcardClass86);
    }

    @Test
    public void test0797() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0797");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray5 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray6 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray5);
        java.lang.Class<?> wildcardClass7 = doubleArray5.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(wildcardClass7);
    }

    @Test
    public void test0798() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0798");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray30 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray31 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray32 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray31);
        double[][] doubleArray33 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray32);
        double[][] doubleArray34 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray33);
        java.lang.Class<?> wildcardClass35 = doubleArray33.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertNotNull(wildcardClass35);
    }

    @Test
    public void test0799() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0799");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray30 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray31 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        double[][] doubleArray32 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray31);
        double[][] doubleArray33 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray32);
        int[] intArray34 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray33, intArray34);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray33);
    }

    @Test
    public void test0800() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0800");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[][] doubleArray5 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[][] doubleArray6 = new double[][] {};
        double[][] doubleArray7 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray6);
        double[][] doubleArray8 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray7);
        double[] doubleArray15 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray22 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray29 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray36 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray37 = new double[][] { doubleArray15, doubleArray22, doubleArray29, doubleArray36 };
        double[][] doubleArray38 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray37);
        double[] doubleArray40 = new double[] { 1 };
        double[] doubleArray42 = new double[] { 1 };
        double[] doubleArray44 = new double[] { 1 };
        double[] doubleArray46 = new double[] { 1 };
        double[] doubleArray48 = new double[] { 1 };
        double[][] doubleArray49 = new double[][] { doubleArray40, doubleArray42, doubleArray44, doubleArray46, doubleArray48 };
        int[] intArray50 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray49, intArray50);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray38, intArray50);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray7, intArray50);
        double[] doubleArray57 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray61 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray65 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray69 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray70 = new double[][] { doubleArray57, doubleArray61, doubleArray65, doubleArray69 };
        double[] doubleArray72 = new double[] { 1 };
        double[] doubleArray74 = new double[] { 1 };
        double[] doubleArray76 = new double[] { 1 };
        double[] doubleArray78 = new double[] { 1 };
        double[] doubleArray80 = new double[] { 1 };
        double[][] doubleArray81 = new double[][] { doubleArray72, doubleArray74, doubleArray76, doubleArray78, doubleArray80 };
        int[] intArray82 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray81, intArray82);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray70, intArray82);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray7, intArray82);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray3, intArray82);
        double[][] doubleArray87 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[][] doubleArray88 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray87);
        double[][] doubleArray89 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray88);
        double[][] doubleArray90 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray88);
        java.lang.Class<?> wildcardClass91 = doubleArray90.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[]");
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray74), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray78), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray80), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray81);
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[]");
        org.junit.Assert.assertNotNull(doubleArray87);
        org.junit.Assert.assertNotNull(doubleArray88);
        org.junit.Assert.assertNotNull(doubleArray89);
        org.junit.Assert.assertNotNull(doubleArray90);
        org.junit.Assert.assertNotNull(wildcardClass91);
    }

    @Test
    public void test0801() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0801");
        double[][] doubleArray0 = null;
        double[][] doubleArray1 = new double[][] {};
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray5 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray6 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray5);
        double[][] doubleArray7 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray5);
        double[][] doubleArray8 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray7);
        double[][] doubleArray9 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray7);
        double[][] doubleArray10 = null;
        double[][] doubleArray11 = null;
        double[][] doubleArray12 = new double[][] {};
        double[][] doubleArray13 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray12);
        double[][] doubleArray14 = new double[][] {};
        double[][] doubleArray15 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray14);
        double[][] doubleArray16 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray15);
        double[] doubleArray20 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray24 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray28 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray32 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray33 = new double[][] { doubleArray20, doubleArray24, doubleArray28, doubleArray32 };
        double[] doubleArray35 = new double[] { 1 };
        double[] doubleArray37 = new double[] { 1 };
        double[] doubleArray39 = new double[] { 1 };
        double[] doubleArray41 = new double[] { 1 };
        double[] doubleArray43 = new double[] { 1 };
        double[][] doubleArray44 = new double[][] { doubleArray35, doubleArray37, doubleArray39, doubleArray41, doubleArray43 };
        int[] intArray45 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray44, intArray45);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray33, intArray45);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray15, intArray45);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray13, intArray45);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray11, intArray45);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray10, intArray45);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray9, intArray45);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray0, intArray45);
        java.lang.Class<?> wildcardClass54 = intArray45.getClass();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[]");
        org.junit.Assert.assertNotNull(wildcardClass54);
    }

    @Test
    public void test0802() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0802");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray5 = new double[][] {};
        double[][] doubleArray6 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray5);
        double[] doubleArray8 = new double[] { 1 };
        double[] doubleArray10 = new double[] { 1 };
        double[] doubleArray12 = new double[] { 1 };
        double[] doubleArray14 = new double[] { 1 };
        double[] doubleArray16 = new double[] { 1 };
        double[][] doubleArray17 = new double[][] { doubleArray8, doubleArray10, doubleArray12, doubleArray14, doubleArray16 };
        int[] intArray18 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray17, intArray18);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray5, intArray18);
        double[] doubleArray24 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray28 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray32 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray36 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray37 = new double[][] { doubleArray24, doubleArray28, doubleArray32, doubleArray36 };
        double[] doubleArray39 = new double[] { 1 };
        double[] doubleArray41 = new double[] { 1 };
        double[] doubleArray43 = new double[] { 1 };
        double[] doubleArray45 = new double[] { 1 };
        double[] doubleArray47 = new double[] { 1 };
        double[][] doubleArray48 = new double[][] { doubleArray39, doubleArray41, doubleArray43, doubleArray45, doubleArray47 };
        int[] intArray49 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray48, intArray49);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray37, intArray49);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray5, intArray49);
        double[] doubleArray54 = new double[] { 1 };
        double[] doubleArray56 = new double[] { 1 };
        double[] doubleArray58 = new double[] { 1 };
        double[] doubleArray60 = new double[] { 1 };
        double[] doubleArray62 = new double[] { 1 };
        double[][] doubleArray63 = new double[][] { doubleArray54, doubleArray56, doubleArray58, doubleArray60, doubleArray62 };
        int[] intArray64 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray63, intArray64);
        double[][] doubleArray66 = new double[][] {};
        double[][] doubleArray67 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray66);
        int[] intArray68 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray67, intArray68);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray63, intArray68);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray5, intArray68);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray0, intArray68);
        int[] intArray73 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray0, intArray73);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[]");
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[]");
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[]");
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[]");
    }

    @Test
    public void test0803() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0803");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[] doubleArray3 = new double[] { 1 };
        double[] doubleArray5 = new double[] { 1 };
        double[] doubleArray7 = new double[] { 1 };
        double[] doubleArray9 = new double[] { 1 };
        double[] doubleArray11 = new double[] { 1 };
        double[][] doubleArray12 = new double[][] { doubleArray3, doubleArray5, doubleArray7, doubleArray9, doubleArray11 };
        int[] intArray13 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray12, intArray13);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray0, intArray13);
        double[][] doubleArray16 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray17 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray16);
        double[][] doubleArray18 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray17);
        double[][] doubleArray19 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray17);
        double[][] doubleArray20 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray19);
        double[][] doubleArray21 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray19);
        java.lang.Class<?> wildcardClass22 = doubleArray19.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertNotNull(wildcardClass22);
    }

    @Test
    public void test0804() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0804");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray4 = new double[][] {};
        double[][] doubleArray5 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray4);
        int[] intArray6 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray5, intArray6);
        double[][] doubleArray8 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray5);
        double[] doubleArray15 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray22 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray29 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray36 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray37 = new double[][] { doubleArray15, doubleArray22, doubleArray29, doubleArray36 };
        double[][] doubleArray38 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray37);
        double[] doubleArray45 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray52 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray59 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray66 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray67 = new double[][] { doubleArray45, doubleArray52, doubleArray59, doubleArray66 };
        double[][] doubleArray68 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray67);
        double[][] doubleArray69 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray67);
        double[][] doubleArray70 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray67);
        double[][] doubleArray71 = new double[][] {};
        double[][] doubleArray72 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray71);
        int[] intArray73 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray72, intArray73);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray70, intArray73);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray38, intArray73);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray8, intArray73);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray2, intArray73);
        java.lang.Class<?> wildcardClass79 = intArray73.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray66), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[]");
        org.junit.Assert.assertNotNull(wildcardClass79);
    }

    @Test
    public void test0805() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0805");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[] doubleArray8 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray12 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray16 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray20 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray21 = new double[][] { doubleArray8, doubleArray12, doubleArray16, doubleArray20 };
        double[] doubleArray23 = new double[] { 1 };
        double[] doubleArray25 = new double[] { 1 };
        double[] doubleArray27 = new double[] { 1 };
        double[] doubleArray29 = new double[] { 1 };
        double[] doubleArray31 = new double[] { 1 };
        double[][] doubleArray32 = new double[][] { doubleArray23, doubleArray25, doubleArray27, doubleArray29, doubleArray31 };
        int[] intArray33 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray32, intArray33);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray21, intArray33);
        double[][] doubleArray36 = new double[][] {};
        double[][] doubleArray37 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray36);
        double[][] doubleArray38 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray37);
        double[][] doubleArray39 = new double[][] {};
        double[][] doubleArray40 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray39);
        double[][] doubleArray41 = new double[][] {};
        double[][] doubleArray42 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray41);
        double[] doubleArray44 = new double[] { 1 };
        double[] doubleArray46 = new double[] { 1 };
        double[] doubleArray48 = new double[] { 1 };
        double[] doubleArray50 = new double[] { 1 };
        double[] doubleArray52 = new double[] { 1 };
        double[][] doubleArray53 = new double[][] { doubleArray44, doubleArray46, doubleArray48, doubleArray50, doubleArray52 };
        int[] intArray54 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray53, intArray54);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray41, intArray54);
        double[] doubleArray60 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray64 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray68 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray72 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray73 = new double[][] { doubleArray60, doubleArray64, doubleArray68, doubleArray72 };
        double[] doubleArray75 = new double[] { 1 };
        double[] doubleArray77 = new double[] { 1 };
        double[] doubleArray79 = new double[] { 1 };
        double[] doubleArray81 = new double[] { 1 };
        double[] doubleArray83 = new double[] { 1 };
        double[][] doubleArray84 = new double[][] { doubleArray75, doubleArray77, doubleArray79, doubleArray81, doubleArray83 };
        int[] intArray85 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray84, intArray85);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray73, intArray85);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray41, intArray85);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray40, intArray85);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray38, intArray85);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray21, intArray85);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray3, intArray85);
        double[][] doubleArray93 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[][] doubleArray94 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[][] doubleArray95 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray94);
        double[][] doubleArray96 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray95);
        double[][] doubleArray97 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray95);
        double[][] doubleArray98 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray97);
        java.lang.Class<?> wildcardClass99 = doubleArray98.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[]");
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray75), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray77), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray79), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray81), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray83), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray84);
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray85), "[]");
        org.junit.Assert.assertNotNull(doubleArray93);
        org.junit.Assert.assertNotNull(doubleArray94);
        org.junit.Assert.assertNotNull(doubleArray95);
        org.junit.Assert.assertNotNull(doubleArray96);
        org.junit.Assert.assertNotNull(doubleArray97);
        org.junit.Assert.assertNotNull(doubleArray98);
        org.junit.Assert.assertNotNull(wildcardClass99);
    }

    @Test
    public void test0806() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0806");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[] doubleArray3 = new double[] { 1 };
        double[] doubleArray5 = new double[] { 1 };
        double[] doubleArray7 = new double[] { 1 };
        double[] doubleArray9 = new double[] { 1 };
        double[] doubleArray11 = new double[] { 1 };
        double[][] doubleArray12 = new double[][] { doubleArray3, doubleArray5, doubleArray7, doubleArray9, doubleArray11 };
        int[] intArray13 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray12, intArray13);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray0, intArray13);
        double[] doubleArray19 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray23 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray27 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray31 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray32 = new double[][] { doubleArray19, doubleArray23, doubleArray27, doubleArray31 };
        double[] doubleArray34 = new double[] { 1 };
        double[] doubleArray36 = new double[] { 1 };
        double[] doubleArray38 = new double[] { 1 };
        double[] doubleArray40 = new double[] { 1 };
        double[] doubleArray42 = new double[] { 1 };
        double[][] doubleArray43 = new double[][] { doubleArray34, doubleArray36, doubleArray38, doubleArray40, doubleArray42 };
        int[] intArray44 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray43, intArray44);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray32, intArray44);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray0, intArray44);
        double[] doubleArray49 = new double[] { 1 };
        double[] doubleArray51 = new double[] { 1 };
        double[] doubleArray53 = new double[] { 1 };
        double[] doubleArray55 = new double[] { 1 };
        double[] doubleArray57 = new double[] { 1 };
        double[][] doubleArray58 = new double[][] { doubleArray49, doubleArray51, doubleArray53, doubleArray55, doubleArray57 };
        int[] intArray59 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray58, intArray59);
        double[][] doubleArray61 = new double[][] {};
        double[][] doubleArray62 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray61);
        int[] intArray63 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray62, intArray63);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray58, intArray63);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray0, intArray63);
        double[][] doubleArray67 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray68 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray67);
        double[][] doubleArray69 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray67);
        double[][] doubleArray70 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray67);
        double[][] doubleArray71 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray67);
        java.lang.Class<?> wildcardClass72 = doubleArray71.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[]");
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertNotNull(wildcardClass72);
    }

    @Test
    public void test0807() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0807");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray30 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray29);
        double[][] doubleArray31 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        double[][] doubleArray32 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray31);
        double[][] doubleArray33 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray31);
        double[][] doubleArray34 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray31);
        double[][] doubleArray35 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray34);
        double[][] doubleArray36 = new double[][] {};
        double[][] doubleArray37 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray36);
        double[][] doubleArray38 = new double[][] {};
        double[][] doubleArray39 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray38);
        double[][] doubleArray40 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray39);
        double[] doubleArray44 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray48 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray52 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray56 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray57 = new double[][] { doubleArray44, doubleArray48, doubleArray52, doubleArray56 };
        double[] doubleArray59 = new double[] { 1 };
        double[] doubleArray61 = new double[] { 1 };
        double[] doubleArray63 = new double[] { 1 };
        double[] doubleArray65 = new double[] { 1 };
        double[] doubleArray67 = new double[] { 1 };
        double[][] doubleArray68 = new double[][] { doubleArray59, doubleArray61, doubleArray63, doubleArray65, doubleArray67 };
        int[] intArray69 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray68, intArray69);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray57, intArray69);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray39, intArray69);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray37, intArray69);
        double[][] doubleArray74 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray37);
        double[][] doubleArray75 = new double[][] {};
        double[][] doubleArray76 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray75);
        double[] doubleArray78 = new double[] { 1 };
        double[] doubleArray80 = new double[] { 1 };
        double[] doubleArray82 = new double[] { 1 };
        double[] doubleArray84 = new double[] { 1 };
        double[] doubleArray86 = new double[] { 1 };
        double[][] doubleArray87 = new double[][] { doubleArray78, doubleArray80, doubleArray82, doubleArray84, doubleArray86 };
        int[] intArray88 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray87, intArray88);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray75, intArray88);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray37, intArray88);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray35, intArray88);
        double[][] doubleArray93 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray35);
        java.lang.Class<?> wildcardClass94 = doubleArray35.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[]");
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray78), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray80), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray82), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray84), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray86), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray87);
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray88), "[]");
        org.junit.Assert.assertNotNull(doubleArray93);
        org.junit.Assert.assertNotNull(wildcardClass94);
    }

    @Test
    public void test0808() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0808");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[] doubleArray31 = new double[] { 1 };
        double[] doubleArray33 = new double[] { 1 };
        double[] doubleArray35 = new double[] { 1 };
        double[] doubleArray37 = new double[] { 1 };
        double[] doubleArray39 = new double[] { 1 };
        double[][] doubleArray40 = new double[][] { doubleArray31, doubleArray33, doubleArray35, doubleArray37, doubleArray39 };
        int[] intArray41 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray40, intArray41);
        double[][] doubleArray43 = new double[][] {};
        double[][] doubleArray44 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray43);
        int[] intArray45 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray44, intArray45);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray40, intArray45);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray28, intArray45);
        double[][] doubleArray49 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray50 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray51 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray50);
        double[][] doubleArray52 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray51);
        java.lang.Class<?> wildcardClass53 = doubleArray52.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertNotNull(wildcardClass53);
    }

    @Test
    public void test0809() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0809");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[] doubleArray31 = new double[] { 1 };
        double[] doubleArray33 = new double[] { 1 };
        double[] doubleArray35 = new double[] { 1 };
        double[] doubleArray37 = new double[] { 1 };
        double[] doubleArray39 = new double[] { 1 };
        double[][] doubleArray40 = new double[][] { doubleArray31, doubleArray33, doubleArray35, doubleArray37, doubleArray39 };
        int[] intArray41 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray40, intArray41);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray29, intArray41);
        double[] doubleArray50 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray57 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray64 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray71 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray72 = new double[][] { doubleArray50, doubleArray57, doubleArray64, doubleArray71 };
        double[][] doubleArray73 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray72);
        double[] doubleArray75 = new double[] { 1 };
        double[] doubleArray77 = new double[] { 1 };
        double[] doubleArray79 = new double[] { 1 };
        double[] doubleArray81 = new double[] { 1 };
        double[] doubleArray83 = new double[] { 1 };
        double[][] doubleArray84 = new double[][] { doubleArray75, doubleArray77, doubleArray79, doubleArray81, doubleArray83 };
        int[] intArray85 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray84, intArray85);
        double[][] doubleArray87 = new double[][] {};
        double[][] doubleArray88 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray87);
        int[] intArray89 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray88, intArray89);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray84, intArray89);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray72, intArray89);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray29, intArray89);
        double[][] doubleArray94 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray29);
        double[][] doubleArray95 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray29);
        double[][] doubleArray96 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray95);
        java.lang.Class<?> wildcardClass97 = doubleArray95.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[]");
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray71), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray75), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray77), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray79), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray81), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray83), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray84);
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray85), "[]");
        org.junit.Assert.assertNotNull(doubleArray87);
        org.junit.Assert.assertNotNull(doubleArray88);
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray89), "[]");
        org.junit.Assert.assertNotNull(doubleArray94);
        org.junit.Assert.assertNotNull(doubleArray95);
        org.junit.Assert.assertNotNull(doubleArray96);
        org.junit.Assert.assertNotNull(wildcardClass97);
    }

    @Test
    public void test0810() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0810");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray30 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray29);
        double[][] doubleArray31 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        double[][] doubleArray32 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray31);
        double[][] doubleArray33 = new double[][] {};
        double[][] doubleArray34 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray33);
        double[][] doubleArray35 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray34);
        double[][] doubleArray36 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray34);
        double[][] doubleArray37 = new double[][] {};
        double[][] doubleArray38 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray37);
        double[][] doubleArray39 = new double[][] {};
        double[][] doubleArray40 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray39);
        double[] doubleArray42 = new double[] { 1 };
        double[] doubleArray44 = new double[] { 1 };
        double[] doubleArray46 = new double[] { 1 };
        double[] doubleArray48 = new double[] { 1 };
        double[] doubleArray50 = new double[] { 1 };
        double[][] doubleArray51 = new double[][] { doubleArray42, doubleArray44, doubleArray46, doubleArray48, doubleArray50 };
        int[] intArray52 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray51, intArray52);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray39, intArray52);
        double[] doubleArray58 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray62 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray66 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray70 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray71 = new double[][] { doubleArray58, doubleArray62, doubleArray66, doubleArray70 };
        double[] doubleArray73 = new double[] { 1 };
        double[] doubleArray75 = new double[] { 1 };
        double[] doubleArray77 = new double[] { 1 };
        double[] doubleArray79 = new double[] { 1 };
        double[] doubleArray81 = new double[] { 1 };
        double[][] doubleArray82 = new double[][] { doubleArray73, doubleArray75, doubleArray77, doubleArray79, doubleArray81 };
        int[] intArray83 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray82, intArray83);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray71, intArray83);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray39, intArray83);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray37, intArray83);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray34, intArray83);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray32, intArray83);
        java.lang.Class<?> wildcardClass90 = intArray83.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[]");
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray66), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray70), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray73), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray75), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray77), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray79), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray81), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray82);
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray83), "[]");
        org.junit.Assert.assertNotNull(wildcardClass90);
    }

    @Test
    public void test0811() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0811");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        int[] intArray2 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray1, intArray2);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray5 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray6 = new double[][] {};
        double[][] doubleArray7 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray6);
        double[][] doubleArray8 = new double[][] {};
        double[][] doubleArray9 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray8);
        double[] doubleArray11 = new double[] { 1 };
        double[] doubleArray13 = new double[] { 1 };
        double[] doubleArray15 = new double[] { 1 };
        double[] doubleArray17 = new double[] { 1 };
        double[] doubleArray19 = new double[] { 1 };
        double[][] doubleArray20 = new double[][] { doubleArray11, doubleArray13, doubleArray15, doubleArray17, doubleArray19 };
        int[] intArray21 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray20, intArray21);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray8, intArray21);
        double[] doubleArray27 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray31 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray35 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray39 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray40 = new double[][] { doubleArray27, doubleArray31, doubleArray35, doubleArray39 };
        double[] doubleArray42 = new double[] { 1 };
        double[] doubleArray44 = new double[] { 1 };
        double[] doubleArray46 = new double[] { 1 };
        double[] doubleArray48 = new double[] { 1 };
        double[] doubleArray50 = new double[] { 1 };
        double[][] doubleArray51 = new double[][] { doubleArray42, doubleArray44, doubleArray46, doubleArray48, doubleArray50 };
        int[] intArray52 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray51, intArray52);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray40, intArray52);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray8, intArray52);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray7, intArray52);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray1, intArray52);
        double[][] doubleArray58 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray59 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray58);
        double[][] doubleArray60 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray58);
        java.lang.Class<?> wildcardClass61 = doubleArray60.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[]");
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertNotNull(wildcardClass61);
    }

    @Test
    public void test0812() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0812");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = new double[][] {};
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[] doubleArray8 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray12 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray16 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray20 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray21 = new double[][] { doubleArray8, doubleArray12, doubleArray16, doubleArray20 };
        double[] doubleArray23 = new double[] { 1 };
        double[] doubleArray25 = new double[] { 1 };
        double[] doubleArray27 = new double[] { 1 };
        double[] doubleArray29 = new double[] { 1 };
        double[] doubleArray31 = new double[] { 1 };
        double[][] doubleArray32 = new double[][] { doubleArray23, doubleArray25, doubleArray27, doubleArray29, doubleArray31 };
        int[] intArray33 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray32, intArray33);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray21, intArray33);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray3, intArray33);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray1, intArray33);
        double[][] doubleArray38 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray39 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray38);
        double[][] doubleArray40 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray39);
        double[][] doubleArray41 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray39);
        double[][] doubleArray42 = new double[][] {};
        double[][] doubleArray43 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray42);
        double[][] doubleArray44 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray43);
        double[] doubleArray48 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray52 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray56 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray60 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray61 = new double[][] { doubleArray48, doubleArray52, doubleArray56, doubleArray60 };
        double[] doubleArray63 = new double[] { 1 };
        double[] doubleArray65 = new double[] { 1 };
        double[] doubleArray67 = new double[] { 1 };
        double[] doubleArray69 = new double[] { 1 };
        double[] doubleArray71 = new double[] { 1 };
        double[][] doubleArray72 = new double[][] { doubleArray63, doubleArray65, doubleArray67, doubleArray69, doubleArray71 };
        int[] intArray73 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray72, intArray73);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray61, intArray73);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray44, intArray73);
        double[][] doubleArray77 = null;
        double[] doubleArray79 = new double[] { 1 };
        double[] doubleArray81 = new double[] { 1 };
        double[] doubleArray83 = new double[] { 1 };
        double[] doubleArray85 = new double[] { 1 };
        double[] doubleArray87 = new double[] { 1 };
        double[][] doubleArray88 = new double[][] { doubleArray79, doubleArray81, doubleArray83, doubleArray85, doubleArray87 };
        int[] intArray89 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray88, intArray89);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray77, intArray89);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray44, intArray89);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray41, intArray89);
        double[][] doubleArray94 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray41);
        java.lang.Class<?> wildcardClass95 = doubleArray41.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray71), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[]");
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray79), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray81), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray83), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray85), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray87), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray88);
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray89), "[]");
        org.junit.Assert.assertNotNull(doubleArray94);
        org.junit.Assert.assertNotNull(wildcardClass95);
    }

    @Test
    public void test0813() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0813");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray30 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray29);
        double[][] doubleArray31 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        double[][] doubleArray32 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray31);
        double[][] doubleArray33 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray31);
        double[] doubleArray35 = new double[] { 1 };
        double[] doubleArray37 = new double[] { 1 };
        double[] doubleArray39 = new double[] { 1 };
        double[] doubleArray41 = new double[] { 1 };
        double[] doubleArray43 = new double[] { 1 };
        double[][] doubleArray44 = new double[][] { doubleArray35, doubleArray37, doubleArray39, doubleArray41, doubleArray43 };
        int[] intArray45 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray44, intArray45);
        double[][] doubleArray47 = new double[][] {};
        double[][] doubleArray48 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray47);
        int[] intArray49 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray48, intArray49);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray44, intArray49);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray33, intArray49);
        double[][] doubleArray53 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray33);
        double[] doubleArray60 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray67 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray74 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray81 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray82 = new double[][] { doubleArray60, doubleArray67, doubleArray74, doubleArray81 };
        double[][] doubleArray83 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray82);
        double[][] doubleArray84 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray82);
        double[][] doubleArray85 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray82);
        double[][] doubleArray86 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray85);
        double[][] doubleArray87 = new double[][] {};
        double[][] doubleArray88 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray87);
        int[] intArray89 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray88, intArray89);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray86, intArray89);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray33, intArray89);
        java.lang.Class<?> wildcardClass93 = intArray89.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[]");
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[]");
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray74), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray81), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray82);
        org.junit.Assert.assertNotNull(doubleArray83);
        org.junit.Assert.assertNotNull(doubleArray84);
        org.junit.Assert.assertNotNull(doubleArray85);
        org.junit.Assert.assertNotNull(doubleArray86);
        org.junit.Assert.assertNotNull(doubleArray87);
        org.junit.Assert.assertNotNull(doubleArray88);
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray89), "[]");
        org.junit.Assert.assertNotNull(wildcardClass93);
    }

    @Test
    public void test0814() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0814");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray5 = new double[][] {};
        double[][] doubleArray6 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray5);
        double[][] doubleArray7 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray6);
        double[] doubleArray11 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray15 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray19 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray23 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray24 = new double[][] { doubleArray11, doubleArray15, doubleArray19, doubleArray23 };
        double[] doubleArray26 = new double[] { 1 };
        double[] doubleArray28 = new double[] { 1 };
        double[] doubleArray30 = new double[] { 1 };
        double[] doubleArray32 = new double[] { 1 };
        double[] doubleArray34 = new double[] { 1 };
        double[][] doubleArray35 = new double[][] { doubleArray26, doubleArray28, doubleArray30, doubleArray32, doubleArray34 };
        int[] intArray36 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray35, intArray36);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray24, intArray36);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray7, intArray36);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray0, intArray36);
        double[][] doubleArray41 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray42 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray43 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        java.lang.Class<?> wildcardClass44 = doubleArray43.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(wildcardClass44);
    }

    @Test
    public void test0815() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0815");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[] doubleArray3 = new double[] { 1 };
        double[] doubleArray5 = new double[] { 1 };
        double[] doubleArray7 = new double[] { 1 };
        double[] doubleArray9 = new double[] { 1 };
        double[] doubleArray11 = new double[] { 1 };
        double[][] doubleArray12 = new double[][] { doubleArray3, doubleArray5, doubleArray7, doubleArray9, doubleArray11 };
        int[] intArray13 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray12, intArray13);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray0, intArray13);
        double[] doubleArray19 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray23 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray27 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray31 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray32 = new double[][] { doubleArray19, doubleArray23, doubleArray27, doubleArray31 };
        double[] doubleArray34 = new double[] { 1 };
        double[] doubleArray36 = new double[] { 1 };
        double[] doubleArray38 = new double[] { 1 };
        double[] doubleArray40 = new double[] { 1 };
        double[] doubleArray42 = new double[] { 1 };
        double[][] doubleArray43 = new double[][] { doubleArray34, doubleArray36, doubleArray38, doubleArray40, doubleArray42 };
        int[] intArray44 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray43, intArray44);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray32, intArray44);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray0, intArray44);
        double[][] doubleArray48 = new double[][] {};
        double[][] doubleArray49 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray48);
        double[] doubleArray51 = new double[] { 1 };
        double[] doubleArray53 = new double[] { 1 };
        double[] doubleArray55 = new double[] { 1 };
        double[] doubleArray57 = new double[] { 1 };
        double[] doubleArray59 = new double[] { 1 };
        double[][] doubleArray60 = new double[][] { doubleArray51, doubleArray53, doubleArray55, doubleArray57, doubleArray59 };
        int[] intArray61 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray60, intArray61);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray48, intArray61);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray0, intArray61);
        double[][] doubleArray65 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray66 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray67 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray66);
        java.lang.Class<?> wildcardClass68 = doubleArray66.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[]");
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertNotNull(wildcardClass68);
    }

    @Test
    public void test0816() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0816");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray30 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray29);
        double[][] doubleArray31 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        double[][] doubleArray32 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray31);
        double[][] doubleArray33 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray31);
        double[][] doubleArray34 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray33);
        double[] doubleArray36 = new double[] { 1 };
        double[] doubleArray38 = new double[] { 1 };
        double[] doubleArray40 = new double[] { 1 };
        double[] doubleArray42 = new double[] { 1 };
        double[] doubleArray44 = new double[] { 1 };
        double[][] doubleArray45 = new double[][] { doubleArray36, doubleArray38, doubleArray40, doubleArray42, doubleArray44 };
        int[] intArray46 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray45, intArray46);
        double[] doubleArray54 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray61 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray68 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray75 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray76 = new double[][] { doubleArray54, doubleArray61, doubleArray68, doubleArray75 };
        double[][] doubleArray77 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray76);
        double[] doubleArray79 = new double[] { 1 };
        double[] doubleArray81 = new double[] { 1 };
        double[] doubleArray83 = new double[] { 1 };
        double[] doubleArray85 = new double[] { 1 };
        double[] doubleArray87 = new double[] { 1 };
        double[][] doubleArray88 = new double[][] { doubleArray79, doubleArray81, doubleArray83, doubleArray85, doubleArray87 };
        int[] intArray89 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray88, intArray89);
        double[][] doubleArray91 = new double[][] {};
        double[][] doubleArray92 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray91);
        int[] intArray93 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray92, intArray93);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray88, intArray93);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray76, intArray93);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray45, intArray93);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray34, intArray93);
        java.lang.Class<?> wildcardClass99 = doubleArray34.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[]");
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray75), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray79), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray81), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray83), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray85), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray87), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray88);
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray89), "[]");
        org.junit.Assert.assertNotNull(doubleArray91);
        org.junit.Assert.assertNotNull(doubleArray92);
        org.junit.Assert.assertNotNull(intArray93);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray93), "[]");
        org.junit.Assert.assertNotNull(wildcardClass99);
    }

    @Test
    public void test0817() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0817");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[] doubleArray6 = new double[] { 1 };
        double[] doubleArray8 = new double[] { 1 };
        double[] doubleArray10 = new double[] { 1 };
        double[] doubleArray12 = new double[] { 1 };
        double[] doubleArray14 = new double[] { 1 };
        double[][] doubleArray15 = new double[][] { doubleArray6, doubleArray8, doubleArray10, doubleArray12, doubleArray14 };
        int[] intArray16 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray15, intArray16);
        double[][] doubleArray18 = new double[][] {};
        double[][] doubleArray19 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray18);
        int[] intArray20 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray19, intArray20);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray15, intArray20);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray3, intArray20);
        double[][] doubleArray24 = new double[][] {};
        double[][] doubleArray25 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray24);
        double[][] doubleArray26 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray25);
        double[] doubleArray30 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray34 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray38 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray42 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray43 = new double[][] { doubleArray30, doubleArray34, doubleArray38, doubleArray42 };
        double[] doubleArray45 = new double[] { 1 };
        double[] doubleArray47 = new double[] { 1 };
        double[] doubleArray49 = new double[] { 1 };
        double[] doubleArray51 = new double[] { 1 };
        double[] doubleArray53 = new double[] { 1 };
        double[][] doubleArray54 = new double[][] { doubleArray45, doubleArray47, doubleArray49, doubleArray51, doubleArray53 };
        int[] intArray55 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray54, intArray55);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray43, intArray55);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray25, intArray55);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray3, intArray55);
        java.lang.Class<?> wildcardClass60 = intArray55.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[]");
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[]");
        org.junit.Assert.assertNotNull(wildcardClass60);
    }

    @Test
    public void test0818() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0818");
        double[][] doubleArray0 = null;
        double[][] doubleArray1 = new double[][] {};
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray5 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray6 = new double[][] {};
        double[][] doubleArray7 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray6);
        double[] doubleArray9 = new double[] { 1 };
        double[] doubleArray11 = new double[] { 1 };
        double[] doubleArray13 = new double[] { 1 };
        double[] doubleArray15 = new double[] { 1 };
        double[] doubleArray17 = new double[] { 1 };
        double[][] doubleArray18 = new double[][] { doubleArray9, doubleArray11, doubleArray13, doubleArray15, doubleArray17 };
        int[] intArray19 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray18, intArray19);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray6, intArray19);
        double[] doubleArray25 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray29 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray33 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray37 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray38 = new double[][] { doubleArray25, doubleArray29, doubleArray33, doubleArray37 };
        double[] doubleArray40 = new double[] { 1 };
        double[] doubleArray42 = new double[] { 1 };
        double[] doubleArray44 = new double[] { 1 };
        double[] doubleArray46 = new double[] { 1 };
        double[] doubleArray48 = new double[] { 1 };
        double[][] doubleArray49 = new double[][] { doubleArray40, doubleArray42, doubleArray44, doubleArray46, doubleArray48 };
        int[] intArray50 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray49, intArray50);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray38, intArray50);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray6, intArray50);
        double[] doubleArray55 = new double[] { 1 };
        double[] doubleArray57 = new double[] { 1 };
        double[] doubleArray59 = new double[] { 1 };
        double[] doubleArray61 = new double[] { 1 };
        double[] doubleArray63 = new double[] { 1 };
        double[][] doubleArray64 = new double[][] { doubleArray55, doubleArray57, doubleArray59, doubleArray61, doubleArray63 };
        int[] intArray65 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray64, intArray65);
        double[][] doubleArray67 = new double[][] {};
        double[][] doubleArray68 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray67);
        int[] intArray69 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray68, intArray69);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray64, intArray69);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray6, intArray69);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray1, intArray69);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray0, intArray69);
        java.lang.Class<?> wildcardClass75 = intArray69.getClass();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[]");
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[]");
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[]");
        org.junit.Assert.assertNotNull(wildcardClass75);
    }

    @Test
    public void test0819() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0819");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[] doubleArray3 = new double[] { 1 };
        double[] doubleArray5 = new double[] { 1 };
        double[] doubleArray7 = new double[] { 1 };
        double[] doubleArray9 = new double[] { 1 };
        double[] doubleArray11 = new double[] { 1 };
        double[][] doubleArray12 = new double[][] { doubleArray3, doubleArray5, doubleArray7, doubleArray9, doubleArray11 };
        int[] intArray13 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray12, intArray13);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray0, intArray13);
        double[] doubleArray19 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray23 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray27 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray31 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray32 = new double[][] { doubleArray19, doubleArray23, doubleArray27, doubleArray31 };
        double[] doubleArray34 = new double[] { 1 };
        double[] doubleArray36 = new double[] { 1 };
        double[] doubleArray38 = new double[] { 1 };
        double[] doubleArray40 = new double[] { 1 };
        double[] doubleArray42 = new double[] { 1 };
        double[][] doubleArray43 = new double[][] { doubleArray34, doubleArray36, doubleArray38, doubleArray40, doubleArray42 };
        int[] intArray44 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray43, intArray44);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray32, intArray44);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray0, intArray44);
        double[][] doubleArray48 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray49 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray48);
        double[] doubleArray56 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray63 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray70 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray77 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray78 = new double[][] { doubleArray56, doubleArray63, doubleArray70, doubleArray77 };
        double[][] doubleArray79 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray78);
        double[] doubleArray81 = new double[] { 1 };
        double[] doubleArray83 = new double[] { 1 };
        double[] doubleArray85 = new double[] { 1 };
        double[] doubleArray87 = new double[] { 1 };
        double[] doubleArray89 = new double[] { 1 };
        double[][] doubleArray90 = new double[][] { doubleArray81, doubleArray83, doubleArray85, doubleArray87, doubleArray89 };
        int[] intArray91 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray90, intArray91);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray79, intArray91);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray49, intArray91);
        java.lang.Class<?> wildcardClass95 = doubleArray49.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray70), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray77), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertNotNull(doubleArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray81), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray83), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray85), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray87), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray89), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray90);
        org.junit.Assert.assertNotNull(intArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray91), "[]");
        org.junit.Assert.assertNotNull(wildcardClass95);
    }

    @Test
    public void test0820() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0820");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray30 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray29);
        double[][] doubleArray31 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        double[][] doubleArray32 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray31);
        double[][] doubleArray33 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray31);
        double[][] doubleArray34 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray33);
        double[][] doubleArray35 = null;
        double[][] doubleArray36 = new double[][] {};
        double[][] doubleArray37 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray36);
        double[][] doubleArray38 = new double[][] {};
        double[][] doubleArray39 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray38);
        double[][] doubleArray40 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray39);
        double[] doubleArray44 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray48 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray52 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray56 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray57 = new double[][] { doubleArray44, doubleArray48, doubleArray52, doubleArray56 };
        double[] doubleArray59 = new double[] { 1 };
        double[] doubleArray61 = new double[] { 1 };
        double[] doubleArray63 = new double[] { 1 };
        double[] doubleArray65 = new double[] { 1 };
        double[] doubleArray67 = new double[] { 1 };
        double[][] doubleArray68 = new double[][] { doubleArray59, doubleArray61, doubleArray63, doubleArray65, doubleArray67 };
        int[] intArray69 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray68, intArray69);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray57, intArray69);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray39, intArray69);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray37, intArray69);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray35, intArray69);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray34, intArray69);
        java.lang.Class<?> wildcardClass76 = doubleArray34.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[]");
        org.junit.Assert.assertNotNull(wildcardClass76);
    }

    @Test
    public void test0821() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0821");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray4 = new double[][] {};
        double[][] doubleArray5 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray4);
        double[][] doubleArray6 = new double[][] {};
        double[][] doubleArray7 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray6);
        double[] doubleArray9 = new double[] { 1 };
        double[] doubleArray11 = new double[] { 1 };
        double[] doubleArray13 = new double[] { 1 };
        double[] doubleArray15 = new double[] { 1 };
        double[] doubleArray17 = new double[] { 1 };
        double[][] doubleArray18 = new double[][] { doubleArray9, doubleArray11, doubleArray13, doubleArray15, doubleArray17 };
        int[] intArray19 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray18, intArray19);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray6, intArray19);
        double[] doubleArray25 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray29 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray33 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray37 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray38 = new double[][] { doubleArray25, doubleArray29, doubleArray33, doubleArray37 };
        double[] doubleArray40 = new double[] { 1 };
        double[] doubleArray42 = new double[] { 1 };
        double[] doubleArray44 = new double[] { 1 };
        double[] doubleArray46 = new double[] { 1 };
        double[] doubleArray48 = new double[] { 1 };
        double[][] doubleArray49 = new double[][] { doubleArray40, doubleArray42, doubleArray44, doubleArray46, doubleArray48 };
        int[] intArray50 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray49, intArray50);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray38, intArray50);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray6, intArray50);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray4, intArray50);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray1, intArray50);
        double[][] doubleArray56 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray57 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        java.lang.Class<?> wildcardClass58 = doubleArray1.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[]");
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertNotNull(wildcardClass58);
    }

    @Test
    public void test0822() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0822");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[] doubleArray11 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray18 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray25 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray32 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray33 = new double[][] { doubleArray11, doubleArray18, doubleArray25, doubleArray32 };
        double[][] doubleArray34 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray33);
        double[][] doubleArray35 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray33);
        double[][] doubleArray36 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray33);
        double[][] doubleArray37 = new double[][] {};
        double[][] doubleArray38 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray37);
        int[] intArray39 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray38, intArray39);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray36, intArray39);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray4, intArray39);
        java.lang.Class<?> wildcardClass43 = doubleArray4.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[]");
        org.junit.Assert.assertNotNull(wildcardClass43);
    }

    @Test
    public void test0823() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0823");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        int[] intArray2 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray1, intArray2);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray5 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray6 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray5);
        double[][] doubleArray7 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray6);
        java.lang.Class<?> wildcardClass8 = doubleArray7.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertNotNull(wildcardClass8);
    }

    @Test
    public void test0824() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0824");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray4 = new double[][] {};
        double[][] doubleArray5 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray4);
        double[][] doubleArray6 = new double[][] {};
        double[][] doubleArray7 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray6);
        double[] doubleArray9 = new double[] { 1 };
        double[] doubleArray11 = new double[] { 1 };
        double[] doubleArray13 = new double[] { 1 };
        double[] doubleArray15 = new double[] { 1 };
        double[] doubleArray17 = new double[] { 1 };
        double[][] doubleArray18 = new double[][] { doubleArray9, doubleArray11, doubleArray13, doubleArray15, doubleArray17 };
        int[] intArray19 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray18, intArray19);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray6, intArray19);
        double[] doubleArray25 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray29 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray33 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray37 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray38 = new double[][] { doubleArray25, doubleArray29, doubleArray33, doubleArray37 };
        double[] doubleArray40 = new double[] { 1 };
        double[] doubleArray42 = new double[] { 1 };
        double[] doubleArray44 = new double[] { 1 };
        double[] doubleArray46 = new double[] { 1 };
        double[] doubleArray48 = new double[] { 1 };
        double[][] doubleArray49 = new double[][] { doubleArray40, doubleArray42, doubleArray44, doubleArray46, doubleArray48 };
        int[] intArray50 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray49, intArray50);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray38, intArray50);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray6, intArray50);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray4, intArray50);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray1, intArray50);
        double[][] doubleArray56 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray57 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray58 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray57);
        java.lang.Class<?> wildcardClass59 = doubleArray58.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[]");
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertNotNull(wildcardClass59);
    }

    @Test
    public void test0825() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0825");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = new double[][] {};
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[] doubleArray5 = new double[] { 1 };
        double[] doubleArray7 = new double[] { 1 };
        double[] doubleArray9 = new double[] { 1 };
        double[] doubleArray11 = new double[] { 1 };
        double[] doubleArray13 = new double[] { 1 };
        double[][] doubleArray14 = new double[][] { doubleArray5, doubleArray7, doubleArray9, doubleArray11, doubleArray13 };
        int[] intArray15 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray14, intArray15);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray2, intArray15);
        double[] doubleArray21 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray25 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray29 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray33 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray34 = new double[][] { doubleArray21, doubleArray25, doubleArray29, doubleArray33 };
        double[] doubleArray36 = new double[] { 1 };
        double[] doubleArray38 = new double[] { 1 };
        double[] doubleArray40 = new double[] { 1 };
        double[] doubleArray42 = new double[] { 1 };
        double[] doubleArray44 = new double[] { 1 };
        double[][] doubleArray45 = new double[][] { doubleArray36, doubleArray38, doubleArray40, doubleArray42, doubleArray44 };
        int[] intArray46 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray45, intArray46);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray34, intArray46);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray2, intArray46);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray1, intArray46);
        double[][] doubleArray51 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray52 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        java.lang.Class<?> wildcardClass53 = doubleArray52.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertNotNull(wildcardClass53);
    }

    @Test
    public void test0826() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0826");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = new double[][] {};
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[] doubleArray5 = new double[] { 1 };
        double[] doubleArray7 = new double[] { 1 };
        double[] doubleArray9 = new double[] { 1 };
        double[] doubleArray11 = new double[] { 1 };
        double[] doubleArray13 = new double[] { 1 };
        double[][] doubleArray14 = new double[][] { doubleArray5, doubleArray7, doubleArray9, doubleArray11, doubleArray13 };
        int[] intArray15 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray14, intArray15);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray2, intArray15);
        double[] doubleArray21 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray25 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray29 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray33 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray34 = new double[][] { doubleArray21, doubleArray25, doubleArray29, doubleArray33 };
        double[] doubleArray36 = new double[] { 1 };
        double[] doubleArray38 = new double[] { 1 };
        double[] doubleArray40 = new double[] { 1 };
        double[] doubleArray42 = new double[] { 1 };
        double[] doubleArray44 = new double[] { 1 };
        double[][] doubleArray45 = new double[][] { doubleArray36, doubleArray38, doubleArray40, doubleArray42, doubleArray44 };
        int[] intArray46 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray45, intArray46);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray34, intArray46);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray2, intArray46);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray1, intArray46);
        double[] doubleArray52 = new double[] { 1 };
        double[] doubleArray54 = new double[] { 1 };
        double[] doubleArray56 = new double[] { 1 };
        double[] doubleArray58 = new double[] { 1 };
        double[] doubleArray60 = new double[] { 1 };
        double[][] doubleArray61 = new double[][] { doubleArray52, doubleArray54, doubleArray56, doubleArray58, doubleArray60 };
        int[] intArray62 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray61, intArray62);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray1, intArray62);
        double[][] doubleArray65 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray66 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray67 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray66);
        double[][] doubleArray68 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray67);
        double[][] doubleArray69 = null;
        double[] doubleArray71 = new double[] { 1 };
        double[] doubleArray73 = new double[] { 1 };
        double[] doubleArray75 = new double[] { 1 };
        double[] doubleArray77 = new double[] { 1 };
        double[] doubleArray79 = new double[] { 1 };
        double[][] doubleArray80 = new double[][] { doubleArray71, doubleArray73, doubleArray75, doubleArray77, doubleArray79 };
        int[] intArray81 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray80, intArray81);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray69, intArray81);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray68, intArray81);
        double[][] doubleArray85 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray68);
        java.lang.Class<?> wildcardClass86 = doubleArray68.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[]");
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[]");
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray71), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray73), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray75), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray77), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray79), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray81), "[]");
        org.junit.Assert.assertNotNull(doubleArray85);
        org.junit.Assert.assertNotNull(wildcardClass86);
    }

    @Test
    public void test0827() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0827");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[] doubleArray31 = new double[] { 1 };
        double[] doubleArray33 = new double[] { 1 };
        double[] doubleArray35 = new double[] { 1 };
        double[] doubleArray37 = new double[] { 1 };
        double[] doubleArray39 = new double[] { 1 };
        double[][] doubleArray40 = new double[][] { doubleArray31, doubleArray33, doubleArray35, doubleArray37, doubleArray39 };
        int[] intArray41 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray40, intArray41);
        double[][] doubleArray43 = new double[][] {};
        double[][] doubleArray44 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray43);
        int[] intArray45 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray44, intArray45);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray40, intArray45);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray28, intArray45);
        double[][] doubleArray49 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray50 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray51 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray52 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray53 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray52);
        java.lang.Class<?> wildcardClass54 = doubleArray53.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertNotNull(wildcardClass54);
    }

    @Test
    public void test0828() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0828");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray30 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray29);
        double[][] doubleArray31 = new double[][] {};
        double[][] doubleArray32 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray31);
        double[] doubleArray34 = new double[] { 1 };
        double[] doubleArray36 = new double[] { 1 };
        double[] doubleArray38 = new double[] { 1 };
        double[] doubleArray40 = new double[] { 1 };
        double[] doubleArray42 = new double[] { 1 };
        double[][] doubleArray43 = new double[][] { doubleArray34, doubleArray36, doubleArray38, doubleArray40, doubleArray42 };
        int[] intArray44 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray43, intArray44);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray31, intArray44);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray30, intArray44);
        double[][] doubleArray48 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        double[] doubleArray50 = new double[] { 1 };
        double[] doubleArray52 = new double[] { 1 };
        double[] doubleArray54 = new double[] { 1 };
        double[] doubleArray56 = new double[] { 1 };
        double[] doubleArray58 = new double[] { 1 };
        double[][] doubleArray59 = new double[][] { doubleArray50, doubleArray52, doubleArray54, doubleArray56, doubleArray58 };
        int[] intArray60 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray59, intArray60);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray48, intArray60);
        double[][] doubleArray63 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray48);
        double[][] doubleArray64 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray63);
        double[][] doubleArray65 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray63);
        java.lang.Class<?> wildcardClass66 = doubleArray63.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[]");
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertNotNull(wildcardClass66);
    }

    @Test
    public void test0829() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0829");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[] doubleArray6 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray10 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray14 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray18 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray19 = new double[][] { doubleArray6, doubleArray10, doubleArray14, doubleArray18 };
        double[] doubleArray21 = new double[] { 1 };
        double[] doubleArray23 = new double[] { 1 };
        double[] doubleArray25 = new double[] { 1 };
        double[] doubleArray27 = new double[] { 1 };
        double[] doubleArray29 = new double[] { 1 };
        double[][] doubleArray30 = new double[][] { doubleArray21, doubleArray23, doubleArray25, doubleArray27, doubleArray29 };
        int[] intArray31 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray30, intArray31);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray19, intArray31);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray2, intArray31);
        double[][] doubleArray35 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        int[] intArray36 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray35, intArray36);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[]");
        org.junit.Assert.assertNotNull(doubleArray35);
    }

    @Test
    public void test0830() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0830");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[] doubleArray3 = new double[] { 1 };
        double[] doubleArray5 = new double[] { 1 };
        double[] doubleArray7 = new double[] { 1 };
        double[] doubleArray9 = new double[] { 1 };
        double[] doubleArray11 = new double[] { 1 };
        double[][] doubleArray12 = new double[][] { doubleArray3, doubleArray5, doubleArray7, doubleArray9, doubleArray11 };
        int[] intArray13 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray12, intArray13);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray0, intArray13);
        double[] doubleArray19 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray23 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray27 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray31 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray32 = new double[][] { doubleArray19, doubleArray23, doubleArray27, doubleArray31 };
        double[] doubleArray34 = new double[] { 1 };
        double[] doubleArray36 = new double[] { 1 };
        double[] doubleArray38 = new double[] { 1 };
        double[] doubleArray40 = new double[] { 1 };
        double[] doubleArray42 = new double[] { 1 };
        double[][] doubleArray43 = new double[][] { doubleArray34, doubleArray36, doubleArray38, doubleArray40, doubleArray42 };
        int[] intArray44 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray43, intArray44);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray32, intArray44);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray0, intArray44);
        double[] doubleArray49 = new double[] { 1 };
        double[] doubleArray51 = new double[] { 1 };
        double[] doubleArray53 = new double[] { 1 };
        double[] doubleArray55 = new double[] { 1 };
        double[] doubleArray57 = new double[] { 1 };
        double[][] doubleArray58 = new double[][] { doubleArray49, doubleArray51, doubleArray53, doubleArray55, doubleArray57 };
        int[] intArray59 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray58, intArray59);
        double[][] doubleArray61 = new double[][] {};
        double[][] doubleArray62 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray61);
        int[] intArray63 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray62, intArray63);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray58, intArray63);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray0, intArray63);
        double[][] doubleArray67 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray68 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray69 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        java.lang.Class<?> wildcardClass70 = doubleArray69.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[]");
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertNotNull(wildcardClass70);
    }

    @Test
    public void test0831() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0831");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        int[] intArray2 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray1, intArray2);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray5 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray6 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray5);
        double[][] doubleArray7 = new double[][] {};
        double[][] doubleArray8 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray7);
        double[][] doubleArray9 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray8);
        double[][] doubleArray10 = new double[][] {};
        double[][] doubleArray11 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray10);
        double[][] doubleArray12 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray10);
        double[][] doubleArray13 = new double[][] {};
        double[][] doubleArray14 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray13);
        double[][] doubleArray15 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray14);
        double[][] doubleArray16 = new double[][] {};
        double[][] doubleArray17 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray16);
        double[][] doubleArray18 = new double[][] {};
        double[][] doubleArray19 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray18);
        double[] doubleArray21 = new double[] { 1 };
        double[] doubleArray23 = new double[] { 1 };
        double[] doubleArray25 = new double[] { 1 };
        double[] doubleArray27 = new double[] { 1 };
        double[] doubleArray29 = new double[] { 1 };
        double[][] doubleArray30 = new double[][] { doubleArray21, doubleArray23, doubleArray25, doubleArray27, doubleArray29 };
        int[] intArray31 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray30, intArray31);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray18, intArray31);
        double[] doubleArray37 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray41 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray45 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray49 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray50 = new double[][] { doubleArray37, doubleArray41, doubleArray45, doubleArray49 };
        double[] doubleArray52 = new double[] { 1 };
        double[] doubleArray54 = new double[] { 1 };
        double[] doubleArray56 = new double[] { 1 };
        double[] doubleArray58 = new double[] { 1 };
        double[] doubleArray60 = new double[] { 1 };
        double[][] doubleArray61 = new double[][] { doubleArray52, doubleArray54, doubleArray56, doubleArray58, doubleArray60 };
        int[] intArray62 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray61, intArray62);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray50, intArray62);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray18, intArray62);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray17, intArray62);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray15, intArray62);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray10, intArray62);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray9, intArray62);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray6, intArray62);
        java.lang.Class<?> wildcardClass71 = doubleArray6.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[]");
        org.junit.Assert.assertNotNull(wildcardClass71);
    }

    @Test
    public void test0832() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0832");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[] doubleArray3 = new double[] { 1 };
        double[] doubleArray5 = new double[] { 1 };
        double[] doubleArray7 = new double[] { 1 };
        double[] doubleArray9 = new double[] { 1 };
        double[] doubleArray11 = new double[] { 1 };
        double[][] doubleArray12 = new double[][] { doubleArray3, doubleArray5, doubleArray7, doubleArray9, doubleArray11 };
        int[] intArray13 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray12, intArray13);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray0, intArray13);
        double[] doubleArray19 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray23 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray27 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray31 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray32 = new double[][] { doubleArray19, doubleArray23, doubleArray27, doubleArray31 };
        double[] doubleArray34 = new double[] { 1 };
        double[] doubleArray36 = new double[] { 1 };
        double[] doubleArray38 = new double[] { 1 };
        double[] doubleArray40 = new double[] { 1 };
        double[] doubleArray42 = new double[] { 1 };
        double[][] doubleArray43 = new double[][] { doubleArray34, doubleArray36, doubleArray38, doubleArray40, doubleArray42 };
        int[] intArray44 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray43, intArray44);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray32, intArray44);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray0, intArray44);
        double[] doubleArray49 = new double[] { 1 };
        double[] doubleArray51 = new double[] { 1 };
        double[] doubleArray53 = new double[] { 1 };
        double[] doubleArray55 = new double[] { 1 };
        double[] doubleArray57 = new double[] { 1 };
        double[][] doubleArray58 = new double[][] { doubleArray49, doubleArray51, doubleArray53, doubleArray55, doubleArray57 };
        int[] intArray59 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray58, intArray59);
        double[][] doubleArray61 = new double[][] {};
        double[][] doubleArray62 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray61);
        int[] intArray63 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray62, intArray63);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray58, intArray63);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray0, intArray63);
        double[][] doubleArray67 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray68 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray67);
        double[][] doubleArray69 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray68);
        java.lang.Class<?> wildcardClass70 = doubleArray68.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[]");
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertNotNull(wildcardClass70);
    }

    @Test
    public void test0833() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0833");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray30 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray29);
        double[][] doubleArray31 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        double[][] doubleArray32 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        double[][] doubleArray33 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        double[][] doubleArray34 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        double[][] doubleArray35 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray34);
        double[][] doubleArray36 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray35);
        double[][] doubleArray37 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray36);
        double[][] doubleArray38 = null;
        double[][] doubleArray39 = new double[][] {};
        double[][] doubleArray40 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray39);
        double[][] doubleArray41 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray40);
        double[] doubleArray45 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray49 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray53 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray57 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray58 = new double[][] { doubleArray45, doubleArray49, doubleArray53, doubleArray57 };
        double[] doubleArray60 = new double[] { 1 };
        double[] doubleArray62 = new double[] { 1 };
        double[] doubleArray64 = new double[] { 1 };
        double[] doubleArray66 = new double[] { 1 };
        double[] doubleArray68 = new double[] { 1 };
        double[][] doubleArray69 = new double[][] { doubleArray60, doubleArray62, doubleArray64, doubleArray66, doubleArray68 };
        int[] intArray70 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray69, intArray70);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray58, intArray70);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray41, intArray70);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray38, intArray70);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray36, intArray70);
        java.lang.Class<?> wildcardClass76 = doubleArray36.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray66), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[]");
        org.junit.Assert.assertNotNull(wildcardClass76);
    }

    @Test
    public void test0834() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0834");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[] doubleArray3 = new double[] { 1 };
        double[] doubleArray5 = new double[] { 1 };
        double[] doubleArray7 = new double[] { 1 };
        double[] doubleArray9 = new double[] { 1 };
        double[] doubleArray11 = new double[] { 1 };
        double[][] doubleArray12 = new double[][] { doubleArray3, doubleArray5, doubleArray7, doubleArray9, doubleArray11 };
        int[] intArray13 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray12, intArray13);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray0, intArray13);
        double[] doubleArray19 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray23 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray27 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray31 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray32 = new double[][] { doubleArray19, doubleArray23, doubleArray27, doubleArray31 };
        double[] doubleArray34 = new double[] { 1 };
        double[] doubleArray36 = new double[] { 1 };
        double[] doubleArray38 = new double[] { 1 };
        double[] doubleArray40 = new double[] { 1 };
        double[] doubleArray42 = new double[] { 1 };
        double[][] doubleArray43 = new double[][] { doubleArray34, doubleArray36, doubleArray38, doubleArray40, doubleArray42 };
        int[] intArray44 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray43, intArray44);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray32, intArray44);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray0, intArray44);
        double[] doubleArray49 = new double[] { 1 };
        double[] doubleArray51 = new double[] { 1 };
        double[] doubleArray53 = new double[] { 1 };
        double[] doubleArray55 = new double[] { 1 };
        double[] doubleArray57 = new double[] { 1 };
        double[][] doubleArray58 = new double[][] { doubleArray49, doubleArray51, doubleArray53, doubleArray55, doubleArray57 };
        int[] intArray59 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray58, intArray59);
        double[][] doubleArray61 = new double[][] {};
        double[][] doubleArray62 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray61);
        int[] intArray63 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray62, intArray63);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray58, intArray63);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray0, intArray63);
        double[] doubleArray70 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray74 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray78 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray82 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray83 = new double[][] { doubleArray70, doubleArray74, doubleArray78, doubleArray82 };
        double[] doubleArray85 = new double[] { 1 };
        double[] doubleArray87 = new double[] { 1 };
        double[] doubleArray89 = new double[] { 1 };
        double[] doubleArray91 = new double[] { 1 };
        double[] doubleArray93 = new double[] { 1 };
        double[][] doubleArray94 = new double[][] { doubleArray85, doubleArray87, doubleArray89, doubleArray91, doubleArray93 };
        int[] intArray95 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray94, intArray95);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray83, intArray95);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray0, intArray95);
        java.lang.Class<?> wildcardClass99 = intArray95.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[]");
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray70), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray74), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray78), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray82), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray83);
        org.junit.Assert.assertNotNull(doubleArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray85), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray87), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray89), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray91), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray93);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray93), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray94);
        org.junit.Assert.assertNotNull(intArray95);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray95), "[]");
        org.junit.Assert.assertNotNull(wildcardClass99);
    }

    @Test
    public void test0835() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0835");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[] doubleArray31 = new double[] { 1 };
        double[] doubleArray33 = new double[] { 1 };
        double[] doubleArray35 = new double[] { 1 };
        double[] doubleArray37 = new double[] { 1 };
        double[] doubleArray39 = new double[] { 1 };
        double[][] doubleArray40 = new double[][] { doubleArray31, doubleArray33, doubleArray35, doubleArray37, doubleArray39 };
        int[] intArray41 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray40, intArray41);
        double[][] doubleArray43 = new double[][] {};
        double[][] doubleArray44 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray43);
        int[] intArray45 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray44, intArray45);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray40, intArray45);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray28, intArray45);
        double[][] doubleArray49 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray50 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray49);
        double[][] doubleArray51 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray50);
        double[][] doubleArray52 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray51);
        double[][] doubleArray53 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray52);
        double[][] doubleArray54 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray52);
        double[][] doubleArray55 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray54);
        double[][] doubleArray56 = null;
        double[][] doubleArray57 = new double[][] {};
        double[][] doubleArray58 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray57);
        int[] intArray59 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray58, intArray59);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray56, intArray59);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray55, intArray59);
        java.lang.Class<?> wildcardClass63 = intArray59.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[]");
        org.junit.Assert.assertNotNull(wildcardClass63);
    }

    @Test
    public void test0836() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0836");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray30 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray29);
        double[][] doubleArray31 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        double[][] doubleArray32 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray31);
        double[][] doubleArray33 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray32);
        double[][] doubleArray34 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray33);
        double[][] doubleArray35 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray33);
        double[][] doubleArray36 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray33);
        java.lang.Class<?> wildcardClass37 = doubleArray33.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertNotNull(wildcardClass37);
    }

    @Test
    public void test0837() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0837");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = new double[][] {};
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[] doubleArray5 = new double[] { 1 };
        double[] doubleArray7 = new double[] { 1 };
        double[] doubleArray9 = new double[] { 1 };
        double[] doubleArray11 = new double[] { 1 };
        double[] doubleArray13 = new double[] { 1 };
        double[][] doubleArray14 = new double[][] { doubleArray5, doubleArray7, doubleArray9, doubleArray11, doubleArray13 };
        int[] intArray15 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray14, intArray15);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray2, intArray15);
        double[] doubleArray21 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray25 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray29 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray33 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray34 = new double[][] { doubleArray21, doubleArray25, doubleArray29, doubleArray33 };
        double[] doubleArray36 = new double[] { 1 };
        double[] doubleArray38 = new double[] { 1 };
        double[] doubleArray40 = new double[] { 1 };
        double[] doubleArray42 = new double[] { 1 };
        double[] doubleArray44 = new double[] { 1 };
        double[][] doubleArray45 = new double[][] { doubleArray36, doubleArray38, doubleArray40, doubleArray42, doubleArray44 };
        int[] intArray46 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray45, intArray46);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray34, intArray46);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray2, intArray46);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray1, intArray46);
        double[][] doubleArray51 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray52 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray51);
        double[][] doubleArray53 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray52);
        double[][] doubleArray54 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray52);
        double[][] doubleArray55 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray54);
        double[][] doubleArray56 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray54);
        java.lang.Class<?> wildcardClass57 = doubleArray54.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertNotNull(wildcardClass57);
    }

    @Test
    public void test0838() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0838");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[] doubleArray3 = new double[] { 1 };
        double[] doubleArray5 = new double[] { 1 };
        double[] doubleArray7 = new double[] { 1 };
        double[] doubleArray9 = new double[] { 1 };
        double[] doubleArray11 = new double[] { 1 };
        double[][] doubleArray12 = new double[][] { doubleArray3, doubleArray5, doubleArray7, doubleArray9, doubleArray11 };
        int[] intArray13 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray12, intArray13);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray0, intArray13);
        double[] doubleArray19 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray23 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray27 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray31 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray32 = new double[][] { doubleArray19, doubleArray23, doubleArray27, doubleArray31 };
        double[] doubleArray34 = new double[] { 1 };
        double[] doubleArray36 = new double[] { 1 };
        double[] doubleArray38 = new double[] { 1 };
        double[] doubleArray40 = new double[] { 1 };
        double[] doubleArray42 = new double[] { 1 };
        double[][] doubleArray43 = new double[][] { doubleArray34, doubleArray36, doubleArray38, doubleArray40, doubleArray42 };
        int[] intArray44 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray43, intArray44);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray32, intArray44);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray0, intArray44);
        double[][] doubleArray48 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        java.lang.Class<?> wildcardClass49 = doubleArray48.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertNotNull(wildcardClass49);
    }

    @Test
    public void test0839() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0839");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = new double[][] {};
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[] doubleArray5 = new double[] { 1 };
        double[] doubleArray7 = new double[] { 1 };
        double[] doubleArray9 = new double[] { 1 };
        double[] doubleArray11 = new double[] { 1 };
        double[] doubleArray13 = new double[] { 1 };
        double[][] doubleArray14 = new double[][] { doubleArray5, doubleArray7, doubleArray9, doubleArray11, doubleArray13 };
        int[] intArray15 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray14, intArray15);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray2, intArray15);
        double[] doubleArray21 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray25 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray29 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray33 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray34 = new double[][] { doubleArray21, doubleArray25, doubleArray29, doubleArray33 };
        double[] doubleArray36 = new double[] { 1 };
        double[] doubleArray38 = new double[] { 1 };
        double[] doubleArray40 = new double[] { 1 };
        double[] doubleArray42 = new double[] { 1 };
        double[] doubleArray44 = new double[] { 1 };
        double[][] doubleArray45 = new double[][] { doubleArray36, doubleArray38, doubleArray40, doubleArray42, doubleArray44 };
        int[] intArray46 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray45, intArray46);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray34, intArray46);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray2, intArray46);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray1, intArray46);
        double[][] doubleArray51 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray52 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray51);
        double[][] doubleArray53 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray52);
        double[][] doubleArray54 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray53);
        double[][] doubleArray55 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray53);
        double[][] doubleArray56 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray55);
        java.lang.Class<?> wildcardClass57 = doubleArray56.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertNotNull(wildcardClass57);
    }

    @Test
    public void test0840() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0840");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray5 = new double[][] {};
        double[][] doubleArray6 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray5);
        double[][] doubleArray7 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray6);
        double[] doubleArray11 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray15 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray19 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray23 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray24 = new double[][] { doubleArray11, doubleArray15, doubleArray19, doubleArray23 };
        double[] doubleArray26 = new double[] { 1 };
        double[] doubleArray28 = new double[] { 1 };
        double[] doubleArray30 = new double[] { 1 };
        double[] doubleArray32 = new double[] { 1 };
        double[] doubleArray34 = new double[] { 1 };
        double[][] doubleArray35 = new double[][] { doubleArray26, doubleArray28, doubleArray30, doubleArray32, doubleArray34 };
        int[] intArray36 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray35, intArray36);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray24, intArray36);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray7, intArray36);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray0, intArray36);
        java.lang.Class<?> wildcardClass41 = doubleArray0.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[]");
        org.junit.Assert.assertNotNull(wildcardClass41);
    }

    @Test
    public void test0841() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0841");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = new double[][] {};
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[] doubleArray5 = new double[] { 1 };
        double[] doubleArray7 = new double[] { 1 };
        double[] doubleArray9 = new double[] { 1 };
        double[] doubleArray11 = new double[] { 1 };
        double[] doubleArray13 = new double[] { 1 };
        double[][] doubleArray14 = new double[][] { doubleArray5, doubleArray7, doubleArray9, doubleArray11, doubleArray13 };
        int[] intArray15 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray14, intArray15);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray2, intArray15);
        double[] doubleArray21 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray25 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray29 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray33 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray34 = new double[][] { doubleArray21, doubleArray25, doubleArray29, doubleArray33 };
        double[] doubleArray36 = new double[] { 1 };
        double[] doubleArray38 = new double[] { 1 };
        double[] doubleArray40 = new double[] { 1 };
        double[] doubleArray42 = new double[] { 1 };
        double[] doubleArray44 = new double[] { 1 };
        double[][] doubleArray45 = new double[][] { doubleArray36, doubleArray38, doubleArray40, doubleArray42, doubleArray44 };
        int[] intArray46 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray45, intArray46);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray34, intArray46);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray2, intArray46);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray1, intArray46);
        double[][] doubleArray51 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray52 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray51);
        double[][] doubleArray53 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray52);
        double[][] doubleArray54 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray52);
        double[][] doubleArray55 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray54);
        double[] doubleArray57 = new double[] { 1 };
        double[] doubleArray59 = new double[] { 1 };
        double[] doubleArray61 = new double[] { 1 };
        double[] doubleArray63 = new double[] { 1 };
        double[] doubleArray65 = new double[] { 1 };
        double[][] doubleArray66 = new double[][] { doubleArray57, doubleArray59, doubleArray61, doubleArray63, doubleArray65 };
        int[] intArray67 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray66, intArray67);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray54, intArray67);
        java.lang.Class<?> wildcardClass70 = intArray67.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[]");
        org.junit.Assert.assertNotNull(wildcardClass70);
    }

    @Test
    public void test0842() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0842");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[] doubleArray9 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray16 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray23 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray30 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray31 = new double[][] { doubleArray9, doubleArray16, doubleArray23, doubleArray30 };
        double[][] doubleArray32 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray31);
        double[][] doubleArray33 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray31);
        double[][] doubleArray34 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray31);
        double[][] doubleArray35 = new double[][] {};
        double[][] doubleArray36 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray35);
        int[] intArray37 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray36, intArray37);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray34, intArray37);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray2, intArray37);
        double[][] doubleArray41 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        java.lang.Class<?> wildcardClass42 = doubleArray2.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertNotNull(wildcardClass42);
    }

    @Test
    public void test0843() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0843");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[] doubleArray31 = new double[] { 1 };
        double[] doubleArray33 = new double[] { 1 };
        double[] doubleArray35 = new double[] { 1 };
        double[] doubleArray37 = new double[] { 1 };
        double[] doubleArray39 = new double[] { 1 };
        double[][] doubleArray40 = new double[][] { doubleArray31, doubleArray33, doubleArray35, doubleArray37, doubleArray39 };
        int[] intArray41 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray40, intArray41);
        double[][] doubleArray43 = new double[][] {};
        double[][] doubleArray44 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray43);
        int[] intArray45 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray44, intArray45);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray40, intArray45);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray28, intArray45);
        double[][] doubleArray49 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray50 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray51 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray50);
        double[][] doubleArray52 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray50);
        double[][] doubleArray53 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray50);
        double[][] doubleArray54 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray53);
        java.lang.Class<?> wildcardClass55 = doubleArray53.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertNotNull(wildcardClass55);
    }

    @Test
    public void test0844() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0844");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[] doubleArray6 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray10 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray14 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray18 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray19 = new double[][] { doubleArray6, doubleArray10, doubleArray14, doubleArray18 };
        double[] doubleArray21 = new double[] { 1 };
        double[] doubleArray23 = new double[] { 1 };
        double[] doubleArray25 = new double[] { 1 };
        double[] doubleArray27 = new double[] { 1 };
        double[] doubleArray29 = new double[] { 1 };
        double[][] doubleArray30 = new double[][] { doubleArray21, doubleArray23, doubleArray25, doubleArray27, doubleArray29 };
        int[] intArray31 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray30, intArray31);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray19, intArray31);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray2, intArray31);
        double[][] doubleArray35 = null;
        double[][] doubleArray36 = new double[][] {};
        double[][] doubleArray37 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray36);
        double[][] doubleArray38 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray37);
        double[] doubleArray42 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray46 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray50 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray54 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray55 = new double[][] { doubleArray42, doubleArray46, doubleArray50, doubleArray54 };
        double[] doubleArray57 = new double[] { 1 };
        double[] doubleArray59 = new double[] { 1 };
        double[] doubleArray61 = new double[] { 1 };
        double[] doubleArray63 = new double[] { 1 };
        double[] doubleArray65 = new double[] { 1 };
        double[][] doubleArray66 = new double[][] { doubleArray57, doubleArray59, doubleArray61, doubleArray63, doubleArray65 };
        int[] intArray67 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray66, intArray67);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray55, intArray67);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray38, intArray67);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray35, intArray67);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray2, intArray67);
        double[][] doubleArray73 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray74 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray73);
        double[][] doubleArray75 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray73);
        double[][] doubleArray76 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray75);
        java.lang.Class<?> wildcardClass77 = doubleArray76.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[]");
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertNotNull(wildcardClass77);
    }

    @Test
    public void test0845() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0845");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[] doubleArray6 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray10 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray14 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray18 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray19 = new double[][] { doubleArray6, doubleArray10, doubleArray14, doubleArray18 };
        double[] doubleArray21 = new double[] { 1 };
        double[] doubleArray23 = new double[] { 1 };
        double[] doubleArray25 = new double[] { 1 };
        double[] doubleArray27 = new double[] { 1 };
        double[] doubleArray29 = new double[] { 1 };
        double[][] doubleArray30 = new double[][] { doubleArray21, doubleArray23, doubleArray25, doubleArray27, doubleArray29 };
        int[] intArray31 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray30, intArray31);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray19, intArray31);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray2, intArray31);
        java.lang.Class<?> wildcardClass35 = intArray31.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[]");
        org.junit.Assert.assertNotNull(wildcardClass35);
    }

    @Test
    public void test0846() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0846");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray30 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray29);
        double[][] doubleArray31 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        double[][] doubleArray32 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray31);
        double[][] doubleArray33 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray31);
        double[] doubleArray35 = new double[] { 1 };
        double[] doubleArray37 = new double[] { 1 };
        double[] doubleArray39 = new double[] { 1 };
        double[] doubleArray41 = new double[] { 1 };
        double[] doubleArray43 = new double[] { 1 };
        double[][] doubleArray44 = new double[][] { doubleArray35, doubleArray37, doubleArray39, doubleArray41, doubleArray43 };
        int[] intArray45 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray44, intArray45);
        double[][] doubleArray47 = new double[][] {};
        double[][] doubleArray48 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray47);
        int[] intArray49 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray48, intArray49);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray44, intArray49);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray33, intArray49);
        double[][] doubleArray53 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray33);
        double[][] doubleArray54 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray53);
        java.lang.Class<?> wildcardClass55 = doubleArray54.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[]");
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[]");
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertNotNull(wildcardClass55);
    }

    @Test
    public void test0847() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0847");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = new double[][] {};
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[] doubleArray5 = new double[] { 1 };
        double[] doubleArray7 = new double[] { 1 };
        double[] doubleArray9 = new double[] { 1 };
        double[] doubleArray11 = new double[] { 1 };
        double[] doubleArray13 = new double[] { 1 };
        double[][] doubleArray14 = new double[][] { doubleArray5, doubleArray7, doubleArray9, doubleArray11, doubleArray13 };
        int[] intArray15 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray14, intArray15);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray2, intArray15);
        double[] doubleArray21 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray25 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray29 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray33 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray34 = new double[][] { doubleArray21, doubleArray25, doubleArray29, doubleArray33 };
        double[] doubleArray36 = new double[] { 1 };
        double[] doubleArray38 = new double[] { 1 };
        double[] doubleArray40 = new double[] { 1 };
        double[] doubleArray42 = new double[] { 1 };
        double[] doubleArray44 = new double[] { 1 };
        double[][] doubleArray45 = new double[][] { doubleArray36, doubleArray38, doubleArray40, doubleArray42, doubleArray44 };
        int[] intArray46 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray45, intArray46);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray34, intArray46);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray2, intArray46);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray1, intArray46);
        double[][] doubleArray51 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray52 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray51);
        double[][] doubleArray53 = new double[][] {};
        double[][] doubleArray54 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray53);
        int[] intArray55 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray54, intArray55);
        double[] doubleArray58 = new double[] { 1 };
        double[] doubleArray60 = new double[] { 1 };
        double[] doubleArray62 = new double[] { 1 };
        double[] doubleArray64 = new double[] { 1 };
        double[] doubleArray66 = new double[] { 1 };
        double[][] doubleArray67 = new double[][] { doubleArray58, doubleArray60, doubleArray62, doubleArray64, doubleArray66 };
        int[] intArray68 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray67, intArray68);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray54, intArray68);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray52, intArray68);
        double[][] doubleArray72 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray52);
        java.lang.Class<?> wildcardClass73 = doubleArray72.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[]");
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray66), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[]");
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertNotNull(wildcardClass73);
    }

    @Test
    public void test0848() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0848");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        java.lang.Class<?> wildcardClass5 = doubleArray3.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(wildcardClass5);
    }

    @Test
    public void test0849() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0849");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        int[] intArray2 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray1, intArray2);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray5 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray6 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray5);
        double[][] doubleArray7 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray5);
        double[][] doubleArray8 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray7);
        double[][] doubleArray9 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray8);
        java.lang.Class<?> wildcardClass10 = doubleArray9.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertNotNull(wildcardClass10);
    }

    @Test
    public void test0850() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0850");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[][] doubleArray5 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[][] doubleArray6 = new double[][] {};
        double[][] doubleArray7 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray6);
        double[][] doubleArray8 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray6);
        double[] doubleArray15 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray22 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray29 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray36 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray37 = new double[][] { doubleArray15, doubleArray22, doubleArray29, doubleArray36 };
        double[][] doubleArray38 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray37);
        double[][] doubleArray39 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray37);
        double[][] doubleArray40 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray37);
        double[][] doubleArray41 = new double[][] {};
        double[][] doubleArray42 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray41);
        int[] intArray43 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray42, intArray43);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray40, intArray43);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray8, intArray43);
        double[][] doubleArray47 = null;
        double[][] doubleArray48 = new double[][] {};
        double[][] doubleArray49 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray48);
        double[][] doubleArray50 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray49);
        double[] doubleArray54 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray58 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray62 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray66 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray67 = new double[][] { doubleArray54, doubleArray58, doubleArray62, doubleArray66 };
        double[] doubleArray69 = new double[] { 1 };
        double[] doubleArray71 = new double[] { 1 };
        double[] doubleArray73 = new double[] { 1 };
        double[] doubleArray75 = new double[] { 1 };
        double[] doubleArray77 = new double[] { 1 };
        double[][] doubleArray78 = new double[][] { doubleArray69, doubleArray71, doubleArray73, doubleArray75, doubleArray77 };
        int[] intArray79 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray78, intArray79);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray67, intArray79);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray50, intArray79);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray47, intArray79);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray8, intArray79);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray5, intArray79);
        java.lang.Class<?> wildcardClass86 = intArray79.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray66), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray71), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray73), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray75), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray77), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray79), "[]");
        org.junit.Assert.assertNotNull(wildcardClass86);
    }

    @Test
    public void test0851() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0851");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[] doubleArray8 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray12 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray16 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray20 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray21 = new double[][] { doubleArray8, doubleArray12, doubleArray16, doubleArray20 };
        double[] doubleArray23 = new double[] { 1 };
        double[] doubleArray25 = new double[] { 1 };
        double[] doubleArray27 = new double[] { 1 };
        double[] doubleArray29 = new double[] { 1 };
        double[] doubleArray31 = new double[] { 1 };
        double[][] doubleArray32 = new double[][] { doubleArray23, doubleArray25, doubleArray27, doubleArray29, doubleArray31 };
        int[] intArray33 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray32, intArray33);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray21, intArray33);
        double[][] doubleArray36 = new double[][] {};
        double[][] doubleArray37 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray36);
        double[][] doubleArray38 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray37);
        double[][] doubleArray39 = new double[][] {};
        double[][] doubleArray40 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray39);
        double[][] doubleArray41 = new double[][] {};
        double[][] doubleArray42 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray41);
        double[] doubleArray44 = new double[] { 1 };
        double[] doubleArray46 = new double[] { 1 };
        double[] doubleArray48 = new double[] { 1 };
        double[] doubleArray50 = new double[] { 1 };
        double[] doubleArray52 = new double[] { 1 };
        double[][] doubleArray53 = new double[][] { doubleArray44, doubleArray46, doubleArray48, doubleArray50, doubleArray52 };
        int[] intArray54 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray53, intArray54);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray41, intArray54);
        double[] doubleArray60 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray64 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray68 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray72 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray73 = new double[][] { doubleArray60, doubleArray64, doubleArray68, doubleArray72 };
        double[] doubleArray75 = new double[] { 1 };
        double[] doubleArray77 = new double[] { 1 };
        double[] doubleArray79 = new double[] { 1 };
        double[] doubleArray81 = new double[] { 1 };
        double[] doubleArray83 = new double[] { 1 };
        double[][] doubleArray84 = new double[][] { doubleArray75, doubleArray77, doubleArray79, doubleArray81, doubleArray83 };
        int[] intArray85 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray84, intArray85);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray73, intArray85);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray41, intArray85);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray40, intArray85);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray38, intArray85);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray21, intArray85);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray3, intArray85);
        double[][] doubleArray93 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[][] doubleArray94 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray93);
        java.lang.Class<?> wildcardClass95 = doubleArray93.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[]");
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray75), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray77), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray79), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray81), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray83), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray84);
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray85), "[]");
        org.junit.Assert.assertNotNull(doubleArray93);
        org.junit.Assert.assertNotNull(doubleArray94);
        org.junit.Assert.assertNotNull(wildcardClass95);
    }

    @Test
    public void test0852() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0852");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[] doubleArray31 = new double[] { 1 };
        double[] doubleArray33 = new double[] { 1 };
        double[] doubleArray35 = new double[] { 1 };
        double[] doubleArray37 = new double[] { 1 };
        double[] doubleArray39 = new double[] { 1 };
        double[][] doubleArray40 = new double[][] { doubleArray31, doubleArray33, doubleArray35, doubleArray37, doubleArray39 };
        int[] intArray41 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray40, intArray41);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray29, intArray41);
        double[] doubleArray50 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray57 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray64 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray71 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray72 = new double[][] { doubleArray50, doubleArray57, doubleArray64, doubleArray71 };
        double[][] doubleArray73 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray72);
        double[] doubleArray75 = new double[] { 1 };
        double[] doubleArray77 = new double[] { 1 };
        double[] doubleArray79 = new double[] { 1 };
        double[] doubleArray81 = new double[] { 1 };
        double[] doubleArray83 = new double[] { 1 };
        double[][] doubleArray84 = new double[][] { doubleArray75, doubleArray77, doubleArray79, doubleArray81, doubleArray83 };
        int[] intArray85 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray84, intArray85);
        double[][] doubleArray87 = new double[][] {};
        double[][] doubleArray88 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray87);
        int[] intArray89 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray88, intArray89);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray84, intArray89);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray72, intArray89);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray29, intArray89);
        double[][] doubleArray94 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray29);
        double[][] doubleArray95 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray29);
        int[] intArray96 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray29, intArray96);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[]");
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray71), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray75), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray77), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray79), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray81), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray83), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray84);
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray85), "[]");
        org.junit.Assert.assertNotNull(doubleArray87);
        org.junit.Assert.assertNotNull(doubleArray88);
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray89), "[]");
        org.junit.Assert.assertNotNull(doubleArray94);
        org.junit.Assert.assertNotNull(doubleArray95);
    }

    @Test
    public void test0853() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0853");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[] doubleArray36 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray43 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray50 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray57 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray58 = new double[][] { doubleArray36, doubleArray43, doubleArray50, doubleArray57 };
        double[][] doubleArray59 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray58);
        double[][] doubleArray60 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray58);
        double[][] doubleArray61 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray58);
        double[][] doubleArray62 = new double[][] {};
        double[][] doubleArray63 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray62);
        int[] intArray64 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray63, intArray64);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray61, intArray64);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray29, intArray64);
        double[][] doubleArray68 = null;
        double[] doubleArray70 = new double[] { 1 };
        double[] doubleArray72 = new double[] { 1 };
        double[] doubleArray74 = new double[] { 1 };
        double[] doubleArray76 = new double[] { 1 };
        double[] doubleArray78 = new double[] { 1 };
        double[][] doubleArray79 = new double[][] { doubleArray70, doubleArray72, doubleArray74, doubleArray76, doubleArray78 };
        int[] intArray80 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray79, intArray80);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray68, intArray80);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray29, intArray80);
        java.lang.Class<?> wildcardClass84 = doubleArray29.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[]");
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray70), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray74), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray78), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[]");
        org.junit.Assert.assertNotNull(wildcardClass84);
    }

    @Test
    public void test0854() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0854");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray5 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray4);
        double[][] doubleArray6 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray4);
        double[][] doubleArray7 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray6);
        double[][] doubleArray8 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray6);
        double[][] doubleArray9 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray8);
        double[][] doubleArray10 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray8);
        java.lang.Class<?> wildcardClass11 = doubleArray10.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertNotNull(wildcardClass11);
    }

    @Test
    public void test0855() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0855");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = new double[][] {};
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[] doubleArray11 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray18 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray25 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray32 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray33 = new double[][] { doubleArray11, doubleArray18, doubleArray25, doubleArray32 };
        double[][] doubleArray34 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray33);
        double[] doubleArray36 = new double[] { 1 };
        double[] doubleArray38 = new double[] { 1 };
        double[] doubleArray40 = new double[] { 1 };
        double[] doubleArray42 = new double[] { 1 };
        double[] doubleArray44 = new double[] { 1 };
        double[][] doubleArray45 = new double[][] { doubleArray36, doubleArray38, doubleArray40, doubleArray42, doubleArray44 };
        int[] intArray46 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray45, intArray46);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray34, intArray46);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray3, intArray46);
        double[] doubleArray53 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray57 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray61 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray65 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray66 = new double[][] { doubleArray53, doubleArray57, doubleArray61, doubleArray65 };
        double[] doubleArray68 = new double[] { 1 };
        double[] doubleArray70 = new double[] { 1 };
        double[] doubleArray72 = new double[] { 1 };
        double[] doubleArray74 = new double[] { 1 };
        double[] doubleArray76 = new double[] { 1 };
        double[][] doubleArray77 = new double[][] { doubleArray68, doubleArray70, doubleArray72, doubleArray74, doubleArray76 };
        int[] intArray78 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray77, intArray78);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray66, intArray78);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray3, intArray78);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray0, intArray78);
        double[][] doubleArray83 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray84 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray85 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray84);
        double[][] doubleArray86 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray84);
        java.lang.Class<?> wildcardClass87 = doubleArray84.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[]");
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray70), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray74), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[]");
        org.junit.Assert.assertNotNull(doubleArray83);
        org.junit.Assert.assertNotNull(doubleArray84);
        org.junit.Assert.assertNotNull(doubleArray85);
        org.junit.Assert.assertNotNull(doubleArray86);
        org.junit.Assert.assertNotNull(wildcardClass87);
    }

    @Test
    public void test0856() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0856");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray30 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray29);
        double[][] doubleArray31 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray29);
        double[][] doubleArray32 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray31);
        double[][] doubleArray33 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray31);
        double[][] doubleArray34 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray31);
        double[][] doubleArray35 = null;
        double[][] doubleArray36 = new double[][] {};
        double[][] doubleArray37 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray36);
        double[][] doubleArray38 = new double[][] {};
        double[][] doubleArray39 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray38);
        double[] doubleArray41 = new double[] { 1 };
        double[] doubleArray43 = new double[] { 1 };
        double[] doubleArray45 = new double[] { 1 };
        double[] doubleArray47 = new double[] { 1 };
        double[] doubleArray49 = new double[] { 1 };
        double[][] doubleArray50 = new double[][] { doubleArray41, doubleArray43, doubleArray45, doubleArray47, doubleArray49 };
        int[] intArray51 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray50, intArray51);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray38, intArray51);
        double[] doubleArray57 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray61 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray65 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray69 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray70 = new double[][] { doubleArray57, doubleArray61, doubleArray65, doubleArray69 };
        double[] doubleArray72 = new double[] { 1 };
        double[] doubleArray74 = new double[] { 1 };
        double[] doubleArray76 = new double[] { 1 };
        double[] doubleArray78 = new double[] { 1 };
        double[] doubleArray80 = new double[] { 1 };
        double[][] doubleArray81 = new double[][] { doubleArray72, doubleArray74, doubleArray76, doubleArray78, doubleArray80 };
        int[] intArray82 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray81, intArray82);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray70, intArray82);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray38, intArray82);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray37, intArray82);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray35, intArray82);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray34, intArray82);
        java.lang.Class<?> wildcardClass89 = doubleArray34.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[]");
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray74), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray78), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray80), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray81);
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[]");
        org.junit.Assert.assertNotNull(wildcardClass89);
    }

    @Test
    public void test0857() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0857");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[] doubleArray9 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray16 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray23 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray30 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray31 = new double[][] { doubleArray9, doubleArray16, doubleArray23, doubleArray30 };
        double[][] doubleArray32 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray31);
        double[][] doubleArray33 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray31);
        double[][] doubleArray34 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray31);
        double[][] doubleArray35 = new double[][] {};
        double[][] doubleArray36 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray35);
        int[] intArray37 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray36, intArray37);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray34, intArray37);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray2, intArray37);
        double[][] doubleArray41 = null;
        double[][] doubleArray42 = new double[][] {};
        double[][] doubleArray43 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray42);
        double[][] doubleArray44 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray43);
        double[] doubleArray48 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray52 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray56 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray60 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray61 = new double[][] { doubleArray48, doubleArray52, doubleArray56, doubleArray60 };
        double[] doubleArray63 = new double[] { 1 };
        double[] doubleArray65 = new double[] { 1 };
        double[] doubleArray67 = new double[] { 1 };
        double[] doubleArray69 = new double[] { 1 };
        double[] doubleArray71 = new double[] { 1 };
        double[][] doubleArray72 = new double[][] { doubleArray63, doubleArray65, doubleArray67, doubleArray69, doubleArray71 };
        int[] intArray73 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray72, intArray73);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray61, intArray73);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray44, intArray73);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray41, intArray73);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray2, intArray73);
        double[][] doubleArray79 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray80 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        java.lang.Class<?> wildcardClass81 = doubleArray80.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray71), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[]");
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertNotNull(wildcardClass81);
    }

    @Test
    public void test0858() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0858");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[] doubleArray11 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray18 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray25 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray32 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray33 = new double[][] { doubleArray11, doubleArray18, doubleArray25, doubleArray32 };
        double[][] doubleArray34 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray33);
        double[][] doubleArray35 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray33);
        double[][] doubleArray36 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray33);
        double[][] doubleArray37 = new double[][] {};
        double[][] doubleArray38 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray37);
        int[] intArray39 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray38, intArray39);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray36, intArray39);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray4, intArray39);
        double[][] doubleArray43 = new double[][] {};
        double[][] doubleArray44 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray43);
        double[][] doubleArray45 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray44);
        double[] doubleArray52 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray59 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray66 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray73 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray74 = new double[][] { doubleArray52, doubleArray59, doubleArray66, doubleArray73 };
        double[][] doubleArray75 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray74);
        double[] doubleArray77 = new double[] { 1 };
        double[] doubleArray79 = new double[] { 1 };
        double[] doubleArray81 = new double[] { 1 };
        double[] doubleArray83 = new double[] { 1 };
        double[] doubleArray85 = new double[] { 1 };
        double[][] doubleArray86 = new double[][] { doubleArray77, doubleArray79, doubleArray81, doubleArray83, doubleArray85 };
        int[] intArray87 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray86, intArray87);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray75, intArray87);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray44, intArray87);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray4, intArray87);
        java.lang.Class<?> wildcardClass92 = doubleArray4.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray66), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray73), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray77), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray79), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray81), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray83), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray85), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray86);
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray87), "[]");
        org.junit.Assert.assertNotNull(wildcardClass92);
    }

    @Test
    public void test0859() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0859");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray30 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray29);
        double[][] doubleArray31 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray29);
        double[][] doubleArray32 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray29);
        java.lang.Class<?> wildcardClass33 = doubleArray29.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(wildcardClass33);
    }

    @Test
    public void test0860() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0860");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray30 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray29);
        double[][] doubleArray31 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray29);
        double[][] doubleArray32 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray31);
        double[][] doubleArray33 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray31);
        double[][] doubleArray34 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray31);
        java.lang.Class<?> wildcardClass35 = doubleArray31.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertNotNull(wildcardClass35);
    }

    @Test
    public void test0861() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0861");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        int[] intArray2 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray1, intArray2);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray5 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray4);
        double[][] doubleArray6 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray4);
        java.lang.Class<?> wildcardClass7 = doubleArray6.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(wildcardClass7);
    }

    @Test
    public void test0862() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0862");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray5 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray4);
        double[][] doubleArray6 = new double[][] {};
        double[][] doubleArray7 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray6);
        double[][] doubleArray8 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray6);
        double[] doubleArray15 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray22 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray29 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray36 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray37 = new double[][] { doubleArray15, doubleArray22, doubleArray29, doubleArray36 };
        double[][] doubleArray38 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray37);
        double[][] doubleArray39 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray37);
        double[][] doubleArray40 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray37);
        double[][] doubleArray41 = new double[][] {};
        double[][] doubleArray42 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray41);
        int[] intArray43 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray42, intArray43);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray40, intArray43);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray8, intArray43);
        double[][] doubleArray47 = null;
        double[][] doubleArray48 = new double[][] {};
        double[][] doubleArray49 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray48);
        double[][] doubleArray50 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray49);
        double[] doubleArray54 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray58 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray62 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray66 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray67 = new double[][] { doubleArray54, doubleArray58, doubleArray62, doubleArray66 };
        double[] doubleArray69 = new double[] { 1 };
        double[] doubleArray71 = new double[] { 1 };
        double[] doubleArray73 = new double[] { 1 };
        double[] doubleArray75 = new double[] { 1 };
        double[] doubleArray77 = new double[] { 1 };
        double[][] doubleArray78 = new double[][] { doubleArray69, doubleArray71, doubleArray73, doubleArray75, doubleArray77 };
        int[] intArray79 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray78, intArray79);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray67, intArray79);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray50, intArray79);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray47, intArray79);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray8, intArray79);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray4, intArray79);
        java.lang.Class<?> wildcardClass86 = intArray79.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray66), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray71), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray73), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray75), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray77), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray79), "[]");
        org.junit.Assert.assertNotNull(wildcardClass86);
    }

    @Test
    public void test0863() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0863");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray5 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray4);
        double[][] doubleArray6 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray4);
        double[][] doubleArray7 = new double[][] {};
        double[][] doubleArray8 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray7);
        double[][] doubleArray9 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray8);
        double[] doubleArray13 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray17 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray21 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray25 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray26 = new double[][] { doubleArray13, doubleArray17, doubleArray21, doubleArray25 };
        double[] doubleArray28 = new double[] { 1 };
        double[] doubleArray30 = new double[] { 1 };
        double[] doubleArray32 = new double[] { 1 };
        double[] doubleArray34 = new double[] { 1 };
        double[] doubleArray36 = new double[] { 1 };
        double[][] doubleArray37 = new double[][] { doubleArray28, doubleArray30, doubleArray32, doubleArray34, doubleArray36 };
        int[] intArray38 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray37, intArray38);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray26, intArray38);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray8, intArray38);
        double[][] doubleArray42 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray8);
        double[][] doubleArray43 = new double[][] {};
        double[][] doubleArray44 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray43);
        int[] intArray45 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray44, intArray45);
        double[] doubleArray48 = new double[] { 1 };
        double[] doubleArray50 = new double[] { 1 };
        double[] doubleArray52 = new double[] { 1 };
        double[] doubleArray54 = new double[] { 1 };
        double[] doubleArray56 = new double[] { 1 };
        double[][] doubleArray57 = new double[][] { doubleArray48, doubleArray50, doubleArray52, doubleArray54, doubleArray56 };
        int[] intArray58 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray57, intArray58);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray44, intArray58);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray42, intArray58);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray6, intArray58);
        java.lang.Class<?> wildcardClass63 = doubleArray6.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[]");
        org.junit.Assert.assertNotNull(wildcardClass63);
    }

    @Test
    public void test0864() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0864");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[][] doubleArray5 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[][] doubleArray6 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray5);
        double[][] doubleArray7 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray6);
        java.lang.Class<?> wildcardClass8 = doubleArray6.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertNotNull(wildcardClass8);
    }

    @Test
    public void test0865() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0865");
        double[] doubleArray3 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray7 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray11 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray15 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray16 = new double[][] { doubleArray3, doubleArray7, doubleArray11, doubleArray15 };
        double[] doubleArray18 = new double[] { 1 };
        double[] doubleArray20 = new double[] { 1 };
        double[] doubleArray22 = new double[] { 1 };
        double[] doubleArray24 = new double[] { 1 };
        double[] doubleArray26 = new double[] { 1 };
        double[][] doubleArray27 = new double[][] { doubleArray18, doubleArray20, doubleArray22, doubleArray24, doubleArray26 };
        int[] intArray28 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray27, intArray28);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray16, intArray28);
        double[][] doubleArray31 = new double[][] {};
        double[][] doubleArray32 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray31);
        double[][] doubleArray33 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray32);
        double[][] doubleArray34 = new double[][] {};
        double[][] doubleArray35 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray34);
        double[][] doubleArray36 = new double[][] {};
        double[][] doubleArray37 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray36);
        double[] doubleArray39 = new double[] { 1 };
        double[] doubleArray41 = new double[] { 1 };
        double[] doubleArray43 = new double[] { 1 };
        double[] doubleArray45 = new double[] { 1 };
        double[] doubleArray47 = new double[] { 1 };
        double[][] doubleArray48 = new double[][] { doubleArray39, doubleArray41, doubleArray43, doubleArray45, doubleArray47 };
        int[] intArray49 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray48, intArray49);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray36, intArray49);
        double[] doubleArray55 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray59 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray63 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray67 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray68 = new double[][] { doubleArray55, doubleArray59, doubleArray63, doubleArray67 };
        double[] doubleArray70 = new double[] { 1 };
        double[] doubleArray72 = new double[] { 1 };
        double[] doubleArray74 = new double[] { 1 };
        double[] doubleArray76 = new double[] { 1 };
        double[] doubleArray78 = new double[] { 1 };
        double[][] doubleArray79 = new double[][] { doubleArray70, doubleArray72, doubleArray74, doubleArray76, doubleArray78 };
        int[] intArray80 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray79, intArray80);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray68, intArray80);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray36, intArray80);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray35, intArray80);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray33, intArray80);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray16, intArray80);
        java.lang.Class<?> wildcardClass87 = intArray80.getClass();
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[]");
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray70), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray74), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray78), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[]");
        org.junit.Assert.assertNotNull(wildcardClass87);
    }

    @Test
    public void test0866() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0866");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[][] doubleArray5 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[] doubleArray7 = new double[] { 1 };
        double[] doubleArray9 = new double[] { 1 };
        double[] doubleArray11 = new double[] { 1 };
        double[] doubleArray13 = new double[] { 1 };
        double[] doubleArray15 = new double[] { 1 };
        double[][] doubleArray16 = new double[][] { doubleArray7, doubleArray9, doubleArray11, doubleArray13, doubleArray15 };
        int[] intArray17 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray16, intArray17);
        double[] doubleArray25 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray32 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray39 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray46 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray47 = new double[][] { doubleArray25, doubleArray32, doubleArray39, doubleArray46 };
        double[][] doubleArray48 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray47);
        double[] doubleArray50 = new double[] { 1 };
        double[] doubleArray52 = new double[] { 1 };
        double[] doubleArray54 = new double[] { 1 };
        double[] doubleArray56 = new double[] { 1 };
        double[] doubleArray58 = new double[] { 1 };
        double[][] doubleArray59 = new double[][] { doubleArray50, doubleArray52, doubleArray54, doubleArray56, doubleArray58 };
        int[] intArray60 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray59, intArray60);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray48, intArray60);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray16, intArray60);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray5, intArray60);
        java.lang.Class<?> wildcardClass65 = intArray60.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[]");
        org.junit.Assert.assertNotNull(wildcardClass65);
    }

    @Test
    public void test0867() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0867");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[] doubleArray3 = new double[] { 1 };
        double[] doubleArray5 = new double[] { 1 };
        double[] doubleArray7 = new double[] { 1 };
        double[] doubleArray9 = new double[] { 1 };
        double[] doubleArray11 = new double[] { 1 };
        double[][] doubleArray12 = new double[][] { doubleArray3, doubleArray5, doubleArray7, doubleArray9, doubleArray11 };
        int[] intArray13 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray12, intArray13);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray0, intArray13);
        double[] doubleArray19 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray23 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray27 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray31 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray32 = new double[][] { doubleArray19, doubleArray23, doubleArray27, doubleArray31 };
        double[] doubleArray34 = new double[] { 1 };
        double[] doubleArray36 = new double[] { 1 };
        double[] doubleArray38 = new double[] { 1 };
        double[] doubleArray40 = new double[] { 1 };
        double[] doubleArray42 = new double[] { 1 };
        double[][] doubleArray43 = new double[][] { doubleArray34, doubleArray36, doubleArray38, doubleArray40, doubleArray42 };
        int[] intArray44 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray43, intArray44);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray32, intArray44);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray0, intArray44);
        double[] doubleArray49 = new double[] { 1 };
        double[] doubleArray51 = new double[] { 1 };
        double[] doubleArray53 = new double[] { 1 };
        double[] doubleArray55 = new double[] { 1 };
        double[] doubleArray57 = new double[] { 1 };
        double[][] doubleArray58 = new double[][] { doubleArray49, doubleArray51, doubleArray53, doubleArray55, doubleArray57 };
        int[] intArray59 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray58, intArray59);
        double[][] doubleArray61 = new double[][] {};
        double[][] doubleArray62 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray61);
        int[] intArray63 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray62, intArray63);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray58, intArray63);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray0, intArray63);
        double[][] doubleArray67 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray68 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray67);
        double[][] doubleArray69 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray67);
        double[][] doubleArray70 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray67);
        double[][] doubleArray71 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray67);
        double[][] doubleArray72 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray67);
        java.lang.Class<?> wildcardClass73 = doubleArray72.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[]");
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertNotNull(wildcardClass73);
    }

    @Test
    public void test0868() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0868");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[][] doubleArray5 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[][] doubleArray6 = new double[][] {};
        double[][] doubleArray7 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray6);
        double[][] doubleArray8 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray7);
        double[] doubleArray15 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray22 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray29 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray36 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray37 = new double[][] { doubleArray15, doubleArray22, doubleArray29, doubleArray36 };
        double[][] doubleArray38 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray37);
        double[] doubleArray40 = new double[] { 1 };
        double[] doubleArray42 = new double[] { 1 };
        double[] doubleArray44 = new double[] { 1 };
        double[] doubleArray46 = new double[] { 1 };
        double[] doubleArray48 = new double[] { 1 };
        double[][] doubleArray49 = new double[][] { doubleArray40, doubleArray42, doubleArray44, doubleArray46, doubleArray48 };
        int[] intArray50 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray49, intArray50);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray38, intArray50);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray7, intArray50);
        double[] doubleArray57 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray61 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray65 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray69 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray70 = new double[][] { doubleArray57, doubleArray61, doubleArray65, doubleArray69 };
        double[] doubleArray72 = new double[] { 1 };
        double[] doubleArray74 = new double[] { 1 };
        double[] doubleArray76 = new double[] { 1 };
        double[] doubleArray78 = new double[] { 1 };
        double[] doubleArray80 = new double[] { 1 };
        double[][] doubleArray81 = new double[][] { doubleArray72, doubleArray74, doubleArray76, doubleArray78, doubleArray80 };
        int[] intArray82 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray81, intArray82);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray70, intArray82);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray7, intArray82);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray3, intArray82);
        java.lang.Class<?> wildcardClass87 = doubleArray3.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[]");
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray74), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray78), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray80), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray81);
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[]");
        org.junit.Assert.assertNotNull(wildcardClass87);
    }

    @Test
    public void test0869() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0869");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        int[] intArray2 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray1, intArray2);
        java.lang.Class<?> wildcardClass4 = doubleArray1.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[]");
        org.junit.Assert.assertNotNull(wildcardClass4);
    }

    @Test
    public void test0870() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0870");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[][] doubleArray5 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray4);
        double[][] doubleArray6 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray5);
        double[][] doubleArray7 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray5);
        double[][] doubleArray8 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray5);
        double[][] doubleArray9 = new double[][] {};
        double[][] doubleArray10 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray9);
        double[][] doubleArray11 = new double[][] {};
        double[][] doubleArray12 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray11);
        double[][] doubleArray13 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray12);
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray34 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray41 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray42 = new double[][] { doubleArray20, doubleArray27, doubleArray34, doubleArray41 };
        double[][] doubleArray43 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray42);
        double[] doubleArray45 = new double[] { 1 };
        double[] doubleArray47 = new double[] { 1 };
        double[] doubleArray49 = new double[] { 1 };
        double[] doubleArray51 = new double[] { 1 };
        double[] doubleArray53 = new double[] { 1 };
        double[][] doubleArray54 = new double[][] { doubleArray45, doubleArray47, doubleArray49, doubleArray51, doubleArray53 };
        int[] intArray55 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray54, intArray55);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray43, intArray55);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray12, intArray55);
        double[] doubleArray62 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray66 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray70 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray74 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray75 = new double[][] { doubleArray62, doubleArray66, doubleArray70, doubleArray74 };
        double[] doubleArray77 = new double[] { 1 };
        double[] doubleArray79 = new double[] { 1 };
        double[] doubleArray81 = new double[] { 1 };
        double[] doubleArray83 = new double[] { 1 };
        double[] doubleArray85 = new double[] { 1 };
        double[][] doubleArray86 = new double[][] { doubleArray77, doubleArray79, doubleArray81, doubleArray83, doubleArray85 };
        int[] intArray87 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray86, intArray87);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray75, intArray87);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray12, intArray87);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray9, intArray87);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray5, intArray87);
        java.lang.Class<?> wildcardClass93 = intArray87.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[]");
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray66), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray70), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray74), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray77), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray79), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray81), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray83), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray85), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray86);
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray87), "[]");
        org.junit.Assert.assertNotNull(wildcardClass93);
    }

    @Test
    public void test0871() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0871");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[] doubleArray4 = new double[] { 1 };
        double[] doubleArray6 = new double[] { 1 };
        double[] doubleArray8 = new double[] { 1 };
        double[] doubleArray10 = new double[] { 1 };
        double[] doubleArray12 = new double[] { 1 };
        double[][] doubleArray13 = new double[][] { doubleArray4, doubleArray6, doubleArray8, doubleArray10, doubleArray12 };
        int[] intArray14 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray13, intArray14);
        double[] doubleArray22 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray29 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray36 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray43 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray44 = new double[][] { doubleArray22, doubleArray29, doubleArray36, doubleArray43 };
        double[][] doubleArray45 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray44);
        double[] doubleArray47 = new double[] { 1 };
        double[] doubleArray49 = new double[] { 1 };
        double[] doubleArray51 = new double[] { 1 };
        double[] doubleArray53 = new double[] { 1 };
        double[] doubleArray55 = new double[] { 1 };
        double[][] doubleArray56 = new double[][] { doubleArray47, doubleArray49, doubleArray51, doubleArray53, doubleArray55 };
        int[] intArray57 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray56, intArray57);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray45, intArray57);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray13, intArray57);
        double[] doubleArray62 = new double[] { 1 };
        double[] doubleArray64 = new double[] { 1 };
        double[] doubleArray66 = new double[] { 1 };
        double[] doubleArray68 = new double[] { 1 };
        double[] doubleArray70 = new double[] { 1 };
        double[][] doubleArray71 = new double[][] { doubleArray62, doubleArray64, doubleArray66, doubleArray68, doubleArray70 };
        int[] intArray72 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray71, intArray72);
        double[][] doubleArray74 = new double[][] {};
        double[][] doubleArray75 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray74);
        int[] intArray76 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray75, intArray76);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray71, intArray76);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray13, intArray76);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray2, intArray76);
        double[][] doubleArray81 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray82 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray83 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray82);
        java.lang.Class<?> wildcardClass84 = doubleArray83.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[]");
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[]");
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray66), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray70), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[]");
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[]");
        org.junit.Assert.assertNotNull(doubleArray81);
        org.junit.Assert.assertNotNull(doubleArray82);
        org.junit.Assert.assertNotNull(doubleArray83);
        org.junit.Assert.assertNotNull(wildcardClass84);
    }

    @Test
    public void test0872() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0872");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = new double[][] {};
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[] doubleArray5 = new double[] { 1 };
        double[] doubleArray7 = new double[] { 1 };
        double[] doubleArray9 = new double[] { 1 };
        double[] doubleArray11 = new double[] { 1 };
        double[] doubleArray13 = new double[] { 1 };
        double[][] doubleArray14 = new double[][] { doubleArray5, doubleArray7, doubleArray9, doubleArray11, doubleArray13 };
        int[] intArray15 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray14, intArray15);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray2, intArray15);
        double[] doubleArray21 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray25 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray29 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray33 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray34 = new double[][] { doubleArray21, doubleArray25, doubleArray29, doubleArray33 };
        double[] doubleArray36 = new double[] { 1 };
        double[] doubleArray38 = new double[] { 1 };
        double[] doubleArray40 = new double[] { 1 };
        double[] doubleArray42 = new double[] { 1 };
        double[] doubleArray44 = new double[] { 1 };
        double[][] doubleArray45 = new double[][] { doubleArray36, doubleArray38, doubleArray40, doubleArray42, doubleArray44 };
        int[] intArray46 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray45, intArray46);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray34, intArray46);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray2, intArray46);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray1, intArray46);
        double[][] doubleArray51 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray52 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray51);
        double[][] doubleArray53 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray52);
        double[][] doubleArray54 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray52);
        double[][] doubleArray55 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray54);
        double[][] doubleArray56 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray55);
        double[][] doubleArray57 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray56);
        double[][] doubleArray58 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray56);
        java.lang.Class<?> wildcardClass59 = doubleArray58.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertNotNull(wildcardClass59);
    }

    @Test
    public void test0873() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0873");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        int[] intArray2 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray1, intArray2);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray5 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray6 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray5);
        double[][] doubleArray7 = new double[][] {};
        double[][] doubleArray8 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray7);
        double[][] doubleArray9 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray8);
        double[][] doubleArray10 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray9);
        double[][] doubleArray11 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray10);
        double[][] doubleArray12 = null;
        double[][] doubleArray13 = new double[][] {};
        double[][] doubleArray14 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray13);
        double[][] doubleArray15 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray14);
        double[] doubleArray19 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray23 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray27 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray31 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray32 = new double[][] { doubleArray19, doubleArray23, doubleArray27, doubleArray31 };
        double[] doubleArray34 = new double[] { 1 };
        double[] doubleArray36 = new double[] { 1 };
        double[] doubleArray38 = new double[] { 1 };
        double[] doubleArray40 = new double[] { 1 };
        double[] doubleArray42 = new double[] { 1 };
        double[][] doubleArray43 = new double[][] { doubleArray34, doubleArray36, doubleArray38, doubleArray40, doubleArray42 };
        int[] intArray44 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray43, intArray44);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray32, intArray44);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray15, intArray44);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray12, intArray44);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray10, intArray44);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray6, intArray44);
        java.lang.Class<?> wildcardClass51 = intArray44.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[]");
        org.junit.Assert.assertNotNull(wildcardClass51);
    }

    @Test
    public void test0874() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0874");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray3 = new double[][] {};
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[][] doubleArray5 = new double[][] {};
        double[][] doubleArray6 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray5);
        double[] doubleArray8 = new double[] { 1 };
        double[] doubleArray10 = new double[] { 1 };
        double[] doubleArray12 = new double[] { 1 };
        double[] doubleArray14 = new double[] { 1 };
        double[] doubleArray16 = new double[] { 1 };
        double[][] doubleArray17 = new double[][] { doubleArray8, doubleArray10, doubleArray12, doubleArray14, doubleArray16 };
        int[] intArray18 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray17, intArray18);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray5, intArray18);
        double[] doubleArray24 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray28 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray32 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray36 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray37 = new double[][] { doubleArray24, doubleArray28, doubleArray32, doubleArray36 };
        double[] doubleArray39 = new double[] { 1 };
        double[] doubleArray41 = new double[] { 1 };
        double[] doubleArray43 = new double[] { 1 };
        double[] doubleArray45 = new double[] { 1 };
        double[] doubleArray47 = new double[] { 1 };
        double[][] doubleArray48 = new double[][] { doubleArray39, doubleArray41, doubleArray43, doubleArray45, doubleArray47 };
        int[] intArray49 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray48, intArray49);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray37, intArray49);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray5, intArray49);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray3, intArray49);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray0, intArray49);
        double[][] doubleArray55 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray56 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray57 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        java.lang.Class<?> wildcardClass58 = doubleArray57.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[]");
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[]");
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertNotNull(wildcardClass58);
    }

    @Test
    public void test0875() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0875");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray30 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray31 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray32 = new double[][] {};
        double[][] doubleArray33 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray32);
        double[][] doubleArray34 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray33);
        double[][] doubleArray35 = new double[][] {};
        double[][] doubleArray36 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray35);
        double[][] doubleArray37 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray35);
        double[][] doubleArray38 = new double[][] {};
        double[][] doubleArray39 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray38);
        double[][] doubleArray40 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray39);
        double[][] doubleArray41 = new double[][] {};
        double[][] doubleArray42 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray41);
        double[][] doubleArray43 = new double[][] {};
        double[][] doubleArray44 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray43);
        double[] doubleArray46 = new double[] { 1 };
        double[] doubleArray48 = new double[] { 1 };
        double[] doubleArray50 = new double[] { 1 };
        double[] doubleArray52 = new double[] { 1 };
        double[] doubleArray54 = new double[] { 1 };
        double[][] doubleArray55 = new double[][] { doubleArray46, doubleArray48, doubleArray50, doubleArray52, doubleArray54 };
        int[] intArray56 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray55, intArray56);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray43, intArray56);
        double[] doubleArray62 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray66 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray70 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray74 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray75 = new double[][] { doubleArray62, doubleArray66, doubleArray70, doubleArray74 };
        double[] doubleArray77 = new double[] { 1 };
        double[] doubleArray79 = new double[] { 1 };
        double[] doubleArray81 = new double[] { 1 };
        double[] doubleArray83 = new double[] { 1 };
        double[] doubleArray85 = new double[] { 1 };
        double[][] doubleArray86 = new double[][] { doubleArray77, doubleArray79, doubleArray81, doubleArray83, doubleArray85 };
        int[] intArray87 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray86, intArray87);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray75, intArray87);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray43, intArray87);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray42, intArray87);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray40, intArray87);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray35, intArray87);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray34, intArray87);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray31, intArray87);
        double[][] doubleArray96 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray31);
        double[][] doubleArray97 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray31);
        double[][] doubleArray98 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray97);
        java.lang.Class<?> wildcardClass99 = doubleArray98.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[]");
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray66), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray70), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray74), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray77), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray79), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray81), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray83), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray85), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray86);
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray87), "[]");
        org.junit.Assert.assertNotNull(doubleArray96);
        org.junit.Assert.assertNotNull(doubleArray97);
        org.junit.Assert.assertNotNull(doubleArray98);
        org.junit.Assert.assertNotNull(wildcardClass99);
    }

    @Test
    public void test0876() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0876");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray30 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray31 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[] doubleArray33 = new double[] { 1 };
        double[] doubleArray35 = new double[] { 1 };
        double[] doubleArray37 = new double[] { 1 };
        double[] doubleArray39 = new double[] { 1 };
        double[] doubleArray41 = new double[] { 1 };
        double[][] doubleArray42 = new double[][] { doubleArray33, doubleArray35, doubleArray37, doubleArray39, doubleArray41 };
        int[] intArray43 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray42, intArray43);
        double[] doubleArray51 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray58 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray65 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray72 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray73 = new double[][] { doubleArray51, doubleArray58, doubleArray65, doubleArray72 };
        double[][] doubleArray74 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray73);
        double[] doubleArray76 = new double[] { 1 };
        double[] doubleArray78 = new double[] { 1 };
        double[] doubleArray80 = new double[] { 1 };
        double[] doubleArray82 = new double[] { 1 };
        double[] doubleArray84 = new double[] { 1 };
        double[][] doubleArray85 = new double[][] { doubleArray76, doubleArray78, doubleArray80, doubleArray82, doubleArray84 };
        int[] intArray86 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray85, intArray86);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray74, intArray86);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray42, intArray86);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray31, intArray86);
        double[][] doubleArray91 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray31);
        double[][] doubleArray92 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray31);
        double[][] doubleArray93 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray31);
        double[][] doubleArray94 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray31);
        double[][] doubleArray95 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray31);
        double[][] doubleArray96 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray31);
        double[][] doubleArray97 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray31);
        double[][] doubleArray98 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray97);
        double[][] doubleArray99 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray98);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray78), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray80), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray82), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray84), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray85);
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray86), "[]");
        org.junit.Assert.assertNotNull(doubleArray91);
        org.junit.Assert.assertNotNull(doubleArray92);
        org.junit.Assert.assertNotNull(doubleArray93);
        org.junit.Assert.assertNotNull(doubleArray94);
        org.junit.Assert.assertNotNull(doubleArray95);
        org.junit.Assert.assertNotNull(doubleArray96);
        org.junit.Assert.assertNotNull(doubleArray97);
        org.junit.Assert.assertNotNull(doubleArray98);
        org.junit.Assert.assertNotNull(doubleArray99);
    }

    @Test
    public void test0877() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0877");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[] doubleArray9 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray16 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray23 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray30 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray31 = new double[][] { doubleArray9, doubleArray16, doubleArray23, doubleArray30 };
        double[][] doubleArray32 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray31);
        double[][] doubleArray33 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray31);
        double[][] doubleArray34 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray31);
        double[][] doubleArray35 = new double[][] {};
        double[][] doubleArray36 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray35);
        int[] intArray37 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray36, intArray37);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray34, intArray37);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray2, intArray37);
        double[][] doubleArray41 = null;
        double[][] doubleArray42 = new double[][] {};
        double[][] doubleArray43 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray42);
        double[][] doubleArray44 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray43);
        double[] doubleArray48 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray52 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray56 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray60 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray61 = new double[][] { doubleArray48, doubleArray52, doubleArray56, doubleArray60 };
        double[] doubleArray63 = new double[] { 1 };
        double[] doubleArray65 = new double[] { 1 };
        double[] doubleArray67 = new double[] { 1 };
        double[] doubleArray69 = new double[] { 1 };
        double[] doubleArray71 = new double[] { 1 };
        double[][] doubleArray72 = new double[][] { doubleArray63, doubleArray65, doubleArray67, doubleArray69, doubleArray71 };
        int[] intArray73 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray72, intArray73);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray61, intArray73);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray44, intArray73);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray41, intArray73);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray2, intArray73);
        double[][] doubleArray79 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray80 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray79);
        double[][] doubleArray81 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray80);
        double[][] doubleArray82 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray80);
        double[][] doubleArray83 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray82);
        java.lang.Class<?> wildcardClass84 = doubleArray83.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray71), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[]");
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertNotNull(doubleArray81);
        org.junit.Assert.assertNotNull(doubleArray82);
        org.junit.Assert.assertNotNull(doubleArray83);
        org.junit.Assert.assertNotNull(wildcardClass84);
    }

    @Test
    public void test0878() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0878");
        double[][] doubleArray0 = null;
        double[] doubleArray4 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray8 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray12 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray16 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray17 = new double[][] { doubleArray4, doubleArray8, doubleArray12, doubleArray16 };
        double[] doubleArray19 = new double[] { 1 };
        double[] doubleArray21 = new double[] { 1 };
        double[] doubleArray23 = new double[] { 1 };
        double[] doubleArray25 = new double[] { 1 };
        double[] doubleArray27 = new double[] { 1 };
        double[][] doubleArray28 = new double[][] { doubleArray19, doubleArray21, doubleArray23, doubleArray25, doubleArray27 };
        int[] intArray29 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray28, intArray29);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray17, intArray29);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray0, intArray29);
        java.lang.Class<?> wildcardClass33 = intArray29.getClass();
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[]");
        org.junit.Assert.assertNotNull(wildcardClass33);
    }

    @Test
    public void test0879() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0879");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[] doubleArray10 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray17 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray24 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray31 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray32 = new double[][] { doubleArray10, doubleArray17, doubleArray24, doubleArray31 };
        double[][] doubleArray33 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray32);
        double[][] doubleArray34 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray32);
        double[][] doubleArray35 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray32);
        double[][] doubleArray36 = new double[][] {};
        double[][] doubleArray37 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray36);
        int[] intArray38 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray37, intArray38);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray35, intArray38);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray3, intArray38);
        double[][] doubleArray42 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[][] doubleArray43 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray42);
        double[][] doubleArray44 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray42);
        java.lang.Class<?> wildcardClass45 = doubleArray44.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertNotNull(wildcardClass45);
    }

    @Test
    public void test0880() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0880");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[] doubleArray31 = new double[] { 1 };
        double[] doubleArray33 = new double[] { 1 };
        double[] doubleArray35 = new double[] { 1 };
        double[] doubleArray37 = new double[] { 1 };
        double[] doubleArray39 = new double[] { 1 };
        double[][] doubleArray40 = new double[][] { doubleArray31, doubleArray33, doubleArray35, doubleArray37, doubleArray39 };
        int[] intArray41 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray40, intArray41);
        double[][] doubleArray43 = new double[][] {};
        double[][] doubleArray44 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray43);
        int[] intArray45 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray44, intArray45);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray40, intArray45);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray28, intArray45);
        double[][] doubleArray49 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray50 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray49);
        double[][] doubleArray51 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray50);
        java.lang.Class<?> wildcardClass52 = doubleArray51.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertNotNull(wildcardClass52);
    }

    @Test
    public void test0881() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0881");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = new double[][] {};
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[] doubleArray11 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray18 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray25 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray32 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray33 = new double[][] { doubleArray11, doubleArray18, doubleArray25, doubleArray32 };
        double[][] doubleArray34 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray33);
        double[] doubleArray36 = new double[] { 1 };
        double[] doubleArray38 = new double[] { 1 };
        double[] doubleArray40 = new double[] { 1 };
        double[] doubleArray42 = new double[] { 1 };
        double[] doubleArray44 = new double[] { 1 };
        double[][] doubleArray45 = new double[][] { doubleArray36, doubleArray38, doubleArray40, doubleArray42, doubleArray44 };
        int[] intArray46 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray45, intArray46);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray34, intArray46);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray3, intArray46);
        double[] doubleArray53 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray57 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray61 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray65 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray66 = new double[][] { doubleArray53, doubleArray57, doubleArray61, doubleArray65 };
        double[] doubleArray68 = new double[] { 1 };
        double[] doubleArray70 = new double[] { 1 };
        double[] doubleArray72 = new double[] { 1 };
        double[] doubleArray74 = new double[] { 1 };
        double[] doubleArray76 = new double[] { 1 };
        double[][] doubleArray77 = new double[][] { doubleArray68, doubleArray70, doubleArray72, doubleArray74, doubleArray76 };
        int[] intArray78 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray77, intArray78);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray66, intArray78);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray3, intArray78);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray0, intArray78);
        double[][] doubleArray83 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray84 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray85 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray84);
        double[][] doubleArray86 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray85);
        java.lang.Class<?> wildcardClass87 = doubleArray85.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[]");
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray70), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray74), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[]");
        org.junit.Assert.assertNotNull(doubleArray83);
        org.junit.Assert.assertNotNull(doubleArray84);
        org.junit.Assert.assertNotNull(doubleArray85);
        org.junit.Assert.assertNotNull(doubleArray86);
        org.junit.Assert.assertNotNull(wildcardClass87);
    }

    @Test
    public void test0882() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0882");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray5 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray4);
        double[][] doubleArray6 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray5);
        double[][] doubleArray7 = null;
        double[][] doubleArray8 = null;
        double[][] doubleArray9 = new double[][] {};
        double[][] doubleArray10 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray9);
        double[][] doubleArray11 = new double[][] {};
        double[][] doubleArray12 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray11);
        double[][] doubleArray13 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray12);
        double[] doubleArray17 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray21 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray25 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray29 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray30 = new double[][] { doubleArray17, doubleArray21, doubleArray25, doubleArray29 };
        double[] doubleArray32 = new double[] { 1 };
        double[] doubleArray34 = new double[] { 1 };
        double[] doubleArray36 = new double[] { 1 };
        double[] doubleArray38 = new double[] { 1 };
        double[] doubleArray40 = new double[] { 1 };
        double[][] doubleArray41 = new double[][] { doubleArray32, doubleArray34, doubleArray36, doubleArray38, doubleArray40 };
        int[] intArray42 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray41, intArray42);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray30, intArray42);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray12, intArray42);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray10, intArray42);
        double[][] doubleArray47 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray10);
        double[][] doubleArray48 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray47);
        double[] doubleArray50 = new double[] { 1 };
        double[] doubleArray52 = new double[] { 1 };
        double[] doubleArray54 = new double[] { 1 };
        double[] doubleArray56 = new double[] { 1 };
        double[] doubleArray58 = new double[] { 1 };
        double[][] doubleArray59 = new double[][] { doubleArray50, doubleArray52, doubleArray54, doubleArray56, doubleArray58 };
        int[] intArray60 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray59, intArray60);
        double[][] doubleArray62 = new double[][] {};
        double[][] doubleArray63 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray62);
        int[] intArray64 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray63, intArray64);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray59, intArray64);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray47, intArray64);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray8, intArray64);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray7, intArray64);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray5, intArray64);
        java.lang.Class<?> wildcardClass71 = intArray64.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[]");
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[]");
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[]");
        org.junit.Assert.assertNotNull(wildcardClass71);
    }

    @Test
    public void test0883() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0883");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[][] doubleArray5 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[][] doubleArray6 = new double[][] {};
        double[][] doubleArray7 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray6);
        double[][] doubleArray8 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray7);
        double[] doubleArray15 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray22 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray29 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray36 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray37 = new double[][] { doubleArray15, doubleArray22, doubleArray29, doubleArray36 };
        double[][] doubleArray38 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray37);
        double[] doubleArray40 = new double[] { 1 };
        double[] doubleArray42 = new double[] { 1 };
        double[] doubleArray44 = new double[] { 1 };
        double[] doubleArray46 = new double[] { 1 };
        double[] doubleArray48 = new double[] { 1 };
        double[][] doubleArray49 = new double[][] { doubleArray40, doubleArray42, doubleArray44, doubleArray46, doubleArray48 };
        int[] intArray50 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray49, intArray50);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray38, intArray50);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray7, intArray50);
        double[] doubleArray57 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray61 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray65 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray69 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray70 = new double[][] { doubleArray57, doubleArray61, doubleArray65, doubleArray69 };
        double[] doubleArray72 = new double[] { 1 };
        double[] doubleArray74 = new double[] { 1 };
        double[] doubleArray76 = new double[] { 1 };
        double[] doubleArray78 = new double[] { 1 };
        double[] doubleArray80 = new double[] { 1 };
        double[][] doubleArray81 = new double[][] { doubleArray72, doubleArray74, doubleArray76, doubleArray78, doubleArray80 };
        int[] intArray82 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray81, intArray82);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray70, intArray82);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray7, intArray82);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray3, intArray82);
        double[][] doubleArray87 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[][] doubleArray88 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[][] doubleArray89 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[][] doubleArray90 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray89);
        java.lang.Class<?> wildcardClass91 = doubleArray89.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[]");
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray74), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray78), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray80), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray81);
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[]");
        org.junit.Assert.assertNotNull(doubleArray87);
        org.junit.Assert.assertNotNull(doubleArray88);
        org.junit.Assert.assertNotNull(doubleArray89);
        org.junit.Assert.assertNotNull(doubleArray90);
        org.junit.Assert.assertNotNull(wildcardClass91);
    }

    @Test
    public void test0884() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0884");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray30 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray31 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray32 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray31);
        double[][] doubleArray33 = new double[][] {};
        double[][] doubleArray34 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray33);
        int[] intArray35 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray34, intArray35);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray32, intArray35);
        double[][] doubleArray38 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray32);
        java.lang.Class<?> wildcardClass39 = doubleArray38.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertNotNull(wildcardClass39);
    }

    @Test
    public void test0885() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0885");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = new double[][] {};
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[] doubleArray8 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray12 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray16 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray20 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray21 = new double[][] { doubleArray8, doubleArray12, doubleArray16, doubleArray20 };
        double[] doubleArray23 = new double[] { 1 };
        double[] doubleArray25 = new double[] { 1 };
        double[] doubleArray27 = new double[] { 1 };
        double[] doubleArray29 = new double[] { 1 };
        double[] doubleArray31 = new double[] { 1 };
        double[][] doubleArray32 = new double[][] { doubleArray23, doubleArray25, doubleArray27, doubleArray29, doubleArray31 };
        int[] intArray33 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray32, intArray33);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray21, intArray33);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray3, intArray33);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray1, intArray33);
        double[][] doubleArray38 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray39 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray38);
        double[][] doubleArray40 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray38);
        double[][] doubleArray41 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray38);
        double[][] doubleArray42 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray38);
        double[][] doubleArray43 = new double[][] {};
        double[][] doubleArray44 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray43);
        int[] intArray45 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray44, intArray45);
        double[] doubleArray48 = new double[] { 1 };
        double[] doubleArray50 = new double[] { 1 };
        double[] doubleArray52 = new double[] { 1 };
        double[] doubleArray54 = new double[] { 1 };
        double[] doubleArray56 = new double[] { 1 };
        double[][] doubleArray57 = new double[][] { doubleArray48, doubleArray50, doubleArray52, doubleArray54, doubleArray56 };
        int[] intArray58 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray57, intArray58);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray44, intArray58);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray42, intArray58);
        java.lang.Class<?> wildcardClass62 = doubleArray42.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[]");
        org.junit.Assert.assertNotNull(wildcardClass62);
    }

    @Test
    public void test0886() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0886");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[] doubleArray10 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray17 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray24 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray31 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray32 = new double[][] { doubleArray10, doubleArray17, doubleArray24, doubleArray31 };
        double[][] doubleArray33 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray32);
        double[][] doubleArray34 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray32);
        double[][] doubleArray35 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray32);
        double[] doubleArray37 = new double[] { 1 };
        double[] doubleArray39 = new double[] { 1 };
        double[] doubleArray41 = new double[] { 1 };
        double[] doubleArray43 = new double[] { 1 };
        double[] doubleArray45 = new double[] { 1 };
        double[][] doubleArray46 = new double[][] { doubleArray37, doubleArray39, doubleArray41, doubleArray43, doubleArray45 };
        int[] intArray47 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray46, intArray47);
        double[] doubleArray55 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray62 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray69 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray76 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray77 = new double[][] { doubleArray55, doubleArray62, doubleArray69, doubleArray76 };
        double[][] doubleArray78 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray77);
        double[] doubleArray80 = new double[] { 1 };
        double[] doubleArray82 = new double[] { 1 };
        double[] doubleArray84 = new double[] { 1 };
        double[] doubleArray86 = new double[] { 1 };
        double[] doubleArray88 = new double[] { 1 };
        double[][] doubleArray89 = new double[][] { doubleArray80, doubleArray82, doubleArray84, doubleArray86, doubleArray88 };
        int[] intArray90 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray89, intArray90);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray78, intArray90);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray46, intArray90);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray35, intArray90);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray3, intArray90);
        double[][] doubleArray96 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[][] doubleArray97 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        java.lang.Class<?> wildcardClass98 = doubleArray3.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[]");
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray80), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray82), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray84), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray86), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray88), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray89);
        org.junit.Assert.assertNotNull(intArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray90), "[]");
        org.junit.Assert.assertNotNull(doubleArray96);
        org.junit.Assert.assertNotNull(doubleArray97);
        org.junit.Assert.assertNotNull(wildcardClass98);
    }

    @Test
    public void test0887() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0887");
        double[] doubleArray1 = new double[] { 1 };
        double[] doubleArray3 = new double[] { 1 };
        double[] doubleArray5 = new double[] { 1 };
        double[] doubleArray7 = new double[] { 1 };
        double[] doubleArray9 = new double[] { 1 };
        double[][] doubleArray10 = new double[][] { doubleArray1, doubleArray3, doubleArray5, doubleArray7, doubleArray9 };
        int[] intArray11 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray10, intArray11);
        double[][] doubleArray13 = new double[][] {};
        double[][] doubleArray14 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray13);
        int[] intArray15 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray14, intArray15);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray10, intArray15);
        double[][] doubleArray18 = new double[][] {};
        double[][] doubleArray19 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray18);
        double[][] doubleArray20 = new double[][] {};
        double[][] doubleArray21 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray20);
        double[][] doubleArray22 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray21);
        double[] doubleArray26 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray30 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray34 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray38 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray39 = new double[][] { doubleArray26, doubleArray30, doubleArray34, doubleArray38 };
        double[] doubleArray41 = new double[] { 1 };
        double[] doubleArray43 = new double[] { 1 };
        double[] doubleArray45 = new double[] { 1 };
        double[] doubleArray47 = new double[] { 1 };
        double[] doubleArray49 = new double[] { 1 };
        double[][] doubleArray50 = new double[][] { doubleArray41, doubleArray43, doubleArray45, doubleArray47, doubleArray49 };
        int[] intArray51 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray50, intArray51);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray39, intArray51);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray21, intArray51);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray19, intArray51);
        double[][] doubleArray56 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray19);
        double[][] doubleArray57 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray56);
        double[] doubleArray59 = new double[] { 1 };
        double[] doubleArray61 = new double[] { 1 };
        double[] doubleArray63 = new double[] { 1 };
        double[] doubleArray65 = new double[] { 1 };
        double[] doubleArray67 = new double[] { 1 };
        double[][] doubleArray68 = new double[][] { doubleArray59, doubleArray61, doubleArray63, doubleArray65, doubleArray67 };
        int[] intArray69 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray68, intArray69);
        double[][] doubleArray71 = new double[][] {};
        double[][] doubleArray72 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray71);
        int[] intArray73 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray72, intArray73);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray68, intArray73);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray56, intArray73);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray10, intArray73);
        // The following exception was thrown during execution in test generation
        try {
            double[][] doubleArray78 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray10);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray11), "[]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[]");
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[]");
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[]");
    }

    @Test
    public void test0888() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0888");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray30 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray29);
        double[][] doubleArray31 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        double[][] doubleArray32 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        double[][] doubleArray33 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        double[][] doubleArray34 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        double[][] doubleArray35 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray34);
        double[][] doubleArray36 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray35);
        double[][] doubleArray37 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray35);
        java.lang.Class<?> wildcardClass38 = doubleArray37.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertNotNull(wildcardClass38);
    }

    @Test
    public void test0889() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0889");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = new double[][] {};
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[][] doubleArray5 = new double[][] {};
        double[][] doubleArray6 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray5);
        double[][] doubleArray7 = new double[][] {};
        double[][] doubleArray8 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray7);
        double[] doubleArray10 = new double[] { 1 };
        double[] doubleArray12 = new double[] { 1 };
        double[] doubleArray14 = new double[] { 1 };
        double[] doubleArray16 = new double[] { 1 };
        double[] doubleArray18 = new double[] { 1 };
        double[][] doubleArray19 = new double[][] { doubleArray10, doubleArray12, doubleArray14, doubleArray16, doubleArray18 };
        int[] intArray20 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray19, intArray20);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray7, intArray20);
        double[] doubleArray26 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray30 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray34 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray38 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray39 = new double[][] { doubleArray26, doubleArray30, doubleArray34, doubleArray38 };
        double[] doubleArray41 = new double[] { 1 };
        double[] doubleArray43 = new double[] { 1 };
        double[] doubleArray45 = new double[] { 1 };
        double[] doubleArray47 = new double[] { 1 };
        double[] doubleArray49 = new double[] { 1 };
        double[][] doubleArray50 = new double[][] { doubleArray41, doubleArray43, doubleArray45, doubleArray47, doubleArray49 };
        int[] intArray51 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray50, intArray51);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray39, intArray51);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray7, intArray51);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray6, intArray51);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray4, intArray51);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray1, intArray51);
        double[][] doubleArray58 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[] doubleArray65 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray72 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray79 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray86 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray87 = new double[][] { doubleArray65, doubleArray72, doubleArray79, doubleArray86 };
        double[][] doubleArray88 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray87);
        double[][] doubleArray89 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray87);
        double[][] doubleArray90 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray87);
        double[][] doubleArray91 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray90);
        double[][] doubleArray92 = new double[][] {};
        double[][] doubleArray93 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray92);
        int[] intArray94 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray93, intArray94);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray91, intArray94);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray58, intArray94);
        java.lang.Class<?> wildcardClass98 = intArray94.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[]");
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[]");
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray79), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray86), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray87);
        org.junit.Assert.assertNotNull(doubleArray88);
        org.junit.Assert.assertNotNull(doubleArray89);
        org.junit.Assert.assertNotNull(doubleArray90);
        org.junit.Assert.assertNotNull(doubleArray91);
        org.junit.Assert.assertNotNull(doubleArray92);
        org.junit.Assert.assertNotNull(doubleArray93);
        org.junit.Assert.assertNotNull(intArray94);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray94), "[]");
        org.junit.Assert.assertNotNull(wildcardClass98);
    }

    @Test
    public void test0890() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0890");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[] doubleArray4 = new double[] { 1 };
        double[] doubleArray6 = new double[] { 1 };
        double[] doubleArray8 = new double[] { 1 };
        double[] doubleArray10 = new double[] { 1 };
        double[] doubleArray12 = new double[] { 1 };
        double[][] doubleArray13 = new double[][] { doubleArray4, doubleArray6, doubleArray8, doubleArray10, doubleArray12 };
        int[] intArray14 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray13, intArray14);
        double[] doubleArray22 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray29 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray36 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray43 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray44 = new double[][] { doubleArray22, doubleArray29, doubleArray36, doubleArray43 };
        double[][] doubleArray45 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray44);
        double[] doubleArray47 = new double[] { 1 };
        double[] doubleArray49 = new double[] { 1 };
        double[] doubleArray51 = new double[] { 1 };
        double[] doubleArray53 = new double[] { 1 };
        double[] doubleArray55 = new double[] { 1 };
        double[][] doubleArray56 = new double[][] { doubleArray47, doubleArray49, doubleArray51, doubleArray53, doubleArray55 };
        int[] intArray57 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray56, intArray57);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray45, intArray57);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray13, intArray57);
        double[] doubleArray62 = new double[] { 1 };
        double[] doubleArray64 = new double[] { 1 };
        double[] doubleArray66 = new double[] { 1 };
        double[] doubleArray68 = new double[] { 1 };
        double[] doubleArray70 = new double[] { 1 };
        double[][] doubleArray71 = new double[][] { doubleArray62, doubleArray64, doubleArray66, doubleArray68, doubleArray70 };
        int[] intArray72 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray71, intArray72);
        double[][] doubleArray74 = new double[][] {};
        double[][] doubleArray75 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray74);
        int[] intArray76 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray75, intArray76);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray71, intArray76);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray13, intArray76);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray2, intArray76);
        double[][] doubleArray81 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        java.lang.Class<?> wildcardClass82 = doubleArray2.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[]");
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[]");
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray66), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray70), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[]");
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[]");
        org.junit.Assert.assertNotNull(doubleArray81);
        org.junit.Assert.assertNotNull(wildcardClass82);
    }

    @Test
    public void test0891() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0891");
        double[][] doubleArray0 = null;
        double[][] doubleArray1 = new double[][] {};
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[][] doubleArray5 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[][] doubleArray6 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[][] doubleArray7 = new double[][] {};
        double[][] doubleArray8 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray7);
        double[][] doubleArray9 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray7);
        double[] doubleArray16 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray23 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray30 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray37 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray38 = new double[][] { doubleArray16, doubleArray23, doubleArray30, doubleArray37 };
        double[][] doubleArray39 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray38);
        double[][] doubleArray40 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray38);
        double[][] doubleArray41 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray38);
        double[][] doubleArray42 = new double[][] {};
        double[][] doubleArray43 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray42);
        int[] intArray44 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray43, intArray44);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray41, intArray44);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray9, intArray44);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray3, intArray44);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray0, intArray44);
        java.lang.Class<?> wildcardClass50 = intArray44.getClass();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[]");
        org.junit.Assert.assertNotNull(wildcardClass50);
    }

    @Test
    public void test0892() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0892");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        int[] intArray2 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray1, intArray2);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray5 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray6 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray5);
        java.lang.Class<?> wildcardClass7 = doubleArray6.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(wildcardClass7);
    }

    @Test
    public void test0893() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0893");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[] doubleArray6 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray10 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray14 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray18 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray19 = new double[][] { doubleArray6, doubleArray10, doubleArray14, doubleArray18 };
        double[] doubleArray21 = new double[] { 1 };
        double[] doubleArray23 = new double[] { 1 };
        double[] doubleArray25 = new double[] { 1 };
        double[] doubleArray27 = new double[] { 1 };
        double[] doubleArray29 = new double[] { 1 };
        double[][] doubleArray30 = new double[][] { doubleArray21, doubleArray23, doubleArray25, doubleArray27, doubleArray29 };
        int[] intArray31 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray30, intArray31);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray19, intArray31);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray2, intArray31);
        double[][] doubleArray35 = null;
        double[][] doubleArray36 = new double[][] {};
        double[][] doubleArray37 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray36);
        double[][] doubleArray38 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray37);
        double[] doubleArray42 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray46 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray50 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray54 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray55 = new double[][] { doubleArray42, doubleArray46, doubleArray50, doubleArray54 };
        double[] doubleArray57 = new double[] { 1 };
        double[] doubleArray59 = new double[] { 1 };
        double[] doubleArray61 = new double[] { 1 };
        double[] doubleArray63 = new double[] { 1 };
        double[] doubleArray65 = new double[] { 1 };
        double[][] doubleArray66 = new double[][] { doubleArray57, doubleArray59, doubleArray61, doubleArray63, doubleArray65 };
        int[] intArray67 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray66, intArray67);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray55, intArray67);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray38, intArray67);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray35, intArray67);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray2, intArray67);
        double[][] doubleArray73 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray74 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray73);
        int[] intArray75 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray74, intArray75);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[]");
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertNotNull(doubleArray74);
    }

    @Test
    public void test0894() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0894");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = new double[][] {};
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[] doubleArray8 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray12 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray16 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray20 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray21 = new double[][] { doubleArray8, doubleArray12, doubleArray16, doubleArray20 };
        double[] doubleArray23 = new double[] { 1 };
        double[] doubleArray25 = new double[] { 1 };
        double[] doubleArray27 = new double[] { 1 };
        double[] doubleArray29 = new double[] { 1 };
        double[] doubleArray31 = new double[] { 1 };
        double[][] doubleArray32 = new double[][] { doubleArray23, doubleArray25, doubleArray27, doubleArray29, doubleArray31 };
        int[] intArray33 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray32, intArray33);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray21, intArray33);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray3, intArray33);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray1, intArray33);
        double[][] doubleArray38 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray39 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray38);
        double[][] doubleArray40 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray38);
        double[][] doubleArray41 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray38);
        double[][] doubleArray42 = new double[][] {};
        double[][] doubleArray43 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray42);
        double[][] doubleArray44 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray42);
        double[][] doubleArray45 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray42);
        double[][] doubleArray46 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray45);
        double[][] doubleArray47 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray46);
        double[][] doubleArray48 = new double[][] {};
        double[][] doubleArray49 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray48);
        double[][] doubleArray50 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray48);
        double[][] doubleArray51 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray50);
        double[][] doubleArray52 = null;
        double[][] doubleArray53 = new double[][] {};
        double[][] doubleArray54 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray53);
        double[][] doubleArray55 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray54);
        double[] doubleArray59 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray63 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray67 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray71 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray72 = new double[][] { doubleArray59, doubleArray63, doubleArray67, doubleArray71 };
        double[] doubleArray74 = new double[] { 1 };
        double[] doubleArray76 = new double[] { 1 };
        double[] doubleArray78 = new double[] { 1 };
        double[] doubleArray80 = new double[] { 1 };
        double[] doubleArray82 = new double[] { 1 };
        double[][] doubleArray83 = new double[][] { doubleArray74, doubleArray76, doubleArray78, doubleArray80, doubleArray82 };
        int[] intArray84 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray83, intArray84);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray72, intArray84);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray55, intArray84);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray52, intArray84);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray51, intArray84);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray46, intArray84);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray38, intArray84);
        java.lang.Class<?> wildcardClass92 = intArray84.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray71), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray74), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray78), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray80), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray82), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray83);
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray84), "[]");
        org.junit.Assert.assertNotNull(wildcardClass92);
    }

    @Test
    public void test0895() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0895");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = new double[][] {};
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[] doubleArray8 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray12 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray16 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray20 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray21 = new double[][] { doubleArray8, doubleArray12, doubleArray16, doubleArray20 };
        double[] doubleArray23 = new double[] { 1 };
        double[] doubleArray25 = new double[] { 1 };
        double[] doubleArray27 = new double[] { 1 };
        double[] doubleArray29 = new double[] { 1 };
        double[] doubleArray31 = new double[] { 1 };
        double[][] doubleArray32 = new double[][] { doubleArray23, doubleArray25, doubleArray27, doubleArray29, doubleArray31 };
        int[] intArray33 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray32, intArray33);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray21, intArray33);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray3, intArray33);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray1, intArray33);
        double[][] doubleArray38 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray39 = new double[][] {};
        double[][] doubleArray40 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray39);
        double[] doubleArray42 = new double[] { 1 };
        double[] doubleArray44 = new double[] { 1 };
        double[] doubleArray46 = new double[] { 1 };
        double[] doubleArray48 = new double[] { 1 };
        double[] doubleArray50 = new double[] { 1 };
        double[][] doubleArray51 = new double[][] { doubleArray42, doubleArray44, doubleArray46, doubleArray48, doubleArray50 };
        int[] intArray52 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray51, intArray52);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray39, intArray52);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray1, intArray52);
        double[][] doubleArray56 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray57 = new double[][] {};
        double[][] doubleArray58 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray57);
        int[] intArray59 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray58, intArray59);
        double[][] doubleArray61 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray58);
        double[][] doubleArray62 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray61);
        double[][] doubleArray63 = new double[][] {};
        double[][] doubleArray64 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray63);
        int[] intArray65 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray64, intArray65);
        double[] doubleArray68 = new double[] { 1 };
        double[] doubleArray70 = new double[] { 1 };
        double[] doubleArray72 = new double[] { 1 };
        double[] doubleArray74 = new double[] { 1 };
        double[] doubleArray76 = new double[] { 1 };
        double[][] doubleArray77 = new double[][] { doubleArray68, doubleArray70, doubleArray72, doubleArray74, doubleArray76 };
        int[] intArray78 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray77, intArray78);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray64, intArray78);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray61, intArray78);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray1, intArray78);
        java.lang.Class<?> wildcardClass83 = doubleArray1.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[]");
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[]");
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray70), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray74), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[]");
        org.junit.Assert.assertNotNull(wildcardClass83);
    }

    @Test
    public void test0896() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0896");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray30 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray29);
        double[][] doubleArray31 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        double[][] doubleArray32 = new double[][] {};
        double[][] doubleArray33 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray32);
        double[][] doubleArray34 = new double[][] {};
        double[][] doubleArray35 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray34);
        double[] doubleArray37 = new double[] { 1 };
        double[] doubleArray39 = new double[] { 1 };
        double[] doubleArray41 = new double[] { 1 };
        double[] doubleArray43 = new double[] { 1 };
        double[] doubleArray45 = new double[] { 1 };
        double[][] doubleArray46 = new double[][] { doubleArray37, doubleArray39, doubleArray41, doubleArray43, doubleArray45 };
        int[] intArray47 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray46, intArray47);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray34, intArray47);
        double[] doubleArray53 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray57 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray61 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray65 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray66 = new double[][] { doubleArray53, doubleArray57, doubleArray61, doubleArray65 };
        double[] doubleArray68 = new double[] { 1 };
        double[] doubleArray70 = new double[] { 1 };
        double[] doubleArray72 = new double[] { 1 };
        double[] doubleArray74 = new double[] { 1 };
        double[] doubleArray76 = new double[] { 1 };
        double[][] doubleArray77 = new double[][] { doubleArray68, doubleArray70, doubleArray72, doubleArray74, doubleArray76 };
        int[] intArray78 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray77, intArray78);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray66, intArray78);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray34, intArray78);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray33, intArray78);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray30, intArray78);
        double[][] doubleArray84 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        java.lang.Class<?> wildcardClass85 = doubleArray30.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[]");
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray70), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray74), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[]");
        org.junit.Assert.assertNotNull(doubleArray84);
        org.junit.Assert.assertNotNull(wildcardClass85);
    }

    @Test
    public void test0897() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0897");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[] doubleArray3 = new double[] { 1 };
        double[] doubleArray5 = new double[] { 1 };
        double[] doubleArray7 = new double[] { 1 };
        double[] doubleArray9 = new double[] { 1 };
        double[] doubleArray11 = new double[] { 1 };
        double[][] doubleArray12 = new double[][] { doubleArray3, doubleArray5, doubleArray7, doubleArray9, doubleArray11 };
        int[] intArray13 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray12, intArray13);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray0, intArray13);
        double[] doubleArray19 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray23 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray27 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray31 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray32 = new double[][] { doubleArray19, doubleArray23, doubleArray27, doubleArray31 };
        double[] doubleArray34 = new double[] { 1 };
        double[] doubleArray36 = new double[] { 1 };
        double[] doubleArray38 = new double[] { 1 };
        double[] doubleArray40 = new double[] { 1 };
        double[] doubleArray42 = new double[] { 1 };
        double[][] doubleArray43 = new double[][] { doubleArray34, doubleArray36, doubleArray38, doubleArray40, doubleArray42 };
        int[] intArray44 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray43, intArray44);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray32, intArray44);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray0, intArray44);
        double[] doubleArray49 = new double[] { 1 };
        double[] doubleArray51 = new double[] { 1 };
        double[] doubleArray53 = new double[] { 1 };
        double[] doubleArray55 = new double[] { 1 };
        double[] doubleArray57 = new double[] { 1 };
        double[][] doubleArray58 = new double[][] { doubleArray49, doubleArray51, doubleArray53, doubleArray55, doubleArray57 };
        int[] intArray59 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray58, intArray59);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray0, intArray59);
        double[][] doubleArray62 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray63 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray64 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray63);
        java.lang.Class<?> wildcardClass65 = doubleArray63.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[]");
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertNotNull(wildcardClass65);
    }

    @Test
    public void test0898() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0898");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        int[] intArray2 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray1, intArray2);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray5 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray4);
        java.lang.Class<?> wildcardClass6 = doubleArray5.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(wildcardClass6);
    }

    @Test
    public void test0899() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0899");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray5 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray4);
        double[][] doubleArray6 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray4);
        double[][] doubleArray7 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray6);
        double[][] doubleArray8 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray6);
        double[][] doubleArray9 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray6);
        double[][] doubleArray10 = new double[][] {};
        double[][] doubleArray11 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray10);
        int[] intArray12 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray11, intArray12);
        double[] doubleArray15 = new double[] { 1 };
        double[] doubleArray17 = new double[] { 1 };
        double[] doubleArray19 = new double[] { 1 };
        double[] doubleArray21 = new double[] { 1 };
        double[] doubleArray23 = new double[] { 1 };
        double[][] doubleArray24 = new double[][] { doubleArray15, doubleArray17, doubleArray19, doubleArray21, doubleArray23 };
        int[] intArray25 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray24, intArray25);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray11, intArray25);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray6, intArray25);
        java.lang.Class<?> wildcardClass29 = doubleArray6.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[]");
        org.junit.Assert.assertNotNull(wildcardClass29);
    }

    @Test
    public void test0900() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0900");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[][] doubleArray5 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[][] doubleArray6 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray5);
        double[][] doubleArray7 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray5);
        double[][] doubleArray8 = new double[][] {};
        double[][] doubleArray9 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray8);
        double[][] doubleArray10 = new double[][] {};
        double[][] doubleArray11 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray10);
        double[] doubleArray13 = new double[] { 1 };
        double[] doubleArray15 = new double[] { 1 };
        double[] doubleArray17 = new double[] { 1 };
        double[] doubleArray19 = new double[] { 1 };
        double[] doubleArray21 = new double[] { 1 };
        double[][] doubleArray22 = new double[][] { doubleArray13, doubleArray15, doubleArray17, doubleArray19, doubleArray21 };
        int[] intArray23 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray22, intArray23);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray10, intArray23);
        double[] doubleArray29 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray33 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray37 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray41 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray42 = new double[][] { doubleArray29, doubleArray33, doubleArray37, doubleArray41 };
        double[] doubleArray44 = new double[] { 1 };
        double[] doubleArray46 = new double[] { 1 };
        double[] doubleArray48 = new double[] { 1 };
        double[] doubleArray50 = new double[] { 1 };
        double[] doubleArray52 = new double[] { 1 };
        double[][] doubleArray53 = new double[][] { doubleArray44, doubleArray46, doubleArray48, doubleArray50, doubleArray52 };
        int[] intArray54 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray53, intArray54);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray42, intArray54);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray10, intArray54);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray9, intArray54);
        double[] doubleArray60 = new double[] { 1 };
        double[] doubleArray62 = new double[] { 1 };
        double[] doubleArray64 = new double[] { 1 };
        double[] doubleArray66 = new double[] { 1 };
        double[] doubleArray68 = new double[] { 1 };
        double[][] doubleArray69 = new double[][] { doubleArray60, doubleArray62, doubleArray64, doubleArray66, doubleArray68 };
        int[] intArray70 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray69, intArray70);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray9, intArray70);
        double[][] doubleArray73 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray9);
        double[][] doubleArray74 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray9);
        double[][] doubleArray75 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray74);
        double[][] doubleArray76 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray75);
        double[][] doubleArray77 = null;
        double[] doubleArray79 = new double[] { 1 };
        double[] doubleArray81 = new double[] { 1 };
        double[] doubleArray83 = new double[] { 1 };
        double[] doubleArray85 = new double[] { 1 };
        double[] doubleArray87 = new double[] { 1 };
        double[][] doubleArray88 = new double[][] { doubleArray79, doubleArray81, doubleArray83, doubleArray85, doubleArray87 };
        int[] intArray89 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray88, intArray89);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray77, intArray89);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray76, intArray89);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray7, intArray89);
        java.lang.Class<?> wildcardClass94 = doubleArray7.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[]");
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray66), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[]");
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray79), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray81), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray83), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray85), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray87), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray88);
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray89), "[]");
        org.junit.Assert.assertNotNull(wildcardClass94);
    }

    @Test
    public void test0901() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0901");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[] doubleArray31 = new double[] { 1 };
        double[] doubleArray33 = new double[] { 1 };
        double[] doubleArray35 = new double[] { 1 };
        double[] doubleArray37 = new double[] { 1 };
        double[] doubleArray39 = new double[] { 1 };
        double[][] doubleArray40 = new double[][] { doubleArray31, doubleArray33, doubleArray35, doubleArray37, doubleArray39 };
        int[] intArray41 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray40, intArray41);
        double[][] doubleArray43 = new double[][] {};
        double[][] doubleArray44 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray43);
        int[] intArray45 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray44, intArray45);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray40, intArray45);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray28, intArray45);
        double[][] doubleArray49 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray50 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray49);
        double[][] doubleArray51 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray50);
        double[][] doubleArray52 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray50);
        double[][] doubleArray53 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray50);
        java.lang.Class<?> wildcardClass54 = doubleArray50.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertNotNull(wildcardClass54);
    }

    @Test
    public void test0902() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0902");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray30 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray29);
        double[][] doubleArray31 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        double[][] doubleArray32 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        double[][] doubleArray33 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        double[][] doubleArray34 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        double[][] doubleArray35 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray34);
        double[][] doubleArray36 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray34);
        double[][] doubleArray37 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray36);
        double[][] doubleArray38 = null;
        double[][] doubleArray39 = new double[][] {};
        double[][] doubleArray40 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray39);
        double[][] doubleArray41 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray40);
        double[][] doubleArray42 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray41);
        double[][] doubleArray43 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray41);
        double[][] doubleArray44 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray41);
        double[][] doubleArray45 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray41);
        double[] doubleArray52 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray59 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray66 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray73 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray74 = new double[][] { doubleArray52, doubleArray59, doubleArray66, doubleArray73 };
        double[][] doubleArray75 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray74);
        double[][] doubleArray76 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray74);
        double[][] doubleArray77 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray74);
        double[][] doubleArray78 = new double[][] {};
        double[][] doubleArray79 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray78);
        int[] intArray80 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray79, intArray80);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray77, intArray80);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray45, intArray80);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray38, intArray80);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray37, intArray80);
        java.lang.Class<?> wildcardClass86 = doubleArray37.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray66), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray73), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[]");
        org.junit.Assert.assertNotNull(wildcardClass86);
    }

    @Test
    public void test0903() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0903");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray30 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray31 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray32 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray31);
        double[][] doubleArray33 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray32);
        double[][] doubleArray34 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray32);
        java.lang.Class<?> wildcardClass35 = doubleArray34.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertNotNull(wildcardClass35);
    }

    @Test
    public void test0904() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0904");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[] doubleArray3 = new double[] { 1 };
        double[] doubleArray5 = new double[] { 1 };
        double[] doubleArray7 = new double[] { 1 };
        double[] doubleArray9 = new double[] { 1 };
        double[] doubleArray11 = new double[] { 1 };
        double[][] doubleArray12 = new double[][] { doubleArray3, doubleArray5, doubleArray7, doubleArray9, doubleArray11 };
        int[] intArray13 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray12, intArray13);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray0, intArray13);
        double[] doubleArray19 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray23 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray27 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray31 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray32 = new double[][] { doubleArray19, doubleArray23, doubleArray27, doubleArray31 };
        double[] doubleArray34 = new double[] { 1 };
        double[] doubleArray36 = new double[] { 1 };
        double[] doubleArray38 = new double[] { 1 };
        double[] doubleArray40 = new double[] { 1 };
        double[] doubleArray42 = new double[] { 1 };
        double[][] doubleArray43 = new double[][] { doubleArray34, doubleArray36, doubleArray38, doubleArray40, doubleArray42 };
        int[] intArray44 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray43, intArray44);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray32, intArray44);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray0, intArray44);
        double[][] doubleArray48 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray49 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray48);
        double[][] doubleArray50 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray48);
        int[] intArray51 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray50, intArray51);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertNotNull(doubleArray50);
    }

    @Test
    public void test0905() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0905");
        double[][] doubleArray0 = null;
        double[][] doubleArray1 = null;
        double[][] doubleArray2 = null;
        double[][] doubleArray3 = new double[][] {};
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[][] doubleArray5 = new double[][] {};
        double[][] doubleArray6 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray5);
        double[][] doubleArray7 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray6);
        double[] doubleArray11 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray15 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray19 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray23 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray24 = new double[][] { doubleArray11, doubleArray15, doubleArray19, doubleArray23 };
        double[] doubleArray26 = new double[] { 1 };
        double[] doubleArray28 = new double[] { 1 };
        double[] doubleArray30 = new double[] { 1 };
        double[] doubleArray32 = new double[] { 1 };
        double[] doubleArray34 = new double[] { 1 };
        double[][] doubleArray35 = new double[][] { doubleArray26, doubleArray28, doubleArray30, doubleArray32, doubleArray34 };
        int[] intArray36 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray35, intArray36);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray24, intArray36);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray6, intArray36);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray4, intArray36);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray2, intArray36);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray1, intArray36);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray0, intArray36);
        java.lang.Class<?> wildcardClass44 = intArray36.getClass();
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[]");
        org.junit.Assert.assertNotNull(wildcardClass44);
    }

    @Test
    public void test0906() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0906");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[][] doubleArray5 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[] doubleArray7 = new double[] { 1 };
        double[] doubleArray9 = new double[] { 1 };
        double[] doubleArray11 = new double[] { 1 };
        double[] doubleArray13 = new double[] { 1 };
        double[] doubleArray15 = new double[] { 1 };
        double[][] doubleArray16 = new double[][] { doubleArray7, doubleArray9, doubleArray11, doubleArray13, doubleArray15 };
        int[] intArray17 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray16, intArray17);
        double[] doubleArray25 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray32 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray39 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray46 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray47 = new double[][] { doubleArray25, doubleArray32, doubleArray39, doubleArray46 };
        double[][] doubleArray48 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray47);
        double[] doubleArray50 = new double[] { 1 };
        double[] doubleArray52 = new double[] { 1 };
        double[] doubleArray54 = new double[] { 1 };
        double[] doubleArray56 = new double[] { 1 };
        double[] doubleArray58 = new double[] { 1 };
        double[][] doubleArray59 = new double[][] { doubleArray50, doubleArray52, doubleArray54, doubleArray56, doubleArray58 };
        int[] intArray60 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray59, intArray60);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray48, intArray60);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray16, intArray60);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray3, intArray60);
        java.lang.Class<?> wildcardClass65 = doubleArray3.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[]");
        org.junit.Assert.assertNotNull(wildcardClass65);
    }

    @Test
    public void test0907() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0907");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray30 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray29);
        double[][] doubleArray31 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        double[][] doubleArray32 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray31);
        double[][] doubleArray33 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray31);
        double[][] doubleArray34 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray33);
        double[][] doubleArray35 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray34);
        double[][] doubleArray36 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray34);
        double[][] doubleArray37 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray34);
        double[][] doubleArray38 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray37);
        java.lang.Class<?> wildcardClass39 = doubleArray38.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertNotNull(wildcardClass39);
    }

    @Test
    public void test0908() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0908");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[] doubleArray3 = new double[] { 1 };
        double[] doubleArray5 = new double[] { 1 };
        double[] doubleArray7 = new double[] { 1 };
        double[] doubleArray9 = new double[] { 1 };
        double[] doubleArray11 = new double[] { 1 };
        double[][] doubleArray12 = new double[][] { doubleArray3, doubleArray5, doubleArray7, doubleArray9, doubleArray11 };
        int[] intArray13 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray12, intArray13);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray0, intArray13);
        double[] doubleArray19 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray23 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray27 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray31 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray32 = new double[][] { doubleArray19, doubleArray23, doubleArray27, doubleArray31 };
        double[] doubleArray34 = new double[] { 1 };
        double[] doubleArray36 = new double[] { 1 };
        double[] doubleArray38 = new double[] { 1 };
        double[] doubleArray40 = new double[] { 1 };
        double[] doubleArray42 = new double[] { 1 };
        double[][] doubleArray43 = new double[][] { doubleArray34, doubleArray36, doubleArray38, doubleArray40, doubleArray42 };
        int[] intArray44 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray43, intArray44);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray32, intArray44);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray0, intArray44);
        double[][] doubleArray48 = new double[][] {};
        double[][] doubleArray49 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray48);
        double[] doubleArray51 = new double[] { 1 };
        double[] doubleArray53 = new double[] { 1 };
        double[] doubleArray55 = new double[] { 1 };
        double[] doubleArray57 = new double[] { 1 };
        double[] doubleArray59 = new double[] { 1 };
        double[][] doubleArray60 = new double[][] { doubleArray51, doubleArray53, doubleArray55, doubleArray57, doubleArray59 };
        int[] intArray61 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray60, intArray61);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray48, intArray61);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray0, intArray61);
        double[][] doubleArray65 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray66 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray67 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray68 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        java.lang.Class<?> wildcardClass69 = doubleArray68.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[]");
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertNotNull(wildcardClass69);
    }

    @Test
    public void test0909() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0909");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[] doubleArray3 = new double[] { 1 };
        double[] doubleArray5 = new double[] { 1 };
        double[] doubleArray7 = new double[] { 1 };
        double[] doubleArray9 = new double[] { 1 };
        double[] doubleArray11 = new double[] { 1 };
        double[][] doubleArray12 = new double[][] { doubleArray3, doubleArray5, doubleArray7, doubleArray9, doubleArray11 };
        int[] intArray13 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray12, intArray13);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray0, intArray13);
        double[][] doubleArray16 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray17 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray16);
        double[][] doubleArray18 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray17);
        double[][] doubleArray19 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray18);
        java.lang.Class<?> wildcardClass20 = doubleArray19.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertNotNull(wildcardClass20);
    }

    @Test
    public void test0910() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0910");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[] doubleArray31 = new double[] { 1 };
        double[] doubleArray33 = new double[] { 1 };
        double[] doubleArray35 = new double[] { 1 };
        double[] doubleArray37 = new double[] { 1 };
        double[] doubleArray39 = new double[] { 1 };
        double[][] doubleArray40 = new double[][] { doubleArray31, doubleArray33, doubleArray35, doubleArray37, doubleArray39 };
        int[] intArray41 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray40, intArray41);
        double[][] doubleArray43 = new double[][] {};
        double[][] doubleArray44 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray43);
        int[] intArray45 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray44, intArray45);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray40, intArray45);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray28, intArray45);
        double[][] doubleArray49 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray50 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray51 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray52 = new double[][] {};
        double[][] doubleArray53 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray52);
        double[][] doubleArray54 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray52);
        double[][] doubleArray55 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray52);
        double[] doubleArray62 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray69 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray76 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray83 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray84 = new double[][] { doubleArray62, doubleArray69, doubleArray76, doubleArray83 };
        double[][] doubleArray85 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray84);
        double[][] doubleArray86 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray84);
        double[][] doubleArray87 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray84);
        double[][] doubleArray88 = new double[][] {};
        double[][] doubleArray89 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray88);
        int[] intArray90 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray89, intArray90);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray87, intArray90);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray55, intArray90);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray28, intArray90);
        double[][] doubleArray95 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        java.lang.Class<?> wildcardClass96 = doubleArray28.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray83), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray84);
        org.junit.Assert.assertNotNull(doubleArray85);
        org.junit.Assert.assertNotNull(doubleArray86);
        org.junit.Assert.assertNotNull(doubleArray87);
        org.junit.Assert.assertNotNull(doubleArray88);
        org.junit.Assert.assertNotNull(doubleArray89);
        org.junit.Assert.assertNotNull(intArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray90), "[]");
        org.junit.Assert.assertNotNull(doubleArray95);
        org.junit.Assert.assertNotNull(wildcardClass96);
    }

    @Test
    public void test0911() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0911");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[] doubleArray10 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray17 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray24 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray31 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray32 = new double[][] { doubleArray10, doubleArray17, doubleArray24, doubleArray31 };
        double[][] doubleArray33 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray32);
        double[][] doubleArray34 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray32);
        double[][] doubleArray35 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray32);
        double[] doubleArray37 = new double[] { 1 };
        double[] doubleArray39 = new double[] { 1 };
        double[] doubleArray41 = new double[] { 1 };
        double[] doubleArray43 = new double[] { 1 };
        double[] doubleArray45 = new double[] { 1 };
        double[][] doubleArray46 = new double[][] { doubleArray37, doubleArray39, doubleArray41, doubleArray43, doubleArray45 };
        int[] intArray47 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray46, intArray47);
        double[] doubleArray55 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray62 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray69 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray76 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray77 = new double[][] { doubleArray55, doubleArray62, doubleArray69, doubleArray76 };
        double[][] doubleArray78 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray77);
        double[] doubleArray80 = new double[] { 1 };
        double[] doubleArray82 = new double[] { 1 };
        double[] doubleArray84 = new double[] { 1 };
        double[] doubleArray86 = new double[] { 1 };
        double[] doubleArray88 = new double[] { 1 };
        double[][] doubleArray89 = new double[][] { doubleArray80, doubleArray82, doubleArray84, doubleArray86, doubleArray88 };
        int[] intArray90 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray89, intArray90);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray78, intArray90);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray46, intArray90);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray35, intArray90);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray3, intArray90);
        double[][] doubleArray96 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[][] doubleArray97 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray96);
        double[][] doubleArray98 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray97);
        double[][] doubleArray99 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray97);
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[]");
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray80), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray82), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray84), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray86), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray88), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray89);
        org.junit.Assert.assertNotNull(intArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray90), "[]");
        org.junit.Assert.assertNotNull(doubleArray96);
        org.junit.Assert.assertNotNull(doubleArray97);
        org.junit.Assert.assertNotNull(doubleArray98);
        org.junit.Assert.assertNotNull(doubleArray99);
    }

    @Test
    public void test0912() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0912");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray30 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray29);
        double[][] doubleArray31 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        double[][] doubleArray32 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray31);
        double[][] doubleArray33 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray31);
        double[][] doubleArray34 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray33);
        double[][] doubleArray35 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray33);
        double[][] doubleArray36 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray33);
        double[][] doubleArray37 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray33);
        double[][] doubleArray38 = new double[][] {};
        double[][] doubleArray39 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray38);
        double[][] doubleArray40 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray39);
        double[][] doubleArray41 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray39);
        double[][] doubleArray42 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray39);
        double[][] doubleArray43 = new double[][] {};
        double[][] doubleArray44 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray43);
        double[][] doubleArray45 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray43);
        double[][] doubleArray46 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray43);
        double[][] doubleArray47 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray43);
        double[][] doubleArray48 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray47);
        double[][] doubleArray49 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray47);
        double[][] doubleArray50 = new double[][] {};
        double[][] doubleArray51 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray50);
        int[] intArray52 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray51, intArray52);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray49, intArray52);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray39, intArray52);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray37, intArray52);
        java.lang.Class<?> wildcardClass57 = intArray52.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[]");
        org.junit.Assert.assertNotNull(wildcardClass57);
    }

    @Test
    public void test0913() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0913");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray30 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray31 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray32 = new double[][] {};
        double[][] doubleArray33 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray32);
        int[] intArray34 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray33, intArray34);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray31, intArray34);
        double[][] doubleArray37 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray31);
        double[][] doubleArray38 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray37);
        double[][] doubleArray39 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray38);
        double[][] doubleArray40 = new double[][] {};
        double[][] doubleArray41 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray40);
        double[][] doubleArray42 = new double[][] {};
        double[][] doubleArray43 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray42);
        double[][] doubleArray44 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray43);
        double[] doubleArray48 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray52 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray56 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray60 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray61 = new double[][] { doubleArray48, doubleArray52, doubleArray56, doubleArray60 };
        double[] doubleArray63 = new double[] { 1 };
        double[] doubleArray65 = new double[] { 1 };
        double[] doubleArray67 = new double[] { 1 };
        double[] doubleArray69 = new double[] { 1 };
        double[] doubleArray71 = new double[] { 1 };
        double[][] doubleArray72 = new double[][] { doubleArray63, doubleArray65, doubleArray67, doubleArray69, doubleArray71 };
        int[] intArray73 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray72, intArray73);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray61, intArray73);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray43, intArray73);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray41, intArray73);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray39, intArray73);
        java.lang.Class<?> wildcardClass79 = doubleArray39.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray71), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[]");
        org.junit.Assert.assertNotNull(wildcardClass79);
    }

    @Test
    public void test0914() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0914");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[][] doubleArray5 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[][] doubleArray6 = new double[][] {};
        double[][] doubleArray7 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray6);
        double[][] doubleArray8 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray7);
        double[] doubleArray15 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray22 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray29 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray36 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray37 = new double[][] { doubleArray15, doubleArray22, doubleArray29, doubleArray36 };
        double[][] doubleArray38 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray37);
        double[] doubleArray40 = new double[] { 1 };
        double[] doubleArray42 = new double[] { 1 };
        double[] doubleArray44 = new double[] { 1 };
        double[] doubleArray46 = new double[] { 1 };
        double[] doubleArray48 = new double[] { 1 };
        double[][] doubleArray49 = new double[][] { doubleArray40, doubleArray42, doubleArray44, doubleArray46, doubleArray48 };
        int[] intArray50 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray49, intArray50);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray38, intArray50);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray7, intArray50);
        double[] doubleArray57 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray61 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray65 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray69 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray70 = new double[][] { doubleArray57, doubleArray61, doubleArray65, doubleArray69 };
        double[] doubleArray72 = new double[] { 1 };
        double[] doubleArray74 = new double[] { 1 };
        double[] doubleArray76 = new double[] { 1 };
        double[] doubleArray78 = new double[] { 1 };
        double[] doubleArray80 = new double[] { 1 };
        double[][] doubleArray81 = new double[][] { doubleArray72, doubleArray74, doubleArray76, doubleArray78, doubleArray80 };
        int[] intArray82 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray81, intArray82);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray70, intArray82);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray7, intArray82);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray3, intArray82);
        double[][] doubleArray87 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[][] doubleArray88 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[][] doubleArray89 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        int[] intArray94 = new int[] { (short) 1, (byte) -1, (byte) 10, (short) -1 };
        // The following exception was thrown during execution in test generation
        try {
            com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray89, intArray94);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[]");
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray74), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray78), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray80), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray81);
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[]");
        org.junit.Assert.assertNotNull(doubleArray87);
        org.junit.Assert.assertNotNull(doubleArray88);
        org.junit.Assert.assertNotNull(doubleArray89);
        org.junit.Assert.assertNotNull(intArray94);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray94), "[0, 1, 2, 3]");
    }

    @Test
    public void test0915() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0915");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray30 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray31 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray32 = new double[][] {};
        double[][] doubleArray33 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray32);
        double[][] doubleArray34 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray33);
        double[][] doubleArray35 = new double[][] {};
        double[][] doubleArray36 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray35);
        double[][] doubleArray37 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray35);
        double[][] doubleArray38 = new double[][] {};
        double[][] doubleArray39 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray38);
        double[][] doubleArray40 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray39);
        double[][] doubleArray41 = new double[][] {};
        double[][] doubleArray42 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray41);
        double[][] doubleArray43 = new double[][] {};
        double[][] doubleArray44 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray43);
        double[] doubleArray46 = new double[] { 1 };
        double[] doubleArray48 = new double[] { 1 };
        double[] doubleArray50 = new double[] { 1 };
        double[] doubleArray52 = new double[] { 1 };
        double[] doubleArray54 = new double[] { 1 };
        double[][] doubleArray55 = new double[][] { doubleArray46, doubleArray48, doubleArray50, doubleArray52, doubleArray54 };
        int[] intArray56 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray55, intArray56);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray43, intArray56);
        double[] doubleArray62 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray66 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray70 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray74 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray75 = new double[][] { doubleArray62, doubleArray66, doubleArray70, doubleArray74 };
        double[] doubleArray77 = new double[] { 1 };
        double[] doubleArray79 = new double[] { 1 };
        double[] doubleArray81 = new double[] { 1 };
        double[] doubleArray83 = new double[] { 1 };
        double[] doubleArray85 = new double[] { 1 };
        double[][] doubleArray86 = new double[][] { doubleArray77, doubleArray79, doubleArray81, doubleArray83, doubleArray85 };
        int[] intArray87 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray86, intArray87);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray75, intArray87);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray43, intArray87);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray42, intArray87);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray40, intArray87);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray35, intArray87);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray34, intArray87);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray31, intArray87);
        double[][] doubleArray96 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray31);
        double[][] doubleArray97 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray31);
        java.lang.Class<?> wildcardClass98 = doubleArray97.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[]");
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray66), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray70), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray74), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray77), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray79), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray81), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray83), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray85), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray86);
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray87), "[]");
        org.junit.Assert.assertNotNull(doubleArray96);
        org.junit.Assert.assertNotNull(doubleArray97);
        org.junit.Assert.assertNotNull(wildcardClass98);
    }

    @Test
    public void test0916() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0916");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray5 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray6 = new double[][] {};
        double[][] doubleArray7 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray6);
        double[][] doubleArray8 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray6);
        double[][] doubleArray9 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray8);
        double[][] doubleArray10 = null;
        double[][] doubleArray11 = new double[][] {};
        double[][] doubleArray12 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray11);
        double[][] doubleArray13 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray12);
        double[] doubleArray17 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray21 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray25 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray29 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray30 = new double[][] { doubleArray17, doubleArray21, doubleArray25, doubleArray29 };
        double[] doubleArray32 = new double[] { 1 };
        double[] doubleArray34 = new double[] { 1 };
        double[] doubleArray36 = new double[] { 1 };
        double[] doubleArray38 = new double[] { 1 };
        double[] doubleArray40 = new double[] { 1 };
        double[][] doubleArray41 = new double[][] { doubleArray32, doubleArray34, doubleArray36, doubleArray38, doubleArray40 };
        int[] intArray42 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray41, intArray42);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray30, intArray42);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray13, intArray42);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray10, intArray42);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray9, intArray42);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray5, intArray42);
        double[][] doubleArray49 = new double[][] {};
        double[][] doubleArray50 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray49);
        double[][] doubleArray51 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray49);
        double[][] doubleArray52 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray49);
        double[][] doubleArray53 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray52);
        double[] doubleArray55 = new double[] { 1 };
        double[] doubleArray57 = new double[] { 1 };
        double[] doubleArray59 = new double[] { 1 };
        double[] doubleArray61 = new double[] { 1 };
        double[] doubleArray63 = new double[] { 1 };
        double[][] doubleArray64 = new double[][] { doubleArray55, doubleArray57, doubleArray59, doubleArray61, doubleArray63 };
        int[] intArray65 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray64, intArray65);
        double[][] doubleArray67 = new double[][] {};
        double[][] doubleArray68 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray67);
        int[] intArray69 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray68, intArray69);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray64, intArray69);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray52, intArray69);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray5, intArray69);
        java.lang.Class<?> wildcardClass74 = intArray69.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[]");
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[]");
        org.junit.Assert.assertNotNull(wildcardClass74);
    }

    @Test
    public void test0917() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0917");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[] doubleArray9 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray16 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray23 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray30 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray31 = new double[][] { doubleArray9, doubleArray16, doubleArray23, doubleArray30 };
        double[][] doubleArray32 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray31);
        double[] doubleArray34 = new double[] { 1 };
        double[] doubleArray36 = new double[] { 1 };
        double[] doubleArray38 = new double[] { 1 };
        double[] doubleArray40 = new double[] { 1 };
        double[] doubleArray42 = new double[] { 1 };
        double[][] doubleArray43 = new double[][] { doubleArray34, doubleArray36, doubleArray38, doubleArray40, doubleArray42 };
        int[] intArray44 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray43, intArray44);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray32, intArray44);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray1, intArray44);
        double[][] doubleArray48 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray49 = new double[][] {};
        double[][] doubleArray50 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray49);
        double[][] doubleArray51 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray49);
        double[][] doubleArray52 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray49);
        double[][] doubleArray53 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray49);
        double[][] doubleArray54 = new double[][] {};
        double[][] doubleArray55 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray54);
        double[][] doubleArray56 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray55);
        double[] doubleArray60 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray64 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray68 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray72 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray73 = new double[][] { doubleArray60, doubleArray64, doubleArray68, doubleArray72 };
        double[] doubleArray75 = new double[] { 1 };
        double[] doubleArray77 = new double[] { 1 };
        double[] doubleArray79 = new double[] { 1 };
        double[] doubleArray81 = new double[] { 1 };
        double[] doubleArray83 = new double[] { 1 };
        double[][] doubleArray84 = new double[][] { doubleArray75, doubleArray77, doubleArray79, doubleArray81, doubleArray83 };
        int[] intArray85 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray84, intArray85);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray73, intArray85);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray56, intArray85);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray49, intArray85);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray48, intArray85);
        double[][] doubleArray91 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray48);
        double[][] doubleArray92 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray91);
        double[][] doubleArray93 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray91);
        java.lang.Class<?> wildcardClass94 = doubleArray91.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray75), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray77), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray79), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray81), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray83), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray84);
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray85), "[]");
        org.junit.Assert.assertNotNull(doubleArray91);
        org.junit.Assert.assertNotNull(doubleArray92);
        org.junit.Assert.assertNotNull(doubleArray93);
        org.junit.Assert.assertNotNull(wildcardClass94);
    }

    @Test
    public void test0918() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0918");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray30 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray29);
        double[][] doubleArray31 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        double[][] doubleArray32 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        double[][] doubleArray33 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        double[][] doubleArray34 = new double[][] {};
        double[][] doubleArray35 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray34);
        double[][] doubleArray36 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray35);
        double[] doubleArray43 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray50 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray57 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray64 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray65 = new double[][] { doubleArray43, doubleArray50, doubleArray57, doubleArray64 };
        double[][] doubleArray66 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray65);
        double[] doubleArray68 = new double[] { 1 };
        double[] doubleArray70 = new double[] { 1 };
        double[] doubleArray72 = new double[] { 1 };
        double[] doubleArray74 = new double[] { 1 };
        double[] doubleArray76 = new double[] { 1 };
        double[][] doubleArray77 = new double[][] { doubleArray68, doubleArray70, doubleArray72, doubleArray74, doubleArray76 };
        int[] intArray78 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray77, intArray78);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray66, intArray78);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray35, intArray78);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray33, intArray78);
        double[][] doubleArray83 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray33);
        java.lang.Class<?> wildcardClass84 = doubleArray33.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray70), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray74), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[]");
        org.junit.Assert.assertNotNull(doubleArray83);
        org.junit.Assert.assertNotNull(wildcardClass84);
    }

    @Test
    public void test0919() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0919");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[][] doubleArray5 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[][] doubleArray6 = new double[][] {};
        double[][] doubleArray7 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray6);
        double[][] doubleArray8 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray7);
        double[] doubleArray15 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray22 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray29 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray36 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray37 = new double[][] { doubleArray15, doubleArray22, doubleArray29, doubleArray36 };
        double[][] doubleArray38 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray37);
        double[] doubleArray40 = new double[] { 1 };
        double[] doubleArray42 = new double[] { 1 };
        double[] doubleArray44 = new double[] { 1 };
        double[] doubleArray46 = new double[] { 1 };
        double[] doubleArray48 = new double[] { 1 };
        double[][] doubleArray49 = new double[][] { doubleArray40, doubleArray42, doubleArray44, doubleArray46, doubleArray48 };
        int[] intArray50 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray49, intArray50);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray38, intArray50);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray7, intArray50);
        double[] doubleArray57 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray61 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray65 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray69 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray70 = new double[][] { doubleArray57, doubleArray61, doubleArray65, doubleArray69 };
        double[] doubleArray72 = new double[] { 1 };
        double[] doubleArray74 = new double[] { 1 };
        double[] doubleArray76 = new double[] { 1 };
        double[] doubleArray78 = new double[] { 1 };
        double[] doubleArray80 = new double[] { 1 };
        double[][] doubleArray81 = new double[][] { doubleArray72, doubleArray74, doubleArray76, doubleArray78, doubleArray80 };
        int[] intArray82 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray81, intArray82);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray70, intArray82);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray7, intArray82);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray3, intArray82);
        double[][] doubleArray87 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[][] doubleArray88 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[][] doubleArray89 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray88);
        double[][] doubleArray90 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray89);
        java.lang.Class<?> wildcardClass91 = doubleArray90.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[]");
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray74), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray78), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray80), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray81);
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[]");
        org.junit.Assert.assertNotNull(doubleArray87);
        org.junit.Assert.assertNotNull(doubleArray88);
        org.junit.Assert.assertNotNull(doubleArray89);
        org.junit.Assert.assertNotNull(doubleArray90);
        org.junit.Assert.assertNotNull(wildcardClass91);
    }

    @Test
    public void test0920() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0920");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = new double[][] {};
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray5 = new double[][] {};
        double[][] doubleArray6 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray5);
        double[][] doubleArray7 = new double[][] {};
        double[][] doubleArray8 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray7);
        double[] doubleArray10 = new double[] { 1 };
        double[] doubleArray12 = new double[] { 1 };
        double[] doubleArray14 = new double[] { 1 };
        double[] doubleArray16 = new double[] { 1 };
        double[] doubleArray18 = new double[] { 1 };
        double[][] doubleArray19 = new double[][] { doubleArray10, doubleArray12, doubleArray14, doubleArray16, doubleArray18 };
        int[] intArray20 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray19, intArray20);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray7, intArray20);
        double[] doubleArray26 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray30 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray34 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray38 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray39 = new double[][] { doubleArray26, doubleArray30, doubleArray34, doubleArray38 };
        double[] doubleArray41 = new double[] { 1 };
        double[] doubleArray43 = new double[] { 1 };
        double[] doubleArray45 = new double[] { 1 };
        double[] doubleArray47 = new double[] { 1 };
        double[] doubleArray49 = new double[] { 1 };
        double[][] doubleArray50 = new double[][] { doubleArray41, doubleArray43, doubleArray45, doubleArray47, doubleArray49 };
        int[] intArray51 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray50, intArray51);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray39, intArray51);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray7, intArray51);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray5, intArray51);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray2, intArray51);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray0, intArray51);
        java.lang.Class<?> wildcardClass58 = doubleArray0.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[]");
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[]");
        org.junit.Assert.assertNotNull(wildcardClass58);
    }

    @Test
    public void test0921() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0921");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray30 = new double[][] {};
        double[][] doubleArray31 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        double[][] doubleArray32 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray31);
        double[][] doubleArray33 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray32);
        double[][] doubleArray34 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray32);
        double[][] doubleArray35 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray32);
        double[][] doubleArray36 = new double[][] {};
        double[][] doubleArray37 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray36);
        double[][] doubleArray38 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray36);
        double[] doubleArray45 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray52 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray59 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray66 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray67 = new double[][] { doubleArray45, doubleArray52, doubleArray59, doubleArray66 };
        double[][] doubleArray68 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray67);
        double[][] doubleArray69 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray67);
        double[][] doubleArray70 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray67);
        double[][] doubleArray71 = new double[][] {};
        double[][] doubleArray72 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray71);
        int[] intArray73 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray72, intArray73);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray70, intArray73);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray38, intArray73);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray32, intArray73);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray29, intArray73);
        double[][] doubleArray79 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray29);
        double[][] doubleArray80 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray79);
        double[][] doubleArray81 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray79);
        java.lang.Class<?> wildcardClass82 = doubleArray81.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray66), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[]");
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertNotNull(doubleArray81);
        org.junit.Assert.assertNotNull(wildcardClass82);
    }

    @Test
    public void test0922() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0922");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[] doubleArray11 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray18 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray25 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray32 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray33 = new double[][] { doubleArray11, doubleArray18, doubleArray25, doubleArray32 };
        double[][] doubleArray34 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray33);
        double[][] doubleArray35 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray34);
        double[][] doubleArray36 = new double[][] {};
        double[][] doubleArray37 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray36);
        double[] doubleArray39 = new double[] { 1 };
        double[] doubleArray41 = new double[] { 1 };
        double[] doubleArray43 = new double[] { 1 };
        double[] doubleArray45 = new double[] { 1 };
        double[] doubleArray47 = new double[] { 1 };
        double[][] doubleArray48 = new double[][] { doubleArray39, doubleArray41, doubleArray43, doubleArray45, doubleArray47 };
        int[] intArray49 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray48, intArray49);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray36, intArray49);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray35, intArray49);
        double[][] doubleArray53 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray35);
        double[] doubleArray55 = new double[] { 1 };
        double[] doubleArray57 = new double[] { 1 };
        double[] doubleArray59 = new double[] { 1 };
        double[] doubleArray61 = new double[] { 1 };
        double[] doubleArray63 = new double[] { 1 };
        double[][] doubleArray64 = new double[][] { doubleArray55, doubleArray57, doubleArray59, doubleArray61, doubleArray63 };
        int[] intArray65 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray64, intArray65);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray53, intArray65);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray3, intArray65);
        double[][] doubleArray69 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[][] doubleArray70 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray69);
        double[][] doubleArray71 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray70);
        java.lang.Class<?> wildcardClass72 = doubleArray71.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[]");
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[]");
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertNotNull(wildcardClass72);
    }

    @Test
    public void test0923() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0923");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[][] doubleArray5 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[][] doubleArray6 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray5);
        java.lang.Class<?> wildcardClass7 = doubleArray6.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(wildcardClass7);
    }

    @Test
    public void test0924() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0924");
        double[][] doubleArray0 = null;
        double[][] doubleArray1 = new double[][] {};
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray3 = new double[][] {};
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[][] doubleArray5 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray4);
        double[] doubleArray9 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray13 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray17 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray21 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray22 = new double[][] { doubleArray9, doubleArray13, doubleArray17, doubleArray21 };
        double[] doubleArray24 = new double[] { 1 };
        double[] doubleArray26 = new double[] { 1 };
        double[] doubleArray28 = new double[] { 1 };
        double[] doubleArray30 = new double[] { 1 };
        double[] doubleArray32 = new double[] { 1 };
        double[][] doubleArray33 = new double[][] { doubleArray24, doubleArray26, doubleArray28, doubleArray30, doubleArray32 };
        int[] intArray34 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray33, intArray34);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray22, intArray34);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray4, intArray34);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray2, intArray34);
        double[][] doubleArray39 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray40 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray39);
        double[] doubleArray42 = new double[] { 1 };
        double[] doubleArray44 = new double[] { 1 };
        double[] doubleArray46 = new double[] { 1 };
        double[] doubleArray48 = new double[] { 1 };
        double[] doubleArray50 = new double[] { 1 };
        double[][] doubleArray51 = new double[][] { doubleArray42, doubleArray44, doubleArray46, doubleArray48, doubleArray50 };
        int[] intArray52 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray51, intArray52);
        double[][] doubleArray54 = new double[][] {};
        double[][] doubleArray55 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray54);
        int[] intArray56 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray55, intArray56);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray51, intArray56);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray39, intArray56);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray0, intArray56);
        java.lang.Class<?> wildcardClass61 = intArray56.getClass();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[]");
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[]");
        org.junit.Assert.assertNotNull(wildcardClass61);
    }

    @Test
    public void test0925() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0925");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray4 = new double[][] {};
        double[][] doubleArray5 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray4);
        double[] doubleArray7 = new double[] { 1 };
        double[] doubleArray9 = new double[] { 1 };
        double[] doubleArray11 = new double[] { 1 };
        double[] doubleArray13 = new double[] { 1 };
        double[] doubleArray15 = new double[] { 1 };
        double[][] doubleArray16 = new double[][] { doubleArray7, doubleArray9, doubleArray11, doubleArray13, doubleArray15 };
        int[] intArray17 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray16, intArray17);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray4, intArray17);
        double[] doubleArray23 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray27 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray31 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray35 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray36 = new double[][] { doubleArray23, doubleArray27, doubleArray31, doubleArray35 };
        double[] doubleArray38 = new double[] { 1 };
        double[] doubleArray40 = new double[] { 1 };
        double[] doubleArray42 = new double[] { 1 };
        double[] doubleArray44 = new double[] { 1 };
        double[] doubleArray46 = new double[] { 1 };
        double[][] doubleArray47 = new double[][] { doubleArray38, doubleArray40, doubleArray42, doubleArray44, doubleArray46 };
        int[] intArray48 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray47, intArray48);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray36, intArray48);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray4, intArray48);
        double[] doubleArray53 = new double[] { 1 };
        double[] doubleArray55 = new double[] { 1 };
        double[] doubleArray57 = new double[] { 1 };
        double[] doubleArray59 = new double[] { 1 };
        double[] doubleArray61 = new double[] { 1 };
        double[][] doubleArray62 = new double[][] { doubleArray53, doubleArray55, doubleArray57, doubleArray59, doubleArray61 };
        int[] intArray63 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray62, intArray63);
        double[][] doubleArray65 = new double[][] {};
        double[][] doubleArray66 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray65);
        int[] intArray67 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray66, intArray67);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray62, intArray67);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray4, intArray67);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray2, intArray67);
        java.lang.Class<?> wildcardClass72 = doubleArray2.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[]");
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[]");
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[]");
        org.junit.Assert.assertNotNull(wildcardClass72);
    }

    @Test
    public void test0926() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0926");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray30 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray29);
        double[][] doubleArray31 = new double[][] {};
        double[][] doubleArray32 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray31);
        double[] doubleArray34 = new double[] { 1 };
        double[] doubleArray36 = new double[] { 1 };
        double[] doubleArray38 = new double[] { 1 };
        double[] doubleArray40 = new double[] { 1 };
        double[] doubleArray42 = new double[] { 1 };
        double[][] doubleArray43 = new double[][] { doubleArray34, doubleArray36, doubleArray38, doubleArray40, doubleArray42 };
        int[] intArray44 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray43, intArray44);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray31, intArray44);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray30, intArray44);
        double[][] doubleArray48 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        double[][] doubleArray49 = new double[][] {};
        double[][] doubleArray50 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray49);
        int[] intArray51 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray50, intArray51);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray48, intArray51);
        double[][] doubleArray54 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray48);
        double[][] doubleArray55 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray54);
        double[][] doubleArray56 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray55);
        double[][] doubleArray57 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray56);
        double[][] doubleArray58 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray57);
        java.lang.Class<?> wildcardClass59 = doubleArray57.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[]");
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertNotNull(wildcardClass59);
    }

    @Test
    public void test0927() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0927");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = new double[][] {};
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[] doubleArray8 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray12 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray16 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray20 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray21 = new double[][] { doubleArray8, doubleArray12, doubleArray16, doubleArray20 };
        double[] doubleArray23 = new double[] { 1 };
        double[] doubleArray25 = new double[] { 1 };
        double[] doubleArray27 = new double[] { 1 };
        double[] doubleArray29 = new double[] { 1 };
        double[] doubleArray31 = new double[] { 1 };
        double[][] doubleArray32 = new double[][] { doubleArray23, doubleArray25, doubleArray27, doubleArray29, doubleArray31 };
        int[] intArray33 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray32, intArray33);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray21, intArray33);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray3, intArray33);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray1, intArray33);
        double[][] doubleArray38 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray39 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray38);
        double[][] doubleArray40 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray38);
        double[][] doubleArray41 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray38);
        double[][] doubleArray42 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray38);
        double[][] doubleArray43 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray42);
        java.lang.Class<?> wildcardClass44 = doubleArray42.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(wildcardClass44);
    }

    @Test
    public void test0928() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0928");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[] doubleArray10 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray17 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray24 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray31 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray32 = new double[][] { doubleArray10, doubleArray17, doubleArray24, doubleArray31 };
        double[][] doubleArray33 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray32);
        double[][] doubleArray34 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray32);
        double[][] doubleArray35 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray32);
        double[] doubleArray37 = new double[] { 1 };
        double[] doubleArray39 = new double[] { 1 };
        double[] doubleArray41 = new double[] { 1 };
        double[] doubleArray43 = new double[] { 1 };
        double[] doubleArray45 = new double[] { 1 };
        double[][] doubleArray46 = new double[][] { doubleArray37, doubleArray39, doubleArray41, doubleArray43, doubleArray45 };
        int[] intArray47 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray46, intArray47);
        double[] doubleArray55 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray62 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray69 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray76 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray77 = new double[][] { doubleArray55, doubleArray62, doubleArray69, doubleArray76 };
        double[][] doubleArray78 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray77);
        double[] doubleArray80 = new double[] { 1 };
        double[] doubleArray82 = new double[] { 1 };
        double[] doubleArray84 = new double[] { 1 };
        double[] doubleArray86 = new double[] { 1 };
        double[] doubleArray88 = new double[] { 1 };
        double[][] doubleArray89 = new double[][] { doubleArray80, doubleArray82, doubleArray84, doubleArray86, doubleArray88 };
        int[] intArray90 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray89, intArray90);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray78, intArray90);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray46, intArray90);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray35, intArray90);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray3, intArray90);
        double[][] doubleArray96 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[][] doubleArray97 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray96);
        double[][] doubleArray98 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray97);
        double[][] doubleArray99 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray98);
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[]");
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray80), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray82), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray84), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray86), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray88), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray89);
        org.junit.Assert.assertNotNull(intArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray90), "[]");
        org.junit.Assert.assertNotNull(doubleArray96);
        org.junit.Assert.assertNotNull(doubleArray97);
        org.junit.Assert.assertNotNull(doubleArray98);
        org.junit.Assert.assertNotNull(doubleArray99);
    }

    @Test
    public void test0929() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0929");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[] doubleArray31 = new double[] { 1 };
        double[] doubleArray33 = new double[] { 1 };
        double[] doubleArray35 = new double[] { 1 };
        double[] doubleArray37 = new double[] { 1 };
        double[] doubleArray39 = new double[] { 1 };
        double[][] doubleArray40 = new double[][] { doubleArray31, doubleArray33, doubleArray35, doubleArray37, doubleArray39 };
        int[] intArray41 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray40, intArray41);
        double[][] doubleArray43 = new double[][] {};
        double[][] doubleArray44 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray43);
        int[] intArray45 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray44, intArray45);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray40, intArray45);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray28, intArray45);
        double[][] doubleArray49 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray50 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray51 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray52 = null;
        double[] doubleArray59 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray66 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray73 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray80 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray81 = new double[][] { doubleArray59, doubleArray66, doubleArray73, doubleArray80 };
        double[][] doubleArray82 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray81);
        double[] doubleArray84 = new double[] { 1 };
        double[] doubleArray86 = new double[] { 1 };
        double[] doubleArray88 = new double[] { 1 };
        double[] doubleArray90 = new double[] { 1 };
        double[] doubleArray92 = new double[] { 1 };
        double[][] doubleArray93 = new double[][] { doubleArray84, doubleArray86, doubleArray88, doubleArray90, doubleArray92 };
        int[] intArray94 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray93, intArray94);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray82, intArray94);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray52, intArray94);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray28, intArray94);
        java.lang.Class<?> wildcardClass99 = intArray94.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray66), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray73), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray80), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray81);
        org.junit.Assert.assertNotNull(doubleArray82);
        org.junit.Assert.assertNotNull(doubleArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray84), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray86), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray88), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray90), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray92), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray93);
        org.junit.Assert.assertNotNull(intArray94);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray94), "[]");
        org.junit.Assert.assertNotNull(wildcardClass99);
    }

    @Test
    public void test0930() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0930");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray30 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray29);
        double[][] doubleArray31 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        double[][] doubleArray32 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray31);
        double[][] doubleArray33 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray31);
        double[][] doubleArray34 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray33);
        double[][] doubleArray35 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray33);
        double[][] doubleArray36 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray33);
        double[][] doubleArray37 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray33);
        double[][] doubleArray38 = new double[][] {};
        double[][] doubleArray39 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray38);
        double[][] doubleArray40 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray39);
        double[][] doubleArray41 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray39);
        double[][] doubleArray42 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray39);
        double[][] doubleArray43 = new double[][] {};
        double[][] doubleArray44 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray43);
        double[][] doubleArray45 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray43);
        double[][] doubleArray46 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray43);
        double[][] doubleArray47 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray43);
        double[][] doubleArray48 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray47);
        double[][] doubleArray49 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray47);
        double[][] doubleArray50 = new double[][] {};
        double[][] doubleArray51 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray50);
        int[] intArray52 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray51, intArray52);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray49, intArray52);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray39, intArray52);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray37, intArray52);
        double[][] doubleArray57 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray37);
        java.lang.Class<?> wildcardClass58 = doubleArray37.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[]");
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertNotNull(wildcardClass58);
    }

    @Test
    public void test0931() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0931");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        int[] intArray2 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray1, intArray2);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray5 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray4);
        double[][] doubleArray6 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray4);
        double[][] doubleArray7 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray6);
        double[][] doubleArray8 = new double[][] {};
        double[][] doubleArray9 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray8);
        double[][] doubleArray10 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray8);
        double[][] doubleArray11 = new double[][] {};
        double[][] doubleArray12 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray11);
        double[][] doubleArray13 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray12);
        double[][] doubleArray14 = new double[][] {};
        double[][] doubleArray15 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray14);
        double[][] doubleArray16 = new double[][] {};
        double[][] doubleArray17 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray16);
        double[] doubleArray19 = new double[] { 1 };
        double[] doubleArray21 = new double[] { 1 };
        double[] doubleArray23 = new double[] { 1 };
        double[] doubleArray25 = new double[] { 1 };
        double[] doubleArray27 = new double[] { 1 };
        double[][] doubleArray28 = new double[][] { doubleArray19, doubleArray21, doubleArray23, doubleArray25, doubleArray27 };
        int[] intArray29 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray28, intArray29);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray16, intArray29);
        double[] doubleArray35 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray39 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray43 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray47 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray48 = new double[][] { doubleArray35, doubleArray39, doubleArray43, doubleArray47 };
        double[] doubleArray50 = new double[] { 1 };
        double[] doubleArray52 = new double[] { 1 };
        double[] doubleArray54 = new double[] { 1 };
        double[] doubleArray56 = new double[] { 1 };
        double[] doubleArray58 = new double[] { 1 };
        double[][] doubleArray59 = new double[][] { doubleArray50, doubleArray52, doubleArray54, doubleArray56, doubleArray58 };
        int[] intArray60 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray59, intArray60);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray48, intArray60);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray16, intArray60);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray15, intArray60);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray13, intArray60);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray8, intArray60);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray7, intArray60);
        java.lang.Class<?> wildcardClass68 = doubleArray7.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[]");
        org.junit.Assert.assertNotNull(wildcardClass68);
    }

    @Test
    public void test0932() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0932");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray30 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray31 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray32 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[] doubleArray39 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray46 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray53 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray60 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray61 = new double[][] { doubleArray39, doubleArray46, doubleArray53, doubleArray60 };
        double[][] doubleArray62 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray61);
        double[][] doubleArray63 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray61);
        double[][] doubleArray64 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray61);
        double[][] doubleArray65 = new double[][] {};
        double[][] doubleArray66 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray65);
        int[] intArray67 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray66, intArray67);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray64, intArray67);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray28, intArray67);
        double[][] doubleArray71 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        java.lang.Class<?> wildcardClass72 = doubleArray28.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[]");
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertNotNull(wildcardClass72);
    }

    @Test
    public void test0933() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0933");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[] doubleArray6 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray10 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray14 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray18 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray19 = new double[][] { doubleArray6, doubleArray10, doubleArray14, doubleArray18 };
        double[] doubleArray21 = new double[] { 1 };
        double[] doubleArray23 = new double[] { 1 };
        double[] doubleArray25 = new double[] { 1 };
        double[] doubleArray27 = new double[] { 1 };
        double[] doubleArray29 = new double[] { 1 };
        double[][] doubleArray30 = new double[][] { doubleArray21, doubleArray23, doubleArray25, doubleArray27, doubleArray29 };
        int[] intArray31 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray30, intArray31);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray19, intArray31);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray2, intArray31);
        double[][] doubleArray35 = null;
        double[] doubleArray37 = new double[] { 1 };
        double[] doubleArray39 = new double[] { 1 };
        double[] doubleArray41 = new double[] { 1 };
        double[] doubleArray43 = new double[] { 1 };
        double[] doubleArray45 = new double[] { 1 };
        double[][] doubleArray46 = new double[][] { doubleArray37, doubleArray39, doubleArray41, doubleArray43, doubleArray45 };
        int[] intArray47 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray46, intArray47);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray35, intArray47);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray2, intArray47);
        double[][] doubleArray51 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        java.lang.Class<?> wildcardClass52 = doubleArray51.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertNotNull(wildcardClass52);
    }

    @Test
    public void test0934() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0934");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[] doubleArray31 = new double[] { 1 };
        double[] doubleArray33 = new double[] { 1 };
        double[] doubleArray35 = new double[] { 1 };
        double[] doubleArray37 = new double[] { 1 };
        double[] doubleArray39 = new double[] { 1 };
        double[][] doubleArray40 = new double[][] { doubleArray31, doubleArray33, doubleArray35, doubleArray37, doubleArray39 };
        int[] intArray41 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray40, intArray41);
        double[][] doubleArray43 = new double[][] {};
        double[][] doubleArray44 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray43);
        int[] intArray45 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray44, intArray45);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray40, intArray45);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray28, intArray45);
        double[][] doubleArray49 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray50 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray49);
        double[][] doubleArray51 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray49);
        double[][] doubleArray52 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray51);
        double[][] doubleArray53 = new double[][] {};
        double[][] doubleArray54 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray53);
        double[][] doubleArray55 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray53);
        double[][] doubleArray56 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray53);
        double[][] doubleArray57 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray53);
        double[][] doubleArray58 = new double[][] {};
        double[][] doubleArray59 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray58);
        double[][] doubleArray60 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray59);
        double[] doubleArray64 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray68 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray72 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray76 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray77 = new double[][] { doubleArray64, doubleArray68, doubleArray72, doubleArray76 };
        double[] doubleArray79 = new double[] { 1 };
        double[] doubleArray81 = new double[] { 1 };
        double[] doubleArray83 = new double[] { 1 };
        double[] doubleArray85 = new double[] { 1 };
        double[] doubleArray87 = new double[] { 1 };
        double[][] doubleArray88 = new double[][] { doubleArray79, doubleArray81, doubleArray83, doubleArray85, doubleArray87 };
        int[] intArray89 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray88, intArray89);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray77, intArray89);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray60, intArray89);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray53, intArray89);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray51, intArray89);
        java.lang.Class<?> wildcardClass95 = doubleArray51.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray79), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray81), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray83), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray85), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray87), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray88);
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray89), "[]");
        org.junit.Assert.assertNotNull(wildcardClass95);
    }

    @Test
    public void test0935() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0935");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[] doubleArray3 = new double[] { 1 };
        double[] doubleArray5 = new double[] { 1 };
        double[] doubleArray7 = new double[] { 1 };
        double[] doubleArray9 = new double[] { 1 };
        double[] doubleArray11 = new double[] { 1 };
        double[][] doubleArray12 = new double[][] { doubleArray3, doubleArray5, doubleArray7, doubleArray9, doubleArray11 };
        int[] intArray13 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray12, intArray13);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray0, intArray13);
        double[][] doubleArray16 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray17 = new double[][] {};
        double[][] doubleArray18 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray17);
        double[][] doubleArray19 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray17);
        double[] doubleArray21 = new double[] { 1 };
        double[] doubleArray23 = new double[] { 1 };
        double[] doubleArray25 = new double[] { 1 };
        double[] doubleArray27 = new double[] { 1 };
        double[] doubleArray29 = new double[] { 1 };
        double[][] doubleArray30 = new double[][] { doubleArray21, doubleArray23, doubleArray25, doubleArray27, doubleArray29 };
        int[] intArray31 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray30, intArray31);
        double[] doubleArray39 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray46 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray53 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray60 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray61 = new double[][] { doubleArray39, doubleArray46, doubleArray53, doubleArray60 };
        double[][] doubleArray62 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray61);
        double[] doubleArray64 = new double[] { 1 };
        double[] doubleArray66 = new double[] { 1 };
        double[] doubleArray68 = new double[] { 1 };
        double[] doubleArray70 = new double[] { 1 };
        double[] doubleArray72 = new double[] { 1 };
        double[][] doubleArray73 = new double[][] { doubleArray64, doubleArray66, doubleArray68, doubleArray70, doubleArray72 };
        int[] intArray74 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray73, intArray74);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray62, intArray74);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray30, intArray74);
        double[] doubleArray79 = new double[] { 1 };
        double[] doubleArray81 = new double[] { 1 };
        double[] doubleArray83 = new double[] { 1 };
        double[] doubleArray85 = new double[] { 1 };
        double[] doubleArray87 = new double[] { 1 };
        double[][] doubleArray88 = new double[][] { doubleArray79, doubleArray81, doubleArray83, doubleArray85, doubleArray87 };
        int[] intArray89 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray88, intArray89);
        double[][] doubleArray91 = new double[][] {};
        double[][] doubleArray92 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray91);
        int[] intArray93 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray92, intArray93);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray88, intArray93);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray30, intArray93);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray19, intArray93);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray16, intArray93);
        java.lang.Class<?> wildcardClass99 = doubleArray16.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray66), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray70), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[]");
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray79), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray81), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray83), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray85), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray87), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray88);
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray89), "[]");
        org.junit.Assert.assertNotNull(doubleArray91);
        org.junit.Assert.assertNotNull(doubleArray92);
        org.junit.Assert.assertNotNull(intArray93);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray93), "[]");
        org.junit.Assert.assertNotNull(wildcardClass99);
    }

    @Test
    public void test0936() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0936");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[][] doubleArray5 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[][] doubleArray6 = new double[][] {};
        double[][] doubleArray7 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray6);
        double[][] doubleArray8 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray7);
        double[] doubleArray15 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray22 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray29 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray36 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray37 = new double[][] { doubleArray15, doubleArray22, doubleArray29, doubleArray36 };
        double[][] doubleArray38 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray37);
        double[] doubleArray40 = new double[] { 1 };
        double[] doubleArray42 = new double[] { 1 };
        double[] doubleArray44 = new double[] { 1 };
        double[] doubleArray46 = new double[] { 1 };
        double[] doubleArray48 = new double[] { 1 };
        double[][] doubleArray49 = new double[][] { doubleArray40, doubleArray42, doubleArray44, doubleArray46, doubleArray48 };
        int[] intArray50 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray49, intArray50);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray38, intArray50);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray7, intArray50);
        double[] doubleArray57 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray61 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray65 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray69 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray70 = new double[][] { doubleArray57, doubleArray61, doubleArray65, doubleArray69 };
        double[] doubleArray72 = new double[] { 1 };
        double[] doubleArray74 = new double[] { 1 };
        double[] doubleArray76 = new double[] { 1 };
        double[] doubleArray78 = new double[] { 1 };
        double[] doubleArray80 = new double[] { 1 };
        double[][] doubleArray81 = new double[][] { doubleArray72, doubleArray74, doubleArray76, doubleArray78, doubleArray80 };
        int[] intArray82 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray81, intArray82);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray70, intArray82);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray7, intArray82);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray3, intArray82);
        double[][] doubleArray87 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[][] doubleArray88 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[][] doubleArray89 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[][] doubleArray90 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray89);
        double[][] doubleArray91 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray90);
        java.lang.Class<?> wildcardClass92 = doubleArray91.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[]");
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray74), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray78), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray80), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray81);
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[]");
        org.junit.Assert.assertNotNull(doubleArray87);
        org.junit.Assert.assertNotNull(doubleArray88);
        org.junit.Assert.assertNotNull(doubleArray89);
        org.junit.Assert.assertNotNull(doubleArray90);
        org.junit.Assert.assertNotNull(doubleArray91);
        org.junit.Assert.assertNotNull(wildcardClass92);
    }

    @Test
    public void test0937() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0937");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray5 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray6 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray7 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray6);
        double[][] doubleArray8 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray7);
        double[] doubleArray10 = new double[] { 1 };
        double[] doubleArray12 = new double[] { 1 };
        double[] doubleArray14 = new double[] { 1 };
        double[] doubleArray16 = new double[] { 1 };
        double[] doubleArray18 = new double[] { 1 };
        double[][] doubleArray19 = new double[][] { doubleArray10, doubleArray12, doubleArray14, doubleArray16, doubleArray18 };
        int[] intArray20 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray19, intArray20);
        double[] doubleArray28 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray35 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray42 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray49 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray50 = new double[][] { doubleArray28, doubleArray35, doubleArray42, doubleArray49 };
        double[][] doubleArray51 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray50);
        double[] doubleArray53 = new double[] { 1 };
        double[] doubleArray55 = new double[] { 1 };
        double[] doubleArray57 = new double[] { 1 };
        double[] doubleArray59 = new double[] { 1 };
        double[] doubleArray61 = new double[] { 1 };
        double[][] doubleArray62 = new double[][] { doubleArray53, doubleArray55, doubleArray57, doubleArray59, doubleArray61 };
        int[] intArray63 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray62, intArray63);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray51, intArray63);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray19, intArray63);
        double[] doubleArray68 = new double[] { 1 };
        double[] doubleArray70 = new double[] { 1 };
        double[] doubleArray72 = new double[] { 1 };
        double[] doubleArray74 = new double[] { 1 };
        double[] doubleArray76 = new double[] { 1 };
        double[][] doubleArray77 = new double[][] { doubleArray68, doubleArray70, doubleArray72, doubleArray74, doubleArray76 };
        int[] intArray78 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray77, intArray78);
        double[][] doubleArray80 = new double[][] {};
        double[][] doubleArray81 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray80);
        int[] intArray82 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray81, intArray82);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray77, intArray82);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray19, intArray82);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray7, intArray82);
        java.lang.Class<?> wildcardClass87 = intArray82.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[]");
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray70), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray74), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[]");
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertNotNull(doubleArray81);
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[]");
        org.junit.Assert.assertNotNull(wildcardClass87);
    }

    @Test
    public void test0938() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0938");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray30 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray29);
        double[][] doubleArray31 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        double[][] doubleArray32 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray31);
        double[][] doubleArray33 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray32);
        double[][] doubleArray34 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray33);
        double[][] doubleArray35 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray33);
        double[][] doubleArray36 = new double[][] {};
        double[][] doubleArray37 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray36);
        int[] intArray38 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray37, intArray38);
        double[][] doubleArray40 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray37);
        double[][] doubleArray41 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray37);
        double[][] doubleArray42 = new double[][] {};
        double[][] doubleArray43 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray42);
        double[][] doubleArray44 = new double[][] {};
        double[][] doubleArray45 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray44);
        double[] doubleArray47 = new double[] { 1 };
        double[] doubleArray49 = new double[] { 1 };
        double[] doubleArray51 = new double[] { 1 };
        double[] doubleArray53 = new double[] { 1 };
        double[] doubleArray55 = new double[] { 1 };
        double[][] doubleArray56 = new double[][] { doubleArray47, doubleArray49, doubleArray51, doubleArray53, doubleArray55 };
        int[] intArray57 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray56, intArray57);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray44, intArray57);
        double[] doubleArray63 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray67 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray71 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray75 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray76 = new double[][] { doubleArray63, doubleArray67, doubleArray71, doubleArray75 };
        double[] doubleArray78 = new double[] { 1 };
        double[] doubleArray80 = new double[] { 1 };
        double[] doubleArray82 = new double[] { 1 };
        double[] doubleArray84 = new double[] { 1 };
        double[] doubleArray86 = new double[] { 1 };
        double[][] doubleArray87 = new double[][] { doubleArray78, doubleArray80, doubleArray82, doubleArray84, doubleArray86 };
        int[] intArray88 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray87, intArray88);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray76, intArray88);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray44, intArray88);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray43, intArray88);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray37, intArray88);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray33, intArray88);
        double[][] doubleArray95 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray33);
        double[][] doubleArray96 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray95);
        java.lang.Class<?> wildcardClass97 = doubleArray95.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[]");
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray71), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray75), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray78), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray80), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray82), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray84), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray86), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray87);
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray88), "[]");
        org.junit.Assert.assertNotNull(doubleArray95);
        org.junit.Assert.assertNotNull(doubleArray96);
        org.junit.Assert.assertNotNull(wildcardClass97);
    }

    @Test
    public void test0939() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0939");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[] doubleArray6 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray10 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray14 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray18 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray19 = new double[][] { doubleArray6, doubleArray10, doubleArray14, doubleArray18 };
        double[] doubleArray21 = new double[] { 1 };
        double[] doubleArray23 = new double[] { 1 };
        double[] doubleArray25 = new double[] { 1 };
        double[] doubleArray27 = new double[] { 1 };
        double[] doubleArray29 = new double[] { 1 };
        double[][] doubleArray30 = new double[][] { doubleArray21, doubleArray23, doubleArray25, doubleArray27, doubleArray29 };
        int[] intArray31 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray30, intArray31);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray19, intArray31);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray2, intArray31);
        double[][] doubleArray35 = null;
        double[][] doubleArray36 = new double[][] {};
        double[][] doubleArray37 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray36);
        double[][] doubleArray38 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray37);
        double[] doubleArray42 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray46 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray50 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray54 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray55 = new double[][] { doubleArray42, doubleArray46, doubleArray50, doubleArray54 };
        double[] doubleArray57 = new double[] { 1 };
        double[] doubleArray59 = new double[] { 1 };
        double[] doubleArray61 = new double[] { 1 };
        double[] doubleArray63 = new double[] { 1 };
        double[] doubleArray65 = new double[] { 1 };
        double[][] doubleArray66 = new double[][] { doubleArray57, doubleArray59, doubleArray61, doubleArray63, doubleArray65 };
        int[] intArray67 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray66, intArray67);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray55, intArray67);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray38, intArray67);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray35, intArray67);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray2, intArray67);
        double[][] doubleArray73 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray74 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray75 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray74);
        double[][] doubleArray76 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray75);
        java.lang.Class<?> wildcardClass77 = doubleArray75.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[]");
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertNotNull(wildcardClass77);
    }

    @Test
    public void test0940() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0940");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[] doubleArray10 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray17 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray24 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray31 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray32 = new double[][] { doubleArray10, doubleArray17, doubleArray24, doubleArray31 };
        double[][] doubleArray33 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray32);
        double[][] doubleArray34 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray32);
        double[][] doubleArray35 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray32);
        double[] doubleArray37 = new double[] { 1 };
        double[] doubleArray39 = new double[] { 1 };
        double[] doubleArray41 = new double[] { 1 };
        double[] doubleArray43 = new double[] { 1 };
        double[] doubleArray45 = new double[] { 1 };
        double[][] doubleArray46 = new double[][] { doubleArray37, doubleArray39, doubleArray41, doubleArray43, doubleArray45 };
        int[] intArray47 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray46, intArray47);
        double[] doubleArray55 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray62 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray69 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray76 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray77 = new double[][] { doubleArray55, doubleArray62, doubleArray69, doubleArray76 };
        double[][] doubleArray78 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray77);
        double[] doubleArray80 = new double[] { 1 };
        double[] doubleArray82 = new double[] { 1 };
        double[] doubleArray84 = new double[] { 1 };
        double[] doubleArray86 = new double[] { 1 };
        double[] doubleArray88 = new double[] { 1 };
        double[][] doubleArray89 = new double[][] { doubleArray80, doubleArray82, doubleArray84, doubleArray86, doubleArray88 };
        int[] intArray90 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray89, intArray90);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray78, intArray90);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray46, intArray90);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray35, intArray90);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray3, intArray90);
        double[][] doubleArray96 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        java.lang.Class<?> wildcardClass97 = doubleArray3.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[]");
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray80), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray82), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray84), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray86), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray88), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray89);
        org.junit.Assert.assertNotNull(intArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray90), "[]");
        org.junit.Assert.assertNotNull(doubleArray96);
        org.junit.Assert.assertNotNull(wildcardClass97);
    }

    @Test
    public void test0941() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0941");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[] doubleArray8 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray12 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray16 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray20 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray21 = new double[][] { doubleArray8, doubleArray12, doubleArray16, doubleArray20 };
        double[] doubleArray23 = new double[] { 1 };
        double[] doubleArray25 = new double[] { 1 };
        double[] doubleArray27 = new double[] { 1 };
        double[] doubleArray29 = new double[] { 1 };
        double[] doubleArray31 = new double[] { 1 };
        double[][] doubleArray32 = new double[][] { doubleArray23, doubleArray25, doubleArray27, doubleArray29, doubleArray31 };
        int[] intArray33 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray32, intArray33);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray21, intArray33);
        double[][] doubleArray36 = new double[][] {};
        double[][] doubleArray37 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray36);
        double[][] doubleArray38 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray37);
        double[][] doubleArray39 = new double[][] {};
        double[][] doubleArray40 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray39);
        double[][] doubleArray41 = new double[][] {};
        double[][] doubleArray42 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray41);
        double[] doubleArray44 = new double[] { 1 };
        double[] doubleArray46 = new double[] { 1 };
        double[] doubleArray48 = new double[] { 1 };
        double[] doubleArray50 = new double[] { 1 };
        double[] doubleArray52 = new double[] { 1 };
        double[][] doubleArray53 = new double[][] { doubleArray44, doubleArray46, doubleArray48, doubleArray50, doubleArray52 };
        int[] intArray54 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray53, intArray54);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray41, intArray54);
        double[] doubleArray60 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray64 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray68 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray72 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray73 = new double[][] { doubleArray60, doubleArray64, doubleArray68, doubleArray72 };
        double[] doubleArray75 = new double[] { 1 };
        double[] doubleArray77 = new double[] { 1 };
        double[] doubleArray79 = new double[] { 1 };
        double[] doubleArray81 = new double[] { 1 };
        double[] doubleArray83 = new double[] { 1 };
        double[][] doubleArray84 = new double[][] { doubleArray75, doubleArray77, doubleArray79, doubleArray81, doubleArray83 };
        int[] intArray85 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray84, intArray85);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray73, intArray85);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray41, intArray85);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray40, intArray85);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray38, intArray85);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray21, intArray85);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray3, intArray85);
        double[][] doubleArray93 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[][] doubleArray94 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[][] doubleArray95 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        java.lang.Class<?> wildcardClass96 = doubleArray3.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[]");
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray75), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray77), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray79), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray81), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray83), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray84);
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray85), "[]");
        org.junit.Assert.assertNotNull(doubleArray93);
        org.junit.Assert.assertNotNull(doubleArray94);
        org.junit.Assert.assertNotNull(doubleArray95);
        org.junit.Assert.assertNotNull(wildcardClass96);
    }

    @Test
    public void test0942() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0942");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = new double[][] {};
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[] doubleArray8 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray12 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray16 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray20 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray21 = new double[][] { doubleArray8, doubleArray12, doubleArray16, doubleArray20 };
        double[] doubleArray23 = new double[] { 1 };
        double[] doubleArray25 = new double[] { 1 };
        double[] doubleArray27 = new double[] { 1 };
        double[] doubleArray29 = new double[] { 1 };
        double[] doubleArray31 = new double[] { 1 };
        double[][] doubleArray32 = new double[][] { doubleArray23, doubleArray25, doubleArray27, doubleArray29, doubleArray31 };
        int[] intArray33 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray32, intArray33);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray21, intArray33);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray3, intArray33);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray1, intArray33);
        double[][] doubleArray38 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray39 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray38);
        double[][] doubleArray40 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray38);
        double[][] doubleArray41 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray38);
        double[][] doubleArray42 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray38);
        double[][] doubleArray43 = new double[][] {};
        double[][] doubleArray44 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray43);
        int[] intArray45 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray44, intArray45);
        double[] doubleArray48 = new double[] { 1 };
        double[] doubleArray50 = new double[] { 1 };
        double[] doubleArray52 = new double[] { 1 };
        double[] doubleArray54 = new double[] { 1 };
        double[] doubleArray56 = new double[] { 1 };
        double[][] doubleArray57 = new double[][] { doubleArray48, doubleArray50, doubleArray52, doubleArray54, doubleArray56 };
        int[] intArray58 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray57, intArray58);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray44, intArray58);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray42, intArray58);
        java.lang.Class<?> wildcardClass62 = intArray58.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[]");
        org.junit.Assert.assertNotNull(wildcardClass62);
    }

    @Test
    public void test0943() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0943");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray30 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray29);
        double[][] doubleArray31 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray29);
        double[][] doubleArray32 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray31);
        java.lang.Class<?> wildcardClass33 = doubleArray32.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(wildcardClass33);
    }

    @Test
    public void test0944() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0944");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray30 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray31 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        double[][] doubleArray32 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        double[][] doubleArray33 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        double[][] doubleArray34 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray33);
        double[][] doubleArray35 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray34);
        java.lang.Class<?> wildcardClass36 = doubleArray35.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertNotNull(wildcardClass36);
    }

    @Test
    public void test0945() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0945");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray30 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray29);
        double[][] doubleArray31 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        double[][] doubleArray32 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        double[][] doubleArray33 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray32);
        java.lang.Class<?> wildcardClass34 = doubleArray33.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertNotNull(wildcardClass34);
    }

    @Test
    public void test0946() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0946");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray30 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray31 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray32 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray31);
        double[][] doubleArray33 = new double[][] {};
        double[][] doubleArray34 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray33);
        double[][] doubleArray35 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray33);
        double[][] doubleArray36 = new double[][] {};
        double[][] doubleArray37 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray36);
        double[][] doubleArray38 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray37);
        double[][] doubleArray39 = new double[][] {};
        double[][] doubleArray40 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray39);
        double[][] doubleArray41 = new double[][] {};
        double[][] doubleArray42 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray41);
        double[] doubleArray44 = new double[] { 1 };
        double[] doubleArray46 = new double[] { 1 };
        double[] doubleArray48 = new double[] { 1 };
        double[] doubleArray50 = new double[] { 1 };
        double[] doubleArray52 = new double[] { 1 };
        double[][] doubleArray53 = new double[][] { doubleArray44, doubleArray46, doubleArray48, doubleArray50, doubleArray52 };
        int[] intArray54 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray53, intArray54);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray41, intArray54);
        double[] doubleArray60 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray64 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray68 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray72 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray73 = new double[][] { doubleArray60, doubleArray64, doubleArray68, doubleArray72 };
        double[] doubleArray75 = new double[] { 1 };
        double[] doubleArray77 = new double[] { 1 };
        double[] doubleArray79 = new double[] { 1 };
        double[] doubleArray81 = new double[] { 1 };
        double[] doubleArray83 = new double[] { 1 };
        double[][] doubleArray84 = new double[][] { doubleArray75, doubleArray77, doubleArray79, doubleArray81, doubleArray83 };
        int[] intArray85 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray84, intArray85);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray73, intArray85);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray41, intArray85);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray40, intArray85);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray38, intArray85);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray33, intArray85);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray32, intArray85);
        java.lang.Class<?> wildcardClass93 = doubleArray32.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[]");
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray75), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray77), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray79), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray81), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray83), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray84);
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray85), "[]");
        org.junit.Assert.assertNotNull(wildcardClass93);
    }

    @Test
    public void test0947() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0947");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[] doubleArray8 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray12 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray16 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray20 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray21 = new double[][] { doubleArray8, doubleArray12, doubleArray16, doubleArray20 };
        double[] doubleArray23 = new double[] { 1 };
        double[] doubleArray25 = new double[] { 1 };
        double[] doubleArray27 = new double[] { 1 };
        double[] doubleArray29 = new double[] { 1 };
        double[] doubleArray31 = new double[] { 1 };
        double[][] doubleArray32 = new double[][] { doubleArray23, doubleArray25, doubleArray27, doubleArray29, doubleArray31 };
        int[] intArray33 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray32, intArray33);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray21, intArray33);
        double[][] doubleArray36 = new double[][] {};
        double[][] doubleArray37 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray36);
        double[][] doubleArray38 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray37);
        double[][] doubleArray39 = new double[][] {};
        double[][] doubleArray40 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray39);
        double[][] doubleArray41 = new double[][] {};
        double[][] doubleArray42 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray41);
        double[] doubleArray44 = new double[] { 1 };
        double[] doubleArray46 = new double[] { 1 };
        double[] doubleArray48 = new double[] { 1 };
        double[] doubleArray50 = new double[] { 1 };
        double[] doubleArray52 = new double[] { 1 };
        double[][] doubleArray53 = new double[][] { doubleArray44, doubleArray46, doubleArray48, doubleArray50, doubleArray52 };
        int[] intArray54 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray53, intArray54);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray41, intArray54);
        double[] doubleArray60 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray64 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray68 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray72 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray73 = new double[][] { doubleArray60, doubleArray64, doubleArray68, doubleArray72 };
        double[] doubleArray75 = new double[] { 1 };
        double[] doubleArray77 = new double[] { 1 };
        double[] doubleArray79 = new double[] { 1 };
        double[] doubleArray81 = new double[] { 1 };
        double[] doubleArray83 = new double[] { 1 };
        double[][] doubleArray84 = new double[][] { doubleArray75, doubleArray77, doubleArray79, doubleArray81, doubleArray83 };
        int[] intArray85 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray84, intArray85);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray73, intArray85);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray41, intArray85);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray40, intArray85);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray38, intArray85);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray21, intArray85);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray3, intArray85);
        double[][] doubleArray93 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[][] doubleArray94 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[][] doubleArray95 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray94);
        double[][] doubleArray96 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray95);
        double[][] doubleArray97 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray95);
        java.lang.Class<?> wildcardClass98 = doubleArray95.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[]");
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray75), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray77), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray79), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray81), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray83), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray84);
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray85), "[]");
        org.junit.Assert.assertNotNull(doubleArray93);
        org.junit.Assert.assertNotNull(doubleArray94);
        org.junit.Assert.assertNotNull(doubleArray95);
        org.junit.Assert.assertNotNull(doubleArray96);
        org.junit.Assert.assertNotNull(doubleArray97);
        org.junit.Assert.assertNotNull(wildcardClass98);
    }

    @Test
    public void test0948() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0948");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[][] doubleArray5 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[][] doubleArray6 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray5);
        double[][] doubleArray7 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray5);
        java.lang.Class<?> wildcardClass8 = doubleArray5.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertNotNull(wildcardClass8);
    }

    @Test
    public void test0949() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0949");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray30 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray29);
        double[][] doubleArray31 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        double[][] doubleArray32 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray31);
        double[][] doubleArray33 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray31);
        double[][] doubleArray34 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray31);
        double[][] doubleArray35 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray31);
        double[][] doubleArray36 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray35);
        double[][] doubleArray37 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray35);
        java.lang.Class<?> wildcardClass38 = doubleArray37.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertNotNull(wildcardClass38);
    }

    @Test
    public void test0950() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0950");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[][] doubleArray5 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[][] doubleArray6 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray5);
        double[][] doubleArray7 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray5);
        double[][] doubleArray8 = null;
        double[][] doubleArray9 = new double[][] {};
        double[][] doubleArray10 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray9);
        double[][] doubleArray11 = new double[][] {};
        double[][] doubleArray12 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray11);
        double[][] doubleArray13 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray12);
        double[] doubleArray17 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray21 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray25 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray29 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray30 = new double[][] { doubleArray17, doubleArray21, doubleArray25, doubleArray29 };
        double[] doubleArray32 = new double[] { 1 };
        double[] doubleArray34 = new double[] { 1 };
        double[] doubleArray36 = new double[] { 1 };
        double[] doubleArray38 = new double[] { 1 };
        double[] doubleArray40 = new double[] { 1 };
        double[][] doubleArray41 = new double[][] { doubleArray32, doubleArray34, doubleArray36, doubleArray38, doubleArray40 };
        int[] intArray42 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray41, intArray42);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray30, intArray42);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray12, intArray42);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray10, intArray42);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray8, intArray42);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray7, intArray42);
        java.lang.Class<?> wildcardClass49 = doubleArray7.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[]");
        org.junit.Assert.assertNotNull(wildcardClass49);
    }

    @Test
    public void test0951() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0951");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray30 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray31 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        double[][] doubleArray32 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        double[][] doubleArray33 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray32);
        double[][] doubleArray34 = new double[][] {};
        double[][] doubleArray35 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray34);
        double[][] doubleArray36 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray34);
        double[][] doubleArray37 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray34);
        double[][] doubleArray38 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray34);
        double[][] doubleArray39 = new double[][] {};
        double[][] doubleArray40 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray39);
        double[][] doubleArray41 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray40);
        double[] doubleArray45 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray49 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray53 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray57 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray58 = new double[][] { doubleArray45, doubleArray49, doubleArray53, doubleArray57 };
        double[] doubleArray60 = new double[] { 1 };
        double[] doubleArray62 = new double[] { 1 };
        double[] doubleArray64 = new double[] { 1 };
        double[] doubleArray66 = new double[] { 1 };
        double[] doubleArray68 = new double[] { 1 };
        double[][] doubleArray69 = new double[][] { doubleArray60, doubleArray62, doubleArray64, doubleArray66, doubleArray68 };
        int[] intArray70 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray69, intArray70);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray58, intArray70);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray41, intArray70);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray34, intArray70);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray33, intArray70);
        java.lang.Class<?> wildcardClass76 = doubleArray33.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray66), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[]");
        org.junit.Assert.assertNotNull(wildcardClass76);
    }

    @Test
    public void test0952() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0952");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        int[] intArray2 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray1, intArray2);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray5 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray4);
        double[][] doubleArray6 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray4);
        double[][] doubleArray7 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray4);
        double[][] doubleArray8 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray4);
        double[] doubleArray15 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray22 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray29 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray36 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray37 = new double[][] { doubleArray15, doubleArray22, doubleArray29, doubleArray36 };
        double[][] doubleArray38 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray37);
        double[][] doubleArray39 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray38);
        double[][] doubleArray40 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray39);
        double[][] doubleArray41 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray40);
        double[][] doubleArray42 = new double[][] {};
        double[][] doubleArray43 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray42);
        double[][] doubleArray44 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray43);
        double[][] doubleArray45 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray43);
        double[][] doubleArray46 = new double[][] {};
        double[][] doubleArray47 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray46);
        double[][] doubleArray48 = new double[][] {};
        double[][] doubleArray49 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray48);
        double[] doubleArray51 = new double[] { 1 };
        double[] doubleArray53 = new double[] { 1 };
        double[] doubleArray55 = new double[] { 1 };
        double[] doubleArray57 = new double[] { 1 };
        double[] doubleArray59 = new double[] { 1 };
        double[][] doubleArray60 = new double[][] { doubleArray51, doubleArray53, doubleArray55, doubleArray57, doubleArray59 };
        int[] intArray61 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray60, intArray61);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray48, intArray61);
        double[] doubleArray67 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray71 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray75 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray79 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray80 = new double[][] { doubleArray67, doubleArray71, doubleArray75, doubleArray79 };
        double[] doubleArray82 = new double[] { 1 };
        double[] doubleArray84 = new double[] { 1 };
        double[] doubleArray86 = new double[] { 1 };
        double[] doubleArray88 = new double[] { 1 };
        double[] doubleArray90 = new double[] { 1 };
        double[][] doubleArray91 = new double[][] { doubleArray82, doubleArray84, doubleArray86, doubleArray88, doubleArray90 };
        int[] intArray92 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray91, intArray92);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray80, intArray92);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray48, intArray92);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray46, intArray92);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray43, intArray92);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray41, intArray92);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray8, intArray92);
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[]");
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray71), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray75), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray79), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertNotNull(doubleArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray82), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray84), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray86), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray88), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray90), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray91);
        org.junit.Assert.assertNotNull(intArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray92), "[]");
    }

    @Test
    public void test0953() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0953");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray3 = new double[][] {};
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[][] doubleArray5 = new double[][] {};
        double[][] doubleArray6 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray5);
        double[] doubleArray8 = new double[] { 1 };
        double[] doubleArray10 = new double[] { 1 };
        double[] doubleArray12 = new double[] { 1 };
        double[] doubleArray14 = new double[] { 1 };
        double[] doubleArray16 = new double[] { 1 };
        double[][] doubleArray17 = new double[][] { doubleArray8, doubleArray10, doubleArray12, doubleArray14, doubleArray16 };
        int[] intArray18 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray17, intArray18);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray5, intArray18);
        double[] doubleArray24 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray28 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray32 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray36 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray37 = new double[][] { doubleArray24, doubleArray28, doubleArray32, doubleArray36 };
        double[] doubleArray39 = new double[] { 1 };
        double[] doubleArray41 = new double[] { 1 };
        double[] doubleArray43 = new double[] { 1 };
        double[] doubleArray45 = new double[] { 1 };
        double[] doubleArray47 = new double[] { 1 };
        double[][] doubleArray48 = new double[][] { doubleArray39, doubleArray41, doubleArray43, doubleArray45, doubleArray47 };
        int[] intArray49 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray48, intArray49);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray37, intArray49);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray5, intArray49);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray4, intArray49);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray2, intArray49);
        double[][] doubleArray55 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray56 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray57 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray58 = new double[][] {};
        double[][] doubleArray59 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray58);
        double[][] doubleArray60 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray58);
        double[][] doubleArray61 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray60);
        double[][] doubleArray62 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray61);
        double[][] doubleArray63 = new double[][] {};
        double[][] doubleArray64 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray63);
        double[][] doubleArray65 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray64);
        double[] doubleArray69 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray73 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray77 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray81 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray82 = new double[][] { doubleArray69, doubleArray73, doubleArray77, doubleArray81 };
        double[] doubleArray84 = new double[] { 1 };
        double[] doubleArray86 = new double[] { 1 };
        double[] doubleArray88 = new double[] { 1 };
        double[] doubleArray90 = new double[] { 1 };
        double[] doubleArray92 = new double[] { 1 };
        double[][] doubleArray93 = new double[][] { doubleArray84, doubleArray86, doubleArray88, doubleArray90, doubleArray92 };
        int[] intArray94 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray93, intArray94);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray82, intArray94);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray65, intArray94);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray61, intArray94);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray57, intArray94);
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[]");
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[]");
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray73), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray77), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray81), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray82);
        org.junit.Assert.assertNotNull(doubleArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray84), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray86), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray88), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray90), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray92), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray93);
        org.junit.Assert.assertNotNull(intArray94);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray94), "[]");
    }

    @Test
    public void test0954() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0954");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = new double[][] {};
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[] doubleArray8 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray12 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray16 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray20 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray21 = new double[][] { doubleArray8, doubleArray12, doubleArray16, doubleArray20 };
        double[] doubleArray23 = new double[] { 1 };
        double[] doubleArray25 = new double[] { 1 };
        double[] doubleArray27 = new double[] { 1 };
        double[] doubleArray29 = new double[] { 1 };
        double[] doubleArray31 = new double[] { 1 };
        double[][] doubleArray32 = new double[][] { doubleArray23, doubleArray25, doubleArray27, doubleArray29, doubleArray31 };
        int[] intArray33 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray32, intArray33);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray21, intArray33);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray3, intArray33);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray1, intArray33);
        double[][] doubleArray38 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray39 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray38);
        double[][] doubleArray40 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray39);
        double[][] doubleArray41 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray39);
        double[][] doubleArray42 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray41);
        double[][] doubleArray43 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray41);
        double[][] doubleArray44 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray41);
        java.lang.Class<?> wildcardClass45 = doubleArray41.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertNotNull(wildcardClass45);
    }

    @Test
    public void test0955() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0955");
        double[][] doubleArray0 = null;
        double[] doubleArray7 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray14 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray21 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray28 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray29 = new double[][] { doubleArray7, doubleArray14, doubleArray21, doubleArray28 };
        double[][] doubleArray30 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray29);
        double[][] doubleArray31 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        double[][] doubleArray32 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray31);
        double[][] doubleArray33 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray32);
        double[] doubleArray35 = new double[] { 1 };
        double[] doubleArray37 = new double[] { 1 };
        double[] doubleArray39 = new double[] { 1 };
        double[] doubleArray41 = new double[] { 1 };
        double[] doubleArray43 = new double[] { 1 };
        double[][] doubleArray44 = new double[][] { doubleArray35, doubleArray37, doubleArray39, doubleArray41, doubleArray43 };
        int[] intArray45 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray44, intArray45);
        double[] doubleArray53 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray60 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray67 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray74 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray75 = new double[][] { doubleArray53, doubleArray60, doubleArray67, doubleArray74 };
        double[][] doubleArray76 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray75);
        double[] doubleArray78 = new double[] { 1 };
        double[] doubleArray80 = new double[] { 1 };
        double[] doubleArray82 = new double[] { 1 };
        double[] doubleArray84 = new double[] { 1 };
        double[] doubleArray86 = new double[] { 1 };
        double[][] doubleArray87 = new double[][] { doubleArray78, doubleArray80, doubleArray82, doubleArray84, doubleArray86 };
        int[] intArray88 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray87, intArray88);
        double[][] doubleArray90 = new double[][] {};
        double[][] doubleArray91 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray90);
        int[] intArray92 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray91, intArray92);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray87, intArray92);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray75, intArray92);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray44, intArray92);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray32, intArray92);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray0, intArray92);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[]");
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray74), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray78), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray80), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray82), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray84), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray86), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray87);
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray88), "[]");
        org.junit.Assert.assertNotNull(doubleArray90);
        org.junit.Assert.assertNotNull(doubleArray91);
        org.junit.Assert.assertNotNull(intArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray92), "[]");
    }

    @Test
    public void test0956() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0956");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray4 = new double[][] {};
        double[][] doubleArray5 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray4);
        double[][] doubleArray6 = new double[][] {};
        double[][] doubleArray7 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray6);
        double[] doubleArray9 = new double[] { 1 };
        double[] doubleArray11 = new double[] { 1 };
        double[] doubleArray13 = new double[] { 1 };
        double[] doubleArray15 = new double[] { 1 };
        double[] doubleArray17 = new double[] { 1 };
        double[][] doubleArray18 = new double[][] { doubleArray9, doubleArray11, doubleArray13, doubleArray15, doubleArray17 };
        int[] intArray19 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray18, intArray19);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray6, intArray19);
        double[] doubleArray25 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray29 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray33 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray37 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray38 = new double[][] { doubleArray25, doubleArray29, doubleArray33, doubleArray37 };
        double[] doubleArray40 = new double[] { 1 };
        double[] doubleArray42 = new double[] { 1 };
        double[] doubleArray44 = new double[] { 1 };
        double[] doubleArray46 = new double[] { 1 };
        double[] doubleArray48 = new double[] { 1 };
        double[][] doubleArray49 = new double[][] { doubleArray40, doubleArray42, doubleArray44, doubleArray46, doubleArray48 };
        int[] intArray50 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray49, intArray50);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray38, intArray50);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray6, intArray50);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray4, intArray50);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray1, intArray50);
        java.lang.Class<?> wildcardClass56 = doubleArray1.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[]");
        org.junit.Assert.assertNotNull(wildcardClass56);
    }

    @Test
    public void test0957() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0957");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray30 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray29);
        double[][] doubleArray31 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        double[][] doubleArray32 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray31);
        double[][] doubleArray33 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray31);
        double[][] doubleArray34 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray33);
        double[][] doubleArray35 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray33);
        double[][] doubleArray36 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray33);
        double[][] doubleArray37 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray33);
        double[][] doubleArray38 = new double[][] {};
        double[][] doubleArray39 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray38);
        double[][] doubleArray40 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray39);
        double[][] doubleArray41 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray39);
        double[][] doubleArray42 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray39);
        double[][] doubleArray43 = new double[][] {};
        double[][] doubleArray44 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray43);
        double[][] doubleArray45 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray43);
        double[][] doubleArray46 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray43);
        double[][] doubleArray47 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray43);
        double[][] doubleArray48 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray47);
        double[][] doubleArray49 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray47);
        double[][] doubleArray50 = new double[][] {};
        double[][] doubleArray51 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray50);
        int[] intArray52 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray51, intArray52);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray49, intArray52);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray39, intArray52);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray37, intArray52);
        double[][] doubleArray57 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray37);
        java.lang.Class<?> wildcardClass58 = doubleArray57.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[]");
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertNotNull(wildcardClass58);
    }

    @Test
    public void test0958() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0958");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray5 = new double[][] {};
        double[][] doubleArray6 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray5);
        double[][] doubleArray7 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray5);
        double[][] doubleArray8 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray5);
        double[][] doubleArray9 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray5);
        double[][] doubleArray10 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray9);
        double[][] doubleArray11 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray9);
        double[][] doubleArray12 = new double[][] {};
        double[][] doubleArray13 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray12);
        int[] intArray14 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray13, intArray14);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray11, intArray14);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray1, intArray14);
        java.lang.Class<?> wildcardClass18 = intArray14.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[]");
        org.junit.Assert.assertNotNull(wildcardClass18);
    }

    @Test
    public void test0959() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0959");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray3 = new double[][] {};
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[][] doubleArray5 = new double[][] {};
        double[][] doubleArray6 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray5);
        double[] doubleArray8 = new double[] { 1 };
        double[] doubleArray10 = new double[] { 1 };
        double[] doubleArray12 = new double[] { 1 };
        double[] doubleArray14 = new double[] { 1 };
        double[] doubleArray16 = new double[] { 1 };
        double[][] doubleArray17 = new double[][] { doubleArray8, doubleArray10, doubleArray12, doubleArray14, doubleArray16 };
        int[] intArray18 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray17, intArray18);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray5, intArray18);
        double[] doubleArray24 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray28 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray32 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray36 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray37 = new double[][] { doubleArray24, doubleArray28, doubleArray32, doubleArray36 };
        double[] doubleArray39 = new double[] { 1 };
        double[] doubleArray41 = new double[] { 1 };
        double[] doubleArray43 = new double[] { 1 };
        double[] doubleArray45 = new double[] { 1 };
        double[] doubleArray47 = new double[] { 1 };
        double[][] doubleArray48 = new double[][] { doubleArray39, doubleArray41, doubleArray43, doubleArray45, doubleArray47 };
        int[] intArray49 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray48, intArray49);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray37, intArray49);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray5, intArray49);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray4, intArray49);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray2, intArray49);
        double[][] doubleArray55 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray56 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray55);
        double[][] doubleArray57 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray55);
        double[][] doubleArray58 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray57);
        double[][] doubleArray59 = new double[][] {};
        double[][] doubleArray60 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray59);
        double[][] doubleArray61 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray60);
        double[] doubleArray65 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray69 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray73 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray77 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray78 = new double[][] { doubleArray65, doubleArray69, doubleArray73, doubleArray77 };
        double[] doubleArray80 = new double[] { 1 };
        double[] doubleArray82 = new double[] { 1 };
        double[] doubleArray84 = new double[] { 1 };
        double[] doubleArray86 = new double[] { 1 };
        double[] doubleArray88 = new double[] { 1 };
        double[][] doubleArray89 = new double[][] { doubleArray80, doubleArray82, doubleArray84, doubleArray86, doubleArray88 };
        int[] intArray90 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray89, intArray90);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray78, intArray90);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray61, intArray90);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray57, intArray90);
        double[][] doubleArray95 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray57);
        java.lang.Class<?> wildcardClass96 = doubleArray57.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[]");
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[]");
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray73), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray77), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray80), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray82), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray84), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray86), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray88), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray89);
        org.junit.Assert.assertNotNull(intArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray90), "[]");
        org.junit.Assert.assertNotNull(doubleArray95);
        org.junit.Assert.assertNotNull(wildcardClass96);
    }

    @Test
    public void test0960() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0960");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray30 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray31 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray32 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray33 = new double[][] {};
        double[][] doubleArray34 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray33);
        double[][] doubleArray35 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray34);
        double[] doubleArray39 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray43 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray47 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray51 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray52 = new double[][] { doubleArray39, doubleArray43, doubleArray47, doubleArray51 };
        double[] doubleArray54 = new double[] { 1 };
        double[] doubleArray56 = new double[] { 1 };
        double[] doubleArray58 = new double[] { 1 };
        double[] doubleArray60 = new double[] { 1 };
        double[] doubleArray62 = new double[] { 1 };
        double[][] doubleArray63 = new double[][] { doubleArray54, doubleArray56, doubleArray58, doubleArray60, doubleArray62 };
        int[] intArray64 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray63, intArray64);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray52, intArray64);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray35, intArray64);
        double[][] doubleArray68 = null;
        double[] doubleArray70 = new double[] { 1 };
        double[] doubleArray72 = new double[] { 1 };
        double[] doubleArray74 = new double[] { 1 };
        double[] doubleArray76 = new double[] { 1 };
        double[] doubleArray78 = new double[] { 1 };
        double[][] doubleArray79 = new double[][] { doubleArray70, doubleArray72, doubleArray74, doubleArray76, doubleArray78 };
        int[] intArray80 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray79, intArray80);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray68, intArray80);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray35, intArray80);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray28, intArray80);
        double[][] doubleArray85 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray86 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray85);
        java.lang.Class<?> wildcardClass87 = doubleArray85.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[]");
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray70), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray74), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray78), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[]");
        org.junit.Assert.assertNotNull(doubleArray85);
        org.junit.Assert.assertNotNull(doubleArray86);
        org.junit.Assert.assertNotNull(wildcardClass87);
    }

    @Test
    public void test0961() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0961");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[] doubleArray31 = new double[] { 1 };
        double[] doubleArray33 = new double[] { 1 };
        double[] doubleArray35 = new double[] { 1 };
        double[] doubleArray37 = new double[] { 1 };
        double[] doubleArray39 = new double[] { 1 };
        double[][] doubleArray40 = new double[][] { doubleArray31, doubleArray33, doubleArray35, doubleArray37, doubleArray39 };
        int[] intArray41 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray40, intArray41);
        double[][] doubleArray43 = new double[][] {};
        double[][] doubleArray44 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray43);
        int[] intArray45 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray44, intArray45);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray40, intArray45);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray28, intArray45);
        double[][] doubleArray49 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray50 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray49);
        double[][] doubleArray51 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray50);
        double[][] doubleArray52 = null;
        double[][] doubleArray53 = new double[][] {};
        double[][] doubleArray54 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray53);
        double[][] doubleArray55 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray54);
        double[] doubleArray59 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray63 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray67 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray71 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray72 = new double[][] { doubleArray59, doubleArray63, doubleArray67, doubleArray71 };
        double[] doubleArray74 = new double[] { 1 };
        double[] doubleArray76 = new double[] { 1 };
        double[] doubleArray78 = new double[] { 1 };
        double[] doubleArray80 = new double[] { 1 };
        double[] doubleArray82 = new double[] { 1 };
        double[][] doubleArray83 = new double[][] { doubleArray74, doubleArray76, doubleArray78, doubleArray80, doubleArray82 };
        int[] intArray84 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray83, intArray84);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray72, intArray84);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray55, intArray84);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray52, intArray84);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray50, intArray84);
        double[][] doubleArray90 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray50);
        java.lang.Class<?> wildcardClass91 = doubleArray90.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray71), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray74), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray78), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray80), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray82), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray83);
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray84), "[]");
        org.junit.Assert.assertNotNull(doubleArray90);
        org.junit.Assert.assertNotNull(wildcardClass91);
    }

    @Test
    public void test0962() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0962");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray30 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray29);
        double[][] doubleArray31 = new double[][] {};
        double[][] doubleArray32 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray31);
        double[] doubleArray34 = new double[] { 1 };
        double[] doubleArray36 = new double[] { 1 };
        double[] doubleArray38 = new double[] { 1 };
        double[] doubleArray40 = new double[] { 1 };
        double[] doubleArray42 = new double[] { 1 };
        double[][] doubleArray43 = new double[][] { doubleArray34, doubleArray36, doubleArray38, doubleArray40, doubleArray42 };
        int[] intArray44 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray43, intArray44);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray31, intArray44);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray30, intArray44);
        double[][] doubleArray48 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        double[][] doubleArray49 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray48);
        java.lang.Class<?> wildcardClass50 = doubleArray49.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertNotNull(wildcardClass50);
    }

    @Test
    public void test0963() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0963");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[] doubleArray31 = new double[] { 1 };
        double[] doubleArray33 = new double[] { 1 };
        double[] doubleArray35 = new double[] { 1 };
        double[] doubleArray37 = new double[] { 1 };
        double[] doubleArray39 = new double[] { 1 };
        double[][] doubleArray40 = new double[][] { doubleArray31, doubleArray33, doubleArray35, doubleArray37, doubleArray39 };
        int[] intArray41 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray40, intArray41);
        double[][] doubleArray43 = new double[][] {};
        double[][] doubleArray44 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray43);
        int[] intArray45 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray44, intArray45);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray40, intArray45);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray28, intArray45);
        double[][] doubleArray49 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray50 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray51 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray52 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray53 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray54 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray53);
        double[][] doubleArray55 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray54);
        java.lang.Class<?> wildcardClass56 = doubleArray55.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertNotNull(wildcardClass56);
    }

    @Test
    public void test0964() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0964");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[][] doubleArray5 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[][] doubleArray6 = new double[][] {};
        double[][] doubleArray7 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray6);
        double[][] doubleArray8 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray7);
        double[] doubleArray15 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray22 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray29 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray36 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray37 = new double[][] { doubleArray15, doubleArray22, doubleArray29, doubleArray36 };
        double[][] doubleArray38 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray37);
        double[] doubleArray40 = new double[] { 1 };
        double[] doubleArray42 = new double[] { 1 };
        double[] doubleArray44 = new double[] { 1 };
        double[] doubleArray46 = new double[] { 1 };
        double[] doubleArray48 = new double[] { 1 };
        double[][] doubleArray49 = new double[][] { doubleArray40, doubleArray42, doubleArray44, doubleArray46, doubleArray48 };
        int[] intArray50 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray49, intArray50);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray38, intArray50);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray7, intArray50);
        double[] doubleArray57 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray61 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray65 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray69 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray70 = new double[][] { doubleArray57, doubleArray61, doubleArray65, doubleArray69 };
        double[] doubleArray72 = new double[] { 1 };
        double[] doubleArray74 = new double[] { 1 };
        double[] doubleArray76 = new double[] { 1 };
        double[] doubleArray78 = new double[] { 1 };
        double[] doubleArray80 = new double[] { 1 };
        double[][] doubleArray81 = new double[][] { doubleArray72, doubleArray74, doubleArray76, doubleArray78, doubleArray80 };
        int[] intArray82 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray81, intArray82);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray70, intArray82);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray7, intArray82);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray3, intArray82);
        double[][] doubleArray87 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[][] doubleArray88 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[][] doubleArray89 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray88);
        java.lang.Class<?> wildcardClass90 = doubleArray89.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[]");
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray74), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray78), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray80), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray81);
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[]");
        org.junit.Assert.assertNotNull(doubleArray87);
        org.junit.Assert.assertNotNull(doubleArray88);
        org.junit.Assert.assertNotNull(doubleArray89);
        org.junit.Assert.assertNotNull(wildcardClass90);
    }

    @Test
    public void test0965() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0965");
        double[][] doubleArray0 = null;
        double[] doubleArray7 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray14 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray21 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray28 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray29 = new double[][] { doubleArray7, doubleArray14, doubleArray21, doubleArray28 };
        double[][] doubleArray30 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray29);
        double[][] doubleArray31 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray29);
        double[][] doubleArray32 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray29);
        double[][] doubleArray33 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray32);
        double[][] doubleArray34 = new double[][] {};
        double[][] doubleArray35 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray34);
        int[] intArray36 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray35, intArray36);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray33, intArray36);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray0, intArray36);
        java.lang.Class<?> wildcardClass40 = intArray36.getClass();
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[]");
        org.junit.Assert.assertNotNull(wildcardClass40);
    }

    @Test
    public void test0966() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0966");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[] doubleArray11 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray18 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray25 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray32 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray33 = new double[][] { doubleArray11, doubleArray18, doubleArray25, doubleArray32 };
        double[][] doubleArray34 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray33);
        double[][] doubleArray35 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray33);
        double[][] doubleArray36 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray33);
        double[][] doubleArray37 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray36);
        double[][] doubleArray38 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray37);
        double[] doubleArray45 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray52 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray59 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray66 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray67 = new double[][] { doubleArray45, doubleArray52, doubleArray59, doubleArray66 };
        double[][] doubleArray68 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray67);
        double[][] doubleArray69 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray67);
        double[][] doubleArray70 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray67);
        double[][] doubleArray71 = new double[][] {};
        double[][] doubleArray72 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray71);
        int[] intArray73 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray72, intArray73);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray70, intArray73);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray38, intArray73);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray0, intArray73);
        java.lang.Class<?> wildcardClass78 = doubleArray0.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray66), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[]");
        org.junit.Assert.assertNotNull(wildcardClass78);
    }

    @Test
    public void test0967() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0967");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray30 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray29);
        double[][] doubleArray31 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        double[][] doubleArray32 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        double[][] doubleArray33 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        double[][] doubleArray34 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        double[][] doubleArray35 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray34);
        double[][] doubleArray36 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray35);
        double[][] doubleArray37 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray35);
        double[][] doubleArray38 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray35);
        double[][] doubleArray39 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray35);
        java.lang.Class<?> wildcardClass40 = doubleArray39.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertNotNull(wildcardClass40);
    }

    @Test
    public void test0968() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0968");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = new double[][] {};
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[] doubleArray8 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray12 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray16 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray20 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray21 = new double[][] { doubleArray8, doubleArray12, doubleArray16, doubleArray20 };
        double[] doubleArray23 = new double[] { 1 };
        double[] doubleArray25 = new double[] { 1 };
        double[] doubleArray27 = new double[] { 1 };
        double[] doubleArray29 = new double[] { 1 };
        double[] doubleArray31 = new double[] { 1 };
        double[][] doubleArray32 = new double[][] { doubleArray23, doubleArray25, doubleArray27, doubleArray29, doubleArray31 };
        int[] intArray33 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray32, intArray33);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray21, intArray33);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray3, intArray33);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray1, intArray33);
        double[][] doubleArray38 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray39 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray38);
        double[][] doubleArray40 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray39);
        double[][] doubleArray41 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray39);
        double[][] doubleArray42 = new double[][] {};
        double[][] doubleArray43 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray42);
        double[][] doubleArray44 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray43);
        double[] doubleArray48 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray52 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray56 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray60 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray61 = new double[][] { doubleArray48, doubleArray52, doubleArray56, doubleArray60 };
        double[] doubleArray63 = new double[] { 1 };
        double[] doubleArray65 = new double[] { 1 };
        double[] doubleArray67 = new double[] { 1 };
        double[] doubleArray69 = new double[] { 1 };
        double[] doubleArray71 = new double[] { 1 };
        double[][] doubleArray72 = new double[][] { doubleArray63, doubleArray65, doubleArray67, doubleArray69, doubleArray71 };
        int[] intArray73 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray72, intArray73);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray61, intArray73);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray44, intArray73);
        double[][] doubleArray77 = null;
        double[] doubleArray79 = new double[] { 1 };
        double[] doubleArray81 = new double[] { 1 };
        double[] doubleArray83 = new double[] { 1 };
        double[] doubleArray85 = new double[] { 1 };
        double[] doubleArray87 = new double[] { 1 };
        double[][] doubleArray88 = new double[][] { doubleArray79, doubleArray81, doubleArray83, doubleArray85, doubleArray87 };
        int[] intArray89 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray88, intArray89);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray77, intArray89);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray44, intArray89);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray41, intArray89);
        double[][] doubleArray94 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray41);
        java.lang.Class<?> wildcardClass95 = doubleArray94.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray71), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[]");
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray79), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray81), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray83), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray85), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray87), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray88);
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray89), "[]");
        org.junit.Assert.assertNotNull(doubleArray94);
        org.junit.Assert.assertNotNull(wildcardClass95);
    }

    @Test
    public void test0969() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0969");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = new double[][] {};
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[] doubleArray5 = new double[] { 1 };
        double[] doubleArray7 = new double[] { 1 };
        double[] doubleArray9 = new double[] { 1 };
        double[] doubleArray11 = new double[] { 1 };
        double[] doubleArray13 = new double[] { 1 };
        double[][] doubleArray14 = new double[][] { doubleArray5, doubleArray7, doubleArray9, doubleArray11, doubleArray13 };
        int[] intArray15 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray14, intArray15);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray2, intArray15);
        double[] doubleArray21 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray25 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray29 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray33 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray34 = new double[][] { doubleArray21, doubleArray25, doubleArray29, doubleArray33 };
        double[] doubleArray36 = new double[] { 1 };
        double[] doubleArray38 = new double[] { 1 };
        double[] doubleArray40 = new double[] { 1 };
        double[] doubleArray42 = new double[] { 1 };
        double[] doubleArray44 = new double[] { 1 };
        double[][] doubleArray45 = new double[][] { doubleArray36, doubleArray38, doubleArray40, doubleArray42, doubleArray44 };
        int[] intArray46 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray45, intArray46);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray34, intArray46);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray2, intArray46);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray1, intArray46);
        double[] doubleArray52 = new double[] { 1 };
        double[] doubleArray54 = new double[] { 1 };
        double[] doubleArray56 = new double[] { 1 };
        double[] doubleArray58 = new double[] { 1 };
        double[] doubleArray60 = new double[] { 1 };
        double[][] doubleArray61 = new double[][] { doubleArray52, doubleArray54, doubleArray56, doubleArray58, doubleArray60 };
        int[] intArray62 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray61, intArray62);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray1, intArray62);
        double[][] doubleArray65 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray66 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray67 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray66);
        double[][] doubleArray68 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray66);
        java.lang.Class<?> wildcardClass69 = doubleArray66.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[]");
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[]");
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertNotNull(wildcardClass69);
    }

    @Test
    public void test0970() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0970");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray30 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray29);
        double[][] doubleArray31 = new double[][] {};
        double[][] doubleArray32 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray31);
        double[] doubleArray34 = new double[] { 1 };
        double[] doubleArray36 = new double[] { 1 };
        double[] doubleArray38 = new double[] { 1 };
        double[] doubleArray40 = new double[] { 1 };
        double[] doubleArray42 = new double[] { 1 };
        double[][] doubleArray43 = new double[][] { doubleArray34, doubleArray36, doubleArray38, doubleArray40, doubleArray42 };
        int[] intArray44 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray43, intArray44);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray31, intArray44);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray30, intArray44);
        double[][] doubleArray48 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        double[][] doubleArray49 = new double[][] {};
        double[][] doubleArray50 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray49);
        int[] intArray51 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray50, intArray51);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray48, intArray51);
        int[] intArray54 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray48, intArray54);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[]");
    }

    @Test
    public void test0971() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0971");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[] doubleArray31 = new double[] { 1 };
        double[] doubleArray33 = new double[] { 1 };
        double[] doubleArray35 = new double[] { 1 };
        double[] doubleArray37 = new double[] { 1 };
        double[] doubleArray39 = new double[] { 1 };
        double[][] doubleArray40 = new double[][] { doubleArray31, doubleArray33, doubleArray35, doubleArray37, doubleArray39 };
        int[] intArray41 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray40, intArray41);
        double[][] doubleArray43 = new double[][] {};
        double[][] doubleArray44 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray43);
        int[] intArray45 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray44, intArray45);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray40, intArray45);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray28, intArray45);
        double[][] doubleArray49 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray50 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray51 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray50);
        double[][] doubleArray52 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray51);
        java.lang.Class<?> wildcardClass53 = doubleArray51.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertNotNull(wildcardClass53);
    }

    @Test
    public void test0972() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0972");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        int[] intArray2 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray1, intArray2);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray5 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray6 = new double[][] {};
        double[][] doubleArray7 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray6);
        double[][] doubleArray8 = new double[][] {};
        double[][] doubleArray9 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray8);
        double[] doubleArray11 = new double[] { 1 };
        double[] doubleArray13 = new double[] { 1 };
        double[] doubleArray15 = new double[] { 1 };
        double[] doubleArray17 = new double[] { 1 };
        double[] doubleArray19 = new double[] { 1 };
        double[][] doubleArray20 = new double[][] { doubleArray11, doubleArray13, doubleArray15, doubleArray17, doubleArray19 };
        int[] intArray21 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray20, intArray21);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray8, intArray21);
        double[] doubleArray27 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray31 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray35 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray39 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray40 = new double[][] { doubleArray27, doubleArray31, doubleArray35, doubleArray39 };
        double[] doubleArray42 = new double[] { 1 };
        double[] doubleArray44 = new double[] { 1 };
        double[] doubleArray46 = new double[] { 1 };
        double[] doubleArray48 = new double[] { 1 };
        double[] doubleArray50 = new double[] { 1 };
        double[][] doubleArray51 = new double[][] { doubleArray42, doubleArray44, doubleArray46, doubleArray48, doubleArray50 };
        int[] intArray52 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray51, intArray52);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray40, intArray52);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray8, intArray52);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray7, intArray52);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray1, intArray52);
        double[][] doubleArray58 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray59 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray58);
        java.lang.Class<?> wildcardClass60 = doubleArray59.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[]");
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertNotNull(wildcardClass60);
    }

    @Test
    public void test0973() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0973");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray30 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray29);
        double[][] doubleArray31 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        double[][] doubleArray32 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray31);
        double[][] doubleArray33 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray31);
        double[][] doubleArray34 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray31);
        java.lang.Class<?> wildcardClass35 = doubleArray34.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertNotNull(wildcardClass35);
    }

    @Test
    public void test0974() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0974");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = new double[][] {};
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[] doubleArray5 = new double[] { 1 };
        double[] doubleArray7 = new double[] { 1 };
        double[] doubleArray9 = new double[] { 1 };
        double[] doubleArray11 = new double[] { 1 };
        double[] doubleArray13 = new double[] { 1 };
        double[][] doubleArray14 = new double[][] { doubleArray5, doubleArray7, doubleArray9, doubleArray11, doubleArray13 };
        int[] intArray15 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray14, intArray15);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray2, intArray15);
        double[] doubleArray21 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray25 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray29 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray33 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray34 = new double[][] { doubleArray21, doubleArray25, doubleArray29, doubleArray33 };
        double[] doubleArray36 = new double[] { 1 };
        double[] doubleArray38 = new double[] { 1 };
        double[] doubleArray40 = new double[] { 1 };
        double[] doubleArray42 = new double[] { 1 };
        double[] doubleArray44 = new double[] { 1 };
        double[][] doubleArray45 = new double[][] { doubleArray36, doubleArray38, doubleArray40, doubleArray42, doubleArray44 };
        int[] intArray46 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray45, intArray46);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray34, intArray46);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray2, intArray46);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray1, intArray46);
        double[] doubleArray52 = new double[] { 1 };
        double[] doubleArray54 = new double[] { 1 };
        double[] doubleArray56 = new double[] { 1 };
        double[] doubleArray58 = new double[] { 1 };
        double[] doubleArray60 = new double[] { 1 };
        double[][] doubleArray61 = new double[][] { doubleArray52, doubleArray54, doubleArray56, doubleArray58, doubleArray60 };
        int[] intArray62 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray61, intArray62);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray1, intArray62);
        double[][] doubleArray65 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray66 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray67 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray66);
        double[][] doubleArray68 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray66);
        double[][] doubleArray69 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray68);
        java.lang.Class<?> wildcardClass70 = doubleArray68.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[]");
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[]");
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertNotNull(wildcardClass70);
    }

    @Test
    public void test0975() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0975");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[][] doubleArray5 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray4);
        double[][] doubleArray6 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray5);
        double[][] doubleArray7 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray5);
        java.lang.Class<?> wildcardClass8 = doubleArray5.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertNotNull(wildcardClass8);
    }

    @Test
    public void test0976() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0976");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[] doubleArray3 = new double[] { 1 };
        double[] doubleArray5 = new double[] { 1 };
        double[] doubleArray7 = new double[] { 1 };
        double[] doubleArray9 = new double[] { 1 };
        double[] doubleArray11 = new double[] { 1 };
        double[][] doubleArray12 = new double[][] { doubleArray3, doubleArray5, doubleArray7, doubleArray9, doubleArray11 };
        int[] intArray13 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray12, intArray13);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray0, intArray13);
        double[][] doubleArray16 = new double[][] {};
        double[][] doubleArray17 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray16);
        double[][] doubleArray18 = new double[][] {};
        double[][] doubleArray19 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray18);
        double[] doubleArray21 = new double[] { 1 };
        double[] doubleArray23 = new double[] { 1 };
        double[] doubleArray25 = new double[] { 1 };
        double[] doubleArray27 = new double[] { 1 };
        double[] doubleArray29 = new double[] { 1 };
        double[][] doubleArray30 = new double[][] { doubleArray21, doubleArray23, doubleArray25, doubleArray27, doubleArray29 };
        int[] intArray31 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray30, intArray31);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray18, intArray31);
        double[] doubleArray37 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray41 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray45 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray49 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray50 = new double[][] { doubleArray37, doubleArray41, doubleArray45, doubleArray49 };
        double[] doubleArray52 = new double[] { 1 };
        double[] doubleArray54 = new double[] { 1 };
        double[] doubleArray56 = new double[] { 1 };
        double[] doubleArray58 = new double[] { 1 };
        double[] doubleArray60 = new double[] { 1 };
        double[][] doubleArray61 = new double[][] { doubleArray52, doubleArray54, doubleArray56, doubleArray58, doubleArray60 };
        int[] intArray62 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray61, intArray62);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray50, intArray62);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray18, intArray62);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray17, intArray62);
        double[] doubleArray68 = new double[] { 1 };
        double[] doubleArray70 = new double[] { 1 };
        double[] doubleArray72 = new double[] { 1 };
        double[] doubleArray74 = new double[] { 1 };
        double[] doubleArray76 = new double[] { 1 };
        double[][] doubleArray77 = new double[][] { doubleArray68, doubleArray70, doubleArray72, doubleArray74, doubleArray76 };
        int[] intArray78 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray77, intArray78);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray17, intArray78);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray0, intArray78);
        double[][] doubleArray82 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray83 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray82);
        double[][] doubleArray84 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray83);
        int[] intArray85 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray84, intArray85);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[]");
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray70), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray74), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[]");
        org.junit.Assert.assertNotNull(doubleArray82);
        org.junit.Assert.assertNotNull(doubleArray83);
        org.junit.Assert.assertNotNull(doubleArray84);
    }

    @Test
    public void test0977() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0977");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[][] doubleArray5 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[][] doubleArray6 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray5);
        double[][] doubleArray7 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray5);
        double[][] doubleArray8 = null;
        double[][] doubleArray9 = new double[][] {};
        double[][] doubleArray10 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray9);
        double[][] doubleArray11 = new double[][] {};
        double[][] doubleArray12 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray11);
        double[][] doubleArray13 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray12);
        double[] doubleArray17 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray21 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray25 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray29 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray30 = new double[][] { doubleArray17, doubleArray21, doubleArray25, doubleArray29 };
        double[] doubleArray32 = new double[] { 1 };
        double[] doubleArray34 = new double[] { 1 };
        double[] doubleArray36 = new double[] { 1 };
        double[] doubleArray38 = new double[] { 1 };
        double[] doubleArray40 = new double[] { 1 };
        double[][] doubleArray41 = new double[][] { doubleArray32, doubleArray34, doubleArray36, doubleArray38, doubleArray40 };
        int[] intArray42 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray41, intArray42);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray30, intArray42);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray12, intArray42);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray10, intArray42);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray8, intArray42);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray7, intArray42);
        java.lang.Class<?> wildcardClass49 = intArray42.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[]");
        org.junit.Assert.assertNotNull(wildcardClass49);
    }

    @Test
    public void test0978() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0978");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[] doubleArray11 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray18 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray25 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray32 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray33 = new double[][] { doubleArray11, doubleArray18, doubleArray25, doubleArray32 };
        double[][] doubleArray34 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray33);
        double[][] doubleArray35 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray33);
        double[][] doubleArray36 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray33);
        double[][] doubleArray37 = new double[][] {};
        double[][] doubleArray38 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray37);
        int[] intArray39 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray38, intArray39);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray36, intArray39);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray4, intArray39);
        double[][] doubleArray43 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray4);
        double[][] doubleArray44 = null;
        double[][] doubleArray45 = new double[][] {};
        double[][] doubleArray46 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray45);
        double[][] doubleArray47 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray45);
        double[][] doubleArray48 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray45);
        double[] doubleArray55 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray62 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray69 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray76 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray77 = new double[][] { doubleArray55, doubleArray62, doubleArray69, doubleArray76 };
        double[][] doubleArray78 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray77);
        double[][] doubleArray79 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray77);
        double[][] doubleArray80 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray77);
        double[][] doubleArray81 = new double[][] {};
        double[][] doubleArray82 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray81);
        int[] intArray83 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray82, intArray83);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray80, intArray83);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray48, intArray83);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray44, intArray83);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray4, intArray83);
        java.lang.Class<?> wildcardClass89 = doubleArray4.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertNotNull(doubleArray81);
        org.junit.Assert.assertNotNull(doubleArray82);
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray83), "[]");
        org.junit.Assert.assertNotNull(wildcardClass89);
    }

    @Test
    public void test0979() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0979");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray30 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray31 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray32 = new double[][] {};
        double[][] doubleArray33 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray32);
        int[] intArray34 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray33, intArray34);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray31, intArray34);
        double[][] doubleArray37 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray31);
        java.lang.Class<?> wildcardClass38 = doubleArray31.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertNotNull(wildcardClass38);
    }

    @Test
    public void test0980() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0980");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[] doubleArray3 = new double[] { 1 };
        double[] doubleArray5 = new double[] { 1 };
        double[] doubleArray7 = new double[] { 1 };
        double[] doubleArray9 = new double[] { 1 };
        double[] doubleArray11 = new double[] { 1 };
        double[][] doubleArray12 = new double[][] { doubleArray3, doubleArray5, doubleArray7, doubleArray9, doubleArray11 };
        int[] intArray13 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray12, intArray13);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray0, intArray13);
        double[] doubleArray19 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray23 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray27 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray31 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray32 = new double[][] { doubleArray19, doubleArray23, doubleArray27, doubleArray31 };
        double[] doubleArray34 = new double[] { 1 };
        double[] doubleArray36 = new double[] { 1 };
        double[] doubleArray38 = new double[] { 1 };
        double[] doubleArray40 = new double[] { 1 };
        double[] doubleArray42 = new double[] { 1 };
        double[][] doubleArray43 = new double[][] { doubleArray34, doubleArray36, doubleArray38, doubleArray40, doubleArray42 };
        int[] intArray44 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray43, intArray44);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray32, intArray44);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray0, intArray44);
        double[] doubleArray49 = new double[] { 1 };
        double[] doubleArray51 = new double[] { 1 };
        double[] doubleArray53 = new double[] { 1 };
        double[] doubleArray55 = new double[] { 1 };
        double[] doubleArray57 = new double[] { 1 };
        double[][] doubleArray58 = new double[][] { doubleArray49, doubleArray51, doubleArray53, doubleArray55, doubleArray57 };
        int[] intArray59 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray58, intArray59);
        double[][] doubleArray61 = new double[][] {};
        double[][] doubleArray62 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray61);
        int[] intArray63 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray62, intArray63);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray58, intArray63);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray0, intArray63);
        double[][] doubleArray67 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray68 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        java.lang.Class<?> wildcardClass69 = doubleArray68.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[]");
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertNotNull(wildcardClass69);
    }

    @Test
    public void test0981() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0981");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = new double[][] {};
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[] doubleArray5 = new double[] { 1 };
        double[] doubleArray7 = new double[] { 1 };
        double[] doubleArray9 = new double[] { 1 };
        double[] doubleArray11 = new double[] { 1 };
        double[] doubleArray13 = new double[] { 1 };
        double[][] doubleArray14 = new double[][] { doubleArray5, doubleArray7, doubleArray9, doubleArray11, doubleArray13 };
        int[] intArray15 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray14, intArray15);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray2, intArray15);
        double[] doubleArray21 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray25 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray29 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray33 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray34 = new double[][] { doubleArray21, doubleArray25, doubleArray29, doubleArray33 };
        double[] doubleArray36 = new double[] { 1 };
        double[] doubleArray38 = new double[] { 1 };
        double[] doubleArray40 = new double[] { 1 };
        double[] doubleArray42 = new double[] { 1 };
        double[] doubleArray44 = new double[] { 1 };
        double[][] doubleArray45 = new double[][] { doubleArray36, doubleArray38, doubleArray40, doubleArray42, doubleArray44 };
        int[] intArray46 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray45, intArray46);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray34, intArray46);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray2, intArray46);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray1, intArray46);
        double[][] doubleArray51 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray52 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray51);
        double[][] doubleArray53 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray52);
        double[][] doubleArray54 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray53);
        double[][] doubleArray55 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray54);
        double[][] doubleArray56 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray55);
        double[][] doubleArray57 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray56);
        java.lang.Class<?> wildcardClass58 = doubleArray57.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertNotNull(wildcardClass58);
    }

    @Test
    public void test0982() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0982");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        int[] intArray2 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray1, intArray2);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray5 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray6 = new double[][] {};
        double[][] doubleArray7 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray6);
        double[][] doubleArray8 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray6);
        double[][] doubleArray9 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray6);
        double[] doubleArray16 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray23 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray30 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray37 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray38 = new double[][] { doubleArray16, doubleArray23, doubleArray30, doubleArray37 };
        double[][] doubleArray39 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray38);
        double[][] doubleArray40 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray39);
        double[][] doubleArray41 = new double[][] {};
        double[][] doubleArray42 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray41);
        double[] doubleArray44 = new double[] { 1 };
        double[] doubleArray46 = new double[] { 1 };
        double[] doubleArray48 = new double[] { 1 };
        double[] doubleArray50 = new double[] { 1 };
        double[] doubleArray52 = new double[] { 1 };
        double[][] doubleArray53 = new double[][] { doubleArray44, doubleArray46, doubleArray48, doubleArray50, doubleArray52 };
        int[] intArray54 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray53, intArray54);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray41, intArray54);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray40, intArray54);
        double[][] doubleArray58 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray40);
        double[] doubleArray60 = new double[] { 1 };
        double[] doubleArray62 = new double[] { 1 };
        double[] doubleArray64 = new double[] { 1 };
        double[] doubleArray66 = new double[] { 1 };
        double[] doubleArray68 = new double[] { 1 };
        double[][] doubleArray69 = new double[][] { doubleArray60, doubleArray62, doubleArray64, doubleArray66, doubleArray68 };
        int[] intArray70 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray69, intArray70);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray58, intArray70);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray6, intArray70);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray5, intArray70);
        java.lang.Class<?> wildcardClass75 = doubleArray5.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[]");
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray66), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[]");
        org.junit.Assert.assertNotNull(wildcardClass75);
    }

    @Test
    public void test0983() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0983");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[] doubleArray31 = new double[] { 1 };
        double[] doubleArray33 = new double[] { 1 };
        double[] doubleArray35 = new double[] { 1 };
        double[] doubleArray37 = new double[] { 1 };
        double[] doubleArray39 = new double[] { 1 };
        double[][] doubleArray40 = new double[][] { doubleArray31, doubleArray33, doubleArray35, doubleArray37, doubleArray39 };
        int[] intArray41 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray40, intArray41);
        double[][] doubleArray43 = new double[][] {};
        double[][] doubleArray44 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray43);
        int[] intArray45 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray44, intArray45);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray40, intArray45);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray28, intArray45);
        double[][] doubleArray49 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray50 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray51 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray50);
        double[][] doubleArray52 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray50);
        double[][] doubleArray53 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray52);
        double[][] doubleArray54 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray53);
        java.lang.Class<?> wildcardClass55 = doubleArray54.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertNotNull(wildcardClass55);
    }

    @Test
    public void test0984() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0984");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = new double[][] {};
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[] doubleArray8 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray12 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray16 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray20 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray21 = new double[][] { doubleArray8, doubleArray12, doubleArray16, doubleArray20 };
        double[] doubleArray23 = new double[] { 1 };
        double[] doubleArray25 = new double[] { 1 };
        double[] doubleArray27 = new double[] { 1 };
        double[] doubleArray29 = new double[] { 1 };
        double[] doubleArray31 = new double[] { 1 };
        double[][] doubleArray32 = new double[][] { doubleArray23, doubleArray25, doubleArray27, doubleArray29, doubleArray31 };
        int[] intArray33 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray32, intArray33);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray21, intArray33);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray3, intArray33);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray1, intArray33);
        double[][] doubleArray38 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray39 = new double[][] {};
        double[][] doubleArray40 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray39);
        double[] doubleArray42 = new double[] { 1 };
        double[] doubleArray44 = new double[] { 1 };
        double[] doubleArray46 = new double[] { 1 };
        double[] doubleArray48 = new double[] { 1 };
        double[] doubleArray50 = new double[] { 1 };
        double[][] doubleArray51 = new double[][] { doubleArray42, doubleArray44, doubleArray46, doubleArray48, doubleArray50 };
        int[] intArray52 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray51, intArray52);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray39, intArray52);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray1, intArray52);
        double[][] doubleArray56 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray57 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray56);
        java.lang.Class<?> wildcardClass58 = doubleArray57.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[]");
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertNotNull(wildcardClass58);
    }

    @Test
    public void test0985() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0985");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray30 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray29);
        double[][] doubleArray31 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        double[][] doubleArray32 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray31);
        double[][] doubleArray33 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray32);
        double[][] doubleArray34 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray33);
        double[][] doubleArray35 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray34);
        double[][] doubleArray36 = new double[][] {};
        double[][] doubleArray37 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray36);
        double[][] doubleArray38 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray37);
        double[][] doubleArray39 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray38);
        double[][] doubleArray40 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray38);
        double[][] doubleArray41 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray40);
        double[][] doubleArray42 = new double[][] {};
        double[][] doubleArray43 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray42);
        double[][] doubleArray44 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray43);
        double[] doubleArray48 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray52 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray56 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray60 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray61 = new double[][] { doubleArray48, doubleArray52, doubleArray56, doubleArray60 };
        double[] doubleArray63 = new double[] { 1 };
        double[] doubleArray65 = new double[] { 1 };
        double[] doubleArray67 = new double[] { 1 };
        double[] doubleArray69 = new double[] { 1 };
        double[] doubleArray71 = new double[] { 1 };
        double[][] doubleArray72 = new double[][] { doubleArray63, doubleArray65, doubleArray67, doubleArray69, doubleArray71 };
        int[] intArray73 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray72, intArray73);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray61, intArray73);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray44, intArray73);
        double[][] doubleArray77 = null;
        double[] doubleArray79 = new double[] { 1 };
        double[] doubleArray81 = new double[] { 1 };
        double[] doubleArray83 = new double[] { 1 };
        double[] doubleArray85 = new double[] { 1 };
        double[] doubleArray87 = new double[] { 1 };
        double[][] doubleArray88 = new double[][] { doubleArray79, doubleArray81, doubleArray83, doubleArray85, doubleArray87 };
        int[] intArray89 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray88, intArray89);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray77, intArray89);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray44, intArray89);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray40, intArray89);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray34, intArray89);
        java.lang.Class<?> wildcardClass95 = intArray89.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray71), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[]");
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray79), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray81), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray83), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray85), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray87), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray88);
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray89), "[]");
        org.junit.Assert.assertNotNull(wildcardClass95);
    }

    @Test
    public void test0986() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0986");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[] doubleArray36 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray43 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray50 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray57 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray58 = new double[][] { doubleArray36, doubleArray43, doubleArray50, doubleArray57 };
        double[][] doubleArray59 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray58);
        double[][] doubleArray60 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray58);
        double[][] doubleArray61 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray58);
        double[][] doubleArray62 = new double[][] {};
        double[][] doubleArray63 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray62);
        int[] intArray64 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray63, intArray64);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray61, intArray64);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray29, intArray64);
        double[][] doubleArray68 = null;
        double[] doubleArray70 = new double[] { 1 };
        double[] doubleArray72 = new double[] { 1 };
        double[] doubleArray74 = new double[] { 1 };
        double[] doubleArray76 = new double[] { 1 };
        double[] doubleArray78 = new double[] { 1 };
        double[][] doubleArray79 = new double[][] { doubleArray70, doubleArray72, doubleArray74, doubleArray76, doubleArray78 };
        int[] intArray80 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray79, intArray80);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray68, intArray80);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray29, intArray80);
        java.lang.Class<?> wildcardClass84 = intArray80.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[]");
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray70), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray74), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray78), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[]");
        org.junit.Assert.assertNotNull(wildcardClass84);
    }

    @Test
    public void test0987() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0987");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[] doubleArray31 = new double[] { 1 };
        double[] doubleArray33 = new double[] { 1 };
        double[] doubleArray35 = new double[] { 1 };
        double[] doubleArray37 = new double[] { 1 };
        double[] doubleArray39 = new double[] { 1 };
        double[][] doubleArray40 = new double[][] { doubleArray31, doubleArray33, doubleArray35, doubleArray37, doubleArray39 };
        int[] intArray41 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray40, intArray41);
        double[][] doubleArray43 = new double[][] {};
        double[][] doubleArray44 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray43);
        int[] intArray45 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray44, intArray45);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray40, intArray45);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray28, intArray45);
        double[][] doubleArray49 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray50 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray51 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray50);
        double[][] doubleArray52 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray50);
        java.lang.Class<?> wildcardClass53 = doubleArray50.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertNotNull(wildcardClass53);
    }

    @Test
    public void test0988() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0988");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        int[] intArray2 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray1, intArray2);
        double[] doubleArray5 = new double[] { 1 };
        double[] doubleArray7 = new double[] { 1 };
        double[] doubleArray9 = new double[] { 1 };
        double[] doubleArray11 = new double[] { 1 };
        double[] doubleArray13 = new double[] { 1 };
        double[][] doubleArray14 = new double[][] { doubleArray5, doubleArray7, doubleArray9, doubleArray11, doubleArray13 };
        int[] intArray15 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray14, intArray15);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray1, intArray15);
        double[][] doubleArray18 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray19 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray20 = new double[][] {};
        double[][] doubleArray21 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray20);
        double[][] doubleArray22 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray20);
        double[][] doubleArray23 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray20);
        double[] doubleArray30 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray37 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray44 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray51 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray52 = new double[][] { doubleArray30, doubleArray37, doubleArray44, doubleArray51 };
        double[][] doubleArray53 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray52);
        double[][] doubleArray54 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray53);
        double[][] doubleArray55 = new double[][] {};
        double[][] doubleArray56 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray55);
        double[] doubleArray58 = new double[] { 1 };
        double[] doubleArray60 = new double[] { 1 };
        double[] doubleArray62 = new double[] { 1 };
        double[] doubleArray64 = new double[] { 1 };
        double[] doubleArray66 = new double[] { 1 };
        double[][] doubleArray67 = new double[][] { doubleArray58, doubleArray60, doubleArray62, doubleArray64, doubleArray66 };
        int[] intArray68 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray67, intArray68);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray55, intArray68);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray54, intArray68);
        double[][] doubleArray72 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray54);
        double[] doubleArray74 = new double[] { 1 };
        double[] doubleArray76 = new double[] { 1 };
        double[] doubleArray78 = new double[] { 1 };
        double[] doubleArray80 = new double[] { 1 };
        double[] doubleArray82 = new double[] { 1 };
        double[][] doubleArray83 = new double[][] { doubleArray74, doubleArray76, doubleArray78, doubleArray80, doubleArray82 };
        int[] intArray84 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray83, intArray84);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray72, intArray84);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray20, intArray84);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray1, intArray84);
        double[][] doubleArray89 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray90 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray89);
        java.lang.Class<?> wildcardClass91 = doubleArray89.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray66), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[]");
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray74), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray78), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray80), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray82), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray83);
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray84), "[]");
        org.junit.Assert.assertNotNull(doubleArray89);
        org.junit.Assert.assertNotNull(doubleArray90);
        org.junit.Assert.assertNotNull(wildcardClass91);
    }

    @Test
    public void test0989() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0989");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[][] doubleArray5 = new double[][] {};
        double[][] doubleArray6 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray5);
        double[][] doubleArray7 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray6);
        double[][] doubleArray8 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray7);
        double[][] doubleArray9 = new double[][] {};
        double[][] doubleArray10 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray9);
        double[] doubleArray12 = new double[] { 1 };
        double[] doubleArray14 = new double[] { 1 };
        double[] doubleArray16 = new double[] { 1 };
        double[] doubleArray18 = new double[] { 1 };
        double[] doubleArray20 = new double[] { 1 };
        double[][] doubleArray21 = new double[][] { doubleArray12, doubleArray14, doubleArray16, doubleArray18, doubleArray20 };
        int[] intArray22 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray21, intArray22);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray9, intArray22);
        double[] doubleArray28 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray32 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray36 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray40 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray41 = new double[][] { doubleArray28, doubleArray32, doubleArray36, doubleArray40 };
        double[] doubleArray43 = new double[] { 1 };
        double[] doubleArray45 = new double[] { 1 };
        double[] doubleArray47 = new double[] { 1 };
        double[] doubleArray49 = new double[] { 1 };
        double[] doubleArray51 = new double[] { 1 };
        double[][] doubleArray52 = new double[][] { doubleArray43, doubleArray45, doubleArray47, doubleArray49, doubleArray51 };
        int[] intArray53 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray52, intArray53);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray41, intArray53);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray9, intArray53);
        double[] doubleArray58 = new double[] { 1 };
        double[] doubleArray60 = new double[] { 1 };
        double[] doubleArray62 = new double[] { 1 };
        double[] doubleArray64 = new double[] { 1 };
        double[] doubleArray66 = new double[] { 1 };
        double[][] doubleArray67 = new double[][] { doubleArray58, doubleArray60, doubleArray62, doubleArray64, doubleArray66 };
        int[] intArray68 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray67, intArray68);
        double[][] doubleArray70 = new double[][] {};
        double[][] doubleArray71 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray70);
        int[] intArray72 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray71, intArray72);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray67, intArray72);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray9, intArray72);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray8, intArray72);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray3, intArray72);
        java.lang.Class<?> wildcardClass78 = doubleArray3.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[]");
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray66), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[]");
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[]");
        org.junit.Assert.assertNotNull(wildcardClass78);
    }

    @Test
    public void test0990() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0990");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray3 = new double[][] {};
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[][] doubleArray5 = new double[][] {};
        double[][] doubleArray6 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray5);
        double[] doubleArray8 = new double[] { 1 };
        double[] doubleArray10 = new double[] { 1 };
        double[] doubleArray12 = new double[] { 1 };
        double[] doubleArray14 = new double[] { 1 };
        double[] doubleArray16 = new double[] { 1 };
        double[][] doubleArray17 = new double[][] { doubleArray8, doubleArray10, doubleArray12, doubleArray14, doubleArray16 };
        int[] intArray18 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray17, intArray18);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray5, intArray18);
        double[] doubleArray24 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray28 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray32 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray36 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray37 = new double[][] { doubleArray24, doubleArray28, doubleArray32, doubleArray36 };
        double[] doubleArray39 = new double[] { 1 };
        double[] doubleArray41 = new double[] { 1 };
        double[] doubleArray43 = new double[] { 1 };
        double[] doubleArray45 = new double[] { 1 };
        double[] doubleArray47 = new double[] { 1 };
        double[][] doubleArray48 = new double[][] { doubleArray39, doubleArray41, doubleArray43, doubleArray45, doubleArray47 };
        int[] intArray49 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray48, intArray49);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray37, intArray49);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray5, intArray49);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray4, intArray49);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray2, intArray49);
        double[][] doubleArray55 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray56 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray55);
        double[][] doubleArray57 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray56);
        double[][] doubleArray58 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray56);
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[]");
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[]");
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertNotNull(doubleArray58);
    }

    @Test
    public void test0991() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0991");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[] doubleArray3 = new double[] { 1 };
        double[] doubleArray5 = new double[] { 1 };
        double[] doubleArray7 = new double[] { 1 };
        double[] doubleArray9 = new double[] { 1 };
        double[] doubleArray11 = new double[] { 1 };
        double[][] doubleArray12 = new double[][] { doubleArray3, doubleArray5, doubleArray7, doubleArray9, doubleArray11 };
        int[] intArray13 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray12, intArray13);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray0, intArray13);
        double[] doubleArray19 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray23 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray27 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray31 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray32 = new double[][] { doubleArray19, doubleArray23, doubleArray27, doubleArray31 };
        double[] doubleArray34 = new double[] { 1 };
        double[] doubleArray36 = new double[] { 1 };
        double[] doubleArray38 = new double[] { 1 };
        double[] doubleArray40 = new double[] { 1 };
        double[] doubleArray42 = new double[] { 1 };
        double[][] doubleArray43 = new double[][] { doubleArray34, doubleArray36, doubleArray38, doubleArray40, doubleArray42 };
        int[] intArray44 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray43, intArray44);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray32, intArray44);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray0, intArray44);
        double[] doubleArray49 = new double[] { 1 };
        double[] doubleArray51 = new double[] { 1 };
        double[] doubleArray53 = new double[] { 1 };
        double[] doubleArray55 = new double[] { 1 };
        double[] doubleArray57 = new double[] { 1 };
        double[][] doubleArray58 = new double[][] { doubleArray49, doubleArray51, doubleArray53, doubleArray55, doubleArray57 };
        int[] intArray59 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray58, intArray59);
        double[][] doubleArray61 = new double[][] {};
        double[][] doubleArray62 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray61);
        int[] intArray63 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray62, intArray63);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray58, intArray63);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray0, intArray63);
        double[][] doubleArray67 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray68 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray69 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray68);
        double[][] doubleArray70 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray68);
        java.lang.Class<?> wildcardClass71 = doubleArray70.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[]");
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertNotNull(wildcardClass71);
    }

    @Test
    public void test0992() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0992");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray30 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray29);
        double[][] doubleArray31 = new double[][] {};
        double[][] doubleArray32 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray31);
        double[] doubleArray34 = new double[] { 1 };
        double[] doubleArray36 = new double[] { 1 };
        double[] doubleArray38 = new double[] { 1 };
        double[] doubleArray40 = new double[] { 1 };
        double[] doubleArray42 = new double[] { 1 };
        double[][] doubleArray43 = new double[][] { doubleArray34, doubleArray36, doubleArray38, doubleArray40, doubleArray42 };
        int[] intArray44 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray43, intArray44);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray31, intArray44);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray30, intArray44);
        double[][] doubleArray48 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        double[][] doubleArray49 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        double[][] doubleArray50 = null;
        double[][] doubleArray51 = new double[][] {};
        double[][] doubleArray52 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray51);
        int[] intArray53 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray52, intArray53);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray50, intArray53);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray49, intArray53);
        java.lang.Class<?> wildcardClass57 = doubleArray49.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[]");
        org.junit.Assert.assertNotNull(wildcardClass57);
    }

    @Test
    public void test0993() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0993");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = new double[][] {};
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray2);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[] doubleArray8 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray12 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray16 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray20 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray21 = new double[][] { doubleArray8, doubleArray12, doubleArray16, doubleArray20 };
        double[] doubleArray23 = new double[] { 1 };
        double[] doubleArray25 = new double[] { 1 };
        double[] doubleArray27 = new double[] { 1 };
        double[] doubleArray29 = new double[] { 1 };
        double[] doubleArray31 = new double[] { 1 };
        double[][] doubleArray32 = new double[][] { doubleArray23, doubleArray25, doubleArray27, doubleArray29, doubleArray31 };
        int[] intArray33 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray32, intArray33);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray21, intArray33);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray3, intArray33);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray1, intArray33);
        double[][] doubleArray38 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray39 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray38);
        double[][] doubleArray40 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray38);
        double[][] doubleArray41 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray40);
        double[][] doubleArray42 = null;
        double[][] doubleArray43 = new double[][] {};
        double[][] doubleArray44 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray43);
        double[][] doubleArray45 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray43);
        double[][] doubleArray46 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray43);
        double[] doubleArray53 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray60 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray67 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray74 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray75 = new double[][] { doubleArray53, doubleArray60, doubleArray67, doubleArray74 };
        double[][] doubleArray76 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray75);
        double[][] doubleArray77 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray75);
        double[][] doubleArray78 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray75);
        double[][] doubleArray79 = new double[][] {};
        double[][] doubleArray80 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray79);
        int[] intArray81 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray80, intArray81);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray78, intArray81);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray46, intArray81);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray42, intArray81);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray41, intArray81);
        java.lang.Class<?> wildcardClass87 = intArray81.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray74), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray81), "[]");
        org.junit.Assert.assertNotNull(wildcardClass87);
    }

    @Test
    public void test0994() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0994");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[] doubleArray31 = new double[] { 1 };
        double[] doubleArray33 = new double[] { 1 };
        double[] doubleArray35 = new double[] { 1 };
        double[] doubleArray37 = new double[] { 1 };
        double[] doubleArray39 = new double[] { 1 };
        double[][] doubleArray40 = new double[][] { doubleArray31, doubleArray33, doubleArray35, doubleArray37, doubleArray39 };
        int[] intArray41 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray40, intArray41);
        double[][] doubleArray43 = new double[][] {};
        double[][] doubleArray44 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray43);
        int[] intArray45 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray44, intArray45);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray40, intArray45);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray28, intArray45);
        double[][] doubleArray49 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray50 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray49);
        double[][] doubleArray51 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray50);
        double[][] doubleArray52 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray50);
        double[][] doubleArray53 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray50);
        double[][] doubleArray54 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray50);
        double[][] doubleArray55 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray54);
        double[][] doubleArray56 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray55);
        java.lang.Class<?> wildcardClass57 = doubleArray56.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertNotNull(wildcardClass57);
    }

    @Test
    public void test0995() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0995");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        int[] intArray2 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray1, intArray2);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray5 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray4);
        double[][] doubleArray6 = new double[][] {};
        double[][] doubleArray7 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray6);
        int[] intArray8 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray7, intArray8);
        double[] doubleArray11 = new double[] { 1 };
        double[] doubleArray13 = new double[] { 1 };
        double[] doubleArray15 = new double[] { 1 };
        double[] doubleArray17 = new double[] { 1 };
        double[] doubleArray19 = new double[] { 1 };
        double[][] doubleArray20 = new double[][] { doubleArray11, doubleArray13, doubleArray15, doubleArray17, doubleArray19 };
        int[] intArray21 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray20, intArray21);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray7, intArray21);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray4, intArray21);
        java.lang.Class<?> wildcardClass25 = intArray21.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[]");
        org.junit.Assert.assertNotNull(wildcardClass25);
    }

    @Test
    public void test0996() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0996");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[] doubleArray10 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray17 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray24 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray31 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray32 = new double[][] { doubleArray10, doubleArray17, doubleArray24, doubleArray31 };
        double[][] doubleArray33 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray32);
        double[][] doubleArray34 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray32);
        double[][] doubleArray35 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray32);
        double[][] doubleArray36 = new double[][] {};
        double[][] doubleArray37 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray36);
        int[] intArray38 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray37, intArray38);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray35, intArray38);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray3, intArray38);
        double[][] doubleArray42 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[][] doubleArray43 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray42);
        double[][] doubleArray44 = new double[][] {};
        double[][] doubleArray45 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray44);
        double[][] doubleArray46 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray44);
        double[][] doubleArray47 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray46);
        double[][] doubleArray48 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray47);
        double[][] doubleArray49 = new double[][] {};
        double[][] doubleArray50 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray49);
        double[][] doubleArray51 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray50);
        double[] doubleArray55 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray59 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray63 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray67 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray68 = new double[][] { doubleArray55, doubleArray59, doubleArray63, doubleArray67 };
        double[] doubleArray70 = new double[] { 1 };
        double[] doubleArray72 = new double[] { 1 };
        double[] doubleArray74 = new double[] { 1 };
        double[] doubleArray76 = new double[] { 1 };
        double[] doubleArray78 = new double[] { 1 };
        double[][] doubleArray79 = new double[][] { doubleArray70, doubleArray72, doubleArray74, doubleArray76, doubleArray78 };
        int[] intArray80 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray79, intArray80);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray68, intArray80);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray51, intArray80);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray47, intArray80);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray43, intArray80);
        java.lang.Class<?> wildcardClass86 = intArray80.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray70), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray74), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray78), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[]");
        org.junit.Assert.assertNotNull(wildcardClass86);
    }

    @Test
    public void test0997() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0997");
        double[][] doubleArray0 = null;
        double[][] doubleArray1 = new double[][] {};
        double[][] doubleArray2 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray3 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray1);
        double[][] doubleArray4 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray3);
        double[][] doubleArray5 = new double[][] {};
        double[][] doubleArray6 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray5);
        double[][] doubleArray7 = new double[][] {};
        double[][] doubleArray8 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray7);
        double[] doubleArray10 = new double[] { 1 };
        double[] doubleArray12 = new double[] { 1 };
        double[] doubleArray14 = new double[] { 1 };
        double[] doubleArray16 = new double[] { 1 };
        double[] doubleArray18 = new double[] { 1 };
        double[][] doubleArray19 = new double[][] { doubleArray10, doubleArray12, doubleArray14, doubleArray16, doubleArray18 };
        int[] intArray20 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray19, intArray20);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray7, intArray20);
        double[] doubleArray26 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray30 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray34 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray38 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray39 = new double[][] { doubleArray26, doubleArray30, doubleArray34, doubleArray38 };
        double[] doubleArray41 = new double[] { 1 };
        double[] doubleArray43 = new double[] { 1 };
        double[] doubleArray45 = new double[] { 1 };
        double[] doubleArray47 = new double[] { 1 };
        double[] doubleArray49 = new double[] { 1 };
        double[][] doubleArray50 = new double[][] { doubleArray41, doubleArray43, doubleArray45, doubleArray47, doubleArray49 };
        int[] intArray51 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray50, intArray51);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray39, intArray51);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray7, intArray51);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray6, intArray51);
        double[][] doubleArray56 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray6);
        double[][] doubleArray57 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray56);
        double[][] doubleArray58 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray57);
        double[][] doubleArray59 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray57);
        double[][] doubleArray60 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray59);
        double[] doubleArray62 = new double[] { 1 };
        double[] doubleArray64 = new double[] { 1 };
        double[] doubleArray66 = new double[] { 1 };
        double[] doubleArray68 = new double[] { 1 };
        double[] doubleArray70 = new double[] { 1 };
        double[][] doubleArray71 = new double[][] { doubleArray62, doubleArray64, doubleArray66, doubleArray68, doubleArray70 };
        int[] intArray72 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray71, intArray72);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray59, intArray72);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray3, intArray72);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray0, intArray72);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[]");
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[]");
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray66), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray70), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[]");
    }

    @Test
    public void test0998() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0998");
        double[][] doubleArray0 = new double[][] {};
        double[][] doubleArray1 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[] doubleArray3 = new double[] { 1 };
        double[] doubleArray5 = new double[] { 1 };
        double[] doubleArray7 = new double[] { 1 };
        double[] doubleArray9 = new double[] { 1 };
        double[] doubleArray11 = new double[] { 1 };
        double[][] doubleArray12 = new double[][] { doubleArray3, doubleArray5, doubleArray7, doubleArray9, doubleArray11 };
        int[] intArray13 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray12, intArray13);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray0, intArray13);
        double[] doubleArray19 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray23 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray27 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray31 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray32 = new double[][] { doubleArray19, doubleArray23, doubleArray27, doubleArray31 };
        double[] doubleArray34 = new double[] { 1 };
        double[] doubleArray36 = new double[] { 1 };
        double[] doubleArray38 = new double[] { 1 };
        double[] doubleArray40 = new double[] { 1 };
        double[] doubleArray42 = new double[] { 1 };
        double[][] doubleArray43 = new double[][] { doubleArray34, doubleArray36, doubleArray38, doubleArray40, doubleArray42 };
        int[] intArray44 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray43, intArray44);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray32, intArray44);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray0, intArray44);
        double[] doubleArray49 = new double[] { 1 };
        double[] doubleArray51 = new double[] { 1 };
        double[] doubleArray53 = new double[] { 1 };
        double[] doubleArray55 = new double[] { 1 };
        double[] doubleArray57 = new double[] { 1 };
        double[][] doubleArray58 = new double[][] { doubleArray49, doubleArray51, doubleArray53, doubleArray55, doubleArray57 };
        int[] intArray59 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray58, intArray59);
        double[][] doubleArray61 = new double[][] {};
        double[][] doubleArray62 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray61);
        int[] intArray63 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray62, intArray63);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray58, intArray63);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray0, intArray63);
        double[][] doubleArray67 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray68 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray69 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray70 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray71 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray0);
        double[][] doubleArray72 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray71);
        java.lang.Class<?> wildcardClass73 = doubleArray71.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[]");
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertNotNull(wildcardClass73);
    }

    @Test
    public void test0999() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0999");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray30 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray29);
        double[][] doubleArray31 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        double[][] doubleArray32 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        double[][] doubleArray33 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        double[][] doubleArray34 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        double[][] doubleArray35 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray34);
        double[][] doubleArray36 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray35);
        double[][] doubleArray37 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray36);
        double[][] doubleArray38 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray36);
        double[][] doubleArray39 = new double[][] {};
        double[][] doubleArray40 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray39);
        double[][] doubleArray41 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray40);
        double[] doubleArray45 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray49 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray53 = new double[] { 100, 0L, (-1.0f) };
        double[] doubleArray57 = new double[] { 100, 0L, (-1.0f) };
        double[][] doubleArray58 = new double[][] { doubleArray45, doubleArray49, doubleArray53, doubleArray57 };
        double[] doubleArray60 = new double[] { 1 };
        double[] doubleArray62 = new double[] { 1 };
        double[] doubleArray64 = new double[] { 1 };
        double[] doubleArray66 = new double[] { 1 };
        double[] doubleArray68 = new double[] { 1 };
        double[][] doubleArray69 = new double[][] { doubleArray60, doubleArray62, doubleArray64, doubleArray66, doubleArray68 };
        int[] intArray70 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray69, intArray70);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray58, intArray70);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray41, intArray70);
        double[][] doubleArray74 = null;
        double[] doubleArray76 = new double[] { 1 };
        double[] doubleArray78 = new double[] { 1 };
        double[] doubleArray80 = new double[] { 1 };
        double[] doubleArray82 = new double[] { 1 };
        double[] doubleArray84 = new double[] { 1 };
        double[][] doubleArray85 = new double[][] { doubleArray76, doubleArray78, doubleArray80, doubleArray82, doubleArray84 };
        int[] intArray86 = new int[] {};
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray85, intArray86);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray74, intArray86);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray41, intArray86);
        com.thealgorithms.misc.InverseOfMatrix.gaussian(doubleArray36, intArray86);
        java.lang.Class<?> wildcardClass91 = intArray86.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray66), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[]");
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray78), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray80), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray82), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray84), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray85);
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray86), "[]");
        org.junit.Assert.assertNotNull(wildcardClass91);
    }

    @Test
    public void test1000() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test1000");
        double[] doubleArray6 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray13 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray20 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[] doubleArray27 = new double[] { (short) 0, (-1.0f), 0L, (byte) -1, (byte) 1, 100L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        double[][] doubleArray29 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray30 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray28);
        double[][] doubleArray31 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray30);
        double[][] doubleArray32 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray31);
        double[][] doubleArray33 = com.thealgorithms.misc.InverseOfMatrix.invert(doubleArray32);
        java.lang.Class<?> wildcardClass34 = doubleArray32.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, -1.0, 0.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN, NaN, NaN, NaN, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertNotNull(wildcardClass34);
    }
}


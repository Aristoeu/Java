package SimpleSubstitutionCipher;

import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class RegressionTest20 {

    public static boolean debug = false;

    @Test
    public void test10001() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10001");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.decode("\u013b\u013e\u013e\u013b\u013e\u013e\u013b\u013e\u013e\u013b\u013e\u013e\u013b\u013e\u013e\u013b\u013e\u013e\u013b\u013e\u013e\u013b\u013e\u013e\u013b\u013e\u013e\u013b\u013e\u013e\u013b\u013e\u013e\u013b\u013e\u013e\u013b\u013e\u013e\u013b\u013e\u013e\u013b\u013e\u013e\u013b\u013e\u013e\u013b\u013e\u013e\u013b\u013e\u013e\u013b\u013e\u013e\u013b\u013e\u013e\u013b\u013e\u013e\u013b\u013e\u013e\u013b\u013e\u013e\u013b\u013e\u013e\u013b\u013e\u013e\u013b\u013e\u013e\u013b\u013e\u013e\u013b\u013e\u013e\u013b\u013e\u013e\u013b\u013e\u013e\u013b\u013e\u013e\u013b\u013e\u013e!!!", "\u026c\u026c\u026c\u026c\u026c\u026c\u026c\u026c\u026c\u026c\u026c\u026c\u026c\u026c\u026c\u026c\u026c\u026c\u026c\u026c\u026c\u026c\u026c\u026c\u026c\u026c\u026c\u026c\u026c\u026c\u026c\u026c\u026c\u026c\u026c\u026c\u026c\u026c\u026c\u026c\u026c\u026c\u026c\u026c\u026c\u026c\u026c\u026c\u026c\u026c\u026c\u026c\u026c\u026c\u026c\u026c\u026c\u026c\u026c\u026c\u026c\u026c\u026c\u026c\u026c\u026c\u026c\u026c\u026c\u026c\u026c\u026c!");
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "!~nullnullnullnullnullnullnullnullnullnullnullnullnullnull!~nullnullnullnullnullnullnullnullnullnullnullnullnullnull!~nullnullnullnullnullnullnullnullnullnullnullnullnullnull!~nullnullnullnullnullnullnullnullnullnullnullnullnullnull!~nullnullnullnullnullnullnullnullnullnullnullnullnullnull!~nullnullnullnullnullnullnullnullnullnullnullnullnullnull!~nullnullnullnullnullnullnullnullnullnullnullnullnullnull!~nullnullnullnullnullnullnullnullnullnullnullnullnullnull!!!~nullnullnullnullnullnullnullnullnullnullnullnullnullnull!~nullnullnullnullnullnullnullnullnullnullnullnullnullnull!~nullnullnullnullnullnullnullnullnullnullnullnullnullnull!~nullnullnullnullnullnullnullnullnullnullnullnullnullnull!~nullnullnullnullnullnullnullnullnullnullnullnullnullnull!~nullnullnullnullnullnullnullnullnullnullnullnullnullnull!~nullnullnullnullnullnullnullnullnullnullnullnullnullnull!~nullnullnullnullnullnullnullnullnullnullnullnullnullnull!!!" + "'", str2, "!~nullnullnullnullnullnullnullnullnullnullnullnullnullnull!~nullnullnullnullnullnullnullnullnullnullnullnullnullnull!~nullnullnullnullnullnullnullnullnullnullnullnullnullnull!~nullnullnullnullnullnullnullnullnullnullnullnullnullnull!~nullnullnullnullnullnullnullnullnullnullnullnullnullnull!~nullnullnullnullnullnullnullnullnullnullnullnullnullnull!~nullnullnullnullnullnullnullnullnullnullnullnullnullnull!~nullnullnullnullnullnullnullnullnullnullnullnullnullnull!!!~nullnullnullnullnullnullnullnullnullnullnullnullnullnull!~nullnullnullnullnullnullnullnullnullnullnullnullnullnull!~nullnullnullnullnullnullnullnullnullnullnullnullnullnull!~nullnullnullnullnullnullnullnullnullnullnullnullnullnull!~nullnullnullnullnullnullnullnullnullnullnullnullnullnull!~nullnullnullnullnullnullnullnullnullnullnullnullnullnull!~nullnullnullnullnullnullnullnullnullnullnullnullnullnull!~nullnullnullnullnullnullnullnullnullnullnullnullnullnull!!!");
    }

    @Test
    public void test10002() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10002");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.encode("!RRR!RRR!RRR!RRR```!RRR!RRR!RRR!RRR```!RRR!RRR!RRR!RRR```!RRR!RRR!RRR!RRR```!RRR!RRR!RRR!RRR```!RRR!RRR!RRR!RRR```!RRR!RRR!RRR!RRR```!RRR!RRR!RRR!RRR```!RRR!RRR!RRR!RRR```!RRR!RRR!RRR!RRR```!RRR!RRR!RRR!RRR```!RRR!RRR!RRR!RRR```!RRR!RRR!RRR!RRR```!RRR!RRR!RRR!RRR```!RRR!RRR!RRR!RRR```!RRR!RRR!RRR!RRR```!RRR!RRR!RRR!RRR```!RRR!RRR!RRR!RRR```!RRR!RRR!RRR!RRR```!RRR!RRR!RRR!RRR```!RRR!RRR!RRR!RRR```!RRR!RRR!RRR!RRR```!RRR!RRR!RRR!RRR```!RRR!RRR!RRR!RRR```!RRR!RRR!RRR!RRR```!RRR!RRR!RRR!RRR```!RRR!RRR!RRR!RRR```!RRR!RRR!RRR!RRR```!RRR!RRR!RRR!RRR```!RRR!RRR!RRR!RRR```!RRR!RRR!RRR!RRR```!RRR!RRR!RRR!RRR```!", "\275nullnullnullnull~}}nullnullnullnull~}}\200\200nullnullnullnull~}}nullnullnullnull~}}\200\200nullnullnullnull~}}nullnullnullnull~}}\200\200\276nullnullnullnull~}}nullnullnullnull~}}\200\200\275\275!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "!~~~!~~~!~~~!~~~```!~~~!~~~!~~~!~~~```!~~~!~~~!~~~!~~~```!~~~!~~~!~~~!~~~```!~~~!~~~!~~~!~~~```!~~~!~~~!~~~!~~~```!~~~!~~~!~~~!~~~```!~~~!~~~!~~~!~~~```!~~~!~~~!~~~!~~~```!~~~!~~~!~~~!~~~```!~~~!~~~!~~~!~~~```!~~~!~~~!~~~!~~~```!~~~!~~~!~~~!~~~```!~~~!~~~!~~~!~~~```!~~~!~~~!~~~!~~~```!~~~!~~~!~~~!~~~```!~~~!~~~!~~~!~~~```!~~~!~~~!~~~!~~~```!~~~!~~~!~~~!~~~```!~~~!~~~!~~~!~~~```!~~~!~~~!~~~!~~~```!~~~!~~~!~~~!~~~```!~~~!~~~!~~~!~~~```!~~~!~~~!~~~!~~~```!~~~!~~~!~~~!~~~```!~~~!~~~!~~~!~~~```!~~~!~~~!~~~!~~~```!~~~!~~~!~~~!~~~```!~~~!~~~!~~~!~~~```!~~~!~~~!~~~!~~~```!~~~!~~~!~~~!~~~```!~~~!~~~!~~~!~~~```!" + "'", str2, "!~~~!~~~!~~~!~~~```!~~~!~~~!~~~!~~~```!~~~!~~~!~~~!~~~```!~~~!~~~!~~~!~~~```!~~~!~~~!~~~!~~~```!~~~!~~~!~~~!~~~```!~~~!~~~!~~~!~~~```!~~~!~~~!~~~!~~~```!~~~!~~~!~~~!~~~```!~~~!~~~!~~~!~~~```!~~~!~~~!~~~!~~~```!~~~!~~~!~~~!~~~```!~~~!~~~!~~~!~~~```!~~~!~~~!~~~!~~~```!~~~!~~~!~~~!~~~```!~~~!~~~!~~~!~~~```!~~~!~~~!~~~!~~~```!~~~!~~~!~~~!~~~```!~~~!~~~!~~~!~~~```!~~~!~~~!~~~!~~~```!~~~!~~~!~~~!~~~```!~~~!~~~!~~~!~~~```!~~~!~~~!~~~!~~~```!~~~!~~~!~~~!~~~```!~~~!~~~!~~~!~~~```!~~~!~~~!~~~!~~~```!~~~!~~~!~~~!~~~```!~~~!~~~!~~~!~~~```!~~~!~~~!~~~!~~~```!~~~!~~~!~~~!~~~```!~~~!~~~!~~~!~~~```!~~~!~~~!~~~!~~~```!");
    }

    @Test
    public void test10003() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10003");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.decode("\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e!!!", "nullxnullnullnullxnullnull!!!!nullxnullnullnullxnullnull!");
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "u!nullnullu!nullnull!!u!nullnullu!nullnull!!u!nullnullu!nullnull!!u!nullnullu!nullnull!!u!nullnullu!nullnull!!u!nullnullu!nullnull!!u!nullnullu!nullnull!!u!nullnullu!nullnull!!u!nullnullu!nullnull!!u!nullnullu!nullnull!!u!nullnullu!nullnull!!u!nullnullu!nullnull!!u!nullnullu!nullnull!!u!nullnullu!nullnull!!u!nullnullu!nullnull!!u!nullnullu!nullnull!!u!nullnullu!nullnull!!u!nullnullu!nullnull!!u!nullnullu!nullnull!!u!nullnullu!nullnull!!u!nullnullu!nullnull!!u!nullnullu!nullnull!!u!nullnullu!nullnull!!u!nullnullu!nullnull!!u!nullnullu!nullnull!!u!nullnullu!nullnull!!u!nullnullu!nullnull!!u!nullnullu!nullnull!!u!nullnullu!nullnull!!u!nullnullu!nullnull!!u!nullnullu!nullnull!!u!nullnullu!nullnull!!!" + "'", str2, "u!nullnullu!nullnull!!u!nullnullu!nullnull!!u!nullnullu!nullnull!!u!nullnullu!nullnull!!u!nullnullu!nullnull!!u!nullnullu!nullnull!!u!nullnullu!nullnull!!u!nullnullu!nullnull!!u!nullnullu!nullnull!!u!nullnullu!nullnull!!u!nullnullu!nullnull!!u!nullnullu!nullnull!!u!nullnullu!nullnull!!u!nullnullu!nullnull!!u!nullnullu!nullnull!!u!nullnullu!nullnull!!u!nullnullu!nullnull!!u!nullnullu!nullnull!!u!nullnullu!nullnull!!u!nullnullu!nullnull!!u!nullnullu!nullnull!!u!nullnullu!nullnull!!u!nullnullu!nullnull!!u!nullnullu!nullnull!!u!nullnullu!nullnull!!u!nullnullu!nullnull!!u!nullnullu!nullnull!!u!nullnullu!nullnull!!u!nullnullu!nullnull!!u!nullnullu!nullnull!!u!nullnullu!nullnull!!u!nullnullu!nullnull!!!");
    }

    @Test
    public void test10004() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10004");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.decode("`LU!!LU!!LU!!LU!!LU!!LU!!LU!!LU!!LU!!LU!!LU!!LU!!`
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\u0225\u0225\u0225\u0225\u0225\u0225\u0225\u0225\u0225\u0225\u0225\u0225\u0225\u0225\u0225\u0225\u0225\u0225\u0225\u0225\u0225\u0225\u0225\u0225null!!!" + "'", str2, "\u0225\u0225\u0225\u0225\u0225\u0225\u0225\u0225\u0225\u0225\u0225\u0225\u0225\u0225\u0225\u0225\u0225\u0225\u0225\u0225\u0225\u0225\u0225\u0225null!!!");
    }

    @Test
    public void test10005() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10005");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.encode
        org.junit.Assert.assertEquals("'" + strstr
    }

    @Test
    public void test10006() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10006");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.encode("\330\331\333\333\200~~\330\331\333\333\200~~\330\331\333\333\330\331\333\333\330\331\333\333\200~~\330\331\333\333\200~~\330\331\333\333\330\331\333\333!!\330\331\333\333\200~~\330\331\333\333\200~~\330\331\333\333\330\331\333\333\330\331\333\333\200~~\330\331\333\333\200~~\330\331\333\333\330\331\333\333!!\330\331\333\333\200~~\330\331\333\333\200~~\330\331\333\333\330\331\333\333\330\331\333\333\200~~\330\331\333\333\200~~\330\331\333\333\330\331\333\333\330\331\333\333\200~~\330\331\333\333\200~~\330\331\333\333\330\331\333\333\330\331\333\333\200~~\330\331\333\333\200~~\330\331\333\333\330\331\333\333!!\330\331\333\333\200~~\330\331\333\333\200~~\330\331\333\333\330\331\333\333\330\331\333\333\200~~\330\331\333\333\200~~\330\331\333\333\330\331\333\333!!\330\331\333\333\200~~\330\331\333\333\200~~\330\331\333\333\330\331\333\333\330\331\333\333\200~~\330\331\333\333\200~~\330\331\333\333\330\331\333\333!", "\336\300\300\336\336\300\300\336\336\300\300\336\336\336\300\300\336\336\300\300\336\336\300\300\336\336\336\300\300\336\336\300\300\336\336\300\300\336\336\336\300\300\336\336\300\300\336\336\300\300\336\336\200}}`\336\300\300\336\336\300\300\336\336\300\300\336\336\336\300\300\336\336\300\300\336\336\300\300\336\336\336\300\300\336\336\300\300\336\336\300\300\336\336\336\300\300\336\336\300\300\336\336\300\300\336\336]]!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "nullnullnullnull\200~~nullnullnullnull\200~~nullnullnullnullnullnullnullnullnullnullnullnull\200~~nullnullnullnull\200~~nullnullnullnullnullnullnullnull!!nullnullnullnull\200~~nullnullnullnull\200~~nullnullnullnullnullnullnullnullnullnullnullnull\200~~nullnullnullnull\200~~nullnullnullnullnullnullnullnull!!nullnullnullnull\200~~nullnullnullnull\200~~nullnullnullnullnullnullnullnullnullnullnullnull\200~~nullnullnullnull\200~~nullnullnullnullnullnullnullnullnullnullnullnull\200~~nullnullnullnull\200~~nullnullnullnullnullnullnullnullnullnullnullnull\200~~nullnullnullnull\200~~nullnullnullnullnullnullnullnull!!nullnullnullnull\200~~nullnullnullnull\200~~nullnullnullnullnullnullnullnullnullnullnullnull\200~~nullnullnullnull\200~~nullnullnullnullnullnullnullnull!!nullnullnullnull\200~~nullnullnullnull\200~~nullnullnullnullnullnullnullnullnullnullnullnull\200~~nullnullnullnull\200~~nullnullnullnullnullnullnullnull!" + "'", str2, "nullnullnullnull\200~~nullnullnullnull\200~~nullnullnullnullnullnullnullnullnullnullnullnull\200~~nullnullnullnull\200~~nullnullnullnullnullnullnullnull!!nullnullnullnull\200~~nullnullnullnull\200~~nullnullnullnullnullnullnullnullnullnullnullnull\200~~nullnullnullnull\200~~nullnullnullnullnullnullnullnull!!nullnullnullnull\200~~nullnullnullnull\200~~nullnullnullnullnullnullnullnullnullnullnullnull\200~~nullnullnullnull\200~~nullnullnullnullnullnullnullnullnullnullnullnull\200~~nullnullnullnull\200~~nullnullnullnullnullnullnullnullnullnullnullnull\200~~nullnullnullnull\200~~nullnullnullnullnullnullnullnull!!nullnullnullnull\200~~nullnullnullnull\200~~nullnullnullnullnullnullnullnullnullnullnullnull\200~~nullnullnullnull\200~~nullnullnullnullnullnullnullnull!!nullnullnullnull\200~~nullnullnullnull\200~~nullnullnullnullnullnullnullnullnullnullnullnull\200~~nullnullnullnull\200~~nullnullnullnullnullnullnullnull!");
    }

    @Test
    public void test10007() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10007");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.encode("!!nullnull!!nullnull!!nullnull!!nullnull!!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!", "^```^```^```^```^```^```^```^```^```^```nullnull^```^```nullnull^```^```^```^```^```^```^```^```^```^```nullnull^```^```nullnull^```^```^```^```^```^```^```^```^```^```nullnull^```^```nullnull^```^```^```^```^```^```^```^```^```^```nullnull^```^```nullnull^```^```^```^```^```^```^```^```^```^```nullnull^```^```nullnull^```^```^```^```^```^```^```^```^```^```nullnull^```^```nullnull^```^```^```^```^```^```^```^```^```^```nullnull^```^```nullnull^```^```^```^```^```^```^```^```^```^```nullnull^```^```nullnull!");
        org.junit.Assert.assertEquals("'" + strstr
    }

    @Test
    public void test10008() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10008");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.encode("nullnullnullnull~}}^nullnullnullnull]]!", "\u029b\ua7b0\ua7b0\ua7b0\ua7b0\u029b\ua7b0\ua7b0\ua7b0\u029b\ua7b0\ua7b0\ua7b0\u029b\ua7b0\ua7b0\u029b\ua7b0\ua7b0\ua7b0\ua7b0\u029b\ua7b0\ua7b0\ua7b0\u029b\ua7b0\ua7b0\ua7b0\u029b\ua7b0\ua7b0\u029b\ua7b0\ua7b0\ua7b0\ua7b0\u029b\ua7b0\ua7b0\ua7b0\u029b\ua7b0\ua7b0\ua7b0\u029b\ua7b0\ua7b0\u029b\ua7b0\ua7b0\ua7b0\ua7b0\u029b\ua7b0\ua7b0\ua7b0\u029b\ua7b0\ua7b0\ua7b0\u029b\ua7b0\ua7b0\u029b\ua7b0\ua7b0\ua7b0\ua7b0\u029b\ua7b0\ua7b0\ua7b0\u029b\ua7b0\ua7b0\ua7b0\u029b\ua7b0\ua7b0\u029b\ua7b0\ua7b0\ua7b0\ua7b0\u029b\ua7b0\ua7b0\ua7b0\u029b\ua7b0\ua7b0\ua7b0\u029b\ua7b0\ua7b0\u029b\ua7b0\ua7b0\ua7b0\ua7b0\u029b\ua7b0\ua7b0\ua7b0\u029b\ua7b0\ua7b0\ua7b0\u029b\ua7b0\ua7b0\u029b\ua7b0\ua7b0\ua7b0\ua7b0\u029b\ua7b0\ua7b0\ua7b0\u029b\ua7b0\ua7b0\ua7b0\u029b\ua7b0\ua7b0!");
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\u029b\ua7b0\ua7b0\ua7b0\u029b\ua7b0\ua7b0\ua7b0\u029b\ua7b0\ua7b0\ua7b0\u029b\ua7b0\ua7b0\ua7b0\u029b\ua7b0\ua7b0\ua7b0\u029b\ua7b0\ua7b0\ua7b0\u029b\ua7b0\ua7b0\ua7b0\u029b\ua7b0\ua7b0\ua7b0]]!" + "'", str2, "\u029b\ua7b0\ua7b0\ua7b0\u029b\ua7b0\ua7b0\ua7b0\u029b\ua7b0\ua7b0\ua7b0\u029b\ua7b0\ua7b0\ua7b0\u029b\ua7b0\ua7b0\ua7b0\u029b\ua7b0\ua7b0\ua7b0\u029b\ua7b0\ua7b0\ua7b0\u029b\ua7b0\ua7b0\ua7b0]]!");
    }

    @Test
    public void test10009() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10009");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.encode("nullnull!!nullnull!!!!``nullnull!!nullnull!!``nullnull!!nullnull!!``nullnull!!nullnull!!nullnull!!nullnull!!!!nullnull!!nullnull!!!!nullnull!!nullnull!!!!nullnull!!nullnull!!!!nullnull!!nullnull!!!!nullnull!!nullnull!!!!nullnull!!nullnull!!!!nullnull!!nullnull!!!!nullnull!!nullnull!!!!nullnull!!nullnull!!!!nullnull!!nullnull!!!!nullnull!!nullnull!!!!nullnull!!nullnull!!!!nullnull!!nullnull!!!!nullnull!!nullnull!!!!nullnull!!nullnull!!!!nullnull!!nullnull!!!!``nullnull!!nullnull!!``nullnull!!nullnull!!``nullnull!!nullnull!!nullnull!!nullnull!!!!nullnull!!nullnull!!!!nullnull!!nullnull!!!!nullnull!!nullnull!!!!nullnull!!nullnull!!!!nullnull!!nullnull!!!!nullnull!!nullnull!!!!nullnull!!nullnull!!!!!", "\u03aa\u03ab\u03ad\u03ad\u03aa\u03ab\u03ad\u03ad\u03aa\u03ab\u03ad\u03ad\u03aa\u03ab\u03ad\u03ad\u03aa\u03ab\u03ad\u03ad\u03aa\u03ab\u03ad\u03ad\u03aa\u03ab\u03ad\u03ad\u03aa\u03ab\u03ad\u03ad\u03aa\u03ab\u03ad\u03ad\u03aa\u03ab\u03ad\u03ad\u03aa\u03ab\u03ad\u03ad\u03aa\u03ab\u03ad\u03ad\u03aa\u03ab\u03ad\u03ad\u03aa\u03ab\u03ad\u03ad\u03aa\u03ab\u03ad\u03ad\u03aa\u03ab\u03ad\u03ad!");
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "UNLLUNLL!!UNLLUNLL!!!!``UNLLUNLL!!UNLLUNLL!!``UNLLUNLL!!UNLLUNLL!!``UNLLUNLL!!UNLLUNLL!!UNLLUNLL!!UNLLUNLL!!!!UNLLUNLL!!UNLLUNLL!!!!UNLLUNLL!!UNLLUNLL!!!!UNLLUNLL!!UNLLUNLL!!!!UNLLUNLL!!UNLLUNLL!!!!UNLLUNLL!!UNLLUNLL!!!!UNLLUNLL!!UNLLUNLL!!!!UNLLUNLL!!UNLLUNLL!!!!UNLLUNLL!!UNLLUNLL!!!!UNLLUNLL!!UNLLUNLL!!!!UNLLUNLL!!UNLLUNLL!!!!UNLLUNLL!!UNLLUNLL!!!!UNLLUNLL!!UNLLUNLL!!!!UNLLUNLL!!UNLLUNLL!!!!UNLLUNLL!!UNLLUNLL!!!!UNLLUNLL!!UNLLUNLL!!!!UNLLUNLL!!UNLLUNLL!!!!``UNLLUNLL!!UNLLUNLL!!``UNLLUNLL!!UNLLUNLL!!``UNLLUNLL!!UNLLUNLL!!UNLLUNLL!!UNLLUNLL!!!!UNLLUNLL!!UNLLUNLL!!!!UNLLUNLL!!UNLLUNLL!!!!UNLLUNLL!!UNLLUNLL!!!!UNLLUNLL!!UNLLUNLL!!!!UNLLUNLL!!UNLLUNLL!!!!UNLLUNLL!!UNLLUNLL!!!!UNLLUNLL!!UNLLUNLL!!!!!" + "'", str2, "UNLLUNLL!!UNLLUNLL!!!!``UNLLUNLL!!UNLLUNLL!!``UNLLUNLL!!UNLLUNLL!!``UNLLUNLL!!UNLLUNLL!!UNLLUNLL!!UNLLUNLL!!!!UNLLUNLL!!UNLLUNLL!!!!UNLLUNLL!!UNLLUNLL!!!!UNLLUNLL!!UNLLUNLL!!!!UNLLUNLL!!UNLLUNLL!!!!UNLLUNLL!!UNLLUNLL!!!!UNLLUNLL!!UNLLUNLL!!!!UNLLUNLL!!UNLLUNLL!!!!UNLLUNLL!!UNLLUNLL!!!!UNLLUNLL!!UNLLUNLL!!!!UNLLUNLL!!UNLLUNLL!!!!UNLLUNLL!!UNLLUNLL!!!!UNLLUNLL!!UNLLUNLL!!!!UNLLUNLL!!UNLLUNLL!!!!UNLLUNLL!!UNLLUNLL!!!!UNLLUNLL!!UNLLUNLL!!!!UNLLUNLL!!UNLLUNLL!!!!``UNLLUNLL!!UNLLUNLL!!``UNLLUNLL!!UNLLUNLL!!``UNLLUNLL!!UNLLUNLL!!UNLLUNLL!!UNLLUNLL!!!!UNLLUNLL!!UNLLUNLL!!!!UNLLUNLL!!UNLLUNLL!!!!UNLLUNLL!!UNLLUNLL!!!!UNLLUNLL!!UNLLUNLL!!!!UNLLUNLL!!UNLLUNLL!!!!UNLLUNLL!!UNLLUNLL!!!!UNLLUNLL!!UNLLUNLL!!!!!");
    }

    @Test
    public void test10010() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10010");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.encode("~}\200\200~}\200\200null}\200\200null}\200\200\230\230null}\200\200null}\200\200\230\230~}\200\200~}\200\200null}\200\200null}\200\200\230\230null}\200\200null}\200\200\230\230~}\200\200~}\200\200null}\200\200null}\200\200\230\230null}\200\200null}\200\200\230\230~}\200\200~}\200\200null}\200\200null}\200\200\230\230null}\200\200null}\200\200\230\230~}\200\200~}\200\200null}\200\200null}\200\200\230\230null}\200\200null}\200\200\230\230~}\200\200~}\200\200null}\200\200null}\200\200\230\230null}\200\200null}\200\200\230\230~}\200\200~}\200\200null}\200\200null}\200\200\230\230null}\200\200null}\200\200\230\230~}\200\200~}\200\200null}\200\200null}\200\200\230\230null}\200\200null}\200\200\230\230!", "nullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull!!nullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull!!nullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull!!nullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull!!nullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull!!nullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull!!nullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull!!nullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull!!!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "~}\200\200~}\200\200UNLL}\200\200UNLL}\200\200\230\230UNLL}\200\200UNLL}\200\200\230\230~}\200\200~}\200\200UNLL}\200\200UNLL}\200\200\230\230UNLL}\200\200UNLL}\200\200\230\230~}\200\200~}\200\200UNLL}\200\200UNLL}\200\200\230\230UNLL}\200\200UNLL}\200\200\230\230~}\200\200~}\200\200UNLL}\200\200UNLL}\200\200\230\230UNLL}\200\200UNLL}\200\200\230\230~}\200\200~}\200\200UNLL}\200\200UNLL}\200\200\230\230UNLL}\200\200UNLL}\200\200\230\230~}\200\200~}\200\200UNLL}\200\200UNLL}\200\200\230\230UNLL}\200\200UNLL}\200\200\230\230~}\200\200~}\200\200UNLL}\200\200UNLL}\200\200\230\230UNLL}\200\200UNLL}\200\200\230\230~}\200\200~}\200\200UNLL}\200\200UNLL}\200\200\230\230UNLL}\200\200UNLL}\200\200\230\230!" + "'", str2, "~}\200\200~}\200\200UNLL}\200\200UNLL}\200\200\230\230UNLL}\200\200UNLL}\200\200\230\230~}\200\200~}\200\200UNLL}\200\200UNLL}\200\200\230\230UNLL}\200\200UNLL}\200\200\230\230~}\200\200~}\200\200UNLL}\200\200UNLL}\200\200\230\230UNLL}\200\200UNLL}\200\200\230\230~}\200\200~}\200\200UNLL}\200\200UNLL}\200\200\230\230UNLL}\200\200UNLL}\200\200\230\230~}\200\200~}\200\200UNLL}\200\200UNLL}\200\200\230\230UNLL}\200\200UNLL}\200\200\230\230~}\200\200~}\200\200UNLL}\200\200UNLL}\200\200\230\230UNLL}\200\200UNLL}\200\200\230\230~}\200\200~}\200\200UNLL}\200\200UNLL}\200\200\230\230UNLL}\200\200UNLL}\200\200\230\230~}\200\200~}\200\200UNLL}\200\200UNLL}\200\200\230\230UNLL}\200\200UNLL}\200\200\230\230!");
    }

    @Test
    public void test10011() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10011");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.encode("\260\256\253\253\260\256\253\253\260\256\253\253\260\256\253\253nullnull!!nullnull!!\253\253nullnull!!nullnull!!\253\253nullnull!!nullnull!!\253\253nullnull!!nullnull!!\253\253\260\256\253\253\260\256\253\253\260\256\253\253\260\256\253\253nullnull!!nullnull!!\253\253nullnull!!nullnull!!\253\253!", "]```]```]```]```]```]```]```]```]```]```]```]```!!!!]```]```]```]```]```]```]```]```]```]```]```]```!!!!!!]```]```]```]```]```]```]```]```]```]```]```]```!!!!]```]```]```]```]```]```]```]```]```]```]```]```!!!!!!]```]```]```]```]```]```]```]```]```]```]```]```!!!!]```]```]```]```]```]```]```]```]```]```]```]```!!!!!!]```]```]```]```]```]```]```]```]```]```]```]```!!!!]```]```]```]```]```]```]```]```]```]```]```]```!!!!!!]```]```]```]```]```]```]```]```]```]```]```]```!!!!]```]```]```]```]```]```]```]```]```]```]```]```!!!!!!]```]```]```]```]```]```]```]```]```]```]```]```!!!!]```]```]```]```]```]```]```]```]```]```]```]```!!!!!!]```]```]```]```]```]```]```]```]```]```]```]```!!!!]```]```]```]```]```]```]```]```]```]```]```]```!!!!!!]```]```]```]```]```]```]```]```]```]```]```]```!!!!]```]```]```]```]```]```]```]```]```]```]```]```!!!!!!!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\260\256\253\253\260\256\253\253\260\256\253\253\260\256\253\253`]```]``!!`]```]``!!\253\253`]```]``!!`]```]``!!\253\253`]```]``!!`]```]``!!\253\253`]```]``!!`]```]``!!\253\253\260\256\253\253\260\256\253\253\260\256\253\253\260\256\253\253`]```]``!!`]```]``!!\253\253`]```]``!!`]```]``!!\253\253!" + "'", str2, "\260\256\253\253\260\256\253\253\260\256\253\253\260\256\253\253`]```]``!!`]```]``!!\253\253`]```]``!!`]```]``!!\253\253`]```]``!!`]```]``!!\253\253`]```]``!!`]```]``!!\253\253\260\256\253\253\260\256\253\253\260\256\253\253\260\256\253\253`]```]``!!`]```]``!!\253\253`]```]``!!`]```]``!!\253\253!");
    }

    @Test
    public void test10012() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10012");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.encode("\330\273\273\273\273null\270\270\273null\270\270!!!!\330\273\273\273\273null\270\270\273null\270\270!!!!!!\330\273\273\273\273null\270\270\273null\270\270!!!!\330\273\273\273\273null\270\270\273null\270\270!!!!!!\330\273\273\273\273null\270\270\273null\270\270!!!!\330\273\273\273\273null\270\270\273null\270\270!!!!!!\330\273\273\273\273null\270\270\273null\270\270!!!!\330\273\273\273\273null\270\270\273null\270\270!!!!!!\330\273\273\273\273null\270\270\273null\270\270!!!!\330\273\273\273\273null\270\270\273null\270\270!!!!!!\330\273\273\273\273null\270\270\273null\270\270!!!!\330\273\273\273\273null\270\270\273null\270\270!!!!!!\330\273\273\273\273null\270\270\273null\270\270!!!!\330\273\273\273\273null\270\270\273null\270\270!!!!!!\330\273\273\273\273null\270\270\273null\270\270!!!!\330\273\273\273\273null\270\270\273null\270\270!!!!!!!", "\u0366\u0365\u0368\u0368NLLLNLLLNLLLNLLLNLLLNLLLNLLLNLLLNLLLNLLLNLLLNLLLNLLLNLLLNLLLNLLLNLLLNLLLNLLLNLLLNLLLNLLLNLLLNLLLNLLLNLLLNLLLNLLLNLLLNLLLNLLLNLLL!!NLLLNLLLNLLLNLLLNLLLNLLLNLLLNLLLNLLLNLLLNLLLNLLLNLLLNLLLNLLLNLLLNLLLNLLLNLLLNLLLNLLLNLLLNLLLNLLLNLLLNLLLNLLLNLLLNLLLNLLLNLLLNLLL!!\200\200\u0346\u0348\u0348!");
        org.junit.Assert.assertEquals("'" + strstr
    }

    @Test
    public void test10013() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10013");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.encode("LNLLLNLLN~~~N~~~N~~~N~~~N~~~N~~~N~~~N~~~LNLLLNLLN~~~N~~~N~~~N~~~N~~~N~~~N~~~N~~~LNLLLNLLN~~~N~~~N~~~N~~~N~~~N~~~N~~~N~~~LNLLLNLLN~~~N~~~N~~~N~~~N~~~N~~~N~~~N~~~LNLLLNLLN~~~N~~~N~~~N~~~N~~~N~~~N~~~N~~~LNLLLNLLN~~~N~~~N~~~N~~~N~~~N~~~N~~~N~~~LNLLLNLLN~~~N~~~N~~~N~~~N~~~N~~~N~~~N~~~LNLLLNLLN~~~N~~~N~~~N~~~N~~~N~~~N~~~N~~~!", "]nullxx]nullxx]nullxx]nullxx]nullxx]nullxx]nullxx]nullxx]]]nullxx]nullxx]nullxx]nullxx]nullxx]nullxx]nullxx]nullxx]]]nullxx]nullxx]nullxx]nullxx]nullxx]nullxx]nullxx]nullxx]nullxx]nullxx]nullxx]nullxx]nullxx]nullxx]nullxx]nullxx]nullxx]nullxx]nullxx]nullxx]nullxx]nullxx]nullxx]nullxx]nullxx]nullxx]nullxx]nullxx]nullxx]nullxx]nullxx]nullxx]nullxx]nullxx]nullxx]nullxx]nullxx]nullxx]nullxx]nullxx]]]nullxx]nullxx]nullxx]nullxx]nullxx]nullxx]nullxx]nullxx]]]nullxx]nullxx]nullxx]nullxx]nullxx]nullxx]nullxx]nullxx]nullxx]nullxx]nullxx]nullxx]nullxx]nullxx]nullxx]nullxx]nullxx]nullxx]nullxx]nullxx]nullxx]nullxx]nullxx]nullxx]nullxx]nullxx]nullxx]nullxx]nullxx]nullxx]nullxx]nullxx!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "LXLLLXLLX~~~X~~~X~~~X~~~X~~~X~~~X~~~X~~~LXLLLXLLX~~~X~~~X~~~X~~~X~~~X~~~X~~~X~~~LXLLLXLLX~~~X~~~X~~~X~~~X~~~X~~~X~~~X~~~LXLLLXLLX~~~X~~~X~~~X~~~X~~~X~~~X~~~X~~~LXLLLXLLX~~~X~~~X~~~X~~~X~~~X~~~X~~~X~~~LXLLLXLLX~~~X~~~X~~~X~~~X~~~X~~~X~~~X~~~LXLLLXLLX~~~X~~~X~~~X~~~X~~~X~~~X~~~X~~~LXLLLXLLX~~~X~~~X~~~X~~~X~~~X~~~X~~~X~~~!" + "'", str2, "LXLLLXLLX~~~X~~~X~~~X~~~X~~~X~~~X~~~X~~~LXLLLXLLX~~~X~~~X~~~X~~~X~~~X~~~X~~~X~~~LXLLLXLLX~~~X~~~X~~~X~~~X~~~X~~~X~~~X~~~LXLLLXLLX~~~X~~~X~~~X~~~X~~~X~~~X~~~X~~~LXLLLXLLX~~~X~~~X~~~X~~~X~~~X~~~X~~~X~~~LXLLLXLLX~~~X~~~X~~~X~~~X~~~X~~~X~~~X~~~LXLLLXLLX~~~X~~~X~~~X~~~X~~~X~~~X~~~X~~~LXLLLXLLX~~~X~~~X~~~X~~~X~~~X~~~X~~~X~~~!");
    }

    @Test
    public void test10014() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10014");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.encode("\u0366\u0365\u0368\u0368\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e!!!!!\200\200\u0346\u0348\u0348!", "\u0117\u0117\u0117\u0117\u0117\u0117\u0117\u0117\214\214\u0117\u0117\u0117\u0117\u0117\u0117\u0117\u0117\214\214\u0117\u0117\u0117\u0117\u0117\u0117\u0117\u0117\214\214\u0117\u0117\u0117\u0117\u0117\u0117\u0117\u0117\214\214\u0117\u0117\u0117\u0117\u0117\u0117\u0117\u0117\214\214\u0117\u0117\u0117\u0117\u0117\u0117\u0117\u0117\214\214\u0117\u0117\u0117\u0117\u0117\u0117\u0117\u0117\214\214\u0117\u0117\u0117\u0117\u0117\u0117\u0117\u0117\214\214!");
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\u0366\u0365\u0368\u0368null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!!!\200\200\u0346\u0348\u0348!" + "'", str2, "\u0366\u0365\u0368\u0368null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!!!\200\200\u0346\u0348\u0348!");
    }

    @Test
    public void test10015() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10015");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.decode("~}\200\200~}\200\200LL!!LL!!LLLL!!LL!!LL~}\200\200~}\200\200LL!!LL!!LLLL!!LL!!LL~}\200\200~}\200\200LL!!LL!!LLLL!!LL!!LL~}\200\200~}\200\200LL!!LL!!LLLL!!LL!!LL~}\200\200~}\200\200LL!!LL!!LLLL!!LL!!LL~}\200\200~}\200\200LL!!LL!!LLLL!!LL!!LL~}\200\200~}\200\200LL!!LL!!LLLL!!LL!!LL~}\200\200~}\200\200LL!!LL!!LLLL!!LL!!LL!", "!\276\u02eb\u02ebnullnullnull\276\u02eb\u02ebnullnullnull\276\u02eb\u02ebnullnullnull\276\u02eb\u02ebnullnullnull!");
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "~}\200\200~}\200\200\261\261!!\261\261!!\261\261\261\261!!\261\261!!\261\261~}\200\200~}\200\200\261\261!!\261\261!!\261\261\261\261!!\261\261!!\261\261~}\200\200~}\200\200\261\261!!\261\261!!\261\261\261\261!!\261\261!!\261\261~}\200\200~}\200\200\261\261!!\261\261!!\261\261\261\261!!\261\261!!\261\261~}\200\200~}\200\200\261\261!!\261\261!!\261\261\261\261!!\261\261!!\261\261~}\200\200~}\200\200\261\261!!\261\261!!\261\261\261\261!!\261\261!!\261\261~}\200\200~}\200\200\261\261!!\261\261!!\261\261\261\261!!\261\261!!\261\261~}\200\200~}\200\200\261\261!!\261\261!!\261\261\261\261!!\261\261!!\261\261!" + "'", str2, "~}\200\200~}\200\200\261\261!!\261\261!!\261\261\261\261!!\261\261!!\261\261~}\200\200~}\200\200\261\261!!\261\261!!\261\261\261\261!!\261\261!!\261\261~}\200\200~}\200\200\261\261!!\261\261!!\261\261\261\261!!\261\261!!\261\261~}\200\200~}\200\200\261\261!!\261\261!!\261\261\261\261!!\261\261!!\261\261~}\200\200~}\200\200\261\261!!\261\261!!\261\261\261\261!!\261\261!!\261\261~}\200\200~}\200\200\261\261!!\261\261!!\261\261\261\261!!\261\261!!\261\261~}\200\200~}\200\200\261\261!!\261\261!!\261\261\261\261!!\261\261!!\261\261~}\200\200~}\200\200\261\261!!\261\261!!\261\261\261\261!!\261\261!!\261\261!");
    }

    @Test
    public void test10016() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10016");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.encode("!\303\304\306\306\303\304\306\306\275null!!\275null!!\303\304\306\306\303\304\306\306\275null!!\275null!!\303\304\306\306\303\304\306\306\275null!!\275null!!\303\304\306\306\303\304\306\306\275null!!\275null!!\303\304\306\306\303\304\306\306\275null!!\275null!!\303\304\306\306\303\304\306\306\275null!!\275null!!\303\304\306\306\303\304\306\306\275null!!\275null!!\303\304\306\306\303\304\306\306\275null!!\275null!!\303\304\306\306\303\304\306\306\275null!!\275null!!\303\304\306\306\303\304\306\306\275null!!\275null!!\303\304\306\306\303\304\306\306\275null!!\275null!!\303\304\306\306\303\304\306\306\275null!!\275null!!\303\304\306\306\303\304\306\306\275null!!\275null!!\303\304\306\306\303\304\306\306\275null!!\275null!!\303\304\306\306\303\304\306\306\275null!!\275null!!\303\304\306\306\303\304\306\306\275null!!\275null!!!", "\276\275UU\276\275UU\214\214\276\275UU\276\275UU\214\214\276\275UU\276\275UU\214\214\276\275UU\276\275UU\214\214\276\275UU\276\275UU\214\214\276\275UU\276\275UU\214\214\276\275UU\276\275UU\214\214\276\275UU\276\275UU\214\214!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "!nullnullnullnullnullnullnullnull\275\275UUU!!\275\275UUU!!nullnullnullnullnullnullnullnull\275\275UUU!!\275\275UUU!!nullnullnullnullnullnullnullnull\275\275UUU!!\275\275UUU!!nullnullnullnullnullnullnullnull\275\275UUU!!\275\275UUU!!nullnullnullnullnullnullnullnull\275\275UUU!!\275\275UUU!!nullnullnullnullnullnullnullnull\275\275UUU!!\275\275UUU!!nullnullnullnullnullnullnullnull\275\275UUU!!\275\275UUU!!nullnullnullnullnullnullnullnull\275\275UUU!!\275\275UUU!!nullnullnullnullnullnullnullnull\275\275UUU!!\275\275UUU!!nullnullnullnullnullnullnullnull\275\275UUU!!\275\275UUU!!nullnullnullnullnullnullnullnull\275\275UUU!!\275\275UUU!!nullnullnullnullnullnullnullnull\275\275UUU!!\275\275UUU!!nullnullnullnullnullnullnullnull\275\275UUU!!\275\275UUU!!nullnullnullnullnullnullnullnull\275\275UUU!!\275\275UUU!!nullnullnullnullnullnullnullnull\275\275UUU!!\275\275UUU!!nullnullnullnullnullnullnullnull\275\275UUU!!\275\275UUU!!!" + "'", str2, "!nullnullnullnullnullnullnullnull\275\275UUU!!\275\275UUU!!nullnullnullnullnullnullnullnull\275\275UUU!!\275\275UUU!!nullnullnullnullnullnullnullnull\275\275UUU!!\275\275UUU!!nullnullnullnullnullnullnullnull\275\275UUU!!\275\275UUU!!nullnullnullnullnullnullnullnull\275\275UUU!!\275\275UUU!!nullnullnullnullnullnullnullnull\275\275UUU!!\275\275UUU!!nullnullnullnullnullnullnullnull\275\275UUU!!\275\275UUU!!nullnullnullnullnullnullnullnull\275\275UUU!!\275\275UUU!!nullnullnullnullnullnullnullnull\275\275UUU!!\275\275UUU!!nullnullnullnullnullnullnullnull\275\275UUU!!\275\275UUU!!nullnullnullnullnullnullnullnull\275\275UUU!!\275\275UUU!!nullnullnullnullnullnullnullnull\275\275UUU!!\275\275UUU!!nullnullnullnullnullnullnullnull\275\275UUU!!\275\275UUU!!nullnullnullnullnullnullnullnull\275\275UUU!!\275\275UUU!!nullnullnullnullnullnullnullnull\275\275UUU!!\275\275UUU!!nullnullnullnullnullnullnullnull\275\275UUU!!\275\275UUU!!!");
    }

    @Test
    public void test10017() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10017");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.decode("]]\200null\200\200\200null\200\200]]\200null\200\200\200null\200\200!!]]\200null\200\200\200null\200\200]]\200null\200\200\200null\200\200!!]]\200null\200\200\200null\200\200]]\200null\200\200\200null\200\200]]\200null\200\200\200null\200\200]]\200null\200\200\200null\200\200!!]]\200null\200\200\200null\200\200]]\200null\200\200\200null\200\200!!]]\200null\200\200\200null\200\200]]\200null\200\200\200null\200\200!", "AA]]AA]]AA]]AA]]!AA]]AA]]AA]]AA]]AA]]AA]]AA]]AA]]AA]]AA]]AA]]AA]]!AA]]AA]]AA]]AA]]AA]]AA]]AA]]AA]]AA]]AA]]AA]]AA]]!AA]]AA]]AA]]AA]]AA]]AA]]AA]]AA]]AA]]AA]]AA]]AA]]!AA]]AA]]AA]]AA]]AA]]AA]]AA]]AA]]AA]]AA]]AA]]AA]]!AA]]AA]]AA]]AA]]AA]]AA]]AA]]AA]]AA]]AA]]AA]]AA]]!AA]]AA]]AA]]AA]]AA]]AA]]AA]]AA]]AA]]AA]]AA]]AA]]!AA]]AA]]AA]]AA]]AA]]AA]]AA]]AA]]AA]]AA]]AA]]AA]]!AA]]AA]]AA]]AA]]AA]]AA]]AA]]AA]]!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "]]\200nullnullnullnull\200\200\200nullnullnullnull\200\200]]\200nullnullnullnull\200\200\200nullnullnullnull\200\200!!]]\200nullnullnullnull\200\200\200nullnullnullnull\200\200]]\200nullnullnullnull\200\200\200nullnullnullnull\200\200!!]]\200nullnullnullnull\200\200\200nullnullnullnull\200\200]]\200nullnullnullnull\200\200\200nullnullnullnull\200\200]]\200nullnullnullnull\200\200\200nullnullnullnull\200\200]]\200nullnullnullnull\200\200\200nullnullnullnull\200\200!!]]\200nullnullnullnull\200\200\200nullnullnullnull\200\200]]\200nullnullnullnull\200\200\200nullnullnullnull\200\200!!]]\200nullnullnullnull\200\200\200nullnullnullnull\200\200]]\200nullnullnullnull\200\200\200nullnullnullnull\200\200!" + "'", str2, "]]\200nullnullnullnull\200\200\200nullnullnullnull\200\200]]\200nullnullnullnull\200\200\200nullnullnullnull\200\200!!]]\200nullnullnullnull\200\200\200nullnullnullnull\200\200]]\200nullnullnullnull\200\200\200nullnullnullnull\200\200!!]]\200nullnullnullnull\200\200\200nullnullnullnull\200\200]]\200nullnullnullnull\200\200\200nullnullnullnull\200\200]]\200nullnullnullnull\200\200\200nullnullnullnull\200\200]]\200nullnullnullnull\200\200\200nullnullnullnull\200\200!!]]\200nullnullnullnull\200\200\200nullnullnullnull\200\200]]\200nullnullnullnull\200\200\200nullnullnullnull\200\200!!]]\200nullnullnullnull\200\200\200nullnullnullnull\200\200]]\200nullnullnullnull\200\200\200nullnullnullnull\200\200!");
    }

    @Test
    public void test10018() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10018");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.decode("\u0366\u0365\u0368\u0368\u0346\u0348\u0348!", "\214!!!\214!!!\214!!!\214!!!\214!!!\214!!!\214!!!\214!!!\214!!!\214!!!\214!!!\214!!!\214!!!\214!!!\214!!!\214!!!\200}}`\214!!!\214!!!\214!!!\214!!!\214!!!\214!!!\214!!!\214!!!\214!!!\214!!!\214!!!\214!!!\214!!!\214!!!\214!!!\214!!!]]!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\u0366\u0365\u0368\u0368\u0346\u0348\u0348!" + "'", str2, "\u0366\u0365\u0368\u0368\u0346\u0348\u0348!");
    }

    @Test
    public void test10019() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10019");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.decode("\u017e\u017e\u017e\u017e\u017e\u017enullnullnullnullnullnullnullnull!", "\u02ee\u02eb\u02ec\u02ecnullnullnull\200\u02ee\u02eb\u02ec\u02ecnullnullnull]]!");
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\201\202\204\204nullnullnull\201\202\204\204\201\202\204\204\201\202\204\204\201\202\204\204\201\202\204\204\201\202\204\204\201\202\204\204\201\202\204\204\201\202\204\204\201\202\204\204\201\202\204\204\201\202\204\204\201\202\204\204\201\202\204\204\201\202\204\204\201\202\204\204\201\202\204\204nullnullnull\201\202\204\204\201\202\204\204\201\202\204\204\201\202\204\204\201\202\204\204\201\202\204\204\201\202\204\204\201\202\204\204!" + "'", str2, "\201\202\204\204nullnullnull\201\202\204\204\201\202\204\204\201\202\204\204\201\202\204\204\201\202\204\204\201\202\204\204\201\202\204\204\201\202\204\204\201\202\204\204\201\202\204\204\201\202\204\204\201\202\204\204\201\202\204\204\201\202\204\204\201\202\204\204\201\202\204\204\201\202\204\204nullnullnull\201\202\204\204\201\202\204\204\201\202\204\204\201\202\204\204\201\202\204\204\201\202\204\204\201\202\204\204\201\202\204\204!");
    }

    @Test
    public void test10020() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10020");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.encode("!\253\253\253!\253\253\253!!!\253\253\253!\253\253\253!!!\253\253\253!\253\253\253!\253\253\253!\253\253\253!!!\253\253\253!\253\253\253!!!\253\253\253!\253\253\253!", "NLLLL]NNL]NNL]NNL]NNNLLLL]NNL]NN!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "!\253\253\253!\253\253\253!!!\253\253\253!\253\253\253!!!\253\253\253!\253\253\253!\253\253\253!\253\253\253!!!\253\253\253!\253\253\253!!!\253\253\253!\253\253\253!" + "'", str2, "!\253\253\253!\253\253\253!!!\253\253\253!\253\253\253!!!\253\253\253!\253\253\253!\253\253\253!\253\253\253!!!\253\253\253!\253\253\253!!!\253\253\253!\253\253\253!");
    }

    @Test
    public void test10021() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10021");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.decode("\230\230\225\225\230\230\225\225\230\230\225\225\230\230\225\225nullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull\230\230\225\225\230\230\225\225\230\230\225\225\230\230\225\225nullnullnullnullnullnullnullnull!", "\u0294\u0294\u0294\u0294\u0294\u0294\u0294\u0294\u0294\u0294\u0294\u0294\u0294\u0294\u0294\u0294\u0294\u0294\u0294\u0294\u0294\u0294\u0294\u0294\u0294\u0294\u0294\u0294\u0294\u0294\u0294\u0294\u0294\u0294\u0294\u0294\u0294\u0294\u0294\u0294\u0294\u0294\u0294\u0294\u0294\u0294\u0294\u0294\u0294\u0294\u0294\u0294\u0294\u0294\u0294\u0294\u0294\u0294\u0294\u0294\u0294\u0294\u0294\u0294!!!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\230\230\225\225\230\230\225\225\230\230\225\225\230\230\225\225nullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull\230\230\225\225\230\230\225\225\230\230\225\225\230\230\225\225nullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull!" + "'", str2, "\230\230\225\225\230\230\225\225\230\230\225\225\230\230\225\225nullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull\230\230\225\225\230\230\225\225\230\230\225\225\230\230\225\225nullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull!");
    }

    @Test
    public void test10022() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10022");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.decode("\u01a0\u0196\u019d\u019dnullnullnullnull!", "````````````````\200}}`````````````````]]!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "nullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull!" + "'", str2, "nullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull!");
    }

    @Test
    public void test10023() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10023");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.encode("\u028b\u028c\u028e\u028e\u028b\u028c\u028e\u028e\u028b\u028c\u028e\u028e\u028b\u028c\u028e\u028e\u028b\u028c\u028e\u028e\u028b\u028c\u028e\u028e\u028b\u028c\u028e\u028e\u028b\u028c\u028e\u028e\u0366\u0365\u0368\u0368\u0366\u0365\u0368\u0368\u0366\u0365\u0368\u0368\u0366\u0365\u0368\u0368\u028b\u028c\u028e\u028e\u028b\u028c\u028e\u028e\u028b\u028c\u028e\u028e\u028b\u028c\u028e\u028e\u028b\u028c\u028e\u028e\u028b\u028c\u028e\u028e\u028b\u028c\u028e\u028e\u028b\u028c\u028e\u028e\u0366\u0365\u0368\u0368\u0366\u0365\u0368\u0368!", "\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e!");
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\u0366\u0365\u0368\u0368\u0366\u0365\u0368\u0368\u0366\u0365\u0368\u0368\u0366\u0365\u0368\u0368\u0366\u0365\u0368\u0368\u0366\u0365\u0368\u0368!" + "'", str2, "\u0366\u0365\u0368\u0368\u0366\u0365\u0368\u0368\u0366\u0365\u0368\u0368\u0366\u0365\u0368\u0368\u0366\u0365\u0368\u0368\u0366\u0365\u0368\u0368!");
    }

    @Test
    public void test10024() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10024");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.decode("}T!!!\200\200}T!!!\200\200}T!!!\200\200}T!!!\200\200T!~~T!~~T!~~T!~~T!~~T!~~T!~~T!~~T!~~T!~~T!~~T!~~T!~~T!~~T!~~T!~~}T!!!\200\200}T!!!\200\200}T!!!\200\200}T!!!\200\200T!~~T!~~T!~~T!~~T!~~T!~~T!~~T!~~!", "\u02fa\u02fa\u02fa\u02fa\u02fa\u02fa\u02fa\u02fa\u02fa\u02fa\u02fa\u02fa\u02fa\u02fa\u02fa\u02fa\u02fa\u02fa\u02fa\u02fa\u02fa\u02fa\u02fa\u02fa\u02fa\u02fa\u02fa\u02fa\u02fa\u02fa\u02fa\u02fa\u02fa\u02fa\u02fa\u02fa\u02fa\u02fa\u02fa\u02fa\u02fa\u02fa\u02fa\u02fa\u02fa\u02fa\u02fa\u02fa\u02fa\u02fa\u02fa\u02fa\u02fa\u02fa\u02fa\u02fa\u02fa\u02fa\u02fa\u02fa\u02fa\u02fa\u02fa\u02fa\u02fa\u02fa\u02fa\u02fa\u02fa\u02fa\u02fa\u02fa\u02fa\u02fa\u02fa\u02fa\u02fa\u02fa\u02fa\u02fa\u02fa\u02fa\u02fa\u02fa\u02fa\u02fa\u02fa\u02fa\u02fa\u02fa\u02fa\u02fa\u02fa\u02fa\u02fa\u02faN~LLN~LL!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "}null!!!\200\200}null!!!\200\200}null!!!\200\200}null!!!\200\200null!~~null!~~null!~~null!~~null!~~null!~~null!~~null!~~null!~~null!~~null!~~null!~~null!~~null!~~null!~~null!~~}null!!!\200\200}null!!!\200\200}null!!!\200\200}null!!!\200\200null!~~null!~~null!~~null!~~null!~~null!~~null!~~null!~~!" + "'", str2, "}null!!!\200\200}null!!!\200\200}null!!!\200\200}null!!!\200\200null!~~null!~~null!~~null!~~null!~~null!~~null!~~null!~~null!~~null!~~null!~~null!~~null!~~null!~~null!~~null!~~}null!!!\200\200}null!!!\200\200}null!!!\200\200}null!!!\200\200null!~~null!~~null!~~null!~~null!~~null!~~null!~~null!~~!");
    }

    @Test
    public void test10025() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10025");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.decode("``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!!", "fehhfehhnullnullfehhfehhnullnull!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!!" + "'", str2, "``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!!");
    }

    @Test
    public void test10026() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10026");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.encode("\u0348\u0348~~W\220\216\216\216WWW\220\216\216\216WWW\220\216\216\216\u0348\u0348~~W\220\216\216\216WWW\220\216\216\216WWW\220\216\216\216\u0348\u0348~~W\220\216\216\216WWW\220\216\216\216WWW\220\216\216\216\u0348\u0348~~W\220\216\216\216WWW\220\216\216\216WWW\220\216\216\216WW\200\u0348\u0348~~W\220\216\216\216WWW\220\216\216\216WWW\220\216\216\216\u0348\u0348~~W\220\216\216\216WWW\220\216\216\216WWW\220\216\216\216\u0348\u0348~~W\220\216\216\216WWW\220\216\216\216WWW\220\216\216\216\u0348\u0348~~W\220\216\216\216WWW\220\216\216\216WWW\220\216\216\216WW]]!", "\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348!");
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\u0348\u0348\u0348\220\216\216\216\u0348\u0348\u0348\220\216\216\216\u0348\u0348\u0348\220\216\216\216\u0348\u0348\u0348\u0348\u0348\220\216\216\216\u0348\u0348\u0348\220\216\216\216\u0348\u0348\u0348\220\216\216\216\u0348\u0348\u0348\u0348\u0348\220\216\216\216\u0348\u0348\u0348\220\216\216\216\u0348\u0348\u0348\220\216\216\216\u0348\u0348\u0348\u0348\u0348\220\216\216\216\u0348\u0348\u0348\220\216\216\216\u0348\u0348\u0348\220\216\216\216\u0348\u0348\200\u0348\u0348\u0348\220\216\216\216\u0348\u0348\u0348\220\216\216\216\u0348\u0348\u0348\220\216\216\216\u0348\u0348\u0348\u0348\u0348\220\216\216\216\u0348\u0348\u0348\220\216\216\216\u0348\u0348\u0348\220\216\216\216\u0348\u0348\u0348\u0348\u0348\220\216\216\216\u0348\u0348\u0348\220\216\216\216\u0348\u0348\u0348\220\216\216\216\u0348\u0348\u0348\u0348\u0348\220\216\216\216\u0348\u0348\u0348\220\216\216\216\u0348\u0348\u0348\220\216\216\216\u0348\u0348]]!" + "'", str2, "\u0348\u0348\u0348\220\216\216\216\u0348\u0348\u0348\220\216\216\216\u0348\u0348\u0348\220\216\216\216\u0348\u0348\u0348\u0348\u0348\220\216\216\216\u0348\u0348\u0348\220\216\216\216\u0348\u0348\u0348\220\216\216\216\u0348\u0348\u0348\u0348\u0348\220\216\216\216\u0348\u0348\u0348\220\216\216\216\u0348\u0348\u0348\220\216\216\216\u0348\u0348\u0348\u0348\u0348\220\216\216\216\u0348\u0348\u0348\220\216\216\216\u0348\u0348\u0348\220\216\216\216\u0348\u0348\200\u0348\u0348\u0348\220\216\216\216\u0348\u0348\u0348\220\216\216\216\u0348\u0348\u0348\220\216\216\216\u0348\u0348\u0348\u0348\u0348\220\216\216\216\u0348\u0348\u0348\220\216\216\216\u0348\u0348\u0348\220\216\216\216\u0348\u0348\u0348\u0348\u0348\220\216\216\216\u0348\u0348\u0348\220\216\216\216\u0348\u0348\u0348\220\216\216\216\u0348\u0348\u0348\u0348\u0348\220\216\216\216\u0348\u0348\u0348\220\216\216\216\u0348\u0348\u0348\220\216\216\216\u0348\u0348]]!");
    }

    @Test
    public void test10027() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10027");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.decode("", "U}\200\200U}\200\200nullnullnullnullnullnullnullnullU}\200\200U}\200\200nullnullnullnullnullnullnullnullU}\200\200U}\200\200nullnullnullnullnullnullnullnullU}\200\200U}\200\200nullnullnullnullnullnullnullnullU}\200\200U}\200\200nullnullnullnullnullnullnullnullU}\200\200U}\200\200nullnullnullnullnullnullnullnullU}\200\200U}\200\200nullnullnullnullnullnullnullnullU}\200\200U}\200\200nullnullnullnullnullnullnullnull!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
    }

    @Test
    public void test10028() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10028");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.encode("orrrorrrrrorrrorrrrrorrrorrrrrorrrorrrrrorrrorrrrrorrrorrrrrorrrorrrrrorrrorrrrr!", "!\303\304\306\306\303\304\306\306\275null!!\275null!!\303\304\306\306\303\304\306\306\275null!!\275null!!\303\304\306\306\303\304\306\306\275null!!\275null!!\303\304\306\306\303\304\306\306\275null!!\275null!!\303\304\306\306\303\304\306\306\275null!!\275null!!\303\304\306\306\303\304\306\306\275null!!\275null!!\303\304\306\306\303\304\306\306\275null!!\275null!!\303\304\306\306\303\304\306\306\275null!!\275null!!\303\304\306\306\303\304\306\306\275null!!\275null!!\303\304\306\306\303\304\306\306\275null!!\275null!!\303\304\306\306\303\304\306\306\275null!!\275null!!\303\304\306\306\303\304\306\306\275null!!\275null!!\303\304\306\306\303\304\306\306\275null!!\275null!!\303\304\306\306\303\304\306\306\275null!!\275null!!\303\304\306\306\303\304\306\306\275null!!\275null!!\303\304\306\306\303\304\306\306\275null!!\275null!!!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\304\303\303\303\304\303\303\303\303\303\304\303\303\303\304\303\303\303\303\303\304\303\303\303\304\303\303\303\303\303\304\303\303\303\304\303\303\303\303\303\304\303\303\303\304\303\303\303\303\303\304\303\303\303\304\303\303\303\303\303\304\303\303\303\304\303\303\303\303\303\304\303\303\303\304\303\303\303\303\303!" + "'", str2, "\304\303\303\303\304\303\303\303\303\303\304\303\303\303\304\303\303\303\303\303\304\303\303\303\304\303\303\303\303\303\304\303\303\303\304\303\303\303\303\303\304\303\303\303\304\303\303\303\303\303\304\303\303\303\304\303\303\303\303\303\304\303\303\303\304\303\303\303\303\303\304\303\303\303\304\303\303\303\303\303!");
    }

    @Test
    public void test10029() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10029");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.decode("}~\200\200}~\200\200nullnullnullnull^nullnullnullnullnullnullnullnullnullnullnullnull^nullnullnullnullnullnullnullnull}~\200\200}~\200\200nullnullnullnull^nullnullnullnullnullnullnullnullnullnullnullnull^nullnullnullnullnullnullnullnull!", "!!UN!!UN!!!!UN!!UN!!!!!!UN!!UN!!!!UN!!UN!!!!!!UN!!UN!!!!UN!!UN!!!!!!UN!!UN!!!!UN!!UN!!!!!!UN!!UN!!!!UN!!UN!!!!!!UN!!UN!!!!UN!!UN!!!!!!UN!!UN!!!!UN!!UN!!!!!!UN!!UN!!!!UN!!UN!!!!!");
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "}~\200\200}~\200\200\u010c\u010b\u010c\u010b\u010c\u010b\u010c\u010b\u010c\u010b\u010c\u010b\u010c\u010b\u010c\u010b\u010c\u010b\u010c\u010b\u010c\u010b\u010c\u010b\u010c\u010b\u010c\u010b\u010c\u010b\u010c\u010b\u010c\u010b\u010c\u010b\u010c\u010b\u010c\u010b\u010c\u010b\u010c\u010b\u010c\u010b\u010c\u010bnullnull}~\200\200}~\200\200\u010c\u010b\u010c\u010b\u010c\u010b\u010c\u010b\u010c\u010b\u010c\u010b\u010c\u010b\u010c\u010b\u010c\u010b\u010c\u010b\u010c\u010b\u010c\u010b\u010c\u010b\u010c\u010b\u010c\u010b\u010c\u010b\u010c\u010b\u010c\u010b\u010c\u010b\u010c\u010b\u010c\u010b\u010c\u010b\u010c\u010b\u010c\u010bnullnull!" + "'", str2, "}~\200\200}~\200\200\u010c\u010b\u010c\u010b\u010c\u010b\u010c\u010b\u010c\u010b\u010c\u010b\u010c\u010b\u010c\u010b\u010c\u010b\u010c\u010b\u010c\u010b\u010c\u010b\u010c\u010b\u010c\u010b\u010c\u010b\u010c\u010b\u010c\u010b\u010c\u010b\u010c\u010b\u010c\u010b\u010c\u010b\u010c\u010b\u010c\u010b\u010c\u010bnullnull}~\200\200}~\200\200\u010c\u010b\u010c\u010b\u010c\u010b\u010c\u010b\u010c\u010b\u010c\u010b\u010c\u010b\u010c\u010b\u010c\u010b\u010c\u010b\u010c\u010b\u010c\u010b\u010c\u010b\u010c\u010b\u010c\u010b\u010c\u010b\u010c\u010b\u010c\u010b\u010c\u010b\u010c\u010b\u010c\u010b\u010c\u010b\u010c\u010b\u010c\u010bnullnull!");
    }

    @Test
    public void test10030() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10030");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.encode("\215}\215\215\215}\215\215LLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLL\215}\215\215\215}\215\215!", "`]```]``!!`]```]``!!`]```]```]```]``!!`]```]``!!`]```]``!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\215}\215\215\215}\215\215]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]\215}\215\215\215}\215\215!" + "'", str2, "\215}\215\215\215}\215\215]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]\215}\215\215\215}\215\215!");
    }

    @Test
    public void test10031() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10031");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.decode("lLLLLLLLLLLL!!!!lLLLLLLLLLLL!!!!!!lLLLLLLLLLLL!!!!lLLLLLLLLLLL!!!!!!lLLLLLLLLLLL!!!!lLLLLLLLLLLL!!!!!!lLLLLLLLLLLL!!!!lLLLLLLLLLLL!!!!!!lLLLLLLLLLLL!!!!lLLLLLLLLLLL!!!!!!lLLLLLLLLLLL!!!!lLLLLLLLLLLL!!!!!!lLLLLLLLLLLL!!!!lLLLLLLLLLLL!!!!!!lLLLLLLLLLLL!!!!lLLLLLLLLLLL!!!!!!!", "");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "nullnullnullnullnullnullnullnullnullnullnullnull!!!!nullnullnullnullnullnullnullnullnullnullnullnull!!!!!!nullnullnullnullnullnullnullnullnullnullnullnull!!!!nullnullnullnullnullnullnullnullnullnullnullnull!!!!!!nullnullnullnullnullnullnullnullnullnullnullnull!!!!nullnullnullnullnullnullnullnullnullnullnullnull!!!!!!nullnullnullnullnullnullnullnullnullnullnullnull!!!!nullnullnullnullnullnullnullnullnullnullnullnull!!!!!!nullnullnullnullnullnullnullnullnullnullnullnull!!!!nullnullnullnullnullnullnullnullnullnullnullnull!!!!!!nullnullnullnullnullnullnullnullnullnullnullnull!!!!nullnullnullnullnullnullnullnullnullnullnullnull!!!!!!nullnullnullnullnullnullnullnullnullnullnullnull!!!!nullnullnullnullnullnullnullnullnullnullnullnull!!!!!!nullnullnullnullnullnullnullnullnullnullnullnull!!!!nullnullnullnullnullnullnullnullnullnullnullnull!!!!!!!" + "'", str2, "nullnullnullnullnullnullnullnullnullnullnullnull!!!!nullnullnullnullnullnullnullnullnullnullnullnull!!!!!!nullnullnullnullnullnullnullnullnullnullnullnull!!!!nullnullnullnullnullnullnullnullnullnullnullnull!!!!!!nullnullnullnullnullnullnullnullnullnullnullnull!!!!nullnullnullnullnullnullnullnullnullnullnullnull!!!!!!nullnullnullnullnullnullnullnullnullnullnullnull!!!!nullnullnullnullnullnullnullnullnullnullnullnull!!!!!!nullnullnullnullnullnullnullnullnullnullnullnull!!!!nullnullnullnullnullnullnullnullnullnullnullnull!!!!!!nullnullnullnullnullnullnullnullnullnullnullnull!!!!nullnullnullnullnullnullnullnullnullnullnullnull!!!!!!nullnullnullnullnullnullnullnullnullnullnullnull!!!!nullnullnullnullnullnullnullnullnullnullnullnull!!!!!!nullnullnullnullnullnullnullnullnullnullnullnull!!!!nullnullnullnullnullnullnullnullnullnullnullnull!!!!!!!");
    }

    @Test
    public void test10032() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10032");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.decode("\u03a7\u03a7\u03a7\u03a7\u03a7\u03a7\u03a7\u03a7\u03c7\u03c7\u03c7\u03c7\u03c7\u03c7\u03c7\u03c7\u03a7\u03a7\u03a7\u03a7\u03a7\u03a7\u03a7\u03a7\u03c7\u03c7\u03c7\u03c7!!!", "\u0178\u0178\u0178\u0178\u0178\u0178\u0178\u0178\u0178\u0178\u0178\u0178\u0178\u0178\u0178\u0178\u0178\u0178\u0178\u0178\u0178\u0178\u0178\u0178\u0178\u0178\u0178\u0178\u0178\u0178\u0178\u0178\u0178\u0178\u0178\u0178\u0178\u0178\u0178\u0178\u0178\u0178\u0178\u0178\u0178\u0178\u0178\u0178\u0178\u0178\u0178\u0178\u0178\u0178\u0178\u0178\u0178\u0178\u0178\u0178\u0178\u0178\u0178\u0178\u0178\u0178\u0178\u0178\u0178\u0178\u0178\u0178\u0178\u0178\u0178\u0178\u0178\u0178\u0178\u0178\u0178\u0178\u0178\u0178\u0178\u0178\u0178\u0178\u0178\u0178\u0178\u0178\u0178\u0178\u0178\u0178!");
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "!!nullnull!!nullnull!!nullnull!!nullnullnullnull!!nullnull!!nullnull!!nullnull!!!!nullnull!!nullnull!!nullnull!!nullnullnullnull!!nullnull!!!" + "'", str2, "!!nullnull!!nullnull!!nullnull!!nullnullnullnull!!nullnull!!nullnull!!nullnull!!!!nullnull!!nullnull!!nullnull!!nullnullnullnull!!nullnull!!!");
    }

    @Test
    public void test10033() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10033");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.encode("!!\271\271!!\271\271\271\271!!\271\271!!!!\271\271!!\271\271\271\271!!\271\271!!!", "\u0348~~\225\230\230\u0348~~\225\230\230\u0348~~\225\230\230\u0348~~\225\230\230\200\u0348~~\225\230\230\u0348~~\225\230\230\u0348~~\225\230\230\u0348~~\225\230\230]]!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "!!\271\271!!\271\271\271\271!!\271\271!!!!\271\271!!\271\271\271\271!!\271\271!!!" + "'", str2, "!!\271\271!!\271\271\271\271!!\271\271!!!!\271\271!!\271\271\271\271!!\271\271!!!");
    }

    @Test
    public void test10034() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10034");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.encode("UNLLUNLL!!``UNLLUNLL``UNLLUNLL``UNLLUNLLUNLLUNLL!!UNLLUNLL!!UNLLUNLL!!UNLLUNLL!!UNLLUNLL!!UNLLUNLL!!UNLLUNLL!!UNLLUNLL!!UNLLUNLL!!UNLLUNLL!!UNLLUNLL!!UNLLUNLL!!UNLLUNLL!!UNLLUNLL!!UNLLUNLL!!UNLLUNLL!!UNLLUNLL!!``UNLLUNLL``UNLLUNLL``UNLLUNLLUNLLUNLL!!UNLLUNLL!!UNLLUNLL!!UNLLUNLL!!UNLLUNLL!!UNLLUNLL!!UNLLUNLL!!UNLLUNLL!!!", "!~HH!~HH\220\220!~HH!~HH\220\220\220!~HH\220\220\220!~HH\220\220\220!~HH\220\220\220!~HH\220\220!~HH!~HH\220\220!~HH!~HH\220\220!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\220H~~\220H~~!!``\220H~~\220H~~``\220H~~\220H~~``\220H~~\220H~~\220H~~\220H~~!!\220H~~\220H~~!!\220H~~\220H~~!!\220H~~\220H~~!!\220H~~\220H~~!!\220H~~\220H~~!!\220H~~\220H~~!!\220H~~\220H~~!!\220H~~\220H~~!!\220H~~\220H~~!!\220H~~\220H~~!!\220H~~\220H~~!!\220H~~\220H~~!!\220H~~\220H~~!!\220H~~\220H~~!!\220H~~\220H~~!!\220H~~\220H~~!!``\220H~~\220H~~``\220H~~\220H~~``\220H~~\220H~~\220H~~\220H~~!!\220H~~\220H~~!!\220H~~\220H~~!!\220H~~\220H~~!!\220H~~\220H~~!!\220H~~\220H~~!!\220H~~\220H~~!!\220H~~\220H~~!!!" + "'", str2, "\220H~~\220H~~!!``\220H~~\220H~~``\220H~~\220H~~``\220H~~\220H~~\220H~~\220H~~!!\220H~~\220H~~!!\220H~~\220H~~!!\220H~~\220H~~!!\220H~~\220H~~!!\220H~~\220H~~!!\220H~~\220H~~!!\220H~~\220H~~!!\220H~~\220H~~!!\220H~~\220H~~!!\220H~~\220H~~!!\220H~~\220H~~!!\220H~~\220H~~!!\220H~~\220H~~!!\220H~~\220H~~!!\220H~~\220H~~!!\220H~~\220H~~!!``\220H~~\220H~~``\220H~~\220H~~``\220H~~\220H~~\220H~~\220H~~!!\220H~~\220H~~!!\220H~~\220H~~!!\220H~~\220H~~!!\220H~~\220H~~!!\220H~~\220H~~!!\220H~~\220H~~!!\220H~~\220H~~!!!");
    }

    @Test
    public void test10035() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10035");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.decode("\236\237\241\241~\236\237\241\241\236\237\241\241\236\237\241\241~\236\237\241\241\236\237\241\241!!\236\237\241\241~\236\237\241\241\236\237\241\241\236\237\241\241~\236\237\241\241\236\237\241\241!!\236\237\241\241~\236\237\241\241\236\237\241\241\236\237\241\241~\236\237\241\241\236\237\241\241\236\237\241\241~\236\237\241\241\236\237\241\241\236\237\241\241~\236\237\241\241\236\237\241\241!!\236\237\241\241~\236\237\241\241\236\237\241\241\236\237\241\241~\236\237\241\241\236\237\241\241!!\236\237\241\241~\236\237\241\241\236\237\241\241\236\237\241\241~\236\237\241\241\236\237\241\241!", "\213\213!!\213\213!!\213\213!!\213\213!!\213\213!!\213\213!!\213\213!!\213\213!!\214\214\213\213!!\213\213!!\213\213!!\213\213!!\213\213!!\213\213!!\213\213!!\213\213!!\214\214\213\213!!\213\213!!\213\213!!\213\213!!\213\213!!\213\213!!\213\213!!\213\213!!\214\214\213\213!!\213\213!!\213\213!!\213\213!!\213\213!!\213\213!!\213\213!!\213\213!!\214\214\213\213!!\213\213!!\213\213!!\213\213!!\213\213!!\213\213!!\213\213!!\213\213!!\214\214\213\213!!\213\213!!\213\213!!\213\213!!\213\213!!\213\213!!\213\213!!\213\213!!\214\214\213\213!!\213\213!!\213\213!!\213\213!!\213\213!!\213\213!!\213\213!!\213\213!!\214\214\213\213!!\213\213!!\213\213!!\213\213!!\213\213!!\213\213!!\213\213!!\213\213!!\214\214!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\236\237\241\241~\236\237\241\241\236\237\241\241\236\237\241\241~\236\237\241\241\236\237\241\241!!\236\237\241\241~\236\237\241\241\236\237\241\241\236\237\241\241~\236\237\241\241\236\237\241\241!!\236\237\241\241~\236\237\241\241\236\237\241\241\236\237\241\241~\236\237\241\241\236\237\241\241\236\237\241\241~\236\237\241\241\236\237\241\241\236\237\241\241~\236\237\241\241\236\237\241\241!!\236\237\241\241~\236\237\241\241\236\237\241\241\236\237\241\241~\236\237\241\241\236\237\241\241!!\236\237\241\241~\236\237\241\241\236\237\241\241\236\237\241\241~\236\237\241\241\236\237\241\241!" + "'", str2, "\236\237\241\241~\236\237\241\241\236\237\241\241\236\237\241\241~\236\237\241\241\236\237\241\241!!\236\237\241\241~\236\237\241\241\236\237\241\241\236\237\241\241~\236\237\241\241\236\237\241\241!!\236\237\241\241~\236\237\241\241\236\237\241\241\236\237\241\241~\236\237\241\241\236\237\241\241\236\237\241\241~\236\237\241\241\236\237\241\241\236\237\241\241~\236\237\241\241\236\237\241\241!!\236\237\241\241~\236\237\241\241\236\237\241\241\236\237\241\241~\236\237\241\241\236\237\241\241!!\236\237\241\241~\236\237\241\241\236\237\241\241\236\237\241\241~\236\237\241\241\236\237\241\241!");
    }

    @Test
    public void test10036() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10036");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.decode("NUUUNUUUNUUUNUUUNUUUNUUUNUUUNUUUNUUUNUUUNUUUNUUUNUUUNUUU!", "L]LLL]LL!!L]LLL]LL!!L]LLL]LLL]LLL]LL!!L]LLL]LL!!L]LLL]LL!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "nullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull!" + "'", str2, "nullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull!");
    }

    @Test
    public void test10037() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10037");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.decode("NLLL\220NN\200}}`NLLL\220NN]]!", "OO]]OO]]OO]]OO]]~}}^OO]]OO]]OO]]OO]]]]!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "nullnullnullnull\220nullnull\200}}`nullnullnullnull\220nullnull]]!" + "'", str2, "nullnullnullnull\220nullnull\200}}`nullnullnullnull\220nullnull]]!");
    }

    @Test
    public void test10038() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10038");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.encode("!UUU!UUU!UUU!UUU!UUU!UUU!UUU!UUU!UUU!UUU!UUU!UUU!UUU!UUU!UUU!UUU!UUU!UUU!UUU!UUU!UUU!UUU!UUU!UUU!UUU!UUU!UUU!UUU!UUU!UUU!UUU!UUU!UUU!UUU!UUU!UUU!UUU!UUU!UUU!UUU!UUU!UUU!UUU!UUU!UUU!UUU!UUU!UUU!UUU!UUU!UUU!UUU!UUU!UUU!UUU!UUU!UUU!UUU!UUU!UUU!UUU!UUU!UUU!UUU\200}}`!UUU!UUU!UUU!UUU!UUU!UUU!UUU!UUU!UUU!UUU!UUU!UUU!UUU!UUU!UUU!UUU!UUU!UUU!UUU!UUU!UUU!UUU!UUU!UUU!UUU!UUU!UUU!UUU!UUU!UUU!UUU!UUU!UUU!UUU!UUU!UUU!UUU!UUU!UUU!UUU!UUU!UUU!UUU!UUU!UUU!UUU!UUU!UUU!UUU!UUU!UUU!UUU!UUU!UUU!UUU!UUU!UUU!UUU!UUU!UUU!UUU!UUU!UUU!UUU]]!", "nullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull!!nullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull!!nullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull!!nullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull!!nullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "!NNN!NNN!NNN!NNN!NNN!NNN!NNN!NNN!NNN!NNN!NNN!NNN!NNN!NNN!NNN!NNN!NNN!NNN!NNN!NNN!NNN!NNN!NNN!NNN!NNN!NNN!NNN!NNN!NNN!NNN!NNN!NNN!NNN!NNN!NNN!NNN!NNN!NNN!NNN!NNN!NNN!NNN!NNN!NNN!NNN!NNN!NNN!NNN!NNN!NNN!NNN!NNN!NNN!NNN!NNN!NNN!NNN!NNN!NNN!NNN!NNN!NNN!NNN!NNN\200}}`!NNN!NNN!NNN!NNN!NNN!NNN!NNN!NNN!NNN!NNN!NNN!NNN!NNN!NNN!NNN!NNN!NNN!NNN!NNN!NNN!NNN!NNN!NNN!NNN!NNN!NNN!NNN!NNN!NNN!NNN!NNN!NNN!NNN!NNN!NNN!NNN!NNN!NNN!NNN!NNN!NNN!NNN!NNN!NNN!NNN!NNN!NNN!NNN!NNN!NNN!NNN!NNN!NNN!NNN!NNN!NNN!NNN!NNN!NNN!NNN!NNN!NNN!NNN!NNN]]!" + "'", str2, "!NNN!NNN!NNN!NNN!NNN!NNN!NNN!NNN!NNN!NNN!NNN!NNN!NNN!NNN!NNN!NNN!NNN!NNN!NNN!NNN!NNN!NNN!NNN!NNN!NNN!NNN!NNN!NNN!NNN!NNN!NNN!NNN!NNN!NNN!NNN!NNN!NNN!NNN!NNN!NNN!NNN!NNN!NNN!NNN!NNN!NNN!NNN!NNN!NNN!NNN!NNN!NNN!NNN!NNN!NNN!NNN!NNN!NNN!NNN!NNN!NNN!NNN!NNN!NNN\200}}`!NNN!NNN!NNN!NNN!NNN!NNN!NNN!NNN!NNN!NNN!NNN!NNN!NNN!NNN!NNN!NNN!NNN!NNN!NNN!NNN!NNN!NNN!NNN!NNN!NNN!NNN!NNN!NNN!NNN!NNN!NNN!NNN!NNN!NNN!NNN!NNN!NNN!NNN!NNN!NNN!NNN!NNN!NNN!NNN!NNN!NNN!NNN!NNN!NNN!NNN!NNN!NNN!NNN!NNN!NNN!NNN!NNN!NNN!NNN!NNN!NNN!NNN!NNN!NNN]]!");
    }

    @Test
    public void test10039() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10039");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.decode("\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348~~!", "\u0170\u0170\u0170\u0170\u0170\u0170\u0170\u0170\u0170\u0170\u0170\u0170~~~~~!!~~!!~~!!~~!!~~!!~~!!~~!!~~!!!");
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\u0348\321\321\u0348\321\321\u0348\u0348\u0348\u0348\u0348\321\321\u0348\321\321\u0348\u0348\u0348\u0348\u0348\321\321\u0348\321\321\u0348\u0348\u0348\u0348\u0348\321\321\u0348\321\321\u0348\u0348\u0348\u0348\u0348\321\321\u0348\321\321\u0348\u0348\u0348\u0348\u0348\321\321\u0348\321\321\u0348\u0348\u0348\u0348\u0348\321\321\u0348\321\321\u0348\u0348\u0348\u0348\u0348\321\321\u0348\321\321\u0348\u0348\u0348\u0348~~!" + "'", str2, "\u0348\321\321\u0348\321\321\u0348\u0348\u0348\u0348\u0348\321\321\u0348\321\321\u0348\u0348\u0348\u0348\u0348\321\321\u0348\321\321\u0348\u0348\u0348\u0348\u0348\321\321\u0348\321\321\u0348\u0348\u0348\u0348\u0348\321\321\u0348\321\321\u0348\u0348\u0348\u0348\u0348\321\321\u0348\321\321\u0348\u0348\u0348\u0348\u0348\321\321\u0348\321\321\u0348\u0348\u0348\u0348\u0348\321\321\u0348\321\321\u0348\u0348\u0348\u0348~~!");
    }

    @Test
    public void test10040() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10040");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.encode("``nullnull``nullnull``nullnull``nullnull``nullnull``nullnull``nullnull``nullnull!", "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\214\214XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\214\214XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\214\214XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\214\214XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\214\214XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\214\214XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\214\214XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\214\214!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "``XXXXXXXX``XXXXXXXX``XXXXXXXX``XXXXXXXX``XXXXXXXX``XXXXXXXX``XXXXXXXX``XXXXXXXX!" + "'", str2, "``XXXXXXXX``XXXXXXXX``XXXXXXXX``XXXXXXXX``XXXXXXXX``XXXXXXXX``XXXXXXXX``XXXXXXXX!");
    }

    @Test
    public void test10041() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10041");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.decode("\u0244\u0248\u0246\u0246\u0244\u0248\u0246\u0246\u0244\u0248\u0246\u0246\u0244\u0248\u0246\u0246\u0244\u0248\u0246\u0246\u0244\u0248\u0246\u0246\u0244\u0248\u0246\u0246\u0244\u0248\u0246\u0246\u0244\u0248\u0246\u0246\u0244\u0248\u0246\u0246\u0244\u0248\u0246\u0246\u0244\u0248\u0246\u0246\u0244\u0248\u0246\u0246\u0244\u0248\u0246\u0246\u0244\u0248\u0246\u0246\u0244\u0248\u0246\u0246!", "\u0366\u0365\u0368\u0368\u0346\u0348\u0348!");
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "qrttqrttnullnullnullnullnullnullnullnullqrttqrttnullnullnullnullnullnullnullnullqrttqrttnullnullnullnullnullnullnullnullqrttqrttnullnullnullnullnullnullnullnullqrttqrttnullnullnullnullnullnullnullnullqrttqrttnullnullnullnullnullnullnullnullqrttqrttnullnullnullnullnullnullnullnullqrttqrttnullnullnullnullnullnullnullnull!" + "'", str2, "qrttqrttnullnullnullnullnullnullnullnullqrttqrttnullnullnullnullnullnullnullnullqrttqrttnullnullnullnullnullnullnullnullqrttqrttnullnullnullnullnullnullnullnullqrttqrttnullnullnullnullnullnullnullnullqrttqrttnullnullnullnullnullnullnullnullqrttqrttnullnullnullnullnullnullnullnullqrttqrttnullnullnullnullnullnullnullnull!");
    }

    @Test
    public void test10042() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10042");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.decode("\216\216`~~~`~~~\216\216`~~~`~~~\216\216`~~~`~~~\216\216`~~~`~~~\216\216`~~~`~~~\216\216`~~~`~~~\216\216`~~~`~~~\216\216`~~~`~~~!!\216\216`~~~`~~~\216\216`~~~`~~~\216\216`~~~`~~~\216\216`~~~`~~~\216\216`~~~`~~~\216\216`~~~`~~~\216\216`~~~`~~~\216\216`~~~`~~~!!\216\216`~~~`~~~\216\216`~~~`~~~\216\216`~~~`~~~\216\216`~~~`~~~\216\216`~~~`~~~\216\216`~~~`~~~\216\216`~~~`~~~\216\216`~~~`~~~\216\216`~~~`~~~\216\216`~~~`~~~\216\216`~~~`~~~\216\216`~~~`~~~\216\216`~~~`~~~\216\216`~~~`~~~\216\216`~~~`~~~\216\216`~~~`~~~!!\216\216`~~~`~~~\216\216`~~~`~~~\216\216`~~~`~~~\216\216`~~~`~~~\216\216`~~~`~~~\216\216`~~~`~~~\216\216`~~~`~~~\216\216`~~~`~~~!!\216\216`~~~`~~~\216\216`~~~`~~~\216\216`~~~`~~~\216\216`~~~`~~~\216\216`~~~`~~~\216\216`~~~`~~~\216\216`~~~`~~~\216\216`~~~`~~~!", "LnullLLLnullLL!!LnullLLLnullLL!!LnullLLLnullLLLnullLLLnullLL!!LnullLLLnullLL!!LnullLLLnullLL!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\216\216`~~~`~~~\216\216`~~~`~~~\216\216`~~~`~~~\216\216`~~~`~~~\216\216`~~~`~~~\216\216`~~~`~~~\216\216`~~~`~~~\216\216`~~~`~~~!!\216\216`~~~`~~~\216\216`~~~`~~~\216\216`~~~`~~~\216\216`~~~`~~~\216\216`~~~`~~~\216\216`~~~`~~~\216\216`~~~`~~~\216\216`~~~`~~~!!\216\216`~~~`~~~\216\216`~~~`~~~\216\216`~~~`~~~\216\216`~~~`~~~\216\216`~~~`~~~\216\216`~~~`~~~\216\216`~~~`~~~\216\216`~~~`~~~\216\216`~~~`~~~\216\216`~~~`~~~\216\216`~~~`~~~\216\216`~~~`~~~\216\216`~~~`~~~\216\216`~~~`~~~\216\216`~~~`~~~\216\216`~~~`~~~!!\216\216`~~~`~~~\216\216`~~~`~~~\216\216`~~~`~~~\216\216`~~~`~~~\216\216`~~~`~~~\216\216`~~~`~~~\216\216`~~~`~~~\216\216`~~~`~~~!!\216\216`~~~`~~~\216\216`~~~`~~~\216\216`~~~`~~~\216\216`~~~`~~~\216\216`~~~`~~~\216\216`~~~`~~~\216\216`~~~`~~~\216\216`~~~`~~~!" + "'", str2, "\216\216`~~~`~~~\216\216`~~~`~~~\216\216`~~~`~~~\216\216`~~~`~~~\216\216`~~~`~~~\216\216`~~~`~~~\216\216`~~~`~~~\216\216`~~~`~~~!!\216\216`~~~`~~~\216\216`~~~`~~~\216\216`~~~`~~~\216\216`~~~`~~~\216\216`~~~`~~~\216\216`~~~`~~~\216\216`~~~`~~~\216\216`~~~`~~~!!\216\216`~~~`~~~\216\216`~~~`~~~\216\216`~~~`~~~\216\216`~~~`~~~\216\216`~~~`~~~\216\216`~~~`~~~\216\216`~~~`~~~\216\216`~~~`~~~\216\216`~~~`~~~\216\216`~~~`~~~\216\216`~~~`~~~\216\216`~~~`~~~\216\216`~~~`~~~\216\216`~~~`~~~\216\216`~~~`~~~\216\216`~~~`~~~!!\216\216`~~~`~~~\216\216`~~~`~~~\216\216`~~~`~~~\216\216`~~~`~~~\216\216`~~~`~~~\216\216`~~~`~~~\216\216`~~~`~~~\216\216`~~~`~~~!!\216\216`~~~`~~~\216\216`~~~`~~~\216\216`~~~`~~~\216\216`~~~`~~~\216\216`~~~`~~~\216\216`~~~`~~~\216\216`~~~`~~~\216\216`~~~`~~~!");
    }

    @Test
    public void test10043() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10043");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.decode("TT!!TT!!TT!!TT!!TT!!TT!!TT!!TT!!TT!!TT!!TT!!TT!!TT!!TT!!TT!!TT!!TT!!TT!!TT!!TT!!TT!!TT!!TT!!TT!!TT!!TT!!TT!!TT!!TT!!TT!!TT!!TT!!!", "\u0100\u0100\u0100\u0100\u0100\u0100\u0100\u0100\u0100\u0100\u0100\u0100\u0100\u0100\u0100\u0100\u0100\u0100\u0100\u0100\u0100\u0100\u0100\u0100!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!!" + "'", str2, "nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!!");
    }

    @Test
    public void test10044() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10044");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.decode("\276!~~\276!~~\276!~~\276!~~\276!~~\276!~~\276!~~\276!~~N\275!!N\275!!N\275!!N\275!!N\275!!N\275!!N\275!!N\275!!\276!~~\276!~~\276!~~\276!~~\276!~~\276!~~\276!~~\276!~~N\275!!N\275!!N\275!!N\275!!N\275!!N\275!!N\275!!N\275!!!", "");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\276!~~\276!~~\276!~~\276!~~\276!~~\276!~~\276!~~\276!~~null\275!!null\275!!null\275!!null\275!!null\275!!null\275!!null\275!!null\275!!\276!~~\276!~~\276!~~\276!~~\276!~~\276!~~\276!~~\276!~~null\275!!null\275!!null\275!!null\275!!null\275!!null\275!!null\275!!null\275!!!" + "'", str2, "\276!~~\276!~~\276!~~\276!~~\276!~~\276!~~\276!~~\276!~~null\275!!null\275!!null\275!!null\275!!null\275!!null\275!!null\275!!null\275!!\276!~~\276!~~\276!~~\276!~~\276!~~\276!~~\276!~~\276!~~null\275!!null\275!!null\275!!null\275!!null\275!!null\275!!null\275!!null\275!!!");
    }

    @Test
    public void test10045() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10045");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.encode("\u0366\u0365\u0368\u0368\254\254\254\254\u0346\u0348\u
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\u0366\u0365\u0368\u0368\254\254\254\254\u0346\u0348\u0348!" + "'", str2, "\u0366\u0365\u0368\u0368\254\254\254\254\u0346\u0348\u0348!");
    }

    @Test
    public void test10046() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10046");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.encode("!!]]!!]]!!]]!!]]!!]]!!]]!!]]!!]]!!!!]]!!]]!!]]!!]]!!]]!!]]!!]]!!]]!!!!]]!!]]!!]]!!]]!!]]!!]]!!]]!!]]!!]]!!]]!!]]!!]]!!]]!!]]!!]]!!]]!!!!]]!!]]!!]]!!]]!!]]!!]]!!]]!!]]!!!!]]!!]]!!]]!!]]!!]]!!]]!!]]!!]]!", "vvuuvvuuvvuuvvuuvvuuvvuuvvuuvvuuvvuuvvuuvvuuvvuuvvuuvvuuvvuuvvuu\200}}`vvuuvvuuvvuuvvuuvvuuvvuuvvuuvvuuvvuuvvuuvvuuvvuuvvuuvvuuvvuuvvuu]]!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "!!]]!!]]!!]]!!]]!!]]!!]]!!]]!!]]!!!!]]!!]]!!]]!!]]!!]]!!]]!!]]!!]]!!!!]]!!]]!!]]!!]]!!]]!!]]!!]]!!]]!!]]!!]]!!]]!!]]!!]]!!]]!!]]!!]]!!!!]]!!]]!!]]!!]]!!]]!!]]!!]]!!]]!!!!]]!!]]!!]]!!]]!!]]!!]]!!]]!!]]!" + "'", str2, "!!]]!!]]!!]]!!]]!!]]!!]]!!]]!!]]!!!!]]!!]]!!]]!!]]!!]]!!]]!!]]!!]]!!!!]]!!]]!!]]!!]]!!]]!!]]!!]]!!]]!!]]!!]]!!]]!!]]!!]]!!]]!!]]!!]]!!!!]]!!]]!!]]!!]]!!]]!!]]!!]]!!]]!!!!]]!!]]!!]]!!]]!!]]!!]]!!]]!!]]!");
    }

    @Test
    public void test10047() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10047");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.encode("L\200LLLLLL\200LLLLLL\200LLLLLL\200LLLLLL\200LLLLLL\200LLLLLL\200LLLLLL\200LLLLL!", "\u0101\u0102\u0104\u0104\u0101\u0102\u0104\u0104\u0101\u0102\u0104\u0104\u0101\u0102\u0104\u0104\u0101\u0102\u0104\u0104\u0101\u0102\u0104\u0104\u0101\u0102\u0104\u0104\u0101\u0102\u0104\u0104\u0101\u0102\u0104\u0104\u0101\u0102\u0104\u0104\u0101\u0102\u0104\u0104\u0101\u0102\u0104\u0104\u0101\u0102\u0104\u0104\u0101\u0102\u0104\u0104\u0101\u0102\u0104\u0104\u0101\u0102\u0104\u0104\u0101\u0102\u0104\u0104\u0101\u0102\u0104\u0104\u0101\u0102\u0104\u0104\u0101\u0102\u0104\u0104\u0101\u0102\u0104\u0104\u0101\u0102\u0104\u0104\u0101\u0102\u0104\u0104\u0101\u0102\u0104\u0104~~~~~!!~~!!~~!!~~!!~~!!~~!!~~!!~~!!!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\u0104\200\u0104\u0104\u0104\u0104\u0104\u0104\200\u0104\u0104\u0104\u0104\u0104\u0104\200\u0104\u0104\u0104\u0104\u0104\u0104\200\u0104\u0104\u0104\u0104\u0104\u0104\200\u0104\u0104\u0104\u0104\u0104\u0104\200\u0104\u0104\u0104\u0104\u0104\u0104\200\u0104\u0104\u0104\u0104\u0104\u0104\200\u0104\u0104\u0104\u0104\u0104!" + "'", str2, "\u0104\200\u0104\u0104\u0104\u0104\u0104\u0104\200\u0104\u0104\u0104\u0104\u0104\u0104\200\u0104\u0104\u0104\u0104\u0104\u0104\200\u0104\u0104\u0104\u0104\u0104\u0104\200\u0104\u0104\u0104\u0104\u0104\u0104\200\u0104\u0104\u0104\u0104\u0104\u0104\200\u0104\u0104\u0104\u0104\u0104\u0104\200\u0104\u0104\u0104\u0104\u0104!");
    }

    @Test
    public void test10048() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10048");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.decode("`]```]``!!`]```]``!!`]```]```]```]``!!`]```]``!!`]```]``!", "!HL^^HL^^HL^^!HL^^HL^^HL^^!HL^^HL^^HL^^!HL^^HL^^HL^^!HL^^HL^^HL^^!HL^^HL^^HL^^!HL^^HL^^HL^^!HL^^HL^^HL^^!!!HL^^HL^^HL^^!HL^^HL^^HL^^!HL^^HL^^HL^^!HL^^HL^^HL^^!HL^^HL^^HL^^!HL^^HL^^HL^^!HL^^HL^^HL^^!HL^^HL^^HL^^!!!HL^^HL^^HL^^!HL^^HL^^HL^^!HL^^HL^^HL^^!HL^^HL^^HL^^!HL^^HL^^HL^^!HL^^HL^^HL^^!HL^^HL^^HL^^!HL^^HL^^HL^^!HL^^HL^^HL^^!HL^^HL^^HL^^!HL^^HL^^HL^^!HL^^HL^^HL^^!HL^^HL^^HL^^!HL^^HL^^HL^^!HL^^HL^^HL^^!HL^^HL^^HL^^!!!HL^^HL^^HL^^!HL^^HL^^HL^^!HL^^HL^^HL^^!HL^^HL^^HL^^!HL^^HL^^HL^^!HL^^HL^^HL^^!HL^^HL^^HL^^!HL^^HL^^HL^^!!!HL^^HL^^HL^^!HL^^HL^^HL^^!HL^^HL^^HL^^!HL^^HL^^HL^^!HL^^HL^^HL^^!HL^^HL^^HL^^!HL^^HL^^HL^^!HL^^HL^^HL^^!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "`]```]``!!`]```]``!!`]```]```]```]``!!`]```]``!!`]```]``!" + "'", str2, "`]```]``!!`]```]``!!`]```]```]```]``!!`]```]``!!`]```]``!");
    }

    @Test
    public void test10049() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10049");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.encode("F!~~F!~~F!~~F!~~F!~~F!~~F!~~F!~~nullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullF!~~F!~~F!~~F!~~F!~~F!~~F!~~F!~~nullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull!", "L!UUL!UUL!UUL!UUL!UUL!UUL!UUL!UU!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "!!~~!!~~!!~~!!~~!!~~!!~~!!~~!!~~!luu!luu!luu!luu!luu!luu!luu!luu!luu!luu!luu!luu!luu!luu!luu!luu!luu!luu!luu!luu!luu!luu!luu!luu!luu!luu!luu!luu!luu!luu!luu!luu!!~~!!~~!!~~!!~~!!~~!!~~!!~~!!~~!luu!luu!luu!luu!luu!luu!luu!luu!luu!luu!luu!luu!luu!luu!luu!luu!luu!luu!luu!luu!luu!luu!luu!luu!luu!luu!luu!luu!luu!luu!luu!luu!" + "'", str2, "!!~~!!~~!!~~!!~~!!~~!!~~!!~~!!~~!luu!luu!luu!luu!luu!luu!luu!luu!luu!luu!luu!luu!luu!luu!luu!luu!luu!luu!luu!luu!luu!luu!luu!luu!luu!luu!luu!luu!luu!luu!luu!luu!!~~!!~~!!~~!!~~!!~~!!~~!!~~!!~~!luu!luu!luu!luu!luu!luu!luu!luu!luu!luu!luu!luu!luu!luu!luu!luu!luu!luu!luu!luu!luu!luu!luu!luu!luu!luu!luu!luu!luu!luu!luu!luu!");
    }

    @Test
    public void test10050() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10050");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.decode("\u0162\u0162\u0162\u0162\u0162\u0162\u0162\u0162\u0162\u0162\u0162\u0162\u0162\u0162\u0162\u0162\u0162\u0162\u0162\u0162\u0162\u0162\u0162\u0162\u0162\u0162\u0162\u0162\u0162\u0162\u0162\u0162\u0162\u0162\u0162\u0162\u0162\u0162\u0162\u0162\u0162\u0162\u0162\u0162\u0162\u0162\u0162\u0162\u0162\u0162\u0162\u0162\u0162\u0162\u0162\u0162\u0162\u0162\u0162\u0162\u0162\u0162\u0162\u0162\u0162\u0162\u0162\u0162\u0162\u0162\u0162\u0162\u0162\u0162\u0162\u0162\u0162\u0162\u0162\u0162\u0162\u0162\u0162\u0162\u0162\u0162\u0162\u0162\u0162\u0162\u0162\u0162\u0162\u0162\u0162\u0162!", "\u02f7\200\200\u02f7\200\200\u02f7\200\200\u02f7\200\200\u02fa\200}}}\200}}}\200\u02fa\200}}}\200}}}\200\u02fa\200}}}\200}}}\200\u02fa\200}}}\200}}}\200\u02f7\200\200\u02f7\200\200\u02f7\200\200\u02f7\200\200\u02fa\200}}}\200}}}\200\u02fa\200}}}\200}}}\200}}}!");
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!" + "'", str2, "!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!");
    }

    @Test
    public void test10051() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10051");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.decode("UNLLUNLLNNUNLLUNLLNNUNLLUNLLNNUNLLUNLLNNUNLLUNLLNNUNLLUNLLNNUNLLUNLLNNUNLLUNLLNN!", "}~\200\200}~\200\200JJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ}~\200\200}~\200\200JJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "nullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull!" + "'", str2, "nullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull!");
    }

    @Test
    public void test10052() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10052");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.encode("\u0346\u0348\u0348\u0348\333\334\336\336\333\334\336\336\333\334\336\336\333\334\336\336\333\334\336\336\333\334\336\336\333\334\336\336\333\334\336\336\333\334\336\336\333\334\336\336\333\334\336\336\333\334\336\336\333\334\336\336\333\334\336\336\333\334\336\336\333\334\336\336\u0348\u0346\u0346!", "\253\253nullnull\253\253nullnull}}\253\253nullnull\253\253nullnull}}!");
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\u0346\u0348\u0348\u0348\u0348\u0346\u0346!" + "'", str2, "\u0346\u0348\u0348\u0348\u0348\u0346\u0346!");
    }

    @Test
    public void test10053() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10053");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.decode("!!\276\276!!\276\276!!!!\276\276!!\276\276!!!!\276\276!!\276\276!!\276\276!!\276\276!!!!\276\276!!\276\276!!!!\276\276!!\276\276!", "AA]]AA]]nullnullAA]]AA]]nullnull!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "!!\276\276!!\276\276!!!!\276\276!!\276\276!!!!\276\276!!\276\276!!\276\276!!\276\276!!!!\276\276!!\276\276!!!!\276\276!!\276\276!" + "'", str2, "!!\276\276!!\276\276!!!!\276\276!!\276\276!!!!\276\276!!\276\276!!\276\276!!\276\276!!!!\276\276!!\276\276!!!!\276\276!!\276\276!");
    }

    @Test
    public void test10054() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10054");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.encode("", "\u02b8\u02b8\u02b8\u02b8\u02b8\u02b8\u02b8\u02b8\u02b8\u02b8\u02b8\u02b8\u02b8\u02b8\u02b8\u02b8\u02b8\u02b8\u02b8\u02b8\u02b8\u02b8\u02b8\u02b8\u02b8\u02b8\u02b8\u02b8\u02b8\u02b8\u02b8\u02b8\u02b8\u02b8\u02b8\u02b8\u02b8\u02b8\u02b8\u02b8\u02b8\u02b8\u02b8\u02b8\u02b8\u02b8\u02b8\u02b8\u02b8\u02b8\u02b8\u02b8\u02b8\u02b8\u02b8\u02b8\u02b8\u02b8\u02b8\u02b8\u02b8\u02b8\u02b8\u02b8\u02b8\u02b8\u02b8\u02b8\u02b8\u02b8\u02b8\u02b8\u02b8\u02b8\u02b8\u02b8\u02b8\u02b8\u02b8\u02b8\u02b8\u02b8\u02b8\u02b8\u02b8\u02b8\u02b8\u02b8\u02b8\u02b8\u02b8\u02b8\u02b8\u02b8\u02b8\u02b8\u02b8\u02b8\u02b8\u02b8\u02b8\u02b8\u02b8\u02b8\u02b8\u02b8\u02b8\u02b8\u02b8\u02b8\u02b8\u02b8\u02b8\u02b8\u02b8\u02b8\u02b8\u02b8\u02b8\u02b8\u02b8\u02b8\u02b8\u02b8\u02b8\u02b8\u02b8\u02b8nullnull!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
    }

    @Test
    public void test10055() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10055");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.decode("LNLLLNLLLNLLLNLLLNLLLNLLLNLLLNLLLNLLLNLLLNLLLNLLLNLLLNLLLNLLLNLLLNLLLNLLLNLLLNLLLNLLLNLLLNLLLNLLLNLLLNLLLNLLLNLLLNLLLNLLLNLLLNLL!", "`NLLLNLLLNLLLNLLLNLLLNLLLNLLLNLLLNLLLNLLLNLLLNLLL`NLLLNLLLNLLLNLLLNLLLNLLLNLLLNLLLNLLLNLLLNLLLNLLL!");
        org.junit.Assert.assertEquals("'" + strstr
    }

    @Test
    public void test10056() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10056");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.decode("\u0366\u0365\u0368\u0368\253\253!!\253\253!!\200\200\u0346\u0348\u0348!", "\u0348\u0348~~\200\200\200\u0348\u0348~~\200\200\200\u0348\u0348~~\200\200\200\u0348\u0348~~\200\200\200\u0348\u0348~~\200\200\200\u0348\u0348~~\200\200\200\u0348\u0348~~\200\200\200\u0348\u0348~~\200\200\200\u0348\u0348~~\200\200\200\u0348\u0348~~\200\200\200\u0348\u0348~~\200\200\200\u0348\u0348~~\200\200\200\u0348\u0348~~\200\200\200\u0348\u0348~~\200\200\200\u0348\u0348~~\200\200\200\u0348\u0348~~\200\200\200]]]]!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\u0366\u0365\u0368\u0368\253\253!!\253\253!!\200\200\u0346\u0348\u0348!" + "'", str2, "\u0366\u0365\u0368\u0368\253\253!!\253\253!!\200\200\u0346\u0348\u0348!");
    }

    @Test
    public void test10057() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10057");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.encode("", "\260\256\253\253\260\256\253\253\260\256\253\253\260\256\253\253nullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull\253\253nullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull\253\253nullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull\253\253nullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull\253\253\260\256\253\253\260\256\253\253\260\256\253\253\260\256\253\253nullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull\253\253nullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull\253\253!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
    }

    @Test
    public void test10058() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10058");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.encode("n\253uun\253\u035e\u035en\253uun\253\u035e\u035e!!!!n\253uun\253\u035e\u035en\253uun\253\u035e\u035e!", "LnullLLLnullLL!!LnullLLLnullLL!!LnullLLLnullLLLnullLLLnullLL!!LnullLLLnullLL!!LnullLLLnullLL!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "L\253LLL\253\u035e\u035eL\253LLL\253\u035e\u035e!!!!L\253LLL\253\u035e\u035eL\253LLL\253\u035e\u035e!" + "'", str2, "L\253LLL\253\u035e\u035eL\253LLL\253\u035e\u035e!!!!L\253LLL\253\u035e\u035eL\253LLL\253\u035e\u035e!");
    }

    @Test
    public void test10059() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10059");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.decode("N~\200\200N~\200\200~N\200\200~N\200\200N~\200\200N~\200\200~N\200\200~N\200\200N~\200\200N~\200\200~N\200\200~N\200\200N~\200\200N~\200\200~N\200\200~N\200\200N~\200\200N~\200\200~N\200\200~N\200\200N~\200\200N~\200\200~N\200\200~N\200\200N~\200\200N~\200\200~N\200\200~N\200\200N~\200\200N~\200\200~N\200\200~N\200\200!", "\u0368\u0368\u0368\u0368\u0368\u0368\u0368\u0368\u0368\u0368\u0368\u0368\u0368\u0368\u0368\u0368\u0368\u0368\u0368\u0368\u0368\u0368\u0368\u0368\u0368\u0368\u0368\u0368\u0368\u0368\u0368\u0368\u0368\u0368\u0368\u0368\u0368\u0368\u0368\u0368\u0368\u0368\u0368\u0368\u0368\u0368\u0368\u0368\u0368\u0368\u0368\u0368\u0368\u0368\u0368\u0368\u0368\u0368\u0368\u0368\u0368\u0368\u0368\u0368\u0368\u0368\u0368\u0368\u0368\u0368\u0368\u0368\u0368\u0368\u0368\u0368\u0368\u0368\u0368\u0368\u0368\u0368\u0368\u0368\u0368\u0368\u0368\u0368\u0368\u0368\u0368\u0368\u0368\u0368\u0368\u0368XXXXXXXX!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "null~\200\200null~\200\200~null\200\200~null\200\200null~\200\200null~\200\200~null\200\200~null\200\200null~\200\200null~\200\200~null\200\200~null\200\200null~\200\200null~\200\200~null\200\200~null\200\200null~\200\200null~\200\200~null\200\200~null\200\200null~\200\200null~\200\200~null\200\200~null\200\200null~\200\200null~\200\200~null\200\200~null\200\200null~\200\200null~\200\200~null\200\200~null\200\200!" + "'", str2, "null~\200\200null~\200\200~null\200\200~null\200\200null~\200\200null~\200\200~null\200\200~null\200\200null~\200\200null~\200\200~null\200\200~null\200\200null~\200\200null~\200\200~null\200\200~null\200\200null~\200\200null~\200\200~null\200\200~null\200\200null~\200\200null~\200\200~null\200\200~null\200\200null~\200\200null~\200\200~null\200\200~null\200\200null~\200\200null~\200\200~null\200\200~null\200\200!");
    }

    @Test
    public void test10060() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10060");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.decode("\220!\216\216!\220\220\216\216\220\220\216\216\220!\216\216!\220\220\216\216\220\220\216\216\220!\216\216!\220\220\216\216\220\220\216\216\220!\216\216!\220\220\216\216\220\220\216\216\220!\216\216!\220\220\216\216\220\220\216\216\220!\216\216!\220\220\216\216\220\220\216\216\220!\216\216!\220\220\216\216\220\220\216\216\220!\216\216!\220\220\216\216\220\220\216\216!", "uu!!uu!!uu!!uu!!uu!!uu!!uu!!uu!!!!uu!!uu!!uu!!uu!!uu!!uu!!uu!!uu!!!!!!uu!!uu!!uu!!uu!!uu!!uu!!uu!!uu!!!!uu!!uu!!uu!!uu!!uu!!uu!!uu!!uu!!!!!!uu!!uu!!uu!!uu!!uu!!uu!!uu!!uu!!!!uu!!uu!!uu!!uu!!uu!!uu!!uu!!uu!!!!!!uu!!uu!!uu!!uu!!uu!!uu!!uu!!uu!!!!uu!!uu!!uu!!uu!!uu!!uu!!uu!!uu!!!!!!uu!!uu!!uu!!uu!!uu!!uu!!uu!!uu!!!!uu!!uu!!uu!!uu!!uu!!uu!!uu!!uu!!!!!!uu!!uu!!uu!!uu!!uu!!uu!!uu!!uu!!!!uu!!uu!!uu!!uu!!uu!!uu!!uu!!uu!!!!!!uu!!uu!!uu!!uu!!uu!!uu!!uu!!uu!!!!uu!!uu!!uu!!uu!!uu!!uu!!uu!!uu!!!!!!uu!!uu!!uu!!uu!!uu!!uu!!uu!!uu!!!!uu!!uu!!uu!!uu!!uu!!uu!!uu!!uu!!!!!!!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\220!\216\216!\220\220\216\216\220\220\216\216\220!\216\216!\220\220\216\216\220\220\216\216\220!\216\216!\220\220\216\216\220\220\216\216\220!\216\216!\220\220\216\216\220\220\216\216\220!\216\216!\220\220\216\216\220\220\216\216\220!\216\216!\220\220\216\216\220\220\216\216\220!\216\216!\220\220\216\216\220\220\216\216\220!\216\216!\220\220\216\216\220\220\216\216!" + "'", str2, "\220!\216\216!\220\220\216\216\220\220\216\216\220!\216\216!\220\220\216\216\220\220\216\216\220!\216\216!\220\220\216\216\220\220\216\216\220!\216\216!\220\220\216\216\220\220\216\216\220!\216\216!\220\220\216\216\220\220\216\216\220!\216\216!\220\220\216\216\220\220\216\216\220!\216\216!\220\220\216\216\220\220\216\216\220!\216\216!\220\220\216\216\220\220\216\216!");
    }

    @Test
    public void test10061() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10061");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.encode("null\201\204\204null\201\204\204null\201\204\204null\201\204\204null\201\204\204null\201\204\204null\201\204\204null\201\204\204null\201\204\204null\201\204\204null\201\204\204null\201\204\204null\201\204\204null\201\204\204null\201\204\204null\201\204\204null\201\204\204null\201\204\204null\201\204\204null\201\204\204null\201\204\204null\201\204\204null\201\204\204null\201\204\204null\201\204\204null\201\204\204null\201\204\204null\201\204\204null\201\204\204null\201\204\204null\201\204\204null\201\204\204!", "]]!!]]!!]]!!]]!!!]]!!]]!!]]!!]]!!]]!!]]!!]]!!]]!!]]!!]]!!]]!!]]!!!]]!!]]!!]]!!]]!!]]!!]]!!]]!!]]!!]]!!]]!!]]!!]]!!!]]!!]]!!]]!!]]!!]]!!]]!!]]!!]]!!]]!!]]!!]]!!]]!!!]]!!]]!!]]!!]]!!]]!!]]!!]]!!]]!!]]!!]]!!]]!!]]!!!]]!!]]!!]]!!]]!!]]!!]]!!]]!!]]!!]]!!]]!!]]!!]]!!!]]!!]]!!]]!!]]!!]]!!]]!!]]!!]]!!]]!!]]!!]]!!]]!!!]]!!]]!!]]!!]]!!]]!!]]!!]]!!]]!!]]!!]]!!]]!!]]!!!]]!!]]!!]]!!]]!!]]!!]]!!]]!!]]!!!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "]!!!\201\204\204]!!!\201\204\204]!!!\201\204\204]!!!\201\204\204]!!!\201\204\204]!!!\201\204\204]!!!\201\204\204]!!!\201\204\204]!!!\201\204\204]!!!\201\204\204]!!!\201\204\204]!!!\201\204\204]!!!\201\204\204]!!!\201\204\204]!!!\201\204\204]!!!\201\204\204]!!!\201\204\204]!!!\201\204\204]!!!\201\204\204]!!!\201\204\204]!!!\201\204\204]!!!\201\204\204]!!!\201\204\204]!!!\201\204\204]!!!\201\204\204]!!!\201\204\204]!!!\201\204\204]!!!\201\204\204]!!!\201\204\204]!!!\201\204\204]!!!\201\204\204]!!!\201\204\204!" + "'", str
    }

    @Test
    public void test10062() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10062");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.decode("!LLL!LLL!LLL!LLL!LLL!LLL!LLL!LLL!", "HHFFH~~HHFFH~~HHFFH~~HHFFH~~HHFFH~~HHFFH~~HHFFH~~HHFFH~~!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnull!" + "'", str2, "!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnull!");
    }

    @Test
    public void test10063() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10063");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.decode("", "ijll\230\226\226ijll\230\226\226ijll\230\226\226ijll\230\226\226ijll\230\226\226ijll\230\226\226ijll\230\226\226ijll\230\226\226!!ijll\230\226\226ijll\230\226\226ijll\230\226\226ijll\230\226\226ijll\230\226\226ijll\230\226\226ijll\230\226\226ijll\230\226\226!!!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
    }

    @Test
    public void test10064() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10064");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.decode("", "nullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull!!nullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull!!nullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull!!nullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull!!nullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
    }

    @Test
    public void test10065() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10065");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.encode("\u0346\u0348\u0348\u0348}~\200\200}~\200\200LLUULLUULLUULLUU\226\227\231\231\226\227\231\231\226\227\231\231LLUULLUULLUULLUU\226\227\231\231\226\227\231\231\226\227\231\231}~\200\200}~\200\200LLUULLUULLUULLUU\226\227\231\231\226\227\231\231\226\227\231\231LLUULLUULLUULLUU\226\227\231\231\226\227\231\231\226\227\231\231}~\200\200}~\200\200LLUULLUULLUULLUU\226\227\231\231\226\227\231\231\226\227\231\231LLUULLUULLUULLUU\226\227\231\231\226\227\231\231\226\227\231\231}~\200\200}~\200\200LLUULLUULLUULLUU\226\227\231\231\226\227\231\231\226\227\231\231LLUULLUULLUULLUU\226\227\231\231\226\227\231\231\226\227\231\231\u0348\u0346\u0346!", "UULLUULLUULLUULLUULLUULLUULLUULL!!UULLUULLUULLUULLUULLUULLUULLUULL!!UULLUULLUULLUULLUULLUULLUULLUULLUULLUULLUULLUULLUULLUULLUULLUULL!!UULLUULLUULLUULLUULLUULLUULLUULL!!UULLUULLUULLUULLUULLUULLUULLUULL!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\u0346\u0348\u0348\u0348}~\200\200}~\200\200LLUULLUULLUULLUU\226\227\231\231\226\227\231\231\226\227\231\231LLUULLUULLUULLUU\226\227\231\231\226\227\231\231\226\227\231\231}~\200\200}~\200\200LLUULLUULLUULLUU\226\227\231\231\226\227\231\231\226\227\231\231LLUULLUULLUULLUU\226\227\231\231\226\227\231\231\226\227\231\231}~\200\200}~\200\200LLUULLUULLUULLUU\226\227\231\231\226\227\231\231\226\227\231\231LLUULLUULLUULLUU\226\227\231\231\226\227\231\231\226\227\231\231}~\200\200}~\200\200LLUULLUULLUULLUU\226\227\231\231\226\227\231\231\226\227\231\231LLUULLUULLUULLUU\226\227\231\231\226\227\231\231\226\227\231\231\u0348\u0346\u0346!" + "'", str2, "\u0346\u0348\u0348\u0348}~\200\200}~\200\200LLUULLUULLUULLUU\226\227\231\231\226\227\231\231\226\227\231\231LLUULLUULLUULLUU\226\227\231\231\226\227\231\231\226\227\231\231}~\200\200}~\200\200LLUULLUULLUULLUU\226\227\231\231\226\227\231\231\226\227\231\231LLUULLUULLUULLUU\226\227\231\231\226\227\231\231\226\227\231\231}~\200\200}~\200\200LLUULLUULLUULLUU\226\227\231\231\226\227\231\231\226\227\231\231LLUULLUULLUULLUU\226\227\231\231\226\227\231\231\226\227\231\231}~\200\200}~\200\200LLUULLUULLUULLUU\226\227\231\231\226\227\231\231\226\227\231\231LLUULLUULLUULLUU\226\227\231\231\226\227\231\231\226\227\231\231\u0348\u0346\u0346!");
    }

    @Test
    public void test10066() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10066");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.decode("hfhhHHHhfhhHHHHHhfhhHHHhfhhHHHHHhfhhHHHhfhhHHHHHhfhhHHHhfhhHHHHHhfhhHHHhfhhHHHHHhfhhHHHhfhhHHHHHhfhhHHHhfhhHHHHHhfhhHHHhfhhHHHHH!", "!!\256\215\216\230\230!\215\216\230\230\215\216\230\230\254\254\256\215\216\230\230!\215\216\230\230\215\216\230\230\254\254!!\256\215\216\230\230!\215\216\230\230\215\216\230\230\254\254\256\215\216\230\230!\215\216\230\230\215\216\230\230\254\254!!\256\215\216\230\230!\215\216\230\230\215\216\230\230\254\254\256\215\216\230\230!\215\216\230\230\215\216\230\230\254\254!!\256\215\216\230\230!\215\216\230\230\215\216\230\230\254\254\256\215\216\230\230!\215\216\230\230\215\216\230\230\254\254!!\256\215\216\230\230!\215\216\230\230\215\216\230\230\254\254\256\215\216\230\230!\215\216\230\230\215\216\230\230\254\254!!\256\215\216\230\230!\215\216\230\230\215\216\230\230\254\254\256\215\216\230\230!\215\216\230\230\215\216\230\230\254\254!!\256\215\216\230\230!\215\216\230\230\215\216\230\230\254\254\256\215\216\230\230!\215\216\230\230\215\216\230\230\254\254!!\256\215\216\230\230!\215\216\230\230\215\216\230\230\254\254\256\215\216\230\230!\215\216\230\230\215\216\230\230\254\254!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "nullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull!" + "'", str2, "nullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull!");
    }

    @Test
    public void test10067() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10067");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.encode("]PRRRPRRR!!PRRRPRRR!!PRRRPRRR!!PRRRPRRR!!PRRRPRRR!!]]PRRRPRRR!!PRRRPRRR!!]]PRRRPRRR!!PRRRPRRR!!]]PRRRPRRR!!PRRRPRRR!!]]]PRRRPRRR!!PRRRPRRR!!PRRRPRRR!!PRRRPRRR!!PRRRPRRR!!]]PRRRPRRR!!PRRRPRRR!!]]!", "");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "]nullnullnullnullnullnullnullnull!!nullnullnullnullnullnullnullnull!!nullnullnullnullnullnullnullnull!!nullnullnullnullnullnullnullnull!!nullnullnullnullnullnullnullnull!!]]nullnullnullnullnullnullnullnull!!nullnullnullnullnullnullnullnull!!]]nullnullnullnullnullnullnullnull!!nullnullnullnullnullnullnullnull!!]]nullnullnullnullnullnullnullnull!!nullnullnullnullnullnullnullnull!!]]]nullnullnullnullnullnullnullnull!!nullnullnullnullnullnullnullnull!!nullnullnullnullnullnullnullnull!!nullnullnullnullnullnullnullnull!!nullnullnullnullnullnullnullnull!!]]nullnullnullnullnullnullnullnull!!nullnullnullnullnullnullnullnull!!]]!" + "'", str2, "]nullnullnullnullnullnullnullnull!!nullnullnullnullnullnullnullnull!!nullnullnullnullnullnullnullnull!!nullnullnullnullnullnullnullnull!!nullnullnullnullnullnullnullnull!!]]nullnullnullnullnullnullnullnull!!nullnullnullnullnullnullnullnull!!]]nullnullnullnullnullnullnullnull!!nullnullnullnullnullnullnullnull!!]]nullnullnullnullnullnullnullnull!!nullnullnullnullnullnullnullnull!!]]]nullnullnullnullnullnullnullnull!!nullnullnullnullnullnullnullnull!!nullnullnullnullnullnullnullnull!!nullnullnullnullnullnullnullnull!!nullnullnullnullnullnullnullnull!!]]nullnullnullnullnullnullnullnull!!nullnullnullnullnullnullnullnull!!]]!");
    }

    @Test
    public void test10068() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10068");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.encode("\u0346\u0348\u0348\u0348}~\200\200}~\200\200nullnullnullnull\226\227\231\231\226\227\231\231\226\227\231\231nullnullnullnull\226\227\231\231\226\227\231\231\226\227\231\231}~\200\200}~\200\200nullnullnullnull\226\227\231\231\226\227\231\231\226\227\231\231nullnullnullnull\226\227\231\231\226\227\231\231\226\227\231\231}~\200\200}~\200\200nullnullnullnull\226\227\231\231\226\227\231\231\226\227\231\231nullnullnullnull\226\227\231\231\226\227\231\231\226\227\231\231}~\200\200}~\200\200nullnullnullnull\226\227\231\231\226\227\231\231\226\227\231\231nullnullnullnull\226\227\231\231\226\227\231\231\226\227\231\231\u0348\u0346\u0346!", "FEHHFEHH!!FEHHFEHH!!FEHHFEHH!!FEHHFEHH!!FEHHFEHH!!FEHHFEHH!!FEHHFEHH!!FEHHFEHH!!FEHHFEHH!!FEHHFEHH!!FEHHFEHH!!FEHHFEHH!!FEHHFEHH!!FEHHFEHH!!FEHHFEHH!!FEHHFEHH!!FEHHFEHH!!FEHHFEHH!!FEHHFEHH!!FEHHFEHH!!FEHHFEHH!!FEHHFEHH!!FEHHFEHH!!FEHHFEHH!!FEHHFEHH!!FEHHFEHH!!FEHHFEHH!!FEHHFEHH!!FEHHFEHH!!FEHHFEHH!!FEHHFEHH!!FEHHFEHH!!!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\u0346\u0348\u0348\u0348}~\200\200}~\200\200EHHHEHHHEHHHEHHH\226\227\231\231\226\227\231\231\226\227\231\231EHHHEHHHEHHHEHHH\226\227\231\231\226\227\231\231\226\227\231\231}~\200\200}~\200\200EHHHEHHHEHHHEHHH\226\227\231\231\226\227\231\231\226\227\231\231EHHHEHHHEHHHEHHH\226\227\231\231\226\227\231\231\226\227\231\231}~\200\200}~\200\200EHHHEHHHEHHHEHHH\226\227\231\231\226\227\231\231\226\227\231\231EHHHEHHHEHHHEHHH\226\227\231\231\226\227\231\231\226\227\231\231}~\200\200}~\200\200EHHHEHHHEHHHEHHH\226\227\231\231\226\227\231\231\226\227\231\231EHHHEHHHEHHHEHHH\226\227\231\231\226\227\231\231\226\227\231\231\u0348\u0346\u0346!" + "'", str2, "\u0346\u0348\u0348\u0348}~\200\200}~\200\200EHHHEHHHEHHHEHHH\226\227\231\231\226\227\231\231\226\227\231\231EHHHEHHHEHHHEHHH\226\227\231\231\226\227\231\231\226\227\231\231}~\200\200}~\200\200EHHHEHHHEHHHEHHH\226\227\231\231\226\227\231\231\226\227\231\231EHHHEHHHEHHHEHHH\226\227\231\231\226\227\231\231\226\227\231\231}~\200\200}~\200\200EHHHEHHHEHHHEHHH\226\227\231\231\226\227\231\231\226\227\231\231EHHHEHHHEHHHEHHH\226\227\231\231\226\227\231\231\226\227\231\231}~\200\200}~\200\200EHHHEHHHEHHHEHHH\226\227\231\231\226\227\231\231\226\227\231\231EHHHEHHHEHHHEHHH\226\227\231\231\226\227\231\231\226\227\231\231\u0348\u0346\u0346!");
    }

    @Test
    public void test10069() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10069");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.encode("\u0140\u0140\u0140\u0140\u0140\u0140\u0140\u0140\u0140\u0140\u0140\u0140\u0140\u0140\u0140\u0140\u0140\u0140\u0140\u0140\u0140\u0140\u0140\u0140\u0140\u0140\u0140\u0140\u0140\u0140\u0140\u0140\u0140\u0140\u0140\u0140\u0140\u0140\u0140\u0140\u0140\u0140\u0140\u0140\u0140\u0140\u0140\u0140\u0140\u0140\u0140\u0140\u0140\u0140\u0140\u0140\u0140\u0140\u0140\u0140\u0140\u0140\u0140\u0140!", "\u03a8\u03a7\u03a7\u03a8\u03a7\u03a7\u03a8\u03a7\u03a7\u03a8\u03a7\u03a7\u03a8\u03a7\u03a7\u03a8\u03a7\u03a7\u03a8\u03a7\u03a7\u03a8\u03a7\u03a7\u03a8\u03a7\u03a7\u03a8\u03a7\u03a7\u03a8\u03a7\u03a7\u03a8\u03a7\u03a7\u03a8\u03a7\u03a7\u03a8\u03a7\u03a7\u03a8\u03a7\u03a7\u03a8\u03a7\u03a7\u03a8\u03a7\u03a7\u03a8\u03a7\u03a7\u03a8\u03a7\u03a7\u03a8\u03a7\u03a7\u03a8\u03a7\u03a7\u03a8\u03a7\u03a7\u03a8\u03a7\u03a7\u03a8\u03a7\u03a7\u03a8\u03a7\u03a7\u03a8\u03a7\u03a7\u03a8\u03a7\u03a7\u03a8\u03a7\u03a7\u03a8\u03a7\u03a7\u03a8\u03a7\u03a7\u03a8\u03a7\u03a7\u03a8\u03a7\u03a7\u03a8\u03a7\u03a7\u03a8\u03a7\u03a7\u03a8\u03a7\u03a7\u03a8\u03a7\u03a7\u03a8\u03a7\u03a7\u03a8\u03a7\u03a7\u03a8\u03a7\u03a7\u03a8\u03a7\u03a7\u03a8\u03a7\u03a7\u03a8\u03a7\u03a7\u03a8\u03a7\u03a7\u03a8\u03a7\u03a7\u03a8\u03a7\u03a7\u03a8\u03a7\u03a7\u03a8\u03a7\u03a7\u03a8\u03a7\u03a7!");
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\u03a7\u03a7\u03a7\u03a7\u03a7\u03a7\u03a7\u03a7\u03a7\u03a7\u03a7\u03a7\u03a7\u03a7\u03a7\u03a7\u03a7\u03a7\u03a7\u03a7\u03a7\u03a7\u03a7\u03a7\u03a7\u03a7\u03a7\u03a7\u03a7\u03a7\u03a7\u03a7\u03a7\u03a7\u03a7\u03a7\u03a7\u03a7\u03a7\u03a7\u03a7\u03a7\u03a7\u03a7\u03a7\u03a7\u03a7\u03a7\u03a7\u03a7\u03a7\u03a7\u03a7\u03a7\u03a7\u03a7\u03a7\u03a7\u03a7\u03a7\u03a7\u03a7\u03a7\u03a7\u03a7\u03a7\u03a7\u03a7\u03a7\u03a7\u03a7\u03a7\u03a7\u03a7\u03a7\u03a7\u03a7\u03a7\u03a7\u03a7\u03a7\u03a7\u03a7\u03a7\u03a7\u03a7\u03a7\u03a7\u03a7\u03a7\u03a7\u03a7\u03a7\u03a7\u03a7\u03a7\u03a7\u03a7\u03a7\u03a7\u03a7\u03a7\u03a7\u03a7\u03a7\u03a7\u03a7\u03a7\u03a7\u03a7\u03a7\u03a7\u03a7\u03a7\u03a7\u03a7\u03a7\u03a7\u03a7\u03a7\u03a7\u03a7\u03a7\u03a7\u03a7\u03a7\u03a7\u03a7!!nullnull!" + "'", str2, "\u03a7\u03a7\u03a7\u03a7\u03a7\u03a7\u03a7\u03a7\u03a7\u03a7\u03a7\u03a7\u03a7\u03a7\u03a7\u03a7\u03a7\u03a7\u03a7\u03a7\u03a7\u03a7\u03a7\u03a7\u03a7\u03a7\u03a7\u03a7\u03a7\u03a7\u03a7\u03a7\u03a7\u03a7\u03a7\u03a7\u03a7\u03a7\u03a7\u03a7\u03a7\u03a7\u03a7\u03a7\u03a7\u03a7\u03a7\u03a7\u03a7\u03a7\u03a7\u03a7\u03a7\u03a7\u03a7\u03a7\u03a7\u03a7\u03a7\u03a7\u03a7\u03a7\u03a7\u03a7\u03a7\u03a7\u03a7\u03a7\u03a7\u03a7\u03a7\u03a7\u03a7\u03a7\u03a7\u03a7\u03a7\u03a7\u03a7\u03a7\u03a7\u03a7\u03a7\u03a7\u03a7\u03a7\u03a7\u03a7\u03a7\u03a7\u03a7\u03a7\u03a7\u03a7\u03a7\u03a7\u03a7\u03a7\u03a7\u03a7\u03a7\u03a7\u03a7\u03a7\u03a7\u03a7\u03a7\u03a7\u03a7\u03a7\u03a7\u03a7\u03a7\u03a7\u03a7\u03a7\u03a7\u03a7\u03a7\u03a7\u03a7\u03a7\u03a7\u03a7\u03a7\u03a7\u03a7\u03a7!!nullnull!");
    }

    @Test
    public void test10070() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10070");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.decode("\u0366\u0365\u0368\u0368\236\240\240\240\u0346\u0348\u0348!", "nullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull!!nullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull!!nullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull!!nullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull!!nullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull!!nullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull!!nullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull!!nullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull!!!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\u0366\u0365\u0368\u0368\236\240\240\240\u0346\u0348\u0348!" + "'", str2, "\u0366\u0365\u0368\u0368\236\240\240\240\u0346\u0348\u0348!");
    }

    @Test
    public void test10071() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10071");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.encode("nullnull!!\200~~nullnull!!\200~~nullnull!!nullnull!!nullnull!!\200~~nullnull!!\200~~nullnull!!nullnull!!!!nullnull!!\200~~nullnull!!\200~~nullnull!!nullnull!!nullnull!!\200~~nullnull!!\200~~nullnull!!nullnull!!!!nullnull!!\200~~nullnull!!\200~~nullnull!!nullnull!!nullnull!!\200~~nullnull!!\200~~nullnull!!nullnull!!nullnull!!\200~~nullnull!!\200~~nullnull!!nullnull!!nullnull!!\200~~nullnull!!\200~~nullnull!!nullnull!!!!nullnull!!\200~~nullnull!!\200~~nullnull!!nullnull!!nullnull!!\200~~nullnull!!\200~~nullnull!!nullnull!!!!nullnull!!\200~~nullnull!!\200~~nullnull!!nullnull!!nullnull!!\200~~nullnull!!\200~~nullnull!!nullnull!!!", "\u012a\u012a\u012a\u012a\u012a\u012a\u012a\u012a\u012a\u012a\u012a\u012a\u012a\u012a\u012a\u012a\u012a\u012a\u012a\u012a\u012a\u012a\u012a\u012a\u012a\u012a\u012a\u012a\u012a\u012a\u012a\u012a\u012a\u012a\u012a\u012a\u012a\u012a\u012a\u012a\u012a\u012a\u012a\u012a\u012a\u012a\u012a\u012a\u012a\u012a\u012a\u012a\u012a\u012a\u012a\u012a\u012a\u012a\u012a\u012a\u012a\u012a\u012a\u012a\u012a\u012a\u012a\u012a\u012a\u012a\u012a\u012a\u012a\u012a\u012a\u012a\u012a\u012a\u012a\u012a\u012a\u012a\u012a\u012a\u012a\u012a\u012a\u012a\u012a\u012a\u012a\u012a\u012a\u012a\u012a\u012anullnull!!!");
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\u012a\u012aL!!!!\200\u012a\u012aL!!!!\200\u012a\u012a\u012a\u012a\u012a\u012aL!!!!\200\u012a\u012aL!!!!\200\u012a\u012a\u012a\u012a\u012a\u012aL!!!!\200\u012a\u012aL!!!!\200\u012a\u012a\u012a\u012a\u012a\u012aL!!!!\200\u012a\u012aL!!!!\200\u012a\u012a\u012a\u012a\u012a\u012aL!!!!\200\u012a\u012aL!!!!\200\u012a\u012a\u012a\u012a\u012a\u012aL!!!!\200\u012a\u012aL!!!!\200\u012a\u012a\u012a\u012a\u012a\u012aL!!!!\200\u012a\u012aL!!!!\200\u012a\u012a\u012a\u012a\u012a\u012aL!!!!\200\u012a\u012aL!!!!\200\u012a\u012a\u012a\u012a\u012a\u012aL!!!!\200\u012a\u012aL!!!!\200\u012a\u012a\u012a\u012a\u012a\u012aL!!!!\200\u012a\u012aL!!!!\200\u012a\u012a\u012a\u012a\u012a\u012aL!!!!\200\u012a\u012aL!!!!\200\u012a\u012a\u012a\u012a\u012a\u012aL!!!!\200\u012a\u012aL!!!!\200\u012a\u012a\u012a\u012aL!!!!!" + "'", str2, "\u012a\u012aL!!!!\200\u012a\u012aL!!!!\200\u012a\u012a\u012a\u012a\u012a\u012aL!!!!\200\u012a\u012aL!!!!\200\u012a\u012a\u012a\u012a\u012a\u012aL!!!!\200\u012a\u012aL!!!!\200\u012a\u012a\u012a\u012a\u012a\u012aL!!!!\200\u012a\u012aL!!!!\200\u012a\u012a\u012a\u012a\u012a\u012aL!!!!\200\u012a\u012aL!!!!\200\u012a\u012a\u012a\u012a\u012a\u012aL!!!!\200\u012a\u012aL!!!!\200\u012a\u012a\u012a\u012a\u012a\u012aL!!!!\200\u012a\u012aL!!!!\200\u012a\u012a\u012a\u012a\u012a\u012aL!!!!\200\u012a\u012aL!!!!\200\u012a\u012a\u012a\u012a\u012a\u012aL!!!!\200\u012a\u012aL!!!!\200\u012a\u012a\u012a\u012a\u012a\u012aL!!!!\200\u012a\u012aL!!!!\200\u012a\u012a\u012a\u012a\u012a\u012aL!!!!\200\u012a\u012aL!!!!\200\u012a\u012a\u012a\u012a\u012a\u012aL!!!!\200\u012a\u012aL!!!!\200\u012a\u012a\u012a\u012aL!!!!!");
    }

    @Test
    public void test10072() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10072");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.encode("\u037e\u037e\u037e\u037e\u037e\u037e\u037e\u037e\u037e\u037e\u037e\u037e\u037e\u037e\u037e\u037e\u037e\u037e\u037e\u037e\u037e\u037e\u037e\u037e\u037e\u037e\u037e\u037e\u037e\u037e\u037e\u037e\u037e\u037e\u037e\u037e\u037e\u037e\u037e\u037e\u037e\u037e\u037e\u037e\u037e\u037e\u037e\u037e\u037e\u037e\u037e\u037e\u037e\u037e\u037e\u037e\u037e\u037e\u037e\u037e\u037e\u037e\u037e\u037e\u037e\u037e\u037e\u037e\u037e\u037e\u037e\u037e\u037e\u037e\u037e\u037e\u037e\u037e\u037e\u037e\u037e\u037e\u037e\u037e\u037e\u037e\u037e\u037e\u037e\u037e\u037e\u037e\u037e\u037e\u037e\u037eNNN!!!", "\u0199\u0199\220nullnull\200\u0199\u0199\220nullnull]]!");
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\u037e\u037e\u037e\u037e\u037e\u037e\u037e\u037e\u037e\u037e\u037e\u037e\u037e\u037e\u037e\u037e\u037e\u037e\u037e\u037e\u037e\u037e\u037e\u037e\u037e\u037e\u037e\u037e\u037e\u037e\u037e\u037e\u037e\u037e\u037e\u037e\u037e\u037e\u037e\u037e\u037e\u037e\u037e\u037e\u037e\u037e\u037e\u037e\u037e\u037e\u037e\u037e\u037e\u037e\u037e\u037e\u037e\u037e\u037e\u037e\u037e\u037e\u037e\u037e\u037e\u037e\u037e\u037e\u037e\u037e\u037e\u037e\u037e\u037e\u037e\u037e\u037e\u037e\u037e\u037e\u037e\u037e\u037e\u037e\u037e\u037e\u037e\u037e\u037e\u037e\u037e\u037e\u037e\u037e\u037e\u037eLLL!!!" + "'", str2, "\u037e\u037e\u037e\u037e\u037e\u037e\u037e\u037e\u037e\u037e\u037e\u037e\u037e\u037e\u037e\u037e\u037e\u037e\u037e\u037e\u037e\u037e\u037e\u037e\u037e\u037e\u037e\u037e\u037e\u037e\u037e\u037e\u037e\u037e\u037e\u037e\u037e\u037e\u037e\u037e\u037e\u037e\u037e\u037e\u037e\u037e\u037e\u037e\u037e\u037e\u037e\u037e\u037e\u037e\u037e\u037e\u037e\u037e\u037e\u037e\u037e\u037e\u037e\u037e\u037e\u037e\u037e\u037e\u037e\u037e\u037e\u037e\u037e\u037e\u037e\u037e\u037e\u037e\u037e\u037e\u037e\u037e\u037e\u037e\u037e\u037e\u037e\u037e\u037e\u037e\u037e\u037e\u037e\u037e\u037e\u037eLLL!!!");
    }

    @Test
    public void test10073() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10073");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.encode("!!!\276!!!\276!!!!!\276!!!\276!!!!!\276!!!\276!!!!!\276!!!\276!!!!!\276!!!\276!!!!!\276!!!\276!!!!!\276!!!\276!!!!!\276!!!\276!!!", "\260\260uu]]uu]]\260\260uu]]uu]]}}\260\260uu]]uu]]\260\260uu]]uu]]}}!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "!!!\276!!!\276!!!!!\276!!!\276!!!!!\276!!!\276!!!!!\276!!!\276!!!!!\276!!!\276!!!!!\276!!!\276!!!!!\276!!!\276!!!!!\276!!!\276!!!" + "'", str2, "!!!\276!!!\276!!!!!\276!!!\276!!!!!\276!!!\276!!!!!\276!!!\276!!!!!\276!!!\276!!!!!\276!!!\276!!!!!\276!!!\276!!!!!\276!!!\276!!!");
    }

    @Test
    public void test10074() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10074");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.encode("!!!nullnullnullnullnullnullnullnull!", "\u0294\u0294\u0294\u0294\u0294\u0294\u0294\u0294\u0294\u0294\u0294\u0294\u0294\u0294\u0294\u0294\u0294\u0294\u0294\u0294\u0294\u0294\u0294\u0294\u0294\u0294\u0294\u0294\u0294\u0294\u0294\u0294\u0294\u0294\u0294\u0294\u0294\u0294\u0294\u0294\u0294\u0294\u0294\u0294\u0294\u0294\u0294\u0294\u0294\u0294\u0294\u0294\u0294\u0294\u0294\u0294\u0294\u0294\u0294\u0294\u0294\u0294\u0294\u0294!!!");
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\u0294\u0294\u0294\u0294\u0294\u0294\u0294\u0294\u0294\u0294\u0294\u0294\u0294\u0294\u0294\u0294!!!" + "'", str2, "\u0294\u0294\u0294\u0294\u0294\u0294\u0294\u0294\u0294\u0294\u0294\u0294\u0294\u0294\u0294\u0294!!!");
    }

    @Test
    public void test10075() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10075");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.encode("\u0346\u0348\u0348\u0348\u016c\u016b\u0163\u0163\u016c\u016b\u0163\u0163\u016c\u016b\u0163\u0163\u016c\u016b\u0163\u0163\u016c\u016b\u0163\u0163\u016c\u016b\u0163\u0163\u016c\u016b\u0163\u0163\u016c\u016b\u0163\u0163\u0348\u0346\u
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\u0346\u0348\u0348\u0348\335LLL\335LLL\335!UU\335!UU\335LLL\335LLL\335!UU\335!UU\335LLL\335LLL\335!UU\335!UU\335LLL\335LLL\335!UU\335\u0348\u0346\u0346!" + "'", str2, "\u0346\u0348\u0348\u0348\335LLL\335LLL\335!UU\335!UU\335LLL\335LLL\335!UU\335!UU\335LLL\335LLL\335!UU\335!UU\335LLL\335LLL\335!UU\335\u0348\u0346\u0346!");
    }

    @Test
    public void test10076() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10076");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.decode("!\254\u02be\u02be!\254\u02be\u02be!!!!!!!!!\254\u02be\u02be!\254\u02be\u02be!!!!!!!!!\254\u02be\u02be!\254\u02be\u02be!!!!!!!!!\254\u02be\u02be!\254\u02be\u02be!!!!!!!!!\254\u02be\u02be!\254\u02be\u02be!!!!!!!!!\254\u02be\u02be!\254\u02be\u02be!!!!!!!!!\254\u02be\u02be!\254\u02be\u02be!!!!!!!!!\254\u02be\u02be!\254\u02be\u02be!!!!!!!!!", "\215}\215\215\215}\215\215null!!!null!!!null!!!null!!!\215}\215\215\215}\215\215!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "!\254nullnull!\254nullnull!!!!!!!!!\254nullnull!\254nullnull!!!!!!!!!\254nullnull!\254nullnull!!!!!!!!!\254nullnull!\254nullnull!!!!!!!!!\254nullnull!\254nullnull!!!!!!!!!\254nullnull!\254nullnull!!!!!!!!!\254nullnull!\254nullnull!!!!!!!!!\254nullnull!\254nullnull!!!!!!!!!" + "'", str2, "!\254nullnull!\254nullnull!!!!!!!!!\254nullnull!\254nullnull!!!!!!!!!\254nullnull!\254nullnull!!!!!!!!!\254nullnull!\254nullnull!!!!!!!!!\254nullnull!\254nullnull!!!!!!!!!\254nullnull!\254nullnull!!!!!!!!!\254nullnull!\254nullnull!!!!!!!!!\254nullnull!\254nullnull!!!!!!!!!");
    }

    @Test
    public void test10077() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10077");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.encode("!!\276\276!!\276\276!!!!\276\276!!\276\276!!!!\276\276!!\276\276!!\276\276!!\276\276!!!!\276\276!!\276\276!!!!\276\276!!\276\276!", "\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "!!\276\276!!\276\276!!!!\276\276!!\276\276!!!!\276\276!!\276\276!!\276\276!!\276\276!!!!\276\276!!\276\276!!!!\276\276!!\276\276!" + "'", str2, "!!\276\276!!\276\276!!!!\276\276!!\276\276!!!!\276\276!!\276\276!!\276\276!!\276\276!!!!\276\276!!\276\276!!!!\276\276!!\276\276!");
    }

    @Test
    public void test10078() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10078");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.encode("LUUULUUULUUULUUULUUULUUULUUULUUU!", "\u01af\u01af\u01af\u01af\u01af\u01af\u01af\u01af\u01af\u01af\u01af\u01af\u01af\u01af\u01af\u01af\u01af\u01af\u01af\u01af\u01af\u01af\u01af\u01af\u01af\u01af\u01af\u01af\u01af\u01af\u01af\u01af]]null!nullnullnullnull!!!");
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "LLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLL!" + "'", str2, "LLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLL!");
    }

    @Test
    public void test10079() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10079");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.decode("}null!!!\200\200}null!!!\200\200}null!!!\200\200}null!!!\200\200null!~~null!~~null!~~null!~~null!~~null!~~null!~~null!~~null!~~null!~~null!~~null!~~null!~~null!~~null!~~null!~~}null!!!\200\200}null!!!\200\200}null!!!\200\200}null!!!\200\200null!~~null!~~null!~~null!~~null!~~null!~~null!~~null!~~!", "null\226\230\230nullnullnullnull\226\230\230null\226\230\230null\226\230\230null\226\230\230null\226\230\230null\226\230\230null\226\230\230null\226\230\230null\226\230\230null\226\230\230null\226\230\230null\226\230\230null\226\230\230null\226\230\230null\226\230\230null\226\230\230null\226\230\230nullnullnullnull\226\230\230null\226\230\230null\226\230\230null\226\230\230null\226\230\230null\226\230\230null\226\230\230null\226\230\230!");
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\u0128\u0129\u012b\u012b!!!\200\200\u0128\u0129\u012b\u012b!!!\200\200\u0128\u0129\u012b\u012b!!!\200\200\u0128\u0129\u012b\u012b!!!\200\200\u0128\u0129\u012b\u012b\u0128\u0129\u012b\u012b\u0128\u0129\u012b\u012b\u0128\u0129\u012b\u012b\u0128\u0129\u012b\u012b\u0128\u0129\u012b\u012b\u0128\u0129\u012b\u012b\u0128\u0129\u012b\u012b\u0128\u0129\u012b\u012b\u0128\u0129\u012b\u012b\u0128\u0129\u012b\u012b\u0128\u0129\u012b\u012b\u0128\u0129\u012b\u012b\u0128\u0129\u012b\u012b\u0128\u0129\u012b\u012b\u0128\u0129\u012b\u012b\u0128\u0129\u012b\u012b!!!\200\200\u0128\u0129\u012b\u012b!!!\200\200\u0128\u0129\u012b\u012b!!!\200\200\u0128\u0129\u012b\u012b!!!\200\200\u0128\u0129\u012b\u012b\u0128\u0129\u012b\u012b\u0128\u0129\u012b\u012b\u0128\u0129\u012b\u012b\u0128\u0129\u012b\u012b\u0128\u0129\u012b\u012b\u0128\u0129\u012b\u012b\u0128\u0129\u012b\u012b!~~!" + "'", str2, "\u0128\u0129\u012b\u012b!!!\200\200\u0128\u0129\u012b\u012b!!!\200\200\u0128\u0129\u012b\u012b!!!\200\200\u0128\u0129\u012b\u012b!!!\200\200\u0128\u0129\u012b\u012b\u0128\u0129\u012b\u012b\u0128\u0129\u012b\u012b\u0128\u0129\u012b\u012b\u0128\u0129\u012b\u012b\u0128\u0129\u012b\u012b\u0128\u0129\u012b\u012b\u0128\u0129\u012b\u012b\u0128\u0129\u012b\u012b\u0128\u0129\u012b\u012b\u0128\u0129\u012b\u012b\u0128\u0129\u012b\u012b\u0128\u0129\u012b\u012b\u0128\u0129\u012b\u012b\u0128\u0129\u012b\u012b\u0128\u0129\u012b\u012b\u0128\u0129\u012b\u012b!!!\200\200\u0128\u0129\u012b\u012b!!!\200\200\u0128\u0129\u012b\u012b!!!\200\200\u0128\u0129\u012b\u012b!!!\200\200\u0128\u0129\u012b\u012b\u0128\u0129\u012b\u012b\u0128\u0129\u012b\u012b\u0128\u0129\u012b\u012b\u0128\u0129\u012b\u012b\u0128\u0129\u012b\u012b\u0128\u0129\u012b\u012b\u0128\u0129\u012b\u012b!~~!");
    }

    @Test
    public void test10080() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10080");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.decode("\u0366\u0365\u0368\u0368\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348~~!!\200\200\u0346\u0348\u0348!", "\u0366\u0365\u0368\u0368\u02b6\u02b6!!!\200\200\u0346\u0348\u0348!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\u0366\u0365\u0368\u0368\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348~~!!\200\200\u0346\u0348\u0348!" + "'", str2, "\u0366\u0365\u0368\u0368\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348~~!!\200\200\u0346\u0348\u0348!");
    }

    @Test
    public void test10081() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10081");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.decode("\254\254\200NNN\200NNN\254\254\200NNN\200NNN\254\254\200NNN\200NNN\254\254\200NNN\200NNN\254\254\200NNN\200NNN\254\254\200NNN\200NNN\254\254\200NNN\200NNN\254\254\200NNN\200NNN!", "HHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHH!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\254\254\200nullnullnull\200nullnullnull\254\254\200nullnullnull\200nullnullnull\254\254\200nullnullnull\200nullnullnull\254\254\200nullnullnull\200nullnullnull\254\254\200nullnullnull\200nullnullnull\254\254\200nullnullnull\200nullnullnull\254\254\200nullnullnull\200nullnullnull\254\254\200nullnullnull\200nullnullnull!" + "'", str2, "\254\254\200nullnullnull\200nullnullnull\254\254\200nullnullnull\200nullnullnull\254\254\200nullnullnull\200nullnullnull\254\254\200nullnullnull\200nullnullnull\254\254\200nullnullnull\200nullnullnull\254\254\200nullnullnull\200nullnullnull\254\254\200nullnullnull\200nullnullnull\254\254\200nullnullnull\200nullnullnull!");
    }

    @Test
    public void test10082() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10082");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.decode("\u0346\u0348\u0348\u0348\u037b\u037c\u037e\u037e\u0348\u0346\u0346!", "UNLLUNLLUNLLUNLL\256\254\254UNLLUNLLUNLLUNLL\256\254\254!!UNLLUNLLUNLLUNLL\256\254\254UNLLUNLLUNLLUNLL\256\254\254!!UNLLUNLLUNLLUNLL\256\254\254UNLLUNLLUNLLUNLL\256\254\254!!UNLLUNLLUNLLUNLL\256\254\254UNLLUNLLUNLLUNLL\256\254\254!!UNLLUNLLUNLLUNLL\256\254\254UNLLUNLLUNLLUNLL\256\254\254!!UNLLUNLLUNLLUNLL\256\254\254UNLLUNLLUNLLUNLL\256\254\254!!UNLLUNLLUNLLUNLL\256\254\254UNLLUNLLUNLLUNLL\256\254\254!!UNLLUNLLUNLLUNLL\256\254\254UNLLUNLLUNLLUNLL\256\254\254!!!");
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\u0346\u0348\u0348\u0348\u037e\u037e\u0348\u0346\u0346!" + "'", str2, "\u0346\u0348\u0348\u0348\u037e\u037e\u0348\u0346\u0346!");
    }

    @Test
    public void test10083() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10083");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.encode("", "nullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
    }

    @Test
    public void test10084() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10084");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.encode("\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346!!!", "nullnull!!null~~nullnull!!null~~nullnull!!null~~nullnull!!null~~nullnull!!null~~nullnull!!null~~nullnull!!null~~nullnull!!null~~!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346!!!" + "'", str2, "\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346!!!");
    }

    @Test
    public void test10085() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10085");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.decode("LLJJLLJJLLJJLLJJLLJJLLJJLLJJLLJJLLLLJJLLJJLLJJLLJJLLJJLLJJLLJJLLJJLLLLJJLLJJLLJJLLJJLLJJLLJJLLJJLLJJLLLLJJLLJJLLJJLLJJLLJJLLJJLLJJLLJJLLLLJJLLJJLLJJLLJJLLJJLLJJLLJJLLJJLLLLJJLLJJLLJJLLJJLLJJLLJJLLJJLLJJLLLLJJLLJJLLJJLLJJLLJJLLJJLLJJLLJJLLLLJJLLJJLLJJLLJJLLJJLLJJLLJJLLJJLL!", "\253\254\256\256NLUUNLUUNLUUNLUUNLUUNLUU\253\254\256\256NLUUNLUUNLUUNLUUNLUUNLUU!!\253\254\256\256NLUUNLUUNLUUNLUUNLUUNLUU\253\254\256\256NLUUNLUUNLUUNLUUNLUUNLUU!!\253\254\256\256NLUUNLUUNLUUNLUUNLUUNLUU\253\254\256\256NLUUNLUUNLUUNLUUNLUUNLUU!!\253\254\256\256NLUUNLUUNLUUNLUUNLUUNLUU\253\254\256\256NLUUNLUUNLUUNLUUNLUUNLUU!!\253\254\256\256NLUUNLUUNLUUNLUUNLUUNLUU\253\254\256\256NLUUNLUUNLUUNLUUNLUUNLUU!!\253\254\256\256NLUUNLUUNLUUNLUUNLUUNLUU\253\254\256\256NLUUNLUUNLUUNLUUNLUUNLUU!!\253\254\256\256NLUUNLUUNLUUNLUUNLUUNLUU\253\254\256\256NLUUNLUUNLUUNLUUNLUUNLUU!!\253\254\256\256NLUUNLUUNLUUNLUUNLUUNLUU\253\254\256\256NLUUNLUUNLUUNLUUNLUUNLUU!!!");
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\u020c\u020c\u020c\u020c\u020c\u020c\u020c\u020c\u020c\u020c\u020c\u020c\u020c\u020c\u020c\u020c\u020c\u020c\u020c\u020c\u020c\u020c\u020c\u020c\u020c\u020c\u020c\u020c\u020c\u020c\u020c\u020c\u020c\u020c\u020c\u020c\u020c\u020c\u020c\u020c\u020c\u020c\u020c\u020c\u020c\u020c\u020c\u020c\u020c\u020c\u020c\u020c\u020c\u020c\u020c\u020c\u020c\u020c\u020c\u020c\u020c\u020c\u020c\u020c\u020c\u020c\u020c\u020c\u020c\u020c\u020c\u020c\u020c\u020c\u020c\u020c\u020c\u020c\u020c\u020c\u020c\u020c\u020c\u020c\u020c\u020c\u020c\u020c\u020c\u020c\u020c\u020c\u020c\u020c\u020c\u020c\u020c\u020c\u020c\u020c\u020c\u020c\u020c\u020c\u020c\u020c\u020c\u020c\u020c\u020c\u020c\u020c\u020c\u020c\u020c\u020c\u020c\u020c\u020c\u020c\u020c\u020c\u020c\u020c\u020c\u020c\u020c\u020c\u020c\u020c\u020c\u020c\u020c\u020c\u020c\u020c\u020c\u020c\u020c\u020c\u020c\u020c\u020c\u020c!" + "'", str2, "\u020c\u020c\u020c\u020c\u020c\u020c\u020c\u020c\u020c\u020c\u020c\u020c\u020c\u020c\u020c\u020c\u020c\u020c\u020c\u020c\u020c\u020c\u020c\u020c\u020c\u020c\u020c\u020c\u020c\u020c\u020c\u020c\u020c\u020c\u020c\u020c\u020c\u020c\u020c\u020c\u020c\u020c\u020c\u020c\u020c\u020c\u020c\u020c\u020c\u020c\u020c\u020c\u020c\u020c\u020c\u020c\u020c\u020c\u020c\u020c\u020c\u020c\u020c\u020c\u020c\u020c\u020c\u020c\u020c\u020c\u020c\u020c\u020c\u020c\u020c\u020c\u020c\u020c\u020c\u020c\u020c\u020c\u020c\u020c\u020c\u020c\u020c\u020c\u020c\u020c\u020c\u020c\u020c\u020c\u020c\u020c\u020c\u020c\u020c\u020c\u020c\u020c\u020c\u020c\u020c\u020c\u020c\u020c\u020c\u020c\u020c\u020c\u020c\u020c\u020c\u020c\u020c\u020c\u020c\u020c\u020c\u020c\u020c\u020c\u020c\u020c\u020c\u020c\u020c\u020c\u020c\u020c\u020c\u020c\u020c\u020c\u020c\u020c\u020c\u020c\u020c\u020c\u020c\u020c!");
    }

    @Test
    public void test10086() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10086");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.decode("", "\275``\230\230\230\230\230\230\230\230``\230\230\230\230\230\230\230\230``\230\230\230\230\230\230\230\230\276``\230\230\230\230\230\230\230\230\275\275!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
    }

    @Test
    public void test10087() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10087");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.encode("TT!!TT!!TT!!TT!!!TT!!TT!!TT!!TT!!TT!!TT!!TT!!TT!!TT!!TT!!TT!!TT!!!TT!!TT!!TT!!TT!!TT!!TT!!TT!!TT!!TT!!TT!!TT!!TT!!!TT!!TT!!TT!!TT!!TT!!TT!!TT!!TT!!TT!!TT!!TT!!TT!!!TT!!TT!!TT!!TT!!TT!!TT!!TT!!TT!!TT!!TT!!TT!!TT!!!TT!!TT!!TT!!TT!!TT!!TT!!TT!!TT!!TT!!TT!!TT!!TT!!!TT!!TT!!TT!!TT!!TT!!TT!!TT!!TT!!TT!!TT!!TT!!TT!!!TT!!TT!!TT!!TT!!TT!!TT!!TT!!TT!!TT!!TT!!TT!!TT!!!TT!!TT!!TT!!TT!!TT!!TT!!TT!!TT!!!", "nullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "LL!!LL!!LL!!LL!!!LL!!LL!!LL!!LL!!LL!!LL!!LL!!LL!!LL!!LL!!LL!!LL!!!LL!!LL!!LL!!LL!!LL!!LL!!LL!!LL!!LL!!LL!!LL!!LL!!!LL!!LL!!LL!!LL!!LL!!LL!!LL!!LL!!LL!!LL!!LL!!LL!!!LL!!LL!!LL!!LL!!LL!!LL!!LL!!LL!!LL!!LL!!LL!!LL!!!LL!!LL!!LL!!LL!!LL!!LL!!LL!!LL!!LL!!LL!!LL!!LL!!!LL!!LL!!LL!!LL!!LL!!LL!!LL!!LL!!LL!!LL!!LL!!LL!!!LL!!LL!!LL!!LL!!LL!!LL!!LL!!LL!!LL!!LL!!LL!!LL!!!LL!!LL!!LL!!LL!!LL!!LL!!LL!!LL!!!" + "'", str2, "LL!!LL!!LL!!LL!!!LL!!LL!!LL!!LL!!LL!!LL!!LL!!LL!!LL!!LL!!LL!!LL!!!LL!!LL!!LL!!LL!!LL!!LL!!LL!!LL!!LL!!LL!!LL!!LL!!!LL!!LL!!LL!!LL!!LL!!LL!!LL!!LL!!LL!!LL!!LL!!LL!!!LL!!LL!!LL!!LL!!LL!!LL!!LL!!LL!!LL!!LL!!LL!!LL!!!LL!!LL!!LL!!LL!!LL!!LL!!LL!!LL!!LL!!LL!!LL!!LL!!!LL!!LL!!LL!!LL!!LL!!LL!!LL!!LL!!LL!!LL!!LL!!LL!!!LL!!LL!!LL!!LL!!LL!!LL!!LL!!LL!!LL!!LL!!LL!!LL!!!LL!!LL!!LL!!LL!!LL!!LL!!LL!!LL!!!");
    }

    @Test
    public void test10088() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10088");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.decode("", "!hhh!!hhh!hhh!hhh!hhh!hhh!hhh!hhh!hhh!hhh!!hhh!hhh!hhh!hhh!hhh!hhh!hhh!hhh!hhh!!hhh!hhh!hhh!hhh!hhh!hhh!hhh!hhh!hhh!!hhh!hhh!hhh!hhh!hhh!hhh!hhh!hhh!hhh!!hhh!hhh!hhh!hhh!hhh!hhh!hhh!hhh!hhh!!hhh!hhh!hhh!hhh!hhh!hhh!hhh!hhh!hhh!!hhh!hhh!hhh!hhh!hhh!hhh!hhh!hhh!hhh!!hhh!hhh!hhh!hhh!hhh!hhh!hhh!hhh!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
    }

    @Test
    public void test10089() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10089");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.encode("^```^```^```^```^```^```^```^```^```^```nullnull^```^```nullnull^```^```^```^```^```^```^```^```^```^```nullnull^```^```nullnull^```^```^```^```^```^```^```^```^```^```nullnull^```^```nullnull^```^```^```^```^```^```^```^```^```^```nullnull^```^```nullnull^```^```^```^```^```^```^```^```^```^```nullnull^```^```nullnull^```^```^```^```^```^```^```^```^```^```nullnull^```^```nullnull^```^```^```^```^```^```^```^```^```^```nullnull^```^```nullnull^```^```^```^```^```^```^```^```^```^```nullnull^```^```nullnull!", "FF!!FF!!FF!!FF!!FF!!FF!!FF!!FF!!!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "^```^```^```^```^```^```^```^```^```^```ff!!ff!!^```^```ff!!ff!!^```^```^```^```^```^```^```^```^```^```ff!!ff!!^```^```ff!!ff!!^```^```^```^```^```^```^```^```^```^```ff!!ff!!^```^```ff!!ff!!^```^```^```^```^```^```^```^```^```^```ff!!ff!!^```^```ff!!ff!!^```^```^```^```^```^```^```^```^```^```ff!!ff!!^```^```ff!!ff!!^```^```^```^```^```^```^```^```^```^```ff!!ff!!^```^```ff!!ff!!^```^```^```^```^```^```^```^```^```^```ff!!ff!!^```^```ff!!ff!!^```^```^```^```^```^```^```^```^```^```ff!!ff!!^```^```ff!!ff!!!" + "'", str2, "^```^```^```^```^```^```^```^```^```^```ff!!ff!!^```^```ff!!ff!!^```^```^```^```^```^```^```^```^```^```ff!!ff!!^```^```ff!!ff!!^```^```^```^```^```^```^```^```^```^```ff!!ff!!^```^```ff!!ff!!^```^```^```^```^```^```^```^```^```^```ff!!ff!!^```^```ff!!ff!!^```^```^```^```^```^```^```^```^```^```ff!!ff!!^```^```ff!!ff!!^```^```^```^```^```^```^```^```^```^```ff!!ff!!^```^```ff!!ff!!^```^```^```^```^```^```^```^```^```^```ff!!ff!!^```^```ff!!ff!!^```^```^```^```^```^```^```^```^```^```ff!!ff!!^```^```ff!!ff!!!");
    }

    @Test
    public void test10090() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10090");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.encodenull]^^null]^^null]^^null]^^null]^^null]^^null]^^null]^^null]^^null]^^null]^^null]^^null]^^null]^^null]^^null]^^null]^^null]^^null]^^null]^^!!null]^^null]^^null]^^null]^^null]^^null]^^null]^^null]^^null]^^null]^^null]^^null]^^null]^^null]^^null]^^null]^^null]^^null]^^null]^^null]^^!!null]^^null]^^null]^^null]^^null]^^null]^^null]^^null]^^null]^^null]^^null]^^null]^^null]^^null]^^null]^^null]^^null]^^null]^^null]^^null]^^null]^^null]^^null]^^null]^^null]^^null]^^null]^^null]^^null]^^null]^^null]^^null]^^null]^^null]^^null]^^null]^^null]^^null]^^null]^^null]^^!!null]^^null]^^null]^^null]^^null]^^null]^^null]^^null]^^null]^^null]^^null]^^null]^^null]^^null]^^null]^^null]^^null]^^null]^^null]^^null]^^!!null]^^null]^^null]^^null]^^null]^^null]^^null]^^null]^^null]^^null]^^null]^^null]^^null]^^null]^^null]^^null]^^null]^^null]^^null]^^null]^^!");
        org.junit.Assert.assertEquals("'" + strstr
    }

    @Test
    public void test10091() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10091");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.decode("!LLUULLUULLUULLUU!", "\u0366\u0365\u0368\u0368\227\227\276\276\u0346\u0348\u0348!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "!nullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull!" + "'", str2, "!nullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull!");
    }

    @Test
    public void test10092() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10092");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.decode("\336\340\335\335\336\340\335\335!", "");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "nullnullnullnullnullnullnullnull!" + "'", str2, "nullnullnullnullnullnullnullnull!");
    }

    @Test
    public void test10093() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10093");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.decode("\216\216!!\216\216!!\216\216!!\216\216!!\216\216!!\216\216!!\216\216!!\216\216!!\216\216!!\216\216!!\216\216!!\216\216!!\216\216!!\216\216!!\216\216!!\216\216!!\216\216!!\216\216!!\216\216!!\216\216!!\216\216!!\216\216!!\216\216!!\216\216!!\216\216!!\216\216!!\216\216!!\216\216!!\216\216!!\216\216!!\216\216!!\216\216!!!", "``nullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull``!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\216\216!!\216\216!!\216\216!!\216\216!!\216\216!!\216\216!!\216\216!!\216\216!!\216\216!!\216\216!!\216\216!!\216\216!!\216\216!!\216\216!!\216\216!!\216\216!!\216\216!!\216\216!!\216\216!!\216\216!!\216\216!!\216\216!!\216\216!!\216\216!!\216\216!!\216\216!!\216\216!!\216\216!!\216\216!!\216\216!!\216\216!!\216\216!!!" + "'", str2, "\216\216!!\216\216!!\216\216!!\216\216!!\216\216!!\216\216!!\216\216!!\216\216!!\216\216!!\216\216!!\216\216!!\216\216!!\216\216!!\216\216!!\216\216!!\216\216!!\216\216!!\216\216!!\216\216!!\216\216!!\216\216!!\216\216!!\216\216!!\216\216!!\216\216!!\216\216!!\216\216!!\216\216!!\216\216!!\216\216!!\216\216!!\216\216!!!");
    }

    @Test
    public void test10094() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10094");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.decode("LUNLLUNLLUNLLLUNLLUNLLUNLLLUNLLUNLLUNLLLUNLLUNLLUNLLUNLLUNLLUNLLUNLLUNLLUNLLUNLLUNLLUNLLUNLLUNLLUNLLUNLLUNLLUNLLUNLLLUNLLUNLLUNLLLUNLLUNLLUNLLLUNLLUNLLUNLLLUNLLUNLLUNLLUNLLUNLLUNLLUNLLUNLLUNLLUNLLUNLL!", "\u025d\u025e\u0260\u0260\u025d\u025e\u0260\u0260\u025d\u025e\u0260\u0260\u025d\u025e\u0260\u0260\u025d\u025e\u0260\u0260\u025d\u025e\u0260\u0260\u025d\u025e\u0260\u0260\u025d\u025e\u0260\u0260\u025d\u025e\u0260\u0260\u025d\u025e\u0260\u0260\u025d\u025e\u0260\u0260\u025d\u025e\u0260\u0260\u025d\u025e\u0260\u0260\u025d\u025e\u0260\u0260\u025d\u025e\u0260\u0260\u025d\u025e\u0260\u0260\u025d\u025e\u0260\u0260\u025d\u025e\u0260\u0260\u025d\u025e\u0260\u0260\u025d\u025e\u0260\u0260\u025d\u025e\u0260\u0260\u025d\u025e\u0260\u0260!!!!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "nullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull!" + "'", str2, "nullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull!");
    }

    @Test
    public void test10095() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10095");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.encode("!!LL!!!LL!!LL!!!!!LL!!!LL!!LL!!!!!LL!!!LL!!LL!!!!!LL!!!LL!!LL!!!!!LL!!!LL!!LL!!!!!LL!!!LL!!LL!!!!!LL!!!LL!!LL!!!!!LL!!!LL!!LL!!!!", "nullnull\336\336nullnull\336\336!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "!!UU!!!UU!!UU!!!!!UU!!!UU!!UU!!!!!UU!!!UU!!UU!!!!!UU!!!UU!!UU!!!!!UU!!!UU!!UU!!!!!UU!!!UU!!UU!!!!!UU!!!UU!!UU!!!!!UU!!!UU!!UU!!!!" + "'", str2, "!!UU!!!UU!!UU!!!!!UU!!!UU!!UU!!!!!UU!!!UU!!UU!!!!!UU!!!UU!!UU!!!!!UU!!!UU!!UU!!!!!UU!!!UU!!UU!!!!!UU!!!UU!!UU!!!!!UU!!!UU!!UU!!!!");
    }

    @Test
    public void test10096() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10096");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.decode("\275\276UNLLUNLL\275\276UNLLUNLL\275\276UNLLUNLL\275\276UNLLUNLL\275\276UNLLUNLL\275\276UNLLUNLL\275\276UNLLUNLL\275\276UNLLUNLL\275\276UNLLUNLL\275\276UNLLUNLL\275\276UNLLUNLL\275\276UNLLUNLL\275\276UNLLUNLL\275\276UNLLUNLL\275\276UNLLUNLL\275\276UNLLUNLL\275\276UNLLUNLL\275\276UNLLUNLL\275\276UNLLUNLL\275\276UNLLUNLL!", "\u0366\u0365\u0368\u0368\u0346\u0348\u0348!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\275\276nullnullnullnullnullnullnullnull\275\276nullnullnullnullnullnullnullnull\275\276nullnullnullnullnullnullnullnull\275\276nullnullnullnullnullnullnullnull\275\276nullnullnullnullnullnullnullnull\275\276nullnullnullnullnullnullnullnull\275\276nullnullnullnullnullnullnullnull\275\276nullnullnullnullnullnullnullnull\275\276nullnullnullnullnullnullnullnull\275\276nullnullnullnullnullnullnullnull\275\276nullnullnullnullnullnullnullnull\275\276nullnullnullnullnullnullnullnull\275\276nullnullnullnullnullnullnullnull\275\276nullnullnullnullnullnullnullnull\275\276nullnullnullnullnullnullnullnull\275\276nullnullnullnullnullnullnullnull\275\276nullnullnullnullnullnullnullnull\275\276nullnullnullnullnullnullnullnull\275\276nullnullnullnullnullnullnullnull\275\276nullnullnullnullnullnullnullnull!" + "'", str2, "\275\276nullnullnullnullnullnullnullnull\275\276nullnullnullnullnullnullnullnull\275\276nullnullnullnullnullnullnullnull\275\276nullnullnullnullnullnullnullnull\275\276nullnullnullnullnullnullnullnull\275\276nullnullnullnullnullnullnullnull\275\276nullnullnullnullnullnullnullnull\275\276nullnullnullnullnullnullnullnull\275\276nullnullnullnullnullnullnullnull\275\276nullnullnullnullnullnullnullnull\275\276nullnullnullnullnullnullnullnull\275\276nullnullnullnullnullnullnullnull\275\276nullnullnullnullnullnullnullnull\275\276nullnullnullnullnullnullnullnull\275\276nullnullnullnullnullnullnullnull\275\276nullnullnullnullnullnullnullnull\275\276nullnullnullnullnullnullnullnull\275\276nullnullnullnullnullnullnullnull\275\276nullnullnullnullnullnullnullnull\275\276nullnullnullnullnullnullnullnull!");
    }

    @Test
    public void test10097() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10097");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.encode("\336\340\335\335\336\340\335\335!", "\256\254\254\254\256\254\254\254\256\254\254\254\256\254\254\254\200}}`\256\254\254\254\256\254\254\254\256\254\254\254\256\254\254\254]]!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "nullnullnullnullnullnullnullnull!" + "'", str2, "nullnullnullnullnullnullnullnull!");
    }

    @Test
    public void test10098() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10098");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.decode("\275\u014c\u014b\u014e\u014e\u014c\u014b\u014e\u014e\u014c\u014b\u014e\u014e\276\u014c\u014b\u014e\u014e\275\275!", "!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnull!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\275nullnullnullnullnullnullnullnullnullnullnullnull\276nullnullnullnull\275\275!" + "'", str2, "\275nullnullnullnullnullnullnullnullnullnullnullnull\276nullnullnullnull\275\275!");
    }

    @Test
    public void test10099() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10099");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.decode("\275\220JJ\200}}`\275\220JJ]]!", "\u02d5\u02d6\u02d8\u02d8\u02d5\u02d6\u02d8\u02d8\u02d5\u02d6\u02d8\u02d8\u02d5\u02d6\u02d8\u02d8\u02d5\u02d6\u02d8\u02d8\u02d5\u02d6\u02d8\u02d8\u02d5\u02d6\u02d8\u02d8\u02d5\u02d6\u02d8\u02d8nullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\275\220nullnull\200}}`\275\220nullnull]]!" + "'", str2, "\275\220nullnull\200}}`\275\220nullnull]]!");
    }

    @Test
    public void test10100() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10100");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.decode("", "nullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull\214\214nullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull\214\214nullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull\214\214nullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull\214\214nullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull\214\214nullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull\214\214nullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull\214\214nullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull\214\214!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
    }

    @Test
    public void test10101() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10101");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.decode("!LLNN!", "LLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLL!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "!``nullnull!" + "'", str2, "!``nullnull!");
    }

    @Test
    public void test10102() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10102");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.encode("!!\275\275!!\275\275!]!!!]!!!!\275\275!!\275\275!]!!!]!!!!\275\275!!\275\275!]!!!]!!!!\275\275!!\275\275!]!!!]!!!!\275\275!!\275\275!]!!!]!!!!\275\275!!\275\275!]!!!]!!!!\275\275!!\275\275!]!!!]!!!!\275\275!!\275\275!]!!!]!!!", "\276\276\276\276\365\366\370\370\365\366\370\370\365\366\370\370\276\276\276\276\276\276\276\276\276\276\276\276\276\276\276\276\276\276\276\276\276\276\276\276\276\276\276\276\276\276\276\276\276\276\276\276\276\276\276\276\276\276\276\276\276\276\276\276\276\276\276\276\276\276\276\276\276\276\276\276\276\276\276\276\276\276\276\276\365\366\370\370\365\366\370\370\365\366\370\370\276\276\276\276\276\276\276\276\276\276\276\276\276\276\276\276\276\276\276\276\276\276\276\276\276\276\276\276\276\276\276\276!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "!!\275\275!!\275\275!]!!!]!!!!\275\275!!\275\275!]!!!]!!!!\275\275!!\275\275!]!!!]!!!!\275\275!!\275\275!]!!!]!!!!\275\275!!\275\275!]!!!]!!!!\275\275!!\275\275!]!!!]!!!!\275\275!!\275\275!]!!!]!!!!\275\275!!\275\275!]!!!]!!!" + "'", str2, "!!\275\275!!\275\275!]!!!]!!!!\275\275!!\275\275!]!!!]!!!!\275\275!!\275\275!]!!!]!!!!\275\275!!\275\275!]!!!]!!!!\275\275!!\275\275!]!!!]!!!!\275\275!!\275\275!]!!!]!!!!\275\275!!\275\275!]!!!]!!!!\275\275!!\275\275!]!!!]!!!");
    }

    @Test
    public void test10103() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10103");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.decode
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\230nullnullnull!\230nullnullnull\230nullnullnull\230nullnullnull\230nullnullnull!!\230nullnullnull\230nullnullnull!!\230nullnullnull\230nullnullnull!!\230nullnullnull\230nullnullnull!!\230nullnullnull!\230nullnullnull\230nullnullnull\230nullnullnull\230nullnullnull!!\230nullnullnull\230nullnullnull!!!" + "'", str2, "\230nullnullnull!\230nullnullnull\230nullnullnull\230nullnullnull\230nullnullnull!!\230nullnullnull\230nullnullnull!!\230nullnullnull\230nullnullnull!!\230nullnullnull\230nullnullnull!!\230nullnullnull!\230nullnullnull\230nullnullnull\230nullnullnull\230nullnullnull!!\230nullnullnull\230nullnullnull!!!");
    }

    @Test
    public void test10104() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10104");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.decode("EHHHEHHHHHEHHHEHHHHHEHHHEHHHHHEHHHEHHHHHEHHHEHHHHHEHHHEHHHHHEHHHEHHHHHEHHHEHHHHH!", "vvnullnullnullnullnullnullnullnullvvnullnullnullnullnullnullnullnullvvnullnullnullnullnullnullnullnullvvnullnullnullnullnullnullnullnullvvnullnullnullnullnullnullnullnullvvnullnullnullnullnullnullnullnullvvnullnullnullnullnullnullnullnullvvnullnullnullnullnullnullnullnull!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "nullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull!" + "'", str2, "nullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull!");
    }

    @Test
    public void test10105() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10105");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.encode("null\275nullnullnull\275nullnullnull\275nullnullnull\275nullnullnull\275nullnullnull\275nullnullnull\275nullnullnull\275nullnull\276\275!!\276\275!!\276\275!!\276\275!!\276\275!!\276\275!!\276\275!!\276\275!!null\275nullnullnull\275nullnullnull\275nullnullnull\275nullnullnull\275nullnullnull\275nullnullnull\275nullnullnull\275nullnull\276\275!!\276\275!!\276\275!!\276\275!!\276\275!!\276\275!!\276\275!!\276\275!!!", "fhnullnullfhnullnull\226\226fhnullnullfhnullnull\226\226fhnullnullfhnullnullnullnullfhnullnullfhnullnullnullnullfhnullnullfhnullnull\226\226fhnullnullfhnullnull\226\226fhnullnullfhnullnullnullnullfhnullnullfhnullnullnullnullfhnullnullfhnullnull\226\226fhnullnullfhnullnull\226\226fhnullnullfhnullnullnullnullfhnullnullfhnullnullnullnullfhnullnullfhnullnull\226\226fhnullnullfhnullnull\226\226fhnullnullfhnullnullnullnullfhnullnullfhnullnullnullnullfhnullnullfhnullnull\226\226fhnullnullfhnullnull\226\226fhnullnullfhnullnullnullnullfhnullnullfhnullnullnullnullfhnullnullfhnullnull\226\226fhnullnullfhnullnull\226\226fhnullnullfhnullnullnullnullfhnullnullfhnullnullnullnullfhnullnullfhnullnull\226\226fhnullnullfhnullnull\226\226fhnullnullfhnullnullnullnullfhnullnullfhnullnullnullnullfhnullnullfhnullnull\226\226fhnullnullfhnullnull\226\226fhnullnullfhnullnullnullnullfhnullnullfhnullnullnullnull!");
        org.junit.Assert.assertEquals("'" + strstr2, "HL\226\226\275HL\226\226HL\226\226HL\226\226\275HL\226\226HL\226\226HL\226\226\275HL\226\226HL\226\226HL\226\226\275HL\226\226HL\226\226HL\226\226\275HL\226\226HL\226\226HL\226\226\275HL\226\226HL\226\226HL\226\226\275HL\226\226HL\226\226HL\226\226\275HL\226\226HL\226\226\276\275!!\276\275!!\276\275!!\276\275!!\276\275!!\276\275!!\276\275!!\276\275!!HL\226\226\275HL\226\226HL\226\226HL\226\226\275HL\226\226HL\226\226HL\226\226\275HL\226\226HL\226\226HL\226\226\275HL\226\226HL\226\226HL\226\226\275HL\226\226HL\226\226HL\226\226\275HL\226\226HL\226\226HL\226\226\275HL\226\226HL\226\226HL\226\226\275HL\226\226HL\226\226\276\275!!\276\275!!\276\275!!\276\275!!\276\275!!\276\275!!\276\275!!\276\275!!!");
    }

    @Test
    public void test10106() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10106");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.encode("ffff\236\276\276ffff\236\276\276!!ffff\236\276\276ffff\236\276\276!!ffff\236\276\276ffff\236\276\276ffff\236\276\276ffff\236\276\276!!ffff\236\276\276ffff\236\276\276!!ffff\236\276\276ffff\236\276\276!", "\260]]!!]]!!]]!!\260]]!!]]!!]]!!\260]]!!]]!!]]!!\260]]!!]]!!]]!!\260]]!!]]!!]]!!\260]]!!]]!!]]!!\260]]!!]]!!]]!!\260]]!!]]!!]]!!\260]]!!]]!!]]!!\260]]!!]]!!]]!!\260]]!!]]!!]]!!\260]]!!]]!!]]!!\260]]!!]]!!]]!!\260]]!!]]!!]]!!\260]]!!]]!!]]!!\260]]!!]]!!]]!!\260]]!!]]!!]]!!\260]]!!]]!!]]!!\260]]!!]]!!]]!!\260]]!!]]!!]]!!\260]]!!]]!!]]!!\260]]!!]]!!]]!!\260]]!!]]!!]]!!\260]]!!]]!!]]!!\260]]!!]]!!]]!!\260]]!!]]!!]]!!\260]]!!]]!!]]!!\260]]!!]]!!]]!!\260]]!!]]!!]]!!\260]]!!]]!!]]!!\260]]!!]]!!]]!!\260]]!!]]!!]]!!!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "!!!!\236\276\276!!!!\236\276\276!!!!!!\236\276\276!!!!\236\276\276!!!!!!\236\276\276!!!!\236\276\276!!!!\236\276\276!!!!\236\276\276!!!!!!\236\276\276!!!!\236\276\276!!!!!!\236\276\276!!!!\236\276\276!" + "'", str2, "!!!!\236\276\276!!!!\236\276\276!!!!!!\236\276\276!!!!\236\276\276!!!!!!\236\276\276!!!!\236\276\276!!!!\236\276\276!!!!\236\276\276!!!!!!\236\276\276!!!!\236\276\276!!!!!!\236\276\276!!!!\236\276\276!");
    }

    @Test
    public void test10107() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10107");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.encode("!!]]!!]]N!!!N!!!!!]]!!]]N!!!N!!!!", "\u0262\u0264\u0264\u0262\u0264\u0264\u0262\u0264\u0264\u0262\u0264\u0264\u0262\u0264\u0264\u0262\u0264\u0264\u0262\u0264\u0264\u0262\u0264\u0264\u0262\u0264\u0264\u0262\u0264\u0264\u0262\u0264\u0264\u0262\u0264\u0264!");
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\u0264\u0264\u0264\u0264!!!!" + "'", str2, "\u0264\u0264\u0264\u0264!!!!");
    }

    @Test
    public void test10108() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10108");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.decode("\u0366\u0365\u0368\u0368\u0346\u0348\u0348!", "\275nullnullnullnullnullnullnullnullnullnullnull!!!!\275nullnullnullnullnullnullnullnullnullnullnull!!!!!!\275nullnullnullnullnullnullnullnullnullnullnull!!!!\275nullnullnullnullnullnullnullnullnullnullnull!!!!!!\275nullnullnullnullnullnullnullnullnullnullnull!!!!\275nullnullnullnullnullnullnullnullnullnullnull!!!!!!\275nullnullnullnullnullnullnullnullnullnullnull!!!!\275nullnullnullnullnullnullnullnullnullnullnull!!!!!!\275nullnullnullnullnullnullnullnullnullnullnull!!!!\275nullnullnullnullnullnullnullnullnullnullnull!!!!!!\275nullnullnullnullnullnullnullnullnullnullnull!!!!\275nullnullnullnullnullnullnullnullnullnullnull!!!!!!\275nullnullnullnullnullnullnullnullnullnullnull!!!!\275nullnullnullnullnullnullnullnullnullnullnull!!!!!!\275nullnullnullnullnullnullnullnullnullnullnull!!!!\275nullnullnullnullnullnullnullnullnullnullnull!!!!!!!");
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\u0366\u0365\u0368\u0368\u0357\u035a\u035a\u0357\u035a\u035a\u0357\u035a\u035a\u0357\u035a\u035a\u0357\u035a\u035a\u0357\u035a\u035a\u0357\u035a\u035a\u0357\u035a\u035a\u0357\u035a\u035a\u0357\u035a\u035a\u0357\u035a\u035a\u0357\u035a\u035a\u0357\u035a\u035a\u0357\u035a\u035a\u0357\u035a\u035a\u0357\u035a\u035a\u0346\u0348\u0348!" + "'", str2, "\u0366\u0365\u0368\u0368\u0357\u035a\u035a\u0357\u035a\u035a\u0357\u035a\u035a\u0357\u035a\u035a\u0357\u035a\u035a\u0357\u035a\u035a\u0357\u035a\u035a\u0357\u035a\u035a\u0357\u035a\u035a\u0357\u035a\u035a\u0357\u035a\u035a\u0357\u035a\u035a\u0357\u035a\u035a\u0357\u035a\u035a\u0357\u035a\u035a\u0357\u035a\u035a\u0346\u0348\u0348!");
    }

    @Test
    public void test10109() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10109");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.encode("\201\201~~\201\201~~\201\201~~\201\201~~\201\201~~\201\201~~\201\201~~\201\201~~\214\214\201\201~~\201\201~~\201\201~~\201\201~~\201\201~~\201\201~~\201\201~~\201\201~~\214\214\201\201~~\201\201~~\201\201~~\201\201~~\201\201~~\201\201~~\201\201~~\201\201~~\214\214\201\201~~\201\201~~\201\201~~\201\201~~\201\201~~\201\201~~\201\201~~\201\201~~\214\214\201\201~~\201\201~~\201\201~~\201\201~~\201\201~~\201\201~~\201\201~~\201\201~~\214\214\201\201~~\201\201~~\201\201~~\201\201~~\201\201~~\201\201~~\201\201~~\201\201~~\214\214\201\201~~\201\201~~\201\201~~\201\201~~\201\201~~\201\201~~\201\201~~\201\201~~\214\214\201\201~~\201\201~~\201\201~~\201\201~~\201\201~~\201\201~~\201\201~~\201\201~~\214\214!", "\u014d\u014e\u0150\u0150\u014d\u014e\u0150\u0150\u014d\u014e\u0150\u0150\u014d\u014e\u0150\u0150\u014d\u014e\u0150\u0150\u014d\u014e\u0150\u0150\u014d\u014e\u0150\u0150\u014d\u014e\u0150\u0150]]!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\201\201~~\201\201~~\201\201~~\201\201~~\201\201~~\201\201~~\201\201~~\201\201~~\214\214\201\201~~\201\201~~\201\201~~\201\201~~\201\201~~\201\201~~\201\201~~\201\201~~\214\214\201\201~~\201\201~~\201\201~~\201\201~~\201\201~~\201\201~~\201\201~~\201\201~~\214\214\201\201~~\201\201~~\201\201~~\201\201~~\201\201~~\201\201~~\201\201~~\201\201~~\214\214\201\201~~\201\201~~\201\201~~\201\201~~\201\201~~\201\201~~\201\201~~\201\201~~\214\214\201\201~~\201\201~~\201\201~~\201\201~~\201\201~~\201\201~~\201\201~~\201\201~~\214\214\201\201~~\201\201~~\201\201~~\201\201~~\201\201~~\201\201~~\201\201~~\201\201~~\214\214\201\201~~\201\201~~\201\201~~\201\201~~\201\201~~\201\201~~\201\201~~\201\201~~\214\214!" + "'", str2, "\201\201~~\201\201~~\201\201~~\201\201~~\201\201~~\201\201~~\201\201~~\201\201~~\214\214\201\201~~\201\201~~\201\201~~\201\201~~\201\201~~\201\201~~\201\201~~\201\201~~\214\214\201\201~~\201\201~~\201\201~~\201\201~~\201\201~~\201\201~~\201\201~~\201\201~~\214\214\201\201~~\201\201~~\201\201~~\201\201~~\201\201~~\201\201~~\201\201~~\201\201~~\214\214\201\201~~\201\201~~\201\201~~\201\201~~\201\201~~\201\201~~\201\201~~\201\201~~\214\214\201\201~~\201\201~~\201\201~~\201\201~~\201\201~~\201\201~~\201\201~~\201\201~~\214\214\201\201~~\201\201~~\201\201~~\201\201~~\201\201~~\201\201~~\201\201~~\201\201~~\214\214\201\201~~\201\201~~\201\201~~\201\201~~\201\201~~\201\201~~\201\201~~\201\201~~\214\214!");
    }

    @Test
    public void test10110() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10110");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.decode("\336\336\335\335\336\336\335\335!!\336\336\335\335\336\336\335\335!!!", "");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "nullnullnullnullnullnullnullnull!!nullnullnullnullnullnullnullnull!!!" + "'", str2, "nullnullnullnullnullnullnullnull!!nullnullnullnullnullnullnullnull!!!");
    }

    @Test
    public void test10111() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10111");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.encode("", "\206\207\211\211\206\207\211\211\211\211\206\207\211\211\206\207\211\211\211\211!!\206\207\211\211\206\207\211\211\211\211\206\207\211\211\206\207\211\211\211\211!!\206\207\211\211\206\207\211\211\211\211\206\207\211\211\206\207\211\211\211\211!!\206\207\211\211\206\207\211\211\211\211\206\207\211\211\206\207\211\211\211\211!!\206\207\211\211\206\207\211\211\211\211\206\207\211\211\206\207\211\211\211\211!!\206\207\211\211\206\207\211\211\211\211\206\207\211\211\206\207\211\211\211\211!!\206\207\211\211\206\207\211\211\211\211\206\207\211\211\206\207\211\211\211\211!!\206\207\211\211\206\207\211\211\211\211\206\207\211\211\206\207\211\211\211\211!!!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
    }

    @Test
    public void test10112() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10112");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.decode("", "\u02fa\u02fa\u02fa\u02fa\u02fa\u02fa\u02fa\u02fa\u02fa\u02fa\u02fa\u02fa\u02fa\u02fa\u02fa\u02fa\u02fa\u02fa\u02fa\u02fa\u02fa\u02fa\u02fa\u02fa\u02fa\u02fa\u02fa\u02fa\u02fa\u02fa\u02fa\u02fa\u02fa\u02fa\u02fa\u02fa\u02fa\u02fa\u02fa\u02fa\u02fa\u02fa\u02fa\u02fa\u02fa\u02fa\u02fa\u02fa!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
    }

    @Test
    public void test10113() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10113");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.decode("\275\u03e6\u03e6\u03e6\275\u03e6\u03e6\u03e6!", "\275\u014c\u014b\u014e\u014e\u014c\u014b\u014e\u014e\u014c\u014b\u014e\u014e\276\u014c\u014b\u014e\u014e\275\275!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\275nullnullnull\275nullnullnull!" + "'", str2, "\275nullnullnull\275nullnullnull!");
    }

    @Test
    public void test10114() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10114");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.decode("\351\354\354\354\351\354\354\354\351\354\354\354\351\354\354\354\200}}`\351\354\354\354\351\354\354\354\351\354\354\354\351\354\354\354]]!", "U!LLU!LL!!U!LLU!LL!!U!LLU!LLU!LLU!LL!!U!LLU!LL!!U!LLU!LL!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "nullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull\200}}`nullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull]]!" + "'", str2, "nullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull\200}}`nullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull]]!");
    }

    @Test
    public void test10115() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10115");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.encode("\u0108\u0108\u0108\u0108\u0108\u0108\u0108\u0108\u0108\u0108\u0108\u0108\u0108\u0108\u0108\u0108\u0108\u0108\u0108\u0108\u0108\u0108\u0108\u0108\u0108\u0108\u0108\u0108\u0108\u0108\u0108\u0108\u0108\u0108\u0108\u0108\u0108\u0108\u0108\u0108\u0108\u0108\u0108\u0108\u0108\u0108\u0108\u0108\u0108\u0108\u0108\u0108\u0108\u0108\u0108\u0108\u0108\u0108\u0108\u0108\u0108\u0108\u0108\u0108\u0108\u0108\u0108\u0108\u0108\u0108\u0108\u0108\u0108\u0108\u0108\u0108\u0108\u0108\u0108\u0108\u0108\u0108\u0108\u0108\u0108\u0108\u0108\u0108\u0108\u0108\u0108\u0108\u0108\u0108\u0108\u0108\u0108\u0108\u0108\u0108\u0108\u0108\u0108\u0108\u0108\u0108\u0108\u0108\u0108\u0108\u0108\u0108\u0108\u0108\u0108\u0108\u0108\u0108\u0108\u0108\u0108\u0108\u0108\u0108\u0108\u0108\u0108\u0108\u0108\u0108\u0108\u0108\u0108\u0108\u0108\u0108\u0108\u0108\u0108\u0108\u0108\u0108\u0108\u0108\u0108\u0108\u0108\u0108\u0108\u0108\u0108\u0108\u0108\u0108\u0108\u0108\u0108\u0108\u0108\u0108```
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "UU!!UUU```UU!!UUU```UU!!UUU```UU!!UUU```UU!!UUU```UU!!UUU```UU!!UUU```UU!!UUU```UU!!UUU```UU!!UUU```UU!!UUU```UU!!UUU```UU!!UUU```UU!!UUU```UU!!UUU```UU!!UUU```UU!!UUU```UU!!UUU```UU!!UUU```UU!!UUU```UU!!UUU```UU!!UUU```UU!!UUU```UU!!UUU```UU!!UUU```UU!!UUU```UU!!UUU```UU!!UUU```UU!!UUU```UU!!UUU```UU!!UUU```UU!!UUU```!" + "'", str2, "UU!!UUU```UU!!UUU```UU!!UUU```UU!!UUU```UU!!UUU```UU!!UUU```UU!!UUU```UU!!UUU```UU!!UUU```UU!!UUU```UU!!UUU```UU!!UUU```UU!!UUU```UU!!UUU```UU!!UUU```UU!!UUU```UU!!UUU```UU!!UUU```UU!!UUU```UU!!UUU```UU!!UUU```UU!!UUU```UU!!UUU```UU!!UUU```UU!!UUU```UU!!UUU```UU!!UUU```UU!!UUU```UU!!UUU```UU!!UUU```UU!!UUU```UU!!UUU```!");
    }

    @Test
    public void test10116() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10116");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.encode("", "\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
    }

    @Test
    public void test10117() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10117");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.decodenullnull\236\276\276\230\226nullnull\236\276\276!!\230\226nullnull\236\276\276\230\226nullnull\236\276\276!!\230\226nullnull\236\276\276\230\226nullnull\236\276\276\230\226nullnull\236\276\276\230\226nullnull\236\276\276!!\230\226nullnull\236\276\276\230\226nullnull\236\276\276!!\230\226nullnull\236\276\276\230\226nullnull\236\276\276!");
        org.junit.Assert.assertEquals("'" + strstr
    }

    @Test
    public void test10118() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10118");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.decodeu0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348~~!!!\200\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348~~!!!]]!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "!null!\200\200null!\200\200null!\200\200null!\200\200!!!null!\200\200null!\200\200null!\200\200null!\200\200!!!!!null!\200\200null!\200\200null!\200\200null!\200\200!!!null!\200\200null!\200\200null!\200\200null!\200\200!!!!!null!\200\200null!\200\200null!\200\200null!\200\200!!!null!\200\200null!\200\200null!\200\200null!\200\200!!!!!null!\200\200null!\200\200null!\200\200null!\200\200!!!null!\200\200null!\200\200null!\200\200null!\200\200!!!!!null!\200\200null!\200\200null!\200\200null!\200\200!!!null!\200\200null!\200\200null!\200\200null!\200\200!!!!!null!\200\200null!\200\200null!\200\200null!\200\200!!!null!\200\200null!\200\200null!\200\200null!\200\200!!!!!null!\200\200null!\200\200null!\200\200null!\200\200!!!null!\200\200null!\200\200null!\200\200null!\200\200!!!!!null!\200\200null!\200\200null!\200\200null!\200\200!!!null!\200\200null!\200\200null!\200\200null!\200\200!!!!!" + "'", str2, "!null!\200\200null!\200\200null!\200\200null!\200\200!!!null!\200\200null!\200\200null!\200\200null!\200\200!!!!!null!\200\200null!\200\200null!\200\200null!\200\200!!!null!\200\200null!\200\200null!\200\200null!\200\200!!!!!null!\200\200null!\200\200null!\200\200null!\200\200!!!null!\200\200null!\200\200null!\200\200null!\200\200!!!!!null!\200\200null!\200\200null!\200\200null!\200\200!!!null!\200\200null!\200\200null!\200\200null!\200\200!!!!!null!\200\200null!\200\200null!\200\200null!\200\200!!!null!\200\200null!\200\200null!\200\200null!\200\200!!!!!null!\200\200null!\200\200null!\200\200null!\200\200!!!null!\200\200null!\200\200null!\200\200null!\200\200!!!!!null!\200\200null!\200\200null!\200\200null!\200\200!!!null!\200\200null!\200\200null!\200\200null!\200\200!!!!!null!\200\200null!\200\200null!\200\200null!\200\200!!!null!\200\200null!\200\200null!\200\200null!\200\200!!!!!");
    }

    @Test
    public void test10119() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10119");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.decode("\u0366\u0365\u0368\u0368\u010d\u010e\u0110\u0110\u010d\u010e\u0110\u0110\u010d\u010e\u0110\u0110\u010d\u010e\u0110\u0110\u010d\u010e\u0110\u0110\u010d\u010e\u0110\u0110\u010d\u010e\u0110\u0110\u010d\u010e\u0110\u0110\u010d\u010e\u0110\u0110\u010d\u010e\u0110\u0110\u010d\u010e\u0110\u0110\u010d\u010e\u0110\u0110\u010d\u010e\u0110\u0110\u010d\u010e\u0110\u0110\u010d\u010e\u0110\u0110\u010d\u010e\u0110\u0110\u0346\u0348\u0348!", "null\200~~null\200~~nullnullnull\200~~null\200~~nullnull!!null\200~~null\200~~nullnullnull\200~~null\200~~nullnull!!null\200~~null\200~~nullnullnull\200~~null\200~~nullnullnull\200~~null\200~~nullnullnull\200~~null\200~~nullnull!!null\200~~null\200~~nullnullnull\200~~null\200~~nullnull!!null\200~~null\200~~nullnullnull\200~~null\200~~nullnull!");
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\u0366\u0365\u0368\u0368\u0346\u0348\u0348!" + "'", str2, "\u0366\u0365\u0368\u0368\u0346\u0348\u0348!");
    }

    @Test
    public void test10120() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10120");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.decode("NLNNNLNNnullN\214\214nullN\214\214NLNNNLNNnullN\214\214nullN\214\214NLNNNLNNnullN\214\214nullN\214\214NLNNNLNNnullN\214\214nullN\214\214NLNNNLNNnullN\214\214nullN\214\214NLNNNLNNnullN\214\214nullN\214\214NLNNNLNNnullN\214\214nullN\214\214NLNNNLNNnullN\214\214nullN\214\214!", "U\230LLnn!!!!U\230LLnn!!!!!!U\230LLnn!!!!U\230LLnn!!!!!!U\230LLnn!!!!U\230LLnn!!!!!!U\230LLnn!!!!U\230LLnn!!!!!!U\230LLnn!!!!U\230LLnn!!!!!!U\230LLnn!!!!U\230LLnn!!!!!!U\230LLnn!!!!U\230LLnn!!!!!!U\230LLnn!!!!U\230LLnn!!!!!!!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\352\350\352\352\352\350\352\352\u010a\u0105\u0108\u0108\352\214\214\u010a\u0105\u0108\u0108\352\214\214\352\350\352\352\352\350\352\352\u010a\u0105\u0108\u0108\352\214\214\u010a\u0105\u0108\u0108\352\214\214\352\350\352\352\352\350\352\352\u010a\u0105\u0108\u0108\352\214\214\u010a\u0105\u0108\u0108\352\214\214\352\350\352\352\352\350\352\352\u010a\u0105\u0108\u0108\352\214\214\u010a\u0105\u0108\u0108\352\214\214\352\350\352\352\352\350\352\352\u010a\u0105\u0108\u0108\352\214\214\u010a\u0105\u0108\u0108\352\214\214\352\350\352\352\352\350\352\352\u010a\u0105\u0108\u0108\352\214\214\u010a\u0105\u0108\u0108\352\214\214\352\350\352\352\352\350\352\352\u010a\u0105\u0108\u0108\352\214\214\u010a\u0105\u0108\u0108\352\214\214\352\350\352\352\352\350\352\352\u010a\u0105\u0108\u0108\352\214\214\u010a\u0105\u0108\u0108\352\214\214!" + "'", str2, "\352\350\352\352\352\350\352\352\u010a\u0105\u0108\u0108\352\214\214\u010a\u0105\u0108\u0108\352\214\214\352\350\352\352\352\350\352\352\u010a\u0105\u0108\u0108\352\214\214\u010a\u0105\u0108\u0108\352\214\214\352\350\352\352\352\350\352\352\u010a\u0105\u0108\u0108\352\214\214\u010a\u0105\u0108\u0108\352\214\214\352\350\352\352\352\350\352\352\u010a\u0105\u0108\u0108\352\214\214\u010a\u0105\u0108\u0108\352\214\214\352\350\352\352\352\350\352\352\u010a\u0105\u0108\u0108\352\214\214\u010a\u0105\u0108\u0108\352\214\214\352\350\352\352\352\350\352\352\u010a\u0105\u0108\u0108\352\214\214\u010a\u0105\u0108\u0108\352\214\214\352\350\352\352\352\350\352\352\u010a\u0105\u0108\u0108\352\214\214\u010a\u0105\u0108\u0108\352\214\214\352\350\352\352\352\350\352\352\u010a\u0105\u0108\u0108\352\214\214\u010a\u0105\u0108\u0108\352\214\214!");
    }

    @Test
    public void test10121() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10121");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.decode("nullnullnullnullabddabddabddabddnullnullnullnullabddabdd!", "nullnullnullnull\220nullnullnullnullnullnullnullnull\200}}`nullnullnullnull\220nullnullnullnullnullnullnullnull]]!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\303\304\306\306\303\304\306\306\303\304\306\306\303\304\306\306nullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull\303\304\306\306\303\304\306\306\303\304\306\306\303\304\306\306nullnullnullnullnullnullnullnull!" + "'", str2, "\303\304\306\306\303\304\306\306\303\304\306\306\303\304\306\306nullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull\303\304\306\306\303\304\306\306\303\304\306\306\303\304\306\306nullnullnullnullnullnullnullnull!");
    }

    @Test
    public void test10122() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10122");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.decode("\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346!", "\u0101\u0104\u0104\u0101\u0104\u0104\u0101\u0104\u0104\u0101\u0104\u0104\u0101\u0104\u0104\u0101\u0104\u0104\u0101\u0104\u0104\u0101\u0104\u0104\u0101\u0104\u0104\u0101\u0104\u0104\u0101\u0104\u0104\u0101\u0104\u0104\u0101\u0104\u0104\u0101\u0104\u0104\u0101\u0104\u0104\u0101\u0104\u0104!!!!!");
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\u0106\u0107\u0109\u0109\u0106\u0107\u0109\u0109\u0106\u0107\u0109\u0109\u0106\u0107\u0109\u0109\u0346\u0346\u0106\u0107\u0109\u0109\u0106\u0107\u0109\u0109\u0106\u0107\u0109\u0109\u0106\u0107\u0109\u0109\u0346\u0346\u0106\u0107\u0109\u0109\u0106\u0107\u0109\u0109\u0106\u0107\u0109\u0109\u0106\u0107\u0109\u0109\u0346\u0346\u0106\u0107\u0109\u0109\u0106\u0107\u0109\u0109\u0106\u0107\u0109\u0109\u0106\u0107\u0109\u0109\u0346\u0346\u0106\u0107\u0109\u0109\u0106\u0107\u0109\u0109\u0106\u0107\u0109\u0109\u0106\u0107\u0109\u0109\u0346\u0346\u0106\u0107\u0109\u0109\u0106\u0107\u0109\u0109\u0106\u0107\u0109\u0109\u0106\u0107\u0109\u0109\u0346\u0346\u0106\u0107\u0109\u0109\u0106\u0107\u0109\u0109\u0106\u0107\u0109\u0109\u0106\u0107\u0109\u0109\u0346\u0346\u0106\u0107\u0109\u0109\u0106\u0107\u0109\u0109\u0106\u0107\u0109\u0109\u0106\u0107\u0109\u0109\u0346\u0346!" + "'", str2, "\u0106\u0107\u0109\u0109\u0106\u0107\u0109\u0109\u0106\u0107\u0109\u0109\u0106\u0107\u0109\u0109\u0346\u0346\u0106\u0107\u0109\u0109\u0106\u0107\u0109\u0109\u0106\u0107\u0109\u0109\u0106\u0107\u0109\u0109\u0346\u0346\u0106\u0107\u0109\u0109\u0106\u0107\u0109\u0109\u0106\u0107\u0109\u0109\u0106\u0107\u0109\u0109\u0346\u0346\u0106\u0107\u0109\u0109\u0106\u0107\u0109\u0109\u0106\u0107\u0109\u0109\u0106\u0107\u0109\u0109\u0346\u0346\u0106\u0107\u0109\u0109\u0106\u0107\u0109\u0109\u0106\u0107\u0109\u0109\u0106\u0107\u0109\u0109\u0346\u0346\u0106\u0107\u0109\u0109\u0106\u0107\u0109\u0109\u0106\u0107\u0109\u0109\u0106\u0107\u0109\u0109\u0346\u0346\u0106\u0107\u0109\u0109\u0106\u0107\u0109\u0109\u0106\u0107\u0109\u0109\u0106\u0107\u0109\u0109\u0346\u0346\u0106\u0107\u0109\u0109\u0106\u0107\u0109\u0109\u0106\u0107\u0109\u0109\u0106\u0107\u0109\u0109\u0346\u0346!");
    }

    @Test
    public void test10123() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10123");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.encode("\u0366\u0365\u0368\u0368\u0346\u0348\u0348!", "null!nullnullnullnull!!nullnull!!nullnull!!nullnull!!null!nullnullnullnull!!nullnull!!!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\u0366\u0365\u0368\u0368\u0346\u0348\u0348!" + "'", str2, "\u0366\u0365\u0368\u0368\u0346\u0348\u0348!");
    }

    @Test
    public void test10124() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10124");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.encode("\u026c\u026c\u026a\u026a\u026c\u026c\u026a\u026a\u026c\u026c\u026a\u026a\u026c\u026c\u026c\u026c\u026c\u026c\u026c\u026c\u026c\u026c\u026c\u026c\u026c\u026c\u026c\u026c\u026c\u026c\u026c\u026c\u026c\u026c\u026c\u026c\u026c\u026c\u026c\u026c\u026c\u026c\u026c\u026c\u026c\u026c\u026c\u026c\u026a\u026a\u026c\u026c\u026a\u026a\u026c\u026c\u026a\u026a\u026c\u026c\u026c\u026c\u026c\u026c\u026c\u026c\u026c\u026c\u026c\u026c\u026c\u026c\u026c\u026c\u026c\u026c!!!", "\u013d\u013d\u013d\u013d\u013d\u013d\u013d\u013d\u013d\u013d\u013d\u013d\u013d\u013d\u013d\u013dnullnullnullnull!");
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "nullnull!!nullnullnullnullnullnullnullnullnullnullnullnullnullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnullnullnullnullnullnullnullnullnullnullnullnullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!!" + "'", str2, "nullnull!!nullnullnullnullnullnullnullnullnullnullnullnullnullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnullnullnullnullnullnullnullnullnullnullnullnullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!!");
    }

    @Test
    public void test10125() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10125");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.encode("\305\306\310\310\310\305\306\306\310\305\306\306\310\305\306\306\310\305\306\306\305\306\310\310\310\305\306\306\310\305\306\306!", "null!nullnullnull!nullnullnull!nullnullnull!nullnull\200}}`null!nullnullnull!nullnullnull!nullnullnull!nullnull]]!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "nulllnuulnuulnuulnuunulllnuulnuu!" + "'", str2, "nulllnuulnuulnuulnuunulllnuulnuu!");
    }

    @Test
    public void test10126() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10126");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.decodeu0143\u0143\u0143\u0143\u0143\u0143\u0143\u0143\u0143\u0143\u0143\u0143\u0143\u0143\u0143\u0143\u0143\u0143\u0143\u0143\u0143\u0143\u0143\u0143\u0143\u0143\u0143\u0143\u0143\u0143\u0143\u0143\u0143\u0143\u0143\u0143\u0143\u0143\u0143\u0143\u0143\u0143\u0143\u0143\u0143\u0143\u0143\u0143\u0143\u0143\u0143\u0143\u0143\u0143\u0143\u0143\u0143\u0143\u0143\u0143\u0143\u0143\u0143\u0143\u0143\u0143\u0143\u0143\u0143\u0143\u0143\u0143\u0143\u0143\u0143\u0143\u0143\u0143\u0143\u0143\u0143\u0143\u0143\u0143\u0143\u0143\u0143\u0143\u0143\u0143\u0143\u0143\u0143\u0143\u0143\u0143!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\220\220\216\216\220\220\216\216nullnull]]nullnull]]nullnull]]nullnull]]nullnull]]nullnull]]nullnull]]nullnull]]\220\220\216\216\220\220\216\216nullnull]]nullnull]]nullnull]]nullnull]]nullnull]]nullnull]]nullnull]]nullnull]]\220\220\216\216\220\220\216\216nullnull]]nullnull]]nullnull]]nullnull]]nullnull]]nullnull]]nullnull]]nullnull]]\220\220\216\216\220\220\216\216nullnull]]nullnull]]nullnull]]nullnull]]nullnull]]nullnull]]nullnull]]nullnull]]\220\220\216\216\220\220\216\216nullnull]]nullnull]]nullnull]]nullnull]]nullnull]]nullnull]]nullnull]]nullnull]]\220\220\216\216\220\220\216\216nullnull]]nullnull]]nullnull]]nullnull]]nullnull]]nullnull]]nullnull]]nullnull]]\220\220\216\216\220\220\216\216nullnull]]nullnull]]nullnull]]nullnull]]nullnull]]nullnull]]nullnull]]nullnull]]\220\220\216\216\220\220\216\216nullnull]]nullnull]]nullnull]]nullnull]]nullnull]]nullnull]]nullnull]]nullnull]]!" + "'", str2, "\220\220\216\216\220\220\216\216nullnull]]nullnull]]nullnull]]nullnull]]nullnull]]nullnull]]nullnull]]nullnull]]\220\220\216\216\220\220\216\216nullnull]]nullnull]]nullnull]]nullnull]]nullnull]]nullnull]]nullnull]]nullnull]]\220\220\216\216\220\220\216\216nullnull]]nullnull]]nullnull]]nullnull]]nullnull]]nullnull]]nullnull]]nullnull]]\220\220\216\216\220\220\216\216nullnull]]nullnull]]nullnull]]nullnull]]nullnull]]nullnull]]nullnull]]nullnull]]\220\220\216\216\220\220\216\216nullnull]]nullnull]]nullnull]]nullnull]]nullnull]]nullnull]]nullnull]]nullnull]]\220\220\216\216\220\220\216\216nullnull]]nullnull]]nullnull]]nullnull]]nullnull]]nullnull]]nullnull]]nullnull]]\220\220\216\216\220\220\216\216nullnull]]nullnull]]nullnull]]nullnull]]nullnull]]nullnull]]nullnull]]nullnull]]\220\220\216\216\220\220\216\216nullnull]]nullnull]]nullnull]]nullnull]]nullnull]]nullnull]]nullnull]]nullnull]]!");
    }

    @Test
    public void test10127() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10127");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.encode("\230\215\230\230\230\215\230\230!!\230\215\230\230\230\215\230\230!!\230\215\230\230\230\215\230\230!!\230\215\230\230\230\215\230\230!!\230\215\230\230\230\215\230\230!!\230\215\230\230\230\215\230\230!!\230\215\230\230\230\215\230\230!!\230\215\230\230\230\215\230\230!!!", "}!\200\200}!\200\200}!\200\200}!\200\200\230null\215\215\230null\215\215\230null\215\215\230null\215\215\230null\215\215\230null\215\215\230null\215\215\230null\215\215\230null\215\215\230null\215\215\230null\215\215\230null\215\215\230null\215\215\230null\215\215\230null\215\215\230null\215\215}!\200\200}!\200\200}!\200\200}!\200\200\230null\215\215\230null\215\215\230null\215\215\230null\215\215\230null\215\215\230null\215\215\230null\215\215\230null\215\215!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\230\215\230\230\230\215\230\230!!\230\215\230\230\230\215\230\230!!\230\215\230\230\230\215\230\230!!\230\215\230\230\230\215\230\230!!\230\215\230\230\230\215\230\230!!\230\215\230\230\230\215\230\230!!\230\215\230\230\230\215\230\230!!\230\215\230\230\230\215\230\230!!!" + "'", str2, "\230\215\230\230\230\215\230\230!!\230\215\230\230\230\215\230\230!!\230\215\230\230\230\215\230\230!!\230\215\230\230\230\215\230\230!!\230\215\230\230\230\215\230\230!!\230\215\230\230\230\215\230\230!!\230\215\230\230\230\215\230\230!!\230\215\230\230\230\215\230\230!!!");
    }

    @Test
    public void test10128() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10128");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.encode("\220\220\216\216\220\220\216\216nullnullnullnullnullnullnullnull\220\220\216\216\220\220\216\216nullnullnullnullnullnullnullnull\220\220\216\216\220\220\216\216nullnullnullnullnullnullnullnull\220\220\216\216\220\220\216\216nullnullnullnullnullnullnullnull\220\220\216\216\220\220\216\216nullnullnullnullnullnullnullnull\220\220\216\216\220\220\216\216nullnullnullnullnullnullnullnull\220\220\216\216\220\220\216\216nullnullnullnullnullnullnullnull\220\220\216\216\220\220\216\216nullnullnullnullnullnullnullnull!", "lnlllnlllnlllnll```lnlllnlllnlllnll```lnlllnlllnlllnll```lnlllnlllnlllnll```lnlllnlllnlllnll```lnlllnlllnlllnll```lnlllnlllnlllnll```lnlllnlllnlllnll```lnlllnlllnlllnll```lnlllnlllnlllnll```lnlllnlllnlllnll```lnlllnlllnlllnll```lnlllnlllnlllnll```lnlllnlllnlllnll```lnlllnlllnlllnll```lnlllnlllnlllnll```lnlllnlllnlllnll```lnlllnlllnlllnll```lnlllnlllnlllnll```lnlllnlllnlllnll```lnlllnlllnlllnll```lnlllnlllnlllnll```lnlllnlllnlllnll```lnlllnlllnlllnll```lnlllnlllnlllnll```lnlllnlllnlllnll```lnlllnlllnlllnll```lnlllnlllnlllnll```lnlllnlllnlllnll```lnlllnlllnlllnll```lnlllnlllnlllnll```lnlllnlllnlllnll```!");
        org.junit.Assert.assertEquals("'" + strstr2, "\220\220\216\216\220\220\216\216LLNNLLNNLLNNLLNNLLNNLLNNLLNNLLNN\220\220\216\216\220\220\216\216LLNNLLNNLLNNLLNNLLNNLLNNLLNNLLNN\220\220\216\216\220\220\216\216LLNNLLNNLLNNLLNNLLNNLLNNLLNNLLNN\220\220\216\216\220\220\216\216LLNNLLNNLLNNLLNNLLNNLLNNLLNNLLNN\220\220\216\216\220\220\216\216LLNNLLNNLLNNLLNNLLNNLLNNLLNNLLNN\220\220\216\216\220\220\216\216LLNNLLNNLLNNLLNNLLNNLLNNLLNNLLNN\220\220\216\216\220\220\216\216LLNNLLNNLLNNLLNNLLNNLLNNLLNNLLNN\220\220\216\216\220\220\216\216LLNNLLNNLLNNLLNNLLNNLLNNLLNNLLNN!");
    }

    @Test
    public void test10129() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10129");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.decode("~}\200\200~}\200\200\u0379\u0379\u0379\u0379~}\200\200~}\200\200\u0379\u0379\u0379\u0379~}\200\200~}\200\200\u0379\u0379\u0379\u0379~}\200\200~}\200\200\u0379\u0379\u0379\u0379~}\200\200~}\200\200\u0379\u0379\u0379\u0379~}\200\200~}\200\200\u0379\u0379\u0379\u0379~}\200\200~}\200\200\u0379\u0379\u0379\u0379~}\200\200~}\200\200\u0379\u0379\u0379\u
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "~}\200\200~}\200\200\u0379\u0379\u0379\u0379~}\200\200~}\200\200\u0379\u0379\u0379\u0379~}\200\200~}\200\200\u0379\u0379\u0379\u0379~}\200\200~}\200\200\u0379\u0379\u0379\u0379~}\200\200~}\200\200\u0379\u0379\u0379\u0379~}\200\200~}\200\200\u0379\u0379\u0379\u0379~}\200\200~}\200\200\u0379\u0379\u0379\u0379~}\200\200~}\200\200\u0379\u0379\u0379\u0379!" + "'", str2, "~}\200\200~}\200\200\u0379\u0379\u0379\u0379~}\200\200~}\200\200\u0379\u0379\u0379\u0379~}\200\200~}\200\200\u0379\u0379\u0379\u0379~}\200\200~}\200\200\u0379\u0379\u0379\u0379~}\200\200~}\200\200\u0379\u0379\u0379\u0379~}\200\200~}\200\200\u0379\u0379\u0379\u0379~}\200\200~}\200\200\u0379\u0379\u0379\u0379~}\200\200~}\200\200\u0379\u0379\u0379\u0379!");
    }

    @Test
    public void test10130() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10130");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.decode("NULL\225\223\223\275\275\275NULL\225\223\223\275\275\275!!NULL\225\223\223\275\275\275NULL\225\223\223\275\275\275!!NULL\225\223\223\275\275\275NULL\225\223\223\275\275\275NULL\225\223\223\275\275\275NULL\225\223\223\275\275\275!!NULL\225\223\223\275\275\275NULL\225\223\223\275\275\275!!NULL\225\223\223\275\275\275NULL\225\223\223\275\275\275!", "!]!!!]!!!!!]!!!]!!!!!]!!!]!!!]!!!]!!!!!]!!!]!!!!!]!!!]!!!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "nullnullnullnull\225\223\223\275\275\275nullnullnullnull\225\223\223\275\275\275!!nullnullnullnull\225\223\223\275\275\275nullnullnullnull\225\223\223\275\275\275!!nullnullnullnull\225\223\223\275\275\275nullnullnullnull\225\223\223\275\275\275nullnullnullnull\225\223\223\275\275\275nullnullnullnull\225\223\223\275\275\275!!nullnullnullnull\225\223\223\275\275\275nullnullnullnull\225\223\223\275\275\275!!nullnullnullnull\225\223\223\275\275\275nullnullnullnull\225\223\223\275\275\275!" + "'", str2, "nullnullnullnull\225\223\223\275\275\275nullnullnullnull\225\223\223\275\275\275!!nullnullnullnull\225\223\223\275\275\275nullnullnullnull\225\223\223\275\275\275!!nullnullnullnull\225\223\223\275\275\275nullnullnullnull\225\223\223\275\275\275nullnullnullnull\225\223\223\275\275\275nullnullnullnull\225\223\223\275\275\275!!nullnullnullnull\225\223\223\275\275\275nullnullnullnull\225\223\223\275\275\275!!nullnullnullnull\225\223\223\275\275\275nullnullnullnull\225\223\223\275\275\275!");
    }

    @Test
    public void test10131() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10131");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.encode("\223]\223\223\223]\223\223!!\223]\223\223\223]\223\223!!\223]\223\223\223]\223\223\223]\223\223\223]\223\223!!\223]\223\223\223]\223\223!!\223]\223\223\223]\223\223!", "\u019d\u019d\u019d\u019d\u019d\u019d\u019d\u019d\u019d\u019d\u019d\u019d\u019d\u019d\u019d\u019d\u019d\u019d\u019d\u019d\u019d\u019d\u019d\u019d\u019d\u019d\u019d\u019d\u019d\u019d\u019d\u019d\u019d\u019d\u019d\u019d\u019d\u019d\u019d\u019d\u019d\u019d\u019d\u019d\u019d\u019d\u019d\u019d\u019d\u019d\u019d\u019d\u019d\u019d\u019d\u019d\u019d\u019d\u019d\u019d\u019d\u019d\u019d\u019d\u019d\u019d\u019d\u019d\u019d\u019d\u019d\u019d\u019d\u019d\u019d\u019d\u019d\u019d\u019d\u019d\u019d\u019d\u019d\u019d\u019d\u019d\u019d\u019d\u019d\u019d\u019d\u019d\u019d\u019d\u019d\u019d!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\223]\223\223\223]\223\223!!\223]\223\223\223]\223\223!!\223]\223\223\223]\223\223\223]\223\223\223]\223\223!!\223]\223\223\223]\223\223!!\223]\223\223\223]\223\223!" + "'", str2, "\223]\223\223\223]\223\223!!\223]\223\223\223]\223\223!!\223]\223\223\223]\223\223\223]\223\223\223]\223\223!!\223]\223\223\223]\223\223!!\223]\223\223\223]\223\223!");
    }

    @Test
    public void test10132() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10132");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.encode("", "\u03dd\u03e0\u03e0\u03dd\u03e0\u03e0\u03dd\u03e0\u03e0\u03dd\u03e0\u03e0\u03dd\u03e0\u03e0\u03dd\u03e0\u03e0!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
    }

    @Test
    public void test10133() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10133");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.decode("`!!nullnullnullnullnullnullnullnull!!nullnullnullnullnullnullnullnull!!nullnullnullnullnullnullnullnull`!!nullnullnullnullnullnullnullnull!!nullnullnullnullnullnullnullnull!!nullnullnullnullnullnullnullnull!", "\230\226\256!LU!!LU!!\256!LU!!LU!!\236\276\276\230\226\256!LU!!LU!!\256!LU!!LU!!\236\276\276!!\230\226\256!LU!!LU!!\256!LU!!LU!!\236\276\276\230\226\256!LU!!LU!!\256!LU!!LU!!\236\276\276!!\230\226\256!LU!!LU!!\256!LU!!LU!!\236\276\276\230\226\256!LU!!LU!!\256!LU!!LU!!\236\276\276\230\226\256!LU!!LU!!\256!LU!!LU!!\236\276\276\230\226\256!LU!!LU!!\256!LU!!LU!!\236\276\276!!\230\226\256!LU!!LU!!\256!LU!!LU!!\236\276\276\230\226\256!LU!!LU!!\256!LU!!LU!!\236\276\276!!\230\226\256!LU!!LU!!\256!LU!!LU!!\236\276\276\230\226\256!LU!!LU!!\256!LU!!LU!!\236\276\276!");
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\u018f\u018e\u018e\u018f\u018e\u018e\u018f\u018e\u018e\u018f\u018e\u018e\u018f\u018e\u018e\u018f\u018e\u018e\u018f\u018e\u018e\u018f\u018e\u018e\u018f\u018e\u018e\u018f\u018e\u018e\u018f\u018e\u018e\u018f\u018e\u018e\u018f\u018e\u018e\u018f\u018e\u018e\u018f\u018e\u018e\u018f\u018e\u018e\u018f\u018e\u018e\u018f\u018e\u018e\u018f\u018e\u018e\u018f\u018e\u018e\u018f\u018e\u018e\u018f\u018e\u018e\u018f\u018e\u018e\u018f\u018e\u018e\u018f\u018e\u018e\u018f\u018e\u018e\u018f\u018e\u018e\u018f\u018e\u018e\u018f\u018e\u018e\u018f\u018e\u018e\u018f\u018e\u018e\u018f\u018e\u018e\u018f\u018e\u018e\u018f\u018e\u018e\u018f\u018e\u018e\u018f\u018e\u018e\u018f\u018e\u018e\u018f\u018e\u018e\u018f\u018e\u018e\u018f\u018e\u018e\u018f\u018e\u018e\u018f\u018e\u018e\u018f\u018e\u018e\u018f\u018e\u018e\u018f\u018e\u018e\u018f\u018e\u018e\u018f\u018e\u018e\u018f\u018e\u018e!" + "'", str2, "\u018f\u018e\u018e\u018f\u018e\u018e\u018f\u018e\u018e\u018f\u018e\u018e\u018f\u018e\u018e\u018f\u018e\u018e\u018f\u018e\u018e\u018f\u018e\u018e\u018f\u018e\u018e\u018f\u018e\u018e\u018f\u018e\u018e\u018f\u018e\u018e\u018f\u018e\u018e\u018f\u018e\u018e\u018f\u018e\u018e\u018f\u018e\u018e\u018f\u018e\u018e\u018f\u018e\u018e\u018f\u018e\u018e\u018f\u018e\u018e\u018f\u018e\u018e\u018f\u018e\u018e\u018f\u018e\u018e\u018f\u018e\u018e\u018f\u018e\u018e\u018f\u018e\u018e\u018f\u018e\u018e\u018f\u018e\u018e\u018f\u018e\u018e\u018f\u018e\u018e\u018f\u018e\u018e\u018f\u018e\u018e\u018f\u018e\u018e\u018f\u018e\u018e\u018f\u018e\u018e\u018f\u018e\u018e\u018f\u018e\u018e\u018f\u018e\u018e\u018f\u018e\u018e\u018f\u018e\u018e\u018f\u018e\u018e\u018f\u018e\u018e\u018f\u018e\u018e\u018f\u018e\u018e\u018f\u018e\u018e\u018f\u018e\u018e\u018f\u018e\u018e\u018f\u018e\u018e!");
    }

    @Test
    public void test10134() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10134");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.decode("ULLLULLLULLLULLL!!!```ULLLULLLULLLULLL!!!```ULLLULLLULLLULLL!!!```ULLLULLLULLLULLL!!!```ULLLULLLULLLULLL!!!```ULLLULLLULLLULLL!!!```ULLLULLLULLLULLL!!!```ULLLULLLULLLULLL!!!```ULLLULLLULLLULLL!!!```ULLLULLLULLLULLL!!!```ULLLULLLULLLULLL!!!```ULLLULLLULLLULLL!!!```ULLLULLLULLLULLL!!!```ULLLULLLULLLULLL!!!```ULLLULLLULLLULLL!!!```ULLLULLLULLLULLL!!!```ULLLULLLULLLULLL!!!```ULLLULLLULLLULLL!!!```ULLLULLLULLLULLL!!!```ULLLULLLULLLULLL!!!```ULLLULLLULLLULLL!!!```ULLLULLLULLLULLL!!!```ULLLULLLULLLULLL!!!```ULLLULLLULLLULLL!!!```ULLLULLLULLLULLL!!!```ULLLULLLULLLULLL!!!```ULLLULLLULLLULLL!!!```ULLLULLLULLLULLL!!!```ULLLULLLULLLULLL!!!```ULLLULLLULLLULLL!!!```ULLLULLLULLLULLL!!!```ULLLULLLULLLULLL!!!```!", "\u031e\u031e\u031e\u031e\u031e\u031e\u031e\u031eUNLLLUUUNLLLUU!");
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "rppprppprppprppp!!!```rppprppprppprppp!!!```rppprppprppprppp!!!```rppprppprppprppp!!!```rppprppprppprppp!!!```rppprppprppprppp!!!```rppprppprppprppp!!!```rppprppprppprppp!!!```rppprppprppprppp!!!```rppprppprppprppp!!!```rppprppprppprppp!!!```rppprppprppprppp!!!```rppprppprppprppp!!!```rppprppprppprppp!!!```rppprppprppprppp!!!```rppprppprppprppp!!!```rppprppprppprppp!!!```rppprppprppprppp!!!```rppprppprppprppp!!!```rppprppprppprppp!!!```rppprppprppprppp!!!```rppprppprppprppp!!!```rppprppprppprppp!!!```rppprppprppprppp!!!```rppprppprppprppp!!!```rppprppprppprppp!!!```rppprppprppprppp!!!```rppprppprppprppp!!!```rppprppprppprppp!!!```rppprppprppprppp!!!```rppprppprppprppp!!!```rppprppprppprppp!!!```!" + "'", str2, "rppprppprppprppp!!!```rppprppprppprppp!!!```rppprppprppprppp!!!```rppprppprppprppp!!!```rppprppprppprppp!!!```rppprppprppprppp!!!```rppprppprppprppp!!!```rppprppprppprppp!!!```rppprppprppprppp!!!```rppprppprppprppp!!!```rppprppprppprppp!!!```rppprppprppprppp!!!```rppprppprppprppp!!!```rppprppprppprppp!!!```rppprppprppprppp!!!```rppprppprppprppp!!!```rppprppprppprppp!!!```rppprppprppprppp!!!```rppprppprppprppp!!!```rppprppprppprppp!!!```rppprppprppprppp!!!```rppprppprppprppp!!!```rppprppprppprppp!!!```rppprppprppprppp!!!```rppprppprppprppp!!!```rppprppprppprppp!!!```rppprppprppprppp!!!```rppprppprppprppp!!!```rppprppprppprppp!!!```rppprppprppprppp!!!```rppprppprppprppp!!!```rppprppprppprppp!!!```!");
    }

    @Test
    public void test10135() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10135");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.encode("~}\200\200~}\200\200L!LLL!LLURRRURRRL!LLL!LLURRRURRR~}\200\200~}\200\200L!LLL!LLURRRURRRL!LLL!LLURRRURRR~}\200\200~}\200\200L!LLL!LLURRRURRRL!LLL!LLURRRURRR~}\200\200~}\200\200L!LLL!LLURRRURRRL!LLL!LLURRRURRR~}\200\200~}\200\200L!LLL!LLURRRURRRL!LLL!LLURRRURRR~}\200\200~}\200\200L!LLL!LLURRRURRRL!LLL!LLURRRURRR~}\200\200~}\200\200L!LLL!LLURRRURRRL!LLL!LLURRRURRR~}\200\200~}\200\200L!LLL!LLURRRURRRL!LLL!LLURRRURRR!", "!!UU!!UU!!UU!!UU!!UU!!UU!!UU!!UU!!UU!!UU!U!!!U!!!!UU!!UU!U!!!U!!!!UU!!UU!!UU!!UU!!UU!!UU!!UU!!UU!!UU!!UU!U!!!U!!!!UU!!UU!U!!!U!!!!UU!!UU!!UU!!UU!!UU!!UU!!UU!!UU!!UU!!UU!U!!!U!!!!UU!!UU!U!!!U!!!!UU!!UU!!UU!!UU!!UU!!UU!!UU!!UU!!UU!!UU!U!!!U!!!!UU!!UU!U!!!U!!!!UU!!UU!!UU!!UU!!UU!!UU!!UU!!UU!!UU!!UU!U!!!U!!!!UU!!UU!U!!!U!!!!UU!!UU!!UU!!UU!!UU!!UU!!UU!!UU!!UU!!UU!U!!!U!!!!UU!!UU!U!!!U!!!!UU!!UU!!UU!!UU!!UU!!UU!!UU!!UU!!UU!!UU!U!!!U!!!!UU!!UU!U!!!U!!!!UU!!UU!!UU!!UU!!UU!!UU!!UU!!UU!!UU!!UU!U!!!U!!!!UU!!UU!U!!!U!!!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "~}\200\200~}\200\200U!UUU!UU!!!!!!!!U!UUU!UU!!!!!!!!~}\200\200~}\200\200U!UUU!UU!!!!!!!!U!UUU!UU!!!!!!!!~}\200\200~}\200\200U!UUU!UU!!!!!!!!U!UUU!UU!!!!!!!!~}\200\200~}\200\200U!UUU!UU!!!!!!!!U!UUU!UU!!!!!!!!~}\200\200~}\200\200U!UUU!UU!!!!!!!!U!UUU!UU!!!!!!!!~}\200\200~}\200\200U!UUU!UU!!!!!!!!U!UUU!UU!!!!!!!!~}\200\200~}\200\200U!UUU!UU!!!!!!!!U!UUU!UU!!!!!!!!~}\200\200~}\200\200U!UUU!UU!!!!!!!!U!UUU!UU!!!!!!!!!" + "'", str2, "~}\200\200~}\200\200U!UUU!UU!!!!!!!!U!UUU!UU!!!!!!!!~}\200\200~}\200\200U!UUU!UU!!!!!!!!U!UUU!UU!!!!!!!!~}\200\200~}\200\200U!UUU!UU!!!!!!!!U!UUU!UU!!!!!!!!~}\200\200~}\200\200U!UUU!UU!!!!!!!!U!UUU!UU!!!!!!!!~}\200\200~}\200\200U!UUU!UU!!!!!!!!U!UUU!UU!!!!!!!!~}\200\200~}\200\200U!UUU!UU!!!!!!!!U!UUU!UU!!!!!!!!~}\200\200~}\200\200U!UUU!UU!!!!!!!!U!UUU!UU!!!!!!!!~}\200\200~}\200\200U!UUU!UU!!!!!!!!U!UUU!UU!!!!!!!!!");
    }

    @Test
    public void test10136() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10136");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.decode("\u01ac\u01ac\u01ac\u01ac\u01ac\u01ac
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "^^^^]null^^]null^^]null^^]null^^^^^^]null^^]null^^!" + "'", str2, "^^^^]null^^]null^^]null^^]null^^^^^^]null^^]null^^!");
    }

    @Test
    public void test10137() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10137");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.decode("unllunllnullnullunllunllnullnullunllunllnullnullunllunllnullnullunllunllnullnullunllunllnullnullunllunllnullnullunllunllnullnull
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\u02ec\u02ee\u02eb\u02eb\u02ec\u02ee\u02eb\u02eb\u02ee\u02ec\u02eb\u02eb\u02ee\u02ec\u02eb\u02eb\u02ec\u02ee\u02eb\u02eb\u02ec\u02ee\u02eb\u02eb\u02ee\u02ec\u02eb\u02eb\u02ee\u02ec\u02eb\u02eb\u02ec\u02ee\u02eb\u02eb\u02ec\u02ee\u02eb\u02eb\u02ee\u02ec\u02eb\u02eb\u02ee\u02ec\u02eb\u02eb\u02ec\u02ee\u02eb\u02eb\u02ec\u02ee\u02eb\u02eb\u02ee\u02ec\u02eb\u02eb\u02ee\u02ec\u02eb\u02eb\u02ec\u02ee\u02eb\u02eb\u02ec\u02ee\u02eb\u02eb\u02ee\u02ec\u02eb\u02eb\u02ee\u02ec\u02eb\u02eb\u02ec\u02ee\u02eb\u02eb\u02ec\u02ee\u02eb\u02eb\u02ee\u02ec\u02eb\u02eb\u02ee\u02ec\u02eb\u02eb\u02ec\u02ee\u02eb\u02eb\u02ec\u02ee\u02eb\u02eb\u02ee\u02ec\u02eb\u02eb\u02ee\u02ec\u02eb\u02eb\u02ec\u02ee\u02eb\u02eb\u02ec\u02ee\u02eb\u02eb\u02ee\u02ec\u02eb\u02eb\u02ee\u02ec\u02eb\u02eb!" + "'", str2, "\u02ec\u02ee\u02eb\u02eb\u02ec\u02ee\u02eb\u02eb\u02ee\u02ec\u02eb\u02eb\u02ee\u02ec\u02eb\u02eb\u02ec\u02ee\u02eb\u02eb\u02ec\u02ee\u02eb\u02eb\u02ee\u02ec\u02eb\u02eb\u02ee\u02ec\u02eb\u02eb\u02ec\u02ee\u02eb\u02eb\u02ec\u02ee\u02eb\u02eb\u02ee\u02ec\u02eb\u02eb\u02ee\u02ec\u02eb\u02eb\u02ec\u02ee\u02eb\u02eb\u02ec\u02ee\u02eb\u02eb\u02ee\u02ec\u02eb\u02eb\u02ee\u02ec\u02eb\u02eb\u02ec\u02ee\u02eb\u02eb\u02ec\u02ee\u02eb\u02eb\u02ee\u02ec\u02eb\u02eb\u02ee\u02ec\u02eb\u02eb\u02ec\u02ee\u02eb\u02eb\u02ec\u02ee\u02eb\u02eb\u02ee\u02ec\u02eb\u02eb\u02ee\u02ec\u02eb\u02eb\u02ec\u02ee\u02eb\u02eb\u02ec\u02ee\u02eb\u02eb\u02ee\u02ec\u02eb\u02eb\u02ee\u02ec\u02eb\u02eb\u02ec\u02ee\u02eb\u02eb\u02ec\u02ee\u02eb\u02eb\u02ee\u02ec\u02eb\u02eb\u02ee\u02ec\u02eb\u02eb!");
    }

    @Test
    public void test10138() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10138");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.decode("~}\200\200~}\200\200!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\230\230!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\230\230~}\200\200~}\200\200!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\230\230!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\230\230~}\200\200~}\200\200!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\230\230!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\230\230~}\200\200~}\200\200!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\230\230!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\230\230~}\200\200~}\200\200!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\230\230!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\230\230~}\200\200~}\200\200!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\230\230!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\230\230~}\200\200~}\200\200!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\230\230!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\230\230~}\200\200~}\200\200!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\230\230!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\230\230!", "\335\336\340\340\335\336\340\340!!\335\336\340\340\335\336\340\340!!\335\336\340\340\335\336\340\340!!\335\336\340\340\335\336\340\340!!\335\336\340\340\335\336\340\340!!\335\336\340\340\335\336\340\340!!\335\336\340\340\335\336\340\340!!\335\336\340\340\335\336\340\340!!!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "~}\200\200~}\200\200!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\230\230!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\230\230~}\200\200~}\200\200!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\230\230!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\230\230~}\200\200~}\200\200!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\230\230!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\230\230~}\200\200~}\200\200!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\230\230!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\230\230~}\200\200~}\200\200!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\230\230!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\230\230~}\200\200~}\200\200!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\230\230!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\230\230~}\200\200~}\200\200!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\230\230!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\230\230~}\200\200~}\200\200!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\230\230!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\230\230!" + "'", str2, "~}\200\200~}\200\200!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\230\230!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\230\230~}\200\200~}\200\200!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\230\230!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\230\230~}\200\200~}\200\200!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\230\230!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\230\230~}\200\200~}\200\200!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\230\230!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\230\230~}\200\200~}\200\200!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\230\230!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\230\230~}\200\200~}\200\200!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\230\230!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\230\230~}\200\200~}\200\200!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\230\230!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\230\230~}\200\200~}\200\200!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\230\230!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\230\230!");
    }

    @Test
    public void test10139() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10139");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.encode("\215\216\230\230\u014e\u014c\u014e\u014c\u014e\u014c~~\215\216\230\230\u014e\u014c\u014e\u014c\u014e\u014c~~\215\216\230\230\u014e\u014c\u014e\u014c\u014e\u014c~~\215\216\230\230\u014e\u014c\u014e\u014c\u014e\u014c~~\215\216\230\230\u014e\u014c\u014e\u014c\u014e\u014c~~\215\216\230\230\u014e\u014c\u014e\u014c\u014e\u014c~~\215\216\230\230\u014e\u014c\u014e\u014c\u014e\u014c~~\215\216\230\230\u014e\u014c\u014e\u014c\u014e\u014c~~!", "]uuuu]uuu]]]]]uuuu]uuu]]]]!!]uuuu]uuu]]]]]uuuu]uuu]]]]!!]uuuu]uuu]]]]]uuuu]uuu]]]]!!]uuuu]uuu]]]]]uuuu]uuu]]]]!!]uuuu]uuu]]]]]uuuu]uuu]]]]!!]uuuu]uuu]]]]]uuuu]uuu]]]]!!]uuuu]uuu]]]]]uuuu]uuu]]]]!!]uuuu]uuu]]]]]uuuu]uuu]]]]!!!");
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\215\216\230\230nullnull~~nullnull~~nullnull~~\215\216\230\230nullnull~~nullnull~~nullnull~~\215\216\230\230nullnull~~nullnull~~nullnull~~\215\216\230\230nullnull~~nullnull~~nullnull~~\215\216\230\230nullnull~~nullnull~~nullnull~~\215\216\230\230nullnull~~nullnull~~nullnull~~\215\216\230\230nullnull~~nullnull~~nullnull~~\215\216\230\230nullnull~~nullnull~~nullnull~~!" + "'", str2, "\215\216\230\230nullnull~~nullnull~~nullnull~~\215\216\230\230nullnull~~nullnull~~nullnull~~\215\216\230\230nullnull~~nullnull~~nullnull~~\215\216\230\230nullnull~~nullnull~~nullnull~~\215\216\230\230nullnull~~nullnull~~nullnull~~\215\216\230\230nullnull~~nullnull~~nullnull~~\215\216\230\230nullnull~~nullnull~~nullnull~~\215\216\230\230nullnull~~nullnull~~nullnull~~!");
    }

    @Test
    public void test10140() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10140");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.encode("}null!!!\200\200}null!!!\200\200}null!!!\200\200}null!!!\200\200null!~~null!~~null!~~null!~~null!~~null!~~null!~~null!~~null!~~null!~~null!~~null!~~null!~~null!~~null!~~null!~~}null!!!\200\200}null!!!\200\200}null!!!\200\200}null!!!\200\200null!~~null!~~null!~~null!~~null!~~null!~~null!~~null!~~!", "\215}\215\215\215}\215\215nullnullnullnull\215}\215\215\215}\215\215!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "}unll!!!\200\200}unll!!!\200\200}unll!!!\200\200}unll!!!\200\200unll!~~unll!~~unll!~~unll!~~unll!~~unll!~~unll!~~unll!~~unll!~~unll!~~unll!~~unll!~~unll!~~unll!~~unll!~~unll!~~}unll!!!\200\200}unll!!!\200\200}unll!!!\200\200}unll!!!\200\200unll!~~unll!~~unll!~~unll!~~unll!~~unll!~~unll!~~unll!~~!" + "'", str2, "}unll!!!\200\200}unll!!!\200\200}unll!!!\200\200}unll!!!\200\200unll!~~unll!~~unll!~~unll!~~unll!~~unll!~~unll!~~unll!~~unll!~~unll!~~unll!~~unll!~~unll!~~unll!~~unll!~~unll!~~}unll!!!\200\200}unll!!!\200\200}unll!!!\200\200}unll!!!\200\200unll!~~unll!~~unll!~~unll!~~unll!~~unll!~~unll!~~unll!~~!");
    }

    @Test
    public void test10141() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10141");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.encode("!!~!\200\200~!\200\200!!!!!!!!~!\200\200~!\200\200!!!!!!!!!!~!\200\200~!\200\200!!!!!!!!~!\200\200~!\200\200!!!!!!!!!!~!\200\200~!\200\200!!!!!!!!~!\200\200~!\200\200!!!!!!!!!!~!\200\200~!\200\200!!!!!!!!~!\200\200~!\200\200!!!!!!!!!!~!\200\200~!\200\200!!!!!!!!~!\200\200~!\200\200!!!!!!!!!!~!\200\200~!\200\200!!!!!!!!~!\200\200~!\200\200!!!!!!!!!!~!\200\200~!\200\200!!!!!!!!~!\200\200~!\200\200!!!!!!!!!!~!\200\200~!\200\200!!!!!!!!~!\200\200~!\200\200!!!!!!!!!", "!III!III!!!III!III!!!III!III!III!III!III!III!III!III!III!III!!!III!III!!!III!III!III!III!III!III!III!III!III!III!!!III!III!!!III!III!III!III!III!III!III!III!III!III!!!III!III!!!III!III!III!III!III!III!III!III!III!III!!!III!III!!!III!III!III!III!III!III!III!III!III!III!!!III!III!!!III!III!III!III!III!III!III!III!III!III!!!III!III!!!III!III!III!III!III!III!III!III!III!III!!!III!III!!!III!III!III!III!III!III!III!III!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "!!~!\200\200~!\200\200!!!!!!!!~!\200\200~!\200\200!!!!!!!!!!~!\200\200~!\200\200!!!!!!!!~!\200\200~!\200\200!!!!!!!!!!~!\200\200~!\200\200!!!!!!!!~!\200\200~!\200\200!!!!!!!!!!~!\200\200~!\200\200!!!!!!!!~!\200\200~!\200\200!!!!!!!!!!~!\200\200~!\200\200!!!!!!!!~!\200\200~!\200\200!!!!!!!!!!~!\200\200~!\200\200!!!!!!!!~!\200\200~!\200\200!!!!!!!!!!~!\200\200~!\200\200!!!!!!!!~!\200\200~!\200\200!!!!!!!!!!~!\200\200~!\200\200!!!!!!!!~!\200\200~!\200\200!!!!!!!!!" + "'", str2, "!!~!\200\200~!\200\200!!!!!!!!~!\200\200~!\200\200!!!!!!!!!!~!\200\200~!\200\200!!!!!!!!~!\200\200~!\200\200!!!!!!!!!!~!\200\200~!\200\200!!!!!!!!~!\200\200~!\200\200!!!!!!!!!!~!\200\200~!\200\200!!!!!!!!~!\200\200~!\200\200!!!!!!!!!!~!\200\200~!\200\200!!!!!!!!~!\200\200~!\200\200!!!!!!!!!!~!\200\200~!\200\200!!!!!!!!~!\200\200~!\200\200!!!!!!!!!!~!\200\200~!\200\200!!!!!!!!~!\200\200~!\200\200!!!!!!!!!!~!\200\200~!\200\200!!!!!!!!~!\200\200~!\200\200!!!!!!!!!");
    }

    @Test
    public void test10142() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10142");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.encode("^```^```^```^```^```^```^```^```^```^```U\331\225\225U\331\225\225^```^```U\331\225\225U\331\225\225^```^```^```^```^```^```^```^```^```^```U\331\225\225U\331\225\225^```^```U\331\225\225U\331\225\225^```^```^```^```^```^```^```^```^```^```U\331\225\225U\331\225\225^```^```U\331\225\225U\331\225\225^```^```^```^```^```^```^```^```^```^```U\331\225\225U\331\225\225^```^```U\331\225\225U\331\225\225^```^```^```^```^```^```^```^```^```^```U\331\225\225U\331\225\225^```^```U\331\225\225U\331\225\225^```^```^```^```^```^```^```^```^```^```U\331\225\225U\331\225\225^```^```U\331\225\225U\331\225\225^```^```^```^```^```^```^```^```^```^```U\331\225\225U\331\225\225^```^```U\331\225\225U\331\225\225^```^```^```^```^```^```^```^```^```^```U\331\225\225U\331\225\225^```^```U\331\225\225U\331\225\225!", "\200null!!\200null!!\200null!!\200null!!\200null!!\200null!!\200null!!\200null!!!!\200null!!\200null!!\200null!!\200null!!~~\200null!!\200null!!\200null!!\200null!!\200null!!\200null!!\200null!!\200null!!!!\200null!!\200null!!\200null!!\200null!!~~\200null!!\200null!!\200null!!\200null!!\200null!!\200null!!\200null!!\200null!!!!\200null!!\200null!!\200null!!\200null!!~~\200null!!\200null!!\200null!!\200null!!\200null!!\200null!!\200null!!\200null!!!!\200null!!\200null!!\200null!!\200null!!~~\200null!!\200null!!\200null!!\200null!!\200null!!\200null!!\200null!!\200null!!!!\200null!!\200null!!\200null!!\200null!!~~\200null!!\200null!!\200null!!\200null!!\200null!!\200null!!\200null!!\200null!!!!\200null!!\200null!!\200null!!\200null!!~~\200null!!\200null!!\200null!!\200null!!\200null!!\200null!!\200null!!\200null!!!!\200null!!\200null!!\200null!!\200null!!~~\200null!!\200null!!\200null!!\200null!!\200null!!\200null!!\200null!!\200null!!!!\200null!!\200null!!\200null!!\200null!!~~!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "^```^```^```^```^```^```^```^```^```^```!!\225\225!!\225\225^```^```!!\225\225!!\225\225^```^```^```^```^```^```^```^```^```^```!!\225\225!!\225\225^```^```!!\225\225!!\225\225^```^```^```^```^```^```^```^```^```^```!!\225\225!!\225\225^```^```!!\225\225!!\225\225^```^```^```^```^```^```^```^```^```^```!!\225\225!!\225\225^```^```!!\225\225!!\225\225^```^```^```^```^```^```^```^```^```^```!!\225\225!!\225\225^```^```!!\225\225!!\225\225^```^```^```^```^```^```^```^```^```^```!!\225\225!!\225\225^```^```!!\225\225!!\225\225^```^```^```^```^```^```^```^```^```^```!!\225\225!!\225\225^```^```!!\225\225!!\225\225^```^```^```^```^```^```^```^```^```^```!!\225\225!!\225\225^```^```!!\225\225!!\225\225!" + "'", str2, "^```^```^```^```^```^```^```^```^```^```!!\225\225!!\225\225^```^```!!\225\225!!\225\225^```^```^```^```^```^```^```^```^```^```!!\225\225!!\225\225^```^```!!\225\225!!\225\225^```^```^```^```^```^```^```^```^```^```!!\225\225!!\225\225^```^```!!\225\225!!\225\225^```^```^```^```^```^```^```^```^```^```!!\225\225!!\225\225^```^```!!\225\225!!\225\225^```^```^```^```^```^```^```^```^```^```!!\225\225!!\225\225^```^```!!\225\225!!\225\225^```^```^```^```^```^```^```^```^```^```!!\225\225!!\225\225^```^```!!\225\225!!\225\225^```^```^```^```^```^```^```^```^```^```!!\225\225!!\225\225^```^```!!\225\225!!\225\225^```^```^```^```^```^```^```^```^```^```!!\225\225!!\225\225^```^```!!\225\225!!\225\225!");
    }

    @Test
    public void test10143() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10143");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.encode("\u0368\u0368~~!", "LUUULUUU\254\254LUUULUUU\254\254]]LUUULUUU\254\254LUUULUUU\254\254]]\214LUUULUUU\254\254LUUULUUU\254\254LUUULUUU\254\254\214LUUULUUU\254\254LUUULUUU\254\254LUUULUUU\254\254LUUULUUU\254\254LUUULUUU\254\254]]LUUULUUU\254\254LUUULUUU\254\254]]\214LUUULUUU\254\254LUUULUUU\254\254LUUULUUU\254\254\214LUUULUUU\254\254LUUULUUU\254\254LUUULUUU\254\254!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\u0368\u0368~~!" + "'", str2, "\u0368\u0368~~!");
    }

    @Test
    public void test10144() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10144");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.decode("\u0317\u031a\u0317\u031a\u0317\u031a\u0317\u031anullnull!", "\275\u010c\u010c\275\u010c\u010c!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\u0317\u031a\u0317\u031a\u0317\u031a\u0317\u031anullnullnullnullnullnullnullnull!" + "'", str2, "\u0317\u031a\u0317\u031a\u0317\u031a\u0317\u031anullnullnullnullnullnullnullnull!");
    }

    @Test
    public void test10145() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10145");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.decode("", "}~\200\200}~\200\200\300N\275\275\300N\275\275\300N\275\275\300N\275\275^\300N\275\275\300N\275\275\300N\275\275\300N\275\275\300N\275\275\300N\275\275\300N\275\275\300N\275\275\300N\275\275\300N\275\275\300N\275\275\300N\275\275^\300N\275\275\300N\275\275\300N\275\275\300N\275\275\300N\275\275\300N\275\275\300N\275\275\300N\275\275}~\200\200}~\200\200\300N\275\275\300N\275\275\300N\275\275\300N\275\275^\300N\275\275\300N\275\275\300N\275\275\300N\275\275\300N\275\275\300N\275\275\300N\275\275\300N\275\275\300N\275\275\300N\275\275\300N\275\275\300N\275\275^\300N\275\275\300N\275\275\300N\275\275\300N\275\275\300N\275\275\300N\275\275\300N\275\275\300N\275\275!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
    }

    @Test
    public void test10146() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10146");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.encode("", "!null!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
    }

    @Test
    public void test10147() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10147");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.encode("!\220NN\200~~!\220NN\200~~!\220NN!\220NN!\220NN\200~~!\220NN\200~~!\220NN!\220NN!!!\220NN\200~~!\220NN\200~~!\220NN!\220NN!\220NN\200~~!\220NN\200~~!\220NN!\220NN!!!\220NN\200~~!\220NN\200~~!\220NN!\220NN!\220NN\200~~!\220NN\200~~!\220NN!\220NN!\220NN\200~~!\220NN\200~~!\220NN!\220NN!\220NN\200~~!\220NN\200~~!\220NN!\220NN!!!\220NN\200~~!\220NN\200~~!\220NN!\220NN!\220NN\200~~!\220NN\200~~!\220NN!\220NN!!!\220NN\200~~!\220NN\200~~!\220NN!\220NN!\220NN\200~~!\220NN\200~~!\220NN!\220NN!", "}~\200\200}~\200\200UL!!UL!!UL!!UL!!UL!!UL!!UL!!UL!!UL!!UL!!UL!!UL!!UL!!UL!!UL!!UL!!UL!!UL!!UL!!UL!!UL!!UL!!UL!!UL!!UL!!UL!!UL!!UL!!UL!!UL!!UL!!UL!!}~\200\200}~\200\200UL!!UL!!UL!!UL!!UL!!UL!!UL!!UL!!UL!!UL!!UL!!UL!!UL!!UL!!UL!!UL!!UL!!UL!!UL!!UL!!UL!!UL!!UL!!UL!!UL!!UL!!UL!!UL!!UL!!UL!!UL!!UL!!!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "!\220LL\200~~!\220LL\200~~!\220LL!\220LL!\220LL\200~~!\220LL\200~~!\220LL!\220LL!!!\220LL\200~~!\220LL\200~~!\220LL!\220LL!\220LL\200~~!\220LL\200~~!\220LL!\220LL!!!\220LL\200~~!\220LL\200~~!\220LL!\220LL!\220LL\200~~!\220LL\200~~!\220LL!\220LL!\220LL\200~~!\220LL\200~~!\220LL!\220LL!\220LL\200~~!\220LL\200~~!\220LL!\220LL!!!\220LL\200~~!\220LL\200~~!\220LL!\220LL!\220LL\200~~!\220LL\200~~!\220LL!\220LL!!!\220LL\200~~!\220LL\200~~!\220LL!\220LL!\220LL\200~~!\220LL\200~~!\220LL!\220LL!" + "'", str2, "!\220LL\200~~!\220LL\200~~!\220LL!\220LL!\220LL\200~~!\220LL\200~~!\220LL!\220LL!!!\220LL\200~~!\220LL\200~~!\220LL!\220LL!\220LL\200~~!\220LL\200~~!\220LL!\220LL!!!\220LL\200~~!\220LL\200~~!\220LL!\220LL!\220LL\200~~!\220LL\200~~!\220LL!\220LL!\220LL\200~~!\220LL\200~~!\220LL!\220LL!\220LL\200~~!\220LL\200~~!\220LL!\220LL!!!\220LL\200~~!\220LL\200~~!\220LL!\220LL!\220LL\200~~!\220LL\200~~!\220LL!\220LL!!!\220LL\200~~!\220LL\200~~!\220LL!\220LL!\220LL\200~~!\220LL\200~~!\220LL!\220LL!");
    }

    @Test
    public void test10148() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10148");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.encode("\300\300!!\300\300!!!", "nullnull``nullnull``nullnull``nullnull``nullnull``nullnull``nullnull``nullnull``!!nullnull``nullnull``nullnull``nullnull``nullnull``nullnull``nullnull``nullnull``!!nullnull``nullnull``nullnull``nullnull``nullnull``nullnull``nullnull``nullnull``nullnull``nullnull``nullnull``nullnull``nullnull``nullnull``nullnull``nullnull``!!nullnull``nullnull``nullnull``nullnull``nullnull``nullnull``nullnull``nullnull``!!nullnull``nullnull``nullnull``nullnull``nullnull``nullnull``nullnull``nullnull``!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "UU!!UU!!!" + "'", str2, "UU!!UU!!!");
    }

    @Test
    public void test10149() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10149");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.decode("^^^^]null^^]null^^]null^^]null^^^^^^]null^^]null^^!", "\216\216u!llu!ll\216\216u!llu!ll\216\216u!llu!ll\216\216u!llu!ll\216\216u!llu!ll\216\216u!llu!ll\216\216u!llu!ll\216\216u!llu!ll!!\216\216u!llu!ll\216\216u!llu!ll\216\216u!llu!ll\216\216u!llu!ll\216\216u!llu!ll\216\216u!llu!ll\216\216u!llu!ll\216\216u!llu!ll!!\216\216u!llu!ll\216\216u!llu!ll\216\216u!llu!ll\216\216u!llu!ll\216\216u!llu!ll\216\216u!llu!ll\216\216u!llu!ll\216\216u!llu!ll\216\216u!llu!ll\216\216u!llu!ll\216\216u!llu!ll\216\216u!llu!ll\216\216u!llu!ll\216\216u!llu!ll\216\216u!llu!ll\216\216u!llu!ll!!\216\216u!llu!ll\216\216u!llu!ll\216\216u!llu!ll\216\216u!llu!ll\216\216u!llu!ll\216\216u!llu!ll\216\216u!llu!ll\216\216u!llu!ll!!\216\216u!llu!ll\216\216u!llu!ll\216\216u!llu!ll\216\216u!llu!ll\216\216u!llu!ll\216\216u!llu!ll\216\216u!llu!ll\216\216u!llu!ll!");
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\u0245\u0248\u0248\u0245\u0248\u0248\u0245\u0248\u0248\u0245\u0248\u0248\u0245\u0248\u0248\u0245\u0248\u0248^^!" + "'", str2, "\u0245\u0248\u0248\u0245\u0248\u0248\u0245\u0248\u0248\u0245\u0248\u0248\u0245\u0248\u0248\u0245\u0248\u0248^^!");
    }

    @Test
    public void test10150() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10150");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.decode("!!\271\271!!\271\271\271\271!!\271\271!!!!\271\271!!\271\271\271\271!!\271\271!!!", "\275nullL]]]nullnullnullL]]]nullnullnullL]]]nullnull\275nullL]]]nullnullnullL]]]nullnullnullL]]]nullnull\275nullL]]]nullnullnullL]]]nullnullnullL]]]nullnull\275nullL]]]nullnullnullL]]]nullnullnullL]]]nullnullnullL]]]nullnullnullL]]]nullnull\275\275nullL]]]nullnullnullL]]]nullnull\275\275nullL]]]nullnullnullL]]]nullnull\275\275nullL]]]nullnullnullL]]]nullnull\275\275\275nullL]]]nullnullnullL]]]nullnullnullL]]]nullnull\275nullL]]]nullnullnullL]]]nullnullnullL]]]nullnull\275nullL]]]nullnullnullL]]]nullnullnullL]]]nullnull\275nullL]]]nullnullnullL]]]nullnullnullL]]]nullnullnullL]]]nullnullnullL]]]nullnull\275\275nullL]]]nullnullnullL]]]nullnull\275\275!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "!!\271\271!!\271\271\271\271!!\271\271!!!!\271\271!!\271\271\271\271!!\271\271!!!" + "'", str2, "!!\271\271!!\271\271\271\271!!\271\271!!!!\271\271!!\271\271\271\271!!\271\271!!!");
    }

    @Test
    public void test10151() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10151");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.encode("", "\300\336\336\336\300\336\336\336\300\336\336\336\300\336\336\336\300\336\336\336\300\336\336\336\300\336\336\336\300\336\336\336!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
    }

    @Test
    public void test10152() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10152");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.decode("N!!!N!!!N!!!N!!!\256\254\254N!!!N!!!N!!!N!!!\256\254\254!!N!!!N!!!N!!!N!!!\256\254\254N!!!N!!!N!!!N!!!\256\254\254!!N!!!N!!!N!!!N!!!\256\254\254N!!!N!!!N!!!N!!!\256\254\254!!N!!!N!!!N!!!N!!!\256\254\254N!!!N!!!N!!!N!!!\256\254\254!!N!!!N!!!N!!!N!!!\256\254\254N!!!N!!!N!!!N!!!\256\254\254!!N!!!N!!!N!!!N!!!\256\254\254N!!!N!!!N!!!N!!!\256\254\254!!N!!!N!!!N!!!N!!!\256\254\254N!!!N!!!N!!!N!!!\256\254\254!!N!!!N!!!N!!!N!!!\256\254\254N!!!N!!!N!!!N!!!\256\254\254!!!", "\276L\266\266~LL\276L\266\266~LL!!\276L\266\266~LL\276L\266\266~LL!!\276L\266\266~LL\276L\266\266~LL\276L\266\266~LL\276L\266\266~LL!!\276L\266\266~LL\276L\266\266~LL!!\276L\266\266~LL\276L\266\266~LL!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "null!!!null!!!null!!!null!!!\256\254\254null!!!null!!!null!!!null!!!\256\254\254!!null!!!null!!!null!!!null!!!\256\254\254null!!!null!!!null!!!null!!!\256\254\254!!null!!!null!!!null!!!null!!!\256\254\254null!!!null!!!null!!!null!!!\256\254\254!!null!!!null!!!null!!!null!!!\256\254\254null!!!null!!!null!!!null!!!\256\254\254!!null!!!null!!!null!!!null!!!\256\254\254null!!!null!!!null!!!null!!!\256\254\254!!null!!!null!!!null!!!null!!!\256\254\254null!!!null!!!null!!!null!!!\256\254\254!!null!!!null!!!null!!!null!!!\256\254\254null!!!null!!!null!!!null!!!\256\254\254!!null!!!null!!!null!!!null!!!\256\254\254null!!!null!!!null!!!null!!!\256\254\254!!!" + "'", str2, "null!!!null!!!null!!!null!!!\256\254\254null!!!null!!!null!!!null!!!\256\254\254!!null!!!null!!!null!!!null!!!\256\254\254null!!!null!!!null!!!null!!!\256\254\254!!null!!!null!!!null!!!null!!!\256\254\254null!!!null!!!null!!!null!!!\256\254\254!!null!!!null!!!null!!!null!!!\256\254\254null!!!null!!!null!!!null!!!\256\254\254!!null!!!null!!!null!!!null!!!\256\254\254null!!!null!!!null!!!null!!!\256\254\254!!null!!!null!!!null!!!null!!!\256\254\254null!!!null!!!null!!!null!!!\256\254\254!!null!!!null!!!null!!!null!!!\256\254\254null!!!null!!!null!!!null!!!\256\254\254!!null!!!null!!!null!!!null!!!\256\254\254null!!!null!!!null!!!null!!!\256\254\254!!!");
    }

    @Test
    public void test10153() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10153");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.encode("", "\u010d\u010d\u010d\u010d\u010d\u010d\u010d\u010d\u010d\u010d\u010d\u010d\u010d\u010d\u010d\u010d\u010d\u010d\u010d\u010d\u010d\u010d\u010d\u010d\u010d\u010d\u010d\u010d\u010d\u010d\u010d\u010d\u010d\u010d\u010d\u010d\u010d\u010d\u010d\u010d\u010d\u010d\u010d\u010d\u010d\u010d\u010d\u010d\u010d\u010d\u010d\u010d\u010d\u010d\u010d\u010d\u010d\u010d\u010d\u010d\u010d\u010d\u010d\u010d\u010d\u010d\u010d\u010d\u010d\u010d\u010d\u010d\u010d\u010d\u010d\u010d\u010d\u010d\u010d\u010d\u010d\u010d\u010d\u010d\u010d\u010d\u010d\u010d\u010d\u010d\u010d\u010d\u010d\u010d\u010d\u010d!!!!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
    }

    @Test
    public void test10154() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10154");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.encode("\u0366\u0365\u0368\u0368\u0366\u0365\u0368\u0368\u0366\u0365\u0368\u0368\u0366\u0365\u0368\u0368\u0366\u0365\u0368\u0368\u0366\u0365\u0368\u0368\u0366\u0365\u0368\u0368\u0366\u0365\u0368\u0368\u0366\u0365\u0368\u0368\u0366\u0365\u0368\u0368\u0366\u0365\u0368\u0368\u0366\u0365\u0368\u0368\u0366\u0365\u0368\u0368\u0366\u0365\u0368\u0368\u0366\u0365\u0368\u0368\u0366\u0365\u0368\u0368\u0366\u0365\u0368\u0368\u0366\u0365\u0368\u0368\u0366\u0365\u0368\u0368\u0366\u0365\u0368\u0368\u0366\u0365\u0368\u0368\u0366\u0365\u0368\u0368\u0366\u0365\u0368\u0368\u0366\u0365\u0368\u0368\u0366\u0365\u0368\u0368\u0366\u0365\u0368\u0368\u0366\u0365\u0368\u0368\u0366\u0365\u0368\u0368\u0366\u0365\u0368\u0368\u0366\u0365\u0368\u0368\u0366\u0365\u0368\u0368\u0366\u0365\u0368\u0368!", "LLNNLLNNLLNNLLNNLLNNLLNNLLNNLLNNLLNNLLNNNNLLNNLLNNNNLLNNLLNNLLNNLLNNLLNNLLNNLLNNLLNNLLNNLLNNNNLLNNLLNNNNLLNNLLNNLLNNLLNNLLNNLLNNLLNNLLNNLLNNLLNNNNLLNNLLNNNNLLNNLLNNLLNNLLNNLLNNLLNNLLNNLLNNLLNNLLNNNNLLNNLLNNNNLLNNLLNNLLNNLLNNLLNNLLNNLLNNLLNNLLNNLLNNNNLLNNLLNNNNLLNNLLNNLLNNLLNNLLNNLLNNLLNNLLNNLLNNLLNNNNLLNNLLNNNNLLNNLLNNLLNNLLNNLLNNLLNNLLNNLLNNLLNNLLNNNNLLNNLLNNNNLLNNLLNNLLNNLLNNLLNNLLNNLLNNLLNNLLNNLLNNNNLLNNLLNNNN!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\u0366\u0365\u0368\u0368\u0366\u0365\u0368\u0368\u0366\u0365\u0368\u0368\u0366\u0365\u0368\u0368\u0366\u0365\u0368\u0368\u0366\u0365\u0368\u0368\u0366\u0365\u0368\u0368\u0366\u0365\u0368\u0368\u0366\u0365\u0368\u0368\u0366\u0365\u0368\u0368\u0366\u0365\u0368\u0368\u0366\u0365\u0368\u0368\u0366\u0365\u0368\u0368\u0366\u0365\u0368\u0368\u0366\u0365\u0368\u0368\u0366\u0365\u0368\u0368\u0366\u0365\u0368\u0368\u0366\u0365\u0368\u0368\u0366\u0365\u0368\u0368\u0366\u0365\u0368\u0368\u0366\u0365\u0368\u0368\u0366\u0365\u0368\u0368\u0366\u0365\u0368\u0368\u0366\u0365\u0368\u0368\u0366\u0365\u0368\u0368\u0366\u0365\u0368\u0368\u0366\u0365\u0368\u0368\u0366\u0365\u0368\u0368\u0366\u0365\u0368\u0368\u0366\u0365\u0368\u0368\u0366\u0365\u0368\u0368\u0366\u0365\u0368\u0368!" + "'", str2, "\u0366\u0365\u0368\u0368\u0366\u0365\u0368\u0368\u0366\u0365\u0368\u0368\u0366\u0365\u0368\u0368\u0366\u0365\u0368\u0368\u0366\u0365\u0368\u0368\u0366\u0365\u0368\u0368\u0366\u0365\u0368\u0368\u0366\u0365\u0368\u0368\u0366\u0365\u0368\u0368\u0366\u0365\u0368\u0368\u0366\u0365\u0368\u0368\u0366\u0365\u0368\u0368\u0366\u0365\u0368\u0368\u0366\u0365\u0368\u0368\u0366\u0365\u0368\u0368\u0366\u0365\u0368\u0368\u0366\u0365\u0368\u0368\u0366\u0365\u0368\u0368\u0366\u0365\u0368\u0368\u0366\u0365\u0368\u0368\u0366\u0365\u0368\u0368\u0366\u0365\u0368\u0368\u0366\u0365\u0368\u0368\u0366\u0365\u0368\u0368\u0366\u0365\u0368\u0368\u0366\u0365\u0368\u0368\u0366\u0365\u0368\u0368\u0366\u0365\u0368\u0368\u0366\u0365\u0368\u0368\u0366\u0365\u0368\u0368\u0366\u0365\u0368\u0368!");
    }

    @Test
    public void test10155() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10155");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.encode("nullnull~~~~~nullnull~~~~~~~nullnull~~~~~nullnull~~~~~~~nullnull~~~~~nullnull~~~~~~~nullnull~~~~~nullnull~~~~~~~nullnull~~~~~nullnull~~~~~~~nullnull~~~~~nullnull~~~~~~~nullnull~~~~~nullnull~~~~~~~nullnull~~~~~nullnull~~~~~~~!", "UNLLUNLLNNUNLLUNLLNNUNLLUNLLNNUNLLUNLLNNUNLLUNLLNNUNLLUNLLNNUNLLUNLLNNUNLLUNLLNN!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "NLLLNLLL~~~~~NLLLNLLL~~~~~~~NLLLNLLL~~~~~NLLLNLLL~~~~~~~NLLLNLLL~~~~~NLLLNLLL~~~~~~~NLLLNLLL~~~~~NLLLNLLL~~~~~~~NLLLNLLL~~~~~NLLLNLLL~~~~~~~NLLLNLLL~~~~~NLLLNLLL~~~~~~~NLLLNLLL~~~~~NLLLNLLL~~~~~~~NLLLNLLL~~~~~NLLLNLLL~~~~~~~!" + "'", str2, "NLLLNLLL~~~~~NLLLNLLL~~~~~~~NLLLNLLL~~~~~NLLLNLLL~~~~~~~NLLLNLLL~~~~~NLLLNLLL~~~~~~~NLLLNLLL~~~~~NLLLNLLL~~~~~~~NLLLNLLL~~~~~NLLLNLLL~~~~~~~NLLLNLLL~~~~~NLLLNLLL~~~~~~~NLLLNLLL~~~~~NLLLNLLL~~~~~~~NLLLNLLL~~~~~NLLLNLLL~~~~~~~!");
    }

    @Test
    public void test10156() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10156");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.encode("LNLLLNLLLNLLLNLLLNLLLNLLLNLLLNLLLNLLLNLLLNLLLNLLLNLLLNLLLNLLLNLLLNLLLNLLLNLLLNLLLNLLLNLLLNLLLNLLLNLLLNLLLNLLLNLLLNLLLNLLLNLLLNLLLNLLLNLLLNLLLNLLLNLLLNLLLNLLLNLLLNLLLNLLLNLLLNLLLNLLLNLLLNLLLNLLLNLLLNLLLNLLLNLLLNLLLNLLLNLLLNLLLNLLLNLLLNLLLNLLLNLLLNLLLNLLLNLLLNLLLNLLLNLLLNLLLNLLLNLLLNLLLNLLLNLLLNLLLNLLLNLLLNLLLNLLLNLLLNLL!", "\215\216\230\230\u014e\u014c\u014e\u014c\u014e\u014c~~\215\216\230\230\u014e\u014c\u014e\u014c\u014e\u014c~~\215\216\230\230\u014e\u014c\u014e\u014c\u014e\u014c~~\215\216\230\230\u014e\u014c\u014e\u014c\u014e\u014c~~\215\216\230\230\u014e\u014c\u014e\u014c\u014e\u014c~~\215\216\230\230\u014e\u014c\u014e\u014c\u014e\u014c~~\215\216\230\230\u014e\u014c\u014e\u014c\u014e\u014c~~\215\216\230\230\u014e\u014c\u014e\u014c\u014e\u014c~~!");
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\u014c\u014c\u014c\u014c\u014c\u014c\u014c\u014c\u014c\u014c\u014c\u014c\u014c\u014c\u014c\u014c\u014c\u014c\u014c\u014c\u014c\u014c\u014c\u014c\u014c\u014c\u014c\u014c\u014c\u014c\u014c\u014c\u014c\u014c\u014c\u014c\u014c\u014c\u014c\u014c\u014c\u014c\u014c\u014c\u014c\u014c\u014c\u014c\u014c\u014c\u014c\u014c\u014c\u014c\u014c\u014c\u014c\u014c\u014c\u014c\u014c\u014c\u014c\u014c\u014c\u014c\u014c\u014c\u014c\u014c\u014c\u014c\u014c\u014c\u014c\u014c\u014c\u014c\u014c\u014c~~!" + "'", str2, "\u014c\u014c\u014c\u014c\u014c\u014c\u014c\u014c\u014c\u014c\u014c\u014c\u014c\u014c\u014c\u014c\u014c\u014c\u014c\u014c\u014c\u014c\u014c\u014c\u014c\u014c\u014c\u014c\u014c\u014c\u014c\u014c\u014c\u014c\u014c\u014c\u014c\u014c\u014c\u014c\u014c\u014c\u014c\u014c\u014c\u014c\u014c\u014c\u014c\u014c\u014c\u014c\u014c\u014c\u014c\u014c\u014c\u014c\u014c\u014c\u014c\u014c\u014c\u014c\u014c\u014c\u014c\u014c\u014c\u014c\u014c\u014c\u014c\u014c\u014c\u014c\u014c\u014c\u014c\u014c~~!");
    }

    @Test
    public void test10157() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10157");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.decode("\u013c\u013a\u013a\u013a\u013c\u013a\u013a\u013a\u013c\u013a\u013a\u013a\u013c\u013a\u013a\u013a\u013c\u013a\u013a\u013a\u013c\u013a\u013a\u013a\u013c\u013a\u013a\u013a\u013c\u013a\u013a\u013a\u013c\u013a\u013a\u013a\u013c\u013a\u013a\u013a\u013c\u013a\u013a\u013a\u013c\u013a\u013a\u013a\u013c\u013a\u013a\u013a\u013c\u013a\u013a\u013a\u013c\u013a\u013a\u013a\u013c\u013a\u013a\u013a\200\u013c\u013a\u013a\u013a\u013c\u013a\u013a\u013a\u013c\u013a\u013a\u013a\u013c\u013a\u013a\u013a\u013c\u013a\u013a\u013a\u013c\u013a\u013a\u013a\u013c\u013a\u013a\u013a\u013c\u013a\u013a\u013a\u013c\u013a\u013a\u013a\u013c\u013a\u013a\u013a\u013c\u013a\u013a\u013a\u013c\u013a\u013a\u013a\u013c\u013a\u013a\u013a\u013c\u013a\u013a\u013a\u013c\u013a\u013a\u013a\u013c\u013a\u013a\u013a]]!", "\u0260\u0260\u0240\u0240\u0260\u0260\u0240\u0240\u0260\u0260\u0240\u0240\u0260\u0260\u0240\u0240\u0260\u0260\u0240\u0240\u0260\u0260\u0240\u0240\u0260\u0260\u0240\u0240\u0260\u0260\u0240\u0240\u0260\u0260\u0240\u0240\u0260\u0260\u0240\u0240\u0260\u0260\u0240\u0240\u0260\u0260\u0240\u0240\u0260\u0260\u0240\u0240\u0260\u0260\u0240\u0240\u0260\u0260\u0240\u0240\u0260\u0260\u0240\u0240\u0260\u0260\u0240\u0240\u0260\u0260\u0240\u0240\u0260\u0260\u0240\u0240\u0260\u0260\u0240\u0240\u0260\u0260\u0240\u0240\u0260\u0260\u0240\u0240\u0260\u0260\u0240\u0240\u0260\u0260\u0240\u0240\u0260\u0260\u0240\u0240\u0260\u0260\u0240\u0240\u0260\u0260\u0240\u0240\u0260\u0260\u0240\u0240\u0260\u0260\u0240\u0240\u0260\u0260\u0240\u0240\u0260\u0260\u0240\u0240\u0260\u0260\u0240\u0240\u0260\u0260\u0240\u0240\u0260\u0260\u0240\u0240\u0260\u0260\u0240\u0240\u0260\u0260\u0240\u0240!");
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "nullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull\200}}`nullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull]]!" + "'", str2, "nullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull\200}}`nullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull]]!");
    }

    @Test
    public void test10158() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10158");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.encode("", "!!\276\276!!\276\276!!!!\276\276!!\276\276!!!!\276\276!!\276\276!!\276\276!!\276\276!!!!\276\276!!\276\276!!!!\276\276!!\276\276!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
    }

    @Test
    public void test10159() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10159");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.decode("efhh\200~~efhh\200~~efhhefhhefhh\200~~efhh\200~~efhhefhh!!efhh\200~~efhh\200~~efhhefhhefhh\200~~efhh\200~~efhhefhh!!efhh\200~~efhh\200~~efhhefhhefhh\200~~efhh\200~~efhhefhhefhh\200~~efhh\200~~efhhefhhefhh\200~~efhh\200~~efhhefhh!!efhh\200~~efhh\200~~efhhefhhefhh\200~~efhh\200~~efhhefhh!!efhh\200~~efhh\200~~efhhefhhefhh\200~~efhh\200~~efhhefhh!", "LUUULUUULUUULUUULUUULUUULUUULUUU!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "nullnullnullnull\200~~nullnullnullnull\200~~nullnullnullnullnullnullnullnullnullnullnullnull\200~~nullnullnullnull\200~~nullnullnullnullnullnullnullnull!!nullnullnullnull\200~~nullnullnullnull\200~~nullnullnullnullnullnullnullnullnullnullnullnull\200~~nullnullnullnull\200~~nullnullnullnullnullnullnullnull!!nullnullnullnull\200~~nullnullnullnull\200~~nullnullnullnullnullnullnullnullnullnullnullnull\200~~nullnullnullnull\200~~nullnullnullnullnullnullnullnullnullnullnullnull\200~~nullnullnullnull\200~~nullnullnullnullnullnullnullnullnullnullnullnull\200~~nullnullnullnull\200~~nullnullnullnullnullnullnullnull!!nullnullnullnull\200~~nullnullnullnull\200~~nullnullnullnullnullnullnullnullnullnullnullnull\200~~nullnullnullnull\200~~nullnullnullnullnullnullnullnull!!nullnullnullnull\200~~nullnullnullnull\200~~nullnullnullnullnullnullnullnullnullnullnullnull\200~~nullnullnullnull\200~~nullnullnullnullnullnullnullnull!" + "'", str2, "nullnullnullnull\200~~nullnullnullnull\200~~nullnullnullnullnullnullnullnullnullnullnullnull\200~~nullnullnullnull\200~~nullnullnullnullnullnullnullnull!!nullnullnullnull\200~~nullnullnullnull\200~~nullnullnullnullnullnullnullnullnullnullnullnull\200~~nullnullnullnull\200~~nullnullnullnullnullnullnullnull!!nullnullnullnull\200~~nullnullnullnull\200~~nullnullnullnullnullnullnullnullnullnullnullnull\200~~nullnullnullnull\200~~nullnullnullnullnullnullnullnullnullnullnullnull\200~~nullnullnullnull\200~~nullnullnullnullnullnullnullnullnullnullnullnull\200~~nullnullnullnull\200~~nullnullnullnullnullnullnullnull!!nullnullnullnull\200~~nullnullnullnull\200~~nullnullnullnullnullnullnullnullnullnullnullnull\200~~nullnullnullnull\200~~nullnullnullnullnullnullnullnull!!nullnullnullnull\200~~nullnullnullnull\200~~nullnullnullnullnullnullnullnullnullnullnullnull\200~~nullnullnullnull\200~~nullnullnullnullnullnullnullnull!");
    }

    @Test
    public void test10160() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10160");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.decode("\253null\260\260\253null\260\260!!\253null\260\260\253null\260\260!!!!\253null\260\260\253null\260\260!!\253null\260\260\253null\260\260!!!!\253null\260\260\253null\260\260!!\253null\260\260\253null\260\260!!!!\253null\260\260\253null\260\260!!\253null\260\260\253null\260\260!!!!\253null\260\260\253null\260\260!!\253null\260\260\253null\260\260!!!!\253null\260\260\253null\260\260!!\253null\260\260\253null\260\260!!!!\253null\260\260\253null\260\260!!\253null\260\260\253null\260\260!!!!\253null\260\260\253null\260\260!!\253null\260\260\253null\260\260!!!!!", "LNUULNUU!!LNUULNUU!!LNUULNUU!!LNUULNUU!!LNUULNUU!!LNUULNUU!!LNUULNUU!!LNUULNUU!!!");
        org.junit.Assert.assertEquals("'" + strstr
    }

    @Test
    public void test10161() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10161");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.encode("\u014e\u014e\u014e\u014e!!!", "ffff\236\276\276ffff\236\276\276!!ffff\236\276\276ffff\236\276\276!!ffff\236\276\276ffff\236\276\276ffff\236\276\276ffff\236\276\276!!ffff\236\276\276ffff\236\276\276!!ffff\236\276\276ffff\236\276\276!");
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "nullnull!!nullnull!!!" + "'", str2, "nullnull!!nullnull!!!");
    }

    @Test
    public void test10162() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10162");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.encode("\254UUU\254UUUU\254UUU\254UU\254UUU\254UUUU\254UUU\254UU\254UUU\254UUUU\254UUU\254UU\254UUU\254UUUU\254UUU\254UU\254UUU\254UUUU\254UUU\254UU\254UUU\254UUUU\254UUU\254UU\254UUU\254UUUU\254UUU\254UU\254UUU\254UUUU\254UUU\254UU!", "]nullnullnullnullnullnullnullnull!!nullnullnullnullnullnullnullnull!!nullnullnullnullnullnullnullnull!!nullnullnullnullnullnullnullnull!!nullnullnullnullnullnullnullnull!!]]nullnullnullnullnullnullnullnull!!nullnullnullnullnullnullnullnull!!]]nullnullnullnullnullnullnullnull!!nullnullnullnullnullnullnullnull!!]]nullnullnullnullnullnullnullnull!!nullnullnullnullnullnullnullnull!!]]]nullnullnullnullnullnullnullnull!!nullnullnullnullnullnullnullnull!!nullnullnullnullnullnullnullnull!!nullnullnullnullnullnullnullnull!!nullnullnullnullnullnullnullnull!!]]nullnullnullnullnullnullnullnull!!nullnullnullnullnullnullnullnull!!]]!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\254LLL\254LLLL\254LLL\254LL\254LLL\254LLLL\254LLL\254LL\254LLL\254LLLL\254LLL\254LL\254LLL\254LLLL\254LLL\254LL\254LLL\254LLLL\254LLL\254LL\254LLL\254LLLL\254LLL\254LL\254LLL\254LLLL\254LLL\254LL\254LLL\254LLLL\254LLL\254LL!" + "'", str2, "\254LLL\254LLLL\254LLL\254LL\254LLL\254LLLL\254LLL\254LL\254LLL\254LLLL\254LLL\254LL\254LLL\254LLLL\254LLL\254LL\254LLL\254LLLL\254LLL\254LL\254LLL\254LLLL\254LLL\254LL\254LLL\254LLLL\254LLL\254LL\254LLL\254LLLL\254LLL\254LL!");
    }

    @Test
    public void test10163() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10163");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.decode("!``nullnull!", "!\254!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "!``nullnullnullnullnullnullnullnull!" + "'", str2, "!``nullnullnullnullnullnullnullnull!");
    }

    @Test
    public void test10164() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10164");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.decode("U!NNU!NN!NNN!NNNU!NNU!NN!NNN!NNN!!U!NNU!NN!NNN!NNNU!NNU!NN!NNN!NNN!!U!NNU!NN!NNN!NNNU!NNU!NN!NNN!NNNU!NNU!NN!NNN!NNNU!NNU!NN!NNN!NNN!!U!NNU!NN!NNN!NNNU!NNU!NN!NNN!NNN!!U!NNU!NN!NNN!NNNU!NNU!NN!NNN!NNN!", "\275\u014c\u014b\u014e\u014e\u014c\u014b\u014e\u014e\u014c\u014b\u014e\u014e\276\u014c\u014b\u014e\u014e\275\275!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "null!nullnullnull!nullnull!nullnullnull!nullnullnullnull!nullnullnull!nullnull!nullnullnull!nullnullnull!!null!nullnullnull!nullnull!nullnullnull!nullnullnullnull!nullnullnull!nullnull!nullnullnull!nullnullnull!!null!nullnullnull!nullnull!nullnullnull!nullnullnullnull!nullnullnull!nullnull!nullnullnull!nullnullnullnull!nullnullnull!nullnull!nullnullnull!nullnullnullnull!nullnullnull!nullnull!nullnullnull!nullnullnull!!null!nullnullnull!nullnull!nullnullnull!nullnullnullnull!nullnullnull!nullnull!nullnullnull!nullnullnull!!null!nullnullnull!nullnull!nullnullnull!nullnullnullnull!nullnullnull!nullnull!nullnullnull!nullnullnull!" + "'", str2, "null!nullnullnull!nullnull!nullnullnull!nullnullnullnull!nullnullnull!nullnull!nullnullnull!nullnullnull!!null!nullnullnull!nullnull!nullnullnull!nullnullnullnull!nullnullnull!nullnull!nullnullnull!nullnullnull!!null!nullnullnull!nullnull!nullnullnull!nullnullnullnull!nullnullnull!nullnull!nullnullnull!nullnullnullnull!nullnullnull!nullnull!nullnullnull!nullnullnullnull!nullnullnull!nullnull!nullnullnull!nullnullnull!!null!nullnullnull!nullnull!nullnullnull!nullnullnullnull!nullnullnull!nullnull!nullnullnull!nullnullnull!!null!nullnullnull!nullnull!nullnullnull!nullnullnullnull!nullnullnull!nullnull!nullnullnull!nullnullnull!");
    }

    @Test
    public void test10165() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10165");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.decode("N~\200\200N~\200\200~N\200\200~N\200\200N~\200\200N~\200\200~N\200\200~N\200\200N~\200\200N~\200\200~N\200\200~N\200\200N~\200\200N~\200\200~N\200\200~N\200\200N~\200\200N~\200\200~N\200\200~N\200\200N~\200\200N~\200\200~N\200\200~N\200\200N~\200\200N~\200\200~N\200\200~N\200\200N~\200\200N~\200\200~N\200\200~N\200\200!", "!N!!!N!!!!!N!!!N!!!!!N!!!N!!!!!N!!!N!!!!!N!!!N!!!!!N!!!N!!!!!N!!!N!!!!!N!!!N!!!!!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\214~\200\200\214~\200\200~\214\200\200~\214\200\200\214~\200\200\214~\200\200~\214\200\200~\214\200\200\214~\200\200\214~\200\200~\214\200\200~\214\200\200\214~\200\200\214~\200\200~\214\200\200~\214\200\200\214~\200\200\214~\200\200~\214\200\200~\214\200\200\214~\200\200\214~\200\200~\214\200\200~\214\200\200\214~\200\200\214~\200\200~\214\200\200~\214\200\200\214~\200\200\214~\200\200~\214\200\200~\214\200\200!" + "'", str2, "\214~\200\200\214~\200\200~\214\200\200~\214\200\200\214~\200\200\214~\200\200~\214\200\200~\214\200\200\214~\200\200\214~\200\200~\214\200\200~\214\200\200\214~\200\200\214~\200\200~\214\200\200~\214\200\200\214~\200\200\214~\200\200~\214\200\200~\214\200\200\214~\200\200\214~\200\200~\214\200\200~\214\200\200\214~\200\200\214~\200\200~\214\200\200~\214\200\200\214~\200\200\214~\200\200~\214\200\200~\214\200\200!");
    }

    @Test
    public void test10166() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10166");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.encode("nullnullnullnullEULLEULLEULLnullnullnullnullEULLEULLEULLnullnullnullnullEULLEULLEULLnullnullnullnullEULLEULLEULLnullnullnullnullEULLEULLEULLnullnullnullnullEULLEULLEULLnullnullnullnullEULLEULLEULLnullnullnullnullEULLEULLEULL!", "}~\200\200}~\200\200LUELLUELLUELL^LUELLUELLUELLLUELLUELLUELLLUELLUELLUELL^LUELLUELLUELLLUELLUELLUELL}~\200\200}~\200\200LUELLUELLUELL^LUELLUELLUELLLUELLUELLUELLLUELLUELLUELL^LUELLUELLUELLLUELLUELLUELL!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "ELLLELLLELLLELLL}LLL}LLL}LLLELLLELLLELLLELLL}LLL}LLL}LLLELLLELLLELLLELLL}LLL}LLL}LLLELLLELLLELLLELLL}LLL}LLL}LLLELLLELLLELLLELLL}LLL}LLL}LLLELLLELLLELLLELLL}LLL}LLL}LLLELLLELLLELLLELLL}LLL}LLL}LLLELLLELLLELLLELLL}LLL}LLL}LLL!" + "'", str2, "ELLLELLLELLLELLL}LLL}LLL}LLLELLLELLLELLLELLL}LLL}LLL}LLLELLLELLLELLLELLL}LLL}LLL}LLLELLLELLLELLLELLL}LLL}LLL}LLLELLLELLLELLLELLL}LLL}LLL}LLLELLLELLLELLLELLL}LLL}LLL}LLLELLLELLLELLLELLL}LLL}LLL}LLLELLLELLLELLLELLL}LLL}LLL}LLL!");
    }

    @Test
    public void test10167() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10167");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.decode("\u0366\u0365\u0368\u0368\u0346\u0348\u0348!", "\250\250\246\246\250\250\246\246!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\u0366\u0365\u0368\u0368\u0346\u0348\u0348!" + "'", str2, "\u0366\u0365\u0368\u0368\u0346\u0348\u0348!");
    }

    @Test
    public void test10168() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10168");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.decode("\u01ac\u01ac\u01ac\u01ac\u01ac\u01ac\u01ac\u01ac\u01ac\u01ac\u01ac\u01ac\u01ac\u01ac\u01ac\u01ac\u01ac\u01ac\u01ac\u01ac\u01ac\u01ac\u01ac\u01ac\u01ac\u01ac\u01ac\u01ac\u01ac\u01ac\u01ac\u01ac\u01ac\u01ac\u01ac\u01ac\u01ac\u01ac\u01ac\u01ac\u01ac\u01ac\u01ac\u01ac\u01ac\u01ac\u01ac\u01ac\u01ac\u01ac\u01ac\u01ac\u01ac\u01ac\u01ac\u01ac\u01ac\u01ac\u01ac\u01ac\u01ac\u01ac\u01ac\u01ac\u01ac\u01ac\u01ac\u01ac\u01ac\u01ac\u01ac\u01ac\u01ac\u01ac\u01ac\u01ac\u01ac\u01ac\u01ac\u01ac\u01ac\u01ac\u01ac\u01ac\u01ac\u01ac\u01ac\u01ac\u01ac\u01ac\u01ac\u01ac\u01ac\u01ac\u01ac\u01ac!", "\300!\276\276\300!\276\276\300!\276\276\300!\276\276\300!\276\276\300!\276\276\300!\276\276\300!\276\276!");
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "^nullnullnull^nullnullnull^nullnullnull^nullnullnull^nullnullnull^nullnullnull^nullnullnull^nullnullnull^nullnullnull^nullnullnull^nullnullnull^nullnullnull^nullnullnull^nullnullnull^nullnullnull^nullnullnull^nullnullnull^nullnullnull^nullnullnull^nullnullnull^nullnullnull^nullnullnull^nullnullnull^nullnullnull^nullnullnull^nullnullnull^nullnullnull^nullnullnull^nullnullnull^nullnullnull^nullnullnull^nullnullnull!" + "'", str2, "^nullnullnull^nullnullnull^nullnullnull^nullnullnull^nullnullnull^nullnullnull^nullnullnull^nullnullnull^nullnullnull^nullnullnull^nullnullnull^nullnullnull^nullnullnull^nullnullnull^nullnullnull^nullnullnull^nullnullnull^nullnullnull^nullnullnull^nullnullnull^nullnullnull^nullnullnull^nullnullnull^nullnullnull^nullnullnull^nullnullnull^nullnullnull^nullnullnull^nullnullnull^nullnullnull^nullnullnull^nullnullnull!");
    }

    @Test
    public void test10169() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10169");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.decode("\u0366\u0365\u0368\u0368\u0346\u0348\u0348!", "nullhnullnullnullhnullnull\255\256\260\260\255\256\260\260nullhnullnullnullhnullnull\255\256\260\260\255\256\260\260nullhnullnullnullhnullnull\255\256\260\260\255\256\260\260nullhnullnullnullhnullnull\255\256\260\260\255\256\260\260nullhnullnullnullhnullnull\255\256\260\260\255\256\260\260nullhnullnullnullhnullnull\255\256\260\260\255\256\260\260nullhnullnullnullhnullnull\255\256\260\260\255\256\260\260nullhnullnullnullhnullnull\255\256\260\260\255\256\260\260!");
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\u0366\u0365\u0368\u0368\u0148\u0145\u0145\u0346\u0348\u0348!" + "'", str2, "\u0366\u0365\u0368\u0368\u0148\u0145\u0145\u0346\u0348\u0348!");
    }

    @Test
    public void test10170() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10170");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.decode("}~!!!\200\200}~!!!\200\200}~!!!\200\200}~!!!\200\200~!~~~!~~~!~~~!~~~!~~~!~~~!~~~!~~~!~~~!~~~!~~~!~~~!~~~!~~~!~~~!~~}~!!!\200\200}~!!!\200\200}~!!!\200\200}~!!!\200\200~!~~~!~~~!~~~!~~~!~~~!~~~!~~~!~~!", "\275\u0126\u0128\u0128\u0126\u0128\u0128\200\200\u0126\u0128\u0128\u0126\u0128\u0128\200\200\u0126\u0128\u0128\u0126\u0128\u0128\200\200\276\u0126\u0128\u0128\u0126\u0128\u0128\200\200\275\275!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "}~!!!\200\200}~!!!\200\200}~!!!\200\200}~!!!\200\200~!~~~!~~~!~~~!~~~!~~~!~~~!~~~!~~~!~~~!~~~!~~~!~~~!~~~!~~~!~~~!~~}~!!!\200\200}~!!!\200\200}~!!!\200\200}~!!!\200\200~!~~~!~~~!~~~!~~~!~~~!~~~!~~~!~~!" + "'", str2, "}~!!!\200\200}~!!!\200\200}~!!!\200\200}~!!!\200\200~!~~~!~~~!~~~!~~~!~~~!~~~!~~~!~~~!~~~!~~~!~~~!~~~!~~~!~~~!~~~!~~}~!!!\200\200}~!!!\200\200}~!!!\200\200}~!!!\200\200~!~~~!~~~!~~~!~~~!~~~!~~~!~~~!~~!");
    }

    @Test
    public void test10171() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10171");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.decode("NNNNNNNN!!NNNNNNNN!!NNNNNNNNNNNNNNNN!!NNNNNNNN!!NNNNNNNN!", "!]]]!]]]!]]]!]]]\200~~!]]]!]]]!]]]!]]]\200~~!]]]!]]]!]]]!]]]!]]]!]]]!]]]!]]]!]]]!]]]!]]]!]]]\200~~!]]]!]]]!]]]!]]]\200~~!]]]!]]]!]]]!]]]!]]]!]]]!]]]!]]]!!!]]]!]]]!]]]!]]]\200~~!]]]!]]]!]]]!]]]\200~~!]]]!]]]!]]]!]]]!]]]!]]]!]]]!]]]!]]]!]]]!]]]!]]]\200~~!]]]!]]]!]]]!]]]\200~~!]]]!]]]!]]]!]]]!]]]!]]]!]]]!]]]!!!]]]!]]]!]]]!]]]\200~~!]]]!]]]!]]]!]]]\200~~!]]]!]]]!]]]!]]]!]]]!]]]!]]]!]]]!]]]!]]]!]]]!]]]\200~~!]]]!]]]!]]]!]]]\200~~!]]]!]]]!]]]!]]]!]]]!]]]!]]]!]]]!]]]!]]]!]]]!]]]\200~~!]]]!]]]!]]]!]]]\200~~!]]]!]]]!]]]!]]]!]]]!]]]!]]]!]]]!]]]!]]]!]]]!]]]\200~~!]]]!]]]!]]]!]]]\200~~!]]]!]]]!]]]!]]]!]]]!]]]!]]]!]]]!!!]]]!]]]!]]]!]]]\200~~!]]]!]]]!]]]!]]]\200~~!]]]!]]]!]]]!]]]!]]]!]]]!]]]!]]]!]]]!]]]!]]]!]]]\200~~!]]]!]]]!]]]!]]]\200~~!]]]!]]]!]]]!]]]!]]]!]]]!]]]!]]]!!!]]]!]]]!]]]!]]]\200~~!]]]!]]]!]]]!]]]\200~~!]]]!]]]!]]]!]]]!]]]!]]]!]]]!]]]!]]]!]]]!]]]!]]]\200~~!]]]!]]]!]]]!]]]\200~~!]]]!]]]!]]]!]]]!]]]!]]]!]]]!]]]!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "nullnullnullnullnullnullnullnull!!nullnullnullnullnullnullnullnull!!nullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull!!nullnullnullnullnullnullnullnull!!nullnullnullnullnullnullnullnull!" + "'", str2, "nullnullnullnullnullnullnullnull!!nullnullnullnullnullnullnullnull!!nullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull!!nullnullnullnullnullnullnullnull!!nullnullnullnullnullnullnullnull!");
    }

    @Test
    public void test10172() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10172");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.encode("!\276\276\276!\276\276\276!\276\276\276!\276\276\276\200}}`!\276\276\276!\276\276\276!\276\276\276!\276\276\276]]!", "");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "!\276\276\276!\276\276\276!\276\276\276!\276\276\276\200}}`!\276\276\276!\276\276\276!\276\276\276!\276\276\276]]!" + "'", str2, "!\276\276\276!\276\276\276!\276\276\276!\276\276\276\200}}`!\276\276\276!\276\276\276!\276\276\276!\276\276\276]]!");
    }

    @Test
    public void test10173() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10173");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.decode("!!]]!!]]!!]]!!]]!!]]!!]]!!]]!!]]!!!!]]!!]]!!]]!!]]!!]]!!]]!!]]!!]]!!!!]]!!]]!!]]!!]]!!]]!!]]!!]]!!]]!!]]!!]]!!]]!!]]!!]]!!]]!!]]!!]]!!!!]]!!]]!!]]!!]]!!]]!!]]!!]]!!]]!!!!]]!!]]!!]]!!]]!!]]!!]]!!]]!!]]!", "NN!!NN!!NN!!NN!!NN!!NN!!NN!!NN!!NN!!NN!!NN!!NN!!NN!!NN!!NN!!NN!!NN!!NN!!NN!!NN!!NN!!NN!!NN!!NN!!NN!!NN!!NN!!NN!!NN!!NN!!NN!!NN!!NN!!NN!!NN!!NN!!NN!!NN!!NN!!NN!!NN!!NN!!NN!!NN!!NN!!NN!!NN!!NN!!NN!!NN!!NN!!NN!!NN!!NN!!NN!!NN!!NN!!NN!!NN!!NN!!NN!!NN!!NN!!NN!!NN!!NN!!NN!!NN!!NN!!NN!!NN!!NN!!NN!!NN!!NN!!NN!!NN!!NN!!NN!!NN!!!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "!!]]!!]]!!]]!!]]!!]]!!]]!!]]!!]]!!!!]]!!]]!!]]!!]]!!]]!!]]!!]]!!]]!!!!]]!!]]!!]]!!]]!!]]!!]]!!]]!!]]!!]]!!]]!!]]!!]]!!]]!!]]!!]]!!]]!!!!]]!!]]!!]]!!]]!!]]!!]]!!]]!!]]!!!!]]!!]]!!]]!!]]!!]]!!]]!!]]!!]]!" + "'", str2, "!!]]!!]]!!]]!!]]!!]]!!]]!!]]!!]]!!!!]]!!]]!!]]!!]]!!]]!!]]!!]]!!]]!!!!]]!!]]!!]]!!]]!!]]!!]]!!]]!!]]!!]]!!]]!!]]!!]]!!]]!!]]!!]]!!]]!!!!]]!!]]!!]]!!]]!!]]!!]]!!]]!!]]!!!!]]!!]]!!]]!!]]!!]]!!]]!!]]!!]]!");
    }

    @Test
    public void test10174() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10174");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.decode("\260\256\253\253\260\256\253\253\260\256\253\253\260\256\253\253\342null\342\342\342null\342\342\253\253\342null\342\342\342null\342\342\253\253\342null\342\342\342null\342\342\253\253\342null\342\342\342null\342\342\253\253\260\256\253\253\260\256\253\253\260\256\253\253\260\256\253\253\342null\342\342\342null\342\342\253\253\342null\342\342\342null\342\342\253\253!", "\u0346\u0346null!!!");
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\260\256\253\253\260\256\253\253\260\256\253\253\260\256\253\253nullijllnullnullnullijllnullnull\253\253nullijllnullnullnullijllnullnull\253\253nullijllnullnullnullijllnullnull\253\253nullijllnullnullnullijllnullnull\253\253\260\256\253\253\260\256\253\253\260\256\253\253\260\256\253\253nullijllnullnullnullijllnullnull\253\253nullijllnullnullnullijllnullnull\253\253!" + "'", str2, "\260\256\253\253\260\256\253\253\260\256\253\253\260\256\253\253nullijllnullnullnullijllnullnull\253\253nullijllnullnullnullijllnullnull\253\253nullijllnullnullnullijllnullnull\253\253nullijllnullnullnullijllnullnull\253\253\260\256\253\253\260\256\253\253\260\256\253\253\260\256\253\253nullijllnullnullnullijllnullnull\253\253nullijllnullnullnullijllnullnull\253\253!");
    }

    @Test
    public void test10175() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10175");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.encode
        org.junit.Assert.assertEquals("'" + strstr
    }

    @Test
    public void test10176() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10176");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.decode("`uuu`uuu`uuu`uuu`uuu`uuu`uuu`uuu!!`uuu`uuu`uuu`uuu`uuu`uuu`uuu`uuu!!`uuu`uuu`uuu`uuu`uuu`uuu`uuu`uuu!!`uuu`uuu`uuu`uuu`uuu`uuu`uuu`uuu!!`uuu`uuu`uuu`uuu`uuu`uuu`uuu`uuu!!`uuu`uuu`uuu`uuu`uuu`uuu`uuu`uuu!!`uuu`uuu`uuu`uuu`uuu`uuu`uuu`uuu!!`uuu`uuu`uuu`uuu`uuu`uuu`uuu`uuu!!!", "]\204]]]\204]]]\204]]]\204]]]]]]]]]]]]]]]]]]]\204]]]\204]]]\204]]]\204]]]]]]]]]]!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "`nullnullnull`nullnullnull`nullnullnull`nullnullnull`nullnullnull`nullnullnull`nullnullnull`nullnullnull!!`nullnullnull`nullnullnull`nullnullnull`nullnullnull`nullnullnull`nullnullnull`nullnullnull`nullnullnull!!`nullnullnull`nullnullnull`nullnullnull`nullnullnull`nullnullnull`nullnullnull`nullnullnull`nullnullnull!!`nullnullnull`nullnullnull`nullnullnull`nullnullnull`nullnullnull`nullnullnull`nullnullnull`nullnullnull!!`nullnullnull`nullnullnull`nullnullnull`nullnullnull`nullnullnull`nullnullnull`nullnullnull`nullnullnull!!`nullnullnull`nullnullnull`nullnullnull`nullnullnull`nullnullnull`nullnullnull`nullnullnull`nullnullnull!!`nullnullnull`nullnullnull`nullnullnull`nullnullnull`nullnullnull`nullnullnull`nullnullnull`nullnullnull!!`nullnullnull`nullnullnull`nullnullnull`nullnullnull`nullnullnull`nullnullnull`nullnullnull`nullnullnull!!!" + "'", str2, "`nullnullnull`nullnullnull`nullnullnull`nullnullnull`nullnullnull`nullnullnull`nullnullnull`nullnullnull!!`nullnullnull`nullnullnull`nullnullnull`nullnullnull`nullnullnull`nullnullnull`nullnullnull`nullnullnull!!`nullnullnull`nullnullnull`nullnullnull`nullnullnull`nullnullnull`nullnullnull`nullnullnull`nullnullnull!!`nullnullnull`nullnullnull`nullnullnull`nullnullnull`nullnullnull`nullnullnull`nullnullnull`nullnullnull!!`nullnullnull`nullnullnull`nullnullnull`nullnullnull`nullnullnull`nullnullnull`nullnullnull`nullnullnull!!`nullnullnull`nullnullnull`nullnullnull`nullnullnull`nullnullnull`nullnullnull`nullnullnull`nullnullnull!!`nullnullnull`nullnullnull`nullnullnull`nullnullnull`nullnullnull`nullnullnull`nullnullnull`nullnullnull!!`nullnullnull`nullnullnull`nullnullnull`nullnullnull`nullnullnull`nullnullnull`nullnullnull`nullnullnull!!!");
    }

    @Test
    public void test10177() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10177");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.encode("\u029b\u029b\u029b\u029b\u029b\u029b\u029b\u029b\u029b\u029b\u029b\u029b\u029b\u029b\u029b\u029b\u029b\u029b\u029b\u029b\u029b\u029b\u029b\u029b\u029b\u029b\u029b\u029b\u029b\u029b\u029b\u029b\u029b\u029b\u029b\u029b\u029b\u029b\u029b\u029b\u029b\u029b\u029b\u029b\u029b\u029b\u029b\u029b\u029b\u029b\u029b\u029b\u029b\u029b\u029b\u029b\u029b\u029b\u029b\u029b\u029b\u029b\u029b\u029b\254~\256\256\254~\256\256\254~\256\256\254~\256\256!", "~~~~```~~~~```~~~~```~~~~```~~~~```~~~~```~~~~```~~~~```~~~~```~~~~```~~~~```~~~~```~~~~```~~~~```~~~~```~~~~```~~~~```~~~~```~~~~```~~~~```~~~~```~~~~```~~~~```~~~~```~~~~```~~~~```~~~~```~~~~```~~~~```~~~~```~~~~```~~~~```!");
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "!null!!!null!!nullnull!null!!!null!!nullnull!null!!!null!!nullnull!null!!!null!!nullnull!null!!!null!!nullnull!null!!!null!!nullnull!null!!!null!!nullnull!null!!!null!!nullnull!null!!!null!!nullnull!null!!!null!!nullnull!null!!!null!!nullnull!null!!!null!!nullnull!null!!!null!!nullnull!null!!!null!!nullnull!null!!!null!!nullnull!null!!!null!!nullnull\254~\256\256\254~\256\256\254~\256\256\254~\256\256!" + "'", str2, "!null!!!null!!nullnull!null!!!null!!nullnull!null!!!null!!nullnull!null!!!null!!nullnull!null!!!null!!nullnull!null!!!null!!nullnull!null!!!null!!nullnull!null!!!null!!nullnull!null!!!null!!nullnull!null!!!null!!nullnull!null!!!null!!nullnull!null!!!null!!nullnull!null!!!null!!nullnull!null!!!null!!nullnull!null!!!null!!nullnull!null!!!null!!nullnull\254~\256\256\254~\256\256\254~\256\256\254~\256\256!");
    }

    @Test
    public void test10178() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10178");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.encode("]nullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull]]nullnullnullnullnullnullnullnull]]nullnullnullnullnullnullnullnull]]nullnullnullnullnullnullnullnull]]]nullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull]]nullnullnullnullnullnullnullnull]]!", "!\253\253\253!\253\253\253!\253\253\253!\253\253\253\200}}`!\253\253\253!\253\253\253!\253\253\253!\253\253\253]]!");
        org.junit.Assert.assertEquals("'" + strstr
    }

    @Test
    public void test10179() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10179");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.encode("U!!!!!!```U!!!!!!```U!!!!!!```U!!!!!!```U!!!!!!```U!!!!!!```U!!!!!!```U!!!!!!```U!!!!!!```U!!!!!!```U!!!!!!```U!!!!!!```U!!!!!!```U!!!!!!```U!!!!!!```U!!!!!!```U!!!!!!```U!!!!!!```U!!!!!!```U!!!!!!```U!!!!!!```U!!!!!!```U!!!!!!```U!!!!!!```U!!!!!!```U!!!!!!```U!!!!!!```U!!!!!!```U!!!!!!```U!!!!!!```U!!!!!!```U!!!!!!```!", "\230~\216\216\230~\216\216!!\230~\216\216\230~\216\216!!\230~\216\216\230~\216\216\230~\216\216\230~\216\216!!\230~\216\216\230~\216\216!!\230~\216\216\230~\216\216!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\230!!!!!!```\230!!!!!!```\230!!!!!!```\230!!!!!!```\230!!!!!!```\230!!!!!!```\230!!!!!!```\230!!!!!!```\230!!!!!!```\230!!!!!!```\230!!!!!!```\230!!!!!!```\230!!!!!!```\230!!!!!!```\230!!!!!!```\230!!!!!!```\230!!!!!!```\230!!!!!!```\230!!!!!!```\230!!!!!!```\230!!!!!!```\230!!!!!!```\230!!!!!!```\230!!!!!!```\230!!!!!!```\230!!!!!!```\230!!!!!!```\230!!!!!!```\230!!!!!!```\230!!!!!!```\230!!!!!!```\230!!!!!!```!" + "'", str2, "\230!!!!!!```\230!!!!!!```\230!!!!!!```\230!!!!!!```\230!!!!!!```\230!!!!!!```\230!!!!!!```\230!!!!!!```\230!!!!!!```\230!!!!!!```\230!!!!!!```\230!!!!!!```\230!!!!!!```\230!!!!!!```\230!!!!!!```\230!!!!!!```\230!!!!!!```\230!!!!!!```\230!!!!!!```\230!!!!!!```\230!!!!!!```\230!!!!!!```\230!!!!!!```\230!!!!!!```\230!!!!!!```\230!!!!!!```\230!!!!!!```\230!!!!!!```\230!!!!!!```\230!!!!!!```\230!!!!!!```\230!!!!!!```!");
    }

    @Test
    public void test10180() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10180");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.encode("", "\u0317\u031a\u0317\u031a\u0317\u031a\u0317\u031anullnullnullnullnullnullnullnull!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
    }

    @Test
    public void test10181() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10181");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.encode``\275\200``\275\200``\275\200``\275\200``\275\200``\275\200``\275\200``\275\200``\275\200``\275\200``\275\200``\275\200``\275\200``\275\200``\275\200``\275\200``\275\200``\275\200``\275\200``\275\200``\275\200``\275\200``\275\200``\275\200``\275\200``\275\200``\275\200``\275\200``\275\200``\275\200``\275\200``!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "````!!!````!!!!!````!!!````!!!!!````!!!````!!!````!!!````!!!````!!!````!!!````!!!````!!!````!!!````!!!!!````!!!````!!!!!````!!!````!!!````!!!````!!!````!!!````!!!````!!!````!!!````!!!````!!!!!````!!!````!!!!!````!!!````!!!````!!!````!!!````!!!````!!!````!!!````!!!````!!!````!!!!!````!!!````!!!!!````!!!````!!!````!!!````!!!````!!!````!!!````!!!````!!!````!!!````!!!!!````!!!````!!!!!````!!!````!!!````!!!````!!!````!!!````!!!````!!!````!!!````!!!````!!!!!````!!!````!!!!!````!!!````!!!````!!!````!!!````!!!````!!!````!!!````!!!````!!!````!!!!!````!!!````!!!!!````!!!````!!!````!!!````!!!````!!!````!!!````!!!````!!!````!!!````!!!!!````!!!````!!!!!````!!!````!!!````!!!````!!!````!!!````!!!````!!!````!!!!" + "'", str2, "````!!!````!!!!!````!!!````!!!!!````!!!````!!!````!!!````!!!````!!!````!!!````!!!````!!!````!!!````!!!!!````!!!````!!!!!````!!!````!!!````!!!````!!!````!!!````!!!````!!!````!!!````!!!````!!!!!````!!!````!!!!!````!!!````!!!````!!!````!!!````!!!````!!!````!!!````!!!````!!!````!!!!!````!!!````!!!!!````!!!````!!!````!!!````!!!````!!!````!!!````!!!````!!!````!!!````!!!!!````!!!````!!!!!````!!!````!!!````!!!````!!!````!!!````!!!````!!!````!!!````!!!````!!!!!````!!!````!!!!!````!!!````!!!````!!!````!!!````!!!````!!!````!!!````!!!````!!!````!!!!!````!!!````!!!!!````!!!````!!!````!!!````!!!````!!!````!!!````!!!````!!!````!!!````!!!!!````!!!````!!!!!````!!!````!!!````!!!````!!!````!!!````!!!````!!!````!!!!");
    }

    @Test
    public void test10182() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10182");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.encode("nullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull\254~\256\256\254~\256\256\254~\256\256\254~\256\256!", "nullnullnullnullnullnullnullnullnnnullnullnullnullnullnullnullnullnnnullnullnullnullnullnullnullnullnnnullnullnullnullnullnullnullnullnnnullnullnullnullnullnullnullnullnnnullnullnullnullnullnullnullnullnnnullnullnullnullnullnullnullnullnnnullnullnullnullnullnullnullnullnn!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "LLUULLUULLUULLUULLUULLUULLUULLUULLUULLUULLUULLUULLUULLUULLUULLUU\254~\256\256\254~\256\256\254~\256\256\254~\256\256!" + "'", str2, "LLUULLUULLUULLUULLUULLUULLUULLUULLUULLUULLUULLUULLUULLUULLUULLUU\254~\256\256\254~\256\256\254~\256\256\254~\256\256!");
    }

    @Test
    public void test10183() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10183");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.encode("~}\200\200\200~~~}\200\200\200~~~}\200\200~}\200\200~}\200\200\200~~~}\200\200\200~~~}\200\200~}\200\200!!~}\200\200\200~~~}\200\200\200~~~}\200\200~}\200\200~}\200\200\200~~~}\200\200\200~~~}\200\200~}\200\200!!~}\200\200\200~~~}\200\200\200~~~}\200\200~}\200\200~}\200\200\200~~~}\200\200\200~~~}\200\200~}\200\200~}\200\200\200~~~}\200\200\200~~~}\200\200~}\200\200~}\200\200\200~~~}\200\200\200~~~}\200\200~}\200\200!!~}\200\200\200~~~}\200\200\200~~~}\200\200~}\200\200~}\200\200\200~~~}\200\200\200~~~}\200\200~}\200\200!!~}\200\200\200~~~}\200\200\200~~~}\200\200~}\200\200~}\200\200\200~~~}\200\200\200~~~}\200\200~}\200\200!", "]X]]]X]]]X]]]X]]]X]]]X]]]X]]]X]]]X]]]X]]]X]]]X]]]X]]]X]]]X]]]X]]]]X]]]X]]]X]]]X]]]X]]]X]]]X]]]X]]]X]]]]X]]]X]]]X]]]X]]]X]]]X]]]X]]]X]]]X]]]]X]]]X]]]X]]]X]]]X]]]X]]]X]]]X]]]X]]]]X]]]X]]]X]]]X]]]X]]]X]]]X]]]X]]]X]]!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "~}\200\200\200~~~}\200\200\200~~~}\200\200~}\200\200~}\200\200\200~~~}\200\200\200~~~}\200\200~}\200\200!!~}\200\200\200~~~}\200\200\200~~~}\200\200~}\200\200~}\200\200\200~~~}\200\200\200~~~}\200\200~}\200\200!!~}\200\200\200~~~}\200\200\200~~~}\200\200~}\200\200~}\200\200\200~~~}\200\200\200~~~}\200\200~}\200\200~}\200\200\200~~~}\200\200\200~~~}\200\200~}\200\200~}\200\200\200~~~}\200\200\200~~~}\200\200~}\200\200!!~}\200\200\200~~~}\200\200\200~~~}\200\200~}\200\200~}\200\200\200~~~}\200\200\200~~~}\200\200~}\200\200!!~}\200\200\200~~~}\200\200\200~~~}\200\200~}\200\200~}\200\200\200~~~}\200\200\200~~~}\200\200~}\200\200!" + "'", str2, "~}\200\200\200~~~}\200\200\200~~~}\200\200~}\200\200~}\200\200\200~~~}\200\200\200~~~}\200\200~}\200\200!!~}\200\200\200~~~}\200\200\200~~~}\200\200~}\200\200~}\200\200\200~~~}\200\200\200~~~}\200\200~}\200\200!!~}\200\200\200~~~}\200\200\200~~~}\200\200~}\200\200~}\200\200\200~~~}\200\200\200~~~}\200\200~}\200\200~}\200\200\200~~~}\200\200\200~~~}\200\200~}\200\200~}\200\200\200~~~}\200\200\200~~~}\200\200~}\200\200!!~}\200\200\200~~~}\200\200\200~~~}\200\200~}\200\200~}\200\200\200~~~}\200\200\200~~~}\200\200~}\200\200!!~}\200\200\200~~~}\200\200\200~~~}\200\200~}\200\200~}\200\200\200~~~}\200\200\200~~~}\200\200~}\200\200!");
    }

    @Test
    public void test10184() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10184");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.decode("!!\240\240!!\240\240!!\240\240!!\240\240!!\240\240!!\240\240!!\240\240!!\240\240!", "\u01aa\u01aa\u01aa\u01aa\u01aa\u01aa\u01aa\u01aa\u01aa\u01aa\u01aa\u01aa\u01aa\u01aa\u01aa\u01aa]]]\225\230\230\u01aa\u01aa\u01aa\u01aa\u01aa\u01aa\u01aa\u01aa\u01aa\u01aa\u01aa\u01aa\u01aa\u01aa\u01aa\u01aa]]]\225\230\230\u01aa\u01aa\u01aa\u01aa\u01aa\u01aa\u01aa\u01aa\u01aa\u01aa\u01aa\u01aa\u01aa\u01aa\u01aa\u01aa]]]\225\230\230\u01aa\u01aa\u01aa\u01aa\u01aa\u01aa\u01aa\u01aa\u01aa\u01aa\u01aa\u01aa\u01aa\u01aa\u01aa\u01aa]]]\225\230\230\200\u01aa\u01aa\u01aa\u01aa\u01aa\u01aa\u01aa\u01aa\u01aa\u01aa\u01aa\u01aa\u01aa\u01aa\u01aa\u01aa]]]\225\230\230\u01aa\u01aa\u01aa\u01aa\u01aa\u01aa\u01aa\u01aa\u01aa\u01aa\u01aa\u01aa\u01aa\u01aa\u01aa\u01aa]]]\225\230\230\u01aa\u01aa\u01aa\u01aa\u01aa\u01aa\u01aa\u01aa\u01aa\u01aa\u01aa\u01aa\u01aa\u01aa\u01aa\u01aa]]]\225\230\230\u01aa\u01aa\u01aa\u01aa\u01aa\u01aa\u01aa\u01aa\u01aa\u01aa\u01aa\u01aa\u01aa\u01aa\u01aa\u01aa]]]\225\230\230]]!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "!!\240\240!!\240\240!!\240\240!!\240\240!!\240\240!!\240\240!!\240\240!!\240\240!" + "'", str2, "!!\240\240!!\240\240!!\240\240!!\240\240!!\240\240!!\240\240!!\240\240!!\240\240!");
    }

    @Test
    public void test10185() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10185");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.decode("`\216\216!!\216\216!!\216\216!!`\216\216!!\216\216!!\216\216!!!", "`!\215\215\215!\215\215\215!\215\215\215!\215\215\215!\215\215\215!\215\215\215!\215\215\215!\215\215\215!\215\215\215!\215\215\215!\215\215\215!\215\215\215`!\215\215\215!\215\215\215!\215\215\215!\215\215\215!\215\215\215!\215\215\215!\215\215\215!\215\215\215!\215\215\215!\215\215\215!\215\215\215!\215\215\215!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "`\216\216!!\216\216!!\216\216!!`\216\216!!\216\216!!\216\216!!!" + "'", str2, "`\216\216!!\216\216!!\216\216!!`\216\216!!\216\216!!\216\216!!!");
    }

    @Test
    public void test10186() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10186");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.encode("nullnullnullnullnullnullnull```nullnullnullnullnullnullnull```nullnullnullnullnullnullnull```nullnullnullnullnullnullnull```nullnullnullnullnullnullnull```nullnullnullnullnullnullnull```nullnullnullnullnullnullnull```nullnullnullnullnullnullnull```nullnullnullnullnullnullnull```nullnullnullnullnullnullnull```nullnullnullnullnullnullnull```nullnullnullnullnullnullnull```nullnullnullnullnullnullnull```nullnullnullnullnullnullnull```nullnullnullnullnullnullnull```nullnullnullnullnullnullnull```nullnullnullnullnullnullnull```nullnullnullnullnullnullnull```nullnullnullnullnullnullnull```nullnullnullnullnullnullnull```nullnullnullnullnullnullnull```nullnullnullnullnullnullnull```nullnullnullnullnullnullnull```nullnullnullnullnullnullnull```nullnullnullnullnullnullnull```nullnullnullnullnullnullnull```nullnullnullnullnullnullnull```nullnullnullnullnullnullnull```nullnullnullnullnullnullnull```nullnullnullnullnullnullnull```nullnullnullnullnullnullnull```nullnullnullnullnullnullnull```!", "!!!EEE!EEE!!!EEE!EEE!!!!!EEE!EEE!!!EEE!EEE!!!!!EEE!EEE!!!EEE!EEE!!!EEE!EEE!!!EEE!EEE!!!EEE!EEE!!!EEE!EEE!!!EEE!EEE!!!EEE!EEE!!!EEE!EEE!!!EEE!EEE!!!!!EEE!EEE!!!EEE!EEE!!!!!EEE!EEE!!!EEE!EEE!!!EEE!EEE!!!EEE!EEE!!!EEE!EEE!!!EEE!EEE!!!EEE!EEE!!!EEE!EEE!!!EEE!EEE!!!EEE!EEE!!!!!EEE!EEE!!!EEE!EEE!!!!!EEE!EEE!!!EEE!EEE!!!EEE!EEE!!!EEE!EEE!!!EEE!EEE!!!EEE!EEE!!!EEE!EEE!!!EEE!EEE!!!EEE!EEE!!!EEE!EEE!!!!!EEE!EEE!!!EEE!EEE!!!!!EEE!EEE!!!EEE!EEE!!!EEE!EEE!!!EEE!EEE!!!EEE!EEE!!!EEE!EEE!!!EEE!EEE!!!EEE!EEE!!!EEE!EEE!!!EEE!EEE!!!!!EEE!EEE!!!EEE!EEE!!!!!EEE!EEE!!!EEE!EEE!!!EEE!EEE!!!EEE!EEE!!!EEE!EEE!!!EEE!EEE!!!EEE!EEE!!!EEE!EEE!!!EEE!EEE!!!EEE!EEE!!!!!EEE!EEE!!!EEE!EEE!!!!!EEE!EEE!!!EEE!EEE!!!EEE!EEE!!!EEE!EEE!!!EEE!EEE!!!EEE!EEE!!!EEE!EEE!!!EEE!EEE!!!EEE!EEE!!!EEE!EEE!!!!!EEE!EEE!!!EEE!EEE!!!!!EEE!EEE!!!EEE!EEE!!!EEE!EEE!!!EEE!EEE!!!EEE!EEE!!!EEE!EEE!!!EEE!EEE!!!EEE!EEE!!!EEE!EEE!!!EEE!EEE!!!!!EEE!EEE!!!EEE!EEE!!!!!EEE!EEE!!!EEE!EEE!!!EEE!EEE!!!EEE!EEE!!!EEE!EEE!!!EEE!EEE!!!EEE!EEE!!!EEE!EEE!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "!E!!!E!!!E!!!E!!!E!!!E!!!E!!```!E!!!E!!!E!!!E!!!E!!!E!!!E!!```!E!!!E!!!E!!!E!!!E!!!E!!!E!!```!E!!!E!!!E!!!E!!!E!!!E!!!E!!```!E!!!E!!!E!!!E!!!E!!!E!!!E!!```!E!!!E!!!E!!!E!!!E!!!E!!!E!!```!E!!!E!!!E!!!E!!!E!!!E!!!E!!```!E!!!E!!!E!!!E!!!E!!!E!!!E!!```!E!!!E!!!E!!!E!!!E!!!E!!!E!!```!E!!!E!!!E!!!E!!!E!!!E!!!E!!```!E!!!E!!!E!!!E!!!E!!!E!!!E!!```!E!!!E!!!E!!!E!!!E!!!E!!!E!!```!E!!!E!!!E!!!E!!!E!!!E!!!E!!```!E!!!E!!!E!!!E!!!E!!!E!!!E!!```!E!!!E!!!E!!!E!!!E!!!E!!!E!!```!E!!!E!!!E!!!E!!!E!!!E!!!E!!```!E!!!E!!!E!!!E!!!E!!!E!!!E!!```!E!!!E!!!E!!!E!!!E!!!E!!!E!!```!E!!!E!!!E!!!E!!!E!!!E!!!E!!```!E!!!E!!!E!!!E!!!E!!!E!!!E!!```!E!!!E!!!E!!!E!!!E!!!E!!!E!!```!E!!!E!!!E!!!E!!!E!!!E!!!E!!```!E!!!E!!!E!!!E!!!E!!!E!!!E!!```!E!!!E!!!E!!!E!!!E!!!E!!!E!!```!E!!!E!!!E!!!E!!!E!!!E!!!E!!```!E!!!E!!!E!!!E!!!E!!!E!!!E!!```!E!!!E!!!E!!!E!!!E!!!E!!!E!!```!E!!!E!!!E!!!E!!!E!!!E!!!E!!```!E!!!E!!!E!!!E!!!E!!!E!!!E!!```!E!!!E!!!E!!!E!!!E!!!E!!!E!!```!E!!!E!!!E!!!E!!!E!!!E!!!E!!```!E!!!E!!!E!!!E!!!E!!!E!!!E!!```!" + "'", str2, "!E!!!E!!!E!!!E!!!E!!!E!!!E!!```!E!!!E!!!E!!!E!!!E!!!E!!!E!!```!E!!!E!!!E!!!E!!!E!!!E!!!E!!```!E!!!E!!!E!!!E!!!E!!!E!!!E!!```!E!!!E!!!E!!!E!!!E!!!E!!!E!!```!E!!!E!!!E!!!E!!!E!!!E!!!E!!```!E!!!E!!!E!!!E!!!E!!!E!!!E!!```!E!!!E!!!E!!!E!!!E!!!E!!!E!!```!E!!!E!!!E!!!E!!!E!!!E!!!E!!```!E!!!E!!!E!!!E!!!E!!!E!!!E!!```!E!!!E!!!E!!!E!!!E!!!E!!!E!!```!E!!!E!!!E!!!E!!!E!!!E!!!E!!```!E!!!E!!!E!!!E!!!E!!!E!!!E!!```!E!!!E!!!E!!!E!!!E!!!E!!!E!!```!E!!!E!!!E!!!E!!!E!!!E!!!E!!```!E!!!E!!!E!!!E!!!E!!!E!!!E!!```!E!!!E!!!E!!!E!!!E!!!E!!!E!!```!E!!!E!!!E!!!E!!!E!!!E!!!E!!```!E!!!E!!!E!!!E!!!E!!!E!!!E!!```!E!!!E!!!E!!!E!!!E!!!E!!!E!!```!E!!!E!!!E!!!E!!!E!!!E!!!E!!```!E!!!E!!!E!!!E!!!E!!!E!!!E!!```!E!!!E!!!E!!!E!!!E!!!E!!!E!!```!E!!!E!!!E!!!E!!!E!!!E!!!E!!```!E!!!E!!!E!!!E!!!E!!!E!!!E!!```!E!!!E!!!E!!!E!!!E!!!E!!!E!!```!E!!!E!!!E!!!E!!!E!!!E!!!E!!```!E!!!E!!!E!!!E!!!E!!!E!!!E!!```!E!!!E!!!E!!!E!!!E!!!E!!!E!!```!E!!!E!!!E!!!E!!!E!!!E!!!E!!```!E!!!E!!!E!!!E!!!E!!!E!!!E!!```!E!!!E!!!E!!!E!!!E!!!E!!!E!!```!");
    }

    @Test
    public void test10187() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10187");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.decode("", "!nullnullnullnull!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
    }

    @Test
    public void test10188() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10188");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.encode("\u0150\u0150\u0150\u0150\u0150\u0150\u0150\u0150\u0150\u0150\u0150\u0150\u0150\u0150\u0150\u0150\u0150\u0150\u0150\u0150\u0150\u0150\u0150\u0150\u0150\u0150\u0150\u0150\u0150\u0150\u0150\u0150\u0150\u0150\u0150\u0150\u0150\u0150\u0150\u0150\u0150\u0150\u0150\u0150\u0150\u0150\u0150\u0150\u0150\u0150\u0150\u0150\u0150\u0150\u0150\u0150\u0150\u0150\u0150\u0150\u0150\u0150\u0150\u0150\u0150\u0150\u0150\u0150\u0150\u0150\u0150\u0150\u0150\u0150\u0150\u0150\u0150\u0150\u0150\u0150\u0150\u0150\u0150\u0150\u0150\u0150\u0150\u0150\u0150\u0150\u0150\u0150\u0150\u0150\u0150\u0150!", "\230\230\225\225\230\230\225\225\230\230\225\225\230\230\225\225\230\230\225\225\230\230\225\225\230\230\225\225\230\230\225\225!");
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\230\230\225\225nullnullnull\230\230\225\225nullnullnullnullnull\230\230\225\225nullnullnull\230\230\225\225nullnullnullnullnull!!\230\230\225\225nullnullnull\230\230\225\225nullnullnullnullnull\230\230\225\225nullnullnull\230\230\225\225nullnullnullnullnull!!\230\230\225\225nullnullnull\230\230\225\225nullnullnullnullnull\230\230\225\225nullnullnull\230\230\225\225nullnullnullnullnull\230\230\225\225nullnullnull\230\230\225\225nullnullnullnullnull\230\230\225\225nullnullnull\230\230\225\225nullnullnullnullnull!!\230\230\225\225nullnullnull\230\230\225\225nullnullnullnullnull\230\230\225\225nullnullnull\230\230\225\225nullnullnullnullnull!!\230\230\225\225nullnullnull\230\230\225\225nullnullnullnullnull\230\230\225\225nullnullnull\230\230\225\225nullnullnullnullnull!" + "'", str2, "\230\230\225\225nullnullnull\230\230\225\225nullnullnullnullnull\230\230\225\225nullnullnull\230\230\225\225nullnullnullnullnull!!\230\230\225\225nullnullnull\230\230\225\225nullnullnullnullnull\230\230\225\225nullnullnull\230\230\225\225nullnullnullnullnull!!\230\230\225\225nullnullnull\230\230\225\225nullnullnullnullnull\230\230\225\225nullnullnull\230\230\225\225nullnullnullnullnull\230\230\225\225nullnullnull\230\230\225\225nullnullnullnullnull\230\230\225\225nullnullnull\230\230\225\225nullnullnullnullnull!!\230\230\225\225nullnullnull\230\230\225\225nullnullnullnullnull\230\230\225\225nullnullnull\230\230\225\225nullnullnullnullnull!!\230\230\225\225nullnullnull\230\230\225\225nullnullnullnullnull\230\230\225\225nullnullnull\230\230\225\225nullnullnullnullnull!");
    }

    @Test
    public void test10189() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10189");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.encode("LXLLLXLLX~~~X~~~X~~~X~~~X~~~X~~~X~~~X~~~LXLLLXLLX~~~X~~~X~~~X~~~X~~~X~~~X~~~X~~~LXLLLXLLX~~~X~~~X~~~X~~~X~~~X~~~X~~~X~~~LXLLLXLLX~~~X~~~X~~~X~~~X~~~X~~~X~~~X~~~LXLLLXLLX~~~X~~~X~~~X~~~X~~~X~~~X~~~X~~~LXLLLXLLX~~~X~~~X~~~X~~~X~~~X~~~X~~~X~~~LXLLLXLLX~~~X~~~X~~~X~~~X~~~X~~~X~~~X~~~LXLLLXLLX~~~X~~~X~~~X~~~X~~~X~~~X~~~X~~~!", "EFHHEFHH!!EFHHEFHH!!EFHHEFHH!!EFHHEFHH!!EFHHEFHH!!EFHHEFHH!!EFHHEFHH!!EFHHEFHH!!EFHHEFHH!!EFHHEFHH!!EFHHEFHH!!EFHHEFHH!!EFHHEFHH!!EFHHEFHH!!EFHHEFHH!!EFHHEFHH!!EFHHEFHH!!EFHHEFHH!!EFHHEFHH!!EFHHEFHH!!EFHHEFHH!!EFHHEFHH!!EFHHEFHH!!EFHHEFHH!!EFHHEFHH!!EFHHEFHH!!EFHHEFHH!!EFHHEFHH!!EFHHEFHH!!EFHHEFHH!!EFHHEFHH!!EFHHEFHH!!!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "FHFFFHFFH~~~H~~~H~~~H~~~H~~~H~~~H~~~H~~~FHFFFHFFH~~~H~~~H~~~H~~~H~~~H~~~H~~~H~~~FHFFFHFFH~~~H~~~H~~~H~~~H~~~H~~~H~~~H~~~FHFFFHFFH~~~H~~~H~~~H~~~H~~~H~~~H~~~H~~~FHFFFHFFH~~~H~~~H~~~H~~~H~~~H~~~H~~~H~~~FHFFFHFFH~~~H~~~H~~~H~~~H~~~H~~~H~~~H~~~FHFFFHFFH~~~H~~~H~~~H~~~H~~~H~~~H~~~H~~~FHFFFHFFH~~~H~~~H~~~H~~~H~~~H~~~H~~~H~~~!" + "'", str2, "FHFFFHFFH~~~H~~~H~~~H~~~H~~~H~~~H~~~H~~~FHFFFHFFH~~~H~~~H~~~H~~~H~~~H~~~H~~~H~~~FHFFFHFFH~~~H~~~H~~~H~~~H~~~H~~~H~~~H~~~FHFFFHFFH~~~H~~~H~~~H~~~H~~~H~~~H~~~H~~~FHFFFHFFH~~~H~~~H~~~H~~~H~~~H~~~H~~~H~~~FHFFFHFFH~~~H~~~H~~~H~~~H~~~H~~~H~~~H~~~FHFFFHFFH~~~H~~~H~~~H~~~H~~~H~~~H~~~H~~~FHFFFHFFH~~~H~~~H~~~H~~~H~~~H~~~H~~~H~~~!");
    }

    @Test
    public void test10190() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10190");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.decode("TQQQTQQQTQQQTQQQTQQQTQQQTQQQTQQQTQQQTQQQTQQQTQQQTQQQTQQQTQQQTQQQTQQQTQQQTQQQTQQQTQQQTQQQTQQQTQQQTQQQTQQQTQQQTQQQTQQQTQQQTQQQTQQQ!", "L\220nullnull\200~~L\220nullnull\200~~L\220nullnullL\220nullnullL\220nullnull\200~~L\220nullnull\200~~L\220nullnullL\220nullnull!!L\220nullnull\200~~L\220nullnull\200~~L\220nullnullL\220nullnullL\220nullnull\200~~L\220nullnull\200~~L\220nullnullL\220nullnull!!L\220nullnull\200~~L\220nullnull\200~~L\220nullnullL\220nullnullL\220nullnull\200~~L\220nullnull\200~~L\220nullnullL\220nullnullL\220nullnull\200~~L\220nullnull\200~~L\220nullnullL\220nullnullL\220nullnull\200~~L\220nullnull\200~~L\220nullnullL\220nullnull!!L\220nullnull\200~~L\220nullnull\200~~L\220nullnullL\220nullnullL\220nullnull\200~~L\220nullnull\200~~L\220nullnullL\220nullnull!!L\220nullnull\200~~L\220nullnull\200~~L\220nullnullL\220nullnullL\220nullnull\200~~L\220nullnull\200~~L\220nullnullL\220nullnull!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "nullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull!" + "'", str2, "nullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull!");
    }

    @Test
    public void test10191() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10191");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.encode("`NLLLNLLLNLLLNLLLNLLLNLLLNLLLNLLLNLLLNLLLNLLLNLLL`NLLLNLLLNLLLNLLLNLLLNLLLNLLLNLLLNLLLNLLLNLLLNLLL!", "nulluvvnulluvvnulluvvnulluvvnulluvvnulluvvnulluvvnulluvvnulluvvnulluvvnulluvvnulluvvnulluvvnulluvvnulluvvnulluvvnulluvvnulluvvnulluvvnulluvvnulluvvnulluvvnulluvvnulluvvnulluvvnulluvvnulluvvnulluvvnulluvvnulluvvnulluvvnulluvv!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "`VUUUVUUUVUUUVUUUVUUUVUUUVUUUVUUUVUUUVUUUVUUUVUUU`VUUUVUUUVUUUVUUUVUUUVUUUVUUUVUUUVUUUVUUUVUUUVUUU!" + "'", str2, "`VUUUVUUUVUUUVUUUVUUUVUUUVUUUVUUUVUUUVUUUVUUUVUUU`VUUUVUUUVUUUVUUUVUUUVUUUVUUUVUUUVUUUVUUUVUUUVUUU!");
    }

    @Test
    public void test10192() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10192");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.decode("\u01f6\u01f6\u01f6\u01f6\u01f6\u01f6\u01f6\u01f6\u01f6\u01f6\u01f6\u01f6\u01f6\u01f6\u01f6\u01f6\200\u01f6\u01f6\u01f6\u01f6\u01f6\u01f6\u01f6\u01f6\u01f6\u01f6\u01f6\u01f6\u01f6\u01f6\u01f6\u01f6]]!", "NNLLNNLLNNLLNNLLNNLLNNLLNNLLNNLL!!NNLLNNLLNNLLNNLLNNLLNNLLNNLLNNLL!!NNLLNNLLNNLLNNLLNNLLNNLLNNLLNNLLNNLLNNLLNNLLNNLLNNLLNNLLNNLLNNLL!!NNLLNNLLNNLLNNLLNNLLNNLLNNLLNNLL!!NNLLNNLLNNLLNNLLNNLLNNLLNNLLNNLL!");
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "nullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull\200}}`nullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull]]!" + "'", str2, "nullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull\200}}`nullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull]]!");
    }

    @Test
    public void test10193() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10193");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.encode("\275\276LUUULUUU\275\276LUUULUUU\225\225\275\276LUUULUUU\275\276LUUULUUU\225\225\275\276LUUULUUU\275\276LUUULUUU\225\225\275\276LUUULUUU\275\276LUUULUUU\225\225\275\276LUUULUUU\275\276LUUULUUU\225\225\275\276LUUULUUU\275\276LUUULUUU\225\225\275\276LUUULUUU\275\276LUUULUUU\225\225\275\276LUUULUUU\275\276LUUULUUU\225\225!", "`!!UN\336\336UN\336\336!!UN\336\336UN\336\336!!UN\336\336UN\336\336`!!UN\336\336UN\336\336!!UN\336\336UN\336\336!!UN\336\336UN\336\336!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\275\276!\336\336\336!\336\336\336\275\276!\336\336\336!\336\336\336\225\225\275\276!\336\336\336!\336\336\336\275\276!\336\336\336!\336\336\336\225\225\275\276!\336\336\336!\336\336\336\275\276!\336\336\336!\336\336\336\225\225\275\276!\336\336\336!\336\336\336\275\276!\336\336\336!\336\336\336\225\225\275\276!\336\336\336!\336\336\336\275\276!\336\336\336!\336\336\336\225\225\275\276!\336\336\336!\336\336\336\275\276!\336\336\336!\336\336\336\225\225\275\276!\336\336\336!\336\336\336\275\276!\336\336\336!\336\336\336\225\225\275\276!\336\336\336!\336\336\336\275\276!\336\336\336!\336\336\336\225\225!" + "'", str2, "\275\276!\336\336\336!\336\336\336\275\276!\336\336\336!\336\336\336\225\225\275\276!\336\336\336!\336\336\336\275\276!\336\336\336!\336\336\336\225\225\275\276!\336\336\336!\336\336\336\275\276!\336\336\336!\336\336\336\225\225\275\276!\336\336\336!\336\336\336\275\276!\336\336\336!\336\336\336\225\225\275\276!\336\336\336!\336\336\336\275\276!\336\336\336!\336\336\336\225\225\275\276!\336\336\336!\336\336\336\275\276!\336\336\336!\336\336\336\225\225\275\276!\336\336\336!\336\336\336\275\276!\336\336\336!\336\336\336\225\225\275\276!\336\336\336!\336\336\336\275\276!\336\336\336!\336\336\336\225\225!");
    }

    @Test
    public void test10194() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10194");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.decode("", "\275\275!!\275\275!!!!\275\275!!\275\275!!!!!!\275\275!!\275\275!!!!\275\275!!\275\275!!!!!!\275\275!!\275\275!!!!\275\275!!\275\275!!!!!!\275\275!!\275\275!!!!\275\275!!\275\275!!!!!!\275\275!!\275\275!!!!\275\275!!\275\275!!!!!!\275\275!!\275\275!!!!\275\275!!\275\275!!!!!!\275\275!!\275\275!!!!\275\275!!\275\275!!!!!!\275\275!!\275\275!!!!\275\275!!\275\275!!!!!!!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
    }

    @Test
    public void test10195() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10195");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.encode("LLUULLUULLUULLUULLUULLUULLUULLUULLUULLUULLUULLUULLUULLUULLUULLUULLUULLUULLUULLUULLUULLUULLUULLUULLUULLUULLUULLUULLUULLUULLUULLUU!", "NUNNNUNNNN!!NN!!NUNNNUNNNN!!NN!!NUNNNUNNNN!!NN!!NUNNNUNNNN!!NN!!NUNNNUNNNN!!NN!!NUNNNUNNNN!!NN!!NUNNNUNNNN!!NN!!NUNNNUNNNN!!NN!!NUNNNUNNNN!!NN!!NUNNNUNNNN!!NN!!NUNNNUNNNN!!NN!!NUNNNUNNNN!!NN!!NUNNNUNNNN!!NN!!NUNNNUNNNN!!NN!!NUNNNUNNNN!!NN!!NUNNNUNNNN!!NN!!NUNNNUNNNN!!NN!!NUNNNUNNNN!!NN!!NUNNNUNNNN!!NN!!NUNNNUNNNN!!NN!!NUNNNUNNNN!!NN!!NUNNNUNNNN!!NN!!NUNNNUNNNN!!NN!!NUNNNUNNNN!!NN!!NUNNNUNNNN!!NN!!NUNNNUNNNN!!NN!!NUNNNUNNNN!!NN!!NUNNNUNNNN!!NN!!NUNNNUNNNN!!NN!!NUNNNUNNNN!!NN!!NUNNNUNNNN!!NN!!NUNNNUNNNN!!NN!!!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "!!NN!!NN!!NN!!NN!!NN!!NN!!NN!!NN!!NN!!NN!!NN!!NN!!NN!!NN!!NN!!NN!!NN!!NN!!NN!!NN!!NN!!NN!!NN!!NN!!NN!!NN!!NN!!NN!!NN!!NN!!NN!!NN!" + "'", str2, "!!NN!!NN!!NN!!NN!!NN!!NN!!NN!!NN!!NN!!NN!!NN!!NN!!NN!!NN!!NN!!NN!!NN!!NN!!NN!!NN!!NN!!NN!!NN!!NN!!NN!!NN!!NN!!NN!!NN!!NN!!NN!!NN!");
    }

    @Test
    public void test10196() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10196");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.decode("\u0128\u0129\u012b\u012b!!!\200\200\u0128\u0129\u012b\u012b!!!\200\200\u0128\u0129\u012b\u012b!!!\200\200\u0128\u0129\u012b\u012b!!!\200\200\u0128\u0129\u012b\u012b\u0128\u0129\u012b\u012b\u0128\u0129\u012b\u012b\u0128\u0129\u012b\u012b\u0128\u0129\u012b\u012b\u0128\u0129\u012b\u012b\u0128\u0129\u012b\u012b\u0128\u0129\u012b\u012b\u0128\u0129\u012b\u012b\u0128\u0129\u012b\u012b\u0128\u0129\u012b\u012b\u0128\u0129\u012b\u012b\u0128\u0129\u012b\u012b\u0128\u0129\u012b\u012b\u0128\u0129\u012b\u012b\u0128\u0129\u012b\u012b\u0128\u0129\u012b\u012b!!!\200\200\u0128\u0129\u012b\u012b!!!\200\200\u0128\u0129\u012b\u012b!!!\200\200\u0128\u0129\u012b\u012b!!!\200\200\u0128\u0129\u012b\u012b\u0128\u0129\u012b\u012b\u0128\u0129\u012b\u012b\u0128\u0129\u012b\u012b\u0128\u0129\u012b\u012b\u0128\u0129\u012b\u012b\u0128\u0129\u012b\u012b\u0128\u0129\u012b\u012b!~~!", "!!LLLLLLLL!!LLLLLLLL!!LLLLLLLL!!LLLLLLLL!!LLLLLLLL!!LLLLLLLL!!LLLLLLLL!!LLLLLLLL!!LLLLLLLL!!LLLLLLLL!!LLLLLLLL!!LLLLLLLL!!LLLLLLLL!!LLLLLLLL!!LLLLLLLL!!LLLLLLLL!!LLLLLLLL!!LLLLLLLL!!LLLLLLLL!!LLLLLLLL!!LLLLLLLL!!LLLLLLLL!!LLLLLLLL!!LLLLLLLL!!LLLLLLLL!!LLLLLLLL!!LLLLLLLL!!LLLLLLLL!!LLLLLLLL!!LLLLLLLL!!LLLLLLLL!!LLLLLLLL!");
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "}nullnullnullnull!!!\200\200}nullnullnullnull!!!\200\200}nullnullnullnull!!!\200\200}nullnullnullnull!!!\200\200nullnullnullnull!~~nullnullnullnull!~~nullnullnullnull!~~nullnullnullnull!~~nullnullnullnull!~~nullnullnullnull!~~nullnullnullnull!~~nullnullnullnull!~~nullnullnullnull!~~nullnullnullnull!~~nullnullnullnull!~~nullnullnullnull!~~nullnullnullnull!~~nullnullnullnull!~~nullnullnullnull!~~nullnullnullnull!~~}nullnullnullnull!!!\200\200}nullnullnullnull!!!\200\200}nullnullnullnull!!!\200\200}nullnullnullnull!!!\200\200nullnullnullnull!~~nullnullnullnull!~~nullnullnullnull!~~nullnullnullnull!~~nullnullnullnull!~~nullnullnullnull!~~nullnullnullnull!~~nullnullnullnull!~~!" + "'", str2, "}nullnullnullnull!!!\200\200}nullnullnullnull!!!\200\200}nullnullnullnull!!!\200\200}nullnullnullnull!!!\200\200nullnullnullnull!~~nullnullnullnull!~~nullnullnullnull!~~nullnullnullnull!~~nullnullnullnull!~~nullnullnullnull!~~nullnullnullnull!~~nullnullnullnull!~~nullnullnullnull!~~nullnullnullnull!~~nullnullnullnull!~~nullnullnullnull!~~nullnullnullnull!~~nullnullnullnull!~~nullnullnullnull!~~nullnullnullnull!~~}nullnullnullnull!!!\200\200}nullnullnullnull!!!\200\200}nullnullnullnull!!!\200\200}nullnullnullnull!!!\200\200nullnullnullnull!~~nullnullnullnull!~~nullnullnullnull!~~nullnullnullnull!~~nullnullnullnull!~~nullnullnullnull!~~nullnullnullnull!~~nullnullnullnull!~~!");
    }

    @Test
    public void test10197() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10197");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.encode("\336!!!\336!!!!", "!!!LLL!LLL!!!LLL!LLL!!!!!LLL!LLL!!!LLL!LLL!!!!!LLL!LLL!!!LLL!LLL!!!LLL!LLL!!!LLL!LLL!!!LLL!LLL!!!LLL!LLL!!!LLL!LLL!!!LLL!LLL!!!LLL!LLL!!!LLL!LLL!!!!!LLL!LLL!!!LLL!LLL!!!!!LLL!LLL!!!LLL!LLL!!!LLL!LLL!!!LLL!LLL!!!LLL!LLL!!!LLL!LLL!!!LLL!LLL!!!LLL!LLL!!!LLL!LLL!!!LLL!LLL!!!!!LLL!LLL!!!LLL!LLL!!!!!LLL!LLL!!!LLL!LLL!!!LLL!LLL!!!LLL!LLL!!!LLL!LLL!!!LLL!LLL!!!LLL!LLL!!!LLL!LLL!!!LLL!LLL!!!LLL!LLL!!!!!LLL!LLL!!!LLL!LLL!!!!!LLL!LLL!!!LLL!LLL!!!LLL!LLL!!!LLL!LLL!!!LLL!LLL!!!LLL!LLL!!!LLL!LLL!!!LLL!LLL!!!LLL!LLL!!!LLL!LLL!!!!!LLL!LLL!!!LLL!LLL!!!!!LLL!LLL!!!LLL!LLL!!!LLL!LLL!!!LLL!LLL!!!LLL!LLL!!!LLL!LLL!!!LLL!LLL!!!LLL!LLL!!!LLL!LLL!!!LLL!LLL!!!!!LLL!LLL!!!LLL!LLL!!!!!LLL!LLL!!!LLL!LLL!!!LLL!LLL!!!LLL!LLL!!!LLL!LLL!!!LLL!LLL!!!LLL!LLL!!!LLL!LLL!!!LLL!LLL!!!LLL!LLL!!!!!LLL!LLL!!!LLL!LLL!!!!!LLL!LLL!!!LLL!LLL!!!LLL!LLL!!!LLL!LLL!!!LLL!LLL!!!LLL!LLL!!!LLL!LLL!!!LLL!LLL!!!LLL!LLL!!!LLL!LLL!!!!!LLL!LLL!!!LLL!LLL!!!!!LLL!LLL!!!LLL!LLL!!!LLL!LLL!!!LLL!LLL!!!LLL!LLL!!!LLL!LLL!!!LLL!LLL!!!LLL!LLL!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "!!!!!!!!!" + "'", str2, "!!!!!!!!!");
    }

    @Test
    public void test10198() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10198");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.encode("!LLUU!", "");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "!nullnullnullnull!" + "'", str2, "!nullnullnullnull!");
    }

    @Test
    public void test10199() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10199");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.decode("\u015b\u015c\u015e\u015e\u015b\u015c\u015e\u015e\u015b\u015c\u015e\u015e\u015b\u015c\u015e\u015e\u015b\u015c\u015e\u015e\u015b\u015c\u015e\u015e\204\204\u015b\u015c\u015e\u015e\u015b\u015c\u015e\u015e\204\204\u015b\u015c\u015e\u015e\u015b\u015c\u015e\u015e\204\204\u015b\u015c\u015e\u015e\u015b\u015c\u015e\u015e\204\204\u015b\u015c\u015e\u015e\u015b\u015c\u015e\u015e\u015b\u015c\u015e\u015e\u015b\u015c\u015e\u015e\u015b\u015c\u015e\u015e\u015b\u015c\u015e\u015e\204\204\u015b\u015c\u015e\u015e\u015b\u015c\u015e\u015e\204\204!", "\u0366\u0365\u0368\u0368\u0346\u0348\u0348!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "nullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull\204\204nullnullnullnullnullnullnullnull\204\204nullnullnullnullnullnullnullnull\204\204nullnullnullnullnullnullnullnull\204\204nullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull\204\204nullnullnullnullnullnullnullnull\204\204!" + "'", str2, "nullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull\204\204nullnullnullnullnullnullnullnull\204\204nullnullnullnullnullnullnullnull\204\204nullnullnullnullnullnullnullnull\204\204nullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull\204\204nullnullnullnullnullnullnullnull\204\204!");
    }

    @Test
    public void test10200() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10200");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.decode
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\275]]]\275]]]!" + "'", str2, "\275]]]\275]]]!");
    }

    @Test
    public void test10201() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10201");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.decode("null\253\253\253\200}}`null\253\253\253]]!", "NUUU!UUU!UUU!UUU!UUUNUUU!UUU!UUU!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "u\200nullnull\253\253\253\200}}`u\200nullnull\253\253\253]]!" + "'", str2, "u\200nullnull\253\253\253\200}}`u\200nullnull\253\253\253]]!");
    }

    @Test
    public void test10202() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10202");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.decode("nullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull]!]]]!]]]!]]nullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull]!]]]!]]]!]]!", "vnullxxvnullxxnullvxxnullvxxvnullxxvnullxxnullvxxnullvxxvnullxxvnullxxnullvxxnullvxxvnullxxvnullxxnullvxxnullvxxvnullxxvnullxxnullvxxnullvxxvnullxxvnullxxnullvxxnullvxxvnullxxvnullxxnullvxxnullvxxvnullxxvnullxxnullvxxnullvxx!");
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\u013a\u013b\u013d\u013d\u013a\u013b\u013d\u013d\u013a\u013b\u013d\u013d\u013a\u013b\u013d\u013d\u013a\u013b\u013d\u013d\u013a\u013b\u013d\u013d\u013a\u013b\u013d\u013d\u013a\u013b\u013d\u013d\u013a\u013b\u013d\u013d\u013a\u013b\u013d\u013d\u013a\u013b\u013d\u013d\u013a\u013b\u013d\u013d\u013a\u013b\u013d\u013d\u013a\u013b\u013d\u013d\u013a\u013b\u013d\u013d\u013a\u013b\u013d\u013d\u013a\u013b\u013d\u013d\u013a\u013b\u013d\u013d\u013a\u013b\u013d\u013d\u013a\u013b\u013d\u013d\u013a\u013b\u013d\u013d\u013a\u013b\u013d\u013d\u013a\u013b\u013d\u013d\u013a\u013b\u013d\u013d\u013a\u013b\u013d\u013d\u013a\u013b\u013d\u013d\u013a\u013b\u013d\u013d\u013a\u013b\u013d\u013d\u013a\u013b\u013d\u013d\u013a\u013b\u013d\u013d\u013a\u013b\u013d\u013d\u013a\u013b\u013d\u013d]!]]]!]]]!]]!" + "'", str2, "\u013a\u013b\u013d\u013d\u013a\u013b\u013d\u013d\u013a\u013b\u013d\u013d\u013a\u013b\u013d\u013d\u013a\u013b\u013d\u013d\u013a\u013b\u013d\u013d\u013a\u013b\u013d\u013d\u013a\u013b\u013d\u013d\u013a\u013b\u013d\u013d\u013a\u013b\u013d\u013d\u013a\u013b\u013d\u013d\u013a\u013b\u013d\u013d\u013a\u013b\u013d\u013d\u013a\u013b\u013d\u013d\u013a\u013b\u013d\u013d\u013a\u013b\u013d\u013d\u013a\u013b\u013d\u013d\u013a\u013b\u013d\u013d\u013a\u013b\u013d\u013d\u013a\u013b\u013d\u013d\u013a\u013b\u013d\u013d\u013a\u013b\u013d\u013d\u013a\u013b\u013d\u013d\u013a\u013b\u013d\u013d\u013a\u013b\u013d\u013d\u013a\u013b\u013d\u013d\u013a\u013b\u013d\u013d\u013a\u013b\u013d\u013d\u013a\u013b\u013d\u013d\u013a\u013b\u013d\u013d\u013a\u013b\u013d\u013d\u013a\u013b\u013d\u013d]!]]]!]]]!]]!");
    }

    @Test
    public void test10203() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10203");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.decode("NLLLNLLL!", "\275\276nullnull\275\276nullnull\275\276nullnull\275\276nullnull\275\276nullnull\275\276nullnull\275\276nullnull\275\276nullnull\275\276nullnull\275\276nullnull\275\276nullnull\275\276nullnull\275\276nullnull\275\276nullnull\275\276nullnull\275\276nullnull\275\276nullnull\275\276nullnull\275\276nullnull\275\276nullnull!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\u0105\u0108\u0108\u0108\u0105\u0108\u0108\u0108!" + "'", str2, "\u0105\u0108\u0108\u0108\u0105\u0108\u0108\u0108!");
    }

    @Test
    public void test10204() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10204");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.decode("\300\300\300\300\300\300\300\300!!\300\300\300\300\300\300\300\300!!!", "\u0346\u0348\u0348\u0348\333\334\336\336\333\334\336\336\333\334\336\336\333\334\336\336\333\334\336\336\333\334\336\336\333\334\336\336\333\334\336\336\333\334\336\336\333\334\336\336\333\334\336\336\333\334\336\336\333\334\336\336\333\334\336\336\333\334\336\336\333\334\336\336\u0348\u0346\u0346!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "nullnullnullnullnullnullnullnull!!nullnullnullnullnullnullnullnull!!!" + "'", str2, "nullnullnullnullnullnullnullnull!!nullnullnullnullnullnullnullnull!!!");
    }

    @Test
    public void test10205() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10205");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.decode("!null!", "\u0346\u0368\u0368\u0346\u0368\u0368\u0346\u0368\u0368\u0346\u0368\u0368\u0346\u0368\u0368\u0346\u0368\u0368\u0346\u0368\u0368\u0346\u0368\u0368\u0346\u0368\u0368\u0346\u0368\u0368\u0346\u0368\u0368\u0346\u0368\u0368\u0346\u0368\u0368\u0346\u0368\u0368\u0346\u0368\u0368\u0346\u0368\u0368\u0346\u0368\u0368\u0346\u0368\u0368\u0346\u0368\u0368\u0346\u0368\u0368\u0346\u0368\u0368\u0346\u0368\u0368\u0346\u0368\u0368\u0346\u0368\u0368!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "!nullnullnullnull!" + "'", str2, "!nullnullnullnull!");
    }

    @Test
    public void test10206() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10206");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.encode("\u0366\u0365\u0368\u0368\u019a\u028c\u0249\u0249\u019a\u028c\u0249\u0249\u019a\u028c\u0249\u0249\u019a\u028c\u0249\u0249\u019a\u028c\u0249\u0249\u019a\u028c\u0249\u0249\u019a\u028c\u0249\u0249\u019a\u028c\u0249\u0249\u019a\u028c\u0249\u0249\u019a\u028c\u0249\u0249\u019a\u028c\u0249\u0249\u019a\u028c\u0249\u0249\u019a\u028c\u0249\u0249\u019a\u028c\u0249\u0249\u019a\u028c\u0249\u0249\u019a\u028c\u0249\u0249\u019a\u028c\u0249\u0249\u019a\u028c\u0249\u0249\u019a\u028c\u0249\u0249\u019a\u028c\u0249\u0249\u019a\u028c\u0249\u0249\u019a\u028c\u0249\u0249\u019a\u028c\u0249\u0249\u019a\u028c\u0249\u0249\u019a\u028c\u0249\u0249\u019a\u028c\u0249\u0249\u019a\u028c\u0249\u0249\u019a\u028c\u0249\u0249\u019a\u028c\u0249\u0249\u019a\u028c\u0249\u0249\u019a\u028c\u0249\u0249\u019a\u028c\u0249\u0249\u0346\u0348\u0348!", "L]^^L]^^L]^^L]^^L]^^L]^^L]^^L]^^!L]]!L]]L]^^L]^^L]^^L]^^L]^^L]^^L]^^L]^^!L]]!L]]L]^^L]^^L]^^L]^^L]^^L]^^L]^^L]^^!L]]!L]]L]^^L]^^L]^^L]^^L]^^L]^^L]^^L]^^!L]]!L]]L]^^L]^^L]^^L]^^L]^^L]^^L]^^L]^^!L]]!L]]L]^^L]^^L]^^L]^^L]^^L]^^L]^^L]^^!L]]!L]]L]^^L]^^L]^^L]^^L]^^L]^^L]^^L]^^!L]]!L]]L]^^L]^^L]^^L]^^L]^^L]^^L]^^L]^^!L]]!L]]!");
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\u0366\u0365\u0368\u0368\u0346\u0348\u0348!" + "'", str2, "\u0366\u0365\u0368\u0368\u0346\u0348\u0348!");
    }

    @Test
    public void test10207() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10207");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.encode("`LLUULLUULLUU`LLUULLUULLUU!", "\275\275!!\275\275!!\275\275!!\275\275!!\275\275!!\275\275!!\275\275!!\275\275!!\275\275!!\275\275!!\275\275!!\275\275!!\275\275!!\275\275!!\275\275!!\275\275!!\275\275!!\275\275!!\275\275!!\275\275!!\275\275!!\275\275!!\275\275!!\275\275!!\275\275!!\275\275!!\275\275!!\275\275!!\275\275!!\275\275!!\275\275!!\275\275!!\275\275!!\275\275!!\275\275!!\275\275!!\275\275!!\275\275!!\275\275!!\275\275!!\275\275!!\275\275!!\275\275!!\275\275!!\275\275!!\275\275!!\275\275!!\275\275!!\275\275!!\275\275!!\275\275!!\275\275!!\275\275!!\275\275!!\275\275!!\275\275!!\275\275!!\275\275!!\275\275!!\275\275!!\275\275!!\275\275!!\275\275!!\275\275!!\275\275!!\275\275!!\275\275!!\275\275!!\275\275!!\275\275!!\275\275!!\275\275!!\275\275!!\275\275!!\275\275!!\275\275!!\275\275!!\275\275!!\275\275!!\275\275!!!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "`!!\275\275!!\275\275!!\275\275`!!\275\275!!\275\275!!\275\275!" + "'", str2, "`!!\275\275!!\275\275!!\275\275`!!\275\275!!\275\275!!\275\275!");
    }

    @Test
    public void test10208() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10208");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.encode("}~\200\200}~\200\200\350^\214\214\350^\214\214}~\200\200}~\200\200\350^\214\214\350^\214\214!", "\u0406\u0406!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "}~\200\200}~\200\200null^\214\214null^\214\214}~\200\200}~\200\200null^\214\214null^\214\214!" + "'", str2, "}~\200\200}~\200\200null^\214\214null^\214\214}~\200\200}~\200\200null^\214\214null^\214\214!");
    }

    @Test
    public void test10209() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10209");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.decode("`!!!`!!!`!!!`!!!`!!!`!!!`!!!`!!!!!`!!!`!!!`!!!`!!!`!!!`!!!`!!!`!!!!!`!!!`!!!`!!!`!!!`!!!`!!!`!!!`!!!!!`!!!`!!!`!!!`!!!`!!!`!!!`!!!`!!!!!`!!!`!!!`!!!`!!!`!!!`!!!`!!!`!!!!!`!!!`!!!`!!!`!!!`!!!`!!!`!!!`!!!!!`!!!`!!!`!!!`!!!`!!!`!!!`!!!`!!!!!`!!!`!!!`!!!`!!!`!!!`!!!`!!!`!!!!!!", "]AAAAA]]AA]]AA]]AA]]]AAAAA]]AA]]!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "`!!!`!!!`!!!`!!!`!!!`!!!`!!!`!!!!!`!!!`!!!`!!!`!!!`!!!`!!!`!!!`!!!!!`!!!`!!!`!!!`!!!`!!!`!!!`!!!`!!!!!`!!!`!!!`!!!`!!!`!!!`!!!`!!!`!!!!!`!!!`!!!`!!!`!!!`!!!`!!!`!!!`!!!!!`!!!`!!!`!!!`!!!`!!!`!!!`!!!`!!!!!`!!!`!!!`!!!`!!!`!!!`!!!`!!!`!!!!!`!!!`!!!`!!!`!!!`!!!`!!!`!!!`!!!!!!" + "'", str2, "`!!!`!!!`!!!`!!!`!!!`!!!`!!!`!!!!!`!!!`!!!`!!!`!!!`!!!`!!!`!!!`!!!!!`!!!`!!!`!!!`!!!`!!!`!!!`!!!`!!!!!`!!!`!!!`!!!`!!!`!!!`!!!`!!!`!!!!!`!!!`!!!`!!!`!!!`!!!`!!!`!!!`!!!!!`!!!`!!!`!!!`!!!`!!!`!!!`!!!`!!!!!`!!!`!!!`!!!`!!!`!!!`!!!`!!!`!!!!!`!!!`!!!`!!!`!!!`!!!`!!!`!!!`!!!!!!");
    }

    @Test
    public void test10210() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10210");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.decode("\u0346\u0348\u0348\u0348\u037e\u037e\u0348\u0346\u0346!", "nullnullnullnullnullnullnullnull\276!~~\276!~~nullnullnullnullnullnullnullnull\276!~~\276!~~!!nullnullnullnullnullnullnullnull\276!~~\276!~~nullnullnullnullnullnullnullnull\276!~~\276!~~!!nullnullnullnullnullnullnullnull\276!~~\276!~~nullnullnullnullnullnullnullnull\276!~~\276!~~!!nullnullnullnullnullnullnullnull\276!~~\276!~~nullnullnullnullnullnullnullnull\276!~~\276!~~!!nullnullnullnullnullnullnullnull\276!~~\276!~~nullnullnullnullnullnullnullnull\276!~~\276!~~!!nullnullnullnullnullnullnullnull\276!~~\276!~~nullnullnullnullnullnullnullnull\276!~~\276!~~!!nullnullnullnullnullnullnullnull\276!~~\276!~~nullnullnullnullnullnullnullnull\276!~~\276!~~!!nullnullnullnullnullnullnullnull\276!~~\276!~~nullnullnullnullnullnullnullnull\276!~~\276!~~!!!");
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\u0346\u0348\u0348\u0348\u02e3\u02e3\u02e3\u02e3\u02e3\u02e3\u037e\u037e\u0348\u0346\u0346!" + "'", str2, "\u0346\u0348\u0348\u0348\u02e3\u02e3\u02e3\u02e3\u02e3\u02e3\u037e\u037e\u0348\u0346\u0346!");
    }

    @Test
    public void test10211() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10211");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.encode("\276\u0218\u0218\276\u0218\u0218\276\u0218\u0218\276\u0218\u0218\276\u0218\u0218\276\u0218\u0218\276\u0218\u0218\276\u0218\u0218\276\u0218\u0218\276\u0218\u0218\276\u0218\u0218\276\u0218\u0218\276\u0218\u0218\276\u0218\u0218\276\u0218\u0218\276\u0218\u0218\276\u0218\u0218\276\u0218\u0218\276\u0218\u0218\276\u0218\u0218\276\u0218\u0218\276\u0218\u0218\276\u0218\u0218\276\u0218\u0218\276\u0218\u0218\276\u0218\u0218\276\u0218\u0218\276\u0218\u0218\276\u0218\u0218\276\u0218\u0218\276\u0218\u0218\276\u0218\u0218\276\u0218\u0218\276\u0218\u0218\276\u0218\u0218\276\u0218\u0218\276\u0218\u0218\276\u0218\u0218\276\u0218\u0218\276\u0218\u0218\276\u0218\u0218\276\u0218\u0218\276\u0218\u0218\276\u0218\u0218\276\u0218\u0218\276\u0218\u0218\276\u0218\u0218\276\u0218\u0218\276\u0218\u0218\276\u0218\u0218\276\u0218\u0218\276\u0218\u0218\276\u0218\u0218\276\u0218\u0218\276\u0218\u0218\276\u0218\u0218!", "!U!!!U!!nullnullnullnullnullnullnullnull!U!!!U!!nullnullnullnullnullnullnullnull!U!!!U!!nullnullnullnullnullnullnullnull!U!!!U!!nullnullnullnullnullnullnullnull!U!!!U!!nullnullnullnullnullnullnullnull!U!!!U!!nullnullnullnullnullnullnullnull!U!!!U!!nullnullnullnullnullnullnullnull!U!!!U!!nullnullnullnullnullnullnullnull!");
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\276!nullnull\276!nullnull\276!nullnull\276!nullnull\276!nullnull\276!nullnull\276!nullnull\276!nullnull\276!nullnull\276!nullnull\276!nullnull\276!nullnull\276!nullnull\276!nullnull\276!nullnull\276!nullnull\276!nullnull\276!nullnull\276!nullnull\276!nullnull\276!nullnull\276!nullnull\276!nullnull\276!nullnull\276!nullnull\276!nullnull\276!nullnull\276!nullnull\276!nullnull\276!nullnull\276!nullnull\276!nullnull\276!nullnull\276!nullnull\276!nullnull\276!nullnull\276!nullnull\276!nullnull\276!nullnull\276!nullnull\276!nullnull\276!nullnull\276!nullnull\276!nullnull\276!nullnull\276!nullnull\276!nullnull\276!nullnull\276!nullnull\276!nullnull\276!nullnull\276!nullnull\276!nullnull\276!nullnull\276!nullnull\276!nullnull!" + "'", str2, "\276!nullnull\276!nullnull\276!nullnull\276!nullnull\276!nullnull\276!nullnull\276!nullnull\276!nullnull\276!nullnull\276!nullnull\276!nullnull\276!nullnull\276!nullnull\276!nullnull\276!nullnull\276!nullnull\276!nullnull\276!nullnull\276!nullnull\276!nullnull\276!nullnull\276!nullnull\276!nullnull\276!nullnull\276!nullnull\276!nullnull\276!nullnull\276!nullnull\276!nullnull\276!nullnull\276!nullnull\276!nullnull\276!nullnull\276!nullnull\276!nullnull\276!nullnull\276!nullnull\276!nullnull\276!nullnull\276!nullnull\276!nullnull\276!nullnull\276!nullnull\276!nullnull\276!nullnull\276!nullnull\276!nullnull\276!nullnull\276!nullnull\276!nullnull\276!nullnull\276!nullnull\276!nullnull\276!nullnull\276!nullnull\276!nullnull!");
    }

    @Test
    public void test10212() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10212");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.encode("\u017d\u017d\u017d\u017d\u017d\u017d\u017d\u017d\u017d\u017d\u017d\u017d\u017d\u017d\u017d\u017d\u017d\u017d\u017d\u017d\u017d\u017d\u017d\u017d\u017d\u017d\u017d\u017d\u017d\u017d\u017d\u017d\u017d\u017d\u017d\u017d\u017d\u017d\u017d\u017d\u017d\u017d\u017d\u017d\u017d\u017d\u017d\u017d\u017d\u017d\u017d\u017d\u017d\u017d\u017d\u017d\u017d\u017d\u017d\u017d\u017d\u017d\u017d\u017d!!!!!!!!", "\260\256\253\253\260\256\253\253\260\256\253\253\260\256\253\253!!!!!!!!\253\253!!!!!!!!\253\253!!!!!!!!\253\253!!!!!!!!\253\253\260\256\253\253\260\256\253\253\260\256\253\253\260\256\253\253!!!!!!!!\253\253!!!!!!!!\253\253!");
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "!null!!!null!!!null!!!null!!!!!!null!!!null!!!null!!!null!!!!!!!!null!!!null!!!null!!!null!!!!!!null!!!null!!!null!!!null!!!!!!!!null!!!null!!!null!!!null!!!!!!null!!!null!!!null!!!null!!!!!!!!null!!!null!!!null!!!null!!!!!!null!!!null!!!null!!!null!!!!!!!!null!!!null!!!null!!!null!!!!!!null!!!null!!!null!!!null!!!!!!!!null!!!null!!!null!!!null!!!!!!null!!!null!!!null!!!null!!!!!!!!null!!!null!!!null!!!null!!!!!!null!!!null!!!null!!!null!!!!!!!!null!!!null!!!null!!!null!!!!!!null!!!null!!!null!!!null!!!!!!!!" + "'", str2, "!null!!!null!!!null!!!null!!!!!!null!!!null!!!null!!!null!!!!!!!!null!!!null!!!null!!!null!!!!!!null!!!null!!!null!!!null!!!!!!!!null!!!null!!!null!!!null!!!!!!null!!!null!!!null!!!null!!!!!!!!null!!!null!!!null!!!null!!!!!!null!!!null!!!null!!!null!!!!!!!!null!!!null!!!null!!!null!!!!!!null!!!null!!!null!!!null!!!!!!!!null!!!null!!!null!!!null!!!!!!null!!!null!!!null!!!null!!!!!!!!null!!!null!!!null!!!null!!!!!!null!!!null!!!null!!!null!!!!!!!!null!!!null!!!null!!!null!!!!!!null!!!null!!!null!!!null!!!!!!!!");
    }

    @Test
    public void test10213() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10213");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.encode("\u0366\u0365\u0368\u0368\300\300!!\300\300!!\300\300!!\300\300\u0346\u0348\u0348!", "\u016c\u016e\u016c\u016e\u016c\u016e\u016c\u016e\u016c\u016e\u016c\u016e\u016c\u016e\u016c\u016e\u016c\u016e\u016c\u016e\u016c\u016e\u016c\u016e\u016c\u016e\u016c\u016e\u016c\u016e\u016c\u016enullnull!");
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\u0366\u0365\u0368\u0368\u0346\u0348\u0348!" + "'", str2, "\u0366\u0365\u0368\u0368\u0346\u0348\u0348!");
    }

    @Test
    public void test10214() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10214");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.encode("\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348!" + "'", str2, "\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348!");
    }

    @Test
    public void test10215() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10215");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.encodee!lle!lle!llLe!lle!lle!llLe!lle!lle!llLe!lle!lle!llLe!lle!lle!llLe!lle!lle!llLe!lle!lle!llLe!lle!lle!llLe!lle!lle!llLe!lle!lle!llLe!lle!lle!llLe!lle!lle!llLe!lle!lle!llLe!lle!lle!llLe!lle!lle!llLe!lle!lle!llLe!lle!lle!llLe!lle!lle!llLe!lle!lle!llLe!lle!lle!llLe!lle!lle!llLe!lle!lle!llLe!lle!lle!llLe!lle!lle!llLe!lle!lle!llLe!lle!lle!llLe!lle!lle!llLe!lle!lle!llLe!lle!lle!llLe!lle!lle!llLe!lle!lle!llLe!lle!lle!ll!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "LLLL!!!LLLL!!!!!LLLL!!!LLLL!!!!!LLLL!!!LLLL!!!LLLL!!!LLLL!!!LLLL!!!LLLL!!!LLLL!!!LLLL!!!LLLL!!!LLLL!!!!!LLLL!!!LLLL!!!!!LLLL!!!LLLL!!!LLLL!!!LLLL!!!LLLL!!!LLLL!!!LLLL!!!LLLL!!!LLLL!!!LLLL!!!!!LLLL!!!LLLL!!!!!LLLL!!!LLLL!!!LLLL!!!LLLL!!!LLLL!!!LLLL!!!LLLL!!!LLLL!!!LLLL!!!LLLL!!!!!LLLL!!!LLLL!!!!!LLLL!!!LLLL!!!LLLL!!!LLLL!!!LLLL!!!LLLL!!!LLLL!!!LLLL!!!LLLL!!!LLLL!!!!!LLLL!!!LLLL!!!!!LLLL!!!LLLL!!!LLLL!!!LLLL!!!LLLL!!!LLLL!!!LLLL!!!LLLL!!!LLLL!!!LLLL!!!!!LLLL!!!LLLL!!!!!LLLL!!!LLLL!!!LLLL!!!LLLL!!!LLLL!!!LLLL!!!LLLL!!!LLLL!!!LLLL!!!LLLL!!!!!LLLL!!!LLLL!!!!!LLLL!!!LLLL!!!LLLL!!!LLLL!!!LLLL!!!LLLL!!!LLLL!!!LLLL!!!LLLL!!!LLLL!!!!!LLLL!!!LLLL!!!!!LLLL!!!LLLL!!!LLLL!!!LLLL!!!LLLL!!!LLLL!!!LLLL!!!LLLL!!!!" + "'", str
    }

    @Test
    public void test10216() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10216");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.decode("\214\214!!\214\214!!\214\214!!\214\214!!\214\214!!\214\214!!\214\214!!\214\214!!!~~~!~~~!~~~!~~~!~~~!~~~!~~~!~~~\214\214!!\214\214!!\214\214!!\214\214!!\214\214!!\214\214!!\214\214!!\214\214!!!~~~!~~~!~~~!~~~!~~~!~~~!~~~!~~~\214\214!!\214\214!!\214\214!!\214\214!!\214\214!!\214\214!!\214\214!!\214\214!!!~~~!~~~!~~~!~~~!~~~!~~~!~~~!~~~\214\214!!\214\214!!\214\214!!\214\214!!\214\214!!\214\214!!\214\214!!\214\214!!!~~~!~~~!~~~!~~~!~~~!~~~!~~~!~~~\214\214!!\214\214!!\214\214!!\214\214!!\214\214!!\214\214!!\214\214!!\214\214!!!~~~!~~~!~~~!~~~!~~~!~~~!~~~!~~~\214\214!!\214\214!!\214\214!!\214\214!!\214\214!!\214\214!!\214\214!!\214\214!!!~~~!~~~!~~~!~~~!~~~!~~~!~~~!~~~\214\214!!\214\214!!\214\214!!\214\214!!\214\214!!\214\214!!\214\214!!\214\214!!!~~~!~~~!~~~!~~~!~~~!~~~!~~~!~~~\214\214!!\214\214!!\214\214!!\214\214!!\214\214!!\214\214!!\214\214!!\214\214!!!~~~!~~~!~~~!~~~!~~~!~~~!~~~!~~~!", "UUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUU!!UUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUU!!UUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUU!!UUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUU!!UUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUU!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\214\214!!\214\214!!\214\214!!\214\214!!\214\214!!\214\214!!\214\214!!\214\214!!!~~~!~~~!~~~!~~~!~~~!~~~!~~~!~~~\214\214!!\214\214!!\214\214!!\214\214!!\214\214!!\214\214!!\214\214!!\214\214!!!~~~!~~~!~~~!~~~!~~~!~~~!~~~!~~~\214\214!!\214\214!!\214\214!!\214\214!!\214\214!!\214\214!!\214\214!!\214\214!!!~~~!~~~!~~~!~~~!~~~!~~~!~~~!~~~\214\214!!\214\214!!\214\214!!\214\214!!\214\214!!\214\214!!\214\214!!\214\214!!!~~~!~~~!~~~!~~~!~~~!~~~!~~~!~~~\214\214!!\214\214!!\214\214!!\214\214!!\214\214!!\214\214!!\214\214!!\214\214!!!~~~!~~~!~~~!~~~!~~~!~~~!~~~!~~~\214\214!!\214\214!!\214\214!!\214\214!!\214\214!!\214\214!!\214\214!!\214\214!!!~~~!~~~!~~~!~~~!~~~!~~~!~~~!~~~\214\214!!\214\214!!\214\214!!\214\214!!\214\214!!\214\214!!\214\214!!\214\214!!!~~~!~~~!~~~!~~~!~~~!~~~!~~~!~~~\214\214!!\214\214!!\214\214!!\214\214!!\214\214!!\214\214!!\214\214!!\214\214!!!~~~!~~~!~~~!~~~!~~~!~~~!~~~!~~~!" + "'", str2, "\214\214!!\214\214!!\214\214!!\214\214!!\214\214!!\214\214!!\214\214!!\214\214!!!~~~!~~~!~~~!~~~!~~~!~~~!~~~!~~~\214\214!!\214\214!!\214\214!!\214\214!!\214\214!!\214\214!!\214\214!!\214\214!!!~~~!~~~!~~~!~~~!~~~!~~~!~~~!~~~\214\214!!\214\214!!\214\214!!\214\214!!\214\214!!\214\214!!\214\214!!\214\214!!!~~~!~~~!~~~!~~~!~~~!~~~!~~~!~~~\214\214!!\214\214!!\214\214!!\214\214!!\214\214!!\214\214!!\214\214!!\214\214!!!~~~!~~~!~~~!~~~!~~~!~~~!~~~!~~~\214\214!!\214\214!!\214\214!!\214\214!!\214\214!!\214\214!!\214\214!!\214\214!!!~~~!~~~!~~~!~~~!~~~!~~~!~~~!~~~\214\214!!\214\214!!\214\214!!\214\214!!\214\214!!\214\214!!\214\214!!\214\214!!!~~~!~~~!~~~!~~~!~~~!~~~!~~~!~~~\214\214!!\214\214!!\214\214!!\214\214!!\214\214!!\214\214!!\214\214!!\214\214!!!~~~!~~~!~~~!~~~!~~~!~~~!~~~!~~~\214\214!!\214\214!!\214\214!!\214\214!!\214\214!!\214\214!!\214\214!!\214\214!!!~~~!~~~!~~~!~~~!~~~!~~~!~~~!~~~!");
    }

    @Test
    public void test10217() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10217");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.encode("RRPPRRPPnullP\214\214nullP\214\214RRPPRRPPnullP\214\214nullP\214\214RRPPRRPPnullP\214\214nullP\214\214RRPPRRPPnullP\214\214nullP\214\214RRPPRRPPnullP\214\214nullP\214\214RRPPRRPPnullP\214\214nullP\214\214RRPPRRPPnullP\214\214nullP\214\214RRPPRRPPnullP\214\214nullP\214\214!", "\275UUU\275UUU\275UUU\275UUUUU\275\275UU\275\275UU\275\275UU\275\275\275UUU\275UUU\275UUU\275UUUUU\275\275UU\275\275!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "UUUUUUUUUUUUU\214\214UUUUU\214\214UUUUUUUUUUUUU\214\214UUUUU\214\214UUUUUUUUUUUUU\214\214UUUUU\214\214UUUUUUUUUUUUU\214\214UUUUU\214\214UUUUUUUUUUUUU\214\214UUUUU\214\214UUUUUUUUUUUUU\214\214UUUUU\214\214UUUUUUUUUUUUU\214\214UUUUU\214\214UUUUUUUUUUUUU\214\214UUUUU\214\214!" + "'", str2, "UUUUUUUUUUUUU\214\214UUUUU\214\214UUUUUUUUUUUUU\214\214UUUUU\214\214UUUUUUUUUUUUU\214\214UUUUU\214\214UUUUUUUUUUUUU\214\214UUUUU\214\214UUUUUUUUUUUUU\214\214UUUUU\214\214UUUUUUUUUUUUU\214\214UUUUU\214\214UUUUUUUUUUUUU\214\214UUUUU\214\214UUUUUUUUUUUUU\214\214UUUUU\214\214!");
    }

    @Test
    public void test10218() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10218");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.encode("\u0244\u0244\u0244\u0244\u0244\u0244\u0244\u0244\u0244\u0244\u0244\u0244\u0244\u0244\u0244\u0244\u0244\u0244\u0244\u0244\u0244\u0244\u0244\u0244\u0244\u0244\u0244\u0244\u0244\u0244\u0244\u0244!!!", "}]]]}]]]}]]]}]]]}]]]}]]]}]]]}]]]!!}]]]}]]]}]]]}]]]}]]]}]]]}]]]}]]]!!}]]]}]]]}]]]}]]]}]]]}]]]}]]]}]]]!!}]]]}]]]}]]]}]]]}]]]}]]]}]]]}]]]!!}]]]}]]]}]]]}]]]}]]]}]]]}]]]}]]]!!}]]]}]]]}]]]}]]]}]]]}]]]}]]]}]]]!!}]]]}]]]}]]]}]]]}]]]}]]]}]]]}]]]!!}]]]}]]]}]]]}]]]}]]]}]]]}]]]}]]]!!!");
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "]]]]]]]]nullnull]]]]]]]]nullnull!!]]]]]]]]nullnull]]]]]]]]nullnull!!]]]]]]]]nullnull]]]]]]]]nullnull!!]]]]]]]]nullnull]]]]]]]]nullnull!!]]]]]]]]nullnull]]]]]]]]nullnull!!]]]]]]]]nullnull]]]]]]]]nullnull!!]]]]]]]]nullnull]]]]]]]]nullnull!!]]]]]]]]nullnull]]]]]]]]nullnull!!!" + "'", str2, "]]]]]]]]nullnull]]]]]]]]nullnull!!]]]]]]]]nullnull]]]]]]]]nullnull!!]]]]]]]]nullnull]]]]]]]]nullnull!!]]]]]]]]nullnull]]]]]]]]nullnull!!]]]]]]]]nullnull]]]]]]]]nullnull!!]]]]]]]]nullnull]]]]]]]]nullnull!!]]]]]]]]nullnull]]]]]]]]nullnull!!]]]]]]]]nullnull]]]]]]]]nullnull!!!");
    }

    @Test
    public void test10219() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10219");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.encode("\u012a\u012aL!!!!\200\u012a\u012aL!!!!\200\u012a\u012a\u012a\u012a\u012a\u012aL!!!!\200\u012a\u012aL!!!!\200\u012a\u012a\u012a\u012a\u012a\u012aL!!!!\200\u012a\u012aL!!!!\200\u012a\u012a\u012a\u012a\u012a\u012aL!!!!\200\u012a\u012aL!!!!\200\u012a\u012a\u012a\u012a\u012a\u012aL!!!!\200\u012a\u012aL!!!!\200\u012a\u012a\u012a\u012a\u012a\u012aL!!!!\200\u012a\u012aL!!!!\200\u012a\u012a\u012a\u012a\u012a\u012aL!!!!\200\u012a\u012aL!!!!\200\u012a\u012a\u012a\u012a\u012a\u012aL!!!!\200\u012a\u012aL!!!!\200\u012a\u012a\u012a\u012a\u012a\u012aL!!!!\200\u012a\u012aL!!!!\200\u012a\u012a\u012a\u012a\u012a\u012aL!!!!\200\u012a\u012aL!!!!\200\u012a\u012a\u012a\u012a\u012a\u012aL!!!!\200\u012a\u012aL!!!!\200\u012a\u012a\u012a\u012a\u012a\u012aL!!!!\200\u012a\u012aL!!!!\200\u012a\u012a\u012a\u012aL!!!!!", "\u0245\u0246\u0248\u0248\u0245\u0246\u0248\u0248\u0245\u0246\u0248\u0248\u0245\u0246\u0248\u0248\u0245\u0246\u0248\u0248\u0245\u0246\u0248\u0248\u0245\u0246\u0248\u0248\u0245\u0246\u0248\u0248\u0245\u0246\u0248\u0248\u0245\u0246\u0248\u0248\u0245\u0246\u0248\u0248\u0245\u0246\u0248\u0248\u0245\u0246\u0248\u0248\u0245\u0246\u0248\u0248\u0245\u0246\u0248\u0248\u0245\u0246\u0248\u0248\u0245\u0246\u0248\u0248\u0245\u0246\u0248\u0248\u0245\u0246\u0248\u0248\u0245\u0246\u0248\u0248\u0245\u0246\u0248\u0248\u0245\u0246\u0248\u0248\u0245\u0246\u0248\u0248\u0245\u0246\u0248\u0248\u0245\u0246\u0248\u0248\u0245\u0246\u0248\u0248\u0245\u0246\u0248\u0248\u0245\u0246\u0248\u0248\u0245\u0246\u0248\u0248\u0245\u0246\u0248\u0248\u0245\u0246\u0248\u0248\u0245\u0246\u0248\u0248\u0245\u0246\u0248\u0248\u0245\u0246\u0248\u0248\u0245\u0246\u0248\u0248\u0245\u0246\u0248\u0248!");
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\u0248\u0248!!!!\200\u0248\u0248!!!!\200\u0248\u0248\u0248\u0248\u0248\u0248!!!!\200\u0248\u0248!!!!\200\u0248\u0248\u0248\u0248\u0248\u0248!!!!\200\u0248\u0248!!!!\200\u0248\u0248\u0248\u0248\u0248\u0248!!!!\200\u0248\u0248!!!!\200\u0248\u0248\u0248\u0248\u0248\u0248!!!!\200\u0248\u0248!!!!\200\u0248\u0248\u0248\u0248\u0248\u0248!!!!\200\u0248\u0248!!!!\200\u0248\u0248\u0248\u0248\u0248\u0248!!!!\200\u0248\u0248!!!!\200\u0248\u0248\u0248\u0248\u0248\u0248!!!!\200\u0248\u0248!!!!\200\u0248\u0248\u0248\u0248\u0248\u0248!!!!\200\u0248\u0248!!!!\200\u0248\u0248\u0248\u0248\u0248\u0248!!!!\200\u0248\u0248!!!!\200\u0248\u0248\u0248\u0248\u0248\u0248!!!!\200\u0248\u0248!!!!\200\u0248\u0248\u0248\u0248\u0248\u0248!!!!\200\u0248\u0248!!!!\200\u0248\u0248\u0248\u0248!!!!!" + "'", str2, "\u0248\u0248!!!!\200\u0248\u0248!!!!\200\u0248\u0248\u0248\u0248\u0248\u0248!!!!\200\u0248\u0248!!!!\200\u0248\u0248\u0248\u0248\u0248\u0248!!!!\200\u0248\u0248!!!!\200\u0248\u0248\u0248\u0248\u0248\u0248!!!!\200\u0248\u0248!!!!\200\u0248\u0248\u0248\u0248\u0248\u0248!!!!\200\u0248\u0248!!!!\200\u0248\u0248\u0248\u0248\u0248\u0248!!!!\200\u0248\u0248!!!!\200\u0248\u0248\u0248\u0248\u0248\u0248!!!!\200\u0248\u0248!!!!\200\u0248\u0248\u0248\u0248\u0248\u0248!!!!\200\u0248\u0248!!!!\200\u0248\u0248\u0248\u0248\u0248\u0248!!!!\200\u0248\u0248!!!!\200\u0248\u0248\u0248\u0248\u0248\u0248!!!!\200\u0248\u0248!!!!\200\u0248\u0248\u0248\u0248\u0248\u0248!!!!\200\u0248\u0248!!!!\200\u0248\u0248\u0248\u0248\u0248\u0248!!!!\200\u0248\u0248!!!!\200\u0248\u0248\u0248\u0248!!!!!");
    }

    @Test
    public void test10220() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10220");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.encode("\u014e\u0150\u0150\u014e\u0150\u0150\u014e\u0150\u0150\u014e\u0150\u0150\u014e\u0150\u0150\u014e\u0150\u0150]]!", "");
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "}!nullnullnull!nullnullnull!nullnullnull~}}^}!nullnullnull!nullnullnull!nullnullnull]]!" + "'", str2, "}!nullnullnull!nullnullnull!nullnullnull~}}^}!nullnullnull!nullnullnull!nullnullnull]]!");
    }

    @Test
    public void test10221() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10221");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.encodeu0346\u0368\u0368\u0346\u0368\u0368\u0346\u0368\u0368\u0346\u0368\u0368\u0346\u0368\u0368\u0346\u0368\u0368\u0346\u0368\u0368\u0346\u0368\u0368\u0346\u0368\u0368\u0346\u0368\u0368\u0346\u0368\u0368\u0346\u0368\u0368\u0346\u0368\u0368\u0346\u0368\u0368\u0346\u0368\u0368\u0346\u0368\u0368\u0346\u0368\u0368\u0346\u0368\u0368\u0346\u0368\u0368\u0346\u0368\u0368\u0346\u0368\u0368\u0346\u0368\u0368\u0346\u0368\u0368\u0346\u0368\u0368!");
        org.junit.Assert.assertEquals("'" + strstr
    }

    @Test
    public void test10222() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10222");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.decode("fehhfehh!!fehhfehh!!fehhfehh!!fehhfehh!!fehhfehh!!fehhfehh!!fehhfehh!!fehhfehh!!!", "\275nullnullnull\275nullnullnull\275nullnullnull\275nullnullnullnullnull\275\275nullnull\275\275nullnull\275\275nullnull\275\275\275nullnullnull\275nullnullnull\275nullnullnull\275nullnullnullnullnull\275\275nullnull\275\275!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "nullnullnullnullnullnullnullnull!!nullnullnullnullnullnullnullnull!!nullnullnullnullnullnullnullnull!!nullnullnullnullnullnullnullnull!!nullnullnullnullnullnullnullnull!!nullnullnullnullnullnullnullnull!!nullnullnullnullnullnullnullnull!!nullnullnullnullnullnullnullnull!!!" + "'", str2, "nullnullnullnullnullnullnullnull!!nullnullnullnullnullnullnullnull!!nullnullnullnullnullnullnullnull!!nullnullnullnullnullnullnullnull!!nullnullnullnullnullnullnullnull!!nullnullnullnullnullnullnullnull!!nullnullnullnullnullnullnullnull!!nullnullnullnullnullnullnullnull!!!");
    }

    @Test
    public void test10223() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10223");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.encodeuu\275\275uu\275\275uu\275\275uu\275\275uu\275\275uu\275\275uu\275\275uu\275\275uu\275\275uu\275\275uu\275\275uu\275\275uu\275\275uu\275\275uu\275\275uu\275\275nullnullnullnulluu\275\275uu\275\275uu\275\275uu\275\275uu\275\275uu\275\275nullnullnullnulluu\275\275uu\275\275uu\275\275uu\275\275uu\275\275uu\275\275nullnullnullnulluu\275\275uu\275\275uu\275\275uu\275\275uu\275\275uu\275\275nullnullnullnulluu\275\275uu\275\275uu\275\275uu\275\275uu\275\275uu\275\275!");
        org.junit.Assert.assertEquals("'" + strstr
    }

    @Test
    public void test10224() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10224");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.decode("\275UUU\275UUU\275UUU\275UUUUU\275\275UU\275\275UU\275\275UU\275\275\275UUU\275UUU\275UUU\275UUUUU\275\275UU\275\275!", "ijll\230\226\226ijll\230\226\226ijll\230\226\226ijll\230\226\226ijll\230\226\226ijll\230\226\226ijll\230\226\226ijll\230\226\226!!ijll\230\226\226ijll\230\226\226ijll\230\226\226ijll\230\226\226ijll\230\226\226ijll\230\226\226ijll\230\226\226ijll\230\226\226!!!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\275nullnullnull\275nullnullnull\275nullnullnull\275nullnullnullnullnull\275\275nullnull\275\275nullnull\275\275nullnull\275\275\275nullnullnull\275nullnullnull\275nullnullnull\275nullnullnullnullnull\275\275nullnull\275\275!" + "'", str2, "\275nullnullnull\275nullnullnull\275nullnullnull\275nullnullnullnullnull\275\275nullnull\275\275nullnull\275\275nullnull\275\275\275nullnullnull\275nullnullnull\275nullnullnull\275nullnullnullnullnull\275\275nullnull\275\275!");
    }

    @Test
    public void test10225() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10225");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.decode("\u0366\u0365\u0368\u0368\u0346\u0348\u0348!", "\256\254\254\254\256\254\254\254\256\254\254\254\256\254\254\254\200}}`\256\254\254\254\256\254\254\254\256\254\254\254\256\254\254\254]]!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\u0366\u0365\u0368\u0368\u0346\u0348\u0348!" + "'", str2, "\u0366\u0365\u0368\u0368\u0346\u0348\u0348!");
    }

    @Test
    public void test10226() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10226");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.encode("\u0170\u0170\u0170\u0170\u0170\u0170\u0170\u0170\u0170\u0170\u0170\u0170\u0170\u0170\u0170\u0170\u0170\u0170\u0170\u0170\u0170\u0170\u0170\u0170\u0170\u0170\u0170\u0170\u0170\u0170\u0170\u0170\u0170\u0170\u0170\u0170\u0170\u0170\u0170\u0170\u0170\u0170\u0170\u0170\u0170\u0170\u0170\u0170!!!!", "\u0346\u0348\u0348\u0348\u0348\u0346\u0346!");
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "!!nullnull!!!nullnull!!nullnull!!!!!nullnull!!!nullnull!!nullnull!!!!!nullnull!!!nullnull!!nullnull!!!!!nullnull!!!nullnull!!nullnull!!!!!nullnull!!!nullnull!!nullnull!!!!!nullnull!!!nullnull!!nullnull!!!!!nullnull!!!nullnull!!nullnull!!!!!nullnull!!!nullnull!!nullnull!!!!" + "'", str2, "!!nullnull!!!nullnull!!nullnull!!!!!nullnull!!!nullnull!!nullnull!!!!!nullnull!!!nullnull!!nullnull!!!!!nullnull!!!nullnull!!nullnull!!!!!nullnull!!!nullnull!!nullnull!!!!!nullnull!!!nullnull!!nullnull!!!!!nullnull!!!nullnull!!nullnull!!!!!nullnull!!!nullnull!!nullnull!!!!");
    }

    @Test
    public void test10227() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10227");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.encode("\u019d\u019e\u01a0\u01a0\u019d\u019e\u01a0\u01a0\u019d\u019e\u01a0\u01a0\u019d\u019e\u01a0\u01a0\u019d\u019e\u01a0\u01a0\u019d\u019e\u01a0\u01a0\u019d\u019e\u01a0\u01a0\u019d\u019e\u01a0\u01a0\u019d\u019e\u01a0\u01a0\u019d\u019e\u01a0\u01a0\u019d\u019e\u01a0\u01a0\u019d\u019e\u01a0\u01a0\u019d\u019e\u01a0\u01a0\u019d\u019e\u01a0\u01a0\u019d\u019e\u01a0\u01a0\u019d\u019e\u01a0\u01a0\u019d\u019e\u01a0\u01a0\u019d\u019e\u01a0\u01a0\u019d\u019e\u01a0\u01a0\u019d\u019e\u01a0\u01a0\u019d\u019e\u01a0\u01a0\u019d\u019e\u01a0\u01a0\u019d\u019e\u01a0\u01a0\u019d\u019e\u01a0\u01a0\u019d\u019e\u01a0\u01a0\u019d\u019e\u01a0\u01a0\u019d\u019e\u01a0\u01a0\u019d\u019e\u01a0\u01a0\u019d\u019e\u01a0\u01a0\u019d\u019e\u01a0\u01a0\u019d\u019e\u01a0\u01a0\u019d\u019e\u01a0\u01a0!!!", "\u0366\u0365\u0368\u0368U!!!U!!!\200\200\u0346\u0348\u0348!");
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "!!nullnullnullnullnullnullnullnull!!nullnullnullnullnullnullnullnull!!!!nullnullnullnullnullnullnullnull!!nullnullnullnullnullnullnullnull!!!!nullnullnullnullnullnullnullnull!!nullnullnullnullnullnullnullnull!!!!nullnullnullnullnullnullnullnull!!nullnullnullnullnullnullnullnull!!!!nullnullnullnullnullnullnullnull!!nullnullnullnullnullnullnullnull!!!!nullnullnullnullnullnullnullnull!!nullnullnullnullnullnullnullnull!!!!nullnullnullnullnullnullnullnull!!nullnullnullnullnullnullnullnull!!!!nullnullnullnullnullnullnullnull!!nullnullnullnullnullnullnullnull!!!" + "'", str2, "!!nullnullnullnullnullnullnullnull!!nullnullnullnullnullnullnullnull!!!!nullnullnullnullnullnullnullnull!!nullnullnullnullnullnullnullnull!!!!nullnullnullnullnullnullnullnull!!nullnullnullnullnullnullnullnull!!!!nullnullnullnullnullnullnullnull!!nullnullnullnullnullnullnullnull!!!!nullnullnullnullnullnullnullnull!!nullnullnullnullnullnullnullnull!!!!nullnullnullnullnullnullnullnull!!nullnullnullnullnullnullnullnull!!!!nullnullnullnullnullnullnullnull!!nullnullnullnullnullnullnullnull!!!!nullnullnullnullnullnullnullnull!!nullnullnullnullnullnullnullnull!!!");
    }

    @Test
    public void test10228() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10228");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.encode("\215}\215\215\215}\215\215nullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull\215}\215\215\215}
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\215}\215\215\215}\215\215LU!!LU!!LU!!LU!!LU!!LU!!LU!!LU!!LU!!LU!!LU!!LU!!LU!!LU!!LU!!LU!!\215}\215\215\215}\215\215!" + "'", str2, "\215}\215\215\215}\215\215LU!!LU!!LU!!LU!!LU!!LU!!LU!!LU!!LU!!LU!!LU!!LU!!LU!!LU!!LU!!LU!!\215}\215\215\215}\215\215!");
    }

    @Test
    public void test10229() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10229");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.decodenullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull~}}^nullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull]]!");
        org.junit.Assert.assertEquals("'" + strstr
    }

    @Test
    public void test10230() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10230");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.encode("\u0104\u0101\u0101\u0104\u0101\u0101\u0104\u0101\u0101\u0104\u0101\u0101\u0104\u0101\u0101\u0104\u0101\u0101\u0104\u0101\u0101\u0104\u0101\u0101\u0104\u0101\u0101\u0104\u0101\u0101\u0104\u0101\u0101\u0104\u0101\u0101\u0104\u0101\u0101\u0104\u0101\u0101\u0104\u0101\u0101\u0104\u0101\u0101!", "LL]UULLLL]UULLLL]UULLLL]UULL!LL]UULLLL]UULLLL]UULLLL]UULLLL]UULLLL]UULLLL]UULLLL]UULLLL]UULLLL]UULLLL]UULLLL]UULL!LL]UULLLL]UULLLL]UULLLL]UULLLL]UULLLL]UULLLL]UULLLL]UULLLL]UULLLL]UULLLL]UULLLL]UULL!LL]UULLLL]UULLLL]UULLLL]UULLLL]UULLLL]UULLLL]UULLLL]UULLLL]UULLLL]UULLLL]UULLLL]UULL!LL]UULLLL]UULLLL]UULLLL]UULLLL]UULLLL]UULLLL]UULLLL]UULLLL]UULLLL]UULLLL]UULLLL]UULL!LL]UULLLL]UULLLL]UULLLL]UULLLL]UULLLL]UULLLL]UULLLL]UULLLL]UULLLL]UULLLL]UULLLL]UULL!LL]UULLLL]UULLLL]UULLLL]UULLLL]UULLLL]UULLLL]UULLLL]UULLLL]UULLLL]UULLLL]UULLLL]UULL!LL]UULLLL]UULLLL]UULLLL]UULLLL]UULLLL]UULLLL]UULLLL]UULLLL]UULLLL]UULLLL]UULLLL]UULL!LL]UULLLL]UULLLL]UULLLL]UULLLL]UULLLL]UULLLL]UULLLL]UULL!");
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "]]LL]]LL]]LL]]LL]]LL]]LL]]LL]]LLU]]LLLLU]]LLLL]]LL]]LL]]LL]]LL]]LL]]LL]]LL]]LLU]]LLLLU]]LLLL]]LL]]LL]]LL]]LL]]LL]]LL]]LL]]LLU]]LLLLU]]LLLL]]LL]]LL]]LL]]LL]]LL]]LL]]LL]]LLU]]LLLLU]]LLLL]]LL]]LL]]LL]]LL]]LL]]LL]]LL]]LLU]]LLLLU]]LLLL]]LL]]LL]]LL]]LL]]LL]]LL]]LL]]LLU]]LLLLU]]LLLL]]LL]]LL]]LL]]LL]]LL]]LL]]LL]]LLU]]LLLLU]]LLLL]]LL]]LL]]LL]]LL]]LL]]LL]]LL]]LLU]]LLLLU]]LLLL!" + "'", str2, "]]LL]]LL]]LL]]LL]]LL]]LL]]LL]]LLU]]LLLLU]]LLLL]]LL]]LL]]LL]]LL]]LL]]LL]]LL]]LLU]]LLLLU]]LLLL]]LL]]LL]]LL]]LL]]LL]]LL]]LL]]LLU]]LLLLU]]LLLL]]LL]]LL]]LL]]LL]]LL]]LL]]LL]]LLU]]LLLLU]]LLLL]]LL]]LL]]LL]]LL]]LL]]LL]]LL]]LLU]]LLLLU]]LLLL]]LL]]LL]]LL]]LL]]LL]]LL]]LL]]LLU]]LLLLU]]LLLL]]LL]]LL]]LL]]LL]]LL]]LL]]LL]]LLU]]LLLLU]]LLLL]]LL]]LL]]LL]]LL]]LL]]LL]]LL]]LLU]]LLLLU]]LLLL!");
    }

    @Test
    public void test10231() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10231");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.encode("\u0368\u0368\u0368\u0368\u0368\u0368\u0368\u0368\u0368\u0368\u0368\u0368\u0368\u0368\u0368\u0368\u0368\u0368\u0368\u0368\u0368\u0368\u0368\u0368\u0368\u0368\u0368\u0368\u0368\u0368\u0368\u0368\u0368\u0368\u0368\u0368\u0368\u0368\u0368\u0368\u0368\u0368\u0368\u0368\u0368\u0368\u0368\u0368\u0368\u0368\u0368\u0368\u0368\u0368\u0368\u0368\u0368\u0368\u0368\u0368\u0368\u0368\u0368\u0368\u0368\u0368\u0368\u0368\u0368\u0368\u0368\u0368\u0368\u0368\u0368\u0368\u0368\u0368\u0368\u0368\u0368\u0368\u0368\u0368\u0368\u0368\u0368\u0368\u0368\u0368\u0368\u0368\u0368\u0368\u0368\u0368!!!!!!!!!", "\u019d\u01a0\u019d\u019d\200\u019d\u01a0\u019d\u019d\200\u019d\u01a0\u019d\u019d\200\u019d\u01a0\u019d\u019d\200\u019d\u01a0\u019d\u019d\200\u019d\u01a0\u019d\u019d\200\u019d\u01a0\u019d\u019d\200\u019d\u01a0\u019d\u019d\200}}!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\u0368\u0368\u0368\u0368\u0368\u0368\u0368\u0368\u0368\u0368\u0368\u0368\u0368\u0368\u0368\u0368\u0368\u0368\u0368\u0368\u0368\u0368\u0368\u0368\u0368\u0368\u0368\u0368\u0368\u0368\u0368\u0368\u0368\u0368\u0368\u0368\u0368\u0368\u0368\u0368\u0368\u0368\u0368\u0368\u0368\u0368\u0368\u0368\u0368\u0368\u0368\u0368\u0368\u0368\u0368\u0368\u0368\u0368\u0368\u0368\u0368\u0368\u0368\u0368\u0368\u0368\u0368\u0368\u0368\u0368\u0368\u0368\u0368\u0368\u0368\u0368\u0368\u0368\u0368\u0368\u0368\u0368\u0368\u0368\u0368\u0368\u0368\u0368\u0368\u0368\u0368\u0368\u0368\u0368\u0368\u0368!!!!!!!!!" + "'", str2, "\u0368\u0368\u0368\u0368\u0368\u0368\u0368\u0368\u0368\u0368\u0368\u0368\u0368\u0368\u0368\u0368\u0368\u0368\u0368\u0368\u0368\u0368\u0368\u0368\u0368\u0368\u0368\u0368\u0368\u0368\u0368\u0368\u0368\u0368\u0368\u0368\u0368\u0368\u0368\u0368\u0368\u0368\u0368\u0368\u0368\u0368\u0368\u0368\u0368\u0368\u0368\u0368\u0368\u0368\u0368\u0368\u0368\u0368\u0368\u0368\u0368\u0368\u0368\u0368\u0368\u0368\u0368\u0368\u0368\u0368\u0368\u0368\u0368\u0368\u0368\u0368\u0368\u0368\u0368\u0368\u0368\u0368\u0368\u0368\u0368\u0368\u0368\u0368\u0368\u0368\u0368\u0368\u0368\u0368\u0368\u0368!!!!!!!!!");
    }

    @Test
    public void test10232() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10232");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.decode("\u0366\u0365\u0368\u0368\u0245\u0246\u0248\u0248\u0346\u0348\u0348!", "\200\200\300\300\200\200\300\300\200\200\300\300\200\200\300\300\200\200\300\300\200\200\300\300\200\200\300\300\200\200\300\300\200\200\300\300\200\200\300\300\200\200\300\300\200\200\300\300\200\200\300\300\200\200\300\300\200\200\300\300\200\200\300\300\200\200\300\300\200\200\300\300\200\200\300\300\200\200\300\300\200\200\300\300\200\200\300\300\200\200\300\300\200\200\300\300\200\200\300\300\200\200\300\300\200\200\300\300\200\200\300\300\200\200\300\300\200\200\300\300\200\200\300\300\200\200\300\300!");
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\u0366\u0365\u0368\u0368\u0346\u0348\u0348!" + "'", str2, "\u0366\u0365\u0368\u0368\u0346\u0348\u0348!");
    }

    @Test
    public void test10233() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10233");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.decode("eeffeeffeeffeeffeeffeeffeeffeeffeeffeeffeeffeeffeeffeeffeeffeeffeeffeeffeeffeeffeeffeeffeeffeeffeeffeeffeeffeeffeeffeeffeeffeeff!", "\u0366\u0365\u0368\u0368\266\266!!\266\266!!\266\266!!\266\266\u0346\u0348\u0348!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "nullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull!" + "'", str2, "nullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull!");
    }

    @Test
    public void test10234() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10234");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.encode("\u01fd\u01fe\u0200\u0200\u01fd\u01fe\u0200\u0200\u01fd\u01fe\u0200\u0200\u01fd\u01fe\u0200\u0200\u01fd\u01fe\u0200\u0200\u01fd\u01fe\u0200\u0200\u01fd\u01fe\u0200\u0200\u01fd\u01fe\u0200\u0200\u01fd\u01fe\u0200\u0200\u01fd\u01fe\u0200\u0200\u01fd\u01fe\u0200\u0200\u01fd\u01fe\u0200\u0200\u01fd\u01fe\u0200\u0200\u01fd\u01fe\u0200\u0200\u01fd\u01fe\u0200\u0200\u01fd\u01fe\u0200\u0200\u01fd\u01fe\u0200\u0200\u01fd\u01fe\u0200\u0200\u01fd\u01fe\u0200\u0200\u01fd\u01fe\u0200\u0200\u01fd\u01fe\u0200\u0200\u01fd\u01fe\u0200\u0200!!!!", "\u0346\u0348\u0348\u0348\333\334\336\336\333\334\336\336\333\334\336\336\333\334\336\336\333\334\336\336\333\334\336\336\333\334\336\336\333\334\336\336\333\334\336\336\333\334\336\336\333\334\336\336\333\334\336\336\333\334\336\336\333\334\336\336\333\334\336\336\333\334\336\336\u0348\u0346\u0346!");
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "nullnullnullnullnullnullnullnull!!nullnullnullnullnullnullnullnull!!nullnullnullnullnullnullnullnull!!nullnullnullnullnullnullnullnull!!nullnullnullnull!!!nullnullnullnull!!!nullnullnullnull!!!nullnullnullnull!!!nullnullnullnullnullnullnullnull!!nullnullnullnullnullnullnullnull!!nullnullnullnullnullnullnullnull!!nullnullnullnullnullnullnullnull!!nullnullnullnull!!!nullnullnullnull!!!!" + "'", str2, "nullnullnullnullnullnullnullnull!!nullnullnullnullnullnullnullnull!!nullnullnullnullnullnullnullnull!!nullnullnullnullnullnullnullnull!!nullnullnullnull!!!nullnullnullnull!!!nullnullnullnull!!!nullnullnullnull!!!nullnullnullnullnullnullnullnull!!nullnullnullnullnullnullnullnull!!nullnullnullnullnullnullnullnull!!nullnullnullnullnullnullnullnull!!nullnullnullnull!!!nullnullnullnull!!!!");
    }

    @Test
    public void test10235() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10235");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.encode("nullnull!!null~~nullnull!!null~~nullnull!!null~~nullnull!!null~~nullnull!!null~~nullnull!!null~~nullnull!!null~~nullnull!!null~~!", "UNLLUNLL!!UNLLUNLL!!UNLLUNLL!!UNLLUNLL!!UNLLUNLL!!UNLLUNLL!!UNLLUNLL!!UNLLUNLL!!\242UNLLUNLL!!\237\237\242UNLLUNLL!!\237\237UNLLUNLL!!UNLLUNLL!!UNLLUNLL!!UNLLUNLL!!UNLLUNLL!!UNLLUNLL!!UNLLUNLL!!UNLLUNLL!!\242UNLLUNLL!!\237\237\242UNLLUNLL!!\237\237UNLLUNLL!!UNLLUNLL!!UNLLUNLL!!UNLLUNLL!!UNLLUNLL!!UNLLUNLL!!UNLLUNLL!!UNLLUNLL!!\242UNLLUNLL!!\237\237\242UNLLUNLL!!\237\237UNLLUNLL!!UNLLUNLL!!UNLLUNLL!!UNLLUNLL!!UNLLUNLL!!UNLLUNLL!!UNLLUNLL!!UNLLUNLL!!\242UNLLUNLL!!\237\237\242UNLLUNLL!!\237\237UNLLUNLL!!UNLLUNLL!!UNLLUNLL!!UNLLUNLL!!UNLLUNLL!!UNLLUNLL!!UNLLUNLL!!UNLLUNLL!!\242UNLLUNLL!!\237\237\242UNLLUNLL!!\237\237UNLLUNLL!!UNLLUNLL!!UNLLUNLL!!UNLLUNLL!!UNLLUNLL!!UNLLUNLL!!UNLLUNLL!!UNLLUNLL!!\242UNLLUNLL!!\237\237\242UNLLUNLL!!\237\237UNLLUNLL!!UNLLUNLL!!UNLLUNLL!!UNLLUNLL!!UNLLUNLL!!UNLLUNLL!!UNLLUNLL!!UNLLUNLL!!\242UNLLUNLL!!\237\237\242UNLLUNLL!!\237\237UNLLUNLL!!UNLLUNLL!!UNLLUNLL!!UNLLUNLL!!UNLLUNLL!!UNLLUNLL!!UNLLUNLL!!UNLLUNLL!!\242UNLLUNLL!!\237\237\242UNLLUNLL!!\237\237!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "NLLLNLLL!!NLLL~~NLLLNLLL!!NLLL~~NLLLNLLL!!NLLL~~NLLLNLLL!!NLLL~~NLLLNLLL!!NLLL~~NLLLNLLL!!NLLL~~NLLLNLLL!!NLLL~~NLLLNLLL!!NLLL~~!" + "'", str2, "NLLLNLLL!!NLLL~~NLLLNLLL!!NLLL~~NLLLNLLL!!NLLL~~NLLLNLLL!!NLLL~~NLLLNLLL!!NLLL~~NLLLNLLL!!NLLL~~NLLLNLLL!!NLLL~~NLLLNLLL!!NLLL~~!");
    }

    @Test
    public void test10236() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10236");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.decode("````````````````````````````````!", "}!\200\200}!\200\200}!\200\200}!\200\200\230null\215\215\230null\215\215\230null\215\215\230null\215\215\230null\215\215\230null\215\215\230null\215\215\230null\215\215\230null\215\215\230null\215\215\230null\215\215\230null\215\215\230null\215\215\230null\215\215\230null\215\215\230null\215\215}!\200\200}!\200\200}!\200\200}!\200\200\230null\215\215\230null\215\215\230null\215\215\230null\215\215\230null\215\215\230null\215\215\230null\215\215\230null\215\215!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "````````````````````````````````!" + "'", str2, "````````````````````````````````!");
    }

    @Test
    public void test10237() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10237");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.encode("nullnullnullnull!!!nullnullnullnull!!!nullnullnullnull!!!nullnullnullnull!!!nullnullnullnull!!!nullnullnullnull!!!nullnullnullnull!!!nullnullnullnull!!!!", "!!\214\214!!\214\214!!!!\214\214!!\214\214!!!!\214\214!!\214\214!!\214\214!!\214\214!!!!\214\214!!\214\214!!!!\214\214!!\214\214!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\214!!!\214!!!\214!!!\214!!!!!!\214!!!\214!!!\214!!!\214!!!!!!\214!!!\214!!!\214!!!\214!!!!!!\214!!!\214!!!\214!!!\214!!!!!!\214!!!\214!!!\214!!!\214!!!!!!\214!!!\214!!!\214!!!\214!!!!!!\214!!!\214!!!\214!!!\214!!!!!!\214!!!\214!!!\214!!!\214!!!!!!!" + "'", str2, "\214!!!\214!!!\214!!!\214!!!!!!\214!!!\214!!!\214!!!\214!!!!!!\214!!!\214!!!\214!!!\214!!!!!!\214!!!\214!!!\214!!!\214!!!!!!\214!!!\214!!!\214!!!\214!!!!!!\214!!!\214!!!\214!!!\214!!!!!!\214!!!\214!!!\214!!!\214!!!!!!\214!!!\214!!!\214!!!\214!!!!!!!");
    }

    @Test
    public void test10238() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10238");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.decode("XXXX\200}}`XXXX]]!", "null!nullnullnull!nullnullnull!nullnullnull!nullnull\200}}`null!nullnullnull!nullnullnull!nullnullnull!nullnull]]!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "nullnullnullnull\200}}`nullnullnullnull]]!" + "'", str2, "nullnullnullnull\200}}`nullnullnullnull]]!");
    }

    @Test
    public void test10239() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10239");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.encode("UUUU!]UU!]UU!]UU!]UUUUUU!]UU!]UU!", "orrrorrrrrorrrorrrrrorrrorrrrrorrrorrrrrorrrorrrrrorrrorrrrrorrrorrrrrorrrorrrrr!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "OOOO!]OO!]OO!]OO!]OOOOOO!]OO!]OO!" + "'", str2, "OOOO!]OO!]OO!]OO!]OOOOOO!]OO!]OO!");
    }

    @Test
    public void test10240() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10240");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.encode("L!!!L!!!L!!!L!!!L!!!L!!!L!!!L!!!!!L!!!L!!!L!!!L!!!L!!!L!!!L!!!L!!!!!!!L!!!L!!!L!!!L!!!L!!!L!!!L!!!L!!!!!L!!!L!!!L!!!L!!!L!!!L!!!L!!!L!!!!!!!L!!!L!!!L!!!L!!!L!!!L!!!L!!!L!!!!!L!!!L!!!L!!!L!!!L!!!L!!!L!!!L!!!!!!!L!!!L!!!L!!!L!!!L!!!L!!!L!!!L!!!!!L!!!L!!!L!!!L!!!L!!!L!!!L!!!L!!!!!!!L!!!L!!!L!!!L!!!L!!!L!!!L!!!L!!!!!L!!!L!!!L!!!L!!!L!!!L!!!L!!!L!!!!!!!L!!!L!!!L!!!L!!!L!!!L!!!L!!!L!!!!!L!!!L!!!L!!!L!!!L!!!L!!!L!!!L!!!!!!!L!!!L!!!L!!!L!!!L!!!L!!!L!!!L!!!!!L!!!L!!!L!!!L!!!L!!!L!!!L!!!L!!!!!!!L!!!L!!!L!!!L!!!L!!!L!!!L!!!L!!!!!L!!!L!!!L!!!L!!!L!!!L!!!L!!!L!!!!!!!!", "}~\200\200}~\200\200}~\200\200}~\200\200}~\200\200}~\200\200}~\200\200}~\200\200}~\200\200}~\200\200}~\200\200}~\200\200}~\200\200}~\200\200}~\200\200}~\200\200}~\200\200}~\200\200}~\200\200}~\200\200}~\200\200}~\200\200}~\200\200}~\200\200}~\200\200}~\200\200}~\200\200}~\200\200}~\200\200}~\200\200}~\200\200}~\200\200!");
        org.junit.Assert.assertEquals("'" + strstr
    }

    @Test
    public void test10241() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10241");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.encode("\u0366\u0365\u0368\u0368\u014e\u014e!!\213\213\213\u0346\u0348\u0348!", "\u0132\u0134\u0132\u0134\u0132\u0134\u0132\u0134\u0132\u0134\u0132\u0134\u0132\u0134\u0132\u0134\u0132\u0134\u0132\u0134\u0132\u0134\u0132\u0134\u0132\u0134\u0132\u0134\u0132\u0134\u0132\u0134nullnull!");
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\u0366\u0365\u0368\u0368UU!!\213\213\213\u0346\u0348\u0348!" + "'", str2, "\u0366\u0365\u0368\u0368UU!!\213\213\213\u0346\u0348\u0348!");
    }

    @Test
    public void test10242() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10242");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.decode("U]UUU]UU!!U]UUU]UU!!U]UUU]UUU]UUU]UU!!U]UUU]UU!!U]UUU]UU!", "!nullnullnullnull!!!nullnullnullnull!!!!!nullnullnullnull!!!nullnullnullnull!!!!!nullnullnullnull!!!nullnullnullnull!!!nullnullnullnull!!!nullnullnullnull!!!!!nullnullnullnull!!!nullnullnullnull!!!!!nullnullnullnull!!!nullnullnullnull!!!");
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\u0128\u0128\u0128\u0128\u0128\u0128\u0128\u0128\u0128\u0128\u0128\u0128\u0128\u0128\u0128\u0128\u0128\u0128\u0128\u0128\u0128\u0128\u0128\u0128\u0128\u0128\u0128\u0128\u0128\u0128\u0128\u0128\u0128\u0128\u0128\u0128!" + "'", str2, "\u0128\u0128\u0128\u0128\u0128\u0128\u0128\u0128\u0128\u0128\u0128\u0128\u0128\u0128\u0128\u0128\u0128\u0128\u0128\u0128\u0128\u0128\u0128\u0128\u0128\u0128\u0128\u0128\u0128\u0128\u0128\u0128\u0128\u0128\u0128\u0128!");
    }

    @Test
    public void test10243() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10243");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.encode("\u02c9\u02c9\u02cc\u02cc\u02c9\u02c9\u02cc\u02cc\u02c9\u02c9\u02cc\u02cc\u02c9\u02c9\u02cc\u02cc\254~\256\256\254~\256\256\254~\256\256\254~\256\256!", "!!NN!!NN!!NN!!NN!!NN!!NN!!NN!!NN!!NN!!NNnullnull!!NN!!NNnullnull!!NN!!NN!!NN!!NN!!NN!!NN!!NN!!NN!!NN!!NNnullnull!!NN!!NNnullnull!!NN!!NN!!NN!!NN!!NN!!NN!!NN!!NN!!NN!!NNnullnull!!NN!!NNnullnull!!NN!!NN!!NN!!NN!!NN!!NN!!NN!!NN!!NN!!NNnullnull!!NN!!NNnullnull!!NN!!NN!!NN!!NN!!NN!!NN!!NN!!NN!!NN!!NNnullnull!!NN!!NNnullnull!!NN!!NN!!NN!!NN!!NN!!NN!!NN!!NN!!NN!!NNnullnull!!NN!!NNnullnull!!NN!!NN!!NN!!NN!!NN!!NN!!NN!!NN!!NN!!NNnullnull!!NN!!NNnullnull!!NN!!NN!!NN!!NN!!NN!!NN!!NN!!NN!!NN!!NNnullnull!!NN!!NNnullnull!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "nullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull\254~\256\256\254~\256\256\254~\256\256\254~\256\256!" + "'", str2, "nullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull\254~\256\256\254~\256\256\254~\256\256\254~\256\256!");
    }

    @Test
    public void test10244() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10244");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.encode
        org.junit.Assert.assertEquals("'" + strstr
    }

    @Test
    public void test10245() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10245");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.encode("FF!", "nullnullnullnullUNLLUNLLUNLLUNLLnullnullnullnullUNLLUNLL!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "UU!" + "'", str2, "UU!");
    }

    @Test
    public void test10246() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10246");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.decode("LNUULNUU!!LNUULNUU!!LNUULNUU!!LNUULNUU!!LNUULNUU!!LNUULNUU!!LNUULNUU!!LNUULNUU!!!", "````````````````````````````````\253\254\256\256\253\254\256\256````````````````````````````````\253\254\256\256\253\254\256\256````````````````````````````````\253\254\256\256\253\254\256\256````````````````````````````````\253\254\256\256\253\254\256\256````````````````````````````````\253\254\256\256\253\254\256\256````````````````````````````````\253\254\256\256\253\254\256\256````````````````````````````````\253\254\256\256\253\254\256\256````````````````````````````````\253\254\256\256\253\254\256\256!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "nullnullnullnullnullnullnullnull!!nullnullnullnullnullnullnullnull!!nullnullnullnullnullnullnullnull!!nullnullnullnullnullnullnullnull!!nullnullnullnullnullnullnullnull!!nullnullnullnullnullnullnullnull!!nullnullnullnullnullnullnullnull!!nullnullnullnullnullnullnullnull!!!" + "'", str2, "nullnullnullnullnullnullnullnull!!nullnullnullnullnullnullnullnull!!nullnullnullnullnullnullnullnull!!nullnullnullnullnullnullnullnull!!nullnullnullnullnullnullnullnull!!nullnullnullnullnullnullnullnull!!nullnullnullnullnullnullnullnull!!nullnullnullnullnullnullnullnull!!!");
    }

    @Test
    public void test10247() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10247");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.decodeu028d\u028e\u0290\u0290nullnullnullnull!");
        org.junit.Assert.assertEquals("'" + strstr
    }

    @Test
    public void test10248() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10248");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.encode("", "nullnull]]nullnull]]nullnullnullnullnullnullnullnullnullnull]]nullnull]]nullnullnullnullnullnullnullnull!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
    }

    @Test
    public void test10249() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10249");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.encode("LUUULUUU!", "U~\225\225\230\230\225\225\230\230\225\225\230\230\225\225U~\225\225\230\230\225\225\230\230\225\225\230\230\225\225U~\225\225\230\230\225\225\230\230\225\225\230\230\225\225U~\225\225\230\230\225\225\230\230\225\225\230\230\225\225U~\225\225\230\230\225\225\230\230\225\225\230\230\225\225U~\225\225\230\230\225\225\230\230\225\225\230\230\225\225U~\225\225\230\230\225\225\230\230\225\225\230\230\225\225U~\225\225\230\230\225\225\230\230\225\225\230\230\225\225!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\225\230\230\230\225\230\230\230!" + "'", str2, "\225\230\230\230\225\230\230\230!");
    }

    @Test
    public void test10250() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10250");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.encode("ZZ!!ZZ!!ZZ!!ZZ!!ZZ!!ZZ!!ZZ!!ZZ!!!!ZZ!!ZZ!!ZZ!!ZZ!!ZZ!!ZZ!!ZZ!!ZZ!!!!ZZ!!ZZ!!ZZ!!ZZ!!ZZ!!ZZ!!ZZ!!ZZ!!ZZ!!ZZ!!ZZ!!ZZ!!ZZ!!ZZ!!ZZ!!ZZ!!!!ZZ!!ZZ!!ZZ!!ZZ!!ZZ!!ZZ!!ZZ!!ZZ!!!!ZZ!!ZZ!!ZZ!!ZZ!!ZZ!!ZZ!!ZZ!!ZZ!!!", "null\200}}`null]]!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!!" + "'", str2, "nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!!");
    }

    @Test
    public void test10251() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10251");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.encode("!HHHH!", "nullnull!!nullnull!!nullnull!!nullnull!!nullnullnull!!nullnullnullnullnull!!nullnullnullnullnull!!nullnullnullnullnull!!nullnullnullnull!!nullnull!!nullnull!!nullnull!!nullnullnull!!nullnullnullnullnull!!nullnull!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "!LLLL!" + "'", str2, "!LLLL!");
    }

    @Test
    public void test10252() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10252");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.encode("NLLLNLLLLLNLLLNLLLLL!", "LLJJLLJJLLJJLLJJLLJJLLJJLLJJLLJJLLLLJJLLJJLLJJLLJJLLJJLLJJLLJJLLJJLLLLJJLLJJLLJJLLJJLLJJLLJJLLJJLLJJLLLLJJLLJJLLJJLLJJLLJJLLJJLLJJLLJJLLLLJJLLJJLLJJLLJJLLJJLLJJLLJJLLJJLLLLJJLLJJLLJJLLJJLLJJLLJJLLJJLLJJLLLLJJLLJJLLJJLLJJLLJJLLJJLLJJLLJJLLLLJJLLJJLLJJLLJJLLJJLLJJLLJJLLJJLL!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "LJJJLJJJJJLJJJLJJJJJ!" + "'", str2, "LJJJLJJJJJLJJJLJJJJJ!");
    }

    @Test
    public void test10253() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10253");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.encodenullnullnullnullnullnullnullnull!!nullnullnullnullnullnullnullnull!!nullnullnullnullnullnullnullnull!!nullnullnullnullnullnullnullnull!!nullnullnullnullnullnullnullnull!!]]nullnullnullnullnullnullnullnull!!nullnullnullnullnullnullnullnull!!]]nullnullnullnullnullnullnullnull!!nullnullnullnullnullnullnullnull!!]]nullnullnullnullnullnullnullnull!!nullnullnullnullnullnullnullnull!!]]]nullnullnullnullnullnullnullnull!!nullnullnullnullnullnullnullnull!!nullnullnullnullnullnullnullnull!!nullnullnullnullnullnullnullnull!!nullnullnullnullnullnullnullnull!!]]nullnullnullnullnullnullnullnull!!nullnullnullnullnullnullnullnull!!]]!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "NNLLNNLLNNLLNNLLNNLLNNLLNNLLNNLL\253\254\256\256\253\254\256\256NNLLNNLLNNLLNNLLNNLLNNLLNNLLNNLL\253\254\256\256\253\254\256\256NNLLNNLLNNLLNNLLNNLLNNLLNNLLNNLL\253\254\256\256\253\254\256\256NNLLNNLLNNLLNNLLNNLLNNLLNNLLNNLL\253\254\256\256\253\254\256\256NNLLNNLLNNLLNNLLNNLLNNLLNNLLNNLL\253\254\256\256\253\254\256\256NNLLNNLLNNLLNNLLNNLLNNLLNNLLNNLL\253\254\256\256\253\254\256\256NNLLNNLLNNLLNNLLNNLLNNLLNNLLNNLL\253\254\256\256\253\254\256\256NNLLNNLLNNLLNNLLNNLLNNLLNNLLNNLL\253\254\256\256\253\254\256\256!" + "'", str
    }

    @Test
    public void test10254() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10254");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.encode("U!NNU!NN!NNN!NNNU!NNU!NN!NNN!NNN!!U!NNU!NN!NNN!NNNU!NNU!NN!NNN!NNN!!U!NNU!NN!NNN!NNNU!NNU!NN!NNN!NNNU!NNU!NN!NNN!NNNU!NNU!NN!NNN!NNN!!U!NNU!NN!NNN!NNNU!NNU!NN!NNN!NNN!!U!NNU!NN!NNN!NNNU!NNU!NN!NNN!NNN!", "LNNNLNNNLNNNLNNNLNNNLNNNLNNNLNNNLNLLLNLLLNNNLNNNLNNNLNNNLNNNLNNNLNNNLNNNLNLLLNLL\225\225LNNNLNNNLNNNLNNNLNNNLNNNLNNNLNNNLNLLLNLLLNNNLNNNLNNNLNNNLNNNLNNNLNNNLNNNLNLLLNLL\225\225LNNNLNNNLNNNLNNNLNNNLNNNLNNNLNNNLNLLLNLLLNNNLNNNLNNNLNNNLNNNLNNNLNNNLNNNLNLLLNLL\225\225LNNNLNNNLNNNLNNNLNNNLNNNLNNNLNNNLNLLLNLLLNNNLNNNLNNNLNNNLNNNLNNNLNNNLNNNLNLLLNLL\225\225LNNNLNNNLNNNLNNNLNNNLNNNLNNNLNNNLNLLLNLLLNNNLNNNLNNNLNNNLNNNLNNNLNNNLNNNLNLLLNLL\225\225LNNNLNNNLNNNLNNNLNNNLNNNLNNNLNNNLNLLLNLLLNNNLNNNLNNNLNNNLNNNLNNNLNNNLNNNLNLLLNLL\225\225LNNNLNNNLNNNLNNNLNNNLNNNLNNNLNNNLNLLLNLLLNNNLNNNLNNNLNNNLNNNLNNNLNNNLNNNLNLLLNLL\225\225LNNNLNNNLNNNLNNNLNNNLNNNLNNNLNNNLNLLLNLLLNNNLNNNLNNNLNNNLNNNLNNNLNNNLNNNLNLLLNLL\225\225!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "L!NNL!NN!NNN!NNNL!NNL!NN!NNN!NNN!!L!NNL!NN!NNN!NNNL!NNL!NN!NNN!NNN!!L!NNL!NN!NNN!NNNL!NNL!NN!NNN!NNNL!NNL!NN!NNN!NNNL!NNL!NN!NNN!NNN!!L!NNL!NN!NNN!NNNL!NNL!NN!NNN!NNN!!L!NNL!NN!NNN!NNNL!NNL!NN!NNN!NNN!" + "'", str2, "L!NNL!NN!NNN!NNNL!NNL!NN!NNN!NNN!!L!NNL!NN!NNN!NNNL!NNL!NN!NNN!NNN!!L!NNL!NN!NNN!NNNL!NNL!NN!NNN!NNNL!NNL!NN!NNN!NNNL!NNL!NN!NNN!NNN!!L!NNL!NN!NNN!NNNL!NNL!NN!NNN!NNN!!L!NNL!NN!NNN!NNNL!NNL!NN!NNN!NNN!");
    }

    @Test
    public void test10255() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10255");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.encode("u\375llu\375llu\375llu\375llu\375llu\375llu\375llu\375lluuu\375llu\375llu\375llu\375llu\375llu\375llu\375llu\375lluuu\375llu\375llu\375llu\375llu\375llu\375llu\375llu\375lluuu\375llu\375llu\375llu\375llu\375llu\375llu\375llu\375lluuu\375llu\375llu\375llu\375llu\375llu\375llu\375llu\375lluuu\375llu\375llu\375llu\375llu\375llu\375llu\375llu\375lluuu\375llu\375llu\375llu\375llu\375llu\375llu\375llu\375lluuu\375llu\375llu\375llu\375llu\375llu\375llu\375llu\375lluu!", "LL\225\225LL\225\225LL\225\225LL\225\225LL\225\225LL\225\225LL\225\225LL\225\225!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "lnull\225\225lnull\225\225lnull\225\225lnull\225\225lnull\225\225lnull\225\225lnull\225\225lnull\225\225lllnull\225\225lnull\225\225lnull\225\225lnull\225\225lnull\225\225lnull\225\225lnull\225\225lnull\225\225lllnull\225\225lnull\225\225lnull\225\225lnull\225\225lnull\225\225lnull\225\225lnull\225\225lnull\225\225lllnull\225\225lnull\225\225lnull\225\225lnull\225\225lnull\225\225lnull\225\225lnull\225\225lnull\225\225lllnull\225\225lnull\225\225lnull\225\225lnull\225\225lnull\225\225lnull\225\225lnull\225\225lnull\225\225lllnull\225\225lnull\225\225lnull\225\225lnull\225\225lnull\225\225lnull\225\225lnull\225\225lnull\225\225lllnull\225\225lnull\225\225lnull\225\225lnull\225\225lnull\225\225lnull\225\225lnull\225\225lnull\225\225lllnull\225\225lnull\225\225lnull\225\225lnull\225\225lnull\225\225lnull\225\225lnull\225\225lnull\225\225ll!" + "'", str2, "lnull\225\225lnull\225\225lnull\225\225lnull\225\225lnull\225\225lnull\225\225lnull\225\225lnull\225\225lllnull\225\225lnull\225\225lnull\225\225lnull\225\225lnull\225\225lnull\225\225lnull\225\225lnull\225\225lllnull\225\225lnull\225\225lnull\225\225lnull\225\225lnull\225\225lnull\225\225lnull\225\225lnull\225\225lllnull\225\225lnull\225\225lnull\225\225lnull\225\225lnull\225\225lnull\225\225lnull\225\225lnull\225\225lllnull\225\225lnull\225\225lnull\225\225lnull\225\225lnull\225\225lnull\225\225lnull\225\225lnull\225\225lllnull\225\225lnull\225\225lnull\225\225lnull\225\225lnull\225\225lnull\225\225lnull\225\225lnull\225\225lllnull\225\225lnull\225\225lnull\225\225lnull\225\225lnull\225\225lnull\225\225lnull\225\225lnull\225\225lllnull\225\225lnull\225\225lnull\225\225lnull\225\225lnull\225\225lnull\225\225lnull\225\225lnull\225\225ll!");
    }

    @Test
    public void test10256() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10256");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.decode("!LLL!LLL!LLL!LLL!LLL!LLL!LLL!LLL!!!LLL!LLL!LLL!LLL!LLL!LLL!LLL!LLL!!!LLL!LLL!LLL!LLL!LLL!LLL!LLL!LLL!!!LLL!LLL!LLL!LLL!LLL!LLL!LLL!LLL!!!LLL!LLL!LLL!LLL!LLL!LLL!LLL!LLL!!!LLL!LLL!LLL!LLL!LLL!LLL!LLL!LLL!!!LLL!LLL!LLL!LLL!LLL!LLL!LLL!LLL!!!LLL!LLL!LLL!LLL!LLL!LLL!LLL!LLL!!!", "\u014f!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnull!!!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnull!!!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnull!!!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnull!!!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnull!!!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnull!!!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnull!!!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnull!!!" + "'", str2, "!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnull!!!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnull!!!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnull!!!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnull!!!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnull!!!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnull!!!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnull!!!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnull!!!");
    }

    @Test
    public void test10257() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10257");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.encode("\266!!!!ufll\266\266!ufll\266\266!!!!\266!!!!ufll\266\266!ufll\266\266!!!!!!\266!!!!ufll\266\266!ufll\266\266!!!!\266!!!!ufll\266\266!ufll\266\266!!!!!!\266!!!!ufll\266\266!ufll\266\266!!!!\266!!!!ufll\266\266!ufll\266\266!!!!!!\266!!!!ufll\266\266!ufll\266\266!!!!\266!!!!ufll\266\266!ufll\266\266!!!!!!\266!!!!ufll\266\266!ufll\266\266!!!!\266!!!!ufll\266\266!ufll\266\266!!!!!!\266!!!!ufll\266\266!ufll\266\266!!!!\266!!!!ufll\266\266!ufll\266\266!!!!!!\266!!!!ufll\266\266!ufll\266\266!!!!\266!!!!ufll\266\266!ufll\266\266!!!!!!\266!!!!ufll\266\266!ufll\266\266!!!!\266!!!!ufll\266\266!ufll\266\266!!!!!!!", "");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\266!!!!nullnullnullnull\266\266!nullnullnullnull\266\266!!!!\266!!!!nullnullnullnull\266\266!nullnullnullnull\266\266!!!!!!\266!!!!nullnullnullnull\266\266!nullnullnullnull\266\266!!!!\266!!!!nullnullnullnull\266\266!nullnullnullnull\266\266!!!!!!\266!!!!nullnullnullnull\266\266!nullnullnullnull\266\266!!!!\266!!!!nullnullnullnull\266\266!nullnullnullnull\266\266!!!!!!\266!!!!nullnullnullnull\266\266!nullnullnullnull\266\266!!!!\266!!!!nullnullnullnull\266\266!nullnullnullnull\266\266!!!!!!\266!!!!nullnullnullnull\266\266!nullnullnullnull\266\266!!!!\266!!!!nullnullnullnull\266\266!nullnullnullnull\266\266!!!!!!\266!!!!nullnullnullnull\266\266!nullnullnullnull\266\266!!!!\266!!!!nullnullnullnull\266\266!nullnullnullnull\266\266!!!!!!\266!!!!nullnullnullnull\266\266!nullnullnullnull\266\266!!!!\266!!!!nullnullnullnull\266\266!nullnullnullnull\266\266!!!!!!\266!!!!nullnullnullnull\266\266!nullnullnullnull\266\266!!!!\266!!!!nullnullnullnull\266\266!nullnullnullnull\266\266!!!!!!!" + "'", str2, "\266!!!!nullnullnullnull\266\266!nullnullnullnull\266\266!!!!\266!!!!nullnullnullnull\266\266!nullnullnullnull\266\266!!!!!!\266!!!!nullnullnullnull\266\266!nullnullnullnull\266\266!!!!\266!!!!nullnullnullnull\266\266!nullnullnullnull\266\266!!!!!!\266!!!!nullnullnullnull\266\266!nullnullnullnull\266\266!!!!\266!!!!nullnullnullnull\266\266!nullnullnullnull\266\266!!!!!!\266!!!!nullnullnullnull\266\266!nullnullnullnull\266\266!!!!\266!!!!nullnullnullnull\266\266!nullnullnullnull\266\266!!!!!!\266!!!!nullnullnullnull\266\266!nullnullnullnull\266\266!!!!\266!!!!nullnullnullnull\266\266!nullnullnullnull\266\266!!!!!!\266!!!!nullnullnullnull\266\266!nullnullnullnull\266\266!!!!\266!!!!nullnullnullnull\266\266!nullnullnullnull\266\266!!!!!!\266!!!!nullnullnullnull\266\266!nullnullnullnull\266\266!!!!\266!!!!nullnullnullnull\266\266!nullnullnullnull\266\266!!!!!!\266!!!!nullnullnullnull\266\266!nullnullnullnull\266\266!!!!\266!!!!nullnullnullnull\266\266!nullnullnullnull\266\266!!!!!!!");
    }

    @Test
    public void test10258() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10258");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.encode("\276\340\275\275\276\340\275\275nullnullnullnullnullnullnullnull\276\340\275\275\276\340\275\275nullnullnullnullnullnullnullnull\276\340\275\275\276\340\275\275nullnullnullnullnullnullnullnull\276\340\275\275\276\340\275\275nullnullnullnullnullnullnullnull\276\340\275\275\276\340\275\275nullnullnullnullnullnullnullnull\276\340\275\275\276\340\275\275nullnullnullnullnullnullnullnull\276\340\275\275\276\340\275\275nullnullnullnullnullnullnullnull\276\340\275\275\276\340\275\275nullnullnullnullnullnullnullnull!", "\253\254\256\256~`~~~`~~~`~~~`~~\253\254\256\256~`~~~`~~!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\276null\275\275\276null\275\275`\253~~`\253~~`\253~~`\253~~`\253~~`\253~~`\253~~`\253~~\276null\275\275\276null\275\275`\253~~`\253~~`\253~~`\253~~`\253~~`\253~~`\253~~`\253~~\276null\275\275\276null\275\275`\253~~`\253~~`\253~~`\253~~`\253~~`\253~~`\253~~`\253~~\276null\275\275\276null\275\275`\253~~`\253~~`\253~~`\253~~`\253~~`\253~~`\253~~`\253~~\276null\275\275\276null\275\275`\253~~`\253~~`\253~~`\253~~`\253~~`\253~~`\253~~`\253~~\276null\275\275\276null\275\275`\253~~`\253~~`\253~~`\253~~`\253~~`\253~~`\253~~`\253~~\276null\275\275\276null\275\275`\253~~`\253~~`\253~~`\253~~`\253~~`\253~~`\253~~`\253~~\276null\275\275\276null\275\275`\253~~`\253~~`\253~~`\253~~`\253~~`\253~~`\253~~`\253~~!" + "'", str2, "\276null\275\275\276null\275\275`\253~~`\253~~`\253~~`\253~~`\253~~`\253~~`\253~~`\253~~\276null\275\275\276null\275\275`\253~~`\253~~`\253~~`\253~~`\253~~`\253~~`\253~~`\253~~\276null\275\275\276null\275\275`\253~~`\253~~`\253~~`\253~~`\253~~`\253~~`\253~~`\253~~\276null\275\275\276null\275\275`\253~~`\253~~`\253~~`\253~~`\253~~`\253~~`\253~~`\253~~\276null\275\275\276null\275\275`\253~~`\253~~`\253~~`\253~~`\253~~`\253~~`\253~~`\253~~\276null\275\275\276null\275\275`\253~~`\253~~`\253~~`\253~~`\253~~`\253~~`\253~~`\253~~\276null\275\275\276null\275\275`\253~~`\253~~`\253~~`\253~~`\253~~`\253~~`\253~~`\253~~\276null\275\275\276null\275\275`\253~~`\253~~`\253~~`\253~~`\253~~`\253~~`\253~~`\253~~!");
    }

    @Test
    public void test10259() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10259");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.encode("\261\262\264\264JJ~~JJ~~!!!!\261\262\264\264JJ~~JJ~~!!!!!!\261\262\264\264JJ~~JJ~~!!!!\261\262\264\264JJ~~JJ~~!!!!!!\261\262\264\264JJ~~JJ~~!!!!\261\262\264\264JJ~~JJ~~!!!!!!\261\262\264\264JJ~~JJ~~!!!!\261\262\264\264JJ~~JJ~~!!!!!!\261\262\264\264JJ~~JJ~~!!!!\261\262\264\264JJ~~JJ~~!!!!!!\261\262\264\264JJ~~JJ~~!!!!\261\262\264\264JJ~~JJ~~!!!!!!\261\262\264\264JJ~~JJ~~!!!!\261\262\264\264JJ~~JJ~~!!!!!!\261\262\264\264JJ~~JJ~~!!!!\261\262\264\264JJ~~JJ~~!!!!!!!", "\u01e0\u01e0\u01de\u01de\u01e0\u01e0\u01de\u01de\u01e0\u01e0\u01de\u01de\u01e0\u01e0\u01de\u01de\u01e0\u01e0\u01de\u01de\u01e0\u01e0\u01de\u01de\u01e0\u01e0\u01de\u01de\u01e0\u01e0\u01de\u01de\u01e0\u01e0\u01de\u01de\u01e0\u01e0\u01de\u01de\u01e0\u01e0\u01de\u01de\u01e0\u01e0\u01de\u01de\u01e0\u01e0\u01de\u01de\u01e0\u01e0\u01de\u01de\u01e0\u01e0\u01de\u01de\u01e0\u01e0\u01de\u01de\u01e0\u01e0\u01de\u01de\u01e0\u01e0\u01de\u01de\u01e0\u01e0\u01de\u01de\u01e0\u01e0\u01de\u01de\u01e0\u01e0\u01de\u01de\u01e0\u01e0\u01de\u01de\u01e0\u01e0\u01de\u01de\u01e0\u01e0\u01de\u01de\u01e0\u01e0\u01de\u01de\u01e0\u01e0\u01de\u01de\u01e0\u01e0\u01de\u01de\u01e0\u01e0\u01de\u01de\u01e0\u01e0\u01de\u01de\u01e0\u01e0\u01de\u01de\u01e0\u01e0\u01de\u01de\u01e0\u01e0\u01de\u01de!");
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\261\262\264\264\u01e0\u01e0\u01e0\u01e0~~!!!!\261\262\264\264\u01e0\u01e0\u01e0\u01e0~~!!!!!!\261\262\264\264\u01e0\u01e0\u01e0\u01e0~~!!!!\261\262\264\264\u01e0\u01e0\u01e0\u01e0~~!!!!!!\261\262\264\264\u01e0\u01e0\u01e0\u01e0~~!!!!\261\262\264\264\u01e0\u01e0\u01e0\u01e0~~!!!!!!\261\262\264\264\u01e0\u01e0\u01e0\u01e0~~!!!!\261\262\264\264\u01e0\u01e0\u01e0\u01e0~~!!!!!!\261\262\264\264\u01e0\u01e0\u01e0\u01e0~~!!!!\261\262\264\264\u01e0\u01e0\u01e0\u01e0~~!!!!!!\261\262\264\264\u01e0\u01e0\u01e0\u01e0~~!!!!\261\262\264\264\u01e0\u01e0\u01e0\u01e0~~!!!!!!\261\262\264\264\u01e0\u01e0\u01e0\u01e0~~!!!!\261\262\264\264\u01e0\u01e0\u01e0\u01e0~~!!!!!!\261\262\264\264\u01e0\u01e0\u01e0\u01e0~~!!!!\261\262\264\264\u01e0\u01e0\u01e0\u01e0~~!!!!!!!" + "'", str2, "\261\262\264\264\u01e0\u01e0\u01e0\u01e0~~!!!!\261\262\264\264\u01e0\u01e0\u01e0\u01e0~~!!!!!!\261\262\264\264\u01e0\u01e0\u01e0\u01e0~~!!!!\261\262\264\264\u01e0\u01e0\u01e0\u01e0~~!!!!!!\261\262\264\264\u01e0\u01e0\u01e0\u01e0~~!!!!\261\262\264\264\u01e0\u01e0\u01e0\u01e0~~!!!!!!\261\262\264\264\u01e0\u01e0\u01e0\u01e0~~!!!!\261\262\264\264\u01e0\u01e0\u01e0\u01e0~~!!!!!!\261\262\264\264\u01e0\u01e0\u01e0\u01e0~~!!!!\261\262\264\264\u01e0\u01e0\u01e0\u01e0~~!!!!!!\261\262\264\264\u01e0\u01e0\u01e0\u01e0~~!!!!\261\262\264\264\u01e0\u01e0\u01e0\u01e0~~!!!!!!\261\262\264\264\u01e0\u01e0\u01e0\u01e0~~!!!!\261\262\264\264\u01e0\u01e0\u01e0\u01e0~~!!!!!!\261\262\264\264\u01e0\u01e0\u01e0\u01e0~~!!!!\261\262\264\264\u01e0\u01e0\u01e0\u01e0~~!!!!!!!");
    }

    @Test
    public void test10260() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10260");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.decode("\u0346\u0348\u0348\u0348\u0348\u0346\u0346!", "OOOOOOOO\214\214OOOOOOOO\214\214OOOOOOOO\214\214OOOOOOOO\214\214OOOOOOOO\214\214OOOOOOOO\214\214OOOOOOOO\214\214OOOOOOOO\214\214!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\u0346\u0348\u0348\u0348\u0348\u0346\u0346!" + "'", str2, "\u0346\u0348\u0348\u0348\u0348\u0346\u0346!");
    }

    @Test
    public void test10261() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10261");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.encode("!!nullnull!!nullnull!!!!nullnull!!nullnull!!!!nullnull!!nullnull!!!!nullnull!!nullnull!!!!nullnull!!nullnull!!!!nullnull!!nullnull!!!!nullnull!!nullnull!!!!nullnull!!nullnull!!!", "!hhh!!hhh!hhh!hhh!hhh!hhh!hhh!hhh!hhh!hhh!!hhh!hhh!hhh!hhh!hhh!hhh!hhh!hhh!hhh!!hhh!hhh!hhh!hhh!hhh!hhh!hhh!hhh!hhh!!hhh!hhh!hhh!hhh!hhh!hhh!hhh!hhh!hhh!!hhh!hhh!hhh!hhh!hhh!hhh!hhh!hhh!hhh!!hhh!hhh!hhh!hhh!hhh!hhh!hhh!hhh!hhh!!hhh!hhh!hhh!hhh!hhh!hhh!hhh!hhh!hhh!!hhh!hhh!hhh!hhh!hhh!hhh!hhh!hhh!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "!!HHHHHHHH!!HHHHHHHH!!!!HHHHHHHH!!HHHHHHHH!!!!HHHHHHHH!!HHHHHHHH!!!!HHHHHHHH!!HHHHHHHH!!!!HHHHHHHH!!HHHHHHHH!!!!HHHHHHHH!!HHHHHHHH!!!!HHHHHHHH!!HHHHHHHH!!!!HHHHHHHH!!HHHHHHHH!!!" + "'", str2, "!!HHHHHHHH!!HHHHHHHH!!!!HHHHHHHH!!HHHHHHHH!!!!HHHHHHHH!!HHHHHHHH!!!!HHHHHHHH!!HHHHHHHH!!!!HHHHHHHH!!HHHHHHHH!!!!HHHHHHHH!!HHHHHHHH!!!!HHHHHHHH!!HHHHHHHH!!!!HHHHHHHH!!HHHHHHHH!!!");
    }

    @Test
    public void test10262() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10262");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.decode("!e!", "\253\254\256\256\253\254\256\256!!\253\254\256\256\253\254\256\256!!!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "!null!" + "'", str2, "!null!");
    }

    @Test
    public void test10263() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10263");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.encode("\276LLL\276LLL\276LLL\276LLL\276LLL!", "\u0346\u0348\u0348\u0348\u037e\u037e\u0348\u0346\u0346!");
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\276NNN\276NNN\276NNN\276NNN\276NNN!" + "'", str2, "\276NNN\276NNN\276NNN\276NNN\276NNN!");
    }

    @Test
    public void test10264() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10264");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.decode("", "}~\200\200}~\200\200TTRRTTRRTTRRTTRRTTRRTTRRTTRRTTRRTTRRTTRRTTRRTTRRTTRRTTRRTTRRTTRRTTRRTTRRTTRRTTRRTTRRTTRRTTRRTTRRTTRRTTRRTTRRTTRRTTRRTTRRTTRRTTRR}~\200\200}~\200\200TTRRTTRRTTRRTTRRTTRRTTRRTTRRTTRRTTRRTTRRTTRRTTRRTTRRTTRRTTRRTTRRTTRRTTRRTTRRTTRRTTRRTTRRTTRRTTRRTTRRTTRRTTRRTTRRTTRRTTRRTTRRTTRR!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
    }

    @Test
    public void test10265() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10265");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.encode("null\256null\254\254nullnullnull\256null\254\254nullnull!!null\256null\254\254nullnullnull\256null\254\254nullnull!!null\256null\254\254nullnullnull\256null\254\254nullnull!!null\256null\254\254nullnullnull\256null\254\254nullnull!!null\256null\254\254nullnullnull\256null\254\254nullnull!!null\256null\254\254nullnullnull\256null\254\254nullnull!!null\256null\254\254nullnullnull\256null\254\254nullnull!!null\256null\254\254nullnullnull\256null\254\254nullnull
        org.junit.Assert.assertEquals("'" + strstr
    }

    @Test
    public void test10266() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10266");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.decode("LNNNLNNNLLLLLLLLLLLLLLLLLNNNLNNN!", "L!NNL!NNL!NNL!NNL!NNL!NNL!NNL!NNL!NNL!NNL!NNL!NNL!NNL!NNL!NNL!NNL!NNL!NNL!NNL!NNL!NNL!NNL!NNL!NNL!NNL!NNL!NNL!NNL!NNL!NNL!NNL!NN!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\275\300\300\300\275\300\300\300\275\275\275\275\275\275\275\275\275\275\275\275\275\275\275\275\275\300\300\300\275\300\300\300!" + "'", str2, "\275\300\300\300\275\300\300\300\275\275\275\275\275\275\275\275\275\275\275\275\275\275\275\275\275\300\300\300\275\300\300\300!");
    }

    @Test
    public void test10267() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10267");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.encode("UUUUUUUUUUUUUUUU!UUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUU!UUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUU!UUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUU!UUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUU!UUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUU!UUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUU!UUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUU!UUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUU!", "\u0368\u0368\u0368\u0368\u0368\u0368\u0368\u0368\u0368\u0368\u0368\u0368\u0368\u0368\u0368\u0368!");
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "LLLLLLLLLLLLLLLL!LLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLL!LLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLL!LLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLL!LLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLL!LLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLL!LLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLL!LLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLL!LLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLL!" + "'", str2, "LLLLLLLLLLLLLLLL!LLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLL!LLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLL!LLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLL!LLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLL!LLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLL!LLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLL!LLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLL!LLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLL!");
    }

    @Test
    public void test10268() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10268");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.decode("!!\214\214!!\214\214!!\214\214!!\214\214!!\214\214!!\214\214!!\214\214!!\214\214!!\214\214!!\214\214!!\214\214!!\214\214!!\214\214!!\214\214!!\214\214!!\214\214!!\214\214!!\214\214!!\214\214!!\214\214!!\214\214!!\214\214!!\214\214!!\214\214!!\214\214!!\214\214!!\214\214!!\214\214!!\214\214!!\214\214!!\214\214!!\214\214!", "\u0175\u0175\u0175\u0175!!!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "!!\214\214!!\214\214!!\214\214!!\214\214!!\214\214!!\214\214!!\214\214!!\214\214!!\214\214!!\214\214!!\214\214!!\214\214!!\214\214!!\214\214!!\214\214!!\214\214!!\214\214!!\214\214!!\214\214!!\214\214!!\214\214!!\214\214!!\214\214!!\214\214!!\214\214!!\214\214!!\214\214!!\214\214!!\214\214!!\214\214!!\214\214!!\214\214!" + "'", str2, "!!\214\214!!\214\214!!\214\214!!\214\214!!\214\214!!\214\214!!\214\214!!\214\214!!\214\214!!\214\214!!\214\214!!\214\214!!\214\214!!\214\214!!\214\214!!\214\214!!\214\214!!\214\214!!\214\214!!\214\214!!\214\214!!\214\214!!\214\214!!\214\214!!\214\214!!\214\214!!\214\214!!\214\214!!\214\214!!\214\214!!\214\214!!\214\214!");
    }

    @Test
    public void test10269() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10269");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.encode("\u014f\u014f\u014f\u014f!uu!!!", "nullnullnullnull\260null\255\255\260null\255\255!!!!nullnullnullnull\260null\255\255\260null\255\255!!!!!!nullnullnullnull\260null\255\255\260null\255\255!!!!nullnullnullnull\260null\255\255\260null\255\255!!!!!!nullnullnullnull\260null\255\255\260null\255\255!!!!nullnullnullnull\260null\255\255\260null\255\255!!!!!!nullnullnullnull\260null\255\255\260null\255\255!!!!nullnullnullnull\260null\255\255\260null\255\255!!!!!!nullnullnullnull\260null\255\255\260null\255\255!!!!nullnullnullnull\260null\255\255\260null\255\255!!!!!!nullnullnullnull\260null\255\255\260null\255\255!!!!nullnullnullnull\260null\255\255\260null\255\255!!!!!!nullnullnullnull\260null\255\255\260null\255\255!!!!nullnullnullnull\260null\255\255\260null\255\255!!!!!!nullnullnullnull\260null\255\255\260null\255\255!!!!nullnullnullnull\260null\255\255\260null\255\255!!!!!!!");
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "!!L!UUL!UUL!UUL!UU!!!" + "'", str2, "!!L!UUL!UUL!UUL!UU!!!");
    }

    @Test
    public void test10270() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10270");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.decode("}~\200\200}~\200\200nullnullnullnull^nullnullnullnullnullnullnullnullnullnullnullnull^nullnullnullnullnullnullnullnull}~\200\200}~\200\200nullnullnullnull^nullnullnullnullnullnullnullnullnullnullnullnull^nullnullnullnullnullnullnullnull!", "");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "}~\200\200}~\200\200nullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull^nullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull^nullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull}~\200\200}~\200\200nullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull^nullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull^nullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull!" + "'", str2, "}~\200\200}~\200\200nullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull^nullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull^nullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull}~\200\200}~\200\200nullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull^nullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull^nullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull!");
    }

    @Test
    public void test10271() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10271");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.decode("]!lluunullnullnull!!!lluunullnullnull!!!lluunullnullnull!!!lluunullnullnull!!!lluunullnullnull!!]]!lluunullnullnull!!!lluunullnullnull!!]]!lluunullnullnull!!!lluunullnullnull!!]]!lluunullnullnull!!!lluunullnullnull!!]]]!lluunullnullnull!!!lluunullnullnull!!!lluunullnullnull!!!lluunullnullnull!!!lluunullnullnull!!]]!lluunullnullnull!!!lluunullnullnull!!]]!", "null\253\253\253\200}}`null\253\253\253]]!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "]!oommlmoolmoolmoo!!!oommlmoolmoolmoo!!!oommlmoolmoolmoo!!!oommlmoolmoolmoo!!!oommlmoolmoolmoo!!]]!oommlmoolmoolmoo!!!oommlmoolmoolmoo!!]]!oommlmoolmoolmoo!!!oommlmoolmoolmoo!!]]!oommlmoolmoolmoo!!!oommlmoolmoolmoo!!]]]!oommlmoolmoolmoo!!!oommlmoolmoolmoo!!!oommlmoolmoolmoo!!!oommlmoolmoolmoo!!!oommlmoolmoolmoo!!]]!oommlmoolmoolmoo!!!oommlmoolmoolmoo!!]]!" + "'", str2, "]!oommlmoolmoolmoo!!!oommlmoolmoolmoo!!!oommlmoolmoolmoo!!!oommlmoolmoolmoo!!!oommlmoolmoolmoo!!]]!oommlmoolmoolmoo!!!oommlmoolmoolmoo!!]]!oommlmoolmoolmoo!!!oommlmoolmoolmoo!!]]!oommlmoolmoolmoo!!!oommlmoolmoolmoo!!]]]!oommlmoolmoolmoo!!!oommlmoolmoolmoo!!!oommlmoolmoolmoo!!!oommlmoolmoolmoo!!!oommlmoolmoolmoo!!]]!oommlmoolmoolmoo!!!oommlmoolmoolmoo!!]]!");
    }

    @Test
    public void test10272() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10272");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.encode("\u014e\u014e\u014e\u014e\u014f\u014f\u014e\u014e\u014e\u014e\u014f\u014f!", "}LLUULLUULLUU}LLUULLUULLUULLUULLUU}LLUULLUULLUU}LLUULLUULLUULLUULLUU\225\225}LLUULLUULLUU}LLUULLUULLUULLUULLUU}LLUULLUULLUU}LLUULLUULLUULLUULLUU\225\225}LLUULLUULLUU}LLUULLUULLUULLUULLUU}LLUULLUULLUU}LLUULLUULLUULLUULLUU\225\225}LLUULLUULLUU}LLUULLUULLUULLUULLUU}LLUULLUULLUU}LLUULLUULLUULLUULLUU\225\225}LLUULLUULLUU}LLUULLUULLUULLUULLUU}LLUULLUULLUU}LLUULLUULLUULLUULLUU\225\225}LLUULLUULLUU}LLUULLUULLUULLUULLUU}LLUULLUULLUU}LLUULLUULLUULLUULLUU\225\225}LLUULLUULLUU}LLUULLUULLUULLUULLUU}LLUULLUULLUU}LLUULLUULLUULLUULLUU\225\225}LLUULLUULLUU}LLUULLUULLUULLUULLUU}LLUULLUULLUU}LLUULLUULLUULLUULLUU\225\225!");
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "UU!!UU!!LLUU!!UU!!LL!" + "'", str2, "UU!!UU!!LLUU!!UU!!LL!");
    }

    @Test
    public void test10273() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10273");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.decode("", "\u0366\u0365\u0368\u0368\u026e\u026e\u026c\u026c\u0346\u0348\u0348!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
    }

    @Test
    public void test10274() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10274");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.encode("\u019d!", "\u0366\u0365\u0368\u0368\u0346\u0348\u0348!");
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "!null!" + "'", str2, "!null!");
    }

    @Test
    public void test10275() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10275");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.encode("\260\256\253\253\260\256\253\253\260\256\253\253\260\256\253\253]!]]]!]]\253\253]!]]]!]]\253\253]!]]]!]]\253\253]!]]]!]]\253\253\260\256\253\253\260\256\253\253\260\256\253\253\260\256\253\253]!]]]!]]\253\253]!]]]!]]\253\253!", "^```^```^```^```^```^```^```^```^```^```~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^```^```~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^```^```^```^```^```^```^```^```^```^```~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^```^```~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^```^```^```^```^```^```^```^```^```^```~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^```^```~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^```^```^```^```^```^```^```^```^```^```~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^```^```~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^```^```^```^```^```^```^```^```^```^```~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^```^```~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^```^```^```^```^```^```^```^```^```^```~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^```^```~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^```^```^```^```^```^```^```^```^```^```~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^```^```~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^```^```^```^```^```^```^```^```^```^```~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^```^```~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\260\256\253\253\260\256\253\253\260\256\253\253\260\256\253\253]!]]]!]]\253\253]!]]]!]]\253\253]!]]]!]]\253\253]!]]]!]]\253\253\260\256\253\253\260\256\253\253\260\256\253\253\260\256\253\253]!]]]!]]\253\253]!]]]!]]\253\253!" + "'", str2, "\260\256\253\253\260\256\253\253\260\256\253\253\260\256\253\253]!]]]!]]\253\253]!]]]!]]\253\253]!]]]!]]\253\253]!]]]!]]\253\253\260\256\253\253\260\256\253\253\260\256\253\253\260\256\253\253]!]]]!]]\253\253]!]]]!]]\253\253!");
    }

    @Test
    public void test10276() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10276");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.encode("!````!", "\u0348\u0348~~!\214\214\u0348\u0348~~!\214\214\u0348\u0348~~!\214\214\u0348\u0348~~!\214\214\u0348\u0348~~!\214\214\u0348\u0348~~!\214\214\u0348\u0348~~!\214\214\u0348\u0348~~!\214\214\u0348\u0348~~!\214\214\u0348\u0348~~!\214\214\u0348\u0348~~!\214\214\u0348\u0348~~!\214\214\u0348\u0348~~!\214\214\u0348\u0348~~!\214\214\u0348\u0348~~!\214\214\u0348\u0348~~!\214\214!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "!````!" + "'", str2, "!````!");
    }

    @Test
    public void test10277() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10277");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.decode
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\275nullnullnull\275nullnullnullnullnull\275nullnullnull\275nullnullnullnullnull\275nullnullnull\275nullnullnullnullnull\275nullnullnull\275nullnullnullnullnull\275nullnullnull\275nullnullnullnullnull\275nullnullnull\275nullnullnullnullnull\275nullnullnull\275nullnullnullnullnull\275nullnullnull\275nullnullnullnullnull!" + "'", str2, "\275nullnullnull\275nullnullnullnullnull\275nullnullnull\275nullnullnullnullnull\275nullnullnull\275nullnullnullnullnull\275nullnullnull\275nullnullnullnullnull\275nullnullnull\275nullnullnullnullnull\275nullnullnull\275nullnullnullnullnull\275nullnullnull\275nullnullnullnullnull\275nullnullnull\275nullnullnullnullnull!");
    }

    @Test
    public void test10278() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10278");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.decode("\u02d6\u02d5\u02d8\u02d8\u02d6\u02d5\u02d8\u02d8!", "\215\216\230\230null!!!null!!!null!!!\215\216\230\230null!!!null!!!null!!!\215\216\230\230null!!!null!!!null!!!\215\216\230\230null!!!null!!!null!!!\215\216\230\230null!!!null!!!null!!!\215\216\230\230null!!!null!!!null!!!\215\216\230\230null!!!null!!!null!!!\215\216\230\230null!!!null!!!null!!!!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\u02d6\u02d5\u02d8\u02d8\u02d6\u02d5\u02d8\u02d8!" + "'", str2, "\u02d6\u02d5\u02d8\u02d8\u02d6\u02d5\u02d8\u02d8!");
    }

    @Test
    public void test10279() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10279");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.decode("LIJJLLLLIJJLLLLIJJLLLLIJJLLL\200}}`LIJJLLLLIJJLLLLIJJLLLLIJJLLL]]!", "]```]```}}]```]```}}]```]```}}]```]```}}]```]```}}]```]```}}]```]```}}]```]```}}!!]```]```}}]```]```}}]```]```}}]```]```}}]```]```}}]```]```}}]```]```}}]```]```}}!!]```]```}}]```]```}}]```]```}}]```]```}}]```]```}}]```]```}}]```]```}}]```]```}}]```]```}}]```]```}}]```]```}}]```]```}}]```]```}}]```]```}}]```]```}}]```]```}}!!]```]```}}]```]```}}]```]```}}]```]```}}]```]```}}]```]```}}]```]```}}]```]```}}!!]```]```}}]```]```}}]```]```}}]```]```}}]```]```}}]```]```}}]```]```}}]```]```}}!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "nullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull\200}}`nullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull]]!" + "'", str2, "nullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull\200}}`nullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull]]!");
    }

    @Test
    public void test10280() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10280");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.encode("\270!!!\270!!!\270!!!\270!!!\270!!!\270!!!\270!!!\270!!!!", "!~nullnull!~nullnull\220\220!~nullnull!~nullnull\220\220\220!~nullnull\220\220\220!~nullnull\220\220\220!~nullnull\220\220\220!~nullnull\220\220!~nullnull!~nullnull\220\220!~nullnull!~nullnull\220\220!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\270!!!\270!!!\270!!!\270!!!\270!!!\270!!!\270!!!\270!!!!" + "'", str2, "\270!!!\270!!!\270!!!\270!!!\270!!!\270!!!\270!!!\270!!!!");
    }

    @Test
    public void test10281() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10281");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.decode("", "null!nullnullnull!nullnull!!null!nullnullnull!nullnull!!null!nullnullnull!nullnullnull!nullnullnull!nullnull!!null!nullnullnull!nullnull!!null!nullnullnull!nullnull!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
    }

    @Test
    public void test10282() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10282");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.encode("", "!!u!\276\276u!\276\276!!u!\276\276u!\276\276!!!!u!\276\276u!\276\276!!u!\276\276u!\276\276!!!!u!\276\276u!\276\276!!u!\276\276u!\276\276!!!!u!\276\276u!\276\276!!u!\276\276u!\276\276!!!!u!\276\276u!\276\276!!u!\276\276u!\276\276!!!!u!\276\276u!\276\276!!u!\276\276u!\276\276!!!!u!\276\276u!\276\276!!u!\276\276u!\276\276!!!!u!\276\276u!\276\276!!u!\276\276u!\276\276!!!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
    }

    @Test
    public void test10283() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10283");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.encode("\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348LNN!", "");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348nullnullnull!" + "'", str2, "\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348nullnullnull!");
    }

    @Test
    public void test10284() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10284");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.decode("!\340\335nullnull\340\335nullnull\340\335nullnull\340\335nullnull\340\335nullnull\340\335nullnull\340\335nullnull\340\335nullnull\340\335nullnull\340\335nullnull\340\335nullnull\340\335nullnull\340\335nullnull\340\335nullnull\340\335nullnull\340\335nullnull!", "!LLUU!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "!nullnullnulleccnulleccnullnullnulleccnulleccnullnullnulleccnulleccnullnullnulleccnulleccnullnullnulleccnulleccnullnullnulleccnulleccnullnullnulleccnulleccnullnullnulleccnulleccnullnullnulleccnulleccnullnullnulleccnulleccnullnullnulleccnulleccnullnullnulleccnulleccnullnullnulleccnulleccnullnullnulleccnulleccnullnullnulleccnulleccnullnullnulleccnullecc!" + "'", str2, "!nullnullnulleccnulleccnullnullnulleccnulleccnullnullnulleccnulleccnullnullnulleccnulleccnullnullnulleccnulleccnullnullnulleccnulleccnullnullnulleccnulleccnullnullnulleccnulleccnullnullnulleccnulleccnullnullnulleccnulleccnullnullnulleccnulleccnullnullnulleccnulleccnullnullnulleccnulleccnullnullnulleccnulleccnullnullnulleccnulleccnullnullnulleccnullecc!");
    }

    @Test
    public void test10285() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10285");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.decode
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "!\216\216\216!\216\216\216!" + "'", str2, "!\216\216\216!\216\216\216!");
    }

    @Test
    public void test10286() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10286");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.decode("!\276!!!\276!!!\276!!!\276!!!\276!!!\276!!!\276!!!\276!!!!!\276!!!\276!!!\276!!!\276!!!\276!!!\276!!!\276!!!\276!!!!!\276!!!\276!!!\276!!!\276!!!\276!!!\276!!!\276!!!\276!!!!!\276!!!\276!!!\276!!!\276!!!\276!!!\276!!!\276!!!\276!!!!!\276!!!\276!!!\276!!!\276!!!\276!!!\276!!!\276!!!\276!!!!!\276!!!\276!!!\276!!!\276!!!\276!!!\276!!!\276!!!\276!!!!!\276!!!\276!!!\276!!!\276!!!\276!!!\276!!!\276!!!\276!!!!!\276!!!\276!!!\276!!!\276!!!\276!!!\276!!!\276!!!\276!!!!!", "\u0348l!!\200\u0348l!!]]!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "!\276!!!\276!!!\276!!!\276!!!\276!!!\276!!!\276!!!\276!!!!!\276!!!\276!!!\276!!!\276!!!\276!!!\276!!!\276!!!\276!!!!!\276!!!\276!!!\276!!!\276!!!\276!!!\276!!!\276!!!\276!!!!!\276!!!\276!!!\276!!!\276!!!\276!!!\276!!!\276!!!\276!!!!!\276!!!\276!!!\276!!!\276!!!\276!!!\276!!!\276!!!\276!!!!!\276!!!\276!!!\276!!!\276!!!\276!!!\276!!!\276!!!\276!!!!!\276!!!\276!!!\276!!!\276!!!\276!!!\276!!!\276!!!\276!!!!!\276!!!\276!!!\276!!!\276!!!\276!!!\276!!!\276!!!\276!!!!!" + "'", str2, "!\276!!!\276!!!\276!!!\276!!!\276!!!\276!!!\276!!!\276!!!!!\276!!!\276!!!\276!!!\276!!!\276!!!\276!!!\276!!!\276!!!!!\276!!!\276!!!\276!!!\276!!!\276!!!\276!!!\276!!!\276!!!!!\276!!!\276!!!\276!!!\276!!!\276!!!\276!!!\276!!!\276!!!!!\276!!!\276!!!\276!!!\276!!!\276!!!\276!!!\276!!!\276!!!!!\276!!!\276!!!\276!!!\276!!!\276!!!\276!!!\276!!!\276!!!!!\276!!!\276!!!\276!!!\276!!!\276!!!\276!!!\276!!!\276!!!!!\276!!!\276!!!\276!!!\276!!!\276!!!\276!!!\276!!!\276!!!!!");
    }

    @Test
    public void test10287() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10287");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.decode("n\253uun\253\u035e\u035en\253uun\253\u035e\u035e!!!!n\253uun\253\u035e\u035en\253uun\253\u035e\u035e!", "}`}}`}}}!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "null\253nullnullnull\253\u035e\u035enull\253nullnullnull\253\u035e\u035e!!!!null\253nullnullnull\253\u035e\u035enull\253nullnullnull\253\u035e\u035e!" + "'", str2, "null\253nullnullnull\253\u035e\u035enull\253nullnullnull\253\u035e\u035e!!!!null\253nullnullnull\253\u035e\u035enull\253nullnullnull\253\u035e\u035e!");
    }

    @Test
    public void test10288() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10288");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.encode("\u02fa\u02fa\u02fa\u02fa\u02fa\u02fa\u02fa\u02fa\u02fa\u02fa\u02fa\u02fa\u02fa\u02fa\u02fa\u02fa\u02fa\u02fa\u02fa\u02fa\u02fa\u02fa\u02fa\u02fa\u02fa\u02fa\u02fa\u02fa\u02fa\u02fa\u02fa\u02fa\u02fa\u02fa\u02fa\u02fa\u02fa\u02fa\u02fa\u02fa\u02fa\u02fa\u02fa\u02fa\u02fa\u02fa\u02fa\u02fa\u02fa\u02fa\u02fa\u02fa\u02fa\u02fa\u02fa\u02fa\u02fa\u02fa\u02fa\u02fa\u02fa\u02fa\u02fa\u02fa\u02fa\u02fa\u02fa\u02fa\u02fa\u02fa\u02fa\u02fa\u02fa\u02fa\u02fa\u02fa\u02fa\u02fa\u02fa\u02fa\u02fa\u02fa\u02fa\u02fa\u02fa\u02fa\u02fa\u02fa\u02fa\u02fa\u02fa\u02fa\u02fa\u02fa\u02fa\u02faN~LLN~LL!", "\u031d\u031e\u0320\u0320\u031d\u031e\u0320\u0320\u031d\u031e\u0320\u0320\u031d\u031e\u0320\u0320\u031d\u031e\u0320\u0320\u031d\u031e\u0320\u0320\u031d\u031e\u0320\u0320\u031d\u031e\u0320\u0320\u031d\u031e\u0320\u0320\u031d\u031e\u0320\u0320\u031d\u031e\u0320\u0320\u031d\u031e\u0320\u0320\u031d\u031e\u0320\u0320\u031d\u031e\u0320\u0320\u031d\u031e\u0320\u0320\u031d\u031e\u0320\u0320!");
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\u02fa\u02fa\u02fa\u02fa\u02fa\u02fa\u02fa\u02fa\u02fa\u02fa\u02fa\u02fa\u02fa\u02fa\u02fa\u02fa\u02fa\u02fa\u02fa\u02fa\u02fa\u02fa\u02fa\u02fa\u02fa\u02fa\u02fa\u02fa\u02fa\u02fa\u02fa\u02fa\u02fa\u02fa\u02fa\u02fa\u02fa\u02fa\u02fa\u02fa\u02fa\u02fa\u02fa\u02fa\u02fa\u02fa\u02fa\u02fa\u02fa\u02fa\u02fa\u02fa\u02fa\u02fa\u02fa\u02fa\u02fa\u02fa\u02fa\u02fa\u02fa\u02fa\u02fa\u02fa\u02fa\u02fa\u02fa\u02fa\u02fa\u02fa\u02fa\u02fa\u02fa\u02fa\u02fa\u02fa\u02fa\u02fa\u02fa\u02fa\u02fa\u02fa\u02fa\u02fa\u02fa\u02fa\u02fa\u02fa\u02fa\u02fa\u02fa\u02fa\u02fa\u02fa\u02fa\u02faL~LLL~LL!" + "'", str2, "\u02fa\u02fa\u02fa\u02fa\u02fa\u02fa\u02fa\u02fa\u02fa\u02fa\u02fa\u02fa\u02fa\u02fa\u02fa\u02fa\u02fa\u02fa\u02fa\u02fa\u02fa\u02fa\u02fa\u02fa\u02fa\u02fa\u02fa\u02fa\u02fa\u02fa\u02fa\u02fa\u02fa\u02fa\u02fa\u02fa\u02fa\u02fa\u02fa\u02fa\u02fa\u02fa\u02fa\u02fa\u02fa\u02fa\u02fa\u02fa\u02fa\u02fa\u02fa\u02fa\u02fa\u02fa\u02fa\u02fa\u02fa\u02fa\u02fa\u02fa\u02fa\u02fa\u02fa\u02fa\u02fa\u02fa\u02fa\u02fa\u02fa\u02fa\u02fa\u02fa\u02fa\u02fa\u02fa\u02fa\u02fa\u02fa\u02fa\u02fa\u02fa\u02fa\u02fa\u02fa\u02fa\u02fa\u02fa\u02fa\u02fa\u02fa\u02fa\u02fa\u02fa\u02fa\u02fa\u02faL~LLL~LL!");
    }

    @Test
    public void test10289() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10289");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.encode("L!NNL!NNL!NNL!NNL!NNL!NNL!NNL!NNL!NNL!NNL!NNL!NNL!NNL!NNL!NNL!NNL!NNL!NNL!NNL!NNL!NNL!NNL!NNL!NNL!NNL!NNL!NNL!NNL!NNL!NNL!NNL!NN!", "UN!!UN!!!!UN!!UN!!!!!!UN!!UN!!!!UN!!UN!!!!!!UN!!UN!!!!UN!!UN!!!!!!UN!!UN!!!!UN!!UN!!!!!!UN!!UN!!!!UN!!UN!!!!!!UN!!UN!!!!UN!!UN!!!!!!UN!!UN!!!!UN!!UN!!!!!!UN!!UN!!!!UN!!UN!!!!!!!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "N!!!N!!!N!!!N!!!N!!!N!!!N!!!N!!!N!!!N!!!N!!!N!!!N!!!N!!!N!!!N!!!N!!!N!!!N!!!N!!!N!!!N!!!N!!!N!!!N!!!N!!!N!!!N!!!N!!!N!!!N!!!N!!!!" + "'", str2, "N!!!N!!!N!!!N!!!N!!!N!!!N!!!N!!!N!!!N!!!N!!!N!!!N!!!N!!!N!!!N!!!N!!!N!!!N!!!N!!!N!!!N!!!N!!!N!!!N!!!N!!!N!!!N!!!N!!!N!!!N!!!N!!!!");
    }

    @Test
    public void test10290() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10290");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.decode("\u0318\u031a\u031a\u0318\u031a\u031a\u0318\u031a\u031a\u0318\u031a\u031a\u0318\u031a\u031a\u0318\u031a\u031a\u0318\u031a\u031a\u0318\u031a\u031a\u0318\u031a\u031a\u0318\u031a\u031a\u0318\u031a\u031a\u0318\u031a\u031a\u0318\u031a\u031a\u0318\u031a\u031a\u0318\u031a\u031a\u0318\u031a\u031a\u0318\u031a\u031a\u0318\u031a\u031a!", "");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\u0318\u031a\u031a\u0318\u031a\u031a\u0318\u031a\u031a\u0318\u031a\u031a\u0318\u031a\u031a\u0318\u031a\u031a\u0318\u031a\u031a\u0318\u031a\u031a\u0318\u031a\u031a\u0318\u031a\u031a\u0318\u031a\u031a\u0318\u031a\u031a\u0318\u031a\u031a\u0318\u031a\u031a\u0318\u031a\u031a\u0318\u031a\u031a\u0318\u031a\u031a\u0318\u031a\u031a!" + "'", str2, "\u0318\u031a\u031a\u0318\u031a\u031a\u0318\u031a\u031a\u0318\u031a\u031a\u0318\u031a\u031a\u0318\u031a\u031a\u0318\u031a\u031a\u0318\u031a\u031a\u0318\u031a\u031a\u0318\u031a\u031a\u0318\u031a\u031a\u0318\u031a\u031a\u0318\u031a\u031a\u0318\u031a\u031a\u0318\u031a\u031a\u0318\u031a\u031a\u0318\u031a\u031a\u0318\u031a\u031a!");
    }

    @Test
    public void test10291() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10291");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.decode("nullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHH!", "~}\200\200~}\200\200^]``^]``^]``^]``^]``^]``^]``^]``}~\200\200}~\200\200^]``^]``^]``^]``^]``^]``^]``^]``}~\200\200}~\200\200~}\200\200~}\200\200^]``^]``^]``^]``^]``^]``^]``^]``}~\200\200}~\200\200^]``^]``^]``^]``^]``^]``^]``^]``}~\200\200}~\200\200~}\200\200~}\200\200^]``^]``^]``^]``^]``^]``^]``^]``}~\200\200}~\200\200^]``^]``^]``^]``^]``^]``^]``^]``}~\200\200}~\200\200~}\200\200~}\200\200^]``^]``^]``^]``^]``^]``^]``^]``}~\200\200}~\200\200^]``^]``^]``^]``^]``^]``^]``^]``}~\200\200}~\200\200~}\200\200~}\200\200^]``^]``^]``^]``^]``^]``^]``^]``}~\200\200}~\200\200^]``^]``^]``^]``^]``^]``^]``^]``}~\200\200}~\200\200~}\200\200~}\200\200^]``^]``^]``^]``^]``^]``^]``^]``}~\200\200}~\200\200^]``^]``^]``^]``^]``^]``^]``^]``}~\200\200}~\200\200~}\200\200~}\200\200^]``^]``^]``^]``^]``^]``^]``^]``}~\200\200}~\200\200^]``^]``^]``^]``^]``^]``^]``^]``}~\200\200}~\200\200~}\200\200~}\200\200^]``^]``^]``^]``^]``^]``^]``^]``}~\200\200}~\200\200^]``^]``^]``^]``^]``^]``^]``^]``}~\200\200}~\200\200!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "nullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull!" + "'", str2, "nullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull!");
    }

    @Test
    public void test10292() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10292");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.decode("!~UU!~UU!!!~UU!~UU!!!~UU!~UU!~UU!~UU!!!~UU!~UU!!!~UU!~
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "!~nullnull!~nullnull!!!~nullnull!~nullnull!!!~nullnull!~nullnull!~nullnull!~nullnull!!!~nullnull!~nullnull!!!~nullnull!~nullnull!" + "'", str2, "!~nullnull!~nullnull!!!~nullnull!~nullnull!!!~nullnull!~nullnull!~nullnull!~nullnull!!!~nullnull!~nullnull!!!~nullnull!~nullnull!");
    }

    @Test
    public void test10293() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10293");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.encode("\u0366\u0365\u0368\u0368\u02b6\u02b6!!!\200\200\u0346\u0348\u0348!", "~]]]~]]]~]]]~]]]~]]]~]]]~]]]~]]]~]]]~]]]~]]]~]]]~]]]~]]]~]]]~]]]\225\230\230~]]]~]]]~]]]~]]]~]]]~]]]~]]]~]]]~]]]~]]]~]]]~]]]~]]]~]]]~]]]~]]]\225\230\230~]]]~]]]~]]]~]]]~]]]~]]]~]]]~]]]~]]]~]]]~]]]~]]]~]]]~]]]~]]]~]]]\225\230\230~]]]~]]]~]]]~]]]~]]]~]]]~]]]~]]]~]]]~]]]~]]]~]]]~]]]~]]]~]]]~]]]\225\230\230\200}}`~]]]~]]]~]]]~]]]~]]]~]]]~]]]~]]]~]]]~]]]~]]]~]]]~]]]~]]]~]]]~]]]\225\230\230~]]]~]]]~]]]~]]]~]]]~]]]~]]]~]]]~]]]~]]]~]]]~]]]~]]]~]]]~]]]~]]]\225\230\230~]]]~]]]~]]]~]]]~]]]~]]]~]]]~]]]~]]]~]]]~]]]~]]]~]]]~]]]~]]]~]]]\225\230\230~]]]~]]]~]]]~]]]~]]]~]]]~]]]~]]]~]]]~]]]~]]]~]]]~]]]~]]]~]]]~]]]\225\230\230]]!");
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\u0366\u0365\u0368\u0368null!!!null!!!\200\200\u0346\u0348\u0348!" + "'", str2, "\u0366\u0365\u0368\u0368null!!!null!!!\200\200\u0346\u0348\u0348!");
    }

    @Test
    public void test10294() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10294");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.decode("\u0346\u0348\u0348\u0348\u0348\u0346\u0346!", "\255\256\260\260\255\256\260\260!!!!!\255\256\260\260\255\256\260\260!!!!!!!\255\256\260\260\255\256\260\260!!!!!\255\256\260\260\255\256\260\260!!!!!!!\255\256\260\260\255\256\260\260!!!!!\255\256\260\260\255\256\260\260!!!!!!!\255\256\260\260\255\256\260\260!!!!!\255\256\260\260\255\256\260\260!!!!!!!\255\256\260\260\255\256\260\260!!!!!\255\256\260\260\255\256\260\260!!!!!!!\255\256\260\260\255\256\260\260!!!!!\255\256\260\260\255\256\260\260!!!!!!!\255\256\260\260\255\256\260\260!!!!!\255\256\260\260\255\256\260\260!!!!!!!\255\256\260\260\255\256\260\260!!!!!\255\256\260\260\255\256\260\260!!!!!!!!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\u0346\u0348\u0348\u0348\u0348\u0346\u0346!" + "'", str2, "\u0346\u0348\u0348\u0348\u0348\u0346\u0346!");
    }

    @Test
    public void test10295() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10295");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.encode("\u0108\u0108\u0108\u0108\u0108\u0108\u0108\u0108\u0108\u0108\u0108\u0108\u0108\u0108\u0108\u0108\u0108\u0108\u0108\u0108\u0108\u0108\u0108\u0108\u0108\u0108\u0108\u0108\u0108\u0108\u0108\u0108\u0108\u0108\u0108\u0108\u0108\u0108\u0108\u0108\u0108\u0108\u0108\u0108\u0108\u0108\u0108\u0108\u0108\u0108\u0108\u0108\u0108\u0108\u0108\u0108\u0108\u0108\u0108\u0108\u0108\u0108\u0108\u0108\u0108\u0108\u0108\u0108\u0108\u0108\u0108\u0108\u0108\u0108\u0108\u0108\u0108\u0108\u0108\u0108\u0108\u0108\u0108\u0108\u0108\u0108\u0108\u0108\u0108\u0108\u0108\u0108\u0108\u0108\u0108\u0108\u0108\u0108\u0108\u0108\u0108\u0108\u0108\u0108\u0108\u0108\u0108\u0108\u0108\u0108\u0108\u0108\u0108\u0108\u0108\u0108\u0108\u0108\u0108\u0108\u0108\u0108\u0108\u0108\u0108\u0108\u0108\u0108!", "!III!III!III!III!III!III!!!III!III!!!!!!!III!III!III!III!III!III!!!III!III!!!!!!!!!III!III!III!III!III!III!!!III!III!!!!!!!III!III!III!III!III!III!!!III!III!!!!!!!!!III!III!III!III!III!III!!!III!III!!!!!!!III!III!III!III!III!III!!!III!III!!!!!!!!!III!III!III!III!III!III!!!III!III!!!!!!!III!III!III!III!III!III!!!III!III!!!!!!!!!III!III!III!III!III!III!!!III!III!!!!!!!III!III!III!III!III!III!!!III!III!!!!!!!!!III!III!III!III!III!III!!!III!III!!!!!!!III!III!III!III!III!III!!!III!III!!!!!!!!!III!III!III!III!III!III!!!III!III!!!!!!!III!III!III!III!III!III!!!III!III!!!!!!!!!III!III!III!III!III!III!!!III!III!!!!!!!III!III!III!III!III!III!!!III!III!!!!!!!!!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!" + "'", str2, "!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!");
    }

    @Test
    public void test10296() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10296");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.encode("!\276\276\276\276\276!!\276\276!!\276\276!!\276\276!!!", "\276~!!!\276~!!\276~!!\276~!!!\276~!!\276~!!\276~!!\276~!!\276~!!!\276~!!\276~!!\276~!!!\276~!!\276~!!\276~!!\276~!!!!\276~!!!\276~!!\276~!!\276~!!!\276~!!\276~!!\276~!!\276~!!\276~!!!\276~!!\276~!!\276~!!!\276~!!\276~!!\276~!!\276~!!!!\276~!!!\276~!!\276~!!\276~!!!\276~!!\276~!!\276~!!\276~!!\276~!!!\276~!!\276~!!\276~!!!\276~!!\276~!!\276~!!\276~!!!!\276~!!!\276~!!\276~!!\276~!!!\276~!!\276~!!\276~!!\276~!!\276~!!!\276~!!\276~!!\276~!!!\276~!!\276~!!\276~!!\276~!!!!\276~!!!\276~!!\276~!!\276~!!!\276~!!\276~!!\276~!!\276~!!\276~!!!\276~!!\276~!!\276~!!!\276~!!\276~!!\276~!!\276~!!!!\276~!!!\276~!!\276~!!\276~!!!\276~!!\276~!!\276~!!\276~!!\276~!!!\276~!!\276~!!\276~!!!\276~!!\276~!!\276~!!\276~!!!!\276~!!!\276~!!\276~!!\276~!!!\276~!!\276~!!\276~!!\276~!!\276~!!!\276~!!\276~!!\276~!!!\276~!!\276~!!\276~!!\276~!!!!\276~!!!\276~!!\276~!!\276~!!!\276~!!\276~!!\276~!!\276~!!\276~!!!\276~!!\276~!!\276~!!!\276~!!\276~!!\276~!!\276~!!!!!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "!\276\276\276\276\276!!\276\276!!\276\276!!\276\276!!!" + "'", str2, "!\276\276\276\276\276!!\276\276!!\276\276!!\276\276!!!");
    }

    @Test
    public void test10297() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10297");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.decode("||!XXX!XXX||!XXX!XXX!", "\u012e\u012b\u012e\u012e\u012e\u012b\u012e\u012e\u012e\u012b\u012e\u012e\u012e\u012b\u012e\u012e\u012e\u012b\u012e\u012e\u012e\u012b\u012e\u012e\u012e\u012b\u012e\u012e\u012e\u012b\u012e\u012e\u012e\u012b\u012e\u012e\u012e\u012b\u012e\u012e\u012e\u012b\u012e\u012e\u012e\u012b\u012e\u012e!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "||!nullnullnull!nullnullnull||!nullnullnull!nullnullnull!" + "'", str2, "||!nullnullnull!nullnullnull||!nullnullnull!nullnullnull!");
    }

    @Test
    public void test10298() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10298");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.decode("", "LLJJLLJJLLJJLLJJLLJJLLJJLLJJLLJJ!!LLJJLLJJLLJJLLJJLLJJLLJJLLJJLLJJ!!LLJJLLJJLLJJLLJJLLJJLLJJLLJJLLJJLLJJLLJJLLJJLLJJLLJJLLJJLLJJLLJJ!!LLJJLLJJLLJJLLJJLLJJLLJJLLJJLLJJ!!LLJJLLJJLLJJLLJJLLJJLLJJLLJJLLJJ!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
    }

    @Test
    public void test10299() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10299");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.encode("!!UU!!UU!!UU!!UU!!UU!!UU!!UU!!UU!!UU!!UU!U!!!U!!!!UU!!UU!U!!!U!!!!UU!!UU!!UU!!UU!!UU!!UU!!UU!!UU!!UU!!UU!U!!!U!!!!UU!!UU!U!!!U!!!!UU!!UU!!UU!!UU!!UU!!UU!!UU!!UU!!UU!!UU!U!!!U!!!!UU!!UU!U!!!U!!!!UU!!UU!!UU!!UU!!UU!!UU!!UU!!UU!!UU!!UU!U!!!U!!!!UU!!UU!U!!!U!!!!UU!!UU!!UU!!UU!!UU!!UU!!UU!!UU!!UU!!UU!U!!!U!!!!UU!!UU!U!!!U!!!!UU!!UU!!UU!!UU!!UU!!UU!!UU!!UU!!UU!!UU!U!!!U!!!!UU!!UU!U!!!U!!!!UU!!UU!!UU!!UU!!UU!!UU!!UU!!UU!!UU!!UU!U!!!U!!!!UU!!UU!U!!!U!!!!UU!!UU!!UU!!UU!!UU!!UU!!UU!!UU!!UU!!UU!U!!!U!!!!UU!!UU!U!!!U!!!", "NNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "!!NN!!NN!!NN!!NN!!NN!!NN!!NN!!NN!!NN!!NN!N!!!N!!!!NN!!NN!N!!!N!!!!NN!!NN!!NN!!NN!!NN!!NN!!NN!!NN!!NN!!NN!N!!!N!!!!NN!!NN!N!!!N!!!!NN!!NN!!NN!!NN!!NN!!NN!!NN!!NN!!NN!!NN!N!!!N!!!!NN!!NN!N!!!N!!!!NN!!NN!!NN!!NN!!NN!!NN!!NN!!NN!!NN!!NN!N!!!N!!!!NN!!NN!N!!!N!!!!NN!!NN!!NN!!NN!!NN!!NN!!NN!!NN!!NN!!NN!N!!!N!!!!NN!!NN!N!!!N!!!!NN!!NN!!NN!!NN!!NN!!NN!!NN!!NN!!NN!!NN!N!!!N!!!!NN!!NN!N!!!N!!!!NN!!NN!!NN!!NN!!NN!!NN!!NN!!NN!!NN!!NN!N!!!N!!!!NN!!NN!N!!!N!!!!NN!!NN!!NN!!NN!!NN!!NN!!NN!!NN!!NN!!NN!N!!!N!!!!NN!!NN!N!!!N!!!" + "'", str2, "!!NN!!NN!!NN!!NN!!NN!!NN!!NN!!NN!!NN!!NN!N!!!N!!!!NN!!NN!N!!!N!!!!NN!!NN!!NN!!NN!!NN!!NN!!NN!!NN!!NN!!NN!N!!!N!!!!NN!!NN!N!!!N!!!!NN!!NN!!NN!!NN!!NN!!NN!!NN!!NN!!NN!!NN!N!!!N!!!!NN!!NN!N!!!N!!!!NN!!NN!!NN!!NN!!NN!!NN!!NN!!NN!!NN!!NN!N!!!N!!!!NN!!NN!N!!!N!!!!NN!!NN!!NN!!NN!!NN!!NN!!NN!!NN!!NN!!NN!N!!!N!!!!NN!!NN!N!!!N!!!!NN!!NN!!NN!!NN!!NN!!NN!!NN!!NN!!NN!!NN!N!!!N!!!!NN!!NN!N!!!N!!!!NN!!NN!!NN!!NN!!NN!!NN!!NN!!NN!!NN!!NN!N!!!N!!!!NN!!NN!N!!!N!!!!NN!!NN!!NN!!NN!!NN!!NN!!NN!!NN!!NN!!NN!N!!!N!!!!NN!!NN!N!!!N!!!");
    }

    @Test
    public void test10300() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10300");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.encode("", "!~\351!\351\351\351!\351\351!~\351!\351\351\351!\351\351!~\351!\351\351\351!\351\351!~\351!\351\351\351!\351\351!~\351!\351\351\351!\351\351!~\351!\351\351\351!\351\351!~\351!\351\351\351!\351\351!~\351!\351\351\351!\351\351!!!~\351!\351\351\351!\351\351!~\351!\351\351\351!\351\351!~\351!\351\351\351!\351\351!~\351!\351\351\351!\351\351!~\351!\351\351\351!\351\351!~\351!\351\351\351!\351\351!~\351!\351\351\351!\351\351!~\351!\351\351\351!\351\351!!!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
    }

    @Test
    public void test10301() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10301");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.encode("\276P\275\275\276P\275\275\276P\275\275\276P\275\275\276P\275\275\276P\275\275\276P\275\275\276P\275\275!", "!nullnullnullnullnullnullnullnull\275\275UUU!!\275\275UUU!!nullnullnullnullnullnullnullnull\275\275UUU!!\275\275UUU!!nullnullnullnullnullnullnullnull\275\275UUU!!\275\275UUU!!nullnullnullnullnullnullnullnull\275\275UUU!!\275\275UUU!!nullnullnullnullnullnullnullnull\275\275UUU!!\275\275UUU!!nullnullnullnullnullnullnullnull\275\275UUU!!\275\275UUU!!nullnullnullnullnullnullnullnull\275\275UUU!!\275\275UUU!!nullnullnullnullnullnullnullnull\275\275UUU!!\275\275UUU!!nullnullnullnullnullnullnullnull\275\275UUU!!\275\275UUU!!nullnullnullnullnullnullnullnull\275\275UUU!!\275\275UUU!!nullnullnullnullnullnullnullnull\275\275UUU!!\275\275UUU!!nullnullnullnullnullnullnullnull\275\275UUU!!\275\275UUU!!nullnullnullnullnullnullnullnull\275\275UUU!!\275\275UUU!!nullnullnullnullnullnullnullnull\275\275UUU!!\275\275UUU!!nullnullnullnullnullnullnullnull\275\275UUU!!\275\275UUU!!nullnullnullnullnullnullnullnull\275\275UUU!!\275\275UUU!!!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\276L\275\275\276L\275\275\276L\275\275\276L\275\275\276L\275\275\276L\275\275\276L\275\275\276L\275\275!" + "'", str2, "\276L\275\275\276L\275\275\276L\275\275\276L\275\275\276L\275\275\276L\275\275\276L\275\275\276L\275\275!");
    }

    @Test
    public void test10302() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10302");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.encode("\u019b\u019b\u017b\u017b\u019b\u019b\u017b\u017b\u019b\u019b\u017b\u017b\u019b\u019b\u017b\u017b\u019b\u019b\u017b\u017b\u019b\u019b\u017b\u017b\u019b\u019b\u017b\u017b\u019b\u019b\u017b\u017b\u019b\u019b\u017b\u017b\u019b\u019b\u017b\u017b\u019b\u019b\u017b\u017b\u019b\u019b\u017b\u017b\u019b\u019b\u017b\u017b\u019b\u019b\u017b\u017b\u019b\u019b\u017b\u017b\u019b\u019b\u017b\u017b\u019b\u019b\u017b\u017b\u019b\u019b\u017b\u017b\u019b\u019b\u017b\u017b\u019b\u019b\u017b\u017b\u019b\u019b\u017b\u017b\u019b\u019b\u017b\u017b\u019b\u019b\u017b\u017b\u019b\u019b\u017b\u017b\u019b\u019b\u017b\u017b\u019b\u019b\u017b\u017b\u019b\u019b\u017b\u017b\u019b\u019b\u017b\u017b\u019b\u019b\u017b\u017b\u019b\u019b\u017b\u017b\u019b\u019b\u017b\u017b\u019b\u019b\u017b\u017b\u019b\u019b\u017b\u017b\u019b\u019b\u017b\u017b\u019b\u019b\u017b\u017b\u019b\u019b\u017b\u017b!", "\u016b\u016c\u016e\u016e\u016b\u016c\u016e\u016e\u016b\u016c\u016e\u016e\u016b\u016c\u016e\u016e\u016b\u016c\u016e\u016e\u016b\u016c\u016e\u016e\u016b\u016c\u016e\u016e\u016b\u016c\u016e\u016e\u016b\u016c\u016e\u016e\u016b\u016c\u016e\u016e\u016b\u016c\u016e\u016e\u016b\u016c\u016e\u016e\u016b\u016c\u016e\u016e\u016b\u016c\u016e\u016e\u016b\u016c\u016e\u016e\u016b\u016c\u016e\u016e!");
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "nullnullnullnull~nullnullnullnullnullnullnullnullnullnullnullnull~nullnullnullnullnullnullnullnull!!nullnullnullnull~nullnullnullnullnullnullnullnullnullnullnullnull~nullnullnullnullnullnullnullnull!!nullnullnullnull~nullnullnullnullnullnullnullnullnullnullnullnull~nullnullnullnullnullnullnullnullnullnullnullnull~nullnullnullnullnullnullnullnullnullnullnullnull~nullnullnullnullnullnullnullnull!!nullnullnullnull~nullnullnullnullnullnullnullnullnullnullnullnull~nullnullnullnullnullnullnullnull!!nullnullnullnull~nullnullnullnullnullnullnullnullnullnullnullnull~nullnullnullnullnullnullnullnull!" + "'", str2, "nullnullnullnull~nullnullnullnullnullnullnullnullnullnullnullnull~nullnullnullnullnullnullnullnull!!nullnullnullnull~nullnullnullnullnullnullnullnullnullnullnullnull~nullnullnullnullnullnullnullnull!!nullnullnullnull~nullnullnullnullnullnullnullnullnullnullnullnull~nullnullnullnullnullnullnullnullnullnullnullnull~nullnullnullnullnullnullnullnullnullnullnullnull~nullnullnullnullnullnullnullnull!!nullnullnullnull~nullnullnullnullnullnullnullnullnullnullnullnull~nullnullnullnullnullnullnullnull!!nullnullnullnull~nullnullnullnullnullnullnullnullnullnullnullnull~nullnullnullnullnullnullnullnull!");
    }

    @Test
    public void test10303() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10303");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.decode("\201\220\204\204\200~~\201\220\204\204\200~~\201\220\204\204\201\220\204\204\201\220\204\204\200~~\201\220\204\204\200~~\201\220\204\204\201\220\204\204!!\201\220\204\204\200~~\201\220\204\204\200~~\201\220\204\204\201\220\204\204\201\220\204\204\200~~\201\220\204\204\200~~\201\220\204\204\201\220\204\204!!\201\220\204\204\200~~\201\220\204\204\200~~\201\220\204\204\201\220\204\204\201\220\204\204\200~~\201\220\204\204\200~~\201\220\204\204\201\220\204\204\201\220\204\204\200~~\201\220\204\204\200~~\201\220\204\204\201\220\204\204\201\220\204\204\200~~\201\220\204\204\200~~\201\220\204\204\201\220\204\204!!\201\220\204\204\200~~\201\220\204\204\200~~\201\220\204\204\201\220\204\204\201\220\204\204\200~~\201\220\204\204\200~~\201\220\204\204\201\220\204\204!!\201\220\204\204\200~~\201\220\204\204\200~~\201\220\204\204\201\220\204\204\201\220\204\204\200~~\201\220\204\204\200~~\201\220\204\204\201\220\204\204!", "");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\201\220\204\204\200~~\201\220\204\204\200~~\201\220\204\204\201\220\204\204\201\220\204\204\200~~\201\220\204\204\200~~\201\220\204\204\201\220\204\204!!\201\220\204\204\200~~\201\220\204\204\200~~\201\220\204\204\201\220\204\204\201\220\204\204\200~~\201\220\204\204\200~~\201\220\204\204\201\220\204\204!!\201\220\204\204\200~~\201\220\204\204\200~~\201\220\204\204\201\220\204\204\201\220\204\204\200~~\201\220\204\204\200~~\201\220\204\204\201\220\204\204\201\220\204\204\200~~\201\220\204\204\200~~\201\220\204\204\201\220\204\204\201\220\204\204\200~~\201\220\204\204\200~~\201\220\204\204\201\220\204\204!!\201\220\204\204\200~~\201\220\204\204\200~~\201\220\204\204\201\220\204\204\201\220\204\204\200~~\201\220\204\204\200~~\201\220\204\204\201\220\204\204!!\201\220\204\204\200~~\201\220\204\204\200~~\201\220\204\204\201\220\204\204\201\220\204\204\200~~\201\220\204\204\200~~\201\220\204\204\201\220\204\204!" + "'", str2, "\201\220\204\204\200~~\201\220\204\204\200~~\201\220\204\204\201\220\204\204\201\220\204\204\200~~\201\220\204\204\200~~\201\220\204\204\201\220\204\204!!\201\220\204\204\200~~\201\220\204\204\200~~\201\220\204\204\201\220\204\204\201\220\204\204\200~~\201\220\204\204\200~~\201\220\204\204\201\220\204\204!!\201\220\204\204\200~~\201\220\204\204\200~~\201\220\204\204\201\220\204\204\201\220\204\204\200~~\201\220\204\204\200~~\201\220\204\204\201\220\204\204\201\220\204\204\200~~\201\220\204\204\200~~\201\220\204\204\201\220\204\204\201\220\204\204\200~~\201\220\204\204\200~~\201\220\204\204\201\220\204\204!!\201\220\204\204\200~~\201\220\204\204\200~~\201\220\204\204\201\220\204\204\201\220\204\204\200~~\201\220\204\204\200~~\201\220\204\204\201\220\204\204!!\201\220\204\204\200~~\201\220\204\204\200~~\201\220\204\204\201\220\204\204\201\220\204\204\200~~\201\220\204\204\200~~\201\220\204\204\201\220\204\204!");
    }

    @Test
    public void test10304() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10304");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.encode("\u0366\u0365\u0368\u0368\u0346\u0348\u0348!", "LLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLL\200}}`LLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLL]]!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\u0366\u0365\u0368\u0368\u0346\u0348\u0348!" + "'", str2, "\u0366\u0365\u0368\u0368\u0346\u0348\u0348!");
    }

    @Test
    public void test10305() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10305");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.encode("\u0366\u0365\u0368\u0368\253\253!!\253\253!!\200\200\u0346\u0348\u0348!", "!~\216\u0346\u0368\u0368\216\u0346\u0368\u0368!~\216\u0346\u0368\u0368\216\u0346\u0368\u0368!!!~\216\u0346\u0368\u0368\216\u0346\u0368\u0368!~\216\u0346\u0368\u0368\216\u0346\u0368\u0368!!!~\216\u0346\u0368\u0368\216\u0346\u0368\u0368!~\216\u0346\u0368\u0368\216\u0346\u0368\u0368!~\216\u0346\u0368\u0368\216\u0346\u0368\u0368!~\216\u0346\u0368\u0368\216\u0346\u0368\u0368!!!~\216\u0346\u0368\u0368\216\u0346\u0368\u0368!~\216\u0346\u0368\u0368\216\u0346\u0368\u0368!!!~\216\u0346\u0368\u0368\216\u0346\u0368\u0368!~\216\u0346\u0368\u0368\216\u0346\u0368\u0368!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\u0366\u0365\u0368\u0368\253\253!!\253\253!!\200\200\u0346\u0348\u0348!" + "'", str2, "\u0366\u0365\u0368\u0368\253\253!!\253\253!!\200\200\u0346\u0348\u0348!");
    }

    @Test
    public void test10306() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10306");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.encode("nullnullnullnull\362\363\365\365\362\363\365\365\362\363\365\365\362\363\365\365nullnullnullnull\362\363\365\365\362\363\365\365!", "]]nullnullnullnullnullnullnullnull]]nullnullnullnullnullnullnullnull!!]]nullnullnullnullnullnullnullnull]]nullnullnullnullnullnullnullnull!!]]nullnullnullnullnullnullnullnull]]nullnullnullnullnullnullnullnull!!]]nullnullnullnullnullnullnullnull]]nullnullnullnullnullnullnullnull!!]]nullnullnullnullnullnullnullnull]]nullnullnullnullnullnullnullnull!!]]nullnullnullnullnullnullnullnull]]nullnullnullnullnullnullnullnull!!]]nullnullnullnullnullnullnullnull]]nullnullnullnullnullnullnullnull!!]]nullnullnullnullnullnullnullnull]]nullnullnullnullnullnullnullnull!!!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "UNLLUNLLUNLLUNLLULNNULNNULNNULNNUNLLUNLLUNLLUNLLULNNULNN!" + "'", str2, "UNLLUNLLUNLLUNLLULNNULNNULNNULNNUNLLUNLLUNLLUNLLULNNULNN!");
    }

    @Test
    public void test10307() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10307");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.decode("nullnullnullnull\276nullnullnullnullnullnullnull\276\276nullnullnullnullnull\276\276nullnullnullnullnull\276\276nullnullnullnullnull\276\276nullnullnullnull\276nullnullnullnullnullnullnull\276\276nullnullnullnullnull\276\276!", "\u02d5\u02d6\u02d8\u02d8\u02d5\u02d6\u02d8\u02d8\u02d5\u02d6\u02d8\u02d8\u02d5\u02d6\u02d8\u02d8\275JJJ\275JJJ\275JJJ\275JJJ\275JJJ\275JJJ\275JJJ\275JJJ\275JJJ\275JJJ\275JJJ\275JJJ\275JJJ\275JJJ\275JJJ\275\u02d5\u02d6\u02d8\u02d8\u02d5\u02d6\u02d8\u02d8\u02d5\u02d6\u02d8\u02d8\u02d5\u02d6\u02d8\u02d8\275JJJ\275JJJ\275JJJ\275JJJ\275JJJ\275JJJ\275JJJ\275JJJ!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "nullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull\276nullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull\276\276nullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull\276\276nullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull\276\276nullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull\276\276nullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull\276nullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull\276\276nullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull\276\276!" + "'", str2, "nullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull\276nullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull\276\276nullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull\276\276nullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull\276\276nullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull\276\276nullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull\276nullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull\276\276nullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull\276\276!");
    }

    @Test
    public void test10308() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10308");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.decode("!hhh!!hhh!hhh!hhh!hhh!hhh!hhh!hhh!hhh!hhh!!hhh!hhh!hhh!hhh!hhh!hhh!hhh!hhh!hhh!!hhh!hhh!hhh!hhh!hhh!hhh!hhh!hhh!hhh!!hhh!hhh!hhh!hhh!hhh!hhh!hhh!hhh!hhh!!hhh!hhh!hhh!hhh!hhh!hhh!hhh!hhh!hhh!!hhh!hhh!hhh!hhh!hhh!hhh!hhh!hhh!hhh!!hhh!hhh!hhh!hhh!hhh!hhh!hhh!hhh!hhh!!hhh!hhh!hhh!hhh!hhh!hhh!hhh!hhh!", "UNLLUNLLUNLLUNLLUNLLUNLLUNLL\200}}`UNLLUNLLUNLLUNLLUNLLUNLLUNLL]]!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "!nullnullnull!!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnull!!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnull!!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnull!!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnull!!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnull!!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnull!!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnull!!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnull!" + "'", str2, "!nullnullnull!!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnull!!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnull!!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnull!!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnull!!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnull!!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnull!!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnull!!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnull!");
    }

    @Test
    public void test10309() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10309");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.decode("UU~LLUUUU~LLUU!!UU~LLUUUU~LLUU!!UU~LLUUUU~LLUU!!UU~LLUUUU~LLUU!!UU~LLUUUU~LLUU!!UU~LLUUUU~LLUU!!UU~LLUUUU~LLUU!!UU~LLUUUU~LLUU!!!", "\275\u0174\u0174\u0174\275\u0174\u0174\u0174!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "nullnull~nullnullnullnullnullnull~nullnullnullnull!!nullnull~nullnullnullnullnullnull~nullnullnullnull!!nullnull~nullnullnullnullnullnull~nullnullnullnull!!nullnull~nullnullnullnullnullnull~nullnullnullnull!!nullnull~nullnullnullnullnullnull~nullnullnullnull!!nullnull~nullnullnullnullnullnull~nullnullnullnull!!nullnull~nullnullnullnullnullnull~nullnullnullnull!!nullnull~nullnullnullnullnullnull~nullnullnullnull!!!" + "'", str2, "nullnull~nullnullnullnullnullnull~nullnullnullnull!!nullnull~nullnullnullnullnullnull~nullnullnullnull!!nullnull~nullnullnullnullnullnull~nullnullnullnull!!nullnull~nullnullnullnullnullnull~nullnullnullnull!!nullnull~nullnullnullnullnullnull~nullnullnullnull!!nullnull~nullnullnullnullnullnull~nullnullnullnull!!nullnull~nullnullnullnullnullnull~nullnullnullnull!!nullnull~nullnullnullnullnullnull~nullnullnullnull!!!");
    }

    @Test
    public void test10310() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10310");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.encode("]]]]]]]]!!]]]]]]]]!!!", "LLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLL!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "]]]]]]]]!!]]]]]]]]!!!" + "'", str2, "]]]]]]]]!!]]]]]]]]!!!");
    }

    @Test
    public void test10311() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10311");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.encode("!!\276\276!!\276\276!!!!\276\276!!\276\276!!!!\276\276!!\276\276!!\276\276!!\276\276!!!!\276\276!!\276\276!!!!\276\276!!\276\276!", "!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "!!\276\276!!\276\276!!!!\276\276!!\276\276!!!!\276\276!!\276\276!!\276\276!!\276\276!!!!\276\276!!\276\276!!!!\276\276!!\276\276!" + "'", str2, "!!\276\276!!\276\276!!!!\276\276!!\276\276!!!!\276\276!!\276\276!!\276\276!!\276\276!!!!\276\276!!\276\276!!!!\276\276!!\276\276!");
    }

    @Test
    public void test10312() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10312");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.encode("UNLLUNLLUNLLUNLL```UNLLUNLLUNLLUNLL```UNLLUNLLUNLLUNLL```UNLLUNLLUNLLUNLL```UNLLUNLLUNLLUNLL```UNLLUNLLUNLLUNLL```UNLLUNLLUNLLUNLL```UNLLUNLLUNLLUNLL```UNLLUNLLUNLLUNLL```UNLLUNLLUNLLUNLL```UNLLUNLLUNLLUNLL```UNLLUNLLUNLLUNLL```UNLLUNLLUNLLUNLL```UNLLUNLLUNLLUNLL```UNLLUNLLUNLLUNLL```UNLLUNLLUNLLUNLL```UNLLUNLLUNLLUNLL```UNLLUNLLUNLLUNLL```UNLLUNLLUNLLUNLL```UNLLUNLLUNLLUNLL```UNLLUNLLUNLLUNLL```UNLLUNLLUNLLUNLL```UNLLUNLLUNLLUNLL```UNLLUNLLUNLLUNLL```UNLLUNLLUNLLUNLL```UNLLUNLLUNLLUNLL```UNLLUNLLUNLLUNLL```UNLLUNLLUNLLUNLL```UNLLUNLLUNLLUNLL```UNLLUNLLUNLLUNLL```UNLLUNLLUNLLUNLL```UNLLUNLLUNLLUNLL```!", "null!!!null!!!!!null!!!null!!!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!!!null!!!null!!!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!!!null!!!null!!!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!!!null!!!null!!!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!!!null!!!null!!!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!!!null!!!null!!!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!!!null!!!null!!!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!!!null!!!null!!!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "!!!!!!!!!!!!!!!!```!!!!!!!!!!!!!!!!```!!!!!!!!!!!!!!!!```!!!!!!!!!!!!!!!!```!!!!!!!!!!!!!!!!```!!!!!!!!!!!!!!!!```!!!!!!!!!!!!!!!!```!!!!!!!!!!!!!!!!```!!!!!!!!!!!!!!!!```!!!!!!!!!!!!!!!!```!!!!!!!!!!!!!!!!```!!!!!!!!!!!!!!!!```!!!!!!!!!!!!!!!!```!!!!!!!!!!!!!!!!```!!!!!!!!!!!!!!!!```!!!!!!!!!!!!!!!!```!!!!!!!!!!!!!!!!```!!!!!!!!!!!!!!!!```!!!!!!!!!!!!!!!!```!!!!!!!!!!!!!!!!```!!!!!!!!!!!!!!!!```!!!!!!!!!!!!!!!!```!!!!!!!!!!!!!!!!```!!!!!!!!!!!!!!!!```!!!!!!!!!!!!!!!!```!!!!!!!!!!!!!!!!```!!!!!!!!!!!!!!!!```!!!!!!!!!!!!!!!!```!!!!!!!!!!!!!!!!```!!!!!!!!!!!!!!!!```!!!!!!!!!!!!!!!!```!!!!!!!!!!!!!!!!```!" + "'", str2, "!!!!!!!!!!!!!!!!```!!!!!!!!!!!!!!!!```!!!!!!!!!!!!!!!!```!!!!!!!!!!!!!!!!```!!!!!!!!!!!!!!!!```!!!!!!!!!!!!!!!!```!!!!!!!!!!!!!!!!```!!!!!!!!!!!!!!!!```!!!!!!!!!!!!!!!!```!!!!!!!!!!!!!!!!```!!!!!!!!!!!!!!!!```!!!!!!!!!!!!!!!!```!!!!!!!!!!!!!!!!```!!!!!!!!!!!!!!!!```!!!!!!!!!!!!!!!!```!!!!!!!!!!!!!!!!```!!!!!!!!!!!!!!!!```!!!!!!!!!!!!!!!!```!!!!!!!!!!!!!!!!```!!!!!!!!!!!!!!!!```!!!!!!!!!!!!!!!!```!!!!!!!!!!!!!!!!```!!!!!!!!!!!!!!!!```!!!!!!!!!!!!!!!!```!!!!!!!!!!!!!!!!```!!!!!!!!!!!!!!!!```!!!!!!!!!!!!!!!!```!!!!!!!!!!!!!!!!```!!!!!!!!!!!!!!!!```!!!!!!!!!!!!!!!!```!!!!!!!!!!!!!!!!```!!!!!!!!!!!!!!!!```!");
    }

    @Test
    public void test10313() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10313");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.decode("\u0366\u0365\u0368\u0368\u0346\u0348\u0348!", "\336\335\340\340\336\335\340\340nullnull\336\335\340\340\336\335\340\340nullnull\336\335\340\340\336\335\340\340nullnull\336\335\340\340\336\335\340\340nullnull\336\335\340\340\336\335\340\340nullnull\336\335\340\340\336\335\340\340nullnull\336\335\340\340\336\335\340\340nullnull\336\335\340\340\336\335\340\340nullnull!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\u0366\u0365\u0368\u0368\u0346\u0348\u0348!" + "'", str2, "\u0366\u0365\u0368\u0368\u0346\u0348\u0348!");
    }

    @Test
    public void test10314() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10314");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.decode("\u0346\u0348\u0348\u0348\u0348\u0346\u0346!", "\u0198\u0198\u0198\u0198\u0198\u0198\u0198\u0198\u0198\u0198\u0198\u0198\u0198\u0198\u0198\u0198\u0198\u0198!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\u0346\u0348\u0348\u0348\u0348\u0346\u0346!" + "'", str2, "\u0346\u0348\u0348\u0348\u0348\u0346\u0346!");
    }

    @Test
    public void test10315() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10315");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.encode("!\253\256\256\266null\271\271\266null\271\271\266null\271\271\266null\271\271\266null\271\271\266null\271\271\266null\271\271\266null\271\271\266null\271\271\266null\271\271\266null\271\271\266null\271\271!\253\256\256!\253\256\256!\253\256\256!\253\256\256!\253\256\256!\253\256\256!\253\256\256!\253\256\256!\253\256\256!\253\256\256!\253\256\256!\253\256\256!\253\256\256!\253\256\256!\253\256\256!\253\256\256!\253\256\256\266null\271\271\266null\271\271\266null\271\271\266null\271\271\266null\271\271\266null\271\271\266null\271\271\266null\271\271\266null\271\271\266null\271\271\266null\271\271\266null\271\271!\253\256\256!\253\256\256!\253\256\256!\253\256\256!\253\256\256!\253\256\256!\253\256\256!\253\256\256!", "\215\216\230\230null!!!null!!!null!!!\215\216\230\230null!!!null!!!null!!!\215\216\230\230null!!!null!!!null!!!\215\216\230\230null!!!null!!!null!!!\215\216\230\230null!!!null!!!null!!!\215\216\230\230null!!!null!!!null!!!\215\216\230\230null!!!null!!!null!!!\215\216\230\230null!!!null!!!null!!!!");
        org.junit.Assert.assertEquals("'" + strstr
    }

    @Test
    public void test10316() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10316");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.encode("unllunllnullnullunllunllnullnullunllunllnullnullunllunllnullnullunllunllnullnullunllunllnullnullunllunllnullnullunllunllnullnull!", "\u02d6!\200\200\u02d6!\200\200\u02d6!\200\200\u02d6!\200\200\u02d6!\200\200\u02d6!\200\200\u02d6!\200\200\u02d6!\200\200\u02d6!\200\200\u02d6!\200\200\u02d6!\200\200\u02d6!\200\200\u02d6!\200\200\u02d6!\200\200\u02d6!\200\200\u02d6!\200\200\u02d6!\200\200\u02d6!\200\200\u02d6!\200\200\u02d6!\200\200\u02d6!\200\200\u02d6!\200\200\u02d6!\200\200\u02d6!\200\200\u02d6!\200\200\u02d6!\200\200\u02d6!\200\200\u02d6!\200\200\u02d6!\200\200\u02d6!\200\200\u02d6!\200\200\u02d6!\200\200\u02d6!\200\200\u02d6!\200\200\u02d6!\200\200\u02d6!\200\200\u02d6!\200\200\u02d6!\200\200\u02d6!\200\200\u02d6!\200\200\u02d6!\200\200\u02d6!\200\200\u02d6!\200\200\u02d6!\200\200\u02d6!\200\200\u02d6!\200\200\u02d6!\200\200\u02d6!\200\200\u02d6!\200\200\u02d6!\200\200\u02d6!\200\200\u02d6!\200\200\u02d6!\200\200\u02d6!\200\200\u02d6!\200\200\u02d6!\200\200\u02d6!\200\200\u02d6!\200\200\u02d6!\200\200\u02d6!\200\200\u02d6!\200\200\u02d6!\200\200\u02d6!\200\200\u02d6!\200\200!!!!!");
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\200\u02d6\200\200\200\u02d6\200\200\u02d6\200\200\200\u02d6\200\200\200\200\u02d6\200\200\200\u02d6\200\200\u02d6\200\200\200\u02d6\200\200\200\200\u02d6\200\200\200\u02d6\200\200\u02d6\200\200\200\u02d6\200\200\200\200\u02d6\200\200\200\u02d6\200\200\u02d6\200\200\200\u02d6\200\200\200\200\u02d6\200\200\200\u02d6\200\200\u02d6\200\200\200\u02d6\200\200\200\200\u02d6\200\200\200\u02d6\200\200\u02d6\200\200\200\u02d6\200\200\200\200\u02d6\200\200\200\u02d6\200\200\u02d6\200\200\200\u02d6\200\200\200\200\u02d6\200\200\200\u02d6\200\200\u02d6\200\200\200\u02d6\200\200\200!" + "'", str2, "\200\u02d6\200\200\200\u02d6\200\200\u02d6\200\200\200\u02d6\200\200\200\200\u02d6\200\200\200\u02d6\200\200\u02d6\200\200\200\u02d6\200\200\200\200\u02d6\200\200\200\u02d6\200\200\u02d6\200\200\200\u02d6\200\200\200\200\u02d6\200\200\200\u02d6\200\200\u02d6\200\200\200\u02d6\200\200\200\200\u02d6\200\200\200\u02d6\200\200\u02d6\200\200\200\u02d6\200\200\200\200\u02d6\200\200\200\u02d6\200\200\u02d6\200\200\200\u02d6\200\200\200\200\u02d6\200\200\200\u02d6\200\200\u02d6\200\200\200\u02d6\200\200\200\200\u02d6\200\200\200\u02d6\200\200\u02d6\200\200\200\u02d6\200\200\200!");
    }

    @Test
    public void test10317() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10317");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.encode("nullnullRRnullnullRRRRnullnullRRnullnullRRRRnullnullRRnullnullRRRRnullnullRRnullnullRRRRnullnullRRnullnullRRRRnullnullRRnullnullRRRRnullnullRRnullnullRRRRnullnullRRnullnullRRRRnullnullRRnullnullRRRRnullnullRRnullnullRRRRnullnullRRnullnullRRRRnullnullRRnullnullRRRRnullnullRRnullnullRRRRnullnullRRnullnullRRRRnullnullRRnullnullRRRRnullnullRRnullnullRRRRnullnullRRnullnullRRRRnullnullRRnullnullRRRRnullnullRRnullnullRRRRnullnullRRnullnullRRRRnullnullRRnullnullRRRRnullnullRRnullnullRRRRnullnullRRnullnullRRRRnullnullRRnullnullRRRRnullnullRRnullnullRRRRnullnullRRnullnullRRRRnullnullRRnullnullRRRRnullnullRRnullnullRRRRnullnullRRnullnullRRRRnullnullRRnullnullRRRRnullnullRRnullnullRRRRnullnullRRnullnullRRRR!", "!!\256!!!!\254\254\256!!!!\254\254!!\256!!!!\254\254\256!!!!\254\254!!\256!!!!\254\254\256!!!!\254\254!!\256!!!!\254\254\256!!!!\254\254!!\256!!!!\254\254\256!!!!\254\254!!\256!!!!\254\254\256!!!!\254\254!!\256!!!!\254\254\256!!!!\254\254!!\256!!!!\254\254\256!!!!\254\254!");
        org.junit.Assert.assertEquals("'" + strstr
    }

    @Test
    public void test10318() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10318");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.encode("\u0366\u0365\u0368\u0368\u0346\u0348\u0348!", "!RRR!RRR!RRR!RRR!RRR!RRR!RRR!RRR!RRR!RRR!RRR!RRR!RRR!RRR!RRR!RRR!RRR!RRR!RRR!RRR!RRR!RRR!RRR!RRR!RRR!RRR!RRR!RRR!RRR!RRR!RRR!RRR!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\u0366\u0365\u0368\u0368\u0346\u0348\u0348!" + "'", str2, "\u0366\u0365\u0368\u0368\u0346\u0348\u0348!");
    }

    @Test
    public void test10319() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10319");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.encodeu023e\u023e\u0240\u0240\u023e\u023e\u0240\u0240\u023e\u023e\u0240\u0240\u023e\u023e\u0240\u0240\u023e\u023e\u0240\u0240\u023e\u023e\u0240\u0240\u023e\u023e\u0240\u0240\u023e\u023e\u0240\u0240\u023e\u023e\u0240\u0240\u023e\u023e\u0240\u0240\u023e\u023e\u0240\u0240\u023e\u023e\u0240\u0240\u023e\u023e\u0240\u0240\u023e\u023e\u0240\u0240\u023e\u023e\u0240\u0240\u023e\u023e\u0240\u0240\u023e\u023e\u0240\u0240\u023e\u023e\u0240\u0240\u023e\u023e\u0240\u0240\u023e\u023e\u0240\u0240\u023e\u023e\u0240\u0240\u023e\u023e\u0240\u0240\u023e\u023e\u0240\u0240\u023e\u023e\u0240\u0240\u023e\u023e\u0240\u0240\u023e\u023e\u0240\u0240\u023e\u023e\u0240\u0240\u023e\u023e\u0240\u0240\u023e\u023e\u0240\u0240\u023e\u023e\u0240\u0240\u023e\u023e\u0240\u0240\u023e\u023e\u0240\u0240!");
        org.junit.Assert.assertEquals("'" + strstr2, "\276\276\276\276\276\276\276\276\276\276\276\276\276\276\276\276\276\276\276\276\276\276\276\276\276\276\276\276\276\276\276\276!!\276\276\276\276\276\276\276\276\276\276\276\276\276\276\276\276\276\276\276\276\276\276\276\276\276\276\276\276\276\276\276\276!!\276\276\276\276\276\276\276\276\276\276\276\276\276\276\276\276\276\276\276\276\276\276\276\276\276\276\276\276\276\276\276\276\276\276\276\276\276\276\276\276\276\276\276\276\276\276\276\276\276\276\276\276\276\276\276\276\276\276\276\276\276\276\276\276!!\276\276\276\276\276\276\276\276\276\276\276\276\276\276\276\276\276\276\276\276\276\276\276\276\276\276\276\276\276\276\276\276!!\276\276\276\276\276\276\276\276\276\276\276\276\276\276\276\276\276\276\276\276\276\276\276\276\276\276\276\276\276\276\276\276!");
    }

    @Test
    public void test10320() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10320");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.encode("\u0256\u0256!!!", "NNKKNNKKNNKKNNKKNNKKNNKKNNKKNNKK\214\214NNKKNNKKNNKKNNKKNNKKNNKKNNKKNNKK\214\214NNKKNNKKNNKKNNKKNNKKNNKKNNKKNNKK\214\214NNKKNNKKNNKKNNKKNNKKNNKKNNKKNNKK\214\214NNKKNNKKNNKKNNKKNNKKNNKKNNKKNNKK\214\214NNKKNNKKNNKKNNKKNNKKNNKKNNKKNNKK\214\214NNKKNNKKNNKKNNKKNNKKNNKKNNKKNNKK\214\214NNKKNNKKNNKKNNKKNNKKNNKKNNKKNNKK\214\214!");
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "KKNNnull!!KKNNnull!!!" + "'", str2, "KKNNnull!!KKNNnull!!!");
    }

    @Test
    public void test10321() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10321");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.encodenull!!!null!!!null!!\276!null!!\275\275!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "LL!!LL!!!!LL!!LL!!!!!!LL!!LL!!!!LL!!LL!!!!!!LL!!LL!!!!LL!!LL!!!!LL!!LL!!!!LL!!LL!!!!LL!!LL!!!!LL!!LL!!!!LL!!LL!!!!LL!!LL!!!!LL!!LL!!!!LL!!LL!!!!!!LL!!LL!!!!LL!!LL!!!!!!LL!!LL!!!!LL!!LL!!!!LL!!LL!!!!LL!!LL!!!!LL!!LL!!!!LL!!LL!!!!LL!!LL!!!!LL!!LL!!!!LL!!LL!!!!LL!!LL!!!!!!LL!!LL!!!!LL!!LL!!!!!!LL!!LL!!!!LL!!LL!!!!LL!!LL!!!!LL!!LL!!!!LL!!LL!!!!LL!!LL!!!!LL!!LL!!!!LL!!LL!!!!LL!!LL!!!!LL!!LL!!!!!!LL!!LL!!!!LL!!LL!!!!!!LL!!LL!!!!LL!!LL!!!!LL!!LL!!!!LL!!LL!!!!LL!!LL!!!!LL!!LL!!!!LL!!LL!!!!LL!!LL!!!!LL!!LL!!!!LL!!LL!!!!!!LL!!LL!!!!LL!!LL!!!!!!LL!!LL!!!!LL!!LL!!!!LL!!LL!!!!LL!!LL!!!!LL!!LL!!!!LL!!LL!!!!LL!!LL!!!!LL!!LL!!!!LL!!LL!!!!LL!!LL!!!!!!LL!!LL!!!!LL!!LL!!!!!!LL!!LL!!!!LL!!LL!!!!LL!!LL!!!!LL!!LL!!!!LL!!LL!!!!LL!!LL!!!!LL!!LL!!!!LL!!LL!!!!LL!!LL!!!!LL!!LL!!!!!!LL!!LL!!!!LL!!LL!!!!!!LL!!LL!!!!LL!!LL!!!!LL!!LL!!!!LL!!LL!!!!LL!!LL!!!!LL!!LL!!!!LL!!LL!!!!LL!!LL!!!!LL!!LL!!!!LL!!LL!!!!!!LL!!LL!!!!LL!!LL!!!!!!LL!!LL!!!!LL!!LL!!!!LL!!LL!!!!LL!!LL!!!!LL!!LL!!!!LL!!LL!!!!LL!!LL!!!!LL!!LL!!!!!" + "'", str2, "LL!!LL!!!!LL!!LL!!!!!!LL!!LL!!!!LL!!LL!!!!!!LL!!LL!!!!LL!!LL!!!!LL!!LL!!!!LL!!LL!!!!LL!!LL!!!!LL!!LL!!!!LL!!LL!!!!LL!!LL!!!!LL!!LL!!!!LL!!LL!!!!!!LL!!LL!!!!LL!!LL!!!!!!LL!!LL!!!!LL!!LL!!!!LL!!LL!!!!LL!!LL!!!!LL!!LL!!!!LL!!LL!!!!LL!!LL!!!!LL!!LL!!!!LL!!LL!!!!LL!!LL!!!!!!LL!!LL!!!!LL!!LL!!!!!!LL!!LL!!!!LL!!LL!!!!LL!!LL!!!!LL!!LL!!!!LL!!LL!!!!LL!!LL!!!!LL!!LL!!!!LL!!LL!!!!LL!!LL!!!!LL!!LL!!!!!!LL!!LL!!!!LL!!LL!!!!!!LL!!LL!!!!LL!!LL!!!!LL!!LL!!!!LL!!LL!!!!LL!!LL!!!!LL!!LL!!!!LL!!LL!!!!LL!!LL!!!!LL!!LL!!!!LL!!LL!!!!!!LL!!LL!!!!LL!!LL!!!!!!LL!!LL!!!!LL!!LL!!!!LL!!LL!!!!LL!!LL!!!!LL!!LL!!!!LL!!LL!!!!LL!!LL!!!!LL!!LL!!!!LL!!LL!!!!LL!!LL!!!!!!LL!!LL!!!!LL!!LL!!!!!!LL!!LL!!!!LL!!LL!!!!LL!!LL!!!!LL!!LL!!!!LL!!LL!!!!LL!!LL!!!!LL!!LL!!!!LL!!LL!!!!LL!!LL!!!!LL!!LL!!!!!!LL!!LL!!!!LL!!LL!!!!!!LL!!LL!!!!LL!!LL!!!!LL!!LL!!!!LL!!LL!!!!LL!!LL!!!!LL!!LL!!!!LL!!LL!!!!LL!!LL!!!!LL!!LL!!!!LL!!LL!!!!!!LL!!LL!!!!LL!!LL!!!!!!LL!!LL!!!!LL!!LL!!!!LL!!LL!!!!LL!!LL!!!!LL!!LL!!!!LL!!LL!!!!LL!!LL!!!!LL!!LL!!!!!");
    }

    @Test
    public void test10322() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10322");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.encode("LL\300\300LL\300\300LL\300\300LL\300\300LL\300\300LL\300\300LL\300\300LL\300\300!", "\u0366\u0365\u0368\uu0346\u0348\u0348!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\300\300\300\300\300\300\300\300\300\300\300\300\300\300\300\300\300\300\300\300\300\300\300\300\300\300\300\300\300\300\300\300!" + "'", str2, "\300\300\300\300\300\300\300\300\300\300\300\300\300\300\300\300\300\300\300\300\300\300\300\300\300\300\300\300\300\300\300\300!");
    }

    @Test
    public void test10323() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10323");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.encode("\u031a\u031a\u031a\u031a\u016e\u016e\u016e\u016e\u031a\u031a\u031a\u031a\u016e\u016e\u016e\u016e\u031a\u031a\u031a\u031a\u016e\u016e\u016e\u016e\u031a\u031a\u031a\u031a\u016e\u016e\u016e\u016e\u031a\u031a\u031a\u031a\u016e\u016e\u016e\u016e\u031a\u031a\u031a\u031a\u016e\u016e\u016e\u016e\u031a\u031a\u031a\u031a\u016e\u016e\u016e\u016e\u031a\u031a\u031a\u031a\u016e\u016e\u016e\u016e\u031a\u031a\u031a\u031a\u016e\u016e\u016e\u016e\u031a\u031a\u031a\u031a\u016e\u016e\u016e\u016e\u031a\u031a\u031a\u031a\u016e\u016e\u016e\u016e\u031a\u031a\u031a\u031a\u016e\u016e\u016e\u016e\u031a\u031a\u031a\u031a\u016e\u016e\u016e\u016e\u031a\u031a\u031a\u031a\u016e\u016e\u016e\u016e\u031a\u031a\u031a\u031a\u016e\u016e\u016e\u016e\u031a\u031a\u031a\u031a\u016e\u016e\u016e\u016e!!!", "LL!!LL!!LL!!LL!!LL!!LL!!LL!!LL!!!!LL!!LL!!LL!!LL!!LL!!LL!!LL!!LL!!!!LL!!LL!!LL!!LL!!LL!!LL!!LL!!LL!!LL!!LL!!LL!!LL!!LL!!LL!!LL!!LL!!!!LL!!LL!!LL!!LL!!LL!!LL!!LL!!LL!!!!LL!!LL!!LL!!LL!!LL!!LL!!LL!!LL!!!");
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\u031a\u031a\u031a\u031a\u031a\u031a\u031a\u031a\u031a\u031a\u031a\u031a\u031a\u031a\u031a\u031a\u031a\u031a\u031a\u031a\u031a\u031a\u031a\u031a\u031a\u031a\u031a\u031a\u031a\u031a\u031a\u031a\u031a\u031a\u031a\u031a\u031a\u031a\u031a\u031a\u031a\u031a\u031a\u031a\u031a\u031a\u031a\u031a\u031a\u031a\u031a\u031a\u031a\u031a\u031a\u031a\u031a\u031a\u031a\u031a\u031a\u031a\u031a\u031aLLnullnullLLnullnull!!!" + "'", str2, "\u031a\u031a\u031a\u031a\u031a\u031a\u031a\u031a\u031a\u031a\u031a\u031a\u031a\u031a\u031a\u031a\u031a\u031a\u031a\u031a\u031a\u031a\u031a\u031a\u031a\u031a\u031a\u031a\u031a\u031a\u031a\u031a\u031a\u031a\u031a\u031a\u031a\u031a\u031a\u031a\u031a\u031a\u031a\u031a\u031a\u031a\u031a\u031a\u031a\u031a\u031a\u031a\u031a\u031a\u031a\u031a\u031a\u031a\u031a\u031a\u031a\u031a\u031a\u031aLLnullnullLLnullnull!!!");
    }

    @Test
    public void test10324() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10324");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.decode("!~~~!~~~!~~~!~~~```!~~~!~~~!~~~!~~~```!~~~!~~~!~~~!~~~```!~~~!~~~!~~~!~~~```!~~~!~~~!~~~!~~~```!~~~!~~~!~~~!~~~```!~~~!~~~!~~~!~~~```!~~~!~~~!~~~!~~~```!~~~!~~~!~~~!~~~```!~~~!~~~!~~~!~~~```!~~~!~~~!~~~!~~~```!~~~!~~~!~~~!~~~```!~~~!~~~!~~~!~~~```!~~~!~~~!~~~!~~~```!~~~!~~~!~~~!~~~```!~~~!~~~!~~~!~~~```!~~~!~~~!~~~!~~~```!~~~!~~~!~~~!~~~```!~~~!~~~!~~~!~~~```!~~~!~~~!~~~!~~~```!~~~!~~~!~~~!~~~```!~~~!~~~!~~~!~~~```!~~~!~~~!~~~!~~~```!~~~!~~~!~~~!~~~```!~~~!~~~!~~~!~~~```!~~~!~~~!~~~!~~~```!~~~!~~~!~~~!~~~```!~~~!~~~!~~~!~~~```!~~~!~~~!~~~!~~~```!~~~!~~~!~~~!~~~```!~~~!~~~!~~~!~~~```!~~~!~~~!~~~!~~~```!", "!!\256nullnullnullnull\254\254\256nullnullnullnull\254\254!!\256nullnullnullnull\254\254\256nullnullnullnull\254\254!!\256nullnullnullnull\254\254\256nullnullnullnull\254\254!!\256nullnullnullnull\254\254\256nullnullnullnull\254\254!!\256nullnullnullnull\254\254\256nullnullnullnull\254\254!!\256nullnullnullnull\254\254\256nullnullnullnull\254\254!!\256nullnullnullnull\254\254\256nullnullnullnull\254\254!!\256nullnullnullnull\254\254\256nullnullnullnull\254\254!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "!~~~!~~~!~~~!~~~```!~~~!~~~!~~~!~~~```!~~~!~~~!~~~!~~~```!~~~!~~~!~~~!~~~```!~~~!~~~!~~~!~~~```!~~~!~~~!~~~!~~~```!~~~!~~~!~~~!~~~```!~~~!~~~!~~~!~~~```!~~~!~~~!~~~!~~~```!~~~!~~~!~~~!~~~```!~~~!~~~!~~~!~~~```!~~~!~~~!~~~!~~~```!~~~!~~~!~~~!~~~```!~~~!~~~!~~~!~~~```!~~~!~~~!~~~!~~~```!~~~!~~~!~~~!~~~```!~~~!~~~!~~~!~~~```!~~~!~~~!~~~!~~~```!~~~!~~~!~~~!~~~```!~~~!~~~!~~~!~~~```!~~~!~~~!~~~!~~~```!~~~!~~~!~~~!~~~```!~~~!~~~!~~~!~~~```!~~~!~~~!~~~!~~~```!~~~!~~~!~~~!~~~```!~~~!~~~!~~~!~~~```!~~~!~~~!~~~!~~~```!~~~!~~~!~~~!~~~```!~~~!~~~!~~~!~~~```!~~~!~~~!~~~!~~~```!~~~!~~~!~~~!~~~```!~~~!~~~!~~~!~~~```!" + "'", str2, "!~~~!~~~!~~~!~~~```!~~~!~~~!~~~!~~~```!~~~!~~~!~~~!~~~```!~~~!~~~!~~~!~~~```!~~~!~~~!~~~!~~~```!~~~!~~~!~~~!~~~```!~~~!~~~!~~~!~~~```!~~~!~~~!~~~!~~~```!~~~!~~~!~~~!~~~```!~~~!~~~!~~~!~~~```!~~~!~~~!~~~!~~~```!~~~!~~~!~~~!~~~```!~~~!~~~!~~~!~~~```!~~~!~~~!~~~!~~~```!~~~!~~~!~~~!~~~```!~~~!~~~!~~~!~~~```!~~~!~~~!~~~!~~~```!~~~!~~~!~~~!~~~```!~~~!~~~!~~~!~~~```!~~~!~~~!~~~!~~~```!~~~!~~~!~~~!~~~```!~~~!~~~!~~~!~~~```!~~~!~~~!~~~!~~~```!~~~!~~~!~~~!~~~```!~~~!~~~!~~~!~~~```!~~~!~~~!~~~!~~~```!~~~!~~~!~~~!~~~```!~~~!~~~!~~~!~~~```!~~~!~~~!~~~!~~~```!~~~!~~~!~~~!~~~```!~~~!~~~!~~~!~~~```!~~~!~~~!~~~!~~~```!");
    }

    @Test
    public void test10325() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10325");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.encode("LLAALLAALLAALLAALLAALLAALLAALLAA!!LLAALLAALLAALLAALLAALLAALLAALLAA!!LLAALLAALLAALLAALLAALLAALLAALLAALLAALLAALLAALLAALLAALLAALLAALLAA!!LLAALLAALLAALLAALLAALLAALLAALLAA!!LLAALLAALLAALLAALLAALLAALLAALLAA!", "nullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull\200}}`nullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull]]!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "LLNNLLNNLLNNLLNNLLNNLLNNLLNNLLNN!!LLNNLLNNLLNNLLNNLLNNLLNNLLNNLLNN!!LLNNLLNNLLNNLLNNLLNNLLNNLLNNLLNNLLNNLLNNLLNNLLNNLLNNLLNNLLNNLLNN!!LLNNLLNNLLNNLLNNLLNNLLNNLLNNLLNN!!LLNNLLNNLLNNLLNNLLNNLLNNLLNNLLNN!" + "'", str2, "LLNNLLNNLLNNLLNNLLNNLLNNLLNNLLNN!!LLNNLLNNLLNNLLNNLLNNLLNNLLNNLLNN!!LLNNLLNNLLNNLLNNLLNNLLNNLLNNLLNNLLNNLLNNLLNNLLNNLLNNLLNNLLNNLLNN!!LLNNLLNNLLNNLLNNLLNNLLNNLLNNLLNN!!LLNNLLNNLLNNLLNNLLNNLLNNLLNNLLNN!");
    }

    @Test
    public void test10326() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10326");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.encode("\u0187\u0187\u0187\230\226\226\u0187\u0187\u0187\230\226\226\u0187\u0187\u0187\230\226\226\u0187\u0187\u0187\230\226\226\u0187\u0187\u0187\230\226\226\u0187\u0187\u0187\230\226\226\u0187\u0187\u0187\230\226\226\u0187\u0187\u0187\230\226\226\u0187\u0187\u0187\230\226\226\u0187\u0187\u0187\230\226\226\u0187\u0187\u0187\230\226\226\u0187\u0187\u0187\230\226\226\u0187\u0187\u0187\230\226\226\u0187\u0187\u0187\230\226\226\u0187\u0187\u0187\230\226\226\u0187\u0187\u0187\230\226\226!!!", "LL~LLLLLL~LLLL!!LL~LLLLLL~LLLL!!LL~LLLLLL~LLLL!!LL~LLLLLL~LLLL!!LL~LLLLLL~LLLL!!LL~LLLLLL~LLLL!!LL~LLLLLL~LLLL!!LL~LLLLLL~LLLL!!!");
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "Lnullnullnull\230\226\226Lnullnullnull\230\226\226Lnullnullnull\230\226\226Lnullnullnull\230\226\226Lnullnullnull\230\226\226Lnullnullnull\230\226\226Lnullnullnull\230\226\226Lnullnullnull\230\226\226!!Lnullnullnull\230\226\226Lnullnullnull\230\226\226Lnullnullnull\230\226\226Lnullnullnull\230\226\226Lnullnullnull\230\226\226Lnullnullnull\230\226\226Lnullnullnull\230\226\226Lnullnullnull\230\226\226!!!" + "'", str2, "Lnullnullnull\230\226\226Lnullnullnull\230\226\226Lnullnullnull\230\226\226Lnullnullnull\230\226\226Lnullnullnull\230\226\226Lnullnullnull\230\226\226Lnullnullnull\230\226\226Lnullnullnull\230\226\226!!Lnullnullnull\230\226\226Lnullnullnull\230\226\226Lnullnullnull\230\226\226Lnullnullnull\230\226\226Lnullnullnull\230\226\226Lnullnullnull\230\226\226Lnullnullnull\230\226\226Lnullnullnull\230\226\226!!!");
    }

    @Test
    public void test10327() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10327");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.encode("null\340\275\275!!!```null\340\275\275!!!```null\340\275\275!!!```null\340\275\275!!!```null\340\275\275!!!```null\340\275\275!!!```null\340\275\275!!!```null\340\275\275!!!```null\340\275\275!!!```null\340\275\275!!!```null\340\275\275!!!```null\340\275\275!!!```null\340\275\275!!!```null\340\275\275!!!```null\340\275\275!!!```null\340\275\275!!!```null\340\275\275!!!```null\340\275\275!!!```null\340\275\275!!!```null\340\275\275!!!```null\340\275\275!!!```null\340\275\275!!!```null\340\275\275!!!```null\340\275\275!!!```null\340\275\275!!!```null\340\275\275!!!```null\340\275\275!!!```null\340\275\275!!!```null\340\275\275!!!```null\340\275\275!!!```null\340\275\275!!!```null\340\275\275!!!```!", "]]\200null\200\200\200null\200\200]]\200null\200\200\200null\200\200!!]]\200null\200\200\200null\200\200]]\200null\200\200\200null\200\200!!]]\200null\200\200\200null\200\200]]\200null\200\200\200null\200\200]]\200null\200\200\200null\200\200]]\200null\200\200\200null\200\200!!]]\200null\200\200\200null\200\200]]\200null\200\200\200null\200\200!!]]\200null\200\200\200null\200\200]]\200null\200\200\200null\200\200!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "U\200\200\200\200\275\275!!!```U\200\200\200\200\275\275!!!```U\200\200\200\200\275\275!!!```U\200\200\200\200\275\275!!!```U\200\200\200\200\275\275!!!```U\200\200\200\200\275\275!!!```U\200\200\200\200\275\275!!!```U\200\200\200\200\275\275!!!```U\200\200\200\200\275\275!!!```U\200\200\200\200\275\275!!!```U\200\200\200\200\275\275!!!```U\200\200\200\200\275\275!!!```U\200\200\200\200\275\275!!!```U\200\200\200\200\275\275!!!```U\200\200\200\200\275\275!!!```U\200\200\200\200\275\275!!!```U\200\200\200\200\275\275!!!```U\200\200\200\200\275\275!!!```U\200\200\200\200\275\275!!!```U\200\200\200\200\275\275!!!```U\200\200\200\200\275\275!!!```U\200\200\200\200\275\275!!!```U\200\200\200\200\275\275!!!```U\200\200\200\200\275\275!!!```U\200\200\200\200\275\275!!!```U\200\200\200\200\275\275!!!```U\200\200\200\200\275\275!!!```U\200\200\200\200\275\275!!!```U\200\200\200\200\275\275!!!```U\200\200\200\200\275\275!!!```U\200\200\200\200\275\275!!!```U\200\200\200\200\275\275!!!```!" + "'", str2, "U\200\200\200\200\275\275!!!```U\200\200\200\200\275\275!!!```U\200\200\200\200\275\275!!!```U\200\200\200\200\275\275!!!```U\200\200\200\200\275\275!!!```U\200\200\200\200\275\275!!!```U\200\200\200\200\275\275!!!```U\200\200\200\200\275\275!!!```U\200\200\200\200\275\275!!!```U\200\200\200\200\275\275!!!```U\200\200\200\200\275\275!!!```U\200\200\200\200\275\275!!!```U\200\200\200\200\275\275!!!```U\200\200\200\200\275\275!!!```U\200\200\200\200\275\275!!!```U\200\200\200\200\275\275!!!```U\200\200\200\200\275\275!!!```U\200\200\200\200\275\275!!!```U\200\200\200\200\275\275!!!```U\200\200\200\200\275\275!!!```U\200\200\200\200\275\275!!!```U\200\200\200\200\275\275!!!```U\200\200\200\200\275\275!!!```U\200\200\200\200\275\275!!!```U\200\200\200\200\275\275!!!```U\200\200\200\200\275\275!!!```U\200\200\200\200\275\275!!!```U\200\200\200\200\275\275!!!```U\200\200\200\200\275\275!!!```U\200\200\200\200\275\275!!!```U\200\200\200\200\275\275!!!```U\200\200\200\200\275\275!!!```!");
    }

    @Test
    public void test10328() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10328");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.encode("\u0346\u0348\u0348\u0348\u02e3\u02e3\u02e3\u02e3\u02e3\u02e3\u037e\u037e\u0348\u0346\u0346!", "]null!!\275]null!!]null!!]null!!\275]null!!]null!!]null!!\275]null!!]null!!]null!!\275]null!!]null!!]null!!\275]null!!]null!!]null!!\275]null!!]null!!]null!!\275]null!!]null!!]null!!\275\u037e\u037e\u037e\u037e\u037e\u037e\u037e\u037e\u037e\u037e\u037e\u037e\u037e\u037e\u037e\u037e]null!!\275]null!!]null!!]null!!\275]null!!]null!!]null!!\275]null!!]null!!]null!!\275]null!!]null!!]null!!\275]null!!]null!!]null!!\275]null!!]null!!]null!!\275]null!!]null!!]null!!\275\u037e\u037e\u037e\u037e\u037e\u037e\u037e\u037e\u037e\u037e\u037e\u037e\u037e\u037e\u037e\u037e!");
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\u0346\u0348\u0348\u0348\u037e\u037e\u0348\u0346\u0346!" + "'", str2, "\u0346\u0348\u0348\u0348\u037e\u037e\u0348\u0346\u0346!");
    }

    @Test
    public void test10329() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10329");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.encode("\u0108\u0108\u0108\u0108\u0108\u0108\u0108\u0108\u0108\u0108\u0108\u0108\u0108\u0108\u0108\u0108\u0108\u0108\u0108\u0108\u0108\u0108\u0108\u0108\u0108\u0108\u0108\u0108\u0108\u0108\u0108\u0108\u0108\u0108\u0108\u0108\u0108\u0108\u0108\u0108\u0108\u0108\u0108\u0108\u0108\u0108\u0108\u0108\u0108\u0108\u0108\u0108\u0108\u0108\u0108\u0108\u0108\u0108\u0108\u0108\u0108\u0108\u0108\u0108\u0108\u0108\u0108\u0108\u0108\u0108\u0108\u0108\u0108\u0108\u0108\u0108\u0108\u0108\u0108\u0108\u0108\u0108\u0108\u0108\u0108\u0108\u0108\u0108\u0108\u0108\u0108\u0108\u0108\u0108\u0108\u0108\u0108\u0108\u0108\u0108\u0108\u0108\u0108\u0108\u0108\u0108\u0108\u0108\u0108\u0108\u0108\u0108\u0108\u0108\u0108\u0108\u0108\u0108\u0108\u0108\u0108\u0108\u0108\u0108\u0108\u0108\u0108\u0108\u0108\u0108\u0108\u0108\u0108\u0108\u0108\u0108\u0108\u0108\u0108\u0108\u0108\u0108\u0108\u0108!", "\275!nullnullnull!nullnullnull!nullnullnull\276!nullnullnull\275\275!");
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "null!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnull!!null!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnull!!null!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnull!!null!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnull!!null!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnull!" + "'", str2, "null!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnull!!null!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnull!!null!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnull!!null!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnull!!null!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnull!");
    }

    @Test
    public void test10330() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10330");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.decode("\u014f\u014b\u014b\u014f\u014b\u014b\u014e\u014e\u014f\u014b\u014b\u014f\u014b\u014b\u014e\u014e\u014f\u014b\u014b\u014f\u014b\u014b\u014e\u014e\u014f\u014b\u014b\u014f\u014b\u014b\u014e\u014e\u014f\u014b\u014b\u014f\u014b\u014b\u014e\u014e\u014f\u014b\u014b\u014f\u014b\u014b\u014e\u014e\u014f\u014b\u014b\u014f\u014b\u014b\u014e\u014e\u014f\u014b\u014b\u014f\u014b\u014b\u014e\u014e!", "");
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "null!nullnullnull!nullnullnullnullnull!nullnullnull!nullnullnullnullnull!nullnullnull!nullnullnullnullnull!nullnullnull!nullnullnullnullnull!nullnullnull!nullnullnullnullnull!nullnullnull!nullnullnullnullnull!nullnullnull!nullnullnullnullnull!nullnullnull!nullnullnullnull!" + "'", str2, "null!nullnullnull!nullnullnullnullnull!nullnullnull!nullnullnullnullnull!nullnullnull!nullnullnullnullnull!nullnullnull!nullnullnullnullnull!nullnullnull!nullnullnullnullnull!nullnullnull!nullnullnullnullnull!nullnullnull!nullnullnullnullnull!nullnullnull!nullnullnullnull!");
    }

    @Test
    public void test10331() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10331");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.decode("\u0147\u014a\u014a\u0147\u014a\u014a\u0147\u014a\u014a\u0147\u014a\u014a
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "null!nullnullnull!nullnull!!null!nullnullnull!nullnull!!!" + "'", str2, "null!nullnullnull!nullnull!!null!nullnullnull!nullnull!!!");
    }

    @Test
    public void test10332() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10332");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.decode("\u013c\u013a\u013a\u013a\u013c\u013a\u013a\u013a\u013c\u013a\u013a\u013a\u013c\u013a\u013a\u013a\u013c\u013a\u013a\u013a\u013c\u013a\u013a\u013a\u013c\u013a\u013a\u013a\u013c\u013a\u013a\u013a\u013c\u013a\u013a\u013a\u013c\u013a\u013a\u013a\u013c\u013a\u013a\u013a\u013c\u013a\u013a\u013a\u013c\u013a\u013a\u013a\u013c\u013a\u013a\u013a\u013c\u013a\u013a\u013a\u013c\u013a\u013a\u013a\200\u013c\u013a\u013a\u013a\u013c\u013a\u013a\u013a\u013c\u013a\u013a\u013a\u013c\u013a\u013a\u013a\u013c\u013a\u013a\u013a\u013c\u013a\u013a\u013a\u013c\u013a\u013a\u013a\u013c\u013a\u013a\u013a\u013c\u013a\u013a\u013a\u013c\u013a\u013a\u013a\u013c\u013a\u013a\u013a\u013c\u013a\u013a\u013a\u013c\u013a\u013a\u013a\u013c\u013a\u013a\u013a\u013c\u013a\u013a\u013a\u013c\u013a\u013a\u013a]]!", "LLUULLUULLUULLUULLUULLUULLUULLUU!!LLUULLUULLUULLUULLUULLUULLUULLUU!!LLUULLUULLUULLUULLUULLUULLUULLUULLUULLUULLUULLUULLUULLUULLUULLUU!!LLUULLUULLUULLUULLUULLUULLUULLUU!!LLUULLUULLUULLUULLUULLUULLUULLUU!");
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "nullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull\200}}`nullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull]]!" + "'", str2, "nullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull\200}}`nullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull]]!");
    }

    @Test
    public void test10333() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10333");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.encode("LLUU\275\275\275LLUU\275\275\275!!LLUU\275\275\275LLUU\275\275\275!!LLUU\275\275\275LLUU\275\275\275LLUU\275\275\275LLUU\275\275\275!!LLUU\275\275\275LLUU\275\275\275!!LLUU\275\275\275LLUU\275\275\275!", "UULLUULL!!UULLUULL!!UULLUULL!!UULLUULL!!UULLUULL!!UULLUULL!!UULLUULL!!UULLUULL!!!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "UUUU\275\275\275UUUU\275\275\275!!UUUU\275\275\275UUUU\275\275\275!!UUUU\275\275\275UUUU\275\275\275UUUU\275\275\275UUUU\275\275\275!!UUUU\275\275\275UUUU\275\275\275!!UUUU\275\275\275UUUU\275\275\275!" + "'", str2, "UUUU\275\275\275UUUU\275\275\275!!UUUU\275\275\275UUUU\275\275\275!!UUUU\275\275\275UUUU\275\275\275UUUU\275\275\275UUUU\275\275\275!!UUUU\275\275\275UUUU\275\275\275!!UUUU\275\275\275UUUU\275\275\275!");
    }

    @Test
    public void test10334() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10334");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.decode("", "!nullnullnullnull!!!nullnullnullnull!!!!!nullnullnullnull!!!nullnullnullnull!!!!!nullnullnullnull!!!nullnullnullnull!!!!!nullnullnullnull!!!nullnullnullnull!!!!!nullnullnullnull!!!nullnullnullnull!!!!!nullnullnullnull!!!nullnullnullnull!!!!!nullnullnullnull!!!nullnullnullnull!!!!!nullnullnullnull!!!nullnullnullnull!!!!!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
    }

    @Test
    public void test10335() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10335");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.decode("", "`!\215\215\215!\215\215\215!\215\215\215!\215\215\215!\215\215\215!\215\215\215!\215\215\215!\215\215\215!\215\215\215!\215\215\215!\215\215\215!\215\215\215`!\215\215\215!\215\215\215!\215\215\215!\215\215\215!\215\215\215!\215\215\215!\215\215\215!\215\215\215!\215\215\215!\215\215\215!\215\215\215!\215\215\215!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
    }

    @Test
    public void test10336() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10336");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.decode("]]\253\271\271!!\256\256\253\271\271!!\256\256]]\253\271\271!!\256\256\253\271\271!!\256\256!!]]\253\271\271!!\256\256\253\271\271!!\256\256]]\253\271\271!!\256\256\253\271\271!!\256\256!!]]\253\271\271!!\256\256\253\271\271!!\256\256]]\253\271\271!!\256\256\253\271\271!!\256\256]]\253\271\271!!\256\256\253\271\271!!\256\256]]\253\271\271!!\256\256\253\271\271!!\256\256!!]]\253\271\271!!\256\256\253\271\271!!\256\256]]\253\271\271!!\256\256\253\271\271!!\256\256!!]]\253\271\271!!\256\256\253\271\271!!\256\256]]\253\271\271!!\256\256\253\271\271!!\256\256!", "\275null\276\276\275null\276\276!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "]]\253\271\271!!\256\256\253\271\271!!\256\256]]\253\271\271!!\256\256\253\271\271!!\256\256!!]]\253\271\271!!\256\256\253\271\271!!\256\256]]\253\271\271!!\256\256\253\271\271!!\256\256!!]]\253\271\271!!\256\256\253\271\271!!\256\256]]\253\271\271!!\256\256\253\271\271!!\256\256]]\253\271\271!!\256\256\253\271\271!!\256\256]]\253\271\271!!\256\256\253\271\271!!\256\256!!]]\253\271\271!!\256\256\253\271\271!!\256\256]]\253\271\271!!\256\256\253\271\271!!\256\256!!]]\253\271\271!!\256\256\253\271\271!!\256\256]]\253\271\271!!\256\256\253\271\271!!\256\256!" + "'", str2, "]]\253\271\271!!\256\256\253\271\271!!\256\256]]\253\271\271!!\256\256\253\271\271!!\256\256!!]]\253\271\271!!\256\256\253\271\271!!\256\256]]\253\271\271!!\256\256\253\271\271!!\256\256!!]]\253\271\271!!\256\256\253\271\271!!\256\256]]\253\271\271!!\256\256\253\271\271!!\256\256]]\253\271\271!!\256\256\253\271\271!!\256\256]]\253\271\271!!\256\256\253\271\271!!\256\256!!]]\253\271\271!!\256\256\253\271\271!!\256\256]]\253\271\271!!\256\256\253\271\271!!\256\256!!]]\253\271\271!!\256\256\253\271\271!!\256\256]]\253\271\271!!\256\256\253\271\271!!\256\256!");
    }

    @Test
    public void test10337() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10337");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.decode("\u0366\u0365\u0368\uu0346\u0348\u0348!", "f]fff]ff!!f]fff]ff!!f]fff]fff]fff]ff!!f]fff]ff!!f]fff]ff!");
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\u0366\u0365\u0368\u0368nullnullnullnullnullnullnullnull\204\204nullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull\204\204nullnullnullnullnullnullnullnullnullnullnullnull!!nullnullnullnullnullnullnullnull\204\204nullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull\204\204nullnullnullnullnullnullnullnullnullnullnullnull!!nullnullnullnullnullnullnullnull\204\204nullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull\204\204nullnullnullnullnullnullnullnullnullnullnullnull!!nullnullnullnullnullnullnullnull\204\204nullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull\204\204\u0346\u0348\u0348!" + "'", str2, "\u0366\u0365\u0368\u0368nullnullnullnullnullnullnullnull\204\204nullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull\204\204nullnullnullnullnullnullnullnullnullnullnullnull!!nullnullnullnullnullnullnullnull\204\204nullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull\204\204nullnullnullnullnullnullnullnullnullnullnullnull!!nullnullnullnullnullnullnullnull\204\204nullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull\204\204nullnullnullnullnullnullnullnullnullnullnullnull!!nullnullnullnullnullnullnullnull\204\204nullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull\204\204\u0346\u0348\u0348!");
    }

    @Test
    public void test10338() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10338");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.encode("HHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHH!", "nullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "LLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLL!" + "'", str2, "LLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLL!");
    }

    @Test
    public void test10339() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10339");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.decode("]\275]]]\275]]]\275]]]\275]]]\275]]]\275]]]\275]]]\275]]]\275]]]\275]]]\275]]]\275]]]\275]]]\275]]]\275]]]\275]]]\275]]]\275]]]\275]]]\275]]]\275]]]\275]]]\275]]]\275]]]\275]]]\275]]]\275]]]\275]]]\275]]]\275]]]\275]]]\275]]!", "\201\202\204\204nullnullnull\201\202\204\204\201\202\204\204\201\202\204\204\201\202\204\204\201\202\204\204\201\202\204\204\201\202\204\204\201\202\204\204\201\202\204\204\201\202\204\204\201\202\204\204\201\202\204\204\201\202\204\204\201\202\204\204\201\202\204\204\201\202\204\204\201\202\204\204nullnullnull\201\202\204\204\201\202\204\204\201\202\204\204\201\202\204\204\201\202\204\204\201\202\204\204\201\202\204\204\201\202\204\204!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "]\275]]]\275]]]\275]]]\275]]]\275]]]\275]]]\275]]]\275]]]\275]]]\275]]]\275]]]\275]]]\275]]]\275]]]\275]]]\275]]]\275]]]\275]]]\275]]]\275]]]\275]]]\275]]]\275]]]\275]]]\275]]]\275]]]\275]]]\275]]]\275]]]\275]]]\275]]]\275]]!" + "'", str2, "]\275]]]\275]]]\275]]]\275]]]\275]]]\275]]]\275]]]\275]]]\275]]]\275]]]\275]]]\275]]]\275]]]\275]]]\275]]]\275]]]\275]]]\275]]]\275]]]\275]]]\275]]]\275]]]\275]]]\275]]]\275]]]\275]]]\275]]]\275]]]\275]]]\275]]]\275]]]\275]]!");
    }

    @Test
    public void test10340() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10340");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.encode("\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0102nullnull!!!", "!!N!!!N!!!!!N!!!N!!!!!N!!!N!!!!!N!!!N!!!!!N!!!N!!!!!N!!!N!!!!!N!!!N!!!!!N!!!N!!!!!N!!!N!!!!!N!!!N!!!!!N!!!N!!!!!N!!!N!!!!!N!!!N!!!!!N!!!N!!!!!N!!!N!!!!!N!!!N!!!!!N!!!N!!!!!N!!!N!!!!!N!!!N!!!!!N!!!N!!!!!N!!!N!!!!!N!!!N!!!!!N!!!N!!!!!N!!!N!!!!!N!!!N!!!!!N!!!N!!!!!N!!!N!!!!!N!!!N!!!!!N!!!N!!!!!N!!!N!!!!!N!!!N!!!!!N!!!N!!!!");
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "!N!!!N!!!N!!!!!N!!!N!!!N!!!N!!!N!!!!!N!!!N!!!!!N!!!N!!!N!!!!!N!!!N!!!N!!!N!!!N!!!!!N!!!N!!!!!N!!!N!!!N!!!!!N!!!N!!!N!!!N!!!N!!!!!N!!!N!!!!!N!!!N!!!N!!!!!N!!!N!!!N!!!N!!!N!!!!!N!!!N!!!!!N!!!N!!!N!!!!!N!!!N!!!N!!!N!!!N!!!!!N!!!N!!!!!N!!!N!!!N!!!!!N!!!N!!!N!!!N!!!N!!!!!N!!!N!!!!!N!!!N!!!N!!!!!N!!!N!!!N!!!N!!!N!!!!!N!!!N!!!!!N!!!N!!!N!!!!!N!!!N!!!N!!!N!!!N!!!!!N!!!N!!!!!" + "'", str2, "!N!!!N!!!N!!!!!N!!!N!!!N!!!N!!!N!!!!!N!!!N!!!!!N!!!N!!!N!!!!!N!!!N!!!N!!!N!!!N!!!!!N!!!N!!!!!N!!!N!!!N!!!!!N!!!N!!!N!!!N!!!N!!!!!N!!!N!!!!!N!!!N!!!N!!!!!N!!!N!!!N!!!N!!!N!!!!!N!!!N!!!!!N!!!N!!!N!!!!!N!!!N!!!N!!!N!!!N!!!!!N!!!N!!!!!N!!!N!!!N!!!!!N!!!N!!!N!!!N!!!N!!!!!N!!!N!!!!!N!!!N!!!N!!!!!N!!!N!!!N!!!N!!!N!!!!!N!!!N!!!!!N!!!N!!!N!!!!!N!!!N!!!N!!!N!!!N!!!!!N!!!N!!!!!");
    }

    @Test
    public void test10341() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10341");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.decode("\u0366\u0365\u0368\u0368\u0366\u0365\u0368\u0368\u0366\u0365\u0368\u0368\u0366\u0365\u0368\u0368\u0366\u0365\u0368\u0368\u0366\u0365\u0368\u0368!", "]]uluuuluu]]uluuuluu!!]]uluuuluu]]uluuuluu!!]]uluuuluu]]uluuuluu]]uluuuluu]]uluuuluu!!]]uluuuluu]]uluuuluu!!]]uluuuluu]]uluuuluu!");
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\276nullnullnull\276nullnullnull!!\276nullnullnull\276nullnullnull!!\276nullnullnull\276nullnullnull!!\276nullnullnull\276\u0366\u0365\u0368\u0368\u0366\u0365\u0368\u0368\u0366\u0365\u0368\u0368\u0366\u0365\u0368\u0368\276nullnullnull\276nullnullnull!!\276nullnullnull\276nullnullnull!!\276nullnullnull\276nullnullnull!!\276nullnullnull\276\u0366\u0365\u0368\u0368\u0366\u0365\u0368\u0368!" + "'", str2, "\276nullnullnull\276nullnullnull!!\276nullnullnull\276nullnullnull!!\276nullnullnull\276nullnullnull!!\276nullnullnull\276\u0366\u0365\u0368\u0368\u0366\u0365\u0368\u0368\u0366\u0365\u0368\u0368\u0366\u0365\u0368\u0368\276nullnullnull\276nullnullnull!!\276nullnullnull\276nullnullnull!!\276nullnullnull\276nullnullnull!!\276nullnullnull\276\u0366\u0365\u0368\u0368\u0366\u0365\u0368\u0368!");
    }

    @Test
    public void test10342() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10342");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.encode("\223]\223\223\223]\223\223!!\223]\223\223\223]\223\223!!\223]\223\223\223]\223\223\223]\223\223\223]\223\223!!\223]\223\223\223]\223\223!!\223]\223\223\223]\223\223!", "LL!!LL!!LL!!LL!!LL!!LL!!LL!!LL!!LL!!LL!!LL!!LL!!LL!!LL!!LL!!LL!!LL!!LL!!LL!!LL!!LL!!LL!!LL!!LL!!LL!!LL!!LL!!LL!!LL!!LL!!LL!!LL!!!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\223]\223\223\223]\223\223!!\223]\223\223\223]\223\223!!\223]\223\223\223]\223\223\223]\223\223\223]\223\223!!\223]\223\223\223]\223\223!!\223]\223\223\223]\223\223!" + "'", str2, "\223]\223\223\223]\223\223!!\223]\223\223\223]\223\223!!\223]\223\223\223]\223\223\223]\223\223\223]\223\223!!\223]\223\223\223]\223\223!!\223]\223\223\223]\223\223!");
    }

    @Test
    public void test10343() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10343");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.decode("\u0366\u0365\u0368\u0368\u0346\u0348\u
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\u0366\u0365\u0368\u0368\u037e\u037d\u0380\u0380\u037e\u037d\u0380\u0380\u037e\u037d\u0380\u0380\u037e\u037d\u0380\u0380\u0346\u0348\u0348!" + "'", str2, "\u0366\u0365\u0368\u0368\u037e\u037d\u0380\u0380\u037e\u037d\u0380\u0380\u037e\u037d\u0380\u0380\u037e\u037d\u0380\u0380\u0346\u0348\u0348!");
    }

    @Test
    public void test10344() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10344");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.encode("\201\220\204\204\200~~\201\220\204\204\200~~\201\220\204\204\201\220\204\204\201\220\204\204\200~~\201\220\204\204\200~~\201\220\204\204\201\220\204\204!!\201\220\204\204\200~~\201\220\204\204\200~~\201\220\204\204\201\220\204\204\201\220\204\204\200~~\201\220\204\204\200~~\201\220\204\204\201\220\204\204!!\201\220\204\204\200~~\201\220\204\204\200~~\201\220\204\204\201\220\204\204\201\220\204\204\200~~\201\220\204\204\200~~\201\220\204\204\201\220\204\204\201\220\204\204\200~~\201\220\204\204\200~~\201\220\204\204\201\220\204\204\201\220\204\204\200~~\201\220\204\204\200~~\201\220\204\204\201\220\204\204!!\201\220\204\204\200~~\201\220\204\204\200~~\201\220\204\204\201\220\204\204\201\220\204\204\200~~\201\220\204\204\200~~\201\220\204\204\201\220\204\204!!\201\220\204\204\200~~\201\220\204\204\200~~\201\220\204\204\201\220\204\204\201\220\204\204\200~~\201\220\204\204\200~~\201\220\204\204\201\220\204\204!", "xxxx```xxxx```xxxx```xxxx```xxxx```xxxx```xxxx```xxxx```xxxx```xxxx```xxxx```xxxx```xxxx```xxxx```xxxx```xxxx```xxxx```xxxx```xxxx```xxxx```xxxx```xxxx```xxxx```xxxx```xxxx```xxxx```xxxx```xxxx```xxxx```xxxx```xxxx```xxxx```!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\201\220\204\204\200~~\201\220\204\204\200~~\201\220\204\204\201\220\204\204\201\220\204\204\200~~\201\220\204\204\200~~\201\220\204\204\201\220\204\204!!\201\220\204\204\200~~\201\220\204\204\200~~\201\220\204\204\201\220\204\204\201\220\204\204\200~~\201\220\204\204\200~~\201\220\204\204\201\220\204\204!!\201\220\204\204\200~~\201\220\204\204\200~~\201\220\204\204\201\220\204\204\201\220\204\204\200~~\201\220\204\204\200~~\201\220\204\204\201\220\204\204\201\220\204\204\200~~\201\220\204\204\200~~\201\220\204\204\201\220\204\204\201\220\204\204\200~~\201\220\204\204\200~~\201\220\204\204\201\220\204\204!!\201\220\204\204\200~~\201\220\204\204\200~~\201\220\204\204\201\220\204\204\201\220\204\204\200~~\201\220\204\204\200~~\201\220\204\204\201\220\204\204!!\201\220\204\204\200~~\201\220\204\204\200~~\201\220\204\204\201\220\204\204\201\220\204\204\200~~\201\220\204\204\200~~\201\220\204\204\201\220\204\204!" + "'", str2, "\201\220\204\204\200~~\201\220\204\204\200~~\201\220\204\204\201\220\204\204\201\220\204\204\200~~\201\220\204\204\200~~\201\220\204\204\201\220\204\204!!\201\220\204\204\200~~\201\220\204\204\200~~\201\220\204\204\201\220\204\204\201\220\204\204\200~~\201\220\204\204\200~~\201\220\204\204\201\220\204\204!!\201\220\204\204\200~~\201\220\204\204\200~~\201\220\204\204\201\220\204\204\201\220\204\204\200~~\201\220\204\204\200~~\201\220\204\204\201\220\204\204\201\220\204\204\200~~\201\220\204\204\200~~\201\220\204\204\201\220\204\204\201\220\204\204\200~~\201\220\204\204\200~~\201\220\204\204\201\220\204\204!!\201\220\204\204\200~~\201\220\204\204\200~~\201\220\204\204\201\220\204\204\201\220\204\204\200~~\201\220\204\204\200~~\201\220\204\204\201\220\204\204!!\201\220\204\204\200~~\201\220\204\204\200~~\201\220\204\204\201\220\204\204\201\220\204\204\200~~\201\220\204\204\200~~\201\220\204\204\201\220\204\204!");
    }

    @Test
    public void test10345() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10345");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.encode("]`^^]`^^!", "\u02ce\u02ce\u02ce\u02ce\u02ce\u02ce\u02ce\u02ce\u02ce\u02ce\u02ce\u02ce\u02ce\u02ce\u02ce\u02ce!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "]`^^]`^^!" + "'", str2, "]`^^]`^^!");
    }

    @Test
    public void test10346() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10346");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.decode("\u0366\u0365\u0368\u0368!!\216\216\u0346\u0348\u0348!", "n]nnn]nn!!n]nnn]nn!!n]nnn]nnn]nnn]nn!!n]nnn]nn!!n]nnn]nn!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\u0366\u0365\u0368\u0368!!\216\216\u0346\u0348\u0348!" + "'", str2, "\u0366\u0365\u0368\u0368!!\216\216\u0346\u0348\u0348!");
    }

    @Test
    public void test10347() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10347");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.decode("~}\200\200~}\200\200````````````````````~}\200\200~}\200\200````````````````````~}\200\200~}\200\200````````````````````~}\200\200~}\200\200````````````````````~}\200\200~}\200\200````````````````````~}\200\200~}\200\200````````````````````~}\200\200~}\200\200````````````````````~}\200\200~}\200\200````````````````````!", "!!!!\316null\313\313\316null\313\313!!\316null\313\313\316null\313\313!!!!\316null\313\313\316null\313\313!!\316null\313\313\316null\313\313!!!!\316null\313\313\316null\313\313!!\316null\313\313\316null\313\313!!!!\316null\313\313\316null\313\313!!\316null\313\313\316null\313\313!!!!\316null\313\313\316null\313\313!!\316null\313\313\316null\313\313!!!!\316null\313\313\316null\313\313!!\316null\313\313\316null\313\313!!!!\316null\313\313\316null\313\313!!\316null\313\313\316null\313\313!!!!\316null\313\313\316null\313\313!!\316null\313\313\316null\313\313!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "~}\200\200~}\200\200````````````````````~}\200\200~}\200\200````````````````````~}\200\200~}\200\200````````````````````~}\200\200~}\200\200````````````````````~}\200\200~}\200\200````````````````````~}\200\200~}\200\200````````````````````~}\200\200~}\200\200````````````````````~}\200\200~}\200\200````````````````````!" + "'", str2, "~}\200\200~}\200\200````````````````````~}\200\200~}\200\200````````````````````~}\200\200~}\200\200````````````````````~}\200\200~}\200\200````````````````````~}\200\200~}\200\200````````````````````~}\200\200~}\200\200````````````````````~}\200\200~}\200\200````````````````````~}\200\200~}\200\200````````````````````!");
    }

    @Test
    public void test10348() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10348");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.encode("vvuuvvuuvvuuvvuuvvuuvvuuvvuuvvuuvvuuvvuuvvuuvvuuvvuuvvuuvvuuvvuu\200}}`vvuuvvuuvvuuvvuuvvuuvvuuvvuuvvuuvvuuvvuuvvuuvvuuvvuuvvuuvvuuvvuu]]!", "\u014e\u0150\u0150\u014e\u0150\u0150\u014e\u0150\u0150\u014e\u0150\u0150\u014e\u0150\u0150\u014e\u0150\u0150]]!");
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\u0151\u0151\u0151\u0151\u0151\u0151\u0151\u0151\u0151\u0151\u0151\u0151\u0151\u0151\u0151\u0151\u0151\u0151\u0151\u0151\u0151\u0151\u0151\u0151\u0151\u0151\u0151\u0151\u0151\u0151\u0151\u0151\u0151\u0151\u0151\u0151\u0151\u0151\u0151\u0151\u0151\u0151\u0151\u0151\u0151\u0151\u0151\u0151\u0151\u0151\u0151\u0151\u0151\u0151\u0151\u0151\u0151\u0151\u0151\u0151\u0151\u0151\u0151\u0151\200\u0151\u0151\u0151\u0151\u0151\u0151\u0151\u0151\u0151\u0151\u0151\u0151\u0151\u0151\u0151\u0151\u0151\u0151\u0151\u0151\u0151\u0151\u0151\u0151\u0151\u0151\u0151\u0151\u0151\u0151\u0151\u0151\u0151\u0151\u0151\u0151\u0151\u0151\u0151\u0151\u0151\u0151\u0151\u0151\u0151\u0151\u0151\u0151\u0151\u0151\u0151\u0151\u0151\u0151\u0151\u0151\u0151\u0151\u0151\u0151\u0151\u0151\u0151\u0151]]!" + "'", str2, "\u0151\u0151\u0151\u0151\u0151\u0151\u0151\u0151\u0151\u0151\u0151\u0151\u0151\u0151\u0151\u0151\u0151\u0151\u0151\u0151\u0151\u0151\u0151\u0151\u0151\u0151\u0151\u0151\u0151\u0151\u0151\u0151\u0151\u0151\u0151\u0151\u0151\u0151\u0151\u0151\u0151\u0151\u0151\u0151\u0151\u0151\u0151\u0151\u0151\u0151\u0151\u0151\u0151\u0151\u0151\u0151\u0151\u0151\u0151\u0151\u0151\u0151\u0151\u0151\200\u0151\u0151\u0151\u0151\u0151\u0151\u0151\u0151\u0151\u0151\u0151\u0151\u0151\u0151\u0151\u0151\u0151\u0151\u0151\u0151\u0151\u0151\u0151\u0151\u0151\u0151\u0151\u0151\u0151\u0151\u0151\u0151\u0151\u0151\u0151\u0151\u0151\u0151\u0151\u0151\u0151\u0151\u0151\u0151\u0151\u0151\u0151\u0151\u0151\u0151\u0151\u0151\u0151\u0151\u0151\u0151\u0151\u0151\u0151\u0151\u0151\u0151\u0151\u0151]]!");
    }

    @Test
    public void test10349() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10349");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.decode("\u02ee\u02eb\u02ec\u02ecnullnullnull\200\u02ee\u02eb\u02ec\u02ecnullnullnull]]!", "~}\200\200~}\200\200L!NNL!NNNLLLNLLLL!NNL!NNNLLLNLLL~}\200\200~}\200\200L!NNL!NNNLLLNLLLL!NNL!NNNLLLNLLL~}\200\200~}\200\200L!NNL!NNNLLLNLLLL!NNL!NNNLLLNLLL~}\200\200~}\200\200L!NNL!NNNLLLNLLLL!NNL!NNNLLLNLLL~}\200\200~}\200\200L!NNL!NNNLLLNLLLL!NNL!NNNLLLNLLL~}\200\200~}\200\200L!NNL!NNNLLLNLLLL!NNL!NNNLLLNLLL~}\200\200~}\200\200L!NNL!NNNLLLNLLLL!NNL!NNNLLLNLLL~}\200\200~}\200\200L!NNL!NNNLLLNLLLL!NNL!NNNLLLNLLL!");
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\u02eb\u019d\u01a0\u01a0\u019d\u01a0\u01a0\u019d\u01a0\u01a0\200\u02eb\u019d\u01a0\u01a0\u019d\u01a0\u01a0\u019d\u01a0\u01a0]]!" + "'", str2, "\u02eb\u019d\u01a0\u01a0\u019d\u01a0\u01a0\u019d\u01a0\u01a0\200\u02eb\u019d\u01a0\u01a0\u019d\u01a0\u01a0\u019d\u01a0\u01a0]]!");
    }

    @Test
    public void test10350() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10350");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.decode("}~\200\200}~\200\200\u02f9\u02fb\u02f9\u02fb\u02f9\u02fb\u02f9\u02fb\u02f9\u02fb\u02f9\u02fb\u02f9\u02fb\u02f9\u02fb\u02f9\u02fb\u02f9\u02fb\u02f9\u02fb\u02f9\u02fb\u02f9\u02fb\u02f9\u02fb\u02f9\u02fb\u02f9\u02fb\u02f9\u02fb\u02f9\u02fb\u02f9\u02fb\u02f9\u02fb\u02f9\u02fb\u02f9\u02fb\u02f9\u02fb\u02f9\u02fb\u02f9\u02fb\u02f9\u02fb\u02f9\u02fb\u02f9\u02fb\u02f9\u02fb\u02f9\u02fb\u02f9\u02fb\u02f9\u02fb!!}~\200\200}~\200\200\u02f9\u02fb\u02f9\u02fb\u02f9\u02fb\u02f9\u02fb\u02f9\u02fb\u02f9\u02fb\u02f9\u02fb\u02f9\u02fb\u02f9\u02fb\u02f9\u02fb\u02f9\u02fb\u02f9\u02fb\u02f9\u02fb\u02f9\u02fb\u02f9\u02fb\u02f9\u02fb\u02f9\u02fb\u02f9\u02fb\u02f9\u02fb\u02f9\u02fb\u02f9\u02fb\u02f9\u02fb\u02f9\u02fb\u02f9\u02fb\u02f9\u02fb\u02f9\u02fb\u02f9\u02fb\u02f9\u02fb\u02f9\u02fb\u02f9\u02fb\u02f9\u02fb\u02f9\u02fb!!!", "\336\335\340\340\336\335\340\340nullnull\336\335\340\340\336\335\340\340nullnull\336\335\340\340\336\335\340\340nullnull\336\335\340\340\336\335\340\340nullnull\336\335\340\340\336\335\340\340nullnull\336\335\340\340\336\335\340\340nullnull\336\335\340\340\336\335\340\340nullnull\336\335\340\340\336\335\340\340nullnull!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "}~\200\200}~\200\200\u02f9\u02fb\u02f9\u02fb\u02f9\u02fb\u02f9\u02fb\u02f9\u02fb\u02f9\u02fb\u02f9\u02fb\u02f9\u02fb\u02f9\u02fb\u02f9\u02fb\u02f9\u02fb\u02f9\u02fb\u02f9\u02fb\u02f9\u02fb\u02f9\u02fb\u02f9\u02fb\u02f9\u02fb\u02f9\u02fb\u02f9\u02fb\u02f9\u02fb\u02f9\u02fb\u02f9\u02fb\u02f9\u02fb\u02f9\u02fb\u02f9\u02fb\u02f9\u02fb\u02f9\u02fb\u02f9\u02fb\u02f9\u02fb\u02f9\u02fb\u02f9\u02fb\u02f9\u02fb!!}~\200\200}~\200\200\u02f9\u02fb\u02f9\u02fb\u02f9\u02fb\u02f9\u02fb\u02f9\u02fb\u02f9\u02fb\u02f9\u02fb\u02f9\u02fb\u02f9\u02fb\u02f9\u02fb\u02f9\u02fb\u02f9\u02fb\u02f9\u02fb\u02f9\u02fb\u02f9\u02fb\u02f9\u02fb\u02f9\u02fb\u02f9\u02fb\u02f9\u02fb\u02f9\u02fb\u02f9\u02fb\u02f9\u02fb\u02f9\u02fb\u02f9\u02fb\u02f9\u02fb\u02f9\u02fb\u02f9\u02fb\u02f9\u02fb\u02f9\u02fb\u02f9\u02fb\u02f9\u02fb\u02f9\u02fb!!!" + "'", str2, "}~\200\200}~\200\200\u02f9\u02fb\u02f9\u02fb\u02f9\u02fb\u02f9\u02fb\u02f9\u02fb\u02f9\u02fb\u02f9\u02fb\u02f9\u02fb\u02f9\u02fb\u02f9\u02fb\u02f9\u02fb\u02f9\u02fb\u02f9\u02fb\u02f9\u02fb\u02f9\u02fb\u02f9\u02fb\u02f9\u02fb\u02f9\u02fb\u02f9\u02fb\u02f9\u02fb\u02f9\u02fb\u02f9\u02fb\u02f9\u02fb\u02f9\u02fb\u02f9\u02fb\u02f9\u02fb\u02f9\u02fb\u02f9\u02fb\u02f9\u02fb\u02f9\u02fb\u02f9\u02fb\u02f9\u02fb!!}~\200\200}~\200\200\u02f9\u02fb\u02f9\u02fb\u02f9\u02fb\u02f9\u02fb\u02f9\u02fb\u02f9\u02fb\u02f9\u02fb\u02f9\u02fb\u02f9\u02fb\u02f9\u02fb\u02f9\u02fb\u02f9\u02fb\u02f9\u02fb\u02f9\u02fb\u02f9\u02fb\u02f9\u02fb\u02f9\u02fb\u02f9\u02fb\u02f9\u02fb\u02f9\u02fb\u02f9\u02fb\u02f9\u02fb\u02f9\u02fb\u02f9\u02fb\u02f9\u02fb\u02f9\u02fb\u02f9\u02fb\u02f9\u02fb\u02f9\u02fb\u02f9\u02fb\u02f9\u02fb\u02f9\u02fb!!!");
    }

    @Test
    public void test10351() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10351");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.encode("!!ll\340\340ll\340\340!!ll\340\340ll\340\340!!ll\340\340ll\340\340!!ll\340\340ll\340\340!!ll\340\340ll\340\340!!ll\340\340ll\340\340!!ll\340\340ll\340\340!!ll\340\340ll\340\340!", "ss!!ss!!!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "!!nullnullnullnullnullnullnullnull!!nullnullnullnullnullnullnullnull!!nullnullnullnullnullnullnullnull!!nullnullnullnullnullnullnullnull!!nullnullnullnullnullnullnullnull!!nullnullnullnullnullnullnullnull!!nullnullnullnullnullnullnullnull!!nullnullnullnullnullnullnullnull!" + "'", str2, "!!nullnullnullnullnullnullnullnull!!nullnullnullnullnullnullnullnull!!nullnullnullnullnullnullnullnull!!nullnullnullnullnullnullnullnull!!nullnullnullnullnullnullnullnull!!nullnullnullnullnullnullnullnull!!nullnullnullnullnullnullnullnull!!nullnullnullnullnullnullnullnull!");
    }

    @Test
    public void test10352() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10352");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.decode("\u0346\u0348\u0348\u0348\u0348\u0346\u0346!", "!!!\276\276!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\u0346\u0348\u0348\u0348\u0348\u0346\u0346!" + "'", str2, "\u0346\u0348\u0348\u0348\u0348\u0346\u0346!");
    }

    @Test
    public void test10353() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10353");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.encode("nullnull!!nullnull!!!!``nullnull!!nullnull!!``nullnull!!nullnull!!``nullnull!!nullnull!!nullnull!!nullnull!!!!nullnull!!nullnull!!!!nullnull!!nullnull!!!!nullnull!!nullnull!!!!nullnull!!nullnull!!!!nullnull!!nullnull!!!!nullnull!!nullnull!!!!nullnull!!nullnull!!!!nullnull!!nullnull!!!!nullnull!!nullnull!!!!nullnull!!nullnull!!!!nullnull!!nullnull!!!!nullnull!!nullnull!!!!nullnull!!nullnull!!!!nullnull!!nullnull!!!!nullnull!!nullnull!!!!nullnull!!nullnull!!!!``nullnull!!nullnull!!``nullnull!!nullnull!!``nullnull!!nullnull!!nullnull!!nullnull!!!!nullnull!!nullnull!!!!nullnull!!nullnull!!!!nullnull!!nullnull!!!!nullnull!!nullnull!!!!nullnull!!nullnull!!!!nullnull!!nullnull!!!!nullnull!!nullnull!!!!!", "null!\275\275null!\275\275nullnullnull!\275\275null!\275\275nullnullnull!\275\275null!\275\275nullnullnull!\275\275null!\275\275nullnullnull!\275\275null!\275\275nullnullnull!\275\275null!\275\275nullnullnull!\275\275null!\275\275nullnullnull!\275\275null!\275\275nullnull!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "UULLUULL!!UULLUULL!!!!``UULLUULL!!UULLUULL!!``UULLUULL!!UULLUULL!!``UULLUULL!!UULLUULL!!UULLUULL!!UULLUULL!!!!UULLUULL!!UULLUULL!!!!UULLUULL!!UULLUULL!!!!UULLUULL!!UULLUULL!!!!UULLUULL!!UULLUULL!!!!UULLUULL!!UULLUULL!!!!UULLUULL!!UULLUULL!!!!UULLUULL!!UULLUULL!!!!UULLUULL!!UULLUULL!!!!UULLUULL!!UULLUULL!!!!UULLUULL!!UULLUULL!!!!UULLUULL!!UULLUULL!!!!UULLUULL!!UULLUULL!!!!UULLUULL!!UULLUULL!!!!UULLUULL!!UULLUULL!!!!UULLUULL!!UULLUULL!!!!UULLUULL!!UULLUULL!!!!``UULLUULL!!UULLUULL!!``UULLUULL!!UULLUULL!!``UULLUULL!!UULLUULL!!UULLUULL!!UULLUULL!!!!UULLUULL!!UULLUULL!!!!UULLUULL!!UULLUULL!!!!UULLUULL!!UULLUULL!!!!UULLUULL!!UULLUULL!!!!UULLUULL!!UULLUULL!!!!UULLUULL!!UULLUULL!!!!UULLUULL!!UULLUULL!!!!!" + "'", str2, "UULLUULL!!UULLUULL!!!!``UULLUULL!!UULLUULL!!``UULLUULL!!UULLUULL!!``UULLUULL!!UULLUULL!!UULLUULL!!UULLUULL!!!!UULLUULL!!UULLUULL!!!!UULLUULL!!UULLUULL!!!!UULLUULL!!UULLUULL!!!!UULLUULL!!UULLUULL!!!!UULLUULL!!UULLUULL!!!!UULLUULL!!UULLUULL!!!!UULLUULL!!UULLUULL!!!!UULLUULL!!UULLUULL!!!!UULLUULL!!UULLUULL!!!!UULLUULL!!UULLUULL!!!!UULLUULL!!UULLUULL!!!!UULLUULL!!UULLUULL!!!!UULLUULL!!UULLUULL!!!!UULLUULL!!UULLUULL!!!!UULLUULL!!UULLUULL!!!!UULLUULL!!UULLUULL!!!!``UULLUULL!!UULLUULL!!``UULLUULL!!UULLUULL!!``UULLUULL!!UULLUULL!!UULLUULL!!UULLUULL!!!!UULLUULL!!UULLUULL!!!!UULLUULL!!UULLUULL!!!!UULLUULL!!UULLUULL!!!!UULLUULL!!UULLUULL!!!!UULLUULL!!UULLUULL!!!!UULLUULL!!UULLUULL!!!!UULLUULL!!UULLUULL!!!!!");
    }

    @Test
    public void test10354() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10354");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.encode("\300\300\335\335\300\300\335\335\214\214\300\300\335\335\300\300\335\335\214\214\300\300\335\335\300\300\335\335\214\214\300\300\335\335\300\300\335\335\214\214\300\300\335\335\300\300\335\335\214\214\300\300\335\335\300\300\335\335\214\214\300\300\335\335\300\300\335\335\214\214\300\300\335\335\300\300\335\335\214\214!", "F!HHF!HHF!HHF!HHF!HHF!HHF!HHF!HH!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "nullnullnullnullnullnullnullnull\214\214nullnullnullnullnullnullnullnull\214\214nullnullnullnullnullnullnullnull\214\214nullnullnullnullnullnullnullnull\214\214nullnullnullnullnullnullnullnull\214\214nullnullnullnullnullnullnullnull\214\214nullnullnullnullnullnullnullnull\214\214nullnullnullnullnullnullnullnull\214\214!" + "'", str2, "nullnullnullnullnullnullnullnull\214\214nullnullnullnullnullnullnullnull\214\214nullnullnullnullnullnullnullnull\214\214nullnullnullnullnullnullnullnull\214\214nullnullnullnullnullnullnullnull\214\214nullnullnullnullnullnullnullnull\214\214nullnullnullnullnullnullnullnull\214\214nullnullnullnullnullnullnullnull\214\214!");
    }

    @Test
    public void test10355() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10355");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.encode("\u0345\u0348\u0348\u0345\u0348\u0348\u0345\u0348\u0348\u0345\u0348\u0348\u0345\u0348\u0348\u0345\u0348\u0348\u0345\u0348\u0348\u0345\u0348\u0348\u0345\u0348\u0348\u0345\u0348\u0348\u0345\u0348\u0348\u0345\u0348\u0348!", "!!!!!!!!!!!!!!!!!!!!!");
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348!" + "'", str2, "\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348!");
    }

    @Test
    public void test10356() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10356");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.decode("U\220LL\200}}`U\220LL]]!", "\u0151\u0151\u0151\u0151\u0151\u0151\u0151\u0151\u0151\u0151\u0151\u0151\u0151\u0151\u0151\u0151\u0151\u0151\u0151\u0151\u0151\u0151\u0151\u0151\u0151\u0151\u0151\u0151\u0151\u0151\u0151\u0151\u0151\u0151\u0151\u0151\u0151\u0151\u0151\u0151\u0151\u0151\u0151\u0151\u0151\u0151\u0151\u0151\u0151\u0151\u0151\u0151\u0151\u0151\u0151\u0151\u0151\u0151\u0151\u0151\u0151\u0151\u0151\u0151\200\u0151\u0151\u0151\u0151\u0151\u0151\u0151\u0151\u0151\u0151\u0151\u0151\u0151\u0151\u0151\u0151\u0151\u0151\u0151\u0151\u0151\u0151\u0151\u0151\u0151\u0151\u0151\u0151\u0151\u0151\u0151\u0151\u0151\u0151\u0151\u0151\u0151\u0151\u0151\u0151\u0151\u0151\u0151\u0151\u0151\u0151\u0151\u0151\u0151\u0151\u0151\u0151\u0151\u0151\u0151\u0151\u0151\u0151\u0151\u0151\u0151\u0151\u0151\u0151]]!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "null\220nullnull\200}}`null\220nullnull]]!" + "'", str2, "null\220nullnull\200}}`null\220nullnull]]!");
    }

    @Test
    public void test10357() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10357");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.encode("", "\u0180\u0180\u0180\u0180\u0180\u0180\u0180\u0180\u0180\u0180\u0180\u0180\u0180\u0180\u0180\u0180\u0180\u0180\u0180\u0180\u0180\u0180\u0180\u0180\u0180\u0180\u0180\u0180\u0180\u0180\u0180\u0180\u0180\u0180\u0180\u0180\u0180\u0180\u0180\u0180\u0180\u0180\u0180\u0180\u0180\u0180\u0180\u0180\u0180\u0180\u0180\u0180\u0180\u0180\u0180\u0180\u0180\u0180\u0180\u0180\u0180\u0180\u0180\u0180\u0180\u0180\u0180\u0180\u0180\u0180\u0180\u0180!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
    }

    @Test
    public void test10358() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10358");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.encode("\u0346\u0368\u0368\u0346\u0368\u0368\u0346\u0368\u0368\u0346\u0368\u0368\u0346\u0368\u0368\u0346\u0368\u0368\u0346\u0368\u0368\u0346\u0368\u0368\u0346\u0368\u0368\u0346\u0368\u0368\u0346\u0368\u0368\u0346\u0368\u0368\u0346\u0368\u0368\u0346\u0368\u0368\u0346\u0368\u0368\u0346\u0368\u0368\u0346\u0368\u0368\u0346\u0368\u0368\u0346\u0368\u0368\u0346\u0368\u0368\u0346\u0368\u0368\u0346\u0368\u0368\u0346\u0368\u0368\u0346\u0368\u0368!", "\215\215!!\215\215!!\215\215!!\215\215!!\215\215!!\215\215!!\215\215!!\215\215!!!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\u0346\u0368\u0368\u0346\u0368\u0368\u0346\u0368\u0368\u0346\u0368\u0368\u0346\u0368\u0368\u0346\u0368\u0368\u0346\u0368\u0368\u0346\u0368\u0368\u0346\u0368\u0368\u0346\u0368\u0368\u0346\u0368\u0368\u0346\u0368\u0368\u0346\u0368\u0368\u0346\u0368\u0368\u0346\u0368\u0368\u0346\u0368\u0368\u0346\u0368\u0368\u0346\u0368\u0368\u0346\u0368\u0368\u0346\u0368\u0368\u0346\u0368\u0368\u0346\u0368\u0368\u0346\u0368\u0368\u0346\u0368\u0368!" + "'", str2, "\u0346\u0368\u0368\u0346\u0368\u0368\u0346\u0368\u0368\u0346\u0368\u0368\u0346\u0368\u0368\u0346\u0368\u0368\u0346\u0368\u0368\u0346\u0368\u0368\u0346\u0368\u0368\u0346\u0368\u0368\u0346\u0368\u0368\u0346\u0368\u0368\u0346\u0368\u0368\u0346\u0368\u0368\u0346\u0368\u0368\u0346\u0368\u0368\u0346\u0368\u0368\u0346\u0368\u0368\u0346\u0368\u0368\u0346\u0368\u0368\u0346\u0368\u0368\u0346\u0368\u0368\u0346\u0368\u0368\u0346\u0368\u0368!");
    }

    @Test
    public void test10359() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10359");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.decode("UNLLUNLLUNLLUNLL\236\276\276UNLLUNLLUNLLUNLL\236\276\276!!UNLLUNLLUNLLUNLL\236\276\276UNLLUNLLUNLLUNLL\236\276\276!!UNLLUNLLUNLLUNLL\236\276\276UNLLUNLLUNLLUNLL\236\276\276UNLLUNLLUNLLUNLL\236\276\276UNLLUNLLUNLLUNLL\236\276\276!!UNLLUNLLUNLLUNLL\236\276\276UNLLUNLLUNLLUNLL\236\276\276!!UNLLUNLLUNLLUNLL\236\276\276UNLLUNLLUNLLUNLL\236\276\276!", "}]]]}]]]}]]]}]]]}]]]}]]]}]]]}]]]!!}]]]}]]]}]]]}]]]}]]]}]]]}]]]}]]]!!}]]]}]]]}]]]}]]]}]]]}]]]}]]]}]]]!!}]]]}]]]}]]]}]]]}]]]}]]]}]]]}]]]!!}]]]}]]]}]]]}]]]}]]]}]]]}]]]}]]]!!}]]]}]]]}]]]}]]]}]]]}]]]}]]]}]]]!!}]]]}]]]}]]]}]]]}]]]}]]]}]]]}]]]!!}]]]}]]]}]]]}]]]}]]]}]]]}]]]}]]]!!!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "nullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull\236\276\276nullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull\236\276\276!!nullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull\236\276\276nullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull\236\276\276!!nullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull\236\276\276nullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull\236\276\276nullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull\236\276\276nullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull\236\276\276!!nullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull\236\276\276nullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull\236\276\276!!nullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull\236\276\276nullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull\236\276\276!" + "'", str2, "nullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull\236\276\276nullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull\236\276\276!!nullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull\236\276\276nullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull\236\276\276!!nullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull\236\276\276nullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull\236\276\276nullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull\236\276\276nullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull\236\276\276!!nullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull\236\276\276nullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull\236\276\276!!nullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull\236\276\276nullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull\236\276\276!");
    }

    @Test
    public void test10360() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10360");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.decode
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "null\276\276\276null\276\276\276\276\276null\276\276\276null\276\276\276\276\276null\276\276\276null\276\276\276\276\276null\276\276\276null\276\276\276\276\276null\276\276\276null\276\276\276\276\276null\276\276\276null\276\276\276\276\276null\276\276\276null\276\276\276\276\276null\276\276\276null\276\276\276\276\276!" + "'", str2, "null\276\276\276null\276\276\276\276\276null\276\276\276null\276\276\276\276\276null\276\276\276null\276\276\276\276\276null\276\276\276null\276\276\276\276\276null\276\276\276null\276\276\276\276\276null\276\276\276null\276\276\276\276\276null\276\276\276null\276\276\276\276\276null\276\276\276null\276\276\276\276\276!");
    }

    @Test
    public void test10361() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10361");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.decode("\256\256\256\256\256\256\256\256!!\256\256\256\256\256\256\256\256!!\256\256\256\256\256\256\256\256!!\256\256\256\256\256\256\256\256!!\256\256\256\256\256\256\256\256!!\256\256\256\256\256\256\256\256!!\256\256\256\256\256\256\256\256!!\256\256\256\256\256\256\256\256!!!", "");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\256\256\256\256\256\256\256\256!!\256\256\256\256\256\256\256\256!!\256\256\256\256\256\256\256\256!!\256\256\256\256\256\256\256\256!!\256\256\256\256\256\256\256\256!!\256\256\256\256\256\256\256\256!!\256\256\256\256\256\256\256\256!!\256\256\256\256\256\256\256\256!!!" + "'", str2, "\256\256\256\256\256\256\256\256!!\256\256\256\256\256\256\256\256!!\256\256\256\256\256\256\256\256!!\256\256\256\256\256\256\256\256!!\256\256\256\256\256\256\256\256!!\256\256\256\256\256\256\256\256!!\256\256\256\256\256\256\256\256!!\256\256\256\256\256\256\256\256!!!");
    }

    @Test
    public void test10362() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10362");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.encode("", "``!!``!!``!!``!!``!!``!!``!!``!!!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
    }

    @Test
    public void test10363() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10363");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.decode("UU!!UU!!UUUUUUUUUU!!UU!!UUUUUUUUUU!!UU!!UUUUUUUUUU!!UU!!UUUUUUUUUU!!UU!!UUUUUUUUUU!!UU!!UUUUUUUUUU!!UU!!UUUUUUUUUU!!UU!!UUUUUUUU!", "null\200}}null\200}}null\200}}null\200}}null\200}}null\200}}null\200}}null\200}}!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "ss!!ss!!ssssssssss!!ss!!ssssssssss!!ss!!ssssssssss!!ss!!ssssssssss!!ss!!ssssssssss!!ss!!ssssssssss!!ss!!ssssssssss!!ss!!ssssssss!" + "'", str2, "ss!!ss!!ssssssssss!!ss!!ssssssssss!!ss!!ssssssssss!!ss!!ssssssssss!!ss!!ssssssssss!!ss!!ssssssssss!!ss!!ssssssssss!!ss!!ssssssss!");
    }

    @Test
    public void test10364() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10364");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.decode("\u0366\u0365\u0368\u0368\214\214!!\214\214!!\214\214!!\214\214\u0346\u0348\u0348!", "!\220!!!\220!!^^\225\230\230!\220!!!\220!!^^\225\230\230!\220!!!\220!!^^\225\230\230!\220!!!\220!!^^\225\230\230\200}}`!\220!!!\220!!^^\225\230\230!\220!!!\220!!^^\225\230\230!\220!!!\220!!^^\225\230\230!\220!!!\220!!^^\225\230\230]]!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\u0366\u0365\u0368\u0368\214\214!!\214\214!!\214\214!!\214\214\u0346\u0348\u0348!" + "'", str2, "\u0366\u0365\u0368\u0368\214\214!!\214\214!!\214\214!!\214\214\u0346\u0348\u0348!");
    }

    @Test
    public void test10365() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10365");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.encode("\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348!!!", "\u02a0\u02a0\u02a0\u02a0\u02a0\u02a0\u02a0\u02a0\u02a0\u02a0\u02a0\u02a0\u02a0\u02a0\u02a0\u02a0\u02a0\u02a0\u02a0\u02a0\u02a0\u02a0\u02a0\u02a0\u02a0\u02a0\u02a0\u02a0\u02a0\u02a0\u02a0\u02a0\u02a0\u02a0\u02a0\u02a0\u02a0\u02a0\u02a0\u02a0\u02a0\u02a0\u02a0\u02a0\u02a0\u02a0\u02a0\u02a0\u02a0\u02a0\u02a0\u02a0\u02a0\u02a0\u02a0\u02a0\u02a0\u02a0\u02a0\u02a0\u02a0\u02a0\u02a0\u02a0\u02a0\u02a0\u02a0\u02a0\u02a0\u02a0\u02a0\u02a0\u02a0\u02a0\u02a0\u02a0\u02a0\u02a0\u02a0\u02a0]]!");
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\u0348\u02a0\u02a0\u0348\u0348\u0348\u02a0\u02a0\u0348\u0348\u0348\u02a0\u02a0\u0348\u0348\u0348\u02a0\u02a0\u0348\u0348\u0348\u02a0\u02a0\u0348\u0348\u0348\u02a0\u02a0\u0348\u0348\u0348\u02a0\u02a0\u0348\u0348\u0348\u02a0\u02a0\u0348\u0348\u0348\u02a0\u02a0\u0348\u0348\u0348\u02a0\u02a0\u0348\u0348\u0348\u02a0\u02a0\u0348\u0348\u0348\u02a0\u02a0\u0348\u0348\u0348\u02a0\u02a0\u0348\u0348\u0348\u02a0\u02a0\u0348\u0348\u0348\u02a0\u02a0\u0348\u0348\u0348\u02a0\u02a0\u0348\u0348!!!" + "'", str2, "\u0348\u02a0\u02a0\u0348\u0348\u0348\u02a0\u02a0\u0348\u0348\u0348\u02a0\u02a0\u0348\u0348\u0348\u02a0\u02a0\u0348\u0348\u0348\u02a0\u02a0\u0348\u0348\u0348\u02a0\u02a0\u0348\u0348\u0348\u02a0\u02a0\u0348\u0348\u0348\u02a0\u02a0\u0348\u0348\u0348\u02a0\u02a0\u0348\u0348\u0348\u02a0\u02a0\u0348\u0348\u0348\u02a0\u02a0\u0348\u0348\u0348\u02a0\u02a0\u0348\u0348\u0348\u02a0\u02a0\u0348\u0348\u0348\u02a0\u02a0\u0348\u0348\u0348\u02a0\u02a0\u0348\u0348\u0348\u02a0\u02a0\u0348\u0348!!!");
    }

    @Test
    public void test10366() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10366");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.encode("nullnullNUUUNUUUnullnullNUUUNUUUnullnullNUUUNUUUnullnullNUUUNUUUnullnullNUUUNUUUnullnullNUUUNUUUnullnullNUUUNUUUnullnullNUUUNUUU!!nullnullNUUUNUUUnullnullNUUUNUUUnullnullNUUUNUUUnullnullNUUUNUUUnullnullNUUUNUUUnullnullNUUUNUUUnullnullNUUUNUUUnullnullNUUUNUUU!!nullnullNUUUNUUUnullnullNUUUNUUUnullnullNUUUNUUUnullnullNUUUNUUUnullnullNUUUNUUUnullnullNUUUNUUUnullnullNUUUNUUUnullnullNUUUNUUUnullnullNUUUNUUUnullnullNUUUNUUUnullnullNUUUNUUUnullnullNUUUNUUUnullnullNUUUNUUUnullnullNUUUNUUUnullnullNUUUNUUUnullnullNUUUNUUU!!nullnullNUUUNUUUnullnullNUUUNUUUnullnullNUUUNUUUnullnullNUUUNUUUnullnullNUUUNUUUnullnullNUUUNUUUnullnullNUUUNUUUnullnullNUUUNUUU!!nullnullNUUUNUUUnullnullNUUUNUUUnullnullNUUUNUUUnullnullNUUUNUUUnullnullNUUUNUUUnullnullNUUUNUUUnullnullNUUUNUUUnullnullNUUUNUUU!", "!U!!!U!!nullnullnullnullnullnullnullnull!U!!!U!!nullnullnullnullnullnullnullnull!U!!!U!!nullnullnullnullnullnullnullnull!U!!!U!!nullnullnullnullnullnullnullnull!U!!!U!!nullnullnullnullnullnullnullnull!U!!!U!!nullnullnullnullnullnullnullnull!U!!!U!!nullnullnullnullnullnullnullnull!U!!!U!!nullnullnullnullnullnullnullnull!");
        org.junit.Assert.assertEquals("'" + strstr
    }

    @Test
    public void test10367() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10367");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.decode("N!!!N!!!N!!!N!!!N!!!N!!!N!!!N!!!!", "!!nullnullnullnullnullnullnullnull!!nullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull!!nullnullnullnullnullnullnullnull!!nullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull!!nullnullnullnullnullnullnullnull!!nullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull!!nullnullnullnullnullnullnullnull!!nullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull!!nullnullnullnullnullnullnullnull!!nullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull!!nullnullnullnullnullnullnullnull!!nullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull!!nullnullnullnullnullnullnullnull!!nullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull!!nullnullnullnullnullnullnullnull!!nullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull!");
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\u035d\u035d\u035d\u035d\u035d\u035d\u035d\u035d!!!!" + "'", str2, "\u035d\u035d\u035d\u035d\u035d\u035d\u035d\u035d!!!!");
    }

    @Test
    public void test10368() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10368");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.encode("\u0366\u0365\u0368\u0368\u0346\u0348\u0348!", "!!nullnull!!!nullnull!!nullnull!!nullnull!!!nullnull!!nullnull!!nullnull!!!nullnull!!nullnull!!nullnull!!!nullnull!!nullnull!!nullnull!!!nullnull!!nullnull!!nullnull!!!nullnull!!nullnull!!nullnull!!!nullnull!!nullnull!!nullnull!!!nullnull!!nullnull!!nullnull!!!nullnull!!nullnull!!nullnull!!!nullnull!!nullnull!!nullnull!!!nullnull!!nullnull!!nullnull!!!nullnull!!nullnull!!nullnull!!!nullnull!!nullnull!!nullnull!!!nullnull!!nullnull!!nullnull!!!nullnull!!nullnull!!nullnull!!!nullnull!!nullnull!!nullnull!!!nullnull!!nullnull!!nullnull!!!nullnull!!nullnull!!nullnull!!!nullnull!!nullnull!!nullnull!!!nullnull!!nullnull!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\u0366\u0365\u0368\u0368\u0346\u0348\u0348!" + "'", str2, "\u0366\u0365\u0368\u0368\u0346\u0348\u0348!");
    }

    @Test
    public void test10369() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10369");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.encode("\220\220nullnull\253\253\253\200}}`\220\220nullnull\253\253\253]]!", "n]nnn]nn!!n]nnn]nn!!n]nnn]nnn]nnn]nn!!n]nnn]nn!!n]nnn]nn!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\220\220NN]]NN]]\253\253\253\200}}`\220\220NN]]NN]]\253\253\253]]!" + "'", str2, "\220\220NN]]NN]]\253\253\253\200}}`\220\220NN]]NN]]\253\253\253]]!");
    }

    @Test
    public void test10370() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10370");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.encodeu0270\u0270\u0270\u0270\u0270\u0270\u0270\u0270\u0270\u0270\u0270\u0270\u0270\u0270\u0270\u0270!!\214\214\u0270\u0270\u0270\u0270\u0270\u0270\u0270\u0270\u0270\u0270\u0270\u0270\u0270\u0270\u0270\u0270!!\214\214\u0270\u0270\u0270\u0270\u0270\u0270\u0270\u0270\u0270\u0270\u0270\u0270\u0270\u0270\u0270\u0270!!\214\214\u0270\u0270\u0270\u0270\u0270\u0270\u0270\u0270\u0270\u0270\u0270\u0270\u0270\u0270\u0270\u0270!!\214\214\u0270\u0270\u0270\u0270\u0270\u0270\u0270\u0270\u0270\u0270\u0270\u0270\u0270\u0270\u0270\u0270!!\214\214\u0270\u0270\u0270\u0270\u0270\u0270\u0270\u0270\u0270\u0270\u0270\u0270\u0270\u0270\u0270\u0270!!\214\214\u0270\u0270\u0270\u0270\u0270\u0270\u0270\u0270\u0270\u0270\u0270\u0270\u0270\u0270\u0270\u0270!!\214\214\u0270\u0270\u0270\u0270\u0270\u0270\u0270\u0270\u0270\u0270\u0270\u0270\u0270\u0270\u0270\u0270!!\214\214!");
        org.junit.Assert.assertEquals("'" + strstr
    }

    @Test
    public void test10371() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10371");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.encode("}~\200\200}~\200\200\336^LL\336^LL}~\200\200}~\200\200\336^LL\336^LL!", "!tttnullnullnullnull!tttnullnull!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "}~\200\200}~\200\200null^LLnull^LL}~\200\200}~\200\200null^LLnull^LL!" + "'", str2, "}~\200\200}~\200\200null^LLnull^LL}~\200\200}~\200\200null^LLnull^LL!");
    }

    @Test
    public void test10372() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10372");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.decode("``JJ``JJ!!``JJ``JJ!!!", "\200null}}\200null}}\200null}}\200null}}\200null}}\200null}}\200null}}\200null}}\200null}}\200null}}\200null}}\200null}}\200null}}\200null}}\200null}}\200null}}``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "``nullnull``nullnull!!``nullnull``nullnull!!!" + "'", str2, "``nullnull``nullnull!!``nullnull``nullnull!!!");
    }

    @Test
    public void test10373() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10373");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.decode("\u0150\u
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "!!!nullnull!" + "'", str2, "!!!nullnull!");
    }

    @Test
    public void test10374() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10374");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.decode("LL!", "]!\253\253]!\253\253!!]!\253\253]!\253\253!!!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "nullnull!" + "'", str2, "nullnull!");
    }

    @Test
    public void test10375() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10375");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.encode("\u0120\u0120\u0120\u0120\u0120\u0120\u0120\u0120\u0120\u0120!", "}nullnullnullnullnullnullnullnullnullnullnullnull~}}^}nullnullnullnullnullnullnullnullnullnullnullnull]]!");
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "N^LLN^LLnullnullN^LLN^LLnullnullN^LLN^LLnullnullN^LLN^LLnullnullN^LLN^LLnullnull!" + "'", str2, "N^LLN^LLnullnullN^LLN^LLnullnullN^LLN^LLnullnullN^LLN^LLnullnullN^LLN^LLnullnull!");
    }

    @Test
    public void test10376() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10376");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.encode("", "\u0104\u0108\u0108\u0108\u0104\u0108\u0108\u0108\u0104\u0108\u0108\u0108\u0104\u0108\u0108\u0108\u0104\u0108\u0108\u0108\u0104\u0108\u0108\u0108\u0104\u0108\u0108\u0108\u0104\u0108\u0108\u0108!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
    }

    @Test
    public void test10377() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10377");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.encode("lluulluu!!lluulluu!!lluulluulluulluu!!lluulluu!!lluulluu!", "!nullnullLLUULLUUnullnullLLUULLUUnullnullLLUULLUUnullnullLLUULLUU!!!nullnullLLUULLUUnullnullLLUULLUUnullnullLLUULLUUnullnullLLUULLUU!!!!!nullnullLLUULLUUnullnullLLUULLUUnullnullLLUULLUUnullnullLLUULLUU!!!nullnullLLUULLUUnullnullLLUULLUUnullnullLLUULLUUnullnullLLUULLUU!!!!!nullnullLLUULLUUnullnullLLUULLUUnullnullLLUULLUUnullnullLLUULLUU!!!nullnullLLUULLUUnullnullLLUULLUUnullnullLLUULLUUnullnullLLUULLUU!!!nullnullLLUULLUUnullnullLLUULLUUnullnullLLUULLUUnullnullLLUULLUU!!!nullnullLLUULLUUnullnullLLUULLUUnullnullLLUULLUUnullnullLLUULLUU!!!!!nullnullLLUULLUUnullnullLLUULLUUnullnullLLUULLUUnullnullLLUULLUU!!!nullnullLLUULLUUnullnullLLUULLUUnullnullLLUULLUUnullnullLLUULLUU!!!!!nullnullLLUULLUUnullnullLLUULLUUnullnullLLUULLUUnullnullLLUULLUU!!!nullnullLLUULLUUnullnullLLUULLUUnullnullLLUULLUUnullnullLLUULLUU!!!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "UULLUULL!!UULLUULL!!UULLUULLUULLUULL!!UULLUULL!!UULLUULL!" + "'", str2, "UULLUULL!!UULLUULL!!UULLUULLUULLUULL!!UULLUULL!!UULLUULL!");
    }

    @Test
    public void test10378() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10378");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.encode("}~\200\200}~\200\200\u0365\u0368\u0368\u0365\u0368\u0368\u0365\u0368\u0368\u0365\u0368\u0368\u0365\u0368\u0368\u0365\u0368\u0368\u0365\u0368\u0368\u0365\u0368\u0368\u0365\u0368\u0368\u0365\u0368\u0368\u0365\u0368\u0368\u0365\u0368\u0368\u0365\u0368\u0368\u0365\u0368\u0368\u0365\u0368\u0368\u0365\u0368\u0368\u0365\u0368\u0368\u0365\u0368\u0368\u0365\u0368\u0368\u0365\u0368\u0368\u0365\u0368\u0368\u0365\u0368\u0368\u0365\u0368\u0368\u0365\u0368\u0368}~\200\200}~\200\200\u0365\u0368\u0368\u0365\u0368\u0368\u0365\u0368\u0368\u0365\u0368\u0368\u0365\u0368\u0368\u0365\u0368\u0368\u0365\u0368\u0368\u0365\u0368\u0368\u0365\u0368\u0368\u0365\u0368\u0368\u0365\u0368\u0368\u0365\u0368\u0368\u0365\u0368\u0368\u0365\u0368\u0368\u0365\u0368\u0368\u0365\u0368\u0368\u0365\u0368\u0368\u0365\u0368\u0368\u0365\u0368\u0368\u0365\u0368\u0368\u0365\u0368\u0368\u0365\u0368\u0368\u0365\u0368\u0368\u0365\u0368\u0368!", "\254\275\254\254\254\275\254\254\254\275\254\254\254\275\254\254\254\275\254\254\254\275\254\254\254\275\254\254\254\275\254\254\u012f\u012f\u012f\u012f\u012f\u012f\u012f\u012fnullnullnull]]\254\275\254\254\254\275\254\254\254\275\254\254\254\275\254\254\254\275\254\254\254\275\254\254\254\275\254\254\254\275\254\254\u012f\u012f\u012f\u012f\u012f\u012f\u012f\u012fnullnullnull]]!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "}~\200\200}~\200\200\u0365\u0368\u0368\u0365\u0368\u0368\u0365\u0368\u0368\u0365\u0368\u0368\u0365\u0368\u0368\u0365\u0368\u0368\u0365\u0368\u0368\u0365\u0368\u0368\u0365\u0368\u0368\u0365\u0368\u0368\u0365\u0368\u0368\u0365\u0368\u0368\u0365\u0368\u0368\u0365\u0368\u0368\u0365\u0368\u0368\u0365\u0368\u0368\u0365\u0368\u0368\u0365\u0368\u0368\u0365\u0368\u0368\u0365\u0368\u0368\u0365\u0368\u0368\u0365\u0368\u0368\u0365\u0368\u0368\u0365\u0368\u0368}~\200\200}~\200\200\u0365\u0368\u0368\u0365\u0368\u0368\u0365\u0368\u0368\u0365\u0368\u0368\u0365\u0368\u0368\u0365\u0368\u0368\u0365\u0368\u0368\u0365\u0368\u0368\u0365\u0368\u0368\u0365\u0368\u0368\u0365\u0368\u0368\u0365\u0368\u0368\u0365\u0368\u0368\u0365\u0368\u0368\u0365\u0368\u0368\u0365\u0368\u0368\u0365\u0368\u0368\u0365\u0368\u0368\u0365\u0368\u0368\u0365\u0368\u0368\u0365\u0368\u0368\u0365\u0368\u0368\u0365\u0368\u0368\u0365\u0368\u0368!" + "'", str2, "}~\200\200}~\200\200\u0365\u0368\u0368\u0365\u0368\u0368\u0365\u0368\u0368\u0365\u0368\u0368\u0365\u0368\u0368\u0365\u0368\u0368\u0365\u0368\u0368\u0365\u0368\u0368\u0365\u0368\u0368\u0365\u0368\u0368\u0365\u0368\u0368\u0365\u0368\u0368\u0365\u0368\u0368\u0365\u0368\u0368\u0365\u0368\u0368\u0365\u0368\u0368\u0365\u0368\u0368\u0365\u0368\u0368\u0365\u0368\u0368\u0365\u0368\u0368\u0365\u0368\u0368\u0365\u0368\u0368\u0365\u0368\u0368\u0365\u0368\u0368}~\200\200}~\200\200\u0365\u0368\u0368\u0365\u0368\u0368\u0365\u0368\u0368\u0365\u0368\u0368\u0365\u0368\u0368\u0365\u0368\u0368\u0365\u0368\u0368\u0365\u0368\u0368\u0365\u0368\u0368\u0365\u0368\u0368\u0365\u0368\u0368\u0365\u0368\u0368\u0365\u0368\u0368\u0365\u0368\u0368\u0365\u0368\u0368\u0365\u0368\u0368\u0365\u0368\u0368\u0365\u0368\u0368\u0365\u0368\u0368\u0365\u0368\u0368\u0365\u0368\u0368\u0365\u0368\u0368\u0365\u0368\u0368\u0365\u0368\u0368!");
    }

    @Test
    public void test10379() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10379");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.decode("\u0366\u0365\u0368\u0368\220\220!!\220\220!!\220\220!!\220\220\u0346\u0348\u0348!", "\u0348\u0348~~!\214\214\u0348\u0348~~!\214\214\u0348\u0348~~!\214\214\u0348\u0348~~!\214\214\u0348\u0348~~!\214\214\u0348\u0348~~!\214\214\u0348\u0348~~!\214\214\u0348\u0348~~!\214\214\u0348\u0348~~!\214\214\u0348\u0348~~!\214\214\u0348\u0348~~!\214\214\u0348\u0348~~!\214\214\u0348\u0348~~!\214\214\u0348\u0348~~!\214\214\u0348\u0348~~!\214\214\u0348\u0348~~!\214\214!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\u0366\u0365\u0368\u0368\220\220!!\220\220!!\220\220!!\220\220\u0346\u0348\u0348!" + "'", str2, "\u0366\u0365\u0368\u0368\220\220!!\220\220!!\220\220!!\220\220\u0346\u0348\u0348!");
    }

    @Test
    public void test10380() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10380");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.decode("NN!!NN!!!!NN!!NN!!!!NN!!NN!!!!NN!!NN!!!!NN!!NN!!!!NN!!NN!!!!NN!!NN!!!!NN!!NN!!!!!", "!!~LL!!!!~LL!!!!!!~LL!!!!~LL!!!!!!~LL!!!!~LL!!!!~LL!!!!~LL!!!!!!~LL!!!!~LL!!!!!!~LL!!!!~LL!!!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "nullnull!!nullnull!!!!nullnull!!nullnull!!!!nullnull!!nullnull!!!!nullnull!!nullnull!!!!nullnull!!nullnull!!!!nullnull!!nullnull!!!!nullnull!!nullnull!!!!nullnull!!nullnull!!!!!" + "'", str2, "nullnull!!nullnull!!!!nullnull!!nullnull!!!!nullnull!!nullnull!!!!nullnull!!nullnull!!!!nullnull!!nullnull!!!!nullnull!!nullnull!!!!nullnull!!nullnull!!!!nullnull!!nullnull!!!!!");
    }

    @Test
    public void test10381() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10381");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.encode("\u0348\u0348~~W\220\216\216\216WWW\220\216\216\216WWW\220\216\216\216\u0348\u0348~~W\220\216\216\216WWW\220\216\216\216WWW\220\216\216\216\u0348\u0348~~W\220\216\216\216WWW\220\216\216\216WWW\220\216\216\216\u0348\u0348~~W\220\216\216\216WWW\220\216\216\216WWW\220\216\216\216WW\200\u0348\u0348~~W\220\216\216\216WWW\220\216\216\216WWW\220\216\216\216\u0348\u0348~~W\220\216\216\216WWW\220\216\216\216WWW\220\216\216\216\u0348\u0348~~W\220\216\216\216WWW\220\216\216\216WWW\220\216\216\216\u0348\u0348~~W\220\216\216\216WWW\220\216\216\216WWW\220\216\216\216WW]]!", "`\253!!!\253!!!\253!!!`\253!!!\253!!!\253!!!!");
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\u0348\u0348~~\253\220\216\216\216\253\253\253\220\216\216\216\253\253\253\220\216\216\216\253\253\u0348\u0348~~\253\220\216\216\216\253\253\253\220\216\216\216\253\253\253\220\216\216\216\253\253\u0348\u0348~~\253\220\216\216\216\253\253\253\220\216\216\216\253\253\253\220\216\216\216\253\253\u0348\u0348~~\253\220\216\216\216\253\253\253\220\216\216\216\253\253\253\220\216\216\216\253\253\200\u0348\u0348~~\253\220\216\216\216\253\253\253\220\216\216\216\253\253\253\220\216\216\216\253\253\u0348\u0348~~\253\220\216\216\216\253\253\253\220\216\216\216\253\253\253\220\216\216\216\253\253\u0348\u0348~~\253\220\216\216\216\253\253\253\220\216\216\216\253\253\253\220\216\216\216\253\253\u0348\u0348~~\253\220\216\216\216\253\253\253\220\216\216\216\253\253\253\220\216\216\216\253\253]]!" + "'", str2, "\u0348\u0348~~\253\220\216\216\216\253\253\253\220\216\216\216\253\253\253\220\216\216\216\253\253\u0348\u0348~~\253\220\216\216\216\253\253\253\220\216\216\216\253\253\253\220\216\216\216\253\253\u0348\u0348~~\253\220\216\216\216\253\253\253\220\216\216\216\253\253\253\220\216\216\216\253\253\u0348\u0348~~\253\220\216\216\216\253\253\253\220\216\216\216\253\253\253\220\216\216\216\253\253\200\u0348\u0348~~\253\220\216\216\216\253\253\253\220\216\216\216\253\253\253\220\216\216\216\253\253\u0348\u0348~~\253\220\216\216\216\253\253\253\220\216\216\216\253\253\253\220\216\216\216\253\253\u0348\u0348~~\253\220\216\216\216\253\253\253\220\216\216\216\253\253\253\220\216\216\216\253\253\u0348\u0348~~\253\220\216\216\216\253\253\253\220\216\216\216\253\253\253\220\216\216\216\253\253]]!");
    }

    @Test
    public void test10382() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10382");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.decode("", "PP!!PP!!PP!!PP!!PP!!PP!!PP!!PP!!PP!!PP!!PP!!PP!!PP!!PP!!PP!!PP!!PP!!PP!!PP!!PP!!PP!!PP!!PP!!PP!!PP!!PP!!PP!!PP!!PP!!PP!!PP!!PP!!PP!!PP!!PP!!PP!!PP!!PP!!PP!!PP!!PP!!PP!!PP!!PP!!PP!!PP!!PP!!PP!!PP!!PP!!PP!!PP!!PP!!PP!!PP!!PP!!PP!!PP!!PP!!PP!!PP!!PP!!PP!!PP!!PP!!PP!!PP!!PP!!PP!!PP!!PP!!PP!!PP!!PP!!PP!!PP!!PP!!PP!!PP!!PP!!!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
    }

    @Test
    public void test10383() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10383");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.decode("\275U!!\275U!!!!\275U!!\275U!!!!\275U!!\275U!!\275U!!\275U!!!!\275U!!\275U!!!!\275U!!\275U!!!", "UL!!UL!!null!\214\214null!\214\214UL!!UL!!null!\214\214null!\214\214UL!!UL!!null!\214\214null!\214\214UL!!UL!!null!\214\214null!\214\214UL!!UL!!null!\214\214null!\214\214UL!!UL!!null!\214\214null!\214\214UL!!UL!!null!\214\214null!\214\214UL!!UL!!null!\214\214null!\214\214!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\275\353!!\275\353!!!!\275\353!!\275\353!!!!\275\353!!\275\353!!\275\353!!\275\353!!!!\275\353!!\275\353!!!!\275\353!!\275\353!!!" + "'", str2, "\275\353!!\275\353!!!!\275\353!!\275\353!!!!\275\353!!\275\353!!\275\353!!\275\353!!!!\275\353!!\275\353!!!!\275\353!!\275\353!!!");
    }

    @Test
    public void test10384() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10384");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.encode("}~\200\200}~\200\200U^LLU^LL}~\200\200}~\200\200U^LLU^LL!", "~~!!U~~~U~~~U~~~~~!!~~!!~~!!~~!!~~!!~~!!~~!!~~!!~~!!~~!!~~!!~~!!~~!!~~!!~~!!~~!!~~!!U~~~U~~~U~~~~~!!~~!!~~!!~~!!~~!!~~!!~~!!~~!!!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "}~\200\200}~\200\200~^~~~^~~}~\200\200}~\200\200~^~~~^~~!" + "'", str2, "}~\200\200}~\200\200~^~~~^~~}~\200\200}~\200\200~^~~~^~~!");
    }

    @Test
    public void test10385() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10385");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.decode("UUUUUUUU!", "\u015a\u015a\u0158\u0158\u015a\u015a\u015a\u0158\u0158\u015a\u015a\u015a\u0158\u0158\u015a\u015a\u015a\u0158\u0158\u015a\u015a\u015a\u0158\u0158\u015a\u015a\u015a\u0158\u0158\u015a\u015a\u015a\u0158\u0158\u015a\u015a\u015a\u0158\u0158\u015a~~!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "nullnullnullnullnullnullnullnull!" + "'", str2, "nullnullnullnullnullnullnullnull!");
    }

    @Test
    public void test10386() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10386");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.decode("\u025c\u025e\u025c\u025c\u025c\u025e\u025c\u025c\u025c\u025e\u025c\u025c\u025c\u025e\u025c\u025c\u025c\u025e\u025c\u025c\u025c\u025e\u025c\u025c\u025c\u025e\u025c\u025c\u025c\u025e\u025c\u025c\u025c\u025e\u025c\u025c\u025c\u025e\u025c\u025c\u025c\u025e\u025c\u025c\u025c\u025e\u025c\u025c\u025c\u025e\u025c\u025c\u025c\u025e\u025c\u025c\u025c\u025e\u025c\u025c\u025c\u025e\u025c\u025c\u025c\u025e\u025c\u025c\u025c\u025e\u025c\u025c\u025c\u025e\u025c\u025c\u025c\u025e\u025c\u025c\u025c\u025e\u025c\u025c\u025c\u025e\u025c\u025c\u025c\u025e\u025c\u025c\u025c\u025e\u025c\u025c!", "!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!LLLLLLLL!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!LLLLLLLL!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!LLLLLLLL!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!LLLLLLLL!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!LLLLLLLL!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!LLLLLLLL!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!LLLLLLLL!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!LLLLLLLL!");
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "]]nullnullnullnullnullnullnullnull]]nullnullnullnullnullnullnullnull!!]]nullnullnullnullnullnullnullnull]]nullnullnullnullnullnullnullnull!!]]nullnullnullnullnullnullnullnull]]nullnullnullnullnullnullnullnull]]nullnullnullnullnullnullnullnull]]nullnullnullnullnullnullnullnull!!]]nullnullnullnullnullnullnullnull]]nullnullnullnullnullnullnullnull!!]]nullnullnullnullnullnullnullnull]]nullnullnullnullnullnullnullnull!" + "'", str2, "]]nullnullnullnullnullnullnullnull]]nullnullnullnullnullnullnullnull!!]]nullnullnullnullnullnullnullnull]]nullnullnullnullnullnullnullnull!!]]nullnullnullnullnullnullnullnull]]nullnullnullnullnullnullnullnull]]nullnullnullnullnullnullnullnull]]nullnullnullnullnullnullnullnull!!]]nullnullnullnullnullnullnullnull]]nullnullnullnullnullnullnullnull!!]]nullnullnullnullnullnullnullnull]]nullnullnullnullnullnullnullnull!");
    }

    @Test
    public void test10387() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10387");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.decode("null\225\230\230null\225\230\230null\225\230\230null\225\230\230\200}}`null\225\230\230null\225\230\230null\225\230\230null\225\230\230]]!", "\275\275!!\275\275!!!!\275\275!!\275\275!!!!!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "nullnullnullnull\225\230\230nullnullnullnull\225\230\230nullnullnullnull\225\230\230nullnullnullnull\225\230\230\200}}`nullnullnullnull\225\230\230nullnullnullnull\225\230\230nullnullnullnull\225\230\230nullnullnullnull\225\230\230]]!" + "'", str2, "nullnullnullnull\225\230\230nullnullnullnull\225\230\230nullnullnullnull\225\230\230nullnullnullnull\225\230\230\200}}`nullnullnullnull\225\230\230nullnullnullnull\225\230\230nullnullnullnull\225\230\230nullnullnullnull\225\230\230]]!");
    }

    @Test
    public void test10388() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10388");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.decode("L]^^L]^^L]^^L]^^L]^^L]^^L]^^L]^^!L]]!L]]L]^^L]^^L]^^L]^^L]^^L]^^L]^^L]^^!L]]!L]]L]^^L]^^L]^^L]^^L]^^L]^^L]^^L]^^!L]]!L]]L]^^L]^^L]^^L]^^L]^^L]^^L]^^L]^^!L]]!L]]L]^^L]^^L]^^L]^^L]^^L]^^L]^^L]^^!L]]!L]]L]^^L]^^L]^^L]^^L]^^L]^^L]^^L]^^!L]]!L]]L]^^L]^^L]^^L]^^L]^^L]^^L]^^L]^^!L]]!L]]L]^^L]^^L]^^L]^^L]^^L]^^L]^^L]^^!L]]!L]]!", "\276\276nullnull\276\276nullnull!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "T]^^T]^^T]^^T]^^T]^^T]^^T]^^T]^^!T]]!T]]T]^^T]^^T]^^T]^^T]^^T]^^T]^^T]^^!T]]!T]]T]^^T]^^T]^^T]^^T]^^T]^^T]^^T]^^!T]]!T]]T]^^T]^^T]^^T]^^T]^^T]^^T]^^T]^^!T]]!T]]T]^^T]^^T]^^T]^^T]^^T]^^T]^^T]^^!T]]!T]]T]^^T]^^T]^^T]^^T]^^T]^^T]^^T]^^!T]]!T]]T]^^T]^^T]^^T]^^T]^^T]^^T]^^T]^^!T]]!T]]T]^^T]^^T]^^T]^^T]^^T]^^T]^^T]^^!T]]!T]]!" + "'", str2, "T]^^T]^^T]^^T]^^T]^^T]^^T]^^T]^^!T]]!T]]T]^^T]^^T]^^T]^^T]^^T]^^T]^^T]^^!T]]!T]]T]^^T]^^T]^^T]^^T]^^T]^^T]^^T]^^!T]]!T]]T]^^T]^^T]^^T]^^T]^^T]^^T]^^T]^^!T]]!T]]T]^^T]^^T]^^T]^^T]^^T]^^T]^^T]^^!T]]!T]]T]^^T]^^T]^^T]^^T]^^T]^^T]^^T]^^!T]]!T]]T]^^T]^^T]^^T]^^T]^^T]^^T]^^T]^^!T]]!T]]T]^^T]^^T]^^T]^^T]^^T]^^T]^^T]^^!T]]!T]]!");
    }

    @Test
    public void test10389() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10389");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.encode("LUUULUUULUUULUUULPLLLPLL!!!!LUUULUUULUUULUUULPLLLPLL!!!!!!LUUULUUULUUULUUULPLLLPLL!!!!LUUULUUULUUULUUULPLLLPLL!!!!!!LUUULUUULUUULUUULPLLLPLL!!!!LUUULUUULUUULUUULPLLLPLL!!!!!!LUUULUUULUUULUUULPLLLPLL!!!!LUUULUUULUUULUUULPLLLPLL!!!!!!LUUULUUULUUULUUULPLLLPLL!!!!LUUULUUULUUULUUULPLLLPLL!!!!!!LUUULUUULUUULUUULPLLLPLL!!!!LUUULUUULUUULUUULPLLLPLL!!!!!!LUUULUUULUUULUUULPLLLPLL!!!!LUUULUUULUUULUUULPLLLPLL!!!!!!LUUULUUULUUULUUULPLLLPLL!!!!LUUULUUULUUULUUULPLLLPLL!!!!!!!", "ULLLULLL!!ULLLULLL!!ULLLULLLULLLULLL!!ULLLULLL!!ULLLULLL!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "LUUULUUULUUULUUULLLLLLLL!!!!LUUULUUULUUULUUULLLLLLLL!!!!!!LUUULUUULUUULUUULLLLLLLL!!!!LUUULUUULUUULUUULLLLLLLL!!!!!!LUUULUUULUUULUUULLLLLLLL!!!!LUUULUUULUUULUUULLLLLLLL!!!!!!LUUULUUULUUULUUULLLLLLLL!!!!LUUULUUULUUULUUULLLLLLLL!!!!!!LUUULUUULUUULUUULLLLLLLL!!!!LUUULUUULUUULUUULLLLLLLL!!!!!!LUUULUUULUUULUUULLLLLLLL!!!!LUUULUUULUUULUUULLLLLLLL!!!!!!LUUULUUULUUULUUULLLLLLLL!!!!LUUULUUULUUULUUULLLLLLLL!!!!!!LUUULUUULUUULUUULLLLLLLL!!!!LUUULUUULUUULUUULLLLLLLL!!!!!!!" + "'", str2, "LUUULUUULUUULUUULLLLLLLL!!!!LUUULUUULUUULUUULLLLLLLL!!!!!!LUUULUUULUUULUUULLLLLLLL!!!!LUUULUUULUUULUUULLLLLLLL!!!!!!LUUULUUULUUULUUULLLLLLLL!!!!LUUULUUULUUULUUULLLLLLLL!!!!!!LUUULUUULUUULUUULLLLLLLL!!!!LUUULUUULUUULUUULLLLLLLL!!!!!!LUUULUUULUUULUUULLLLLLLL!!!!LUUULUUULUUULUUULLLLLLLL!!!!!!LUUULUUULUUULUUULLLLLLLL!!!!LUUULUUULUUULUUULLLLLLLL!!!!!!LUUULUUULUUULUUULLLLLLLL!!!!LUUULUUULUUULUUULLLLLLLL!!!!!!LUUULUUULUUULUUULLLLLLLL!!!!LUUULUUULUUULUUULLLLLLLL!!!!!!!");
    }

    @Test
    public void test10390() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10390");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.decode}~\200\200}~\200\200!!}~\200\200}~\200\200!!]}~\200\200}~\200\200}~\200\200]}~\200\200}~\200\200}~\200\200}~\200\200}~\200\200!!}~\200\200}~\200\200!!]}~\200\200}~\200\200}~\200\200]}~\200\200}~\200\200}~\200\200}~\200\200}~\200\200!!}~\200\200}~\200\200!!]}~\200\200}~\200\200}~\200\200]}~\200\200}~\200\200}~\200\200}~\200\200}~\200\200!!}~\200\200}~\200\200!!]}~\200\200}~\200\200}~\200\200]}~\200\200}~\200\200}~\200\200}~\200\200}~\200\200!!}~\200\200}~\200\200!!]}~\200\200}~\200\200}~\200\200]}~\200\200}~\200\200}~\200\200}~\200\200}~\200\200!!}~\200\200}~\200\200!!]}~\200\200}~\200\200}~\200\200]}~\200\200}~\200\200}~\200\200}~\200\200}~\200\200!!}~\200\200}~\200\200!!]}~\200\200}~\200\200}~\200\200]}~\200\200}~\200\200}~\200\200}~\200\200}~\200\200!!}~\200\200}~\200\200!!]}~\200\200}~\200\200}~\200\200]}~\200\200}~\200\200}~\200\200!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "nullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull!" + "'", str2, "nullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull!");
    }

    @Test
    public void test10391() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10391");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.encode("\275\u0174\u0174\u0174\275\u0174\u0174\u0174!", "null\200}}`null]]!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\275nullnullnull\275nullnullnull!" + "'", str2, "\275nullnullnull\275nullnullnull!");
    }

    @Test
    public void test10392() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10392");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.encode("!!!!nullnull!!nullnull!!!!nullnull!!nullnull!!!!nullnull!!nullnull!!!!nullnull!!nullnull!!!!nullnull!!nullnull!!!!nullnull!!nullnull!!!!nullnull!!nullnull!!!!nullnull!!nullnull!", "!!!nulleffnulleffnulleffnulleffnulleffnulleffnulleffnulleffnulleffnulleffnulleffnulleffnulleffnulleffnulleffnulleffnulleffnulleffnulleffnulleffnulleffnulleffnulleffnulleffnulleffnulleffnulleffnulleffnulleffnulleffnulleffnulleff!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "!!!!NNFFNNFF!!NNFFNNFF!!!!NNFFNNFF!!NNFFNNFF!!!!NNFFNNFF!!NNFFNNFF!!!!NNFFNNFF!!NNFFNNFF!!!!NNFFNNFF!!NNFFNNFF!!!!NNFFNNFF!!NNFFNNFF!!!!NNFFNNFF!!NNFFNNFF!!!!NNFFNNFF!!NNFFNNFF!" + "'", str2, "!!!!NNFFNNFF!!NNFFNNFF!!!!NNFFNNFF!!NNFFNNFF!!!!NNFFNNFF!!NNFFNNFF!!!!NNFFNNFF!!NNFFNNFF!!!!NNFFNNFF!!NNFFNNFF!!!!NNFFNNFF!!NNFFNNFF!!!!NNFFNNFF!!NNFFNNFF!!!!NNFFNNFF!!NNFFNNFF!");
    }

    @Test
    public void test10393() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10393");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.decode("NUNNNUNNNN!!NN!!NUNNNUNNNN!!NN!!NUNNNUNNNN!!NN!!NUNNNUNNNN!!NN!!NUNNNUNNNN!!NN!!NUNNNUNNNN!!NN!!NUNNNUNNNN!!NN!!NUNNNUNNNN!!NN!!NUNNNUNNNN!!NN!!NUNNNUNNNN!!NN!!NUNNNUNNNN!!NN!!NUNNNUNNNN!!NN!!NUNNNUNNNN!!NN!!NUNNNUNNNN!!NN!!NUNNNUNNNN!!NN!!NUNNNUNNNN!!NN!!NUNNNUNNNN!!NN!!NUNNNUNNNN!!NN!!NUNNNUNNNN!!NN!!NUNNNUNNNN!!NN!!NUNNNUNNNN!!NN!!NUNNNUNNNN!!NN!!NUNNNUNNNN!!NN!!NUNNNUNNNN!!NN!!NUNNNUNNNN!!NN!!NUNNNUNNNN!!NN!!NUNNNUNNNN!!NN!!NUNNNUNNNN!!NN!!NUNNNUNNNN!!NN!!NUNNNUNNNN!!NN!!NUNNNUNNNN!!NN!!NUNNNUNNNN!!NN!!!", "\215}\215\215\215}\215\215null]]]null]]]null]]]null]]]\215}\215\215\215}\215\215!");
        org.junit.Assert.assertEquals("'" + strstr
    }

    @Test
    public void test10394() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10394");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.encode("", "nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!!!!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
    }

    @Test
    public void test10395() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10395");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.encode("\u0346\u0348\u0348\u0348}~\200\200}~\200\200nullnull``nullnullnull``nullnull``nullnull``nullnullnull``nullnull``}~\200\200}~\200\200nullnull``nullnullnull``nullnull``nullnull``nullnullnull``nullnull``}~\200\200}~\200\200nullnull``nullnullnull``nullnull``nullnull``nullnullnull``nullnull``}~\200\200}~\200\200\u0348\u0346\u0346!", "LLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLL!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\u0346\u0348\u0348\u0348}~\200\200}~\200\200llllllll``llllllllllll``llllllll``llllllll``llllllllllll``llllllll``}~\200\200}~\200\200llllllll``llllllllllll``llllllll``llllllll``llllllllllll``llllllll``}~\200\200}~\200\200llllllll``llllllllllll``llllllll``llllllll``llllllllllll``llllllll``}~\200\200}~\200\200\u0348\u0346\u0346!" + "'", str2, "\u0346\u0348\u0348\u0348}~\200\200}~\200\200llllllll``llllllllllll``llllllll``llllllll``llllllllllll``llllllll``}~\200\200}~\200\200llllllll``llllllllllll``llllllll``llllllll``llllllllllll``llllllll``}~\200\200}~\200\200llllllll``llllllllllll``llllllll``llllllll``llllllllllll``llllllll``}~\200\200}~\200\200\u0348\u0346\u0346!");
    }

    @Test
    public void test10396() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10396");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.decode("nullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull\200}}`nullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull]]!", "\305\306\310\310\305\306\310\310!!\305\306\310\310\305\306\310\310!!!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "nullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull\200}}`nullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull]]!" + "'", str2, "nullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull\200}}`nullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull]]!");
    }

    @Test
    public void test10397() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10397");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.encode("\u019d\u019e\u01a0\u01a0\u019d\u019e\u01a0\u01a0\u019d\u019e\u01a0\u01a0\u019d\u019e\u01a0\u01a0\u019d\u019e\u01a0\u01a0\u019d\u019e\u01a0\u01a0\u019d\u019e\u01a0\u01a0\u019d\u019e\u01a0\u01a0\u019d\u019e\u01a0\u01a0\u019d\u019e\u01a0\u01a0\u019d\u019e\u01a0\u01a0\u019d\u019e\u01a0\u01a0\200\u019d\u019e\u01a0\u01a0\u019d\u019e\u01a0\u01a0\u019d\u019e\u01a0\u01a0\u019d\u019e\u01a0\u01a0\u019d\u019e\u01a0\u01a0\u019d\u019e\u01a0\u01a0\u019d\u019e\u01a0\u01a0\u019d\u019e\u01a0\u01a0\u019d\u019e\u01a0\u01a0\u019d\u019e\u01a0\u01a0\u019d\u019e\u01a0\u01a0\u019d\u019e\u01a0\u01a0]]!", "\336\336\336\336nullnullnull\256\254\254\336\336\336\336nullnullnull\256\254\254!!\336\336\336\336nullnullnull\256\254\254\336\336\336\336nullnullnull\256\254\254!!\336\336\336\336nullnullnull\256\254\254\336\336\336\336nullnullnull\256\254\254!!\336\336\336\336nullnullnull\256\254\254\336\336\336\336nullnullnull\256\254\254!!\336\336\336\336nullnullnull\256\254\254\336\336\336\336nullnullnull\256\254\254!!\336\336\336\336nullnullnull\256\254\254\336\336\336\336nullnullnull\256\254\254!!\336\336\336\336nullnullnull\256\254\254\336\336\336\336nullnullnull\256\254\254!!\336\336\336\336nullnullnull\256\254\254\336\336\336\336nullnullnull\256\254\254!!!");
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\254\254!!!\254\254!!\254\254!!\254\254!!!\254\254!!\254\254!!\254\254!!!\254\254!!\254\254!!\254\254!!!\254\254!!\254\254!!\200}}`\254\254!!!\254\254!!\254\254!!\254\254!!!\254\254!!\254\254!!\254\254!!!\254\254!!\254\254!!\254\254!!!\254\254!!\254\254!!]]!" + "'", str2, "\254\254!!!\254\254!!\254\254!!\254\254!!!\254\254!!\254\254!!\254\254!!!\254\254!!\254\254!!\254\254!!!\254\254!!\254\254!!\200}}`\254\254!!!\254\254!!\254\254!!\254\254!!!\254\254!!\254\254!!\254\254!!!\254\254!!\254\254!!\254\254!!!\254\254!!\254\254!!]]!");
    }

    @Test
    public void test10398() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10398");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.encodeu0317\u031a\u0317\u031a\u0317\u031a\u0317\u031aP`PPP`PP!");
        org.junit.Assert.assertEquals("'" + strstr
    }

    @Test
    public void test10399() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10399");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.encode("\275~~~\275~~~\275~~~\275~~~~~\275\275~~\275\275~~\275\275~~\275\275\275~~~\275~~~\275~~~\275~~~~~\275\275~~\275\275!", "UUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUU!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\275~~~\275~~~\275~~~\275~~~~~\275\275~~\275\275~~\275\275~~\275\275\275~~~\275~~~\275~~~\275~~~~~\275\275~~\275\275!" + "'", str2, "\275~~~\275~~~\275~~~\275~~~~~\275\275~~\275\275~~\275\275~~\275\275\275~~~\275~~~\275~~~\275~~~~~\275\275~~\275\275!");
    }

    @Test
    public void test10400() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10400");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.encode("UULL~UULLUULLUULL~UULLUULL!!UULL~UULLUULLUULL~UULLUULL!!UULL~UULLUULLUULL~UULLUULLUULL~UULLUULLUULL~UULLUULL!!UULL~UULLUULLUULL~UULLUULL!!UULL~UULLUULLUULL~UULLUULL!", "U]^^nullnullnullU]^^nullnullnullU]^^nullnullnullU]^^nullnullnull\253\253\253\200}}`U]^^nullnullnullU]^^nullnullnullU]^^nullnullnullU]^^nullnullnull\253\253\253]]!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "NNLL~NNLLNNLLNNLL~NNLLNNLL!!NNLL~NNLLNNLLNNLL~NNLLNNLL!!NNLL~NNLLNNLLNNLL~NNLLNNLLNNLL~NNLLNNLLNNLL~NNLLNNLL!!NNLL~NNLLNNLLNNLL~NNLLNNLL!!NNLL~NNLLNNLLNNLL~NNLLNNLL!" + "'", str2, "NNLL~NNLLNNLLNNLL~NNLLNNLL!!NNLL~NNLLNNLLNNLL~NNLLNNLL!!NNLL~NNLLNNLLNNLL~NNLLNNLLNNLL~NNLLNNLLNNLL~NNLLNNLL!!NNLL~NNLLNNLLNNLL~NNLLNNLL!!NNLL~NNLLNNLLNNLL~NNLLNNLL!");
    }

    @Test
    public void test10401() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10401");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.decode("LLUULLUULLUULLUULLUULLUULLUULLUULLUULLUULLUULLUULLUULLUULLUULLUU\200}}`LLUULLUULLUULLUULLUULLUULLUULLUULLUULLUULLUULLUULLUULLUULLUULLUU]]!", "LLUU\275\275\275LLUU\275\275\275!!LLUU\275\275\275LLUU\275\275\275!!LLUU\275\275\275LLUU\275\275\275LLUU\275\275\275LLUU\275\275\275!!LLUU\275\275\275LLUU\275\275\275!!LLUU\275\275\275LLUU\275\275\275!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\227\227\231\231\227\227\231\231\227\227\231\231\227\227\231\231\227\227\231\231\227\227\231\231\227\227\231\231\227\227\231\231\227\227\231\231\227\227\231\231\227\227\231\231\227\227\231\231\227\227\231\231\227\227\231\231\227\227\231\231\227\227\231\231\200}}`\227\227\231\231\227\227\231\231\227\227\231\231\227\227\231\231\227\227\231\231\227\227\231\231\227\227\231\231\227\227\231\231\227\227\231\231\227\227\231\231\227\227\231\231\227\227\231\231\227\227\231\231\227\227\231\231\227\227\231\231\227\227\231\231]]!" + "'", str2, "\227\227\231\231\227\227\231\231\227\227\231\231\227\227\231\231\227\227\231\231\227\227\231\231\227\227\231\231\227\227\231\231\227\227\231\231\227\227\231\231\227\227\231\231\227\227\231\231\227\227\231\231\227\227\231\231\227\227\231\231\227\227\231\231\200}}`\227\227\231\231\227\227\231\231\227\227\231\231\227\227\231\231\227\227\231\231\227\227\231\231\227\227\231\231\227\227\231\231\227\227\231\231\227\227\231\231\227\227\231\231\227\227\231\231\227\227\231\231\227\227\231\231\227\227\231\231\227\227\231\231]]!");
    }

    @Test
    public void test10402() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10402");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.encode("^^^^]null^^]null^^]null^^]null^^^^^^]null^^]null^^!", "\u0108\u0108\u0108\u0108\u0108\u0108\u0108\u0108\u0108\u0108\u0108\u0108\u0108\u0108\u0108\u0108\u0108\u0108\u0108\u0108\u0108\u0108\u0108\u0108\u0108\u0108\u0108\u0108\u0108\u0108\u0108\u0108\u0108\u0108\u0108\u0108\u0108\u0108\u0108\u0108\u0108\u0108\u0108\u0108\u0108\u0108\u0108\u0108\u0108\u0108\u0108\u0108\u0108\u0108\u0108\u0108\u0108\u0108\u0108\u0108\u0108\u0108\u0108\u0108\u0108\u0108\u0108\u0108\u0108\u0108\u0108\u0108\u0108\u0108\u0108\u0108\u0108\u0108\u0108\u0108\u0108\u0108\u0108\u0108\u0108\u0108\u0108\u0108\u0108\u0108\u0108\u0108\u0108\u0108\u0108\u0108!");
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "^^^^]LLUU^^]LLUU^^]LLUU^^]LLUU^^^^^^]LLUU^^]LLUU^^!" + "'", str2, "^^^^]LLUU^^]LLUU^^]LLUU^^]LLUU^^^^^^]LLUU^^]LLUU^^!");
    }

    @Test
    public void test10403() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10403");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.encode("\u028b\u028c\u028e\u028e\u028b\u028c\u028e\u028e\u028b\u028c\u028e\u028e\u028b\u028c\u028e\u028e\u028b\u028c\u028e\u028e\u028b\u028c\u028e\u028e\u028b\u028c\u028e\u028e\u028b\u028c\u028e\u028e\u0366\u0365\u0368\u0368\u0366\u0365\u0368\u0368\u0366\u0365\u0368\u0368\u0366\u0365\u0368\u0368\u028b\u028c\u028e\u028e\u028b\u028c\u028e\u028e\u028b\u028c\u028e\u028e\u028b\u028c\u028e\u028e\u028b\u028c\u028e\u028e\u028b\u028c\u028e\u028e\u028b\u028c\u028e\u028e\u028b\u028c\u028e\u028e\u0366\u0365\u0368\u0368\u0366\u0365\u0368\u0368!", "NLUUNLUUNLUUNLUUNLUUNLUUNLUUNLUU!!NLUUNLUUNLUUNLUUNLUUNLUUNLUUNLUU!!NLUUNLUUNLUUNLUUNLUUNLUUNLUUNLUU!!NLUUNLUUNLUUNLUUNLUUNLUUNLUUNLUU!!NLUUNLUUNLUUNLUUNLUUNLUUNLUUNLUU!!NLUUNLUUNLUUNLUUNLUUNLUUNLUUNLUU!!NLUUNLUUNLUUNLUUNLUUNLUUNLUUNLUU!!NLUUNLUUNLUUNLUUNLUUNLUUNLUUNLUU!!!");
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\u0366\u0365\u0368\u0368\u0366\u0365\u0368\u0368\u0366\u0365\u0368\u0368\u0366\u0365\u0368\u0368\u0366\u0365\u0368\u0368\u0366\u0365\u0368\u0368!" + "'", str2, "\u0366\u0365\u0368\u0368\u0366\u0365\u0368\u0368\u0366\u0365\u0368\u0368\u0366\u0365\u0368\u0368\u0366\u0365\u0368\u0368\u0366\u0365\u0368\u0368!");
    }

    @Test
    public void test10404() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10404");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.decode("!NLL!NLL!NLL!NLL!NLL!NLL!NLL!NLL!NLL!NLL!NLL!NLL!NLL!NLL!NLL!NLL\200}}`!NLL!NLL!NLL!NLL!NLL!NLL!NLL!NLL!NLL!NLL!NLL!NLL!NLL!NLL!NLL!NLL]]!", "\256\204\256\256\256\204\256\256\256\204\256\256\256\204\256\256\256\256\256\256\256\256\256\256\256\256\256\256\256\256\256\256\256\204\256\256\256\204\256\256\256\204\256\256\256\204\256\256\256\256\256\256\256\256\256\256!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnull\200}}`!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnull]]!" + "'", str2, "!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnull\200}}`!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnull]]!");
    }

    @Test
    public void test10405() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10405");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.decode("NNNNNNNN!!NNNNNNNN!!NNNNNNNNNNNNNNNN!!NNNNNNNN!!NNNNNNNN!", "LL!!LL!!LLLLLLLLLL!!LL!!LLLLLLLLLL!!LL!!LLLLLLLLLL!!LL!!LLLLLLLLLL!!LL!!LLLLLLLLLL!!LL!!LLLLLLLLLL!!LL!!LLLLLLLLLL!!LL!!LLLLLLLL!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "nullnullnullnullnullnullnullnull!!nullnullnullnullnullnullnullnull!!nullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull!!nullnullnullnullnullnullnullnull!!nullnullnullnullnullnullnullnull!" + "'", str2, "nullnullnullnullnullnullnullnull!!nullnullnullnullnullnullnullnull!!nullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull!!nullnullnullnullnullnullnullnull!!nullnullnullnullnullnullnullnull!");
    }

    @Test
    public void test10406() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10406");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.decode("\214\214!!\214\214!!\214\214\214\214\214\214\214\214\214\214!!\214\214!!\214\214\214\214\214\214\214\214\214\214!!\214\214!!\214\214\214\214\214\214\214\214\214\214!!\214\214!!\214\214\214\214\214\214\214\214\214\214!!\214\214!!\214\214\214\214\214\214\214\214\214\214!!\214\214!!\214\214\214\214\214\214\214\214\214\214!!\214\214!!\214\214\214\214\214\214\214\214\214\214!!\214\214!!\214\214\214\214\214\214\214\214!", "\u016b\u016c\u016e\u016e\u016b\u016c\u016e\u016e\u016b\u016c\u016e\u016e\u016b\u016c\u016e\u016e\u016b\u016c\u016e\u016e\u016b\u016c\u016e\u016e\u016b\u016c\u016e\u016e\u016b\u016c\u016e\u016e\u016b\u016c\u016e\u016e\u016b\u016c\u016e\u016e\u016b\u016c\u016e\u016e\u016b\u016c\u016e\u016e\u016b\u016c\u016e\u016e\u016b\u016c\u016e\u016e\u016b\u016c\u016e\u016e\u016b\u016c\u016e\u016enullnullnullnullnullnullnullnull!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\214\214!!\214\214!!\214\214\214\214\214\214\214\214\214\214!!\214\214!!\214\214\214\214\214\214\214\214\214\214!!\214\214!!\214\214\214\214\214\214\214\214\214\214!!\214\214!!\214\214\214\214\214\214\214\214\214\214!!\214\214!!\214\214\214\214\214\214\214\214\214\214!!\214\214!!\214\214\214\214\214\214\214\214\214\214!!\214\214!!\214\214\214\214\214\214\214\214\214\214!!\214\214!!\214\214\214\214\214\214\214\214!" + "'", str2, "\214\214!!\214\214!!\214\214\214\214\214\214\214\214\214\214!!\214\214!!\214\214\214\214\214\214\214\214\214\214!!\214\214!!\214\214\214\214\214\214\214\214\214\214!!\214\214!!\214\214\214\214\214\214\214\214\214\214!!\214\214!!\214\214\214\214\214\214\214\214\214\214!!\214\214!!\214\214\214\214\214\214\214\214\214\214!!\214\214!!\214\214\214\214\214\214\214\214\214\214!!\214\214!!\214\214\214\214\214\214\214\214!");
    }

    @Test
    public void test10407() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10407");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.encode("", "\u01ce\u01ce\u01ae\u01ae\u01ce\u01ce\u01ae\u01ae\u01ce\u01ce\u01ae\u01ae\u01ce\u01ce\u01ae\u01ae\u01ce\u01ce\u01ae\u01ae\u01ce\u01ce\u01ae\u01ae\u01ce\u01ce\u01ae\u01ae\u01ce\u01ce\u01ae\u01ae\u01ce\u01ce\u01ae\u01ae\u01ce\u01ce\u01ae\u01ae\u01ce\u01ce\u01ae\u01ae\u01ce\u01ce\u01ae\u01ae\u01ce\u01ce\u01ae\u01ae\u01ce\u01ce\u01ae\u01ae\u01ce\u01ce\u01ae\u01ae\u01ce\u01ce\u01ae\u01ae\u01ce\u01ce\u01ae\u01ae\u01ce\u01ce\u01ae\u01ae\u01ce\u01ce\u01ae\u01ae\u01ce\u01ce\u01ae\u01ae\u01ce\u01ce\u01ae\u01ae\u01ce\u01ce\u01ae\u01ae\u01ce\u01ce\u01ae\u01ae\u01ce\u01ce\u01ae\u01ae\u01ce\u01ce\u01ae\u01ae\u01ce\u01ce\u01ae\u01ae\u01ce\u01ce\u01ae\u01ae\u01ce\u01ce\u01ae\u01ae\u01ce\u01ce\u01ae\u01ae\u01ce\u01ce\u01ae\u01ae\u01ce\u01ce\u01ae\u01ae\u01ce\u01ce\u01ae\u01ae\u01ce\u01ce\u01ae\u01ae\u01ce\u01ce\u01ae\u01ae\u01ce\u01ce\u01ae\u01ae\u01ce\u01ce\u01ae\u01ae!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
    }

    @Test
    public void test10408() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10408");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.decode("NN!!U`LLU`LLU`LLNN!!NN!!NN!!NN!!NN!!NN!!NN!!NN!!NN!!NN!!NN!!NN!!NN!!NN!!NN!!NN!!NN!!U`LLU`LLU`LLNN!!NN!!NN!!NN!!NN!!NN!!NN!!NN!!!", "!N!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "BB!!null`nullnullnull`nullnullnull`nullnullBB!!BB!!BB!!BB!!BB!!BB!!BB!!BB!!BB!!BB!!BB!!BB!!BB!!BB!!BB!!BB!!BB!!null`nullnullnull`nullnullnull`nullnullBB!!BB!!BB!!BB!!BB!!BB!!BB!!BB!!!" + "'", str2, "BB!!null`nullnullnull`nullnullnull`nullnullBB!!BB!!BB!!BB!!BB!!BB!!BB!!BB!!BB!!BB!!BB!!BB!!BB!!BB!!BB!!BB!!BB!!null`nullnullnull`nullnullnull`nullnullBB!!BB!!BB!!BB!!BB!!BB!!BB!!BB!!!");
    }

    @Test
    public void test10409() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10409");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.decode("||||||||!!||||||||!!||||||||!!||||||||!!||||!!!||||!!!||||!!!||||!!!||||||||!!||||||||!!||||||||!!||||||||!!||||!!!||||
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "||||||||!!||||||||!!||||||||!!||||||||!!||||!!!||||!!!||||!!!||||!!!||||||||!!||||||||!!||||||||!!||||||||!!||||!!!||||!!!!" + "'", str2, "||||||||!!||||||||!!||||||||!!||||||||!!||||!!!||||!!!||||!!!||||!!!||||||||!!||||||||!!||||||||!!||||||||!!||||!!!||||!!!!");
    }

    @Test
    public void test10410() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10410");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.decode("LUNLLUNLLUNLLLUNLLUNLLUNLLLUNLLUNLLUNLLLUNLLUNLLUNLLUNLLUNLLUNLLUNLLUNLLUNLLUNLLUNLLUNLLUNLLUNLLUNLLUNLLUNLLUNLLUNLLLUNLLUNLLUNLLLUNLLUNLLUNLLLUNLLUNLLUNLLLUNLLUNLLUNLLUNLLUNLLUNLLUNLLUNLLUNLLUNLLUNLL!", "nullnull\214\214nullnull\214\214!!nullnull\214\214nullnull\214\214!!nullnull\214\214nullnull\214\214nullnull\214\214nullnull\214\214!!nullnull\214\214nullnull\214\214!!nullnull\214\214nullnull\214\214!");
        org.junit.Assert.assertEquals("'" + strstr
    }

    @Test
    public void test10411() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10411");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.encode("\u02d6\u02d5\u02d8\u02d8\u02d6\u02d5\u02d8\u02d8!", "\276\230\275\275\276\230\275\275\276\230\275\275\276\230\275\275\276\230\275\275\276\230\275\275\276\230\275\275\276\230\275\275!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\u02d6\u02d5\u02d8\u02d8\u02d6\u02d5\u02d8\u02d8!" + "'", str2, "\u02d6\u02d5\u02d8\u02d8\u02d6\u02d5\u02d8\u02d8!");
    }

    @Test
    public void test10412() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10412");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.encode("NNNNNNNNNNNNNNNNNNNN!!NNNNNNNNNNNNNNNNNNNN!!NNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN!!NNNNNNNNNNNNNNNNNNNN!!NNNNNNNNNNNNNNNNNNNN!", "}~\200\200}~\200\200\u022c\u022e\u022e\u022c\u022e\u022e\u022c\u022e\u022e\u022c\u022e\u022e\u022c\u022e\u022e\u022c\u022e\u022e\u022c\u022e\u022e\u022c\u022e\u022e\u022c\u022e\u022e\u022c\u022e\u022e\u022c\u022e\u022e\u022c\u022e\u022e\u022c\u022e\u022e\u022c\u022e\u022e\u022c\u022e\u022e\u022c\u022e\u022e\u022c\u022e\u022e\u022c\u022e\u022e\u022c\u022e\u022e\u022c\u022e\u022e\u022c\u022e\u022e\u022c\u022e\u022e\u022c\u022e\u022e\u022c\u022e\u022e}~\200\200}~\200\200\u022c\u022e\u022e\u022c\u022e\u022e\u022c\u022e\u022e\u022c\u022e\u022e\u022c\u022e\u022e\u022c\u022e\u022e\u022c\u022e\u022e\u022c\u022e\u022e\u022c\u022e\u022e\u022c\u022e\u022e\u022c\u022e\u022e\u022c\u022e\u022e\u022c\u022e\u022e\u022c\u022e\u022e\u022c\u022e\u022e\u022c\u022e\u022e\u022c\u022e\u022e\u022c\u022e\u022e\u022c\u022e\u022e\u022c\u022e\u022e\u022c\u022e\u022e\u022c\u022e\u022e\u022c\u022e\u022e\u022c\u022e\u022e!");
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\u022c\u022c\u022c\u022c\u022c\u022c\u022c\u022c\u022c\u022c\u022c\u022c\u022c\u022c\u022c\u022c\u022c\u022c\u022c\u022c\u022c\u022c\u022c\u022c\u022c\u022c\u022c\u022c\u022c\u022c\u022c\u022c\u022c\u022c\u022c\u022c\u022c\u022c\u022c\u022c\u022c\u022c\u022c\u022c\u022c\u022c\u022c\u022c\u022c\u022c\u022c\u022c\u022c\u022c\u022c\u022c\u022c\u022c\u022c\u022c\u022c\u022c\u022c\u022c\u022c\u022c\u022c\u022c\u022c\u022c\u022c\u022c\u022c\u022c\u022c\u022c\u022c\u022c\u022c\u022c\u022c\u022c\u022c\u022c\u022c\u022c\u022c\u022c\u022c\u022c\u022c\u022c\u022c\u022c\u022c\u022c\u022c\u022c\u022c\u022c\u022c\u022c\u022c\u022c\u022c\u022c\u022c\u022c\u022c\u022c\u022c\u022c\u022c\u022c\u022c\u022c\u022c\u022c\u022c\u022c!" + "'", str2, "\u022c\u022c\u022c\u022c\u022c\u022c\u022c\u022c\u022c\u022c\u022c\u022c\u022c\u022c\u022c\u022c\u022c\u022c\u022c\u022c\u022c\u022c\u022c\u022c\u022c\u022c\u022c\u022c\u022c\u022c\u022c\u022c\u022c\u022c\u022c\u022c\u022c\u022c\u022c\u022c\u022c\u022c\u022c\u022c\u022c\u022c\u022c\u022c\u022c\u022c\u022c\u022c\u022c\u022c\u022c\u022c\u022c\u022c\u022c\u022c\u022c\u022c\u022c\u022c\u022c\u022c\u022c\u022c\u022c\u022c\u022c\u022c\u022c\u022c\u022c\u022c\u022c\u022c\u022c\u022c\u022c\u022c\u022c\u022c\u022c\u022c\u022c\u022c\u022c\u022c\u022c\u022c\u022c\u022c\u022c\u022c\u022c\u022c\u022c\u022c\u022c\u022c\u022c\u022c\u022c\u022c\u022c\u022c\u022c\u022c\u022c\u022c\u022c\u022c\u022c\u022c\u022c\u022c\u022c\u022c!");
    }

    @Test
    public void test10413() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10413");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.decode("!~\200\327\330\332\332~~\200\327\330\332\332~~!~\200\327\330\332\332~~\200\327\330\332\332~~!!!~\200\327\330\332\332~~\200\327\330\332\332~~!~\200\327\330\332\332~~\200\327\330\332\332~~!!!~\200\327\330\332\332~~\200\327\330\332\332~~!~\200\327\330\332\332~~\200\327\330\332\332~~!~\200\327\330\332\332~~\200\327\330\332\332~~!~\200\327\330\332\332~~\200\327\330\332\332~~!!!~\200\327\330\332\332~~\200\327\330\332\332~~!~\200\327\330\332\332~~\200\327\330\332\332~~!!!~\200\327\330\332\332~~\200\327\330\332\332~~!~\200\327\330\332\332~~\200\327\330\332\332~~!", "!!\276\276!!\276\276!!!!\276\276!!\276\276!!!!\276\276!!\276\276!!\276\276!!\276\276!!!!\276\276!!\276\276!!!!\276\276!!\276\276!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "!~\200\327nullnullnull~~\200\327nullnullnull~~!~\200\327nullnullnull~~\200\327nullnullnull~~!!!~\200\327nullnullnull~~\200\327nullnullnull~~!~\200\327nullnullnull~~\200\327nullnullnull~~!!!~\200\327nullnullnull~~\200\327nullnullnull~~!~\200\327nullnullnull~~\200\327nullnullnull~~!~\200\327nullnullnull~~\200\327nullnullnull~~!~\200\327nullnullnull~~\200\327nullnullnull~~!!!~\200\327nullnullnull~~\200\327nullnullnull~~!~\200\327nullnullnull~~\200\327nullnullnull~~!!!~\200\327nullnullnull~~\200\327nullnullnull~~!~\200\327nullnullnull~~\200\327nullnullnull~~!" + "'", str2, "!~\200\327nullnullnull~~\200\327nullnullnull~~!~\200\327nullnullnull~~\200\327nullnullnull~~!!!~\200\327nullnullnull~~\200\327nullnullnull~~!~\200\327nullnullnull~~\200\327nullnullnull~~!!!~\200\327nullnullnull~~\200\327nullnullnull~~!~\200\327nullnullnull~~\200\327nullnullnull~~!~\200\327nullnullnull~~\200\327nullnullnull~~!~\200\327nullnullnull~~\200\327nullnullnull~~!!!~\200\327nullnullnull~~\200\327nullnullnull~~!~\200\327nullnullnull~~\200\327nullnullnull~~!!!~\200\327nullnullnull~~\200\327nullnullnull~~!~\200\327nullnullnull~~\200\327nullnullnull~~!");
    }

    @Test
    public void test10414() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10414");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.decode("\u0366\u0365\u0368\u0368AA!!AA!!\200\200\u0346\u0348\u0348!", "}~\200\200}~\200\200\276\300!!\276\300!!\276\300!!\276\300!!\276\300!!\276\300!!\276\300!!\276\300!!\276\300!!\276\300!!\276\300!!\276\300!!\276\300!!\276\300!!\276\300!!\276\300!!\276\300!!\276\300!!\276\300!!\276\300!!\276\300!!\276\300!!\276\300!!\276\300!!\276\300!!\276\300!!\276\300!!\276\300!!\276\300!!\276\300!!\276\300!!\276\300!!}~\200\200}~\200\200\276\300!!\276\300!!\276\300!!\276\300!!\276\300!!\276\300!!\276\300!!\276\300!!\276\300!!\276\300!!\276\300!!\276\300!!\276\300!!\276\300!!\276\300!!\276\300!!\276\300!!\276\300!!\276\300!!\276\300!!\276\300!!\276\300!!\276\300!!\276\300!!\276\300!!\276\300!!\276\300!!\276\300!!\276\300!!\276\300!!\276\300!!\276\300!!!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\u0366\u0365\u0368\u0368nullnull!!nullnull!!\200\200\u0346\u0348\u0348!" + "'", str2, "\u0366\u0365\u0368\u0368nullnull!!nullnull!!\200\200\u0346\u0348\u0348!");
    }

    @Test
    public void test10415() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10415");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.encode("\u0346\u0348\u0348\u0348\u01ff\u0348\u0346\u0346!", "nullnullnullnullnullnullnullnullnull\330\340\340null\214\214null\330\340\340null\214\214nullnullnullnullnullnullnullnullnull\330\340\340null\214\214null\330\340\340null\214\214nullnullnullnullnullnullnullnullnull\330\340\340null\214\214null\330\340\340null\214\214nullnullnullnullnullnullnullnullnull\330\340\340null\214\214null\330\340\340null\214\214nullnullnullnullnullnullnullnullnull\330\340\340null\214\214null\330\340\340null\214\214nullnullnullnullnullnullnullnullnull\330\340\340null\214\214null\330\340\340null\214\214nullnullnullnullnullnullnullnullnull\330\340\340null\214\214null\330\340\340null\214\214nullnullnullnullnullnullnullnullnull\330\340\340null\214\214null\330\340\340null\214\214!");
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\u0346\u0348\u0348\u0348NN\214\214UNN\214\214NN\214\214\u0348\u0346\u0346!" + "'", str2, "\u0346\u0348\u0348\u0348NN\214\214UNN\214\214NN\214\214\u0348\u0346\u0346!");
    }

    @Test
    public void test10416() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10416");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.encode("", "\246\246\246\246\246\246\246\246\246\246\246\246\246\246\246\246\246\246\246\246\246\246\246\246\246\246\246\246\246\246\246\246!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
    }

    @Test
    public void test10417() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10417");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.encode("LLLLLLLL!!LLLLLLLL!!LLLLLLLLLLLLLLLL!!LLLLLLLL!!LLLLLLLL!", "LL!!LLLLLLLLLLLLLL!!LL!!LL!!LL!!LL!!LL!!LL!!LL!!LL!!LL!!LL!!LL!!LL!!LL!!LL!!LL!!LL!!LLLLLLLLLLLLLL!!LL!!LL!!LL!!LL!!LL!!LL!!LL!!!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "LLLLLLLL!!LLLLLLLL!!LLLLLLLLLLLLLLLL!!LLLLLLLL!!LLLLLLLL!" + "'", str2, "LLLLLLLL!!LLLLLLLL!!LLLLLLLLLLLLLLLL!!LLLLLLLL!!LLLLLLLL!");
    }

    @Test
    public void test10418() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10418");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.encode("\u0150\u0150\u0150\u0150\u0150\u0150\u0150\u0150\u0150\u0150\u0150\u0150\u0150\u0150\u0150\u0150\u0150\u0150\u0150\u0150\u0150\u0150\u0150\u0150\u0150\u0150\u0150\u0150\u0150\u0150\u0150\u0150\u0150\u0150\u0150\u0150\u0150\u0150\u0150\u0150\u0150\u0150\u0150\u0150\u0150\u0150\u0150\u0150\u0150\u0150\u0150\u0150\u0150\u0150\u0150\u0150\u0150\u0150\u0150\u0150\u0150\u0150\u0150\u0150\u0150\u0150\u0150\u0150\u0150\u0150\u0150\u0150\u0150\u0150\u0150\u0150\u0150\u0150\u0150\u0150\u0150\u0150\u0150\u0150\u0150\u0150\u0150\u0150\u0150\u0150\u0150\u0150\u0150\u0150\u0150\u0150!", "nullnull!!nullnull!!\255\256\260\260\255\256\260\260nullnull!!nullnull!!\255\256\260\260\255\256\260\260nullnull!!nullnull!!\255\256\260\260\255\256\260\260nullnull!!nullnull!!\255\256\260\260\255\256\260\260nullnull!!nullnull!!\255\256\260\260\255\256\260\260nullnull!!nullnull!!\255\256\260\260\255\256\260\260nullnull!!nullnull!!\255\256\260\260\255\256\260\260nullnull!!nullnull!!\255\256\260\260\255\256\260\260!");
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "L\255UUnullnullnullL\255UUnullnullnullnullnullL\255UUnullnullnullL\255UUnullnullnullnullnull!!L\255UUnullnullnullL\255UUnullnullnullnullnullL\255UUnullnullnullL\255UUnullnullnullnullnull!!L\255UUnullnullnullL\255UUnullnullnullnullnullL\255UUnullnullnullL\255UUnullnullnullnullnullL\255UUnullnullnullL\255UUnullnullnullnullnullL\255UUnullnullnullL\255UUnullnullnullnullnull!!L\255UUnullnullnullL\255UUnullnullnullnullnullL\255UUnullnullnullL\255UUnullnullnullnullnull!!L\255UUnullnullnullL\255UUnullnullnullnullnullL\255UUnullnullnullL\255UUnullnullnullnullnull!" + "'", str2, "L\255UUnullnullnullL\255UUnullnullnullnullnullL\255UUnullnullnullL\255UUnullnullnullnullnull!!L\255UUnullnullnullL\255UUnullnullnullnullnullL\255UUnullnullnullL\255UUnullnullnullnullnull!!L\255UUnullnullnullL\255UUnullnullnullnullnullL\255UUnullnullnullL\255UUnullnullnullnullnullL\255UUnullnullnullL\255UUnullnullnullnullnullL\255UUnullnullnullL\255UUnullnullnullnullnull!!L\255UUnullnullnullL\255UUnullnullnullnullnullL\255UUnullnullnullL\255UUnullnullnullnullnull!!L\255UUnullnullnullL\255UUnullnullnullnullnullL\255UUnullnullnullL\255UUnullnullnullnullnull!");
    }

    @Test
    public void test10419() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10419");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.decode("!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnull!", "!E!!!E!!!E!!!E!!!E!!!E!!!E!!```!E!!!E!!!E!!!E!!!E!!!E!!!E!!```!E!!!E!!!E!!!E!!!E!!!E!!!E!!```!E!!!E!!!E!!!E!!!E!!!E!!!E!!```!E!!!E!!!E!!!E!!!E!!!E!!!E!!```!E!!!E!!!E!!!E!!!E!!!E!!!E!!```!E!!!E!!!E!!!E!!!E!!!E!!!E!!```!E!!!E!!!E!!!E!!!E!!!E!!!E!!```!E!!!E!!!E!!!E!!!E!!!E!!!E!!```!E!!!E!!!E!!!E!!!E!!!E!!!E!!```!E!!!E!!!E!!!E!!!E!!!E!!!E!!```!E!!!E!!!E!!!E!!!E!!!E!!!E!!```!E!!!E!!!E!!!E!!!E!!!E!!!E!!```!E!!!E!!!E!!!E!!!E!!!E!!!E!!```!E!!!E!!!E!!!E!!!E!!!E!!!E!!```!E!!!E!!!E!!!E!!!E!!!E!!!E!!```!E!!!E!!!E!!!E!!!E!!!E!!!E!!```!E!!!E!!!E!!!E!!!E!!!E!!!E!!```!E!!!E!!!E!!!E!!!E!!!E!!!E!!```!E!!!E!!!E!!!E!!!E!!!E!!!E!!```!E!!!E!!!E!!!E!!!E!!!E!!!E!!```!E!!!E!!!E!!!E!!!E!!!E!!!E!!```!E!!!E!!!E!!!E!!!E!!!E!!!E!!```!E!!!E!!!E!!!E!!!E!!!E!!!E!!```!E!!!E!!!E!!!E!!!E!!!E!!!E!!```!E!!!E!!!E!!!E!!!E!!!E!!!E!!```!E!!!E!!!E!!!E!!!E!!!E!!!E!!```!E!!!E!!!E!!!E!!!E!!!E!!!E!!```!E!!!E!!!E!!!E!!!E!!!E!!!E!!```!E!!!E!!!E!!!E!!!E!!!E!!!E!!```!E!!!E!!!E!!!E!!!E!!!E!!!E!!```!E!!!E!!!E!!!E!!!E!!!E!!!E!!```!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "!nullnullnullnullnullnullnullnullnullnullnullnull!nullnullnullnullnullnullnullnullnullnullnullnull!nullnullnullnullnullnullnullnullnullnullnullnull!nullnullnullnullnullnullnullnullnullnullnullnull!nullnullnullnullnullnullnullnullnullnullnullnull!" + "'", str2, "!nullnullnullnullnullnullnullnullnullnullnullnull!nullnullnullnullnullnullnullnullnullnullnullnull!nullnullnullnullnullnullnullnullnullnullnullnull!nullnullnullnullnullnullnullnullnullnullnullnull!nullnullnullnullnullnullnullnullnullnullnullnull!");
    }

    @Test
    public void test10420() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10420");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.decode("\u03a8\u03aa\u03a7\u03a7\u03a8\u03aa\u03a7\u03a7\u03a8\u03aa\u03a7\u03a7\u03a8\u03aa\u03a7\u03a7\u03a8\u03aa\u03a7\u03a7\u03a8\u03aa\u03a7\u03a7\u03a8\u03aa\u03a7\u03a7\u03a8\u03aa\u03a7\u03a7\u03a8\u03aa\u03a7\u03a7\u03a8\u03aa\u03a7\u03a7\u03a8\u03aa\u03a7\u03a7\u03a8\u03aa\u03a7\u03a7\u03a8\u03aa\u03a7\u03a7\u03a8\u03aa\u03a7\u03a7\u03a8\u03aa\u03a7\u03a7\u03a8\u03aa\u03a7\u03a7\u03a8\u03aa\u03a7\u03a7\u03a8\u03aa\u03a7\u03a7\u03a8\u03aa\u03a7\u03a7\u03a8\u03aa\u03a7\u03a7\u03a8\u03aa\u03a7\u03a7\u03a8\u03aa\u03a7\u03a7\u03a8\u03aa\u03a7\u03a7\u03a8\u03aa\u03a7\u03a7\u03a8\u03aa\u03a7\u03a7\u03a8\u03aa\u03a7\u03a7\u03a8\u03aa\u03a7\u03a7\u03a8\u03aa\u03a7\u03a7\u03a8\u03aa\u03a7\u03a7\u03a8\u03aa\u03a7\u03a7\u03a8\u03aa\u03a7\u03a7\u03a8\u03aa\u03a7\u03a7!", "X!!!X!!!X!!!X!!!X!!!X!!!X!!!X!!!XWWWXWWWXWWWXWWWXWWWXWWWXWWWXWWWX!!!X!!!X!!!X!!!X!!!X!!!X!!!X!!!XWWWXWWWXWWWXWWWXWWWXWWWXWWWXWWWX!!!X!!!X!!!X!!!X!!!X!!!X!!!X!!!XWWWXWWWXWWWXWWWXWWWXWWWXWWWXWWWX!!!X!!!X!!!X!!!X!!!X!!!X!!!X!!!XWWWXWWWXWWWXWWWXWWWXWWWXWWWXWWWX!!!X!!!X!!!X!!!X!!!X!!!X!!!X!!!XWWWXWWWXWWWXWWWXWWWXWWWXWWWXWWWX!!!X!!!X!!!X!!!X!!!X!!!X!!!X!!!XWWWXWWWXWWWXWWWXWWWXWWWXWWWXWWWX!!!X!!!X!!!X!!!X!!!X!!!X!!!X!!!XWWWXWWWXWWWXWWWXWWWXWWWXWWWXWWWX!!!X!!!X!!!X!!!X!!!X!!!X!!!X!!!XWWWXWWWXWWWXWWWXWWWXWWWXWWWXWWW!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "nullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull!" + "'", str2, "nullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull!");
    }

    @Test
    public void test10421() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10421");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.encode
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "NUNNNUNN!!NUNNNUNN!!NUNNNUNN!!NUNNNUNN!!NUNNNUNN!!NUNNNUNN!!NUNNNUNN!!NUNNNUNN!!NUNNNUNN!!NUNNNUNN!!NUNNNUNN!!NUNNNUNN!!NUNNNUNN!!NUNNNUNN!!NUNNNUNN!!NUNNNUNN!!NUNNNUNN!!NUNNNUNN!!NUNNNUNN!!NUNNNUNN!!NUNNNUNN!!NUNNNUNN!!NUNNNUNN!!NUNNNUNN!!NUNNNUNN!!NUNNNUNN!!NUNNNUNN!!NUNNNUNN!!NUNNNUNN!!NUNNNUNN!!NUNNNUNN!!NUNNNUNN!!NUNNNUNN!!NUNNNUNN!!NUNNNUNN!!NUNNNUNN!!NUNNNUNN!!NUNNNUNN!!NUNNNUNN!!NUNNNUNN!!NUNNNUNN!!NUNNNUNN!!NUNNNUNN!!NUNNNUNN!!NUNNNUNN!!NUNNNUNN!!NUNNNUNN!!NUNNNUNN!!NUNNNUNN!!NUNNNUNN!!NUNNNUNN!!NUNNNUNN!!NUNNNUNN!!NUNNNUNN!!NUNNNUNN!!NUNNNUNN!!NUNNNUNN!!NUNNNUNN!!NUNNNUNN!!NUNNNUNN!!NUNNNUNN!!NUNNNUNN!!NUNNNUNN!!NUNNNUNN!!NUNNNUNN!!NUNNNUNN!!NUNNNUNN!!NUNNNUNN!!NUNNNUNN!!NUNNNUNN!!NUNNNUNN!!NUNNNUNN!!NUNNNUNN!!NUNNNUNN!!NUNNNUNN!!NUNNNUNN!!NUNNNUNN!!NUNNNUNN!!NUNNNUNN!!NUNNNUNN!!!" + "'", str
    }

    @Test
    public void test10422() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10422");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.decode("\276!!!!\276!!!\276!!!\276!!!!\276!!!\276!!!\276!!!!\276!!!\276!!!\276!!!!\276!!!\276!!!\276!!!!\276!!!\276!!!\276!!!!\276!!!\276!!!\276!!!!\276!!!\276!!!\276!!!!\276!!!\276!!!!", "\u02d5\u02d6\u02d8\u02d8\u02d5\u02d6\u02d8\u02d8\u02d5\u02d6\u02d8\u02d8\u02d5\u02d6\u02d8\u02d8\u02d5\u02d6\u02d8\u02d8\u02d5\u02d6\u02d8\u02d8\u02d5\u02d6\u02d8\u02d8\u02d5\u02d6\u02d8\u02d8null```null```null```null```null```null```null```null```!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\276!!!!\276!!!\276!!!\276!!!!\276!!!\276!!!\276!!!!\276!!!\276!!!\276!!!!\276!!!\276!!!\276!!!!\276!!!\276!!!\276!!!!\276!!!\276!!!\276!!!!\276!!!\276!!!\276!!!!\276!!!\276!!!!" + "'", str2, "\276!!!!\276!!!\276!!!\276!!!!\276!!!\276!!!\276!!!!\276!!!\276!!!\276!!!!\276!!!\276!!!\276!!!!\276!!!\276!!!\276!!!!\276!!!\276!!!\276!!!!\276!!!\276!!!\276!!!!\276!!!\276!!!!");
    }

    @Test
    public void test10423() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10423");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.encode("nullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull!nullnullnullnullnullnullnullnullnullnullnullnull!nullnullnullnullnullnullnullnullnullnullnullnull!nullnullnullnullnullnullnullnullnullnullnullnull!nullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull!nullnullnullnullnullnullnullnullnullnullnullnull!nullnullnullnullnullnullnullnullnullnullnullnull!", "NNNNNNNNNNNNNNNN\225\230\230NNNNNNNNNNNNNNNN\225\230\230NNNNNNNNNNNNNNNN\225\230\230NNNNNNNNNNNNNNNN\225\230\230\200}}`NNNNNNNNNNNNNNNN\225\230\230NNNNNNNNNNNNNNNN\225\230\230NNNNNNNNNNNNNNNN\225\230\230NNNNNNNNNNNNNNNN\225\230\230]]!");
        org.junit.Assert.assertEquals("'" + strstr
    }

    @Test
    public void test10424() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10424");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.decode("\215}\215\215\215}\215\215\200\200\200\200\200\200\200\200\200\200\200\200\200\200\200\200\200\200\200\200\200\200\200\200\200\200\200\200\200\200\200\200\200\200\200\200\200\200\200\200\200\200\200\200\200\200\200\200\200\200\200\200\200\200\200\200\200\200\200\200\200\200\200\200\215}\215\215\215}\215\215!", "XX!!X!!XX!!X!!XX!!X!!XX!!X!!XX!!X!!XX!!X!!XX!!X!!XX!!X!!!!XX!!X!!XX!!X!!XX!!X!!XX!!X!!XX!!X!!XX!!X!!XX!!X!!XX!!X!!!!XX!!X!!XX!!X!!XX!!X!!XX!!X!!XX!!X!!XX!!X!!XX!!X!!XX!!X!!XX!!X!!XX!!X!!XX!!X!!XX!!X!!XX!!X!!XX!!X!!XX!!X!!XX!!X!!!!XX!!X!!XX!!X!!XX!!X!!XX!!X!!XX!!X!!XX!!X!!XX!!X!!XX!!X!!!!XX!!X!!XX!!X!!XX!!X!!XX!!X!!XX!!X!!XX!!X!!XX!!X!!XX!!X!!!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\215}\215\215\215}\215\215\200\200\200\200\200\200\200\200\200\200\200\200\200\200\200\200\200\200\200\200\200\200\200\200\200\200\200\200\200\200\200\200\200\200\200\200\200\200\200\200\200\200\200\200\200\200\200\200\200\200\200\200\200\200\200\200\200\200\200\200\200\200\200\200\215}\215\215\215}\215\215!" + "'", str2, "\215}\215\215\215}\215\215\200\200\200\200\200\200\200\200\200\200\200\200\200\200\200\200\200\200\200\200\200\200\200\200\200\200\200\200\200\200\200\200\200\200\200\200\200\200\200\200\200\200\200\200\200\200\200\200\200\200\200\200\200\200\200\200\200\200\200\200\200\200\200\200\215}\215\215\215}\215\215!");
    }

    @Test
    public void test10425() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10425");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.decode("^```^```^```^```^```^```^```^```^```^```UUUUUUUU\225\225UUUUUUUU\225\225^```^```UUUUUUUU\225\225UUUUUUUU\225\225^```^```^```^```^```^```^```^```^```^```UUUUUUUU\225\225UUUUUUUU\225\225^```^```UUUUUUUU\225\225UUUUUUUU\225\225^```^```^```^```^```^```^```^```^```^```UUUUUUUU\225\225UUUUUUUU\225\225^```^```UUUUUUUU\225\225UUUUUUUU\225\225^```^```^```^```^```^```^```^```^```^```UUUUUUUU\225\225UUUUUUUU\225\225^```^```UUUUUUUU\225\225UUUUUUUU\225\225^```^```^```^```^```^```^```^```^```^```UUUUUUUU\225\225UUUUUUUU\225\225^```^```UUUUUUUU\225\225UUUUUUUU\225\225^```^```^```^```^```^```^```^```^```^```UUUUUUUU\225\225UUUUUUUU\225\225^```^```UUUUUUUU\225\225UUUUUUUU\225\225^```^```^```^```^```^```^```^```^```^```UUUUUUUU\225\225UUUUUUUU\225\225^```^```UUUUUUUU\225\225UUUUUUUU\225\225^```^```^```^```^```^```^```^```^```^```UUUUUUUU\225\225UUUUUUUU\225\225^```^```UUUUUUUU\225\225UUUUUUUU\225\225!", "NLUUNLUU!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "^```^```^```^```^```^```^```^```^```^```HHHHHHHH\225\225HHHHHHHH\225\225^```^```HHHHHHHH\225\225HHHHHHHH\225\225^```^```^```^```^```^```^```^```^```^```HHHHHHHH\225\225HHHHHHHH\225\225^```^```HHHHHHHH\225\225HHHHHHHH\225\225^```^```^```^```^```^```^```^```^```^```HHHHHHHH\225\225HHHHHHHH\225\225^```^```HHHHHHHH\225\225HHHHHHHH\225\225^```^```^```^```^```^```^```^```^```^```HHHHHHHH\225\225HHHHHHHH\225\225^```^```HHHHHHHH\225\225HHHHHHHH\225\225^```^```^```^```^```^```^```^```^```^```HHHHHHHH\225\225HHHHHHHH\225\225^```^```HHHHHHHH\225\225HHHHHHHH\225\225^```^```^```^```^```^```^```^```^```^```HHHHHHHH\225\225HHHHHHHH\225\225^```^```HHHHHHHH\225\225HHHHHHHH\225\225^```^```^```^```^```^```^```^```^```^```HHHHHHHH\225\225HHHHHHHH\225\225^```^```HHHHHHHH\225\225HHHHHHHH\225\225^```^```^```^```^```^```^```^```^```^```HHHHHHHH\225\225HHHHHHHH\225\225^```^```HHHHHHHH\225\225HHHHHHHH\225\225!" + "'", str2, "^```^```^```^```^```^```^```^```^```^```HHHHHHHH\225\225HHHHHHHH\225\225^```^```HHHHHHHH\225\225HHHHHHHH\225\225^```^```^```^```^```^```^```^```^```^```HHHHHHHH\225\225HHHHHHHH\225\225^```^```HHHHHHHH\225\225HHHHHHHH\225\225^```^```^```^```^```^```^```^```^```^```HHHHHHHH\225\225HHHHHHHH\225\225^```^```HHHHHHHH\225\225HHHHHHHH\225\225^```^```^```^```^```^```^```^```^```^```HHHHHHHH\225\225HHHHHHHH\225\225^```^```HHHHHHHH\225\225HHHHHHHH\225\225^```^```^```^```^```^```^```^```^```^```HHHHHHHH\225\225HHHHHHHH\225\225^```^```HHHHHHHH\225\225HHHHHHHH\225\225^```^```^```^```^```^```^```^```^```^```HHHHHHHH\225\225HHHHHHHH\225\225^```^```HHHHHHHH\225\225HHHHHHHH\225\225^```^```^```^```^```^```^```^```^```^```HHHHHHHH\225\225HHHHHHHH\225\225^```^```HHHHHHHH\225\225HHHHHHHH\225\225^```^```^```^```^```^```^```^```^```^```HHHHHHHH\225\225HHHHHHHH\225\225^```^```HHHHHHHH\225\225HHHHHHHH\225\225!");
    }

    @Test
    public void test10426() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10426");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.decode("\276!\300\300\276!\300\300\276!\300\300\276!\300\300\276!\300\300\276!\300\300\276!\300\300\276!\300\300\276!\300\300\276!\300\300\276!\300\300\276!\300\300\276!\300\300\276!\300\300\276!\300\300\276!\300\300\276!\300\300\276!\300\300\276!\300\300\276!\300\300\276!\300\300\276!\300\300\276!\300\300\276!\300\300\276!\300\300\276!\300\300\276!\300\300\276!\300\300\276!\300\300\276!\300\300\276!\300\300\276!\300\300!", "\367!nullnull\367!nullnull!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\276!nullnull\276!nullnull\276!nullnull\276!nullnull\276!nullnull\276!nullnull\276!nullnull\276!nullnull\276!nullnull\276!nullnull\276!nullnull\276!nullnull\276!nullnull\276!nullnull\276!nullnull\276!nullnull\276!nullnull\276!nullnull\276!nullnull\276!nullnull\276!nullnull\276!nullnull\276!nullnull\276!nullnull\276!nullnull\276!nullnull\276!nullnull\276!nullnull\276!nullnull\276!nullnull\276!nullnull\276!nullnull!" + "'", str2, "\276!nullnull\276!nullnull\276!nullnull\276!nullnull\276!nullnull\276!nullnull\276!nullnull\276!nullnull\276!nullnull\276!nullnull\276!nullnull\276!nullnull\276!nullnull\276!nullnull\276!nullnull\276!nullnull\276!nullnull\276!nullnull\276!nullnull\276!nullnull\276!nullnull\276!nullnull\276!nullnull\276!nullnull\276!nullnull\276!nullnull\276!nullnull\276!nullnull\276!nullnull\276!nullnull\276!nullnull\276!nullnull!");
    }

    @Test
    public void test10427() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10427");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.encode("\u036e\u0346\u036e\u0346\u036e\u0346\u036e\u0346\u036e\u0346\u036e\u0346\u036e\u0346\u036e\u0346\u036e\u0346\u036e\u0346\u036e\u0346\u036e\u0346\u036e\u0346\u036e\u0346\u036e\u0346\u036e\u0346\u036e\u0346\u036e\u0346\u036e\u0346\u036e\u0346\u036e\u0346\u036e\u0346\u036e\u0346\u036e\u0346\u0366\u0365\u0368\u0368\u0366\u0365\u0368\u0368\u0366\u0365\u0368\u0368\u0366\u0365\u0368\u0368\u036e\u0346\u036e\u0346\u036e\u0346\u036e\u0346\u036e\u0346\u036e\u0346\u036e\u0346\u036e\u0346\u036e\u0346\u036e\u0346\u036e\u0346\u036e\u0346\u036e\u0346\u036e\u0346\u036e\u0346\u036e\u0346\u036e\u0346\u036e\u0346\u036e\u0346\u036e\u0346\u036e\u0346\u036e\u0346\u036e\u0346\u036e\u0346\u0366\u0365\u0368\u0368\u0366\u0365\u0368\u0368!", "!\244!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\u036e\u0346\u036e\u0346\u036e\u0346\u036e\u0346\u036e\u0346\u036e\u0346\u036e\u0346\u036e\u0346\u036e\u0346\u036e\u0346\u036e\u0346\u036e\u0346\u036e\u0346\u036e\u0346\u036e\u0346\u036e\u0346\u036e\u0346\u036e\u0346\u036e\u0346\u036e\u0346\u036e\u0346\u036e\u0346\u036e\u0346\u036e\u0346\u0366\u0365\u0368\u0368\u0366\u0365\u0368\u0368\u0366\u0365\u0368\u0368\u0366\u0365\u0368\u0368\u036e\u0346\u036e\u0346\u036e\u0346\u036e\u0346\u036e\u0346\u036e\u0346\u036e\u0346\u036e\u0346\u036e\u0346\u036e\u0346\u036e\u0346\u036e\u0346\u036e\u0346\u036e\u0346\u036e\u0346\u036e\u0346\u036e\u0346\u036e\u0346\u036e\u0346\u036e\u0346\u036e\u0346\u036e\u0346\u036e\u0346\u036e\u0346\u0366\u0365\u0368\u0368\u0366\u0365\u0368\u0368!" + "'", str2, "\u036e\u0346\u036e\u0346\u036e\u0346\u036e\u0346\u036e\u0346\u036e\u0346\u036e\u0346\u036e\u0346\u036e\u0346\u036e\u0346\u036e\u0346\u036e\u0346\u036e\u0346\u036e\u0346\u036e\u0346\u036e\u0346\u036e\u0346\u036e\u0346\u036e\u0346\u036e\u0346\u036e\u0346\u036e\u0346\u036e\u0346\u036e\u0346\u0366\u0365\u0368\u0368\u0366\u0365\u0368\u0368\u0366\u0365\u0368\u0368\u0366\u0365\u0368\u0368\u036e\u0346\u036e\u0346\u036e\u0346\u036e\u0346\u036e\u0346\u036e\u0346\u036e\u0346\u036e\u0346\u036e\u0346\u036e\u0346\u036e\u0346\u036e\u0346\u036e\u0346\u036e\u0346\u036e\u0346\u036e\u0346\u036e\u0346\u036e\u0346\u036e\u0346\u036e\u0346\u036e\u0346\u036e\u0346\u036e\u0346\u036e\u0346\u0366\u0365\u0368\u0368\u0366\u0365\u0368\u0368!");
    }

    @Test
    public void test10428() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10428");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.decode("]NNNNNNNNNNNNNNNNNNNN]]NNNNNNNN]]NNNNNNNN]]NNNNNNNN]]]NNNNNNNNNNNNNNNNNNNN]]NNNNNNNN]]!", "nullnullXXXXXXXXnullnullXXXXXXXXnullnullXXXXXXXXnullnullXXXXXXXXnullnullXXXXXXXXnullnullXXXXXXXXnullnullXXXXXXXXnullnullXXXXXXXX!!nullnullXXXXXXXXnullnullXXXXXXXXnullnullXXXXXXXXnullnullXXXXXXXXnullnullXXXXXXXXnullnullXXXXXXXXnullnullXXXXXXXXnullnullXXXXXXXX!!nullnullXXXXXXXXnullnullXXXXXXXXnullnullXXXXXXXXnullnullXXXXXXXXnullnullXXXXXXXXnullnullXXXXXXXXnullnullXXXXXXXXnullnullXXXXXXXXnullnullXXXXXXXXnullnullXXXXXXXXnullnullXXXXXXXXnullnullXXXXXXXXnullnullXXXXXXXXnullnullXXXXXXXXnullnullXXXXXXXXnullnullXXXXXXXX!!nullnullXXXXXXXXnullnullXXXXXXXXnullnullXXXXXXXXnullnullXXXXXXXXnullnullXXXXXXXXnullnullXXXXXXXXnullnullXXXXXXXXnullnullXXXXXXXX!!nullnullXXXXXXXXnullnullXXXXXXXXnullnullXXXXXXXXnullnullXXXXXXXXnullnullXXXXXXXXnullnullXXXXXXXXnullnullXXXXXXXXnullnullXXXXXXXX!");
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\u033d\u033d\u033d\u033d\u033d\u033d\u033d\u033d\u033d\u033d\u033d\u033d\u033d\u033d\u033d\u033d\u033d\u033d\u033d\u033d\u033d\u033d\u033d\u033d\u033d\u033d\u033d\u033d\u033d\u033d\u033d\u033d\u033d\u033d\u033d\u033d\u033d\u033d\u033d\u033d\u033d\u033d\u033d\u033d\u033d\u033d\u033d\u033d\u033d\u033d\u033d\u033d\u033d\u033d\u033d\u033d\u033d\u033d\u033d\u033d\u033d\u033d\u033d\u033d\u033d\u033d\u033d\u033d\u033d\u033d\u033d\u033d]]!" + "'", str2, "\u033d\u033d\u033d\u033d\u033d\u033d\u033d\u033d\u033d\u033d\u033d\u033d\u033d\u033d\u033d\u033d\u033d\u033d\u033d\u033d\u033d\u033d\u033d\u033d\u033d\u033d\u033d\u033d\u033d\u033d\u033d\u033d\u033d\u033d\u033d\u033d\u033d\u033d\u033d\u033d\u033d\u033d\u033d\u033d\u033d\u033d\u033d\u033d\u033d\u033d\u033d\u033d\u033d\u033d\u033d\u033d\u033d\u033d\u033d\u033d\u033d\u033d\u033d\u033d\u033d\u033d\u033d\u033d\u033d\u033d\u033d\u033d]]!");
    }

    @Test
    public void test10429() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10429");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.decode("\u0143\u0145\u0145\u0143\u0145\u0145\u0143\u0145\u0145\u0143\u0145\u0145\u0143\u0145\u0145\u0143\u0145\u0145\u0143\u0145\u0145\u0143\u0145\u0145!", "!~n!nnn!nn!~n!nnn!nn!~n!nnn!nn!~n!nnn!nn!~n!nnn!nn!~n!nnn!nn!~n!nnn!nn!~n!nnn!nn!!!~n!nnn!nn!~n!nnn!nn!~n!nnn!nn!~n!nnn!nn!~n!nnn!nn!~n!nnn!nn!~n!nnn!nn!~n!nnn!nn!!!");
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnull!" + "'", str2, "!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnull!");
    }

    @Test
    public void test10430() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10430");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.encode("!HHHH!", "IJLLIJLL!!IJLLIJLL!!IJLLIJLLIJLLIJLL!!IJLLIJLL!!IJLLIJLL!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "!LLLL!" + "'", str2, "!LLLL!");
    }

    @Test
    public void test10431() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10431");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.decode("", "\204LNUU\204\204\204LNUU\204\204!!\204LNUU\204\204\204LNUU\204\204!!\204LNUU\204\204\204LNUU\204\204\204LNUU\204\204\204LNUU\204\204!!\204LNUU\204\204\204LNUU\204\204!!\204LNUU\204\204\204LNUU\204\204!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
    }

    @Test
    public void test10432() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10432");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.encode("!u!", "UNLLUNLLUNLLUNLL\236\276\276UNLLUNLLUNLLUNLL\236\276\276!!UNLLUNLLUNLLUNLL\236\276\276UNLLUNLLUNLLUNLL\236\276\276!!UNLLUNLLUNLLUNLL\236\276\276UNLLUNLLUNLLUNLL\236\276\276UNLLUNLLUNLLUNLL\236\276\276UNLLUNLLUNLLUNLL\236\276\276!!UNLLUNLLUNLLUNLL\236\276\276UNLLUNLLUNLLUNLL\236\276\276!!UNLLUNLLUNLLUNLL\236\276\276UNLLUNLLUNLLUNLL\236\276\276!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "!U!" + "'", str2, "!U!");
    }

    @Test
    public void test10433() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10433");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.encode("\253\254\256\256nullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull\253\254\256\256nullnullnullnullnullnullnullnull!", "~}\200\200~}\200\200ULLLULLLULLLULLLULLLULLLULLLULLLJJULLLULLLULLLULLLULLLULLLULLLULLLJJ~}\200\200~}\200\200ULLLULLLULLLULLLULLLULLLULLLULLLJJULLLULLLULLLULLLULLLULLLULLLULLLJJ~}\200\200~}\200\200ULLLULLLULLLULLLULLLULLLULLLULLLJJULLLULLLULLLULLLULLLULLLULLLULLLJJ~}\200\200~}\200\200ULLLULLLULLLULLLULLLULLLULLLULLLJJULLLULLLULLLULLLULLLULLLULLLULLLJJ~}\200\200~}\200\200ULLLULLLULLLULLLULLLULLLULLLULLLJJULLLULLLULLLULLLULLLULLLULLLULLLJJ~}\200\200~}\200\200ULLLULLLULLLULLLULLLULLLULLLULLLJJULLLULLLULLLULLLULLLULLLULLLULLLJJ~}\200\200~}\200\200ULLLULLLULLLULLLULLLULLLULLLULLLJJULLLULLLULLLULLLULLLULLLULLLULLLJJ~}\200\200~}\200\200ULLLULLLULLLULLLULLLULLLULLLULLLJJULLLULLLULLLULLLULLLULLLULLLULLLJJ!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\253\254\256\256LLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLL\253\254\256\256LLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLL!" + "'", str2, "\253\254\256\256LLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLL\253\254\256\256LLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLL!");
    }

    @Test
    public void test10434() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10434");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.decode("\u0346\u0348\u0348\u0348\u011e\u011c\u011c\u011c\u0348\u0346\u0346!", "nullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull\276nullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull\276\276nullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull\276\276nullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull\276\276nullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull\276\276nullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull\276nullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull\276\276nullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull\276\276!");
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\u0346\u0348\u0348\u0348\u0348\u0346\u0346!" + "'", str2, "\u0346\u0348\u0348\u0348\u0348\u0346\u0346!");
    }

    @Test
    public void test10435() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10435");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.encode("nullfehhnullnullnullfehhnullnull!!nullfehhnullnullnullfehhnullnull!!nullfehhnullnullnullfehhnullnullnullfehhnullnullnullfehhnullnull!!nullfehhnullnullnullfehhnullnull!!nullfehhnullnullnullfehhnullnull!", "null]^^null]^^null]^^null]^^null]^^null]^^null]^^null]^^!null]]!null]]null]^^null]^^null]^^null]^^null]^^null]^^null]^^null]^^!null]]!null]]null]^^null]^^null]^^null]^^null]^^null]^^null]^^null]^^!null]]!null]]null]^^null]^^null]^^null]^^null]^^null]^^null]^^null]^^!null]]!null]]null]^^null]^^null]^^null]^^null]^^null]^^null]^^null]^^!null]]!null]]null]^^null]^^null]^^null]^^null]^^null]^^null]^^null]^^!null]]!null]]null]^^null]^^null]^^null]^^null]^^null]^^null]^^null]^^!null]]!null]]null]^^null]^^null]^^null]^^null]^^null]^^null]^^null]^^!null]]!null]]!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "LLUULU]]LLUULLUULLUULU]]LLUULLUU!!LLUULU]]LLUULLUULLUULU]]LLUULLUU!!LLUULU]]LLUULLUULLUULU]]LLUULLUULLUULU]]LLUULLUULLUULU]]LLUULLUU!!LLUULU]]LLUULLUULLUULU]]LLUULLUU!!LLUULU]]LLUULLUULLUULU]]LLUULLUU!" + "'", str2, "LLUULU]]LLUULLUULLUULU]]LLUULLUU!!LLUULU]]LLUULLUULLUULU]]LLUULLUU!!LLUULU]]LLUULLUULLUULU]]LLUULLUULLUULU]]LLUULLUULLUULU]]LLUULLUU!!LLUULU]]LLUULLUULLUULU]]LLUULLUU!!LLUULU]]LLUULLUULLUULU]]LLUULLUU!");
    }

    @Test
    public void test10436() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10436");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.encode("EHHHHEFFHEFFHEFFEHHHHEFFHEFFHEFFEHHHHEFFHEFFHEFFEHHHHEFFHEFFHEFFEHHHHEFFHEFFHEFFEHHHHEFFHEFFHEFFEHHHHEFFHEFFHEFFEHHHHEFFHEFFHEFF!", "\u03de\u03dd\u03e0\u03e0\u03de\u03dd\u03e0\u03e0\u03de\u03dd\u03e0\u03e0\u03de\u03dd\u03e0\u03e0\u03de\u03dd\u03e0\u03e0\u03de\u03dd\u03e0\u03e0\u03de\u03dd\u03e0\u03e0\u03de\u03dd\u03e0\u03e0\u0317\u031a\u03de\u03dd\u03e0\u03e0\u03de\u03dd\u03e0\u03e0\u0317\u031a\u03de\u03dd\u03e0\u03e0\u03de\u03dd\u03e0\u03e0\u03de\u03dd\u03e0\u03e0\u03de\u03dd\u03e0\u03e0\u03de\u03dd\u03e0\u03e0\u03de\u03dd\u03e0\u03e0\u03de\u03dd\u03e0\u03e0\u03de\u03dd\u03e0\u03e0\u03de\u03dd\u03e0\u03e0\u03de\u03dd\u03e0\u03e0\u0317\u031a\u03de\u03dd\u03e0\u03e0\u03de\u03dd\u03e0\u03e0\u0317\u031a\u03de\u03dd\u03e0\u03e0\u03de\u03dd\u03e0\u03e0!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\u03de\u03e0\u03e0\u03e0\u03e0\u03de\u03dc\u03dc\u03e0\u03de\u03dc\u03dc\u03e0\u03de\u03dc\u03dc\u03de\u03e0\u03e0\u03e0\u03e0\u03de\u03dc\u03dc\u03e0\u03de\u03dc\u03dc\u03e0\u03de\u03dc\u03dc\u03de\u03e0\u03e0\u03e0\u03e0\u03de\u03dc\u03dc\u03e0\u03de\u03dc\u03dc\u03e0\u03de\u03dc\u03dc\u03de\u03e0\u03e0\u03e0\u03e0\u03de\u03dc\u03dc\u03e0\u03de\u03dc\u03dc\u03e0\u03de\u03dc\u03dc\u03de\u03e0\u03e0\u03e0\u03e0\u03de\u03dc\u03dc\u03e0\u03de\u03dc\u03dc\u03e0\u03de\u03dc\u03dc\u03de\u03e0\u03e0\u03e0\u03e0\u03de\u03dc\u03dc\u03e0\u03de\u03dc\u03dc\u03e0\u03de\u03dc\u03dc\u03de\u03e0\u03e0\u03e0\u03e0\u03de\u03dc\u03dc\u03e0\u03de\u03dc\u03dc\u03e0\u03de\u03dc\u03dc\u03de\u03e0\u03e0\u03e0\u03e0\u03de\u03dc\u03dc\u03e0\u03de\u03dc\u03dc\u03e0\u03de\u03dc\u03dc!" + "'", str2, "\u03de\u03e0\u03e0\u03e0\u03e0\u03de\u03dc\u03dc\u03e0\u03de\u03dc\u03dc\u03e0\u03de\u03dc\u03dc\u03de\u03e0\u03e0\u03e0\u03e0\u03de\u03dc\u03dc\u03e0\u03de\u03dc\u03dc\u03e0\u03de\u03dc\u03dc\u03de\u03e0\u03e0\u03e0\u03e0\u03de\u03dc\u03dc\u03e0\u03de\u03dc\u03dc\u03e0\u03de\u03dc\u03dc\u03de\u03e0\u03e0\u03e0\u03e0\u03de\u03dc\u03dc\u03e0\u03de\u03dc\u03dc\u03e0\u03de\u03dc\u03dc\u03de\u03e0\u03e0\u03e0\u03e0\u03de\u03dc\u03dc\u03e0\u03de\u03dc\u03dc\u03e0\u03de\u03dc\u03dc\u03de\u03e0\u03e0\u03e0\u03e0\u03de\u03dc\u03dc\u03e0\u03de\u03dc\u03dc\u03e0\u03de\u03dc\u03dc\u03de\u03e0\u03e0\u03e0\u03e0\u03de\u03dc\u03dc\u03e0\u03de\u03dc\u03dc\u03e0\u03de\u03dc\u03dc\u03de\u03e0\u03e0\u03e0\u03e0\u03de\u03dc\u03dc\u03e0\u03de\u03dc\u03dc\u03e0\u03de\u03dc\u03dc!");
    }

    @Test
    public void test10437() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10437");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.encode("!u!", "\246\246\250\250\246\246\250\250\246\246\250\250\246\246\250\250\246\246\250\250\246\246\250\250\246\246\250\250\246\246\250\250\246\246\250\250\246\246\250\250\246\246\250\250\246\246\250\250\246\246\250\250\246\246\250\250\246\246\250\250\246\246\250\250\246\246\250\250\246\246\250\250\246\246\250\250\246\246\250\250\246\246\250\250\246\246\250\250\246\246\250\250\246\246\250\250\246\246\250\250\246\246\250\250\246\246\250\250\246\246\250\250\246\246\250\250\246\246\250\250\246\246\250\250\246\246\250\250!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "!\246!" + "'", str2, "!\246!");
    }

    @Test
    public void test10438() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10438");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.encode
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\254\253\256\256\254\253\256\256\254\253\256\256\254\253\256\256\254\253\256\256\254\253\256\256\254\253\256\256\254\253\256\256!" + "'", str2, "\254\253\256\256\254\253\256\256\254\253\256\256\254\253\256\256\254\253\256\256\254\253\256\256\254\253\256\256\254\253\256\256!");
    }

    @Test
    public void test10439() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10439");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.encode("", "\u031a\u031a\u031a\u031a\u031a\u031a\u031a\u031a\u031a\u031a\u031a\u031a\u031a\u031a\u031a\u031a\u031a\u031a\u031a\u031a\u031a\u031a\u031a\u031a\u031a\u031a\u031a\u031a\u031a\u031a\u031a\u031a!!!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
    }

    @Test
    public void test10440() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10440");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.decode("L\253LLL\253\u035e\u035eL\253LLL\253\u035e\u035e!!!!L\253LLL\253\u035e\u035eL\253LLL\253\u035e\u035e!", "`uuu`uuu`uuu`uuu`uuu`uuu`uuu`uuu`uuu`uuu`uuu`uuu`uuu`uuu`uuu`uuu`uuunullnullnull`uuunullnullnull`uuunullnullnull`uuunullnullnull`uuunullnullnull`uuunullnullnull`uuunullnullnull`uuunullnullnull`uuunullnullnull`uuunullnullnull`uuunullnullnull`uuunullnullnull`uuunullnullnull`uuunullnullnull`uuunullnullnull`uuunullnullnull`uuu`uuu`uuu`uuu`uuu`uuu`uuu`uuu`uuu`uuu`uuu`uuu`uuu`uuu`uuu`uuu`uuunullnullnull`uuunullnullnull`uuunullnullnull`uuunullnullnull`uuunullnullnull`uuunullnullnull`uuunullnullnull`uuunullnullnull!");
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\u0240\253\u0240\u0240\u0240\253\u0240\u0240\u035e\u035e\u0240\253\u0240\u0240\u0240\253\u0240\u0240\u035e\u035e\u0240\253\u0240\u0240\u0240\253\u0240\u0240\u035e\u035e\u0240\253\u0240\u0240\u0240\253\u0240\u0240\u035e\u035e!" + "'", str2, "\u0240\253\u0240\u0240\u0240\253\u0240\u0240\u035e\u035e\u0240\253\u0240\u0240\u0240\253\u0240\u0240\u035e\u035e\u0240\253\u0240\u0240\u0240\253\u0240\u0240\u035e\u035e\u0240\253\u0240\u0240\u0240\253\u0240\u0240\u035e\u035e!");
    }

    @Test
    public void test10441() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10441");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.encode("~}\200\200~}\200\200UELLUELLuuUELLUELLuu~}\200\200~}\200\200UELLUELLuuUELLUELLuu~}\200\200~}\200\200UELLUELLuuUELLUELLuu~}\200\200~}\200\200UELLUELLuuUELLUELLuu~}\200\200~}\200\200UELLUELLuuUELLUELLuu~}\200\200~}\200\200UELLUELLuuUELLUELLuu~}\200\200~}\200\200UELLUELLuuUELLUELLuu~}\200\200~}\200\200UELLUELLuuUELLUELLuu!", "\u031a\u031a\u031a\u031a\u031a\u031a\u031a\u031a\200\u031a\u031a\u031a\u031a\u031a\u031a\u031a\u031a]]!");
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "~}\200\200~}\200\200\u031a\u031a\u031a\u031a\u031a\u031a\u031a\u031a]]~}\200\200~}\200\200\u031a\u031a\u031a\u031a\u031a\u031a\u031a\u031a]]~}\200\200~}\200\200\u031a\u031a\u031a\u031a\u031a\u031a\u031a\u031a]]~}\200\200~}\200\200\u031a\u031a\u031a\u031a\u031a\u031a\u031a\u031a]]~}\200\200~}\200\200\u031a\u031a\u031a\u031a\u031a\u031a\u031a\u031a]]~}\200\200~}\200\200\u031a\u031a\u031a\u031a\u031a\u031a\u031a\u031a]]~}\200\200~}\200\200\u031a\u031a\u031a\u031a\u031a\u031a\u031a\u031a]]~}\200\200~}\200\200\u031a\u031a\u031a\u031a\u031a\u031a\u031a\u031a]]!" + "'", str2, "~}\200\200~}\200\200\u031a\u031a\u031a\u031a\u031a\u031a\u031a\u031a]]~}\200\200~}\200\200\u031a\u031a\u031a\u031a\u031a\u031a\u031a\u031a]]~}\200\200~}\200\200\u031a\u031a\u031a\u031a\u031a\u031a\u031a\u031a]]~}\200\200~}\200\200\u031a\u031a\u031a\u031a\u031a\u031a\u031a\u031a]]~}\200\200~}\200\200\u031a\u031a\u031a\u031a\u031a\u031a\u031a\u031a]]~}\200\200~}\200\200\u031a\u031a\u031a\u031a\u031a\u031a\u031a\u031a]]~}\200\200~}\200\200\u031a\u031a\u031a\u031a\u031a\u031a\u031a\u031a]]~}\200\200~}\200\200\u031a\u031a\u031a\u031a\u031a\u031a\u031a\u031a]]!");
    }

    @Test
    public void test10442() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10442");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.decode("\u0346\u0348\u0348\u0348\u0348\u0346\u0346!", "\260\256\253\253\260\256\253\253\260\256\253\253\260\256\253\253uruuuruu\253\253uruuuruu\253\253uruuuruu\253\253uruuuruu\253\253\260\256\253\253\260\256\253\253\260\256\253\253\260\256\253\253uruuuruu\253\253uruuuruu\253\253!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\u0346\u0348\u0348\u0348\u0348\u0346\u0346!" + "'", str2, "\u0346\u0348\u0348\u0348\u0348\u0346\u0346!");
    }

    @Test
    public void test10443() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10443");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.encode
        org.junit.Assert.assertEquals("'" + strstr
    }

    @Test
    public void test10444() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10444");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.encode("\u0366\u0365\u0368\u0368\u020c\u020e\u020e\u020e\u020c\u020e\u020e\u020e\u020c\u020e\u020e\u020e\u020c\u020e\u020e\u020e!!\200\200\u0346\u0348\u0348!", "");
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\u0366\u0365\u0368\u0368nullnullnullnullnullnullnullnull!!nullnullnullnullnullnullnullnull!!\200\200\u0346\u0348\u0348!" + "'", str2, "\u0366\u0365\u0368\u0368nullnullnullnullnullnullnullnull!!nullnullnullnullnullnullnullnull!!\200\200\u0346\u0348\u0348!");
    }

    @Test
    public void test10445() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10445");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.encode("!!!!]]!!]]!!]]!!]]!!]]!!]]!!]]!!]]!!!!]]!!]]!!]]!!]]!!]]!!]]!!]]!!]]!!!!]]!!]]!!]]!!]]!!]]!!]]!!]]!!]]!!!!]]!!]]!!]]!!]]!!]]!!]]!!]]!!]]!!!!]]!!]]!!]]!!]]!!]]!!]]!!]]!!]]!!!!]]!!]]!!]]!!]]!!]]!!]]!!]]!!]]!!!!]]!!]]!!]]!!]]!!]]!!]]!!]]!!]]!!!!]]!!]]!!]]!!]]!!]]!!]]!!]]!!]]!", "~}\200\200~}\200\200LUUUNLLLNLLLNLLLLUUUNLLLNLLLNLLL\230\230LUUUNLLLNLLLNLLLLUUUNLLLNLLLNLLL\230\230~}\200\200~}\200\200LUUUNLLLNLLLNLLLLUUUNLLLNLLLNLLL\230\230LUUUNLLLNLLLNLLLLUUUNLLLNLLLNLLL\230\230~}\200\200~}\200\200LUUUNLLLNLLLNLLLLUUUNLLLNLLLNLLL\230\230LUUUNLLLNLLLNLLLLUUUNLLLNLLLNLLL\230\230~}\200\200~}\200\200LUUUNLLLNLLLNLLLLUUUNLLLNLLLNLLL\230\230LUUUNLLLNLLLNLLLLUUUNLLLNLLLNLLL\230\230~}\200\200~}\200\200LUUUNLLLNLLLNLLLLUUUNLLLNLLLNLLL\230\230LUUUNLLLNLLLNLLLLUUUNLLLNLLLNLLL\230\230~}\200\200~}\200\200LUUUNLLLNLLLNLLLLUUUNLLLNLLLNLLL\230\230LUUUNLLLNLLLNLLLLUUUNLLLNLLLNLLL\230\230~}\200\200~}\200\200LUUUNLLLNLLLNLLLLUUUNLLLNLLLNLLL\230\230LUUUNLLLNLLLNLLLLUUUNLLLNLLLNLLL\230\230~}\200\200~}\200\200LUUUNLLLNLLLNLLLLUUUNLLLNLLLNLLL\230\230LUUUNLLLNLLLNLLLLUUUNLLLNLLLNLLL\230\230!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "!!!!]]!!]]!!]]!!]]!!]]!!]]!!]]!!]]!!!!]]!!]]!!]]!!]]!!]]!!]]!!]]!!]]!!!!]]!!]]!!]]!!]]!!]]!!]]!!]]!!]]!!!!]]!!]]!!]]!!]]!!]]!!]]!!]]!!]]!!!!]]!!]]!!]]!!]]!!]]!!]]!!]]!!]]!!!!]]!!]]!!]]!!]]!!]]!!]]!!]]!!]]!!!!]]!!]]!!]]!!]]!!]]!!]]!!]]!!]]!!!!]]!!]]!!]]!!]]!!]]!!]]!!]]!!]]!" + "'", str2, "!!!!]]!!]]!!]]!!]]!!]]!!]]!!]]!!]]!!!!]]!!]]!!]]!!]]!!]]!!]]!!]]!!]]!!!!]]!!]]!!]]!!]]!!]]!!]]!!]]!!]]!!!!]]!!]]!!]]!!]]!!]]!!]]!!]]!!]]!!!!]]!!]]!!]]!!]]!!]]!!]]!!]]!!]]!!!!]]!!]]!!]]!!]]!!]]!!]]!!]]!!]]!!!!]]!!]]!!]]!!]]!!]]!!]]!!]]!!]]!!!!]]!!]]!!]]!!]]!!]]!!]]!!]]!!]]!");
    }

    @Test
    public void test10446() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10446");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.decode("\232\220\231\231\200~~\232\220\231\231\200~~\232\220\231\231\232\220\231\231\232\220\231\231\200~~\232\220\231\231\200~~\232\220\231\231\232\220\231\231!!\232\220\231\231\200~~\232\220\231\231\200~~\232\220\231\231\232\220\231\231\232\220\231\231\200~~\232\220\231\231\200~~\232\220\231\231\232\220\231\231!!\232\220\231\231\200~~\232\220\231\231\200~~\232\220\231\231\232\220\231\231\232\220\231\231\200~~\232\220\231\231\200~~\232\220\231\231\232\220\231\231\232\220\231\231\200~~\232\220\231\231\200~~\232\220\231\231\232\220\231\231\232\220\231\231\200~~\232\220\231\231\200~~\232\220\231\231\232\220\231\231!!\232\220\231\231\200~~\232\220\231\231\200~~\232\220\231\231\232\220\231\231\232\220\231\231\200~~\232\220\231\231\200~~\232\220\231\231\232\220\231\231!!\232\220\231\231\200~~\232\220\231\231\200~~\232\220\231\231\232\220\231\231\232\220\231\231\200~~\232\220\231\231\200~~\232\220\231\231\232\220\231\231!", "llllllllllllllllLLLLLLLLLLLLllllllllllllllllLLLLLLLLLLLLllllllllllllllllLLLLLLLLLLLLllllllllllllllllLLLLLLLLLLLLllllllllllllllllLLLLLLLLLLLLllllllllllllllllLLLLLLLLLLLLllllllllllllllllLLLLLLLLLLLLllllllllllllllllLLLLLLLLLLLL!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\232\220\231\231\200~~\232\220\231\231\200~~\232\220\231\231\232\220\231\231\232\220\231\231\200~~\232\220\231\231\200~~\232\220\231\231\232\220\231\231!!\232\220\231\231\200~~\232\220\231\231\200~~\232\220\231\231\232\220\231\231\232\220\231\231\200~~\232\220\231\231\200~~\232\220\231\231\232\220\231\231!!\232\220\231\231\200~~\232\220\231\231\200~~\232\220\231\231\232\220\231\231\232\220\231\231\200~~\232\220\231\231\200~~\232\220\231\231\232\220\231\231\232\220\231\231\200~~\232\220\231\231\200~~\232\220\231\231\232\220\231\231\232\220\231\231\200~~\232\220\231\231\200~~\232\220\231\231\232\220\231\231!!\232\220\231\231\200~~\232\220\231\231\200~~\232\220\231\231\232\220\231\231\232\220\231\231\200~~\232\220\231\231\200~~\232\220\231\231\232\220\231\231!!\232\220\231\231\200~~\232\220\231\231\200~~\232\220\231\231\232\220\231\231\232\220\231\231\200~~\232\220\231\231\200~~\232\220\231\231\232\220\231\231!" + "'", str2, "\232\220\231\231\200~~\232\220\231\231\200~~\232\220\231\231\232\220\231\231\232\220\231\231\200~~\232\220\231\231\200~~\232\220\231\231\232\220\231\231!!\232\220\231\231\200~~\232\220\231\231\200~~\232\220\231\231\232\220\231\231\232\220\231\231\200~~\232\220\231\231\200~~\232\220\231\231\232\220\231\231!!\232\220\231\231\200~~\232\220\231\231\200~~\232\220\231\231\232\220\231\231\232\220\231\231\200~~\232\220\231\231\200~~\232\220\231\231\232\220\231\231\232\220\231\231\200~~\232\220\231\231\200~~\232\220\231\231\232\220\231\231\232\220\231\231\200~~\232\220\231\231\200~~\232\220\231\231\232\220\231\231!!\232\220\231\231\200~~\232\220\231\231\200~~\232\220\231\231\232\220\231\231\232\220\231\231\200~~\232\220\231\231\200~~\232\220\231\231\232\220\231\231!!\232\220\231\231\200~~\232\220\231\231\200~~\232\220\231\231\232\220\231\231\232\220\231\231\200~~\232\220\231\231\200~~\232\220\231\231\232\220\231\231!");
    }

    @Test
    public void test10447() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10447");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.encode("\u0348\u0348\u016c\u016e\u016e\u016c\u016e\u016e\u016c\u016e\u016e\u0348\u0348\u016c\u016e\u016e\u016c\u016e\u016e\u016c\u016e\u016e\u0348\u0348\u016c\u016e\u016e\u016c\u016e\u016e\u016c\u016e\u016e\u0348\u0348\u016c\u016e\u016e\u016c\u016e\u016e\u016c\u016e\u016e\200\u0348\u0348\u016c\u016e\u016e\u016c\u016e\u016e\u016c\u016e\u016e\u0348\u0348\u016c\u016e\u016e\u016c\u016e\u016e\u016c\u016e\u016e\u0348\u0348\u016c\u016e\u016e\u016c\u016e\u016e\u016c\u016e\u016e\u0348\u0348\u016c\u016e\u016e\u016c\u016e\u016e\u016c\u016e\u016e]]!", "}~\200\200}~\200\200!nullnullnullnullnullnullnullnullnullnullnullnull!nullnullnullnullnullnullnullnullnullnullnullnull!nullnullnullnullnullnullnullnullnullnullnullnull!nullnullnullnullnullnullnullnullnullnullnullnull!nullnullnullnullnullnullnullnullnullnullnullnull!nullnullnullnullnullnullnullnullnullnullnullnull!nullnullnullnullnullnullnullnullnullnullnullnull!nullnullnullnullnullnullnullnullnullnullnullnull}~\200\200}~\200\200!nullnullnullnullnullnullnullnullnullnullnullnull!nullnullnullnullnullnullnullnullnullnullnullnull!nullnullnullnullnullnullnullnullnullnullnullnull!nullnullnullnullnullnullnullnullnullnullnullnull!nullnullnullnullnullnullnullnullnullnullnullnull!nullnullnullnullnullnullnullnullnullnullnullnull!nullnullnullnullnullnullnullnullnullnullnullnull!nullnullnullnullnullnullnullnullnullnullnullnull!");
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348~~NLLLULLNLLLULLNLLLULL\200\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348~~NLLLULLNLLLULLNLLLULL]]!" + "'", str2, "\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348~~NLLLULLNLLLULLNLLLULL\200\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348~~NLLLULLNLLLULLNLLLULL]]!");
    }

    @Test
    public void test10448() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10448");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.decode("hnullffhnullffhnullffhnullffhnullffhnullffhnullffhnullffhnullffhnullffhnullffhnullffhnullffhnullff!", "");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "nullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull!" + "'", str2, "nullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull!");
    }

    @Test
    public void test10449() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10449");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.decode("\u0178\u0178\u0178\u0178\u0178\u0178\u0178\u0178\u0178\u0178\u0178\u0178\u0178\u0178\u0178\u0178\u0178\u0178\u0178\u0178\u0178\u0178\u0178\u0178!", "\u0366\u0365\u0368\u0368\300\335\335\335\u0346\u0348\u0348!");
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "nullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull!" + "'", str2, "nullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull!");
    }

    @Test
    public void test10450() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10450");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.decode("\215\216\230\230\u014e\u014c\u014e\u014c\u014e\u014c~~\215\216\230\230\u014e\u014c\u014e\u014c\u014e\u014c~~\215\216\230\230\u014e\u014c\u014e\u014c\u014e\u014c~~\215\216\230\230\u014e\u014c\u014e\u014c\u014e\u014c~~\215\216\230\230\u014e\u014c\u014e\u014c\u014e\u014c~~\215\216\230\230\u014e\u014c\u014e\u014c\u014e\u014c~~\215\216\230\230\u014e\u014c\u014e\u014c\u014e\u014c~~\215\216\230\230\u014e\u014c\u014e\u014c\u014e\u014c~~!", "LNLLLNLL!!LNLLLNLL!!LNLLLNLLLNLLLNLL!!LNLLLNLL!!LNLLLNLL!");
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\215\216\230\230nullnull~~nullnull~~nullnull~~\215\216\230\230nullnull~~nullnull~~nullnull~~\215\216\230\230nullnull~~nullnull~~nullnull~~\215\216\230\230nullnull~~nullnull~~nullnull~~\215\216\230\230nullnull~~nullnull~~nullnull~~\215\216\230\230nullnull~~nullnull~~nullnull~~\215\216\230\230nullnull~~nullnull~~nullnull~~\215\216\230\230nullnull~~nullnull~~nullnull~~!" + "'", str2, "\215\216\230\230nullnull~~nullnull~~nullnull~~\215\216\230\230nullnull~~nullnull~~nullnull~~\215\216\230\230nullnull~~nullnull~~nullnull~~\215\216\230\230nullnull~~nullnull~~nullnull~~\215\216\230\230nullnull~~nullnull~~nullnull~~\215\216\230\230nullnull~~nullnull~~nullnull~~\215\216\230\230nullnull~~nullnull~~nullnull~~\215\216\230\230nullnull~~nullnull~~nullnull~~!");
    }

    @Test
    public void test10451() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10451");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.encode("U!VVU!VVLLU!VVU!VVLLU!VVU!VVLLU!VVU!VVLLU!VVU!VVLLU!VVU!VVLLU!VVU!VVLLU!VVU!VVLL!", "`UUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUU`UUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUU!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "U!UUU!UUUUU!UUU!UUUUU!UUU!UUUUU!UUU!UUUUU!UUU!UUUUU!UUU!UUUUU!UUU!UUUUU!UUU!UUUU!" + "'", str2, "U!UUU!UUUUU!UUU!UUUUU!UUU!UUUUU!UUU!UUUUU!UUU!UUUUU!UUU!UUUUU!UUU!UUUUU!UUU!UUUU!");
    }

    @Test
    public void test10452() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10452");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.encode("nullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull!", "~}\200\200~}\200\200\u0379\u0379\u0379\u0379~}\200\200~}\200\200\u0379\u0379\u0379\u0379~}\200\200~}\200\200\u0379\u0379\u0379\u0379~}\200\200~}\200\200\u0379\u0379\u0379\u0379~}\200\200~}\200\200\u0379\u0379\u0379\u0379~}\200\200~}\200\200\u0379\u0379\u0379\u0379~}\200\200~}\200\200\u0379\u0379\u0379\u0379~}\200\200~}\200\200\u0379\u0379\u0379\u0379!");
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\u0379\u0379\u0379\u0379\u0379\u0379\u0379\u0379\u0379\u0379\u0379\u0379\u0379\u0379\u0379\u0379\u0379\u0379\u0379\u0379\u0379\u0379\u0379\u0379\u0379\u0379\u0379\u0379\u0379\u0379\u0379\u0379\u0379\u0379\u0379\u0379\u0379\u0379\u0379\u0379\u0379\u0379\u0379\u0379\u0379\u0379\u0379\u0379\u0379\u0379\u0379\u0379\u0379\u0379\u0379\u0379\u0379\u0379\u0379\u0379\u0379\u0379\u0379\u0379\u0379\u0379\u0379\u0379\u0379\u0379\u0379\u0379\u0379\u0379\u0379\u0379\u0379\u0379\u0379\u0379\u0379\u0379\u0379\u0379\u0379\u0379\u0379\u0379!" + "'", str2, "\u0379\u0379\u0379\u0379\u0379\u0379\u0379\u0379\u0379\u0379\u0379\u0379\u0379\u0379\u0379\u0379\u0379\u0379\u0379\u0379\u0379\u0379\u0379\u0379\u0379\u0379\u0379\u0379\u0379\u0379\u0379\u0379\u0379\u0379\u0379\u0379\u0379\u0379\u0379\u0379\u0379\u0379\u0379\u0379\u0379\u0379\u0379\u0379\u0379\u0379\u0379\u0379\u0379\u0379\u0379\u0379\u0379\u0379\u0379\u0379\u0379\u0379\u0379\u0379\u0379\u0379\u0379\u0379\u0379\u0379\u0379\u0379\u0379\u0379\u0379\u0379\u0379\u0379\u0379\u0379\u0379\u0379\u0379\u0379\u0379\u0379\u0379\u0379!");
    }

    @Test
    public void test10453() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10453");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.decode("~}\200\200~}\200\200LL~~}\200\200LL~~}\200\200\230\230LL~~}\200\200LL~~}\200\200\230\230~}\200\200~}\200\200LL~~}\200\200LL~~}\200\200\230\230LL~~}\200\200LL~~}\200\200\230\230~}\200\200~}\200\200LL~~}\200\200LL~~}\200\200\230\230LL~~}\200\200LL~~}\200\200\230\230~}\200\200~}\200\200LL~~}\200\200LL~~}\200\200\230\230LL~~}\200\200LL~~}\200\200\230\230~}\200\200~}\200\200LL~~}\200\200LL~~}\200\200\230\230LL~~}\200\200LL~~}\200\200\230\230~}\200\200~}\200\200LL~~}\200\200LL~~}\200\200\230\230LL~~}\200\200LL~~}\200\200\230\230~}\200\200~}\200\200LL~~}\200\200LL~~}\200\200\230\230LL~~}\200\200LL~~}\200\200\230\230~}\200\200~}\200\200LL~~}\200\200LL~~}\200\200\230\230LL~~}\200\200LL~~}\200\200\230\230!", "UULL~UULLUULLUULL~UULLUULL!!UULL~UULLUULLUULL~UULLUULL!!UULL~UULLUULLUULL~UULLUULLUULL~UULLUULLUULL~UULLUULL!!UULL~UULLUULLUULL~UULLUULL!!UULL~UULLUULLUULL~UULLUULL!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "~}\200\200~}\200\200\344\344~~}\200\200\344\344~~}\200\200\230\230\344\344~~}\200\200\344\344~~}\200\200\230\230~}\200\200~}\200\200\344\344~~}\200\200\344\344~~}\200\200\230\230\344\344~~}\200\200\344\344~~}\200\200\230\230~}\200\200~}\200\200\344\344~~}\200\200\344\344~~}\200\200\230\230\344\344~~}\200\200\344\344~~}\200\200\230\230~}\200\200~}\200\200\344\344~~}\200\200\344\344~~}\200\200\230\230\344\344~~}\200\200\344\344~~}\200\200\230\230~}\200\200~}\200\200\344\344~~}\200\200\344\344~~}\200\200\230\230\344\344~~}\200\200\344\344~~}\200\200\230\230~}\200\200~}\200\200\344\344~~}\200\200\344\344~~}\200\200\230\230\344\344~~}\200\200\344\344~~}\200\200\230\230~}\200\200~}\200\200\344\344~~}\200\200\344\344~~}\200\200\230\230\344\344~~}\200\200\344\344~~}\200\200\230\230~}\200\200~}\200\200\344\344~~}\200\200\344\344~~}\200\200\230\230\344\344~~}\200\200\344\344~~}\200\200\230\230!" + "'", str2, "~}\200\200~}\200\200\344\344~~}\200\200\344\344~~}\200\200\230\230\344\344~~}\200\200\344\344~~}\200\200\230\230~}\200\200~}\200\200\344\344~~}\200\200\344\344~~}\200\200\230\230\344\344~~}\200\200\344\344~~}\200\200\230\230~}\200\200~}\200\200\344\344~~}\200\200\344\344~~}\200\200\230\230\344\344~~}\200\200\344\344~~}\200\200\230\230~}\200\200~}\200\200\344\344~~}\200\200\344\344~~}\200\200\230\230\344\344~~}\200\200\344\344~~}\200\200\230\230~}\200\200~}\200\200\344\344~~}\200\200\344\344~~}\200\200\230\230\344\344~~}\200\200\344\344~~}\200\200\230\230~}\200\200~}\200\200\344\344~~}\200\200\344\344~~}\200\200\230\230\344\344~~}\200\200\344\344~~}\200\200\230\230~}\200\200~}\200\200\344\344~~}\200\200\344\344~~}\200\200\230\230\344\344~~}\200\200\344\344~~}\200\200\230\230~}\200\200~}\200\200\344\344~~}\200\200\344\344~~}\200\200\230\230\344\344~~}\200\200\344\344~~}\200\200\230\230!");
    }

    @Test
    public void test10454() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10454");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.decode("!~!", "~}\200\200~}\200\200EE~~}\200\200EE~~}\200\200\230\230EE~~}\200\200EE~~}\200\200\230\230~}\200\200~}\200\200EE~~}\200\200EE~~}\200\200\230\230EE~~}\200\200EE~~}\200\200\230\230~}\200\200~}\200\200EE~~}\200\200EE~~}\200\200\230\230EE~~}\200\200EE~~}\200\200\230\230~}\200\200~}\200\200EE~~}\200\200EE~~}\200\200\230\230EE~~}\200\200EE~~}\200\200\230\230~}\200\200~}\200\200EE~~}\200\200EE~~}\200\200\230\230EE~~}\200\200EE~~}\200\200\230\230~}\200\200~}\200\200EE~~}\200\200EE~~}\200\200\230\230EE~~}\200\200EE~~}\200\200\230\230~}\200\200~}\200\200EE~~}\200\200EE~~}\200\200\230\230EE~~}\200\200EE~~}\200\200\230\230~}\200\200~}\200\200EE~~}\200\200EE~~}\200\200\230\230EE~~}\200\200EE~~}\200\200\230\230!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "!~!" + "'", str2, "!~!");
    }

    @Test
    public void test10455() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10455");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.decode("}}}}}}}}}}}}}}}}\200}}`}}}}}}}}}}}}}}}}]]!", "L\275\275\275\275L\275\275\275L\275\275\275L\275\275\275\275L\275\275\275L\275\275\275L\275\275\275L\275\275\275L\275\275\275\275L\275\275\275L\275\275\275L\275\275\275\275L\275\275\275L\275\275\275L\275\275\275L\275\275\275L\275\275\275\275L\275\275\275L\275\275\275L\275\275\275\275L\275\275\275L\275\275\275L\275\275\275L\275\275\275L\275\275\275\275L\275\275\275L\275\275\275L\275\275\275\275L\275\275\275L\275\275\275L\275\275\275L\275\275\275L\275\275\275\275L\275\275\275L\275\275\275L\275\275\275\275L\275\275\275L\275\275\275L\275\275\275L\275\275\275L\275\275\275\275L\275\275\275L\275\275\275L\275\275\275\275L\275\275\275L\275\275\275L\275\275\275L\275\275\275L\275\275\275\275L\275\275\275L\275\275\275L\275\275\275\275L\275\275\275L\275\275\275L\275\275\275L\275\275\275L\275\275\275\275L\275\275\275L\275\275\275L\275\275\275\275L\275\275\275L\275\275\275L\275\275\275L\275\275\275!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "}}}}}}}}}}}}}}}}\200}}`}}}}}}}}}}}}}}}}]]!" + "'", str2, "}}}}}}}}}}}}}}}}\200}}`}}}}}}}}}}}}}}}}]]!");
    }

    @Test
    public void test10456() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10456");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.encode("\u0153\u0153\u0153\u0153\u0153\u0153\u0153\u0153\u0153\u0153\u0153\u0153nullnullnullnull!", "\u013d\u0346\u013d\u0346\u013d\u0346\u013d\u0346\u013d\u0346\u013d\u0346\u013d\u0346\u013d\u0346\u013d\u0346\u013d\u0346\u013d\u0346\u013d\u0346\u013d\u0346\u013d\u0346\u013d\u0346\u013d\u0346\u013d\u0346\u013d\u0346\u013d\u0346\u013d\u0346\u013d\u0346\u013d\u0346\u013d\u0346\u013d\u0346\u013d\u0346\u013d\u0346\u013d\u0346\u013d\u0346\u013d\u0346\u013d\u0346\u013d\u0346\u013d\u0346\u013d\u0346\u013d\u0346\u013d\u0346\u013d\u0346\u013d\u0346\u013d\u0346\u013d\u0346\u013d\u0346\u013d\u0346\u013d\u0346\u013d\u0346\u013d\u0346\u013d\u0346\u013d\u0346\u013d\u0346\u013d\u0346\u013d\u0346\u013d\u0346\u013d\u0346\u013d\u0346\u013d\u0346\u013d\u0346\u013d\u0346\u013d\u0346\u013d\u0346\u013d\u0346\u013d\u0346\u013d\u0346\u013d\u0346\u013d\u0346\u013d\u0346\u013d\u0346~~!!!");
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\u0346\u0346\u013e\u0346\u0346\u0346\u0346\u0346\u0346\u013e\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u013e\u0346\u0346\u0346\u0346\u0346\u0346\u013e\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u013e\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u013e\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u013e\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u013e\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u013e\u0346\u0346\u0346\u0346\u0346\u0346\u013e\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u013e\u0346\u0346\u0346\u0346\u0346\u0346\u013e\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346!" + "'", str2, "\u0346\u0346\u013e\u0346\u0346\u0346\u0346\u0346\u0346\u013e\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u013e\u0346\u0346\u0346\u0346\u0346\u0346\u013e\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u013e\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u013e\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u013e\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u013e\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u013e\u0346\u0346\u0346\u0346\u0346\u0346\u013e\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u013e\u0346\u0346\u0346\u0346\u0346\u0346\u013e\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346!");
    }

    @Test
    public void test10457() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10457");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.encode("\200\u0348\u0348\200\u0348\u0348!!\200\u0348\u0348\200\u0348\u0348!!\200\u0348\u0348\200\u0348\u0348\200\u0348\u0348\200\u0348\u0348!!\200\u0348\u0348\200\u0348\u0348!!\200\u0348\u0348\200\u0348\u0348!", "\253\254\256\256\u017b\u0178\u0179\u0179\u017b\u0178\u0179\u0179\u017b\u0178\u0179\u0179\u017b\u0178\u0179\u0179\253\254\256\256\u017b\u0178\u0179\u0179\u017b\u0178\u0179\u0179!");
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\200\u017b\u0179\u0179\u0179\u0348\u0348\200\u017b\u0179\u0179\u0179\u0348\u0348!!\200\u017b\u0179\u0179\u0179\u0348\u0348\200\u017b\u0179\u0179\u0179\u0348\u0348!!\200\u017b\u0179\u0179\u0179\u0348\u0348\200\u017b\u0179\u0179\u0179\u0348\u0348\200\u017b\u0179\u0179\u0179\u0348\u0348\200\u017b\u0179\u0179\u0179\u0348\u0348!!\200\u017b\u0179\u0179\u0179\u0348\u0348\200\u017b\u0179\u0179\u0179\u0348\u0348!!\200\u017b\u0179\u0179\u0179\u0348\u0348\200\u017b\u0179\u0179\u0179\u0348\u0348!" + "'", str2, "\200\u017b\u0179\u0179\u0179\u0348\u0348\200\u017b\u0179\u0179\u0179\u0348\u0348!!\200\u017b\u0179\u0179\u0179\u0348\u0348\200\u017b\u0179\u0179\u0179\u0348\u0348!!\200\u017b\u0179\u0179\u0179\u0348\u0348\200\u017b\u0179\u0179\u0179\u0348\u0348\200\u017b\u0179\u0179\u0179\u0348\u0348\200\u017b\u0179\u0179\u0179\u0348\u0348!!\200\u017b\u0179\u0179\u0179\u0348\u0348\200\u017b\u0179\u0179\u0179\u0348\u0348!!\200\u017b\u0179\u0179\u0179\u0348\u0348\200\u017b\u0179\u0179\u0179\u0348\u0348!");
    }

    @Test
    public void test10458() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10458");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.decode("stvvstvv\255\256\260\260\255\256\260\260stvvstvv\255\256\260\260\255\256\260\260stvvstvv\255\256\260\260\255\256\260\260stvvstvv\255\256\260\260\255\256\260\260stvvstvv\255\256\260\260\255\256\260\260stvvstvv\255\256\260\260\255\256\260\260stvvstvv\255\256\260\260\255\256\260\260stvvstvv\255\256\260\260\255\256\260\260!", "LL~LNN~LNNLL~LNN~LNNLL~LNN~LNNLL~LNN~LNNLL~LNN~LNNLL~LNN~LNNLL~LNN~LNNLL~LNN~LNN!!LL~LNN~LNNLL~LNN~LNNLL~LNN~LNNLL~LNN~LNNLL~LNN~LNNLL~LNN~LNNLL~LNN~LNNLL~LNN~LNN!!LL~LNN~LNNLL~LNN~LNNLL~LNN~LNNLL~LNN~LNNLL~LNN~LNNLL~LNN~LNNLL~LNN~LNNLL~LNN~LNNLL~LNN~LNNLL~LNN~LNNLL~LNN~LNNLL~LNN~LNNLL~LNN~LNNLL~LNN~LNNLL~LNN~LNNLL~LNN~LNN!!LL~LNN~LNNLL~LNN~LNNLL~LNN~LNNLL~LNN~LNNLL~LNN~LNNLL~LNN~LNNLL~LNN~LNNLL~LNN~LNN!!LL~LNN~LNNLL~LNN~LNNLL~LNN~LNNLL~LNN~LNNLL~LNN~LNNLL~LNN~LNNLL~LNN~LNNLL~LNN~LNN!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "nullnullnullnullnullnullnullnull\255\256\260\260\255\256\260\260nullnullnullnullnullnullnullnull\255\256\260\260\255\256\260\260nullnullnullnullnullnullnullnull\255\256\260\260\255\256\260\260nullnullnullnullnullnullnullnull\255\256\260\260\255\256\260\260nullnullnullnullnullnullnullnull\255\256\260\260\255\256\260\260nullnullnullnullnullnullnullnull\255\256\260\260\255\256\260\260nullnullnullnullnullnullnullnull\255\256\260\260\255\256\260\260nullnullnullnullnullnullnullnull\255\256\260\260\255\256\260\260!" + "'", str2, "nullnullnullnullnullnullnullnull\255\256\260\260\255\256\260\260nullnullnullnullnullnullnullnull\255\256\260\260\255\256\260\260nullnullnullnullnullnullnullnull\255\256\260\260\255\256\260\260nullnullnullnullnullnullnullnull\255\256\260\260\255\256\260\260nullnullnullnullnullnullnullnull\255\256\260\260\255\256\260\260nullnullnullnullnullnullnullnull\255\256\260\260\255\256\260\260nullnullnullnullnullnullnullnull\255\256\260\260\255\256\260\260nullnullnullnullnullnullnullnull\255\256\260\260\255\256\260\260!");
    }

    @Test
    public void test10459() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10459");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.decode("null~\225\225\230\230\225\225\230\230\225\225\230\230\225\225null~\225\225\230\230\225\225\230\230\225\225\230\230\225\225null~\225\225\230\230\225\225\230\230\225\225\230\230\225\225null~\225\225\230\230\225\225\230\230\225\225\230\230\225\225null~\225\225\230\230\225\225\230\230\225\225\230\230\225\225null~\225\225\230\230\225\225\230\230\225\225\230\230\225\225null~\225\225\230\230\225\225\230\230\225\225\230\230\225\225null~\225\225\230\230\225\225\230\230\225\225\230\230\225\225!", "\275UNLLUNLLUNLL\275UNLLUNLLUNLL\275UNLLUNLLUNLL\275UNLLUNLLUNLLUNLLUNLL\275\275UNLLUNLL\275\275UNLLUNLL\275\275UNLLUNLL\275\275\275UNLLUNLLUNLL\275UNLLUNLLUNLL\275UNLLUNLLUNLL\275UNLLUNLLUNLLUNLLUNLL\275\275UNLLUNLL\275\275!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\u0100\377\u0102\u0102~\225\225\230\230\225\225\230\230\225\225\230\230\225\225\u0100\377\u0102\u0102~\225\225\230\230\225\225\230\230\225\225\230\230\225\225\u0100\377\u0102\u0102~\225\225\230\230\225\225\230\230\225\225\230\230\225\225\u0100\377\u0102\u0102~\225\225\230\230\225\225\230\230\225\225\230\230\225\225\u0100\377\u0102\u0102~\225\225\230\230\225\225\230\230\225\225\230\230\225\225\u0100\377\u0102\u0102~\225\225\230\230\225\225\230\230\225\225\230\230\225\225\u0100\377\u0102\u0102~\225\225\230\230\225\225\230\230\225\225\230\230\225\225\u0100\377\u0102\u0102~\225\225\230\230\225\225\230\230\225\225\230\230\225\225!" + "'", str2, "\u0100\377\u0102\u0102~\225\225\230\230\225\225\230\230\225\225\230\230\225\225\u0100\377\u0102\u0102~\225\225\230\230\225\225\230\230\225\225\230\230\225\225\u0100\377\u0102\u0102~\225\225\230\230\225\225\230\230\225\225\230\230\225\225\u0100\377\u0102\u0102~\225\225\230\230\225\225\230\230\225\225\230\230\225\225\u0100\377\u0102\u0102~\225\225\230\230\225\225\230\230\225\225\230\230\225\225\u0100\377\u0102\u0102~\225\225\230\230\225\225\230\230\225\225\230\230\225\225\u0100\377\u0102\u0102~\225\225\230\230\225\225\230\230\225\225\230\230\225\225\u0100\377\u0102\u0102~\225\225\230\230\225\225\230\230\225\225\230\230\225\225!");
    }

    @Test
    public void test10460() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10460");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.encode("LUUULUUULUUULUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUULUUULUUULUUULUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUU!", "!\253\256\256\u01c5\u01c6\u01ca\u01ca\u01c5\u01c6\u01ca\u01ca\u01c5\u01c6\u01ca\u01ca\u01c5\u01c6\u01ca\u01ca\u01c5\u01c6\u01ca\u01ca\u01c5\u01c6\u01ca\u01ca\u01c5\u01c6\u01ca\u01ca\u01c5\u01c6\u01ca\u01ca\u01c5\u01c6\u01ca\u01ca\u01c5\u01c6\u01ca\u01ca\u01c5\u01c6\u01ca\u01ca\u01c5\u01c6\u01ca\u01canullnull!\253\256\256!\253\256\256!\253\256\256!\253\256\256!\253\256\256!\253\256\256!\253\256\256!\253\256\256!\253\256\256!\253\256\256!\253\256\256!\253\256\256!\253\256\256!\253\256\256!\253\256\256!\253\256\256!\253\256\256\u01c5\u01c6\u01ca\u01ca\u01c5\u01c6\u01ca\u01ca\u01c5\u01c6\u01ca\u01ca\u01c5\u01c6\u01ca\u01ca\u01c5\u01c6\u01ca\u01ca\u01c5\u01c6\u01ca\u01ca\u01c5\u01c6\u01ca\u01ca\u01c5\u01c6\u01ca\u01ca\u01c5\u01c6\u01ca\u01ca\u01c5\u01c6\u01ca\u01ca\u01c5\u01c6\u01ca\u01ca\u01c5\u01c6\u01ca\u01canullnull!\253\256\256!\253\256\256!\253\256\256!\253\256\256!\253\256\256!\253\256\256!\253\256\256!\253\256\256!");
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\u01ca\u01ca\u01ca\u01ca\u01ca\u01ca\u01ca\u01ca\u01ca\u01ca\u01ca\u01ca\u01ca\u01ca\u01ca\u01ca\u01ca\u01ca\u01ca\u01ca\u01ca\u01ca\u01ca\u01ca\u01ca\u01ca\u01ca\u01ca\u01ca\u01ca\u01ca\u01ca\u01ca\u01ca\u01ca\u01ca\u01ca\u01ca\u01ca\u01ca\u01ca\u01ca\u01ca\u01ca\u01ca\u01ca\u01ca\u01ca\u01ca\u01ca\u01ca\u01ca\u01ca\u01ca\u01ca\u01ca\u01ca\u01ca\u01ca\u01ca\u01ca\u01ca\u01ca\u01ca\u01ca\u01ca\u01ca\u01ca\u01ca\u01ca\u01ca\u01ca\u01ca\u01ca\u01ca\u01ca\u01ca\u01ca\u01ca\u01ca\u01ca\u01ca\u01ca\u01ca\u01ca\u01ca\u01ca\u01ca\u01ca\u01ca\u01ca\u01ca\u01ca\u01ca\u01ca\u01ca\u01ca\u01ca\u01ca\u01ca\u01ca\u01ca\u01ca\u01ca\u01ca\u01ca\u01ca\u01ca\u01ca\u01ca\u01ca\u01ca\u01ca\u01ca\u01ca\u01ca\u01ca\u01ca\u01ca\u01ca!" + "'", str2, "\u01ca\u01ca\u01ca\u01ca\u01ca\u01ca\u01ca\u01ca\u01ca\u01ca\u01ca\u01ca\u01ca\u01ca\u01ca\u01ca\u01ca\u01ca\u01ca\u01ca\u01ca\u01ca\u01ca\u01ca\u01ca\u01ca\u01ca\u01ca\u01ca\u01ca\u01ca\u01ca\u01ca\u01ca\u01ca\u01ca\u01ca\u01ca\u01ca\u01ca\u01ca\u01ca\u01ca\u01ca\u01ca\u01ca\u01ca\u01ca\u01ca\u01ca\u01ca\u01ca\u01ca\u01ca\u01ca\u01ca\u01ca\u01ca\u01ca\u01ca\u01ca\u01ca\u01ca\u01ca\u01ca\u01ca\u01ca\u01ca\u01ca\u01ca\u01ca\u01ca\u01ca\u01ca\u01ca\u01ca\u01ca\u01ca\u01ca\u01ca\u01ca\u01ca\u01ca\u01ca\u01ca\u01ca\u01ca\u01ca\u01ca\u01ca\u01ca\u01ca\u01ca\u01ca\u01ca\u01ca\u01ca\u01ca\u01ca\u01ca\u01ca\u01ca\u01ca\u01ca\u01ca\u01ca\u01ca\u01ca\u01ca\u01ca\u01ca\u01ca\u01ca\u01ca\u01ca\u01ca\u01ca\u01ca\u01ca\u01ca!");
    }

    @Test
    public void test10461() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10461");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.encode("\246\246!!\246\246!!!", "\u0170\u0170\u0170\u0170nullnullnullnullnullnullnullnullnull!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\246\246!!\246\246!!!" + "'", str2, "\246\246!!\246\246!!!");
    }

    @Test
    public void test10462() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10462");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.encode("\275\200\u0128\u0128\275\200\u0128\u0128\275\200\u0128\u0128\275\200\u0128\u0128\275\200\u0128\u0128\275\200\u0128\u0128\275\200\u0128\u0128\275\200\u0128\u0128\275\200\u0128\u0128\275\200\u0128\u0128\275\200\u0128\u0128\275\200\u0128\u0128\275\200\u0128\u0128\275\200\u0128\u0128\275\200\u0128\u0128\275\200\u0128\u0128\275\200\u0128\u0128\275\200\u0128\u0128\275\200\u0128\u0128\275\200\u0128\u0128\275\200\u0128\u0128\275\200\u0128\u0128\275\200\u0128\u0128\275\200\u0128\u0128\275\200\u0128\u0128\275\200\u0128\u0128\275\200\u0128\u0128\275\200\u0128\u0128\275\200\u0128\u0128\275\200\u0128\u0128\275\200\u0128\u0128\275\200\u0128\u0128!", "!!~~!!~~!!!!~~!!~~!!!!~~!!~~!!~~!!~~!!!!~~!!~~!!!!~~!!~~!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\275\200nullnull\275\200nullnull\275\200nullnull\275\200nullnull\275\200nullnull\275\200nullnull\275\200nullnull\275\200nullnull\275\200nullnull\275\200nullnull\275\200nullnull\275\200nullnull\275\200nullnull\275\200nullnull\275\200nullnull\275\200nullnull\275\200nullnull\275\200nullnull\275\200nullnull\275\200nullnull\275\200nullnull\275\200nullnull\275\200nullnull\275\200nullnull\275\200nullnull\275\200nullnull\275\200nullnull\275\200nullnull\275\200nullnull\275\200nullnull\275\200nullnull\275\200nullnull!" + "'", str2, "\275\200nullnull\275\200nullnull\275\200nullnull\275\200nullnull\275\200nullnull\275\200nullnull\275\200nullnull\275\200nullnull\275\200nullnull\275\200nullnull\275\200nullnull\275\200nullnull\275\200nullnull\275\200nullnull\275\200nullnull\275\200nullnull\275\200nullnull\275\200nullnull\275\200nullnull\275\200nullnull\275\200nullnull\275\200nullnull\275\200nullnull\275\200nullnull\275\200nullnull\275\200nullnull\275\200nullnull\275\200nullnull\275\200nullnull\275\200nullnull\275\200nullnull\275\200nullnull!");
    }

    @Test
    public void test10463() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10463");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.encode("NNLLNNLLNNLLNNLLNNLLNNLLNNLLNNLL!!NNLLNNLLNNLLNNLLNNLLNNLLNNLLNNLL!!NNLLNNLLNNLLNNLLNNLLNNLLNNLLNNLLNNLLNNLLNNLLNNLLNNLLNNLLNNLLNNLL!!NNLLNNLLNNLLNNLLNNLLNNLLNNLLNNLL!!NNLLNNLLNNLLNNLLNNLLNNLLNNLLNNLL!", "");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "nullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull!!nullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull!!nullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull!!nullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull!!nullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull!" + "'", str2, "nullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull!!nullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull!!nullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull!!nullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull!!nullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull!");
    }

    @Test
    public void test10464() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10464");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.decode("\u01af\u01af\u01af\u01af\u01af\u01af\u01af\u01af\u01af\u01af\u01af\u01af]]nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!!", "nullnull\214\214nullnull\214\214nullnull\214\214nullnull\214\214nullnull\214\214nullnull\214\214nullnull\214\214nullnull\214\214!");
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\253\254\256\256\253\254\256\256!!nullnull]]nullnull]]nullnullnullnull]]nullnull]]nullnull]]\253\254\256\256\253\254\256\256!!\253\254\256\256\253\254\256\256!!\253\254\256\256\253\254\256\256!!\253\254\256\256\253\254\256\256!!\253\254\256\256\253\254\256\256!!\253\254\256\256\253\254\256\256!!\253\254\256\256\253\254\256\256!!\253\254\256\256\253\254\256\256!!!" + "'", str2, "\253\254\256\256\253\254\256\256!!nullnull]]nullnull]]nullnullnullnull]]nullnull]]nullnull]]\253\254\256\256\253\254\256\256!!\253\254\256\256\253\254\256\256!!\253\254\256\256\253\254\256\256!!\253\254\256\256\253\254\256\256!!\253\254\256\256\253\254\256\256!!\253\254\256\256\253\254\256\256!!\253\254\256\256\253\254\256\256!!\253\254\256\256\253\254\256\256!!!");
    }

    @Test
    public void test10465() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10465");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.encode("\u0346\u0348\u0348\u0348\342\u0348\u0346\u
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\u0346\u0348\u0348\u0348LL\200LLL\200LLL\200\u0348\u0346\u0346!" + "'", str2, "\u0346\u0348\u0348\u0348LL\200LLL\200LLL\200\u0348\u0346\u0346!");
    }

    @Test
    public void test10466() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10466");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.encode("\275\276\u017d\u017d\275\276\u017d\u017d\275\276\u017d\u017d\275\276\u017d\u017d\275\276\u017d\u017d\275\276\u017d\u017d\275\276\u017d\u017d\275\276\u017d\u017d\275\276\u017d\u017d\275\276\u017d\u017d\275\276\u017d\u017d\275\276\u017d\u017d\275\276\u017d\u017d\275\276\u017d\u017d\275\276\u017d\u017d\275\276\u017d\u017d\275\276\u017d\u017d\275\276\u017d\u017d\275\276\u017d\u017d\275\276\u017d\u017d!", "!!xx!!xx!!xx!!xx!!xx!!xx!!xx!!xx!!!!xx!!xx!!xx!!xx!!xx!!xx!!xx!!xx!!!!xx!!xx!!xx!!xx!!xx!!xx!!xx!!xx!!xx!!xx!!xx!!xx!!xx!!xx!!xx!!xx!!!!xx!!xx!!xx!!xx!!xx!!xx!!xx!!xx!!!!xx!!xx!!xx!!xx!!xx!!xx!!xx!!xx!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\275\276nullnull\275\276nullnull\275\276nullnull\275\276nullnull\275\276nullnull\275\276nullnull\275\276nullnull\275\276nullnull\275\276nullnull\275\276nullnull\275\276nullnull\275\276nullnull\275\276nullnull\275\276nullnull\275\276nullnull\275\276nullnull\275\276nullnull\275\276nullnull\275\276nullnull\275\276nullnull!" + "'", str2, "\275\276nullnull\275\276nullnull\275\276nullnull\275\276nullnull\275\276nullnull\275\276nullnull\275\276nullnull\275\276nullnull\275\276nullnull\275\276nullnull\275\276nullnull\275\276nullnull\275\276nullnull\275\276nullnull\275\276nullnull\275\276nullnull\275\276nullnull\275\276nullnull\275\276nullnull\275\276nullnull!");
    }

    @Test
    public void test10467() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10467");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.decode("!}}}!}}}!}}}!}}}!}}}!}}}!}}}!}}}!!!}}}!}}}!}}}!}}}!}}}!}}}!}}}!}}}!!!}}}!}}}!}}}!}}}!}}}!}}}!}}}!}}}!}}}!}}}!}}}!}}}!}}}!}}}!}}}!}}}!!!}}}!}}}!}}}!}}}!}}}!}}}!}}}!}}}!!!}}}!}}}!}}}!}}}!}}}!}}}!}}}!}}}!", "MM!!MM!!MM!!MM!!MM!!MM!!MM!!MM!!MM!!MM!!MM!!MM!!MM!!MM!!MM!!MM!!MM!!MM!!MM!!MM!!MM!!MM!!MM!!MM!!MM!!MM!!MM!!MM!!MM!!MM!!MM!!MM!!!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "!}}}!}}}!}}}!}}}!}}}!}}}!}}}!}}}!!!}}}!}}}!}}}!}}}!}}}!}}}!}}}!}}}!!!}}}!}}}!}}}!}}}!}}}!}}}!}}}!}}}!}}}!}}}!}}}!}}}!}}}!}}}!}}}!}}}!!!}}}!}}}!}}}!}}}!}}}!}}}!}}}!}}}!!!}}}!}}}!}}}!}}}!}}}!}}}!}}}!}}}!" + "'", str2, "!}}}!}}}!}}}!}}}!}}}!}}}!}}}!}}}!!!}}}!}}}!}}}!}}}!}}}!}}}!}}}!}}}!!!}}}!}}}!}}}!}}}!}}}!}}}!}}}!}}}!}}}!}}}!}}}!}}}!}}}!}}}!}}}!}}}!!!}}}!}}}!}}}!}}}!}}}!}}}!}}}!}}}!!!}}}!}}}!}}}!}}}!}}}!}}}!}}}!}}}!");
    }

    @Test
    public void test10468() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10468");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.decode("\u0366\u0365\u0368\u0368\300\300!!\300\300!!\300\300!!\300\300\u0346\u0348\u0348!", "U!~~U!~~!!U!~~U!~~!!U!~~U!~~!!U!~~U!~~!!U!~~U!~~!!U!~~U!~~!!U!~~U!~~!!U!~~U!~~!!U!~~U!~~!!U!~~U!~~!!U!~~U!~~!!U!~~U!~~!!U!~~U!~~!!U!~~U!~~!!U!~~U!~~!!U!~~U!~~!!U!~~U!~~!!U!~~U!~~!!U!~~U!~~!!U!~~U!~~!!U!~~U!~~!!U!~~U!~~!!U!~~U!~~!!U!~~U!~~!!U!~~U!~~!!U!~~U!~~!!U!~~U!~~!!U!~~U!~~!!U!~~U!~~!!U!~~U!~~!!U!~~U!~~!!U!~~U!~~!!!");
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\u0366\u0365\u0368\u0368\u0346\u0348\u0348!" + "'", str2, "\u0366\u0365\u0368\u0368\u0346\u0348\u0348!");
    }

    @Test
    public void test10469() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10469");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.decode("\u0346\u0348\u0348\u0348\u0348\u0346\u0346!", "\215}\215\215\215}\215\215L\270\270\270L\270\270\270L\270\270\270L\270\270\270\215}\215\215\215}\215\215!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\u0346\u0348\u0348\u0348\u0348\u0346\u0346!" + "'", str2, "\u0346\u0348\u0348\u0348\u0348\u0346\u0346!");
    }

    @Test
    public void test10470() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10470");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.encode("UNLLUNLL!!UNLLUNLL!!UNLLUNLL!!UNLLUNLL!!UNLLUNLL!!UNLLUNLL!!UNLLUNLL!!UNLLUNLL!!UNLLUNLL!!UNLLUNLL!!UNLLUNLL!!UNLLUNLL!!UNLLUNLL!!UNLLUNLL!!UNLLUNLL!!UNLLUNLL!!UNLLUNLL!!UNLLUNLL!!UNLLUNLL!!UNLLUNLL!!UNLLUNLL!!UNLLUNLL!!UNLLUNLL!!UNLLUNLL!!UNLLUNLL!!UNLLUNLL!!UNLLUNLL!!UNLLUNLL!!UNLLUNLL!!UNLLUNLL!!UNLLUNLL!!UNLLUNLL!!!", "!!~LL!!!!~LL!!!!!!~LL!!!!~LL!!!!!!~LL!!!!~LL!!!!~LL!!!!~LL!!!!!!~LL!!!!~LL!!!!!!~LL!!!!~LL!!!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "L!LLL!LL!!L!LLL!LL!!L!LLL!LL!!L!LLL!LL!!L!LLL!LL!!L!LLL!LL!!L!LLL!LL!!L!LLL!LL!!L!LLL!LL!!L!LLL!LL!!L!LLL!LL!!L!LLL!LL!!L!LLL!LL!!L!LLL!LL!!L!LLL!LL!!L!LLL!LL!!L!LLL!LL!!L!LLL!LL!!L!LLL!LL!!L!LLL!LL!!L!LLL!LL!!L!LLL!LL!!L!LLL!LL!!L!LLL!LL!!L!LLL!LL!!L!LLL!LL!!L!LLL!LL!!L!LLL!LL!!L!LLL!LL!!L!LLL!LL!!L!LLL!LL!!L!LLL!LL!!!" + "'", str2, "L!LLL!LL!!L!LLL!LL!!L!LLL!LL!!L!LLL!LL!!L!LLL!LL!!L!LLL!LL!!L!LLL!LL!!L!LLL!LL!!L!LLL!LL!!L!LLL!LL!!L!LLL!LL!!L!LLL!LL!!L!LLL!LL!!L!LLL!LL!!L!LLL!LL!!L!LLL!LL!!L!LLL!LL!!L!LLL!LL!!L!LLL!LL!!L!LLL!LL!!L!LLL!LL!!L!LLL!LL!!L!LLL!LL!!L!LLL!LL!!L!LLL!LL!!L!LLL!LL!!L!LLL!LL!!L!LLL!LL!!L!LLL!LL!!L!LLL!LL!!L!LLL!LL!!L!LLL!LL!!!");
    }

    @Test
    public void test10471() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10471");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.decode("\u0366\u0365\u0368\u0368\u0346\u0348\u0348!", "NLLLNLLL!!NLLL~~NLLLNLLL!!NLLL~~NLLLNLLL!!NLLL~~NLLLNLLL!!NLLL~~NLLLNLLL!!NLLL~~NLLLNLLL!!NLLL~~NLLLNLLL!!NLLL~~NLLLNLLL!!NLLL~~!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\u0366\u0365\u0368\u0368\u0346\u0348\u0348!" + "'", str2, "\u0366\u0365\u0368\u0368\u0346\u0348\u0348!");
    }

    @Test
    public void test10472() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10472");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.encode("nullnull!!nullnull!!!!nullnull!!nullnull!!!!!!nullnull!!nullnull!!!!nullnull!!nullnull!!!!!!nullnull!!nullnull!!!!nullnull!!nullnull!!!!!!nullnull!!nullnull!!!!nullnull!!nullnull!!!!!!nullnull!!nullnull!!!!nullnull!!nullnull!!!!!!nullnull!!nullnull!!!!nullnull!!nullnull!!!!!!nullnull!!nullnull!!!!nullnull!!nullnull!!!!!!nullnull!!nullnull!!!!nullnull!!nullnull!!!!!!!", "\u01b3\u01b4\u01b8\u01b8\u01b3\u01b4\u01b8\u01b8\u01b3\u01b4\u01b8\u01b8\u01b3\u01b4\u01b8\u01b8\220\220\u01b3\u01b4\u01b8\u01b8\u01b3\u01b4\u01b8\u01b8\u01b3\u01b4\u01b8\u01b8\u01b3\u01b4\u01b8\u01b8\220\220\220\u01b3\u01b4\u01b8\u01b8\u01b3\u01b4\u01b8\u01b8\220\220\220\u01b3\u01b4\u01b8\u01b8\u01b3\u01b4\u01b8\u01b8\220\220\220\u01b3\u01b4\u01b8\u01b8\u01b3\u01b4\u01b8\u01b8\220\220\220\u01b3\u01b4\u01b8\u01b8\u01b3\u01b4\u01b8\u01b8\220\220\u01b3\u01b4\u01b8\u01b8\u01b3\u01b4\u01b8\u01b8\u01b3\u01b4\u01b8\u01b8\u01b3\u01b4\u01b8\u01b8\220\220\u01b3\u01b4\u01b8\u01b8\u01b3\u01b4\u01b8\u01b8\u01b3\u01b4\u01b8\u01b8\u01b3\u01b4\u01b8\u01b8\220\220!");
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\u01b3\220\220\u01b3\220\220\u01b3\220\220\u01b3\220\220\u01b3\220\220\u01b3\220\220\u01b3\220\220\u01b3\220\220\u01b3\220\220\u01b3\220\220\u01b3\220\220\u01b3\220\220\u01b3\220\220\u01b3\220\220\u01b3\220\220\u01b3\220\220\u01b3\220\220\u01b3\220\220\u01b3\220\220\u01b3\220\220\u01b3\220\220\u01b3\220\220\u01b3\220\220\u01b3\220\220\u01b3\220\220\u01b3\220\220\u01b3\220\220\u01b3\220\220\u01b3\220\220\u01b3\220\220\u01b3\220\220\u01b3\220\220\u01b3\220\220\u01b3\220\220\u01b3\220\220\u01b3\220\220\u01b3\220\220\u01b3\220\220\u01b3\220\220\u01b3\220\220\u01b3\220\220\u01b3\220\220\u01b3\220\220\u01b3\220\220\u01b3\220\220\u01b3\220\220\u01b3\220\220\u01b3\220\220\u01b3\220\220\u01b3\220\220\u01b3\220\220\u01b3\220\220\u01b3\220\220\u01b3\220\220\u01b3\220\220\u01b3\220\220\u01b3\220\220\u01b3\220\220\u01b3\220\220\u01b3\220\220\u01b3\220\220\u01b3\220\220\u01b3\220\220\u01b3\220\220!!!!!!!" + "'", str2, "\u01b3\220\220\u01b3\220\220\u01b3\220\220\u01b3\220\220\u01b3\220\220\u01b3\220\220\u01b3\220\220\u01b3\220\220\u01b3\220\220\u01b3\220\220\u01b3\220\220\u01b3\220\220\u01b3\220\220\u01b3\220\220\u01b3\220\220\u01b3\220\220\u01b3\220\220\u01b3\220\220\u01b3\220\220\u01b3\220\220\u01b3\220\220\u01b3\220\220\u01b3\220\220\u01b3\220\220\u01b3\220\220\u01b3\220\220\u01b3\220\220\u01b3\220\220\u01b3\220\220\u01b3\220\220\u01b3\220\220\u01b3\220\220\u01b3\220\220\u01b3\220\220\u01b3\220\220\u01b3\220\220\u01b3\220\220\u01b3\220\220\u01b3\220\220\u01b3\220\220\u01b3\220\220\u01b3\220\220\u01b3\220\220\u01b3\220\220\u01b3\220\220\u01b3\220\220\u01b3\220\220\u01b3\220\220\u01b3\220\220\u01b3\220\220\u01b3\220\220\u01b3\220\220\u01b3\220\220\u01b3\220\220\u01b3\220\220\u01b3\220\220\u01b3\220\220\u01b3\220\220\u01b3\220\220\u01b3\220\220\u01b3\220\220\u01b3\220\220\u01b3\220\220\u01b3\220\220!!!!!!!");
    }

    @Test
    public void test10473() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10473");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.encode("LL\300\300LL\300\300LL\300\300LL\300\300LL\300\300LL\300\300LL\300\300LL\300\300!", "\276\276!!nullnull\276\276nullnull\276\276nullnull\276\276\276\276!!\276\276!!\276\276!!\276\276!!\276\276!!\276\276!!\276\276!!\276\276!!\276\276!!\276\276!!\276\276!!\276\276!!\276\276!!\276\276!!\276\276!!\276\276!!\276\276!!nullnull\276\276nullnull\276\276nullnull\276\276\276\276!!\276\276!!\276\276!!\276\276!!\276\276!!\276\276!!\276\276!!\276\276!!!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "LLUULLUULLUULLUULLUULLUULLUULLUU!" + "'", str2, "LLUULLUULLUULLUULLUULLUULLUULLUU!");
    }

    @Test
    public void test10474() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10474");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.decode("\u023e\u023e\u023e\u023e!", "nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!!");
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "!!nullnull!!nullnull!" + "'", str2, "!!nullnull!!nullnull!");
    }

    @Test
    public void test10475() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10475");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.decode("\215\216\230\230UNLLUNLLUNLL\215\216\230\230UNLLUNLLUNLL\215\216\230\230UNLLUNLLUNLL\215\216\230\230UNLLUNLLUNLL\215\216\230\230UNLLUNLLUNLL\215\216\230\230UNLLUNLLUNLL\215\216\230\230UNLLUNLLUNLL\215\216\230\230UNLLUNLLUNLL!", "\276null\266\266~nullnull\276null\266\266~nullnull!!\276null\266\266~nullnull\276null\266\266~nullnull!!\276null\266\266~nullnull\276null\266\266~nullnull\276null\266\266~nullnull\276null\266\266~nullnull!!\276null\266\266~nullnull\276null\266\266~nullnull!!\276null\266\266~nullnull\276null\266\266~nullnull!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\215\216\230\230\u0106\u0105\u0108\u0108\u0106\u0105\u0108\u0108\u0106\u0105\u0108\u0108\215\216\230\230\u0106\u0105\u0108\u0108\u0106\u0105\u0108\u0108\u0106\u0105\u0108\u0108\215\216\230\230\u0106\u0105\u0108\u0108\u0106\u0105\u0108\u0108\u0106\u0105\u0108\u0108\215\216\230\230\u0106\u0105\u0108\u0108\u0106\u0105\u0108\u0108\u0106\u0105\u0108\u0108\215\216\230\230\u0106\u0105\u0108\u0108\u0106\u0105\u0108\u0108\u0106\u0105\u0108\u0108\215\216\230\230\u0106\u0105\u0108\u0108\u0106\u0105\u0108\u0108\u0106\u0105\u0108\u0108\215\216\230\230\u0106\u0105\u0108\u0108\u0106\u0105\u0108\u0108\u0106\u0105\u0108\u0108\215\216\230\230\u0106\u0105\u0108\u0108\u0106\u0105\u0108\u0108\u0106\u0105\u0108\u0108!" + "'", str2, "\215\216\230\230\u0106\u0105\u0108\u0108\u0106\u0105\u0108\u0108\u0106\u0105\u0108\u0108\215\216\230\230\u0106\u0105\u0108\u0108\u0106\u0105\u0108\u0108\u0106\u0105\u0108\u0108\215\216\230\230\u0106\u0105\u0108\u0108\u0106\u0105\u0108\u0108\u0106\u0105\u0108\u0108\215\216\230\230\u0106\u0105\u0108\u0108\u0106\u0105\u0108\u0108\u0106\u0105\u0108\u0108\215\216\230\230\u0106\u0105\u0108\u0108\u0106\u0105\u0108\u0108\u0106\u0105\u0108\u0108\215\216\230\230\u0106\u0105\u0108\u0108\u0106\u0105\u0108\u0108\u0106\u0105\u0108\u0108\215\216\230\230\u0106\u0105\u0108\u0108\u0106\u0105\u0108\u0108\u0106\u0105\u0108\u0108\215\216\230\230\u0106\u0105\u0108\u0108\u0106\u0105\u0108\u0108\u0106\u0105\u0108\u0108!");
    }

    @Test
    public void test10476() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10476");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.decode("!!HH!!HH!!!!HH!!HH!!!!HH!!HH!!HH!!HH!!HH!!HH!!HH!!HH!!HH!!HH!!!!HH!!HH!!!!HH!!HH!!HH!!HH!!HH!!HH!!HH!!HH!!HH!!HH!!!!HH!!HH!!!!HH!!HH!!HH!!HH!!HH!!HH!!HH!!HH!!HH!!HH!!!!HH!!HH!!!!HH!!HH!!HH!!HH!!HH!!HH!!HH!!HH!!HH!!HH!!!!HH!!HH!!!!HH!!HH!!HH!!HH!!HH!!HH!!HH!!HH!!HH!!HH!!!!HH!!HH!!!!HH!!HH!!HH!!HH!!HH!!HH!!HH!!HH!!HH!!HH!!!!HH!!HH!!!!HH!!HH!!HH!!HH!!HH!!HH!!HH!!HH!!HH!!HH!!!!HH!!HH!!!!HH!!HH!!HH!!HH!!HH!!HH!!HH!!HH!", "LUUULUUU!!``LUUULUUU``LUUULUUU``LUUULUUULUUULUUU!!LUUULUUU!!LUUULUUU!!LUUULUUU!!LUUULUUU!!LUUULUUU!!LUUULUUU!!LUUULUUU!!LUUULUUU!!LUUULUUU!!LUUULUUU!!LUUULUUU!!LUUULUUU!!LUUULUUU!!LUUULUUU!!LUUULUUU!!LUUULUUU!!``LUUULUUU``LUUULUUU``LUUULUUULUUULUUU!!LUUULUUU!!LUUULUUU!!LUUULUUU!!LUUULUUU!!LUUULUUU!!LUUULUUU!!LUUULUUU!!!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "!!nullnull!!nullnull!!!!nullnull!!nullnull!!!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!!!nullnull!!nullnull!!!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!!!nullnull!!nullnull!!!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!!!nullnull!!nullnull!!!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!!!nullnull!!nullnull!!!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!!!nullnull!!nullnull!!!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!!!nullnull!!nullnull!!!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!!!nullnull!!nullnull!!!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!" + "'", str2, "!!nullnull!!nullnull!!!!nullnull!!nullnull!!!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!!!nullnull!!nullnull!!!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!!!nullnull!!nullnull!!!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!!!nullnull!!nullnull!!!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!!!nullnull!!nullnull!!!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!!!nullnull!!nullnull!!!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!!!nullnull!!nullnull!!!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!!!nullnull!!nullnull!!!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!");
    }

    @Test
    public void test10477() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10477");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.encode("\u0346\u0348\u0348\u0348\u022d\u022e\u0230\u0230\u022d\u022e\u0230\u0230\u022d\u022e\u0230\u0230\u022d\u022e\u0230\u0230\u022d\u022e\u0230\u0230\u022d\u022e\u0230\u0230\u022d\u022e\u0230\u0230\u022d\u022e\u0230\u0230\u022d\u022e\u0230\u0230\u022d\u022e\u0230\u0230\u022d\u022e\u0230\u0230\u022d\u022e\u0230\u0230\u022d\u022e\u0230\u0230\u022d\u022e\u0230\u0230\u022d\u022e\u0230\u0230\u022d\u022e\u0230\u0230\u0348\u0346\u0346!", "\u014f\u014f\u014f\u014f!uu!!!");
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\u0346\u0348\u0348\u0348\u0348\u0346\u0346!" + "'", str2, "\u0346\u0348\u0348\u0348\u0348\u0346\u0346!");
    }

    @Test
    public void test10478() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10478");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.decode("\u031d\u031e\u0320\u0320\u031d\u031e\u0320\u0320\u031d\u031e\u0320\u0320\u031d\u031e\u0320\u0320\u031d\u031e\u0320\u0320\u031d\u031e\u0320\u0320\u031d\u031e\u0320\u0320\u031d\u031e\u0320\u0320\u031d\u031e\u0320\u0320\u031d\u031e\u0320\u0320\u031d\u031e\u0320\u0320\u031d\u031e\u0320\u0320\u031d\u031e\u0320\u0320\u031d\u031e\u0320\u0320\u031d\u031e\u0320\u0320\u031d\u031e\u0320\u
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\u031d\u031e\u0320\u0320\u031d\u031e\u0320\u0320\u031d\u031e\u0320\u0320\u031d\u031e\u0320\u0320\u031d\u031e\u0320\u0320\u031d\u031e\u0320\u0320\u031d\u031e\u0320\u0320\u031d\u031e\u0320\u0320\u031d\u031e\u0320\u0320\u031d\u031e\u0320\u0320\u031d\u031e\u0320\u0320\u031d\u031e\u0320\u0320\u031d\u031e\u0320\u0320\u031d\u031e\u0320\u0320\u031d\u031e\u0320\u0320\u031d\u031e\u0320\u0320!" + "'", str2, "\u031d\u031e\u0320\u0320\u031d\u031e\u0320\u0320\u031d\u031e\u0320\u0320\u031d\u031e\u0320\u0320\u031d\u031e\u0320\u0320\u031d\u031e\u0320\u0320\u031d\u031e\u0320\u0320\u031d\u031e\u0320\u0320\u031d\u031e\u0320\u0320\u031d\u031e\u0320\u0320\u031d\u031e\u0320\u0320\u031d\u031e\u0320\u0320\u031d\u031e\u0320\u0320\u031d\u031e\u0320\u0320\u031d\u031e\u0320\u0320\u031d\u031e\u0320\u0320!");
    }

    @Test
    public void test10479() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10479");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.encode("\215}\215\215\215}\215\215nullnullnullnull\215}\215\215\215}\215\215!", "llLL~llLLllLLllLL~llLLllLL!!llLL~llLLllLLllLL~llLLllLL!!llLL~llLLllLLllLL~llLLllLLllLL~llLLllLLllLL~llLLllLL!!llLL~llLLllLLllLL~llLLllLL!!llLL~llLLllLLllLL~llLLllLL!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\215}\215\215\215}\215\215~LLL~LLL~LLL~LLL\215}\215\215\215}\215\215!" + "'", str2, "\215}\215\215\215}\215\215~LLL~LLL~LLL~LLL\215}\215\215\215}\215\215!");
    }

    @Test
    public void test10480() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10480");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.encode("\236\237\241\241~\236\237\241\241\236\237\241\241\236\237\241\241~\236\237\241\241\236\237\241\241!!\236\237\241\241~\236\237\241\241\236\237\241\241\236\237\241\241~\236\237\241\241\236\237\241\241!!\236\237\241\241~\236\237\241\241\236\237\241\241\236\237\241\241~\236\237\241\241\236\237\241\241\236\237\241\241~\236\237\241\241\236\237\241\241\236\237\241\241~\236\237\241\241\236\237\241\241!!\236\237\241\241~\236\237\241\241\236\237\241\241\236\237\241\241~\236\237\241\241\236\237\241\241!!\236\237\241\241~\236\237\241\241\236\237\241\241\236\237\241\241~
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\236\237\241\241~\236\237\241\241\236\237\241\241\236\237\241\241~\236\237\241\241\236\237\241\241!!\236\237\241\241~\236\237\241\241\236\237\241\241\236\237\241\241~\236\237\241\241\236\237\241\241!!\236\237\241\241~\236\237\241\241\236\237\241\241\236\237\241\241~\236\237\241\241\236\237\241\241\236\237\241\241~\236\237\241\241\236\237\241\241\236\237\241\241~\236\237\241\241\236\237\241\241!!\236\237\241\241~\236\237\241\241\236\237\241\241\236\237\241\241~\236\237\241\241\236\237\241\241!!\236\237\241\241~\236\237\241\241\236\237\241\241\236\237\241\241~\236\237\241\241\236\237\241\241!" + "'", str2, "\236\237\241\241~\236\237\241\241\236\237\241\241\236\237\241\241~\236\237\241\241\236\237\241\241!!\236\237\241\241~\236\237\241\241\236\237\241\241\236\237\241\241~\236\237\241\241\236\237\241\241!!\236\237\241\241~\236\237\241\241\236\237\241\241\236\237\241\241~\236\237\241\241\236\237\241\241\236\237\241\241~\236\237\241\241\236\237\241\241\236\237\241\241~\236\237\241\241\236\237\241\241!!\236\237\241\241~\236\237\241\241\236\237\241\241\236\237\241\241~\236\237\241\241\236\237\241\241!!\236\237\241\241~\236\237\241\241\236\237\241\241\236\237\241\241~\236\237\241\241\236\237\241\241!");
    }

    @Test
    public void test10481() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10481");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.decode("!\253\256\256\266\220\216!!\271\271\266\220\216!!\271\271\266\220\216!!\271\271\266\220\216!!\271\271\266\220\216!!\271\271\266\220\216!!\271\271\266\220\216!!\271\271\266\220\216!!\271\271\266\220\216!!\271\271\266\220\216!!\271\271\266\220\216!!\271\271\266\220\216!!\271\271!\253\256\256!\253\256\256!\253\256\256!\253\256\256!\253\256\256!\253\256\256!\253\256\256!\253\256\256!\253\256\256!\253\256\256!\253\256\256!\253\256\256!\253\256\256!\253\256\256!\253\256\256!\253\256\256!\253\256\256\266\220\216!!\271\271\266\220\216!!\271\271\266\220\216!!\271\271\266\220\216!!\271\271\266\220\216!!\271\271\266\220\216!!\271\271\266\220\216!!\271\271\266\220\216!!\271\271\266\220\216!!\271\271\266\220\216!!\271\271\266\220\216!!\271\271\266\220\216!!\271\271!\253\256\256!\253\256\256!\253\256\256!\253\256\256!\253\256\256!\253\256\256!\253\256\256!\253\256\256!", "]\204]]]\204]]]\204]]]\204]]]]]]]]]]]]]]]]]]]\204]]]\204]]]\204]]]\204]]]]]]]]]]!");
        org.junit.Assert.assertEquals("'" + strstr
    }

    @Test
    public void test10482() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10482");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.decode("", "\214\214\214\214\214\214\214\214\214\214\214\214\214\214\214\214\214\214\214\214\214\214\214\214\214\214\214\214\214\214\214\214!!\214\214\214\214\214\214\214\214\214\214\214\214\214\214\214\214\214\214\214\214\214\214\214\214\214\214\214\214\214\214\214\214!!\214\214\214\214\214\214\214\214\214\214\214\214\214\214\214\214\214\214\214\214\214\214\214\214\214\214\214\214\214\214\214\214\214\214\214\214\214\214\214\214\214\214\214\214\214\214\214\214\214\214\214\214\214\214\214\214\214\214\214\214\214\214\214\214!!\214\214\214\214\214\214\214\214\214\214\214\214\214\214\214\214\214\214\214\214\214\214\214\214\214\214\214\214\214\214\214\214!!\214\214\214\214\214\214\214\214\214\214\214\214\214\214\214\214\214\214\214\214\214\214\214\214\214\214\214\214\214\214\214\214!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
    }

    @Test
    public void test10483() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10483");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.decode("!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!", "\u03dd\u03de\u03e0\u03e0nullnullnullnull!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!" + "'", str2, "!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!");
    }

    @Test
    public void test10484() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10484");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.encode("\204\241\242\244\244\204\204\204\241\242\244\244\204\204!!\204\241\242\244\244\204\204\204\241\242\244\244\204\204!!\204\241\242\244\244\204\204\204\241\242\244\244\204\204\204\241\242\244\244\204\204\204\241\242\244\244\204\204!!\204\241\242\244\244\204\204\204\241\242\244\244\204\204!!\204\241\242\244\244\204\204\204\241\242\244\244\204\204!", "\u01a0\u01a0\u01a0\u01a0\u01a0\u01a0\u01a0\u01a0\u01a0\u01a0\u01a0\u01a0\u01a0\u01a0\u01a0\u01a0\u01a0\u01a0\u01a0\u01a0nullnull!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\204\241\242\244\244\204\204\204\241\242\244\244\204\204!!\204\241\242\244\244\204\204\204\241\242\244\244\204\204!!\204\241\242\244\244\204\204\204\241\242\244\244\204\204\204\241\242\244\244\204\204\204\241\242\244\244\204\204!!\204\241\242\244\244\204\204\204\241\242\244\244\204\204!!\204\241\242\244\244\204\204\204\241\242\244\244\204\204!" + "'", str2, "\204\241\242\244\244\204\204\204\241\242\244\244\204\204!!\204\241\242\244\244\204\204\204\241\242\244\244\204\204!!\204\241\242\244\244\204\204\204\241\242\244\244\204\204\204\241\242\244\244\204\204\204\241\242\244\244\204\204!!\204\241\242\244\244\204\204\204\241\242\244\244\204\204!!\204\241\242\244\244\204\204\204\241\242\244\244\204\204!");
    }

    @Test
    public void test10485() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10485");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.encode
        org.junit.Assert.assertEquals("'" + strstr
    }

    @Test
    public void test10486() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10486");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.encode("null!!!null!!!null!!!null!!!\256\254\254null!!!null!!!null!!!null!!!\256\254\254!!null!!!null!!!null!!!null!!!\256\254\254null!!!null!!!null!!!null!!!\256\254\254!!null!!!null!!!null!!!null!!!\256\254\254null!!!null!!!null!!!null!!!\256\254\254!!null!!!null!!!null!!!null!!!\256\254\254null!!!null!!!null!!!null!!!\256\254\254!!null!!!null!!!null!!!null!!!\256\254\254null!!!null!!!null!!!null!!!\256\254\254!!null!!!null!!!null!!!null!!!\256\254\254null!!!null!!!null!!!null!!!\256\254\254!!null!!!null!!!null!!!null!!!\256\254\254null!!!null!!!null!!!null!!!\256\254\254!!null!!!null!!!null!!!null!!!\256\254\254null!!!null!!!null!!!null!!!\256\254\254!!!", "]~^\200\200``]~^\200\200````]~^\200\200``]~^\200\200````!!]~^\200\200``]~^\200\200````]~^\200\200``]~^\200\200````!!]~^\200\200``]~^\200\200````]~^\200\200``]~^\200\200````!!]~^\200\200``]~^\200\200````]~^\200\200``]~^\200\200````!!]~^\200\200``]~^\200\200````]~^\200\200``]~^\200\200````!!]~^\200\200``]~^\200\200````]~^\200\200``]~^\200\200````!!]~^\200\200``]~^\200\200````]~^\200\200``]~^\200\200````!!]~^\200\200``]~^\200\200````]~^\200\200``]~^\200\200````!!!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\200^^^!!!\200^^^!!!\200^^^!!!\200^^^!!!\256\254\254\200^^^!!!\200^^^!!!\200^^^!!!\200^^^!!!\256\254\254!!\200^^^!!!\200^^^!!!\200^^^!!!\200^^^!!!\256\254\254\200^^^!!!\200^^^!!!\200^^^!!!\200^^^!!!\256\254\254!!\200^^^!!!\200^^^!!!\200^^^!!!\200^^^!!!\256\254\254\200^^^!!!\200^^^!!!\200^^^!!!\200^^^!!!\256\254\254!!\200^^^!!!\200^^^!!!\200^^^!!!\200^^^!!!\256\254\254\200^^^!!!\200^^^!!!\200^^^!!!\200^^^!!!\256\254\254!!\200^^^!!!\200^^^!!!\200^^^!!!\200^^^!!!\256\254\254\200^^^!!!\200^^^!!!\200^^^!!!\200^^^!!!\256\254\254!!\200^^^!!!\200^^^!!!\200^^^!!!\200^^^!!!\256\254\254\200^^^!!!\200^^^!!!\200^^^!!!\200^^^!!!\256\254\254!!\200^^^!!!\200^^^!!!\200^^^!!!\200^^^!!!\256\254\254\200^^^!!!\200^^^!!!\200^^^!!!\200^^^!!!\256\254\254!!\200^^^!!!\200^^^!!!\200^^^!!!\200^^^!!!\256\254\254\200^^^!!!\200^^^!!!\200^^^!!!\200^^^!!!\256\254\254!!!" + "'", str2, "\200^^^!!!\200^^^!!!\200^^^!!!\200^^^!!!\256\254\254\200^^^!!!\200^^^!!!\200^^^!!!\200^^^!!!\256\254\254!!\200^^^!!!\200^^^!!!\200^^^!!!\200^^^!!!\256\254\254\200^^^!!!\200^^^!!!\200^^^!!!\200^^^!!!\256\254\254!!\200^^^!!!\200^^^!!!\200^^^!!!\200^^^!!!\256\254\254\200^^^!!!\200^^^!!!\200^^^!!!\200^^^!!!\256\254\254!!\200^^^!!!\200^^^!!!\200^^^!!!\200^^^!!!\256\254\254\200^^^!!!\200^^^!!!\200^^^!!!\200^^^!!!\256\254\254!!\200^^^!!!\200^^^!!!\200^^^!!!\200^^^!!!\256\254\254\200^^^!!!\200^^^!!!\200^^^!!!\200^^^!!!\256\254\254!!\200^^^!!!\200^^^!!!\200^^^!!!\200^^^!!!\256\254\254\200^^^!!!\200^^^!!!\200^^^!!!\200^^^!!!\256\254\254!!\200^^^!!!\200^^^!!!\200^^^!!!\200^^^!!!\256\254\254\200^^^!!!\200^^^!!!\200^^^!!!\200^^^!!!\256\254\254!!\200^^^!!!\200^^^!!!\200^^^!!!\200^^^!!!\256\254\254\200^^^!!!\200^^^!!!\200^^^!!!\200^^^!!!\256\254\254!!!");
    }

    @Test
    public void test10487() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10487");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.encodenullnull!!HH!!HHnullnull!!HH!!HHnullnull!!HH!!HHnullnull!!HH!!HHnullnull!!HH!!HHnullnull!!HH!!HHnullnull!!HH!!HHnullnull!!HH!!HHnullnull!!HH!!HHnullnull!!HH!!HHnullnull!!HH!!HHnullnull!!HH!!HHnullnull!!HH!!HHnullnull!!HH!!HHnullnull!!HH!!HHnullnull!!HH!!HHnullnull!!HH!!HHnullnull!!HH!!HHnullnull!!HH!!HHnullnull!!HH!!HHnullnull!!HH!!HHnullnull!!HH!!HHnullnull!!HH!!HHnullnull!!HH!!HHnullnull!!HH!!HHnullnull!!HH!!HHnullnull!!HH!!HHnullnull!!HH!!HHnullnull!!HH!!HHnullnull!!HH!!HHnullnull!!HH!!HHnullnull!!HH!!HH!");
        org.junit.Assert.assertEquals("'" + strstr
    }

    @Test
    public void test10488() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10488");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.decode("\u0108\u0108\u0108\u0108\u0108\u0108\u0108\u0108\u0108\u0108\u0108\u0108\u0108\u0108\u0108\u
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!!" + "'", str2, "nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!!");
    }

    @Test
    public void test10489() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10489");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.decode("\335\336\340\340\335\336\340\340!!\335\336\340\340\335\336\340\340!!\335\336\340\340\335\336\340\340!!\335\336\340\340\335\336\340\340!!\335\336\340\340\335\336\340\340!!\335\336\340\340\335\336\340\340!!\335\336\340\340\335\336\340\340!!\335\336\340\340\335\336\340\340!!!", "\u0270\u0270\u0270\u0270\u0270\u0270\u0270\u0270\u0270\u0270\u0270\u0270\u0270\u0270\u0270\u0270\u0270\u0270\u0270\u0270\u0270\u0270\u0270\u0270!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "nullnullnullnullnullnullnullnull!!nullnullnullnullnullnullnullnull!!nullnullnullnullnullnullnullnull!!nullnullnullnullnullnullnullnull!!nullnullnullnullnullnullnullnull!!nullnullnullnullnullnullnullnull!!nullnullnullnullnullnullnullnull!!nullnullnullnullnullnullnullnull!!!" + "'", str2, "nullnullnullnullnullnullnullnull!!nullnullnullnullnullnullnullnull!!nullnullnullnullnullnullnullnull!!nullnullnullnullnullnullnullnull!!nullnullnullnullnullnullnullnull!!nullnullnullnullnullnullnullnull!!nullnullnullnullnullnullnullnull!!nullnullnullnullnullnullnullnull!!!");
    }

    @Test
    public void test10490() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10490");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.decode("\u032d\200\200\u032d\200\200\u032d\200\200\u032d\200\200\u032e\u0330\u0330\u0330\u032e\u0330\u0330\u0330\u032e\u0330\u0330\u0330\u032e\u0330\u0330\u0330\u032d\200\200\u032d\200\200\u032d\200\200\u032d\200\200\u032e\u0330\u0330\u0330\u032e\u0330\u0330\u0330!", "LLLLnullnullnullnullLLLLnullnull!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\u032d\200\200\u032d\200\200\u032d\200\200\u032d\200\200\u032e\u0330\u0330\u0330\u032e\u0330\u0330\u0330\u032e\u0330\u0330\u0330\u032e\u0330\u0330\u0330\u032d\200\200\u032d\200\200\u032d\200\200\u032d\200\200\u032e\u0330\u0330\u0330\u032e\u0330\u0330\u0330!" + "'", str2, "\u032d\200\200\u032d\200\200\u032d\200\200\u032d\200\200\u032e\u0330\u0330\u0330\u032e\u0330\u0330\u0330\u032e\u0330\u0330\u0330\u032e\u0330\u0330\u0330\u032d\200\200\u032d\200\200\u032d\200\200\u032d\200\200\u032e\u0330\u0330\u0330\u032e\u0330\u0330\u0330!");
    }

    @Test
    public void test10491() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10491");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.decode("LL!!}`}}}`}}}`}}LL!!LL!!LL!!LL!!LL!!LL!!LL!!LL!!LL!!LL!!LL!!LL!!LL!!LL!!LL!!LL!!LL!!}`}}}`}}}`}}LL!!LL!!LL!!LL!!LL!!LL!!LL!!LL!!!", "N]^^N]^^N]^^N]^^N]^^N]^^N]^^N]^^!N]]!N]]N]^^N]^^N]^^N]^^N]^^N]^^N]^^N]^^!N]]!N]]N]^^N]^^N]^^N]^^N]^^N]^^N]^^N]^^!N]]!N]]N]^^N]^^N]^^N]^^N]^^N]^^N]^^N]^^!N]]!N]]N]^^N]^^N]^^N]^^N]^^N]^^N]^^N]^^!N]]!N]]N]^^N]^^N]^^N]^^N]^^N]^^N]^^N]^^!N]]!N]]N]^^N]^^N]^^N]^^N]^^N]^^N]^^N]^^!N]]!N]]N]^^N]^^N]^^N]^^N]^^N]^^N]^^N]^^!N]]!N]]!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "nullnull!!}`}}}`}}}`}}nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!}`}}}`}}}`}}nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!!" + "'", str2, "nullnull!!}`}}}`}}}`}}nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!}`}}}`}}}`}}nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!!");
    }

    @Test
    public void test10492() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10492");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.decode("nullnullnullnull\253\253\253\200}}`nullnullnullnull\253\253\253]]!", "!!]]!!]]\230\230\225\225\230\230\225\225]]\230\230\225\225\230\230\225\225]]!!]]!!]]\230\230\225\225\230\230\225\225]]\230\230\225\225\230\230\225\225]]!!]]!!]]\230\230\225\225\230\230\225\225]]\230\230\225\225\230\230\225\225]]!!]]!!]]\230\230\225\225\230\230\225\225]]\230\230\225\225\230\230\225\225]]!!]]!!]]\230\230\225\225\230\230\225\225]]\230\230\225\225\230\230\225\225]]!!]]!!]]\230\230\225\225\230\230\225\225]]\230\230\225\225\230\230\225\225]]!!]]!!]]\230\230\225\225\230\230\225\225]]\230\230\225\225\230\230\225\225]]!!]]!!]]\230\230\225\225\230\230\225\225]]\230\230\225\225\230\230\225\225]]!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "nullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull\253\253\253\200}}`nullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull\253\253\253]]!" + "'", str2, "nullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull\253\253\253\200}}`nullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull\253\253\253]]!");
    }

    @Test
    public void test10493() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10493");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.decode("]L}}]L}}!!]L}}]L}}!!]L}}]L}}!!]L}}]L}}!!]L}}]L}}!!]L}}]L}}!!]L}}]L}}!!]L}}]L}}!!]L}}]L}}!!]L}}]L}}!!]L}}]L}}!!]L}}]L}}!!]L}}]L}}!!]L}}]L}}!!]L}}]L}}!!]L}}]L}}!!]L}}]L}}!!]L}}]L}}!!]L}}]L}}!!]L}}]L}}!!]L}}]L}}!!]L}}]L}}!!]L}}]L}}!!]L}}]L}}!!]L}}]L}}!!]L}}]L}}!!]L}}]L}}!!]L}}]L}}!!]L}}]L}}!!]L}}]L}}!!]L}}]L}}!!]L}}]L}}!!!", "");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "]null}}]null}}!!]null}}]null}}!!]null}}]null}}!!]null}}]null}}!!]null}}]null}}!!]null}}]null}}!!]null}}]null}}!!]null}}]null}}!!]null}}]null}}!!]null}}]null}}!!]null}}]null}}!!]null}}]null}}!!]null}}]null}}!!]null}}]null}}!!]null}}]null}}!!]null}}]null}}!!]null}}]null}}!!]null}}]null}}!!]null}}]null}}!!]null}}]null}}!!]null}}]null}}!!]null}}]null}}!!]null}}]null}}!!]null}}]null}}!!]null}}]null}}!!]null}}]null}}!!]null}}]null}}!!]null}}]null}}!!]null}}]null}}!!]null}}]null}}!!]null}}]null}}!!]null}}]null}}!!!" + "'", str2, "]null}}]null}}!!]null}}]null}}!!]null}}]null}}!!]null}}]null}}!!]null}}]null}}!!]null}}]null}}!!]null}}]null}}!!]null}}]null}}!!]null}}]null}}!!]null}}]null}}!!]null}}]null}}!!]null}}]null}}!!]null}}]null}}!!]null}}]null}}!!]null}}]null}}!!]null}}]null}}!!]null}}]null}}!!]null}}]null}}!!]null}}]null}}!!]null}}]null}}!!]null}}]null}}!!]null}}]null}}!!]null}}]null}}!!]null}}]null}}!!]null}}]null}}!!]null}}]null}}!!]null}}]null}}!!]null}}]null}}!!]null}}]null}}!!]null}}]null}}!!]null}}]null}}!!]null}}]null}}!!!");
    }

    @Test
    public void test10494() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10494");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.encode("nullnullnullnull\260\255\255\225\230\230nullnullnullnull\260\255\255\225\230\230nullnullnullnull\260\255\255\225\230\230nullnullnullnull\260\255\255\225\230\230\200}}`nullnullnullnull\260\255\255\225\230\230nullnullnullnull\260\255\255\225\230\230nullnullnullnull\260\255\255\225\230\230nullnullnullnull\260\255\255\225\230\230]]!", "UULLUULLUULLUULLUULLUULLUULLUULL!!UULLUULLUULLUULLUULLUULLUULLUULL!!UULLUULLUULLUULLUULLUULLUULLUULLUULLUULLUULLUULLUULLUULLUULLUULL!!UULLUULLUULLUULLUULLUULLUULLUULL!!UULLUULLUULLUULLUULLUULLUULLUULL!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "LLUULLUULLUULLUU\260\255\255\225\230\230LLUULLUULLUULLUU\260\255\255\225\230\230LLUULLUULLUULLUU\260\255\255\225\230\230LLUULLUULLUULLUU\260\255\255\225\230\230\200}}`LLUULLUULLUULLUU\260\255\255\225\230\230LLUULLUULLUULLUU\260\255\255\225\230\230LLUULLUULLUULLUU\260\255\255\225\230\230LLUULLUULLUULLUU\260\255\255\225\230\230]]!" + "'", str2, "LLUULLUULLUULLUU\260\255\255\225\230\230LLUULLUULLUULLUU\260\255\255\225\230\230LLUULLUULLUULLUU\260\255\255\225\230\230LLUULLUULLUULLUU\260\255\255\225\230\230\200}}`LLUULLUULLUULLUU\260\255\255\225\230\230LLUULLUULLUULLUU\260\255\255\225\230\230LLUULLUULLUULLUU\260\255\255\225\230\230LLUULLUULLUULLUU\260\255\255\225\230\230]]!");
    }

    @Test
    public void test10495() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10495");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.encode("", "nullnullnullnullEULLEULLEULLnullnullnullnullEULLEULLEULLnullnullnullnullEULLEULLEULLnullnullnullnullEULLEULLEULLnullnullnullnullEULLEULLEULLnullnullnullnullEULLEULLEULLnullnullnullnullEULLEULLEULLnullnullnullnullEULLEULLEULL!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
    }

    @Test
    public void test10496() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10496");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.encodenullnullnullnullnullnullnullnullnullnull\214\214nullnull\214\214nullnullnullnullnullnullnullnullnullnull\214\214nullnull\214\214nullnullnullnullnullnullnullnullnullnull\214\214nullnull\214\214nullnullnullnullnullnullnullnullnullnull\214\214nullnull\214\214nullnullnullnullnullnullnullnullnullnull\214\214nullnull\214\214nullnullnullnullnullnullnullnullnullnull\214\214nullnull\214\214nullnullnullnullnullnullnullnullnullnull\214\214nullnull\214\214nullnullnullnullnullnullnullnullnullnull\214\214nullnull\214\214!");
        org.junit.Assert.assertEquals("'" + strstr2, "LL\253\253\256LL\253\253\254\254LL\253\253LL\253\253LL\253\253\256LL\253\253\254\254LL\253\253LL\253\253!!LL\253\253\256LL\253\253\254\254LL\253\253LL\253\253LL\253\253\256LL\253\253\254\254LL\253\253LL\253\253!!LL\253\253\256LL\253\253\254\254LL\253\253LL\253\253LL\253\253\256LL\253\253\254\254LL\253\253LL\253\253!!LL\253\253\256LL\253\253\254\254LL\253\253LL\253\253LL\253\253\256LL\253\253\254\254LL\253\253LL\253\253!!LL\253\253\256LL\253\253\254\254LL\253\253LL\253\253LL\253\253\256LL\253\253\254\254LL\253\253LL\253\253!!LL\253\253\256LL\253\253\254\254LL\253\253LL\253\253LL\253\253\256LL\253\253\254\254LL\253\253LL\253\253!!LL\253\253\256LL\253\253\254\254LL\253\253LL\253\253LL\253\253\256LL\253\253\254\254LL\253\253LL\253\253!!LL\253\253\256LL\253\253\254\254LL\253\253LL\253\253LL\253\253\256LL\253\253\254\254LL\253\253LL\253\253!!!");
    }

    @Test
    public void test10497() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10497");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.encode("`}``\275`}```}```}``\275`}```}```}``\275`}```}```}``\275`}```}```}``\275`}```}```}``\275`}```}```}``\275`}```}```}``\275`}```}``}`}``\200\200}`}``\200\200}`}``\200\200}`}``\200\200}`}``\200\200}`}``\200\200}`}``\200\200}`}``\200\200`}``\275`}```}```}``\275`}```}```}``\275`}```}```}``\275`}```}```}``\275`}```}```}``\275`}```}```}``\275`}```}```}``\275`}```}``}`}``\200\200}`}``\200\200}`}``\200\200}`}``\200\200}`}``\200\200}`}``\200\200}`}``\200\200}`}``
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "`}``\275`}```}```}``\275`}```}```}``\275`}```}```}``\275`}```}```}``\275`}```}```}``\275`}```}```}``\275`}```}```}``\275`}```}``}`}``\200\200}`}``\200\200}`}``\200\200}`}``\200\200}`}``\200\200}`}``\200\200}`}``\200\200}`}``\200\200`}``\275`}```}```}``\275`}```}```}``\275`}```}```}``\275`}```}```}``\275`}```}```}``\275`}```}```}``\275`}```}```}``\275`}```}``}`}``\200\200}`}``\200\200}`}``\200\200}`}``\200\200}`}``\200\200}`}``\200\200}`}``\200\200}`}``\200\200!" + "'", str2, "`}``\275`}```}```}``\275`}```}```}``\275`}```}```}``\275`}```}```}``\275`}```}```}``\275`}```}```}``\275`}```}```}``\275`}```}``}`}``\200\200}`}``\200\200}`}``\200\200}`}``\200\200}`}``\200\200}`}``\200\200}`}``\200\200}`}``\200\200`}``\275`}```}```}``\275`}```}```}``\275`}```}```}``\275`}```}```}``\275`}```}```}``\275`}```}```}``\275`}```}```}``\275`}```}``}`}``\200\200}`}``\200\200}`}``\200\200}`}``\200\200}`}``\200\200}`}``\200\200}`}``\200\200}`}``\200\200!");
    }

    @Test
    public void test10498() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10498");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.encode("\u0197\u0197\u0197\u0197\u0197\u0197\u0197\u0197\u0197\u0197\u0197\u0197\u0197\u0197\u0197\u0197\u0197\u0197\u0197\u0197\u0197\u0197\u0197\u0197nullnullnullnullnullnullnull!", "\u031e\u031e\u031e\u031e\u031e\u031e\u031e\u031eUNLLLUUUNLLLUU!");
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "LlUUnullLlUULlUULlUULlUULlUULlUUnullLlUULlUULlUULlUULlUULlUULlUULlUUnullLlUULlUULlUULlUULlUULlUUnullLlUULlUULlUULlUULlUULlUULlUU!!LlUUnullLlUULlUULlUULlUULlUULlUUnullLlUULlUULlUULlUULlUULlUULlUULlUUnullLlUULlUULlUULlUULlUULlUUnullLlUULlUULlUULlUULlUULlUULlUU!!LlUUnullLlUULlUULlUULlUULlUULlUUnullLlUULlUULlUULlUULlUULlUULlUULlUUnullLlUULlUULlUULlUULlUULlUUnullLlUULlUULlUULlUULlUULlUULlUULlUUnullLlUULlUULlUULlUULlUULlUUnullLlUULlUULlUULlUULlUULlUULlUULlUUnullLlUULlUULlUULlUULlUULlUUnullLlUULlUULlUULlUULlUULlUULlUU!!LlUUnullLlUULlUULlUULlUULlUULlUUnullLlUULlUULlUULlUULlUULlUULlUULlUUnullLlUULlUULlUULlUULlUULlUUnullLlUULlUULlUULlUULlUULlUULlUU!!LlUUnullLlUULlUULlUULlUULlUULlUUnullLlUULlUULlUULlUULlUULlUULlUULlUUnullLlUULlUULlUULlUULlUULlUUnullLlUULlUULlUULlUULlUULlUULlUU!" + "'", str2, "LlUUnullLlUULlUULlUULlUULlUULlUUnullLlUULlUULlUULlUULlUULlUULlUULlUUnullLlUULlUULlUULlUULlUULlUUnullLlUULlUULlUULlUULlUULlUULlUU!!LlUUnullLlUULlUULlUULlUULlUULlUUnullLlUULlUULlUULlUULlUULlUULlUULlUUnullLlUULlUULlUULlUULlUULlUUnullLlUULlUULlUULlUULlUULlUULlUU!!LlUUnullLlUULlUULlUULlUULlUULlUUnullLlUULlUULlUULlUULlUULlUULlUULlUUnullLlUULlUULlUULlUULlUULlUUnullLlUULlUULlUULlUULlUULlUULlUULlUUnullLlUULlUULlUULlUULlUULlUUnullLlUULlUULlUULlUULlUULlUULlUULlUUnullLlUULlUULlUULlUULlUULlUUnullLlUULlUULlUULlUULlUULlUULlUU!!LlUUnullLlUULlUULlUULlUULlUULlUUnullLlUULlUULlUULlUULlUULlUULlUULlUUnullLlUULlUULlUULlUULlUULlUUnullLlUULlUULlUULlUULlUULlUULlUU!!LlUUnullLlUULlUULlUULlUULlUULlUUnullLlUULlUULlUULlUULlUULlUULlUULlUUnullLlUULlUULlUULlUULlUULlUUnullLlUULlUULlUULlUULlUULlUULlUU!");
    }

    @Test
    public void test10499() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10499");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.encode("\u0106\u0108\u0108\u0108\u0106\u0108\u0108\u0108\u0108\u0108\u0106\u0108\u0108\u0108\u0106\u0108\u0108\u0108\u0108\u0108\u0106\u0108\u0108\u0108\u0106\u0108\u0108\u0108\u0108\u0108\u0106\u0108\u0108\u0108\u0106\u0108\u0108\u0108\u0108\u0108\u0106\u0108\u0108\u0108\u0106\u0108\u0108\u0108\u0108\u0108\u0106\u0108\u0108\u0108\u0106\u0108\u0108\u0108\u0108\u0108\u0106\u0108\u0108\u0108\u0106\u0108\u0108\u0108\u0108\u0108\u0106\u0108\u0108\u0108\u0106\u0108\u0108\u0108\u0108\u0108\u0106\u0108\u0108\u0108\u0106\u0108\u0108\u0108\u0108\u0108\u0106\u0108\u0108\u0108\u0106\u0108\u0108\u0108\u0108\u0108\u0106\u0108\u0108\u0108\u0106\u0108\u0108\u0108\u0108\u0108\u0106\u0108\u0108\u0108\u0106\u0108\u0108\u0108\u0108\u0108!", "");
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "nullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull!!nullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull!!nullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull!!nullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull!!nullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull!" + "'", str2, "nullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull!!nullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull!!nullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull!!nullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull!!nullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull!");
    }

    @Test
    public void test10500() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10500");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.encode("\275!\275!!!\275!!!\275!!\275!\275!!!\275!!!\275!!\275!\275!!!\275!!!\275!!\275!\275!!!\275!!!\275!!!\275!!!\275!!\275\275!\275!!!\275!!\275\275!\275!!!\275!!\275\275!\275!!!\275!!\275\275\275!\275!!!\275!!!\275!!\275!\275!!!\275!!!\275!!\275!\275!!!\275!!!\275!!\275!\275!!!\275!!!\275!!!\275!!!\275!!\275\275!\275!!!\275!!\275\275!", "!nullnullnullnullnullnullnullnullnullnullnullnull!nullnullnullnullnullnullnullnullnullnullnullnull!nullnullnullnullnullnullnullnullnullnullnullnull!nullnullnullnullnullnullnullnullnullnullnullnull!nullnullnullnullnullnullnullnullnullnullnullnull!nullnullnullnullnullnullnullnullnullnullnullnull!nullnullnullnullnullnullnullnullnullnullnullnull!nullnullnullnullnullnullnullnullnullnullnullnull!nullnullnullnullnullnullnullnullnullnullnullnull!nullnullnullnullnullnullnullnullnullnullnullnull!nullnullnullnullnullnullnullnullnullnullnullnull!nullnullnullnullnullnullnullnullnullnullnullnull!nullnullnullnullnullnullnullnullnullnullnullnull!nullnullnullnullnullnullnullnullnullnullnullnull!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\275!\275!!!\275!!!\275!!\275!\275!!!\275!!!\275!!\275!\275!!!\275!!!\275!!\275!\275!!!\275!!!\275!!!\275!!!\275!!\275\275!\275!!!\275!!\275\275!\275!!!\275!!\275\275!\275!!!\275!!\275\275\275!\275!!!\275!!!\275!!\275!\275!!!\275!!!\275!!\275!\275!!!\275!!!\275!!\275!\275!!!\275!!!\275!!!\275!!!\275!!\275\275!\275!!!\275!!\275\275!" + "'", str2, "\275!\275!!!\275!!!\275!!\275!\275!!!\275!!!\275!!\275!\275!!!\275!!!\275!!\275!\275!!!\275!!!\275!!!\275!!!\275!!\275\275!\275!!!\275!!\275\275!\275!!!\275!!\275\275!\275!!!\275!!\275\275\275!\275!!!\275!!!\275!!\275!\275!!!\275!!!\275!!\275!\275!!!\275!!!\275!!\275!\275!!!\275!!!\275!!!\275!!!\275!!\275\275!\275!!!\275!!\275\275!");
    }
}
